<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\xaml-platform\index.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">4deae037857312f891c8c4beae2b6a89adc152cd</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>This section includes topics that explain programming concepts that are generally applicable to any app that you write.</source>
          <target>This section includes topics that explain programming concepts that are generally applicable to any app that you write.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>XAML platform</source>
          <target>XAML platform</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>XAML platform</source>
          <target>XAML platform</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>This section includes topics that explain programming concepts that are generally applicable to any app that you write, if you are using C#, Microsoft Visual Basic, or Visual C++ component extensions (C++/CX) as your programming language and XAML for your UI definition.</source>
          <target>This section includes topics that explain programming concepts that are generally applicable to any app that you write, if you are using C#, Microsoft Visual Basic, or Visual C++ component extensions (C++/CX) as your programming language and XAML for your UI definition.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>This includes basic programming concepts such as using properties and events, and how these apply to Universal Windows Platform (UWP) app programming.</source>
          <target>This includes basic programming concepts such as using properties and events, and how these apply to Universal Windows Platform (UWP) app programming.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>The Universal Windows Platform (UWP) extends C#, Visual Basic, or C++/CX concepts of properties and their values by adding the dependency property system.</source>
          <target>The Universal Windows Platform (UWP) extends C#, Visual Basic, or C++/CX concepts of properties and their values by adding the dependency property system.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Topics in this section also document the XAML language as it is used by the UWP, and cover basic scenarios and advanced topics explaining how to use XAML to define the UI for your UWP app.</source>
          <target>Topics in this section also document the XAML language as it is used by the UWP, and cover basic scenarios and advanced topics explaining how to use XAML to define the UI for your UWP app.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Topic</source>
          <target>Topic</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>XAML overview</source>
          <target>XAML overview</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>We introduce the XAML language and XAML concepts to the Windows Runtime app developer audience, and describe the different ways to declare objects and set attributes in XAML as it is used for creating a Windows Runtime app.</source>
          <target>We introduce the XAML language and XAML concepts to the Windows Runtime app developer audience, and describe the different ways to declare objects and set attributes in XAML as it is used for creating a Windows Runtime app.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Dependency properties overview</source>
          <target>Dependency properties overview</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>This topic explains the dependency property system that is available when you write a Windows Runtime app using C++, C#, or Visual Basic along with XAML definitions for UI.</source>
          <target>This topic explains the dependency property system that is available when you write a Windows Runtime app using C++, C#, or Visual Basic along with XAML definitions for UI.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Custom dependency properties</source>
          <target>Custom dependency properties</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Explains how to define and implement custom dependency properties for a Windows Runtime app using C++, C#, or Visual Basic.</source>
          <target>Explains how to define and implement custom dependency properties for a Windows Runtime app using C++, C#, or Visual Basic.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Attached properties overview</source>
          <target>Attached properties overview</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Explains the concept of an attached property in XAML, and provides some examples.</source>
          <target>Explains the concept of an attached property in XAML, and provides some examples.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Custom attached properties</source>
          <target>Custom attached properties</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Explains how to implement a XAML attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.</source>
          <target>Explains how to implement a XAML attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Events and routed events overview</source>
          <target>Events and routed events overview</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>We describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or C++/CX as your programming language, and XAML for your UI definition.</source>
          <target>We describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or C++/CX as your programming language, and XAML for your UI definition.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>You can assign handlers for events as part of the declarations for UI elements in XAML, or you can add the handlers in code.</source>
          <target>You can assign handlers for events as part of the declarations for UI elements in XAML, or you can add the handlers in code.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Windows Runtime supports <pc dataRefEnd="id2" dataRefStart="id1" id="p1">routed events</pc>: certain input events and data events can be handled by objects beyond the object that fired the event.</source>
          <target>Windows Runtime supports <pc dataRefEnd="id2" dataRefStart="id1" id="p1">routed events</pc>: certain input events and data events can be handled by objects beyond the object that fired the event.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Routed events are useful when you define control templates, or use pages or layout containers.</source>
          <target>Routed events are useful when you define control templates, or use pages or layout containers.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>