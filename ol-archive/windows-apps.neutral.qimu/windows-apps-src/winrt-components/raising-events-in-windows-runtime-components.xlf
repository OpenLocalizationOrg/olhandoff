<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\winrt-components\raising-events-in-windows-runtime-components.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">54934cba0e26da547e09b95a63d2c63363eaf85d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Raising Events in Windows Runtime Components</source>
          <target>Raising Events in Windows Runtime Components</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Raising Events in Windows Runtime Components</source>
          <target>Raising Events in Windows Runtime Components</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="104">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>If your Windows Runtime component raises an event of a user-defined delegate type on a background thread (worker thread) and you want JavaScript to be able to receive the event, you can implement and/or raise it in one of these ways:</source>
          <target>If your Windows Runtime component raises an event of a user-defined delegate type on a background thread (worker thread) and you want JavaScript to be able to receive the event, you can implement and/or raise it in one of these ways:</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>(Option 1) Raise the event through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Core.CoreDispatcher</pc> to marshal the event to the JavaScript thread context.</source>
          <target>(Option 1) Raise the event through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Core.CoreDispatcher</pc> to marshal the event to the JavaScript thread context.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Although typically this is the best option, in some scenarios it might not provide the fastest performance.</source>
          <target>Although typically this is the best option, in some scenarios it might not provide the fastest performance.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206577.aspx)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>(Option 2) Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Foundation.EventHandler</pc><ph dataRef="id3" id="ph1" />Object<ph dataRef="id4" id="ph2" /> but lose type information (but lose the event type information).</source>
          <target>(Option 2) Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Foundation.EventHandler</pc><ph dataRef="id3" id="ph1" />Object<ph dataRef="id4" id="ph2" /> but lose type information (but lose the event type information).</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>If Option 1 is not feasible or its performance is not adequate, then this is a good second choice if loss of type information is acceptable.</source>
          <target>If Option 1 is not feasible or its performance is not adequate, then this is a good second choice if loss of type information is acceptable.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>(Option 3) Create your own proxy and stub for the component.</source>
          <target>(Option 3) Create your own proxy and stub for the component.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>This option is the most difficult to implement, but it preserves type information and might provide better performance compared to Option 1 in demanding scenarios.</source>
          <target>This option is the most difficult to implement, but it preserves type information and might provide better performance compared to Option 1 in demanding scenarios.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>If you just raise an event on a background thread without using one of these options, a JavaScript client will not receive the event.</source>
          <target>If you just raise an event on a background thread without using one of these options, a JavaScript client will not receive the event.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Background</source>
          <target>Background</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>All Windows Runtime components and apps are fundamentally COM objects, no matter what language you use to create them.</source>
          <target>All Windows Runtime components and apps are fundamentally COM objects, no matter what language you use to create them.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>In the Windows API, most of the components are agile COM objects that can communicate equally well with objects on the background thread and on the UI thread.</source>
          <target>In the Windows API, most of the components are agile COM objects that can communicate equally well with objects on the background thread and on the UI thread.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>If a COM object can’t be made agile, then it requires helper objects known as proxies and stubs to communicate with other COM objects across the UI thread-background thread boundary.</source>
          <target>If a COM object can’t be made agile, then it requires helper objects known as proxies and stubs to communicate with other COM objects across the UI thread-background thread boundary.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>(In COM terms, this is known as communication between thread apartments.)</source>
          <target>(In COM terms, this is known as communication between thread apartments.)</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Most of the objects in the Windows API are either agile or have proxies and stubs built in.</source>
          <target>Most of the objects in the Windows API are either agile or have proxies and stubs built in.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225997.aspx)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>However, proxies and stubs can’t be created for generic types such as Windows.Foundation.<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TypedEventHandler<ph dataRef="id3" id="ph1" />TSender, TResult<ph dataRef="id4" id="ph2" /></pc> because they are not complete types until you provide the type argument.</source>
          <target>However, proxies and stubs can’t be created for generic types such as Windows.Foundation.<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TypedEventHandler<ph dataRef="id3" id="ph1" />TSender, TResult<ph dataRef="id4" id="ph2" /></pc> because they are not complete types until you provide the type argument.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>It's only with JavaScript clients that the lack of proxies or stubs becomes an issue, but if you want your component to be usable from JavaScript as well as from C++ or a .NET language, then you must use one of the following three options.</source>
          <target>It's only with JavaScript clients that the lack of proxies or stubs becomes an issue, but if you want your component to be usable from JavaScript as well as from C++ or a .NET language, then you must use one of the following three options.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>(Option 1) Raise the event through the CoreDispatcher</source>
          <target>(Option 1) Raise the event through the CoreDispatcher</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>You can send events of any user-defined delegate type by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Core.CoreDispatcher</pc>, and JavaScript will be able to receive them.</source>
          <target>You can send events of any user-defined delegate type by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Core.CoreDispatcher</pc>, and JavaScript will be able to receive them.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>If you are unsure which option to use, try this one first.</source>
          <target>If you are unsure which option to use, try this one first.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>If latency between the event firing and the event handling becomes an issue, then try one of the other options.</source>
          <target>If latency between the event firing and the event handling becomes an issue, then try one of the other options.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>The following example shows how to use the CoreDispatcher to raise a strongly-typed event.</source>
          <target>The following example shows how to use the CoreDispatcher to raise a strongly-typed event.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Notice that the type argument is Toast, not Object.</source>
          <target>Notice that the type argument is Toast, not Object.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>(Option 2) Use EventHandler<ph dataRef="id1" id="ph1" />Object<ph dataRef="id2" id="ph2" /> but lose type information</source>
          <target>(Option 2) Use EventHandler<ph dataRef="id1" id="ph1" />Object<ph dataRef="id2" id="ph2" /> but lose type information</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206577.aspx)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Another way to send an event from a background thread is to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Foundation.EventHandler</pc><ph dataRef="id3" id="ph1" />Object<ph dataRef="id4" id="ph2" /> as the type of the event.</source>
          <target>Another way to send an event from a background thread is to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Foundation.EventHandler</pc><ph dataRef="id3" id="ph1" />Object<ph dataRef="id4" id="ph2" /> as the type of the event.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Windows provides this concrete instantiation of the generic type and provides a proxy and stub for it.</source>
          <target>Windows provides this concrete instantiation of the generic type and provides a proxy and stub for it.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>The downside is that the type information of your event args and sender is lost.</source>
          <target>The downside is that the type information of your event args and sender is lost.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>C++ and .NET clients must know through documentation what type to cast back to when the event is received.</source>
          <target>C++ and .NET clients must know through documentation what type to cast back to when the event is received.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>JavaScript clients don’t need the original type information.</source>
          <target>JavaScript clients don’t need the original type information.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>They find the arg properties, based on their names in the metadata.</source>
          <target>They find the arg properties, based on their names in the metadata.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>This example shows how to use Windows.Foundation.EventHandler<ph dataRef="id1" id="ph1" />Object<ph dataRef="id2" id="ph2" /> in C#:</source>
          <target>This example shows how to use Windows.Foundation.EventHandler<ph dataRef="id1" id="ph1" />Object<ph dataRef="id2" id="ph2" /> in C#:</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>You consume this event on the JavaScript side like this:</source>
          <target>You consume this event on the JavaScript side like this:</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>(Option 3) Create your own proxy and stub</source>
          <target>(Option 3) Create your own proxy and stub</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>For potential performance gains on user-defined event types that have fully-preserved type information, you have to create your own proxy and stub objects and embed them in your app package.</source>
          <target>For potential performance gains on user-defined event types that have fully-preserved type information, you have to create your own proxy and stub objects and embed them in your app package.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Typically, you have to use this option only in rare situations where neither of the other two options are adequate.</source>
          <target>Typically, you have to use this option only in rare situations where neither of the other two options are adequate.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Also, there is no guarantee that this option will provide better performance than the other two options.</source>
          <target>Also, there is no guarantee that this option will provide better performance than the other two options.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Actual performance depends on many factors.</source>
          <target>Actual performance depends on many factors.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Use the Visual Studio profiler or other profiling tools to measure actual performance in your application and determine whether the event is in fact a bottleneck.</source>
          <target>Use the Visual Studio profiler or other profiling tools to measure actual performance in your application and determine whether the event is in fact a bottleneck.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The rest of this article shows how to use C# to create a basic Windows Runtime component, and then use C++ to create a DLL for the proxy and stub that will enable JavaScript to consume a Windows.Foundation.TypedEventHandler<ph dataRef="id1" id="ph1" />TSender, TResult<ph dataRef="id2" id="ph2" /> event that's raised by the component in an async operation.</source>
          <target>The rest of this article shows how to use C# to create a basic Windows Runtime component, and then use C++ to create a DLL for the proxy and stub that will enable JavaScript to consume a Windows.Foundation.TypedEventHandler<ph dataRef="id1" id="ph1" />TSender, TResult<ph dataRef="id2" id="ph2" /> event that's raised by the component in an async operation.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>(You can also use C++ or Visual Basic to create the component.</source>
          <target>(You can also use C++ or Visual Basic to create the component.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>The steps that are related to creating the proxies and stubs are the same.) This walkthrough is based on Creating a Windows Runtime in-process component sample (C++/CX) and helps explain its purposes.</source>
          <target>The steps that are related to creating the proxies and stubs are the same.) This walkthrough is based on Creating a Windows Runtime in-process component sample (C++/CX) and helps explain its purposes.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>This walkthrough has these parts:</source>
          <target>This walkthrough has these parts:</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Here you will create two basic Windows Runtime classes.</source>
          <target>Here you will create two basic Windows Runtime classes.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225997.aspx)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>One class exposes an event of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Foundation.TypedEventHandler<ph dataRef="id3" id="ph1" />TSender, TResult<ph dataRef="id4" id="ph2" /></pc> and the other class is the type that's returned to JavaScript as the argument for TValue.</source>
          <target>One class exposes an event of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Foundation.TypedEventHandler<ph dataRef="id3" id="ph1" />TSender, TResult<ph dataRef="id4" id="ph2" /></pc> and the other class is the type that's returned to JavaScript as the argument for TValue.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>These classes can't communicate with JavaScript until you complete the later steps.</source>
          <target>These classes can't communicate with JavaScript until you complete the later steps.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>This app activates the main class object, calls a method, and handles an event that's raised by the Windows Runtime component.</source>
          <target>This app activates the main class object, calls a method, and handles an event that's raised by the Windows Runtime component.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>These are required by the tools that generate the proxy and stub classes.</source>
          <target>These are required by the tools that generate the proxy and stub classes.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>You then use the IDL file to generate the C source code for the proxy and stub.</source>
          <target>You then use the IDL file to generate the C source code for the proxy and stub.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Register the proxy-stub objects so that the COM runtime can find them, and reference the proxy-stub DLL in the app project.</source>
          <target>Register the proxy-stub objects so that the COM runtime can find them, and reference the proxy-stub DLL in the app project.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>To create the Windows Runtime component</source>
          <target>To create the Windows Runtime component</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>In Visual Studio, on the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File <ph dataRef="id3" id="ph1" /> New Project</pc>.</source>
          <target>In Visual Studio, on the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File <ph dataRef="id3" id="ph1" /> New Project</pc>.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">&amp;gt;</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">JavaScript <ph dataRef="id5" id="ph1" /> Universal Windows</pc> and then select <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Blank App</pc>.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">JavaScript <ph dataRef="id5" id="ph1" /> Universal Windows</pc> and then select <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Blank App</pc>.</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Name the project ToasterApplication and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
          <target>Name the project ToasterApplication and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Add a C# Windows Runtime component to the solution: In Solution Explorer, open the shortcut menu for the solution and then choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add <ph dataRef="id3" id="ph1" /> New Project</pc>.</source>
          <target>Add a C# Windows Runtime component to the solution: In Solution Explorer, open the shortcut menu for the solution and then choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add <ph dataRef="id3" id="ph1" /> New Project</pc>.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;gt;</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual C# <ph dataRef="id3" id="ph1" /> Windows Store</pc> and then select <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Windows Runtime Component</pc>.</source>
          <target>Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual C# <ph dataRef="id3" id="ph1" /> Windows Store</pc> and then select <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Windows Runtime Component</pc>.</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Name the project ToasterComponent and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
          <target>Name the project ToasterComponent and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>ToasterComponent will be the root namespace for the components you will create in later steps.</source>
          <target>ToasterComponent will be the root namespace for the components you will create in later steps.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In Solution Explorer, open the shortcut menu for the solution and then choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>.</source>
          <target>In Solution Explorer, open the shortcut menu for the solution and then choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property Pages</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Configuration Properties</pc> in the left pane, and then at the top of the dialog box, set <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Configuration</pc> to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Debug</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Platform</pc> to x86, x64, or ARM.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property Pages</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Configuration Properties</pc> in the left pane, and then at the top of the dialog box, set <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Configuration</pc> to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Debug</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Platform</pc> to x86, x64, or ARM.</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
          <target>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc> Platform = Any CPU won’t work because it's not valid for the native-code Win32 DLL that you'll add to the solution later.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc> Platform = Any CPU won’t work because it's not valid for the native-code Win32 DLL that you'll add to the solution later.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>In Solution Explorer, rename class1.cs to ToasterComponent.cs so that it matches the name of the project.</source>
          <target>In Solution Explorer, rename class1.cs to ToasterComponent.cs so that it matches the name of the project.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>Visual Studio automatically renames the class in the file to match the new file name.</source>
          <target>Visual Studio automatically renames the class in the file to match the new file name.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>In the .cs file, add a using directive for the Windows.Foundation namespace to bring TypedEventHandler into scope.</source>
          <target>In the .cs file, add a using directive for the Windows.Foundation namespace to bring TypedEventHandler into scope.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>When you require proxies and stubs, your component must use interfaces to expose its public members.</source>
          <target>When you require proxies and stubs, your component must use interfaces to expose its public members.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>In ToasterComponent.cs, define an interface for the toaster, and another one for the Toast that the toaster produces.</source>
          <target>In ToasterComponent.cs, define an interface for the toaster, and another one for the Toast that the toaster produces.</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> In C# you can skip this step.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> In C# you can skip this step.</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Instead, first create a class, and then open its shortcut menu and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refactor <ph dataRef="id3" id="ph1" /> Extract Interface</pc>.</source>
          <target>Instead, first create a class, and then open its shortcut menu and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refactor <ph dataRef="id3" id="ph1" /> Extract Interface</pc>.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>In the code that's generated, manually give the interfaces public accessibility.</source>
          <target>In the code that's generated, manually give the interfaces public accessibility.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>The IToast interface has a string that can be retrieved to describe the type of toast.</source>
          <target>The IToast interface has a string that can be retrieved to describe the type of toast.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>The IToaster interface has a method to make toast, and an event to indicate that the toast is made.</source>
          <target>The IToaster interface has a method to make toast, and an event to indicate that the toast is made.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>Because this event returns the particular piece (that is, type) of toast, it's known as a typed event.</source>
          <target>Because this event returns the particular piece (that is, type) of toast, it's known as a typed event.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>Next, we need classes that implement these interfaces, and are public and sealed so that they are accessible from the JavaScript app that you'll program later.</source>
          <target>Next, we need classes that implement these interfaces, and are public and sealed so that they are accessible from the JavaScript app that you'll program later.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>In the preceding code, we create the toast and then spin up a thread-pool work item to fire the notification.</source>
          <target>In the preceding code, we create the toast and then spin up a thread-pool work item to fire the notification.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Although the IDE might suggest that you apply the await keyword to the async call, it isn’t necessary in this case because the method doesn’t do any work that depends on the results of the operation.</source>
          <target>Although the IDE might suggest that you apply the await keyword to the async call, it isn’t necessary in this case because the method doesn’t do any work that depends on the results of the operation.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> The async call in the preceding code uses ThreadPool.RunAsync solely to demonstrate a simple way to fire the event on a background thread.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> The async call in the preceding code uses ThreadPool.RunAsync solely to demonstrate a simple way to fire the event on a background thread.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>You could write this particular method as shown in the following example, and it would work fine because the .NET Task scheduler automatically marshals async/await calls back to the UI thread.</source>
          <target>You could write this particular method as shown in the following example, and it would work fine because the .NET Task scheduler automatically marshals async/await calls back to the UI thread.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>