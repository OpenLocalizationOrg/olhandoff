<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\xbox-apps\automate-launching-uwp-apps.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">ae2f80a915f4aed90c269c37a11d01a2f6c9849e</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Automate launching Windows 10 Universal Windows Platform (UWP) apps</source>
          <target>Automate launching Windows 10 Universal Windows Platform (UWP) apps</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Developers can use protocol activation and launch activation to automate launching their UWP apps or games for automated testing.</source>
          <target>Developers can use protocol activation and launch activation to automate launching their UWP apps or games for automated testing.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Automate launching Windows 10 UWP apps</source>
          <target>Automate launching Windows 10 UWP apps</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Introduction</source>
          <target>Introduction</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Developers have several options for achieving automated launching of Universal Windows Platform (UWP) apps.</source>
          <target>Developers have several options for achieving automated launching of Universal Windows Platform (UWP) apps.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>In this paper we will explore methods of launching an app by using protocol activation and launch activation.</source>
          <target>In this paper we will explore methods of launching an app by using protocol activation and launch activation.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Protocol activation</pc> allows an app to register itself as a handler for a given protocol.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Protocol activation</pc> allows an app to register itself as a handler for a given protocol.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Launch activation</pc> is the normal launching of an app, such as launching from the app tile.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Launch activation</pc> is the normal launching of an app, such as launching from the app tile.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>With each activation method, you have the option of using the command line or a launcher application.</source>
          <target>With each activation method, you have the option of using the command line or a launcher application.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>For all activation methods, if the app is currently running, the activation will bring the app to the foreground (which reactivates it) and provide the new activation arguments.</source>
          <target>For all activation methods, if the app is currently running, the activation will bring the app to the foreground (which reactivates it) and provide the new activation arguments.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>This allows flexibility to use activation commands to provide new messages to the app.</source>
          <target>This allows flexibility to use activation commands to provide new messages to the app.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>It is important to note that the project needs to be compiled and deployed for the activation method to run the newly updated app.</source>
          <target>It is important to note that the project needs to be compiled and deployed for the activation method to run the newly updated app.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Protocol activation</source>
          <target>Protocol activation</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Follow these steps to set up protocol activation for apps:</source>
          <target>Follow these steps to set up protocol activation for apps:</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest</pc> file in Visual Studio.</source>
          <target>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest</pc> file in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Declarations</pc> tab.</source>
          <target>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Declarations</pc> tab.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>Under the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Available Declarations</pc> drop-down, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Protocol</pc>, and then select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
          <target>Under the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Available Declarations</pc> drop-down, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Protocol</pc>, and then select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>, in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> field, enter a unique name to launch the app.</source>
          <target>Under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>, in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> field, enter a unique name to launch the app.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Protocol activation</source>
          <target>Protocol activation</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Save the file and deploy the project.</source>
          <target>Save the file and deploy the project.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>After the project has been deployed, the protocol activation should be set.</source>
          <target>After the project has been deployed, the protocol activation should be set.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Go to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Control Panel\All Control Panel Items\Default Programs</pc> and select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Associate a file type or protocol with a specific program</pc>.</source>
          <target>Go to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Control Panel\All Control Panel Items\Default Programs</pc> and select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Associate a file type or protocol with a specific program</pc>.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Scroll to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Protocols</pc> section to see if the protocol is listed.</source>
          <target>Scroll to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Protocols</pc> section to see if the protocol is listed.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Now that protocol activation is set up, you have two options (the command line or launcher application) for activating the app by using the protocol.</source>
          <target>Now that protocol activation is set up, you have two options (the command line or launcher application) for activating the app by using the protocol.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Command line</source>
          <target>Command line</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>The app can be protocol-activated by using the command line with the command start followed by the protocol name set previously, a colon (“:”), and any parameters.</source>
          <target>The app can be protocol-activated by using the command line with the command start followed by the protocol name set previously, a colon (“:”), and any parameters.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>The parameters can be any arbitrary string; however, to take advantage of the Uniform Resource Identifier (URI) capabilities, it is advisable to follow the standard URI format:</source>
          <target>The parameters can be any arbitrary string; however, to take advantage of the Uniform Resource Identifier (URI) capabilities, it is advisable to follow the standard URI format:</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>The Uri object has methods of parsing a URI string in this format.</source>
          <target>The Uri object has methods of parsing a URI string in this format.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.foundation.uri.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uri class (MSDN)</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uri class (MSDN)</pc>.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Examples:</source>
          <target>Examples:</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Protocol command-line activation supports Unicode characters up to a 2038-character limit on the raw URI.</source>
          <target>Protocol command-line activation supports Unicode characters up to a 2038-character limit on the raw URI.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Launcher application</source>
          <target>Launcher application</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>For launching, create a separate application that supports the WinRT API.</source>
          <target>For launching, create a separate application that supports the WinRT API.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`myapplication:`</data>
          <data id="id4">`myapplication:protocol activation arguments`</data>
        </originalData>
        <segment state="initial">
          <source>The C++ code for launching with protocol activation in a launcher program is shown in the following sample, where <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PackageURI</pc> is the URI for the application with any arguments; for example <ph dataRef="id3" id="ph1" /> or <ph dataRef="id4" id="ph2" />.</source>
          <target>The C++ code for launching with protocol activation in a launcher program is shown in the following sample, where <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PackageURI</pc> is the URI for the application with any arguments; for example <ph dataRef="id3" id="ph1" /> or <ph dataRef="id4" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Protocol activation with the launcher application has the same limitations for arguments as protocol activation with the command-line.</source>
          <target>Protocol activation with the launcher application has the same limitations for arguments as protocol activation with the command-line.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Both support Unicode characters up to a 2038-character limit on the raw URI.</source>
          <target>Both support Unicode characters up to a 2038-character limit on the raw URI.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Launch activation</source>
          <target>Launch activation</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>You can also launch the app by using launch activation.</source>
          <target>You can also launch the app by using launch activation.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>No setup is required, but the Application User Model ID (AUMID) of the UWP app is needed.</source>
          <target>No setup is required, but the Application User Model ID (AUMID) of the UWP app is needed.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>The AUMID is the package family name followed by an exclamation point and the application ID.</source>
          <target>The AUMID is the package family name followed by an exclamation point and the application ID.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>The best way to obtain the package family name is to complete these steps:</source>
          <target>The best way to obtain the package family name is to complete these steps:</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest</pc> file.</source>
          <target>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest</pc> file.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Packaging</pc> tab, enter the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Package name</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Packaging</pc> tab, enter the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Package name</pc>.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Launch activation</source>
          <target>Launch activation</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`&gt;get-appxpackage MyPackageName`</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package family name</pc> is not listed, open PowerShell and run <ph dataRef="id3" id="ph1" /> to find the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">PackageFamilyName</pc>.</source>
          <target>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package family name</pc> is not listed, open PowerShell and run <ph dataRef="id3" id="ph1" /> to find the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">PackageFamilyName</pc>.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`&lt;Applications&gt;`</data>
        </originalData>
        <segment state="initial">
          <source>The application ID can be found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest</pc> file (opened in XML view) under the <ph dataRef="id3" id="ph1" /> element.</source>
          <target>The application ID can be found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest</pc> file (opened in XML view) under the <ph dataRef="id3" id="ph1" /> element.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Command-line</source>
          <target>Command-line</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>A tool for performing a launch activation of a UWP app is installed with the Windows 10 SDK.</source>
          <target>A tool for performing a launch activation of a UWP app is installed with the Windows 10 SDK.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>It can be run from the command line, and it takes the AUMID of the app to be launched as an argument.</source>
          <target>It can be run from the command line, and it takes the AUMID of the app to be launched as an argument.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>It would look something like this:</source>
          <target>It would look something like this:</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>This option does not support command-line arguments.</source>
          <target>This option does not support command-line arguments.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Launcher application</source>
          <target>Launcher application</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>You can create a separate application that supports using COM to use for launching.</source>
          <target>You can create a separate application that supports using COM to use for launching.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>The following example shows C++ code for launching with launch activation in a launcher program.</source>
          <target>The following example shows C++ code for launching with launch activation in a launcher program.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>With this code, you can create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ApplicationActivationManager</pc> object and call <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ActivateApplication</pc> passing in the AUMID found previously and any arguments.</source>
          <target>With this code, you can create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ApplicationActivationManager</pc> object and call <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ActivateApplication</pc> passing in the AUMID found previously and any arguments.</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/desktop/hh706903(v=vs.85).aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about the other parameters, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IApplicationActivationManager::ActivateApplication method (MSDN)</pc>.</source>
          <target>For more information about the other parameters, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IApplicationActivationManager::ActivateApplication method (MSDN)</pc>.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>It is worth noting that this method does support arguments being passed in, unlike the previous method for launching (that is, using the command line).</source>
          <target>It is worth noting that this method does support arguments being passed in, unlike the previous method for launching (that is, using the command line).</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Accepting arguments</source>
          <target>Accepting arguments</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>To accept arguments passed in on activation of the UWP app, you must add some code to the app.</source>
          <target>To accept arguments passed in on activation of the UWP app, you must add some code to the app.</target>
        </segment>
      </unit>
      <unit id="160">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To determine if protocol activation or launch activation occurred, override the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnActivated</pc> event and check the argument type, and then get the raw string or Uri object’s pre-parsed values.</source>
          <target>To determine if protocol activation or launch activation occurred, override the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnActivated</pc> event and check the argument type, and then get the raw string or Uri object’s pre-parsed values.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>This example shows how to get the raw string.</source>
          <target>This example shows how to get the raw string.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Summary</source>
          <target>Summary</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>In summary, you can use various methods to launch the UWP app.</source>
          <target>In summary, you can use various methods to launch the UWP app.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Depending on the requirements and use cases, different methods may be better suited than others.</source>
          <target>Depending on the requirements and use cases, different methods may be better suited than others.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>