<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\gaming\load-a-game-asset.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">fd4d2162e9a0007df34b465f570820843b326d72</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Load resources in your DirectX game</source>
          <target>Load resources in your DirectX game</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Most games, at some point, load resources and assets (such as shaders, textures, predefined meshes or other graphics data) from local storage or some other data stream.</source>
          <target>Most games, at some point, load resources and assets (such as shaders, textures, predefined meshes or other graphics data) from local storage or some other data stream.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Load resources in your DirectX game</source>
          <target>Load resources in your DirectX game</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Most games, at some point, load resources and assets (such as shaders, textures, predefined meshes or other graphics data) from local storage or some other data stream.</source>
          <target>Most games, at some point, load resources and assets (such as shaders, textures, predefined meshes or other graphics data) from local storage or some other data stream.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Here, we walk you through a high-level view of what you must consider when loading these files to use in your Universal Windows Platform (UWP) game.</source>
          <target>Here, we walk you through a high-level view of what you must consider when loading these files to use in your Universal Windows Platform (UWP) game.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>For example, the meshes for polygonal objects in your game might have been created with another tool, and exported to a specific format.</source>
          <target>For example, the meshes for polygonal objects in your game might have been created with another tool, and exported to a specific format.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>The same is true for textures, and more so: while a flat, uncompressed bitmap can be commonly written by most tools and understood by most graphics APIs, it can be extremely inefficient for use in your game.</source>
          <target>The same is true for textures, and more so: while a flat, uncompressed bitmap can be commonly written by most tools and understood by most graphics APIs, it can be extremely inefficient for use in your game.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Here, we guide you through the basic steps for loading three different types of graphic resources for use with Direct3D: meshes (models), textures (bitmaps), and compiled shader objects.</source>
          <target>Here, we guide you through the basic steps for loading three different types of graphic resources for use with Direct3D: meshes (models), textures (bitmaps), and compiled shader objects.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>What you need to know</source>
          <target>What you need to know</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Technologies</source>
          <target>Technologies</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Parallel Patterns Library (ppltasks.h)</source>
          <target>Parallel Patterns Library (ppltasks.h)</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Prerequisites</source>
          <target>Prerequisites</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Understand the basic Windows Runtime</source>
          <target>Understand the basic Windows Runtime</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Understand asynchronous tasks</source>
          <target>Understand asynchronous tasks</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Understand the basic concepts of 3-D graphics programming.</source>
          <target>Understand the basic concepts of 3-D graphics programming.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>This sample also includes three code files for resource loading and management.</source>
          <target>This sample also includes three code files for resource loading and management.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>You'll encounter the code objects defined in these files throughout this topic.</source>
          <target>You'll encounter the code objects defined in these files throughout this topic.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>BasicLoader.h/.cpp</source>
          <target>BasicLoader.h/.cpp</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>BasicReaderWriter.h/.cpp</source>
          <target>BasicReaderWriter.h/.cpp</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>DDSTextureLoader.h/.cpp</source>
          <target>DDSTextureLoader.h/.cpp</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>The complete code for these samples can be found in the following links.</source>
          <target>The complete code for these samples can be found in the following links.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Topic</source>
          <target>Topic</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Complete code for BasicLoader</source>
          <target>Complete code for BasicLoader</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Complete code for a class and methods that convert and load graphics mesh objects into memory.</source>
          <target>Complete code for a class and methods that convert and load graphics mesh objects into memory.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Complete code for BasicReaderWriter</source>
          <target>Complete code for BasicReaderWriter</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Complete code for a class and methods for reading and writing binary data files in general.</source>
          <target>Complete code for a class and methods for reading and writing binary data files in general.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](complete-code-for-basicloader.md)</data>
        </originalData>
        <segment state="initial">
          <source>Used by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicLoader</pc> class.</source>
          <target>Used by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicLoader</pc> class.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Complete code for DDSTextureLoader</source>
          <target>Complete code for DDSTextureLoader</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Complete code for a class and method that loads a DDS texture from memory.</source>
          <target>Complete code for a class and method that loads a DDS texture from memory.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Instructions</source>
          <target>Instructions</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Asynchronous loading</source>
          <target>Asynchronous loading</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Asynchronous loading is handled using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">task</pc> template from the Parallel Patterns Library (PPL).</source>
          <target>Asynchronous loading is handled using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">task</pc> template from the Parallel Patterns Library (PPL).</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">task</pc> contains a method call followed by a lambda that processes the results of the async call after it completes, and usually follows the format of:</source>
          <target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">task</pc> contains a method call followed by a lambda that processes the results of the async call after it completes, and usually follows the format of:</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>.</source>
          <target>.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Tasks can be chained together using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.then()</pc> syntax, so that when one operation completes, another async operation that depends on the results of the prior operation can be run.</source>
          <target>Tasks can be chained together using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.then()</pc> syntax, so that when one operation completes, another async operation that depends on the results of the prior operation can be run.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>In this way, you can load, convert, and manage complex assets on separate threads in a way that appears almost invisible to the player.</source>
          <target>In this way, you can load, convert, and manage complex assets on separate threads in a way that appears almost invisible to the player.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187334)</data>
        </originalData>
        <segment state="initial">
          <source>For more details, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in C++</pc>.</source>
          <target>For more details, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in C++</pc>.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Now, let's look at the basic structure for declaring and creating an async file loading method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadDataAsync</pc>.</source>
          <target>Now, let's look at the basic structure for declaring and creating an async file loading method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadDataAsync</pc>.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In this code, when your code calls the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadDataAsync</pc> method defined above, a task is created to read a buffer from the file system.</source>
          <target>In this code, when your code calls the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadDataAsync</pc> method defined above, a task is created to read a buffer from the file system.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208119)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Once it completes, a chained task takes the buffer and streams the bytes from that buffer into an array using the static <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataReader</pc></pc> type.</source>
          <target>Once it completes, a chained task takes the buffer and streams the bytes from that buffer into an array using the static <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataReader</pc></pc> type.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Here's the call you make to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadDataAsync</pc>.</source>
          <target>Here's the call you make to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadDataAsync</pc>.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>When it completes, your code receives an array of bytes read from the provided file.</source>
          <target>When it completes, your code receives an array of bytes read from the provided file.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Since <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadDataAsync</pc> itself is defined as a task, you can use a lambda to perform a specific operation when the byte array is returned, such as passing that byte data to a DirectX function that can use it.</source>
          <target>Since <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadDataAsync</pc> itself is defined as a task, you can use a lambda to perform a specific operation when the byte array is returned, such as passing that byte data to a DirectX function that can use it.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>If your game is sufficiently simple, load your resources with a method like this when the user starts the game.</source>
          <target>If your game is sufficiently simple, load your resources with a method like this when the user starts the game.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700505)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can do this before you start the main game loop from some point in the call sequence of your <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView::Run</pc></pc> implementation.</source>
          <target>You can do this before you start the main game loop from some point in the call sequence of your <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView::Run</pc></pc> implementation.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Again, you call your resource loading methods asynchronously so the game can start quicker and so the player doesn't have to wait until the loading completes before engaging in early interactions.</source>
          <target>Again, you call your resource loading methods asynchronously so the game can start quicker and so the player doesn't have to wait until the loading completes before engaging in early interactions.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>However, you don't want to start the game proper until all of the async loading has completed!</source>
          <target>However, you don't want to start the game proper until all of the async loading has completed!</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Create some method for signaling when loading is complete, such as a specific field, and use the lambdas on your loading method(s) to set that signal when finished.</source>
          <target>Create some method for signaling when loading is complete, such as a specific field, and use the lambdas on your loading method(s) to set that signal when finished.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Check the variable before starting any components that use those loaded resources.</source>
          <target>Check the variable before starting any components that use those loaded resources.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Here's an example using the async methods defined in BasicLoader.cpp to load shaders, a mesh, and a texture when the game starts up.</source>
          <target>Here's an example using the async methods defined in BasicLoader.cpp to load shaders, a mesh, and a texture when the game starts up.</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>Notice that it sets a specific field on the game object, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m<ph dataRef="id3" id="ph1" />loadingComplete</pc>, when all of the loading methods finish.</source>
          <target>Notice that it sets a specific field on the game object, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m<ph dataRef="id3" id="ph1" />loadingComplete</pc>, when all of the loading methods finish.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>Note that the tasks have been aggregated using the &amp;&amp; operator such that the lambda that sets the loading complete flag is triggered only when all of the tasks complete.</source>
          <target>Note that the tasks have been aggregated using the &amp;&amp; operator such that the lambda that sets the loading complete flag is triggered only when all of the tasks complete.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Note that if you have multiple flags, you have the possibility of race conditions.</source>
          <target>Note that if you have multiple flags, you have the possibility of race conditions.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>For example, if the lambda sets two flags sequentially to the same value, another thread may only see the first flag set if it examines them before the second flag is set.</source>
          <target>For example, if the lambda sets two flags sequentially to the same value, another thread may only see the first flag set if it examines them before the second flag is set.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>You've seen how to load resource files asynchronously.</source>
          <target>You've seen how to load resource files asynchronously.</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](complete-code-for-basicreaderwriter.md)</data>
          <data id="id3">[</data>
          <data id="id4">](complete-code-for-basicloader.md)</data>
        </originalData>
        <segment state="initial">
          <source>Synchronous file loads are much simpler, and you can find examples of them in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Complete code for BasicReaderWriter</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Complete code for BasicLoader</pc>.</source>
          <target>Synchronous file loads are much simpler, and you can find examples of them in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Complete code for BasicReaderWriter</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Complete code for BasicLoader</pc>.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Of course, different resource and asset types often require additional processing or conversion before they are ready to be used in your graphics pipeline.</source>
          <target>Of course, different resource and asset types often require additional processing or conversion before they are ready to be used in your graphics pipeline.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>Let's take a look at three specific types of resources: meshes, textures, and shaders.</source>
          <target>Let's take a look at three specific types of resources: meshes, textures, and shaders.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Loading meshes</source>
          <target>Loading meshes</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Meshes are vertex data, either generated procedurally by code within your game or exported to a file from another app (like 3DStudio MAX or Alias WaveFront) or tool.</source>
          <target>Meshes are vertex data, either generated procedurally by code within your game or exported to a file from another app (like 3DStudio MAX or Alias WaveFront) or tool.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>These meshes represent the models in your game, from simple primitives like cubes and spheres to cars and houses and characters.</source>
          <target>These meshes represent the models in your game, from simple primitives like cubes and spheres to cars and houses and characters.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>They often contain color and animation data, as well, depending on their format.</source>
          <target>They often contain color and animation data, as well, depending on their format.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>We'll focus on meshes that contain only vertex data.</source>
          <target>We'll focus on meshes that contain only vertex data.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>To load a mesh correctly, you must know the format of the data in the file for the mesh.</source>
          <target>To load a mesh correctly, you must know the format of the data in the file for the mesh.</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Our simple <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicReaderWriter</pc> type above simply reads the data in as a byte stream; it doesn't know that the byte data represents a mesh, much less a specific mesh format as exported by another application!</source>
          <target>Our simple <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicReaderWriter</pc> type above simply reads the data in as a byte stream; it doesn't know that the byte data represents a mesh, much less a specific mesh format as exported by another application!</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>You must perform the conversion as you bring the mesh data into memory.</source>
          <target>You must perform the conversion as you bring the mesh data into memory.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>(You should always try to package asset data in a format that's as close to the internal representation as possible.</source>
          <target>(You should always try to package asset data in a format that's as close to the internal representation as possible.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Doing so will reduce resource utilization and save time.)</source>
          <target>Doing so will reduce resource utilization and save time.)</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>Let's get the byte data from the mesh's file.</source>
          <target>Let's get the byte data from the mesh's file.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>The format in the example assumes that the file is a sample-specific format suffixed with .vbo.</source>
          <target>The format in the example assumes that the file is a sample-specific format suffixed with .vbo.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>(Again, this format is not the same as OpenGL's VBO format.) Each vertex itself maps to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicVertex</pc> type, which is a struct defined in the code for the obj2vbo converter tool.</source>
          <target>(Again, this format is not the same as OpenGL's VBO format.) Each vertex itself maps to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicVertex</pc> type, which is a struct defined in the code for the obj2vbo converter tool.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>The layout of the vertex data in the .vbo file looks like this:</source>
          <target>The layout of the vertex data in the .vbo file looks like this:</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>The first 32 bits (4 bytes) of the data stream contain the number of vertices (numVertices) in the mesh, represented as a uint32 value.</source>
          <target>The first 32 bits (4 bytes) of the data stream contain the number of vertices (numVertices) in the mesh, represented as a uint32 value.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>The next 32 bits (4 bytes) of the data stream contain the number of indices in the mesh (numIndices), represented as a uint32 value.</source>
          <target>The next 32 bits (4 bytes) of the data stream contain the number of indices in the mesh (numIndices), represented as a uint32 value.</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">\*</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
        </originalData>
        <segment state="initial">
          <source>After that, the subsequent (numVertices <ph dataRef="id1" id="ph1" /> sizeof(<pc dataRefEnd="id3" dataRefStart="id2" id="p1">BasicVertex</pc>)) bits contain the vertex data.</source>
          <target>After that, the subsequent (numVertices <ph dataRef="id1" id="ph1" /> sizeof(<pc dataRefEnd="id3" dataRefStart="id2" id="p1">BasicVertex</pc>)) bits contain the vertex data.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>The last (numIndices <ph dataRef="id1" id="ph1" /> 16) bits of data contain the index data, represented as a sequence of uint16 values.</source>
          <target>The last (numIndices <ph dataRef="id1" id="ph1" /> 16) bits of data contain the index data, represented as a sequence of uint16 values.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>The point is this: know the bit-level layout of the mesh data you have loaded.</source>
          <target>The point is this: know the bit-level layout of the mesh data you have loaded.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>Also, be sure you are consistent with endian-ness.</source>
          <target>Also, be sure you are consistent with endian-ness.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>All Windows 8 platforms are little-endian.</source>
          <target>All Windows 8 platforms are little-endian.</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the example, you call a method, CreateMesh, from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadMeshAsync</pc> method to perform this bit-level interpretation.</source>
          <target>In the example, you call a method, CreateMesh, from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadMeshAsync</pc> method to perform this bit-level interpretation.</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/desktop/ff476501)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">\_</data>
          <data id="id8">\_</data>
          <data id="id9">\_</data>
          <data id="id10">\_</data>
          <data id="id11">\_</data>
          <data id="id12">\_</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateMesh</pc> interprets the byte data loaded from the file, and creates a vertex buffer and an index buffer for the mesh by passing the vertex and index lists, respectively, to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ID3D11Device::CreateBuffer</pc></pc> and specifying either D3D11<ph dataRef="id7" id="ph1" />BIND<ph dataRef="id8" id="ph2" />VERTEX<ph dataRef="id9" id="ph3" />BUFFER or D3D11<ph dataRef="id10" id="ph4" />BIND<ph dataRef="id11" id="ph5" />INDEX<ph dataRef="id12" id="ph6" />BUFFER.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateMesh</pc> interprets the byte data loaded from the file, and creates a vertex buffer and an index buffer for the mesh by passing the vertex and index lists, respectively, to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ID3D11Device::CreateBuffer</pc></pc> and specifying either D3D11<ph dataRef="id7" id="ph1" />BIND<ph dataRef="id8" id="ph2" />VERTEX<ph dataRef="id9" id="ph3" />BUFFER or D3D11<ph dataRef="id10" id="ph4" />BIND<ph dataRef="id11" id="ph5" />INDEX<ph dataRef="id12" id="ph6" />BUFFER.</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Here's the code used in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicLoader</pc>:</source>
          <target>Here's the code used in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicLoader</pc>:</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>You typically create a vertex/index buffer pair for every mesh you use in your game.</source>
          <target>You typically create a vertex/index buffer pair for every mesh you use in your game.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>Where and when you load the meshes is up to you.</source>
          <target>Where and when you load the meshes is up to you.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>If you have a lot of meshes, you may only want to load some from the disk at specific points in the game, such as during specific, pre-defined loading states.</source>
          <target>If you have a lot of meshes, you may only want to load some from the disk at specific points in the game, such as during specific, pre-defined loading states.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>For large meshes, like terrain data, you can stream the vertices from a cache, but that is a more complex procedure and not in the scope of this topic.</source>
          <target>For large meshes, like terrain data, you can stream the vertices from a cache, but that is a more complex procedure and not in the scope of this topic.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>Again, know your vertex data format!</source>
          <target>Again, know your vertex data format!</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>There are many, many ways to represent vertex data across the tools used to create models.</source>
          <target>There are many, many ways to represent vertex data across the tools used to create models.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>There are also many different ways to represent the input layout of the vertex data to Direct3D, such as triangle lists and strips.</source>
          <target>There are also many different ways to represent the input layout of the vertex data to Direct3D, such as triangle lists and strips.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476898)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/desktop/bb147291)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about vertex data, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Introduction to Buffers in Direct3D 11</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Primitives</pc>.</source>
          <target>For more information about vertex data, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Introduction to Buffers in Direct3D 11</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Primitives</pc>.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>Next, let's look at loading textures.</source>
          <target>Next, let's look at loading textures.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>Loading textures</source>
          <target>Loading textures</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>The most common asset in a game—and the one that comprises most of the files on disk and in memory—are textures.</source>
          <target>The most common asset in a game—and the one that comprises most of the files on disk and in memory—are textures.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Like meshes, textures can come in a variety of formats, and you convert them to a format that Direct3D can use when you load them.</source>
          <target>Like meshes, textures can come in a variety of formats, and you convert them to a format that Direct3D can use when you load them.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>Textures also come in a wide variety of types and are used to create different effects.</source>
          <target>Textures also come in a wide variety of types and are used to create different effects.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>MIP levels for textures can be used to improve the look and performance of distance objects; dirt and light maps are used to layer effects and detail atop a base texture; and normal maps are used in per-pixel lighting calculations.</source>
          <target>MIP levels for textures can be used to improve the look and performance of distance objects; dirt and light maps are used to layer effects and detail atop a base texture; and normal maps are used in per-pixel lighting calculations.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>In a modern game, a typical scene can potentially have thousands of individual textures, and your code must effectively manage them all!</source>
          <target>In a modern game, a typical scene can potentially have thousands of individual textures, and your code must effectively manage them all!</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>Also like meshes, there are a number of specific formats that are used to make memory usage for efficient.</source>
          <target>Also like meshes, there are a number of specific formats that are used to make memory usage for efficient.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>Since textures can easily consume a large portion of the GPU (and system) memory, they are often compressed in some fashion.</source>
          <target>Since textures can easily consume a large portion of the GPU (and system) memory, they are often compressed in some fashion.</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You aren't required to use compression on your game's textures, and you can use any compression/decompression algorithm(s) you want as long as you provide the Direct3D shaders with data in a format it can understand (like a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Texture2D</pc></pc> bitmap).</source>
          <target>You aren't required to use compression on your game's textures, and you can use any compression/decompression algorithm(s) you want as long as you provide the Direct3D shaders with data in a format it can understand (like a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Texture2D</pc></pc> bitmap).</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>Direct3D provides support for the DXT texture compression algorithms, although every DXT format may not be supported in the player's graphics hardware.</source>
          <target>Direct3D provides support for the DXT texture compression algorithms, although every DXT format may not be supported in the player's graphics hardware.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>DDS files contain DXT textures (and other texture compression formats as well), and are suffixed with .dds.</source>
          <target>DDS files contain DXT textures (and other texture compression formats as well), and are suffixed with .dds.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>A DDS file is a binary file that contains the following information:</source>
          <target>A DDS file is a binary file that contains the following information:</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>A DWORD (magic number) containing the four character code value 'DDS ' (0x20534444).</source>
          <target>A DWORD (magic number) containing the four character code value 'DDS ' (0x20534444).</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>A description of the data in the file.</source>
          <target>A description of the data in the file.</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb943982)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
          <data id="id6">[</data>
          <data id="id7">](https://msdn.microsoft.com/library/windows/desktop/bb943984)</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">\_</data>
        </originalData>
        <segment state="initial">
          <source>The data is described with a header description using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DDS<ph dataRef="id5" id="ph1" />HEADER</pc></pc>; the pixel format is defined using <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">DDS<ph dataRef="id10" id="ph2" />PIXELFORMAT</pc></pc>.</source>
          <target>The data is described with a header description using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DDS<ph dataRef="id5" id="ph1" />HEADER</pc></pc>; the pixel format is defined using <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">DDS<ph dataRef="id10" id="ph2" />PIXELFORMAT</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="210">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DDS<ph dataRef="id3" id="ph1" />HEADER</pc> and <pc dataRefEnd="id5" dataRefStart="id4" id="p2">DDS<ph dataRef="id6" id="ph2" />PIXELFORMAT</pc> structures replace the deprecated DDSURFACEDESC2, DDSCAPS2 and DDPIXELFORMAT DirectDraw 7 structures.</source>
          <target>Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DDS<ph dataRef="id3" id="ph1" />HEADER</pc> and <pc dataRefEnd="id5" dataRefStart="id4" id="p2">DDS<ph dataRef="id6" id="ph2" />PIXELFORMAT</pc> structures replace the deprecated DDSURFACEDESC2, DDSCAPS2 and DDPIXELFORMAT DirectDraw 7 structures.</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DDS<ph dataRef="id3" id="ph1" />HEADER</pc> is the binary equivalent of DDSURFACEDESC2 and DDSCAPS2.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DDS<ph dataRef="id3" id="ph1" />HEADER</pc> is the binary equivalent of DDSURFACEDESC2 and DDSCAPS2.</target>
        </segment>
      </unit>
      <unit id="212">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DDS<ph dataRef="id3" id="ph1" />PIXELFORMAT</pc> is the binary equivalent of DDPIXELFORMAT.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DDS<ph dataRef="id3" id="ph1" />PIXELFORMAT</pc> is the binary equivalent of DDPIXELFORMAT.</target>
        </segment>
      </unit>
      <unit id="213">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/desktop/bb943984)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">\_</data>
          <data id="id8">\_</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/desktop/bb943983)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">\_</data>
          <data id="id16">\_</data>
          <data id="id17">**</data>
          <data id="id18">**</data>
          <data id="id19">\_</data>
          <data id="id20">\_</data>
        </originalData>
        <segment state="initial">
          <source>If the value of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dwFlags</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DDS<ph dataRef="id7" id="ph1" />PIXELFORMAT</pc></pc> is set to DDPF<ph dataRef="id8" id="ph2" />FOURCC and <pc dataRefEnd="id10" dataRefStart="id9" id="p4">dwFourCC</pc> is set to "DX10" an additional <pc dataRefEnd="id12" dataRefStart="id11" id="p5"><pc dataRefEnd="id14" dataRefStart="id13" id="p6">DDS<ph dataRef="id15" id="ph3" />HEADER<ph dataRef="id16" id="ph4" />DXT10</pc></pc> structure will be present to accommodate texture arrays or DXGI formats that cannot be expressed as an RGB pixel format such as floating point formats, sRGB formats etc. When the <pc dataRefEnd="id18" dataRefStart="id17" id="p7">DDS<ph dataRef="id19" id="ph5" />HEADER<ph dataRef="id20" id="ph6" />DXT10</pc> structure is present, the entire data description will looks like this.</source>
          <target>If the value of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dwFlags</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DDS<ph dataRef="id7" id="ph1" />PIXELFORMAT</pc></pc> is set to DDPF<ph dataRef="id8" id="ph2" />FOURCC and <pc dataRefEnd="id10" dataRefStart="id9" id="p4">dwFourCC</pc> is set to "DX10" an additional <pc dataRefEnd="id12" dataRefStart="id11" id="p5"><pc dataRefEnd="id14" dataRefStart="id13" id="p6">DDS<ph dataRef="id15" id="ph3" />HEADER<ph dataRef="id16" id="ph4" />DXT10</pc></pc> structure will be present to accommodate texture arrays or DXGI formats that cannot be expressed as an RGB pixel format such as floating point formats, sRGB formats etc. When the <pc dataRefEnd="id18" dataRefStart="id17" id="p7">DDS<ph dataRef="id19" id="ph5" />HEADER<ph dataRef="id20" id="ph6" />DXT10</pc> structure is present, the entire data description will looks like this.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>A pointer to an array of bytes that contains the main surface data.</source>
          <target>A pointer to an array of bytes that contains the main surface data.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>A pointer to an array of bytes that contains the remaining surfaces such as; mipmap levels, faces in a cube map, depths in a volume texture.</source>
          <target>A pointer to an array of bytes that contains the remaining surfaces such as; mipmap levels, faces in a cube map, depths in a volume texture.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb205578)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/desktop/bb205577)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/bb205579)</data>
        </originalData>
        <segment state="initial">
          <source>Follow these links for more information about the DDS file layout for a: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">texture</pc>, a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">cube map</pc>, or a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">volume texture</pc>.</source>
          <target>Follow these links for more information about the DDS file layout for a: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">texture</pc>, a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">cube map</pc>, or a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">volume texture</pc>.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Many tools export to the DDS format.</source>
          <target>Many tools export to the DDS format.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>If you don't have a tool to export your texture to this format, consider creating one.</source>
          <target>If you don't have a tool to export your texture to this format, consider creating one.</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb943991)</data>
        </originalData>
        <segment state="initial">
          <source>For more detail on the DDS format and how to work with it in your code, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Programming Guide for DDS</pc>.</source>
          <target>For more detail on the DDS format and how to work with it in your code, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Programming Guide for DDS</pc>.</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>In our example, we'll use DDS.</source>
          <target>In our example, we'll use DDS.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>As with other resource types, you read the data from a file as a stream of bytes.</source>
          <target>As with other resource types, you read the data from a file as a stream of bytes.</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Once your loading task completes, the lambda call runs code (the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateTexture</pc> method) to process the stream of bytes into a format that Direct3D can use.</source>
          <target>Once your loading task completes, the lambda call runs code (the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateTexture</pc> method) to process the stream of bytes into a format that Direct3D can use.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>In the previous snippet, the lambda checks to see if the filename has an extension of "dds".</source>
          <target>In the previous snippet, the lambda checks to see if the filename has an extension of "dds".</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>If it does, you assume that it is a DDS texture.</source>
          <target>If it does, you assume that it is a DDS texture.</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>If not, well, use the Windows Imaging Component (WIC) APIs to discover the format and decode the data as a bitmap.</source>
          <target>If not, well, use the Windows Imaging Component (WIC) APIs to discover the format and decode the data as a bitmap.</target>
        </segment>
      </unit>
      <unit id="226">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Either way, the result is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Texture2D</pc></pc> bitmap (or an error).</source>
          <target>Either way, the result is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Texture2D</pc></pc> bitmap (or an error).</target>
        </segment>
      </unit>
      <unit id="227">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>When this code completes, you have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Texture2D</pc></pc> in memory, loaded from an image file.</source>
          <target>When this code completes, you have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Texture2D</pc></pc> in memory, loaded from an image file.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>As with meshes, you probably have a lot of them in your game and in any given scene.</source>
          <target>As with meshes, you probably have a lot of them in your game and in any given scene.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>Consider creating caches for regularly accessed textures per-scene or per-level, rather than loading them all when the game or level starts.</source>
          <target>Consider creating caches for regularly accessed textures per-scene or per-level, rather than loading them all when the game or level starts.</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](complete-code-for-ddstextureloader.md)</data>
        </originalData>
        <segment state="initial">
          <source>(The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateDDSTextureFromMemory</pc> method called in the above sample can be explored in full in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Complete code for DDSTextureLoader</pc>.)</source>
          <target>(The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateDDSTextureFromMemory</pc> method called in the above sample can be explored in full in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Complete code for DDSTextureLoader</pc>.)</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>Also, individual textures or texture "skins" may map to specific mesh polygons or surfaces.</source>
          <target>Also, individual textures or texture "skins" may map to specific mesh polygons or surfaces.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source>This mapping data is usually exported by the tool an artist or designer used to create the model and the textures.</source>
          <target>This mapping data is usually exported by the tool an artist or designer used to create the model and the textures.</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>Make sure that you capture this information as well when you load the exported data, as you will use it map the correct textures to the corresponding surfaces when you perform fragment shading.</source>
          <target>Make sure that you capture this information as well when you load the exported data, as you will use it map the correct textures to the corresponding surfaces when you perform fragment shading.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>Loading shaders</source>
          <target>Loading shaders</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>Shaders are compiled High Level Shader Language (HLSL) files that are loaded into memory and invoked at specific stages of the graphics pipeline.</source>
          <target>Shaders are compiled High Level Shader Language (HLSL) files that are loaded into memory and invoked at specific stages of the graphics pipeline.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>The most common and essential shaders are the vertex and pixel shaders, which process the individual vertices of your mesh and the pixels in the scene's viewport(s), respectively.</source>
          <target>The most common and essential shaders are the vertex and pixel shaders, which process the individual vertices of your mesh and the pixels in the scene's viewport(s), respectively.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>The HLSL code is executed to transform the geometry, apply lighting effects and textures, and perform post-processing on the rendered scene.</source>
          <target>The HLSL code is executed to transform the geometry, apply lighting effects and textures, and perform post-processing on the rendered scene.</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>A Direct3D game can have a number of different shaders, each one compiled into a separate CSO (Compiled Shader Object, .cso) file.</source>
          <target>A Direct3D game can have a number of different shaders, each one compiled into a separate CSO (Compiled Shader Object, .cso) file.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>Normally, you don't have so many that you need to load them dynamically, and in most cases, you can simply load them when the game is starting, or on a per-level basis (such as a shader for rain effects).</source>
          <target>Normally, you don't have so many that you need to load them dynamically, and in most cases, you can simply load them when the game is starting, or on a per-level basis (such as a shader for rain effects).</target>
        </segment>
      </unit>
      <unit id="240">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The code in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicLoader</pc> class provides a number of overloads for different shaders, including vertex, geometry, pixel, and hull shaders.</source>
          <target>The code in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicLoader</pc> class provides a number of overloads for different shaders, including vertex, geometry, pixel, and hull shaders.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>The code below covers pixel shaders as an example.</source>
          <target>The code below covers pixel shaders as an example.</target>
        </segment>
      </unit>
      <unit id="242">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](complete-code-for-basicloader.md)</data>
        </originalData>
        <segment state="initial">
          <source>(You can review the complete code in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Complete code for BasicLoader</pc>.)</source>
          <target>(You can review the complete code in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Complete code for BasicLoader</pc>.)</target>
        </segment>
      </unit>
      <unit id="243">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>In this example, you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicReaderWriter</pc> instance (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">m<ph dataRef="id5" id="ph1" />basicReaderWriter</pc>) to read in the supplied compiled shader object (.cso) file as a byte stream.</source>
          <target>In this example, you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BasicReaderWriter</pc> instance (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">m<ph dataRef="id5" id="ph1" />basicReaderWriter</pc>) to read in the supplied compiled shader object (.cso) file as a byte stream.</target>
        </segment>
      </unit>
      <unit id="244">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Once that task completes, the lambda calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreatePixelShader</pc></pc> with the byte data loaded from the file.</source>
          <target>Once that task completes, the lambda calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreatePixelShader</pc></pc> with the byte data loaded from the file.</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>Your callback must set some flag indicating that the load was successful, and your code must check this flag before running the shader.</source>
          <target>Your callback must set some flag indicating that the load was successful, and your code must check this flag before running the shader.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>Vertex shaders are bit more complex.</source>
          <target>Vertex shaders are bit more complex.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>For a vertex shader, you also load a separate input layout that defines the vertex data.</source>
          <target>For a vertex shader, you also load a separate input layout that defines the vertex data.</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>The following code can be used to asynchronously load a vertex shader along with a custom vertex input layout.</source>
          <target>The following code can be used to asynchronously load a vertex shader along with a custom vertex input layout.</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>Be sure that the vertex information that you load from your meshes can be correctly represented by this input layout!</source>
          <target>Be sure that the vertex information that you load from your meshes can be correctly represented by this input layout!</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>Let's create the input layout before you load the vertex shader.</source>
          <target>Let's create the input layout before you load the vertex shader.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>In this particular layout, each vertex has the following data processed by the vertex shader:</source>
          <target>In this particular layout, each vertex has the following data processed by the vertex shader:</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source>A 3D coordinate position (x, y, z) in the model's coordinate space, represented as a trio of 32-bit floating point values.</source>
          <target>A 3D coordinate position (x, y, z) in the model's coordinate space, represented as a trio of 32-bit floating point values.</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>A normal vector for the vertex, also represented as three 32-bit floating point values.</source>
          <target>A normal vector for the vertex, also represented as three 32-bit floating point values.</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>A transformed 2D texture coordinate value (u, v) , represented as a pair of 32-bit floating values.</source>
          <target>A transformed 2D texture coordinate value (u, v) , represented as a pair of 32-bit floating values.</target>
        </segment>
      </unit>
      <unit id="255">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb509647)</data>
        </originalData>
        <segment state="initial">
          <source>These per-vertex input elements are called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HLSL semantics</pc>, and they are a set of defined registers used to pass data to and from your compiled shader object.</source>
          <target>These per-vertex input elements are called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HLSL semantics</pc>, and they are a set of defined registers used to pass data to and from your compiled shader object.</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source>Your pipeline runs the vertex shader once for every vertex in the mesh that you've loaded.</source>
          <target>Your pipeline runs the vertex shader once for every vertex in the mesh that you've loaded.</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>The semantics define the input to (and output from) the vertex shader as it runs, and provide this data for your per-vertex computations in your shader's HLSL code.</source>
          <target>The semantics define the input to (and output from) the vertex shader as it runs, and provide this data for your per-vertex computations in your shader's HLSL code.</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source>Now, load the vertex shader object.</source>
          <target>Now, load the vertex shader object.</target>
        </segment>
      </unit>
      <unit id="259">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In this code, once you've read in the byte data for the vertex shader's CSO file, you create the vertex shader by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreateVertexShader</pc></pc>.</source>
          <target>In this code, once you've read in the byte data for the vertex shader's CSO file, you create the vertex shader by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreateVertexShader</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source>After that, you create your input layout for the shader in the same lambda.</source>
          <target>After that, you create your input layout for the shader in the same lambda.</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source>Other shader types, such as hull and geometry shaders, can also require specific configuration.</source>
          <target>Other shader types, such as hull and geometry shaders, can also require specific configuration.</target>
        </segment>
      </unit>
      <unit id="262">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](complete-code-for-basicloader.md)</data>
          <data id="id3">[</data>
          <data id="id4">]( http://go.microsoft.com/fwlink/p/?LinkID=265132)</data>
        </originalData>
        <segment state="initial">
          <source>Complete code for a variety of shader loading methods is provided in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Complete code for BasicLoader</pc> and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Direct3D resource loading sample</pc>.</source>
          <target>Complete code for a variety of shader loading methods is provided in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Complete code for BasicLoader</pc> and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Direct3D resource loading sample</pc>.</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source>Remarks</source>
          <target>Remarks</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>At this point, you should understand and be able to create or modify methods for asynchronously loading common game resources and assets, such as meshes, textures, and compiled shaders.</source>
          <target>At this point, you should understand and be able to create or modify methods for asynchronously loading common game resources and assets, such as meshes, textures, and compiled shaders.</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source>Direct3D resource loading sample</source>
          <target>Direct3D resource loading sample</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source>Complete code for BasicLoader</source>
          <target>Complete code for BasicLoader</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source>Complete code for BasicReaderWriter</source>
          <target>Complete code for BasicReaderWriter</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source>Complete code for DDSTextureLoader</source>
          <target>Complete code for DDSTextureLoader</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>