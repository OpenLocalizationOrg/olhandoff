<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\gaming\plan-your-directx-port.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">929ad82ce057754ee04f1f27537e03520e95157a</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Plan your DirectX port</source>
          <target>Plan your DirectX port</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Plan your game porting project from DirectX 9 to DirectX 11 and Universal Windows Platform (UWP)-- upgrade your graphics code, and put your game in the Windows Runtime environment.</source>
          <target>Plan your game porting project from DirectX 9 to DirectX 11 and Universal Windows Platform (UWP)-- upgrade your graphics code, and put your game in the Windows Runtime environment.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Plan your DirectX port</source>
          <target>Plan your DirectX port</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Summary</source>
          <target>Summary</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Plan your DirectX port</source>
          <target>Plan your DirectX port</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Important changes from Direct3D 9 to Direct3D 11</source>
          <target>Important changes from Direct3D 9 to Direct3D 11</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Feature mapping</source>
          <target>Feature mapping</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Plan your game porting project from DirectX 9 to DirectX 11 and Universal Windows Platform (UWP): upgrade your graphics code, and put your game in the Windows Runtime environment.</source>
          <target>Plan your game porting project from DirectX 9 to DirectX 11 and Universal Windows Platform (UWP): upgrade your graphics code, and put your game in the Windows Runtime environment.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Plan to port graphics code</source>
          <target>Plan to port graphics code</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Before you begin porting your game to UWP, it's important to ensure that your game does not have any holdovers from Direct3D 8.</source>
          <target>Before you begin porting your game to UWP, it's important to ensure that your game does not have any holdovers from Direct3D 8.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Ensure that your game doesn't have any remnants of the fixed function pipeline.</source>
          <target>Ensure that your game doesn't have any remnants of the fixed function pipeline.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/cc308047)</data>
        </originalData>
        <segment state="initial">
          <source>For a complete list of deprecated features, including fixed pipeline functionality, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deprecated Features</pc>.</source>
          <target>For a complete list of deprecated features, including fixed pipeline functionality, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deprecated Features</pc>.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Upgrading from Direct3D 9 to Direct3D 11 is more than a search-and-replace change.</source>
          <target>Upgrading from Direct3D 9 to Direct3D 11 is more than a search-and-replace change.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>You need to know the difference between the Direct3D device, device context, and graphics infrastructure, and learn about other important changes since Direct3D 9.</source>
          <target>You need to know the difference between the Direct3D device, device context, and graphics infrastructure, and learn about other important changes since Direct3D 9.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>You can start this process by reading the other topics in this section.</source>
          <target>You can start this process by reading the other topics in this section.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>You must replace the D3DX and DXUT helper libraries with your own helper libraries, or with community tools.</source>
          <target>You must replace the D3DX and DXUT helper libraries with your own helper libraries, or with community tools.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](feature-mapping.md)</data>
        </originalData>
        <segment state="initial">
          <source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Feature mapping</pc> section for more info.</source>
          <target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Feature mapping</pc> section for more info.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?LinkID=248929)</data>
          <data id="id5">[</data>
          <data id="id6">](http://go.microsoft.com/fwlink/p/?LinkID=248926)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   You can use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DirectX Tool Kit</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DirectXTex</pc> to replace some functionality that was formerly provided by D3DX and DXUT.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   You can use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DirectX Tool Kit</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DirectXTex</pc> to replace some functionality that was formerly provided by D3DX and DXUT.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>Shaders written in assembly language should be upgraded to HLSL using shader model 4 level 9<ph dataRef="id1" id="ph1" />1 or 9<ph dataRef="id2" id="ph2" />3 functionality, and shaders written for the Effects library will need to be updated to a more recent version of HLSL syntax.</source>
          <target>Shaders written in assembly language should be upgraded to HLSL using shader model 4 level 9<ph dataRef="id1" id="ph1" />1 or 9<ph dataRef="id2" id="ph2" />3 functionality, and shaders written for the Effects library will need to be updated to a more recent version of HLSL syntax.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](feature-mapping.md)</data>
        </originalData>
        <segment state="initial">
          <source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Feature mapping</pc> section for more info.</source>
          <target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Feature mapping</pc> section for more info.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476876)</data>
        </originalData>
        <segment state="initial">
          <source>Get familiar with the different <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Direct3D feature levels</pc>.</source>
          <target>Get familiar with the different <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Direct3D feature levels</pc>.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Feature levels classify a wide range of video hardware by defining sets of known functionality.</source>
          <target>Feature levels classify a wide range of video hardware by defining sets of known functionality.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Each set roughly corresponds to versions of Direct3D, from 9.1 through 11.2.</source>
          <target>Each set roughly corresponds to versions of Direct3D, from 9.1 through 11.2.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>All feature levels use the DirectX 11 API.</source>
          <target>All feature levels use the DirectX 11 API.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Plan to port Win32 UI code to CoreWindow</source>
          <target>Plan to port Win32 UI code to CoreWindow</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>UWP apps run in a window created for an app container, called a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc>.</source>
          <target>UWP apps run in a window created for an app container, called a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700478)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Your game controls the window by inheriting from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc>, which requires less implementation details than a desktop window.</source>
          <target>Your game controls the window by inheriting from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc>, which requires less implementation details than a desktop window.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700505)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Your game's main loop will be in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView::Run</pc></pc> method.</source>
          <target>Your game's main loop will be in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView::Run</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>The lifecycle of a UWP app is very different from a desktop app.</source>
          <target>The lifecycle of a UWP app is very different from a desktop app.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>You'll need to save the game often, because when a suspend event happens your app only has a limited amount of time to stop running code, and you want to make sure the player can get back to where they were right away when your app resumes.</source>
          <target>You'll need to save the game often, because when a suspend event happens your app only has a limited amount of time to stop running code, and you want to make sure the player can get back to where they were right away when your app resumes.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Games should save just often enough to maintain a continuous gameplay experience from resume, but not so often that the game saves impact framerate or cause the game to stutter.</source>
          <target>Games should save just often enough to maintain a continuous gameplay experience from resume, but not so often that the game saves impact framerate or cause the game to stutter.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Your game will potentially need to load game state when the game resumes from a terminated state.</source>
          <target>Your game will potentially need to load game state when the game resumes from a terminated state.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ee415571)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectXMath</pc> can be used as a replacement for D3DXMath and XNAMath, and it can come in handy if you need a math library.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectXMath</pc> can be used as a replacement for D3DXMath and XNAMath, and it can come in handy if you need a math library.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>DirectXMath has fast, portable data types, and types that are aligned and packed for use with shaders.</source>
          <target>DirectXMath has fast, portable data types, and types that are aligned and packed for use with shaders.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/dd405529)</data>
        </originalData>
        <segment state="initial">
          <source>Native libraries such as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Interlocked API</pc> have been expanded to support ARM intrinsics.</source>
          <target>Native libraries such as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Interlocked API</pc> have been expanded to support ARM intrinsics.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>If your game uses interlocked APIs, you can keep using them in DirectX 11 and UWP.</source>
          <target>If your game uses interlocked APIs, you can keep using them in DirectX 11 and UWP.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Our templates and code samples use new C++ features that you might not be familiar with yet.</source>
          <target>Our templates and code samples use new C++ features that you might not be familiar with yet.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dd293608.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For example, asynchronous methods are used with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">lambda expressions</pc></pc> to load Direct3D resources without blocking the UI thread.</source>
          <target>For example, asynchronous methods are used with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">lambda expressions</pc></pc> to load Direct3D resources without blocking the UI thread.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>There are two concepts you'll use often:</source>
          <target>There are two concepts you'll use often:</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">^</data>
          <data id="id4">[</data>
          <data id="id5">](https://msdn.microsoft.com/library/windows/apps/6w96b5h7.aspx)</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>Managed references ([<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" /></pc>]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx) and <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">managed classes</pc></pc> (ref classes) are a fundamental part of the Windows Runtime.</source>
          <target>Managed references ([<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" /></pc>]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx) and <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">managed classes</pc></pc> (ref classes) are a fundamental part of the Windows Runtime.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700478)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You will need to use managed ref classes to interface with Windows Runtime components, for example <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc> (more on that in the walkthrough).</source>
          <target>You will need to use managed ref classes to interface with Windows Runtime components, for example <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc> (more on that in the walkthrough).</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>When working with Direct3D 11 COM interfaces, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft::WRL::ComPtr</pc></pc> template type to make COM pointers easier to use.</source>
          <target>When working with Direct3D 11 COM interfaces, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft::WRL::ComPtr</pc></pc> template type to make COM pointers easier to use.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>