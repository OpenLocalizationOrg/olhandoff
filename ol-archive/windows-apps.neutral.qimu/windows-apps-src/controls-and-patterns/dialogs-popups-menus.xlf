<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\controls-and-patterns\dialogs-popups-menus.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">e268a5facebbdb80d7cc5cdd52c1a6f944ef7d00</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>A flyout is a lightweight popup that is used to temporarily show UI that is related to what the user is currently doing.</source>
          <target>A flyout is a lightweight popup that is used to temporarily show UI that is related to what the user is currently doing.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Context menus and dialogs</source>
          <target>Context menus and dialogs</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Menus, dialogs, flyouts and popups</source>
          <target>Menus, dialogs, flyouts and popups</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Menus, dialogs, flyouts and popups display transient UI elements that appear when the user requests them or when something happens that requires notification or approval.</source>
          <target>Menus, dialogs, flyouts and popups display transient UI elements that appear when the user requests them or when something happens that requires notification or approval.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Important APIs</source>
          <target>Important APIs</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>MenuFlyout class</source>
          <target>MenuFlyout class</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Flyout class</source>
          <target>Flyout class</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>ContentDialog class</source>
          <target>ContentDialog class</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>A context menu provides the user with instant actions.</source>
          <target>A context menu provides the user with instant actions.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>It can be filled with text commands.</source>
          <target>It can be filled with text commands.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Context menus can be light dismissed by tapping or clicking somewhere outside the menu.</source>
          <target>Context menus can be light dismissed by tapping or clicking somewhere outside the menu.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Dialogs are modal UI overlays that provide contextual app information.</source>
          <target>Dialogs are modal UI overlays that provide contextual app information.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Dialogs block interactions with the app window until being explicitly dismissed.</source>
          <target>Dialogs block interactions with the app window until being explicitly dismissed.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>They often request some kind of action from the user.</source>
          <target>They often request some kind of action from the user.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>A flyout is a lightweight contextual popup that displays UI related to what the user is doing.</source>
          <target>A flyout is a lightweight contextual popup that displays UI related to what the user is doing.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>It includes placement and sizing logic, and can be used to reveal a hidden control, show more detail about an item, or ask the user to confirm an action.</source>
          <target>It includes placement and sizing logic, and can be used to reveal a hidden control, show more detail about an item, or ask the user to confirm an action.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Flyouts can be light dismissed by tapping or clicking somewhere outside the popup.</source>
          <target>Flyouts can be light dismissed by tapping or clicking somewhere outside the popup.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Is this the right control?</source>
          <target>Is this the right control?</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Context menus can be used for:</source>
          <target>Context menus can be used for:</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Contextual actions.</source>
          <target>Contextual actions.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Commands for an object that must be acted upon but that can't be selected.</source>
          <target>Commands for an object that must be acted upon but that can't be selected.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Dialogs can be used for:</source>
          <target>Dialogs can be used for:</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Expressing important information that the user must read and acknowledge before proceeding.</source>
          <target>Expressing important information that the user must read and acknowledge before proceeding.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Requesting a clear action from the user or communicating an important message that the user should acknowledge.</source>
          <target>Requesting a clear action from the user or communicating an important message that the user should acknowledge.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Examples include:</source>
          <target>Examples include:</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>When the user's security might be compromised</source>
          <target>When the user's security might be compromised</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>When the user is about to permanently alter a valuable asset</source>
          <target>When the user is about to permanently alter a valuable asset</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>When the user is about to delete a valuable asset</source>
          <target>When the user is about to delete a valuable asset</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>To confirm an in-app purchase</source>
          <target>To confirm an in-app purchase</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Error messages that apply to the overall app context, such as a connectivity error.</source>
          <target>Error messages that apply to the overall app context, such as a connectivity error.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Questions, when the app needs to ask the user a blocking question, such as when the app can't choose on the user's behalf.</source>
          <target>Questions, when the app needs to ask the user a blocking question, such as when the app can't choose on the user's behalf.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>A blocking question can't be ignored or postponed, and should offer the user well-defined choices.</source>
          <target>A blocking question can't be ignored or postponed, and should offer the user well-defined choices.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Flyouts can be used for:</source>
          <target>Flyouts can be used for:</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Contextual, transient UI.</source>
          <target>Contextual, transient UI.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Warnings and confirmations, including ones related to potentially destructive actions.</source>
          <target>Warnings and confirmations, including ones related to potentially destructive actions.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Displaying more information, such as details or longer descriptions of an item on the page.</source>
          <target>Displaying more information, such as details or longer descriptions of an item on the page.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Examples</source>
          <target>Examples</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Here's a typical single-pane context menu with a short list of simple commands.</source>
          <target>Here's a typical single-pane context menu with a short list of simple commands.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>It can scroll if necessary.</source>
          <target>It can scroll if necessary.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Use separators as needed to group similar commands.</source>
          <target>Use separators as needed to group similar commands.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Example of a typical context menu</source>
          <target>Example of a typical context menu</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>A cascading context menu can be used for a more comprehensive collection of commands.</source>
          <target>A cascading context menu can be used for a more comprehensive collection of commands.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>It features multiple flyout levels and can scroll.</source>
          <target>It features multiple flyout levels and can scroll.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Use separators as needed to group similar commands.</source>
          <target>Use separators as needed to group similar commands.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Example of a cascading context menu</source>
          <target>Example of a cascading context menu</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>This is an example of a full-screen, single-button confirmation dialog.</source>
          <target>This is an example of a full-screen, single-button confirmation dialog.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>With this kind of dialog, the user is presented with a fair amount of information that they're expected to read before pressing the button to proceed.</source>
          <target>With this kind of dialog, the user is presented with a fair amount of information that they're expected to read before pressing the button to proceed.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Example of a full-page, single-button dialog</source>
          <target>Example of a full-page, single-button dialog</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Here's an example of a two-button dialog that presents the user with an A/B choice.</source>
          <target>Here's an example of a two-button dialog that presents the user with an A/B choice.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Generally, the amount of information presented in this dialog is brief.</source>
          <target>Generally, the amount of information presented in this dialog is brief.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Example of a full-button dialog</source>
          <target>Example of a full-button dialog</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Modal vs light dismiss</source>
          <target>Modal vs light dismiss</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Dialogs are modal, which means they block all interaction with the app until the user selects a dialog button.</source>
          <target>Dialogs are modal, which means they block all interaction with the app until the user selects a dialog button.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>To visually reinforce their modal behavior, dialogs draw an overlay layer which partially obscures the temporarily unreachable app UI.</source>
          <target>To visually reinforce their modal behavior, dialogs draw an overlay layer which partially obscures the temporarily unreachable app UI.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> When Cancel is one of the available dialog options, apps can choose to let users dismiss the dialog by pressing the Escape key.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> When Cancel is one of the available dialog options, apps can choose to let users dismiss the dialog by pressing the Escape key.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>This behavior is not built into the control but is a commonly implemented shortcut.</source>
          <target>This behavior is not built into the control but is a commonly implemented shortcut.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Flyouts and context menus are light dismiss controls, meaning that users can choose from a variety of actions to quickly dismiss transient UIs.</source>
          <target>Flyouts and context menus are light dismiss controls, meaning that users can choose from a variety of actions to quickly dismiss transient UIs.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>These interactions are intended to be lightweight and non-blocking.</source>
          <target>These interactions are intended to be lightweight and non-blocking.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Light dismiss actions include</source>
          <target>Light dismiss actions include</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Click or tap outside the transient UI</source>
          <target>Click or tap outside the transient UI</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>Press the Escape key</source>
          <target>Press the Escape key</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Press the Back button</source>
          <target>Press the Back button</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Resize the app window</source>
          <target>Resize the app window</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Change device orientation</source>
          <target>Change device orientation</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Dialog usage guidelines</source>
          <target>Dialog usage guidelines</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>Clearly identify the issue or the user's objective in the first line of the dialog's text.</source>
          <target>Clearly identify the issue or the user's objective in the first line of the dialog's text.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>The dialog title is the main instruction and is optional.</source>
          <target>The dialog title is the main instruction and is optional.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Use a short title to explain what people need to do with the dialog.</source>
          <target>Use a short title to explain what people need to do with the dialog.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>Long titles do not wrap and are truncated.</source>
          <target>Long titles do not wrap and are truncated.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>If you're using the dialog to deliver a simple message, error or question, you can optionally omit the title.</source>
          <target>If you're using the dialog to deliver a simple message, error or question, you can optionally omit the title.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Rely on the content text to deliver that core information.</source>
          <target>Rely on the content text to deliver that core information.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>Make sure that the title relates directly to the button choices.</source>
          <target>Make sure that the title relates directly to the button choices.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>The dialog content contains the descriptive text and is required.</source>
          <target>The dialog content contains the descriptive text and is required.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Present the message, error, or blocking question as simply as possible.</source>
          <target>Present the message, error, or blocking question as simply as possible.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>If a dialog title is used, use the content area to provide more detail or define terminology.</source>
          <target>If a dialog title is used, use the content area to provide more detail or define terminology.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>Don't repeat the title with slightly different wording.</source>
          <target>Don't repeat the title with slightly different wording.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>At least one dialog button must appear.</source>
          <target>At least one dialog button must appear.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Buttons are the only mechanism for users to dismiss the dialog.</source>
          <target>Buttons are the only mechanism for users to dismiss the dialog.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>Use buttons with text that identifies specific responses to the main instruction or content.</source>
          <target>Use buttons with text that identifies specific responses to the main instruction or content.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>An example is, "Do you want to allow AppName to access your location?", followed by "Allow" and "Block" buttons.</source>
          <target>An example is, "Do you want to allow AppName to access your location?", followed by "Allow" and "Block" buttons.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>Specific responses can be understood more quickly, resulting in efficient decision making.</source>
          <target>Specific responses can be understood more quickly, resulting in efficient decision making.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>Error dialogs display the error message in the dialog box, along with any pertinent information.</source>
          <target>Error dialogs display the error message in the dialog box, along with any pertinent information.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>The only button used in an error dialog should be “Close” or a similar action.</source>
          <target>The only button used in an error dialog should be “Close” or a similar action.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>Don't use dialogs for errors that are contextual to a specific place on the page, such as validation errors (in password fields, for example), use the app's canvas itself to show inline errors.</source>
          <target>Don't use dialogs for errors that are contextual to a specific place on the page, such as validation errors (in password fields, for example), use the app's canvas itself to show inline errors.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Context menus and flyouts</source>
          <target>Context menus and flyouts</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>Context menus and flyouts are closely related controls that share interaction behaviors.</source>
          <target>Context menus and flyouts are closely related controls that share interaction behaviors.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>The primary difference between these controls is in the type of content that they accept.</source>
          <target>The primary difference between these controls is in the type of content that they accept.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>MenuFlyout</source>
          <target>MenuFlyout</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.menuflyoutitem.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.togglemenuflyoutitem.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.menuflyoutsubitem.aspx)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.menuflyoutseparator.aspx)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source>A context menu, implemented with the MenuFlyout class, can contain <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MenuFlyoutItem</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ToggleMenuFlyoutItem</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MenuFlyoutSubItem</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">MenuFlyoutSeparator</pc></pc>.</source>
          <target>A context menu, implemented with the MenuFlyout class, can contain <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MenuFlyoutItem</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ToggleMenuFlyoutItem</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MenuFlyoutSubItem</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">MenuFlyoutSeparator</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>To show any other type of UI, use Flyout.</source>
          <target>To show any other type of UI, use Flyout.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>Usage guidelines</source>
          <target>Usage guidelines</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Use a separator between groups of commands in a context menu to:</source>
          <target>Use a separator between groups of commands in a context menu to:</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>Distinguish groups of related commands.</source>
          <target>Distinguish groups of related commands.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>Group together sets of commands.</source>
          <target>Group together sets of commands.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>Divide a predictable set of commands, such as clipboard commands (Cut / Copy / Paste), from app-specific or view-specific commands.</source>
          <target>Divide a predictable set of commands, such as clipboard commands (Cut / Copy / Paste), from app-specific or view-specific commands.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>On laptops and desktops, context menus and tooltips aren't limited to the application window and can paint partially outside of it.</source>
          <target>On laptops and desktops, context menus and tooltips aren't limited to the application window and can paint partially outside of it.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>If the app tries to render a context menu completely outside of its window, an exception will be thrown.</source>
          <target>If the app tries to render a context menu completely outside of its window, an exception will be thrown.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>Do's and don'ts</source>
          <target>Do's and don'ts</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>Keep context menu commands short.</source>
          <target>Keep context menu commands short.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>Longer commands end up being truncated.</source>
          <target>Longer commands end up being truncated.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>Use sentence capitalization for each command name.</source>
          <target>Use sentence capitalization for each command name.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>In any context menu, show the fewest possible number of commands.</source>
          <target>In any context menu, show the fewest possible number of commands.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>If direct manipulation of a UI element is possible, avoid placing that command within a context menu.</source>
          <target>If direct manipulation of a UI element is possible, avoid placing that command within a context menu.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>A context menu should be reserved for contextual commands that aren't otherwise discoverable on-screen.</source>
          <target>A context menu should be reserved for contextual commands that aren't otherwise discoverable on-screen.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>Flyout</source>
          <target>Flyout</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>A Flyout is an open-ended container that can show arbitrary UI as its content.</source>
          <target>A Flyout is an open-ended container that can show arbitrary UI as its content.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>Flyouts don’t have visual parts on their own, they are simply a content control.</source>
          <target>Flyouts don’t have visual parts on their own, they are simply a content control.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>Flyouts do have a margin and optional scroll bars they add around their content.</source>
          <target>Flyouts do have a margin and optional scroll bars they add around their content.</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">`FlyoutPresenterStyle`</data>
        </originalData>
        <segment state="initial">
          <source>To style a Flyout, modify its <ph dataRef="id1" id="ph1" />.</source>
          <target>To style a Flyout, modify its <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>The following code shows a paragraph of wrapping text and makes the text block accessible to a screen reader.</source>
          <target>The following code shows a paragraph of wrapping text and makes the text block accessible to a screen reader.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>Invocation and placement</source>
          <target>Invocation and placement</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>Flyouts and context menus are attached to specific controls.</source>
          <target>Flyouts and context menus are attached to specific controls.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>When visible, they should be anchored to the invoking object and specify their preferred relative position to the object: Top, Left, Bottom, or Right.</source>
          <target>When visible, they should be anchored to the invoking object and specify their preferred relative position to the object: Top, Left, Bottom, or Right.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>Flyout also has a Full placement mode which attempts to stretch the flyout and center it inside the app window.</source>
          <target>Flyout also has a Full placement mode which attempts to stretch the flyout and center it inside the app window.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.button.aspx)</data>
          <data id="id3">`Flyout`</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button class</pc> includes a <ph dataRef="id3" id="ph1" /> property that lets you specify the transient UI that will open when the user clicks or taps the button.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button class</pc> includes a <ph dataRef="id3" id="ph1" /> property that lets you specify the transient UI that will open when the user clicks or taps the button.</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source>To open a context menu, users can perform one of the following actions:</source>
          <target>To open a context menu, users can perform one of the following actions:</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Right click with mouse</source>
          <target>Right click with mouse</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>Press and hold with touch</source>
          <target>Press and hold with touch</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>Type Shift + F10</source>
          <target>Type Shift + F10</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>Press keyboard menu key</source>
          <target>Press keyboard menu key</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>Press gamepad menu button</source>
          <target>Press gamepad menu button</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.uielement.contextflyout.aspx)</data>
          <data id="id3">`ContextFlyout`</data>
          <data id="id4">[</data>
          <data id="id5">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.uielement.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>To easily open a context menu or flyout in response to any of the above actions, apps can leverage the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" /></pc> property on <pc dataRefEnd="id5" dataRefStart="id4" id="p2">UIElement</pc>, the base class for most controls.</source>
          <target>To easily open a context menu or flyout in response to any of the above actions, apps can leverage the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" /></pc> property on <pc dataRefEnd="id5" dataRefStart="id4" id="p2">UIElement</pc>, the base class for most controls.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>Related articles</source>
          <target>Related articles</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>For developers</source>
          <target>For developers</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>MenuFlyout class</source>
          <target>MenuFlyout class</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>Flyout class</source>
          <target>Flyout class</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>ContentDialog class</source>
          <target>ContentDialog class</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>