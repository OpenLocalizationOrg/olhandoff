<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\reduce-latency-with-dxgi-1-3-swap-chains.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef99d07b44efbfeb059cc17e74535e87d1a6d0f6</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reduce latency with DXGI 1.3 swap chains</source>
          <target state="new">Reduce latency with DXGI 1.3 swap chains</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Use DXGI 1.3 to reduce the effective frame latency by waiting for the swap chain to signal the appropriate time to begin rendering a new frame.</source>
          <target state="new">Use DXGI 1.3 to reduce the effective frame latency by waiting for the swap chain to signal the appropriate time to begin rendering a new frame.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reduce latency with DXGI 1.3 swap chains</source>
          <target state="new">Reduce latency with DXGI 1.3 swap chains</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use DXGI 1.3 to reduce the effective frame latency by waiting for the swap chain to signal the appropriate time to begin rendering a new frame.</source>
          <target state="new">Use DXGI 1.3 to reduce the effective frame latency by waiting for the swap chain to signal the appropriate time to begin rendering a new frame.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Games typically need to provide the lowest amount of latency possible from the time the player input is received, to when the game responds to that input by updating the display.</source>
          <target state="new">Games typically need to provide the lowest amount of latency possible from the time the player input is received, to when the game responds to that input by updating the display.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic explains a technique available starting in Direct3D 11.2 that you can use to minimize the effective frame latency in your game.</source>
          <target state="new">This topic explains a technique available starting in Direct3D 11.2 that you can use to minimize the effective frame latency in your game.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How does waiting on the back buffer reduce latency?</source>
          <target state="new">How does waiting on the back buffer reduce latency?</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>With the flip model swap chain, back buffer "flips" are queued whenever your game calls <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</ept>.</source>
          <target state="new">With the flip model swap chain, back buffer "flips" are queued whenever your game calls <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When the rendering loop calls Present(), the system blocks the thread until it is done presenting a prior frame, making room to queue up the new frame, before it actually presents.</source>
          <target state="new">When the rendering loop calls Present(), the system blocks the thread until it is done presenting a prior frame, making room to queue up the new frame, before it actually presents.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This causes extra latency between the time the game draws a frame and the time the system allows it to display that frame.</source>
          <target state="new">This causes extra latency between the time the game draws a frame and the time the system allows it to display that frame.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In many cases, the system will reach a stable equilibrium where the game is always waiting almost a full extra frame between the time it renders and the time it presents each frame.</source>
          <target state="new">In many cases, the system will reach a stable equilibrium where the game is always waiting almost a full extra frame between the time it renders and the time it presents each frame.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It's better to wait until the system is ready to accept a new frame, then render the frame based on current data and queue the frame immediately.</source>
          <target state="new">It's better to wait until the system is ready to accept a new frame, then render the frame based on current data and queue the frame immediately.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create a waitable swap chain with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>FLAG<ph id="ph4">\_</ph>FRAME<ph id="ph5">\_</ph>LATENCY<ph id="ph6">\_</ph>WAITABLE<ph id="ph7">\_</ph>OBJECT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173076)</ept> flag.</source>
          <target state="new">Create a waitable swap chain with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>FLAG<ph id="ph4">\_</ph>FRAME<ph id="ph5">\_</ph>LATENCY<ph id="ph6">\_</ph>WAITABLE<ph id="ph7">\_</ph>OBJECT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173076)</ept> flag.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Swap chains created this way can notify your rendering loop when the system is actually ready to accept a new frame.</source>
          <target state="new">Swap chains created this way can notify your rendering loop when the system is actually ready to accept a new frame.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This allows your game to render based on current data and then put the result in the present queue right away.</source>
          <target state="new">This allows your game to render based on current data and then put the result in the present queue right away.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Step 1: Create a waitable swap chain</source>
          <target state="new">Step 1: Create a waitable swap chain</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Specify the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>FLAG<ph id="ph4">\_</ph>FRAME<ph id="ph5">\_</ph>LATENCY<ph id="ph6">\_</ph>WAITABLE<ph id="ph7">\_</ph>OBJECT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173076)</ept> flag when you call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CreateSwapChainForCoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</ept>.</source>
          <target state="new">Specify the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>FLAG<ph id="ph4">\_</ph>FRAME<ph id="ph5">\_</ph>LATENCY<ph id="ph6">\_</ph>WAITABLE<ph id="ph7">\_</ph>OBJECT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173076)</ept> flag when you call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CreateSwapChainForCoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   In contrast to some flags, this flag can't be added or removed using <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ResizeBuffers<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb174577)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   In contrast to some flags, this flag can't be added or removed using <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ResizeBuffers<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb174577)</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>DXGI returns an error code if this flag is set differently from when the swap chain was created.</source>
          <target state="new">DXGI returns an error code if this flag is set differently from when the swap chain was created.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Step 2: Set the frame latency</source>
          <target state="new">Step 2: Set the frame latency</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Set the frame latency with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain2::SetMaximumFrameLatency<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn268313)</ept> API, instead of calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIDevice1::SetMaximumFrameLatency<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff471334)</ept>.</source>
          <target state="new">Set the frame latency with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain2::SetMaximumFrameLatency<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn268313)</ept> API, instead of calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIDevice1::SetMaximumFrameLatency<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff471334)</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By default, the frame latency for waitable swap chains is set to 1, which results in the least possible latency but also reduces CPU-GPU parallelism.</source>
          <target state="new">By default, the frame latency for waitable swap chains is set to 1, which results in the least possible latency but also reduces CPU-GPU parallelism.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you need increased CPU-GPU parallelism to achieve 60 FPS - that is, if the CPU and GPU each spend less than 16.7 ms a frame processing rendering work, but their combined sum is greater than 16.7 ms — set the frame latency to 2.</source>
          <target state="new">If you need increased CPU-GPU parallelism to achieve 60 FPS - that is, if the CPU and GPU each spend less than 16.7 ms a frame processing rendering work, but their combined sum is greater than 16.7 ms — set the frame latency to 2.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This allows the GPU to process work queued up by the CPU during the previous frame, while at the same time allowing the CPU to submit rendering commands for the current frame independently.</source>
          <target state="new">This allows the GPU to process work queued up by the CPU during the previous frame, while at the same time allowing the CPU to submit rendering commands for the current frame independently.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Step 3: Get the waitable object from the swap chain</source>
          <target state="new">Step 3: Get the waitable object from the swap chain</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain2::GetFrameLatencyWaitableObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn268309)</ept> to retrieve the wait handle.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain2::GetFrameLatencyWaitableObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn268309)</ept> to retrieve the wait handle.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The wait handle is a pointer to the waitable object.</source>
          <target state="new">The wait handle is a pointer to the waitable object.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Store this handle for use by your rendering loop.</source>
          <target state="new">Store this handle for use by your rendering loop.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Step 4: Wait before rendering each frame</source>
          <target state="new">Step 4: Wait before rendering each frame</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Your rendering loop should wait for the swap chain to signal via the waitable object before it begins rendering every frame.</source>
          <target state="new">Your rendering loop should wait for the swap chain to signal via the waitable object before it begins rendering every frame.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This includes the first frame rendered with the swap chain.</source>
          <target state="new">This includes the first frame rendered with the swap chain.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>WaitForSingleObjectEx<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms687036)</ept>, providing the wait handle retrieved in Step 2, to signal the start of each frame.</source>
          <target state="new">Use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>WaitForSingleObjectEx<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms687036)</ept>, providing the wait handle retrieved in Step 2, to signal the start of each frame.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example shows the render loop from the DirectXLatency sample:</source>
          <target state="new">The following example shows the render loop from the DirectXLatency sample:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example shows the WaitForSingleObjectEx call from the DirectXLatency sample:</source>
          <target state="new">The following example shows the WaitForSingleObjectEx call from the DirectXLatency sample:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>What should my game do while it waits for the swap chain to present?</source>
          <target state="new">What should my game do while it waits for the swap chain to present?</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If your game doesn’t have any tasks that block on the render loop, letting it wait for the swap chain to present can be advantageous because it saves power, which is especially important on mobile devices.</source>
          <target state="new">If your game doesn’t have any tasks that block on the render loop, letting it wait for the swap chain to present can be advantageous because it saves power, which is especially important on mobile devices.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Otherwise, you can use multithreading to accomplish work while your game is waiting for the swap chain to present.</source>
          <target state="new">Otherwise, you can use multithreading to accomplish work while your game is waiting for the swap chain to present.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Here are just a few tasks that your game can complete:</source>
          <target state="new">Here are just a few tasks that your game can complete:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Process network events</source>
          <target state="new">Process network events</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Update the AI</source>
          <target state="new">Update the AI</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CPU-based physics</source>
          <target state="new">CPU-based physics</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Deferred-context rendering (on supported devices)</source>
          <target state="new">Deferred-context rendering (on supported devices)</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Asset loading</source>
          <target state="new">Asset loading</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about multithreaded programming in Windows, see the following related topics.</source>
          <target state="new">For more information about multithreaded programming in Windows, see the following related topics.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>DirectXLatency sample</source>
          <target state="new">DirectXLatency sample</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>IDXGISwapChain2::GetFrameLatencyWaitableObject</source>
          <target state="new">IDXGISwapChain2::GetFrameLatencyWaitableObject</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>WaitForSingleObjectEx</source>
          <target state="new">WaitForSingleObjectEx</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Windows.System.Threading</source>
          <target state="new">Windows.System.Threading</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Asynchronous programming in C++</source>
          <target state="new">Asynchronous programming in C++</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Processes and Threads</source>
          <target state="new">Processes and Threads</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Synchronization</source>
          <target state="new">Synchronization</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Using Event Objects (Windows)</source>
          <target state="new">Using Event Objects (Windows)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>