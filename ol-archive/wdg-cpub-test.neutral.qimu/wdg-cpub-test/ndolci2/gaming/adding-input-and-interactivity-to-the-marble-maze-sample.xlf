<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\adding-input-and-interactivity-to-the-marble-maze-sample.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f0abd09a83f5d47aa1263f2d2d9ee71edde20ea</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Adding input and interactivity to the Marble Maze sample</source>
          <target state="new">Adding input and interactivity to the Marble Maze sample</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Universal Windows Platform (UWP) app games run on a wide variety of devices, such as desktop computers, laptops, and tablets.</source>
          <target state="new">Universal Windows Platform (UWP) app games run on a wide variety of devices, such as desktop computers, laptops, and tablets.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Adding input and interactivity to the Marble Maze sample</source>
          <target state="new">Adding input and interactivity to the Marble Maze sample</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Universal Windows Platform (UWP) app games run on a wide variety of devices, such as desktop computers, laptops, and tablets.</source>
          <target state="new">Universal Windows Platform (UWP) app games run on a wide variety of devices, such as desktop computers, laptops, and tablets.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A device can have a wide variety of input and control mechanisms.</source>
          <target state="new">A device can have a wide variety of input and control mechanisms.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Support multiple input devices to enable your game to accommodate a wider range of preferences and abilities among your customers.</source>
          <target state="new">Support multiple input devices to enable your game to accommodate a wider range of preferences and abilities among your customers.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This document describes the key practices to keep in mind when you work with input devices and shows how Marble Maze applies these practices.</source>
          <target state="new">This document describes the key practices to keep in mind when you work with input devices and shows how Marble Maze applies these practices.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The sample code that corresponds to this document is found in the <bpt id="p2">[</bpt>DirectX Marble Maze game sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The sample code that corresponds to this document is found in the <bpt id="p2">[</bpt>DirectX Marble Maze game sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Here are some of the key points that this document discusses for when you work with input in your game:</source>
          <target state="new">Here are some of the key points that this document discusses for when you work with input in your game:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When possible, support multiple input devices to enable your game to accommodate a wider range of preferences and abilities among your customers.</source>
          <target state="new">When possible, support multiple input devices to enable your game to accommodate a wider range of preferences and abilities among your customers.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Although game controller and sensor usage is optional, we strongly recommend it to enhance the player experience.</source>
          <target state="new">Although game controller and sensor usage is optional, we strongly recommend it to enhance the player experience.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>We designed the game controller and sensor API to help you more easily integrate these input devices.</source>
          <target state="new">We designed the game controller and sensor API to help you more easily integrate these input devices.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To initialize touch, you must register for window events such as when the pointer is activated, released, and moved.</source>
          <target state="new">To initialize touch, you must register for window events such as when the pointer is activated, released, and moved.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To initialize the accelerometer, create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Devices::Sensors::Accelerometer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225687)</ept> object when you initialize the application.</source>
          <target state="new">To initialize the accelerometer, create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Devices::Sensors::Accelerometer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225687)</ept> object when you initialize the application.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Xbox 360 controller doesn't require initialization.</source>
          <target state="new">The Xbox 360 controller doesn't require initialization.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For single-player games, consider whether to combine input from all possible Xbox 360 controllers.</source>
          <target state="new">For single-player games, consider whether to combine input from all possible Xbox 360 controllers.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This way, you don’t have to track what input comes from which controller.</source>
          <target state="new">This way, you don’t have to track what input comes from which controller.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Process Windows events before you process input devices.</source>
          <target state="new">Process Windows events before you process input devices.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The Xbox 360 controller and the accelerometer support polling.</source>
          <target state="new">The Xbox 360 controller and the accelerometer support polling.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>That is, you can poll for data when you need it.</source>
          <target state="new">That is, you can poll for data when you need it.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For touch, record touch events in data structures that are available to your input processing code.</source>
          <target state="new">For touch, record touch events in data structures that are available to your input processing code.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Consider whether to normalize input values to a common format.</source>
          <target state="new">Consider whether to normalize input values to a common format.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Doing so can simplify how input is interpreted by other components of your game, such as physics simulation, and can make it easier to write games that work on different screen resolutions.</source>
          <target state="new">Doing so can simplify how input is interpreted by other components of your game, such as physics simulation, and can make it easier to write games that work on different screen resolutions.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Input devices supported by Marble Maze</source>
          <target state="new">Input devices supported by Marble Maze</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Marble Maze supports Xbox 360 common controller devices, mouse, and touch to select menu items, and the Xbox 360 controller, mouse, touch, and the accelerometer to control game play.</source>
          <target state="new">Marble Maze supports Xbox 360 common controller devices, mouse, and touch to select menu items, and the Xbox 360 controller, mouse, touch, and the accelerometer to control game play.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Marble Maze uses the XInput API to poll the controller for input.</source>
          <target state="new">Marble Maze uses the XInput API to poll the controller for input.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Touch enables applications to track and respond to fingertip input.</source>
          <target state="new">Touch enables applications to track and respond to fingertip input.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An accelerometer is a sensor that measures the force that is applied along the x, y, and z axes.</source>
          <target state="new">An accelerometer is a sensor that measures the force that is applied along the x, y, and z axes.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>By using the Windows Runtime, you can poll the current state of the accelerometer device, as well as receive touch events through the Windows Runtime event-handling mechanism.</source>
          <target state="new">By using the Windows Runtime, you can poll the current state of the accelerometer device, as well as receive touch events through the Windows Runtime event-handling mechanism.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This document uses touch to refer to both touch and mouse input and pointer to refer to any device that uses pointer events.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This document uses touch to refer to both touch and mouse input and pointer to refer to any device that uses pointer events.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because touch and the mouse use standard pointer events, you can use either device to select menu items and control game play.</source>
          <target state="new">Because touch and the mouse use standard pointer events, you can use either device to select menu items and control game play.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The package manifest sets Landscape as the supported rotation for the game to prevent the orientation from changing when you rotate the device to roll the marble.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The package manifest sets Landscape as the supported rotation for the game to prevent the orientation from changing when you rotate the device to roll the marble.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializing input devices</source>
          <target state="new">Initializing input devices</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Xbox 360 controller does not require initialization.</source>
          <target state="new">The Xbox 360 controller does not require initialization.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To initialize touch, you must register for windowing events such as when the pointer is activated (for example, your user presses the mouse button or touches the screen), released, and moved.</source>
          <target state="new">To initialize touch, you must register for windowing events such as when the pointer is activated (for example, your user presses the mouse button or touches the screen), released, and moved.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To initialize the accelerometer, you have to create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Devices::Sensors::Accelerometer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225687)</ept> object when you initialize the application.</source>
          <target state="new">To initialize the accelerometer, you have to create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Devices::Sensors::Accelerometer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225687)</ept> object when you initialize the application.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>DirectXPage<ept id="p1">**</ept> constructor registers for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::UI::Core::CoreIndependentInputSource::PointerPressed<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn298471)</ept>, <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Windows::UI::Core::CoreIndependentInputSource::PointerReleased<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/dn298472)</ept>, and <bpt id="p6">[</bpt><bpt id="p7">**</bpt>Windows::UI::Core::CoreIndependentInputSource::PointerMoved<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/dn298469)</ept> pointer events for the <bpt id="p8">[</bpt><bpt id="p9">**</bpt>SwapChainPanel<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept>.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>DirectXPage<ept id="p1">**</ept> constructor registers for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::UI::Core::CoreIndependentInputSource::PointerPressed<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn298471)</ept>, <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Windows::UI::Core::CoreIndependentInputSource::PointerReleased<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/dn298472)</ept>, and <bpt id="p6">[</bpt><bpt id="p7">**</bpt>Windows::UI::Core::CoreIndependentInputSource::PointerMoved<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/dn298469)</ept> pointer events for the <bpt id="p8">[</bpt><bpt id="p9">**</bpt>SwapChainPanel<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These events are registered during app initialization and before the game loop.</source>
          <target state="new">These events are registered during app initialization and before the game loop.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These events are handled in a separate thread that invokes the event handlers.</source>
          <target state="new">These events are handled in a separate thread that invokes the event handlers.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about how the application is initialized, see <bpt id="p1">[</bpt>Marble Maze application structure<ept id="p1">](marble-maze-application-structure.md)</ept>.</source>
          <target state="new">For more information about how the application is initialized, see <bpt id="p1">[</bpt>Marble Maze application structure<ept id="p1">](marble-maze-application-structure.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The MarbleMaze class also creates a std::map object to hold touch events.</source>
          <target state="new">The MarbleMaze class also creates a std::map object to hold touch events.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The key for this map object is a value that uniquely identifies the input pointer.</source>
          <target state="new">The key for this map object is a value that uniquely identifies the input pointer.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Each key maps to the distance between every touch point and the center of the screen.</source>
          <target state="new">Each key maps to the distance between every touch point and the center of the screen.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Marble Maze later uses these values to calculate the amount by which the maze is tilted.</source>
          <target state="new">Marble Maze later uses these values to calculate the amount by which the maze is tilted.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The MarbleMaze class holds an Accelerometer object.</source>
          <target state="new">The MarbleMaze class holds an Accelerometer object.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The Accelerometer object is initialized in the MarbleMaze::Initialize method, as shown in the following example.</source>
          <target state="new">The Accelerometer object is initialized in the MarbleMaze::Initialize method, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The Windows::Devices::Sensors::Accelerometer::GetDefault method returns an instance of the default accelerometer.</source>
          <target state="new">The Windows::Devices::Sensors::Accelerometer::GetDefault method returns an instance of the default accelerometer.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If there is no default accelerometer, Accelerometer::GetDefault the value of m<ph id="ph1">\_</ph>accelerometer remains nullptr.</source>
          <target state="new">If there is no default accelerometer, Accelerometer::GetDefault the value of m<ph id="ph1">\_</ph>accelerometer remains nullptr.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Navigating the menus</source>
          <target state="new">Navigating the menus</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Tracking Xbox 360 controller input</source>
          <target state="new">Tracking Xbox 360 controller input</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can use the mouse, touch, or the Xbox 360 controller to navigate the menus, as follows:</source>
          <target state="new">You can use the mouse, touch, or the Xbox 360 controller to navigate the menus, as follows:</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Use the directional pad to change the active menu item.</source>
          <target state="new">Use the directional pad to change the active menu item.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use touch, the A button, or the Start button to pick a menu item or close the current menu, such as the high-score table.</source>
          <target state="new">Use touch, the A button, or the Start button to pick a menu item or close the current menu, such as the high-score table.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use the Start button to pause or resume the game.</source>
          <target state="new">Use the Start button to pause or resume the game.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Click on a menu item with the mouse to choose that action.</source>
          <target state="new">Click on a menu item with the mouse to choose that action.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Tracking touch and mouse input</source>
          <target state="new">Tracking touch and mouse input</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To track Xbox 360 controller input, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method defines an array of buttons that define the input behaviors.</source>
          <target state="new">To track Xbox 360 controller input, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method defines an array of buttons that define the input behaviors.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>XInput provides only the current state of the controller.</source>
          <target state="new">XInput provides only the current state of the controller.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Therefore, <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> also defines two arrays that track, for each possible Xbox 360 controller, whether each button was pressed during the previous frame and whether each button is currently pressed.</source>
          <target state="new">Therefore, <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> also defines two arrays that track, for each possible Xbox 360 controller, whether each button was pressed during the previous frame and whether each button is currently pressed.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can connect up to four Xbox 360 controllers to a Windows device.</source>
          <target state="new">You can connect up to four Xbox 360 controllers to a Windows device.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To avoid having to figure out which controller is the active one, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method combines input across all controllers.</source>
          <target state="new">To avoid having to figure out which controller is the active one, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method combines input across all controllers.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If your game supports more than one player, you have to track input for each player separately.</source>
          <target state="new">If your game supports more than one player, you have to track input for each player separately.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In a loop, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method polls each controller for input and reads the state of each button.</source>
          <target state="new">In a loop, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method polls each controller for input and reads the state of each button.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method polls for input, it updates the combined input array.</source>
          <target state="new">After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method polls for input, it updates the combined input array.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The combined input array tracks only which buttons are pressed but were not previously pressed.</source>
          <target state="new">The combined input array tracks only which buttons are pressed but were not previously pressed.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This enables the game to perform an action only at the time a button is initially pressed, and not when the button is held.</source>
          <target state="new">This enables the game to perform an action only at the time a button is initially pressed, and not when the button is held.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method collects button input, it performs any actions that must happen.</source>
          <target state="new">After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method collects button input, it performs any actions that must happen.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, when the Start button (XINPUT<ph id="ph1">\_</ph>GAMEPAD<ph id="ph2">\_</ph>START) is pressed, the game state changes from active to paused or from paused to active.</source>
          <target state="new">For example, when the Start button (XINPUT<ph id="ph1">\_</ph>GAMEPAD<ph id="ph2">\_</ph>START) is pressed, the game state changes from active to paused or from paused to active.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the main menu is active, the active menu item changes when the directional pad is pressed up or down.</source>
          <target state="new">If the main menu is active, the active menu item changes when the directional pad is pressed up or down.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If the user chooses the current selection, the appropriate UI element is marked as being chosen.</source>
          <target state="new">If the user chooses the current selection, the appropriate UI element is marked as being chosen.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method processes controller input, it saves the current input state for the next frame.</source>
          <target state="new">After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method processes controller input, it saves the current input state for the next frame.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Tracking touch and mouse input</source>
          <target state="new">Tracking touch and mouse input</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For touch and mouse input, a menu item is chosen when the user touches or clicks it.</source>
          <target state="new">For touch and mouse input, a menu item is chosen when the user touches or clicks it.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method processes pointer input to select menu items.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method processes pointer input to select menu items.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>pointQueue<ept id="p1">**</ept> member variable tracks the locations where the user touched or clicked on the screen.</source>
          <target state="new">The <bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>pointQueue<ept id="p1">**</ept> member variable tracks the locations where the user touched or clicked on the screen.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The way in which Marble Maze collects pointer input is described in greater detail later in this document in the section Processing pointer input.</source>
          <target state="new">The way in which Marble Maze collects pointer input is described in greater detail later in this document in the section Processing pointer input.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UserInterface::HitTest<ept id="p1">**</ept> method determines whether the provided point is located in the bounds of any UI element.</source>
          <target state="new">The <bpt id="p1">**</bpt>UserInterface::HitTest<ept id="p1">**</ept> method determines whether the provided point is located in the bounds of any UI element.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Any UI elements that pass this test are marked as being touched.</source>
          <target state="new">Any UI elements that pass this test are marked as being touched.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This method uses the <bpt id="p1">**</bpt>PointInRect<ept id="p1">**</ept> helper function to determine whether the provided point is located in the bounds of each UI element.</source>
          <target state="new">This method uses the <bpt id="p1">**</bpt>PointInRect<ept id="p1">**</ept> helper function to determine whether the provided point is located in the bounds of each UI element.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Updating the game state</source>
          <target state="new">Updating the game state</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method processes controller and touch input, it updates the game state if any button was pressed.</source>
          <target state="new">After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method processes controller and touch input, it updates the game state if any button was pressed.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Controlling game play</source>
          <target state="new">Controlling game play</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The game loop and the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method work together to update the state of game objects.</source>
          <target state="new">The game loop and the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method work together to update the state of game objects.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If your game accepts input from multiple devices, you can accumulate the input from all devices into one set of variables so that you can write code that's easier to maintain.</source>
          <target state="new">If your game accepts input from multiple devices, you can accumulate the input from all devices into one set of variables so that you can write code that's easier to maintain.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method defines one set of variables that accumulates movement from all devices.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method defines one set of variables that accumulates movement from all devices.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The input mechanism can vary from one input device to another.</source>
          <target state="new">The input mechanism can vary from one input device to another.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For example, pointer input is handled by using the Windows Runtime event-handling model.</source>
          <target state="new">For example, pointer input is handled by using the Windows Runtime event-handling model.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Conversely, you poll for input data from the Xbox 360 controller when you need it.</source>
          <target state="new">Conversely, you poll for input data from the Xbox 360 controller when you need it.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>We recommend that you always follow the input mechanism that is prescribed for a given device.</source>
          <target state="new">We recommend that you always follow the input mechanism that is prescribed for a given device.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This section describes how Marble Maze reads input from each device, how it updates the combined input values, and how it uses the combined input values to update the state of the game.</source>
          <target state="new">This section describes how Marble Maze reads input from each device, how it updates the combined input values, and how it uses the combined input values to update the state of the game.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Processing pointer input</source>
          <target state="new">Processing pointer input</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When you work with pointer input, call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Core::CoreDispatcher::ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208217)</ept> method to process window events.</source>
          <target state="new">When you work with pointer input, call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Core::CoreDispatcher::ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208217)</ept> method to process window events.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Call this method in your game loop before you update or render the scene.</source>
          <target state="new">Call this method in your game loop before you update or render the scene.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Marble Maze passes <bpt id="p1">**</bpt>CoreProcessEventsOption::ProcessAllIfPresent<ept id="p1">**</ept> to this method to process all queued events, and then immediately return.</source>
          <target state="new">Marble Maze passes <bpt id="p1">**</bpt>CoreProcessEventsOption::ProcessAllIfPresent<ept id="p1">**</ept> to this method to process all queued events, and then immediately return.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>After events are processed, Marble Maze renders and presents the next frame.</source>
          <target state="new">After events are processed, Marble Maze renders and presents the next frame.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The Windows Runtime calls the registered handler for each event that occurred.</source>
          <target state="new">The Windows Runtime calls the registered handler for each event that occurred.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DirectXApp<ept id="p1">**</ept> class registers for events and forwards pointer information to the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> class.</source>
          <target state="new">The <bpt id="p1">**</bpt>DirectXApp<ept id="p1">**</ept> class registers for events and forwards pointer information to the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class reacts to pointer events by updating the map object that holds touch events.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class reacts to pointer events by updating the map object that holds touch events.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::AddTouch<ept id="p1">**</ept> method is called when the pointer is first pressed, for example, when the user initially touches the screen on a touch-enabled device.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::AddTouch<ept id="p1">**</ept> method is called when the pointer is first pressed, for example, when the user initially touches the screen on a touch-enabled device.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::AddTouch<ept id="p1">**</ept> method is called when the pointer position moves.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::AddTouch<ept id="p1">**</ept> method is called when the pointer position moves.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::RemoveTouch<ept id="p1">**</ept> method is called when the pointer is released, for example, when the user stops touching the screen.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::RemoveTouch<ept id="p1">**</ept> method is called when the pointer is released, for example, when the user stops touching the screen.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The PointToTouch function translates the current pointer position so that the origin is in the center of the screen, and then scales the coordinates so that they range approximately between -1.0 and +1.0.</source>
          <target state="new">The PointToTouch function translates the current pointer position so that the origin is in the center of the screen, and then scales the coordinates so that they range approximately between -1.0 and +1.0.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This makes it easier to calculate the tilt of the maze in a consistent way across different input methods.</source>
          <target state="new">This makes it easier to calculate the tilt of the maze in a consistent way across different input methods.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method updates the combined input values by incrementing the tilt factor by a constant scaling value.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method updates the combined input values by incrementing the tilt factor by a constant scaling value.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This scaling value was determined by experimenting with several different values.</source>
          <target state="new">This scaling value was determined by experimenting with several different values.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Processing accelerometer input</source>
          <target state="new">Processing accelerometer input</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To process accelerometer input, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method calls the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::Devices::Sensors::Accelerometer::GetCurrentReading<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br225699)</ept> method.</source>
          <target state="new">To process accelerometer input, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method calls the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::Devices::Sensors::Accelerometer::GetCurrentReading<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br225699)</ept> method.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This method returns a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Devices::Sensors::AccelerometerReading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225688)</ept> object, which represents an accelerometer reading.</source>
          <target state="new">This method returns a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Devices::Sensors::AccelerometerReading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225688)</ept> object, which represents an accelerometer reading.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Windows::Devices::Sensors::AccelerometerReading::AccelerationX<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Windows::Devices::Sensors::AccelerometerReading::AccelerationY<ept id="p2">**</ept> properties hold the g-force acceleration along the x and y axes, respectively.</source>
          <target state="new">The <bpt id="p1">**</bpt>Windows::Devices::Sensors::AccelerometerReading::AccelerationX<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Windows::Devices::Sensors::AccelerometerReading::AccelerationY<ept id="p2">**</ept> properties hold the g-force acceleration along the x and y axes, respectively.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method polls the accelerometer and updates the combined input values.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method polls the accelerometer and updates the combined input values.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>As you tilt the device, gravity causes the marble to move faster.</source>
          <target state="new">As you tilt the device, gravity causes the marble to move faster.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Because you cannot be sure that an accelerometer is present on the user’s computer, always ensure that you have a valid Accelerometer object before you poll the accelerometer.</source>
          <target state="new">Because you cannot be sure that an accelerometer is present on the user’s computer, always ensure that you have a valid Accelerometer object before you poll the accelerometer.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Processing Xbox 360 controller input</source>
          <target state="new">Processing Xbox 360 controller input</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method reads from the Xbox 360 controller and updates the combined input values.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method reads from the Xbox 360 controller and updates the combined input values.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method uses a for loop to enable input to be received from any connected controller.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method uses a for loop to enable input to be received from any connected controller.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XInputGetState<ept id="p1">**</ept> method fills an XINPUT<ph id="ph1">\_</ph>STATE object with current state of the controller.</source>
          <target state="new">The <bpt id="p1">**</bpt>XInputGetState<ept id="p1">**</ept> method fills an XINPUT<ph id="ph1">\_</ph>STATE object with current state of the controller.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>combinedTiltX<ept id="p1">**</ept> and <bpt id="p2">**</bpt>combinedTiltY<ept id="p2">**</ept> values are updated according to the x and y values of the left thumbstick.</source>
          <target state="new">The <bpt id="p1">**</bpt>combinedTiltX<ept id="p1">**</ept> and <bpt id="p2">**</bpt>combinedTiltY<ept id="p2">**</ept> values are updated according to the x and y values of the left thumbstick.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>XInput defines the <bpt id="p1">**</bpt>XINPUT<ph id="ph1">\_</ph>GAMEPAD<ph id="ph2">\_</ph>LEFT<ph id="ph3">\_</ph>THUMB<ph id="ph4">\_</ph>DEADZONE<ept id="p1">**</ept> constant for the left thumbstick.</source>
          <target state="new">XInput defines the <bpt id="p1">**</bpt>XINPUT<ph id="ph1">\_</ph>GAMEPAD<ph id="ph2">\_</ph>LEFT<ph id="ph3">\_</ph>THUMB<ph id="ph4">\_</ph>DEADZONE<ept id="p1">**</ept> constant for the left thumbstick.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This is an appropriate dead zone threshold for most games.</source>
          <target state="new">This is an appropriate dead zone threshold for most games.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  When you work with the Xbox 360 controller, always account for the dead zone.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  When you work with the Xbox 360 controller, always account for the dead zone.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The dead zone refers to the variance among gamepads in their sensitivity to initial movement.</source>
          <target state="new">The dead zone refers to the variance among gamepads in their sensitivity to initial movement.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In some controllers, a small movement may generate no reading, but in others it may generate a measurable reading.</source>
          <target state="new">In some controllers, a small movement may generate no reading, but in others it may generate a measurable reading.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>To account for this in your game, create a zone of non-movement for initial thumbstick movement.</source>
          <target state="new">To account for this in your game, create a zone of non-movement for initial thumbstick movement.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information about the dead zone, see <bpt id="p1">[</bpt>Getting Started With XInput.<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ee417001)</ept></source>
          <target state="new">For more information about the dead zone, see <bpt id="p1">[</bpt>Getting Started With XInput.<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ee417001)</ept></target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Applying input to the game state</source>
          <target state="new">Applying input to the game state</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Devices report input values in different ways.</source>
          <target state="new">Devices report input values in different ways.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For example, pointer input might be in screen coordinates, and controller input might be in a completely different format.</source>
          <target state="new">For example, pointer input might be in screen coordinates, and controller input might be in a completely different format.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>One challenge with combining input from multiple devices into one set of input values is normalization, or converting values to a common format.</source>
          <target state="new">One challenge with combining input from multiple devices into one set of input values is normalization, or converting values to a common format.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Marble Maze normalizes values by scaling them to the range <ph id="ph1">\[</ph>-1.0, 1.0<ph id="ph2">\]</ph>.</source>
          <target state="new">Marble Maze normalizes values by scaling them to the range <ph id="ph1">\[</ph>-1.0, 1.0<ph id="ph2">\]</ph>.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To normalize Xbox 360 controller input, Marble Maze divides the input values by 32768 because thumbstick input values always fall between -32768 and 32767.</source>
          <target state="new">To normalize Xbox 360 controller input, Marble Maze divides the input values by 32768 because thumbstick input values always fall between -32768 and 32767.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>PointToTouch<ept id="p1">**</ept> function, which is previously described in this section, achieves a similar result by converting screen coordinates to normalized values that range approximately between -1.0 and +1.0.</source>
          <target state="new">The <bpt id="p1">**</bpt>PointToTouch<ept id="p1">**</ept> function, which is previously described in this section, achieves a similar result by converting screen coordinates to normalized values that range approximately between -1.0 and +1.0.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>  Even if your application uses one input method, we recommend that you always normalize input values.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>  Even if your application uses one input method, we recommend that you always normalize input values.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Doing so can simplify how input is interpreted by other components of your game, such as physics simulation, and makes it easier to write games that work on different screen resolutions.</source>
          <target state="new">Doing so can simplify how input is interpreted by other components of your game, such as physics simulation, and makes it easier to write games that work on different screen resolutions.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method processes input, it creates a vector that represents the effect of the tilt of the maze on the marble.</source>
          <target state="new">After the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method processes input, it creates a vector that represents the effect of the tilt of the maze on the marble.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The following example shows how Marble Maze uses the <bpt id="p1">**</bpt>XMVector3Normalize<ept id="p1">**</ept> function to create a normalized gravity vector.</source>
          <target state="new">The following example shows how Marble Maze uses the <bpt id="p1">**</bpt>XMVector3Normalize<ept id="p1">**</ept> function to create a normalized gravity vector.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>MaxTilt<ept id="p1">*</ept> variable constrains the amount by which the maze tilts and prevents the maze from tilting on its side.</source>
          <target state="new">The <bpt id="p1">*</bpt>MaxTilt<ept id="p1">*</ept> variable constrains the amount by which the maze tilts and prevents the maze from tilting on its side.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To complete the update of scene objects, Marble Maze passes the updated gravity vector to the physics simulation, updates the physics simulation for the time that has elapsed since the previous frame, and updates the position and orientation of the marble.</source>
          <target state="new">To complete the update of scene objects, Marble Maze passes the updated gravity vector to the physics simulation, updates the physics simulation for the time that has elapsed since the previous frame, and updates the position and orientation of the marble.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the marble has fallen through the maze, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method places the marble back at the last checkpoint that the marble touched and resets the state of the physics simulation.</source>
          <target state="new">If the marble has fallen through the maze, the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method places the marble back at the last checkpoint that the marble touched and resets the state of the physics simulation.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This section does not describe how the physics simulation works.</source>
          <target state="new">This section does not describe how the physics simulation works.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For details about that, see Physics.h and Physics.cpp in the Marble Maze sources.</source>
          <target state="new">For details about that, see Physics.h and Physics.cpp in the Marble Maze sources.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Adding audio to the Marble Maze sample<ept id="p1">](adding-audio-to-the-marble-maze-sample.md)</ept> for information about some of the key practices to keep in mind when you work with audio.</source>
          <target state="new">Read <bpt id="p1">[</bpt>Adding audio to the Marble Maze sample<ept id="p1">](adding-audio-to-the-marble-maze-sample.md)</ept> for information about some of the key practices to keep in mind when you work with audio.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The document discusses how Marble Maze uses Microsoft Media Foundation and XAudio2 to load, mix, and play audio resources.</source>
          <target state="new">The document discusses how Marble Maze uses Microsoft Media Foundation and XAudio2 to load, mix, and play audio resources.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Adding audio to the Marble Maze sample</source>
          <target state="new">Adding audio to the Marble Maze sample</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Adding visual content to the Marble Maze sample</source>
          <target state="new">Adding visual content to the Marble Maze sample</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Developing Marble Maze, a UWP game in C++ and DirectX</source>
          <target state="new">Developing Marble Maze, a UWP game in C++ and DirectX</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>