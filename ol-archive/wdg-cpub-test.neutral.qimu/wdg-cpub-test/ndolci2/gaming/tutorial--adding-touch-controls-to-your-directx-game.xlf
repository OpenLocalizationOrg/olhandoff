<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\tutorial--adding-touch-controls-to-your-directx-game.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7acc0d3e7ea6f52e2fdec0afa22cad937f6fa73</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Touch controls for games</source>
          <target state="new">Touch controls for games</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to add basic touch controls to your Universal Windows Platform (UWP) C++ game with DirectX.</source>
          <target state="new">Learn how to add basic touch controls to your Universal Windows Platform (UWP) C++ game with DirectX.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Touch controls for games</source>
          <target state="new">Touch controls for games</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Learn how to add basic touch controls to your Universal Windows Platform (UWP) C++ game with DirectX.</source>
          <target state="new">Learn how to add basic touch controls to your Universal Windows Platform (UWP) C++ game with DirectX.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We show you how to add touch-based controls to move a fixed-plane camera in a Direct3D environment, where dragging with a finger or stylus shifts the camera perspective.</source>
          <target state="new">We show you how to add touch-based controls to move a fixed-plane camera in a Direct3D environment, where dragging with a finger or stylus shifts the camera perspective.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can incorporate these controls in games where you want the player to drag to scroll or pan over a 3D environment, such as a map or playfield.</source>
          <target state="new">You can incorporate these controls in games where you want the player to drag to scroll or pan over a 3D environment, such as a map or playfield.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, in a strategy or puzzle game, you can use these controls to let the player view a game environment that is larger than the screen by panning left or right.</source>
          <target state="new">For example, in a strategy or puzzle game, you can use these controls to let the player view a game environment that is larger than the screen by panning left or right.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Our code also works with mouse-based panning controls.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Our code also works with mouse-based panning controls.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The pointer related events are abstracted by the Windows Runtime APIs, so they can handle either touch- or mouse-based pointer events.</source>
          <target state="new">The pointer related events are abstracted by the Windows Runtime APIs, so they can handle either touch- or mouse-based pointer events.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Objectives</source>
          <target state="new">Objectives</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Create a simple touch drag control for panning a fixed-plane camera in a DirectX game.</source>
          <target state="new">Create a simple touch drag control for panning a fixed-plane camera in a DirectX game.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Set up the basic touch event infrastructure</source>
          <target state="new">Set up the basic touch event infrastructure</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>First, we define our basic controller type, the <bpt id="p1">**</bpt>CameraPanController<ept id="p1">**</ept>, in this case.</source>
          <target state="new">First, we define our basic controller type, the <bpt id="p1">**</bpt>CameraPanController<ept id="p1">**</ept>, in this case.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Here, we define a controller as an abstract idea, the set of behaviors the user can perform.</source>
          <target state="new">Here, we define a controller as an abstract idea, the set of behaviors the user can perform.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CameraPanController<ept id="p1">**</ept> class is a regularly refreshed collection of information about the camera controller state, and provides a way for our app to obtain that information from its update loop.</source>
          <target state="new">The <bpt id="p1">**</bpt>CameraPanController<ept id="p1">**</ept> class is a regularly refreshed collection of information about the camera controller state, and provides a way for our app to obtain that information from its update loop.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Now, let's create a header that defines the state of the camera controller, and the basic methods and event handlers that implement the camera controller interactions.</source>
          <target state="new">Now, let's create a header that defines the state of the camera controller, and the basic methods and event handlers that implement the camera controller interactions.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The private fields contain the current state of the camera controller.</source>
          <target state="new">The private fields contain the current state of the camera controller.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Let's review them.</source>
          <target state="new">Let's review them.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>position<ept id="p1">**</ept> is the position of the camera in the scene space.</source>
          <target state="new"><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>position<ept id="p1">**</ept> is the position of the camera in the scene space.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this example, the z-coordinate value is fixed at 0.</source>
          <target state="new">In this example, the z-coordinate value is fixed at 0.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>We could use a DirectX::XMFLOAT2 to represent this value, but for the purposes of this sample and future extensibility, we use a DirectX::XMFLOAT3.</source>
          <target state="new">We could use a DirectX::XMFLOAT2 to represent this value, but for the purposes of this sample and future extensibility, we use a DirectX::XMFLOAT3.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>We pass this value through the <bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>Position<ept id="p1">**</ept> property to the app itself so it can update the viewport accordingly.</source>
          <target state="new">We pass this value through the <bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>Position<ept id="p1">**</ept> property to the app itself so it can update the viewport accordingly.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panInUse<ept id="p1">**</ept> is a Boolean value that indicates whether a pan operation is active; or, more specifically, whether the player is touching the screen and moving the camera.</source>
          <target state="new"><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panInUse<ept id="p1">**</ept> is a Boolean value that indicates whether a pan operation is active; or, more specifically, whether the player is touching the screen and moving the camera.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panPointerID<ept id="p1">**</ept> is a unique ID for the pointer.</source>
          <target state="new"><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panPointerID<ept id="p1">**</ept> is a unique ID for the pointer.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We won't use this in the sample, but it's a good practice to associate your controller state class with a specific pointer.</source>
          <target state="new">We won't use this in the sample, but it's a good practice to associate your controller state class with a specific pointer.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panFirstDown<ept id="p1">**</ept> is the point on the screen where the player first touched the screen or clicked the mouse during the camera pan action.</source>
          <target state="new"><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panFirstDown<ept id="p1">**</ept> is the point on the screen where the player first touched the screen or clicked the mouse during the camera pan action.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We use this value later to set a dead zone to prevent jitter when the screen is touched, or if the mouse shakes a little.</source>
          <target state="new">We use this value later to set a dead zone to prevent jitter when the screen is touched, or if the mouse shakes a little.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panPointerPosition<ept id="p1">**</ept> is the point on the screen where the player has currently moved the pointer.</source>
          <target state="new"><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panPointerPosition<ept id="p1">**</ept> is the point on the screen where the player has currently moved the pointer.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We use it to determine what direction the player wanted to move by examining it relative to <bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panFirstDown<ept id="p1">**</ept>.</source>
          <target state="new">We use it to determine what direction the player wanted to move by examining it relative to <bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panFirstDown<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panCommand<ept id="p1">**</ept> is the final computed command for the camera controller: up, down, left, or right.</source>
          <target state="new"><bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panCommand<ept id="p1">**</ept> is the final computed command for the camera controller: up, down, left, or right.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because we are working with a camera fixed to the x-y plane, this could be a DirectX::XMFLOAT2 value instead.</source>
          <target state="new">Because we are working with a camera fixed to the x-y plane, this could be a DirectX::XMFLOAT2 value instead.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>We use these 3 event handlers to update the camera controller state info.</source>
          <target state="new">We use these 3 event handlers to update the camera controller state info.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OnPointerPressed<ept id="p1">**</ept> is an event handler that our app calls when the players presses a finger onto the touch surface and the pointer is moved to the coordinates of the press.</source>
          <target state="new"><bpt id="p1">**</bpt>OnPointerPressed<ept id="p1">**</ept> is an event handler that our app calls when the players presses a finger onto the touch surface and the pointer is moved to the coordinates of the press.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OnPointerMoved<ept id="p1">**</ept> is an event handler that our app calls when the player swipes a finger across the touch surface.</source>
          <target state="new"><bpt id="p1">**</bpt>OnPointerMoved<ept id="p1">**</ept> is an event handler that our app calls when the player swipes a finger across the touch surface.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It updates with the new coordinates of the drag path.</source>
          <target state="new">It updates with the new coordinates of the drag path.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OnPointerReleased<ept id="p1">**</ept> is an event handler that our app calls when the player removes the pressing finger from the touch surface.</source>
          <target state="new"><bpt id="p1">**</bpt>OnPointerReleased<ept id="p1">**</ept> is an event handler that our app calls when the player removes the pressing finger from the touch surface.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Finally, we use these methods and properties to initialize, access, and update the camera controller state information.</source>
          <target state="new">Finally, we use these methods and properties to initialize, access, and update the camera controller state information.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> is an event handler that our app calls to initialize the controls and attach them to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object that describes your display window.</source>
          <target state="new"><bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> is an event handler that our app calls to initialize the controls and attach them to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object that describes your display window.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SetPosition<ept id="p1">**</ept> is a method that our app calls to set the (x, y, and z) coordinates of your controls in the scene space.</source>
          <target state="new"><bpt id="p1">**</bpt>SetPosition<ept id="p1">**</ept> is a method that our app calls to set the (x, y, and z) coordinates of your controls in the scene space.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Note that our z-coordinate is 0 throughout this tutorial.</source>
          <target state="new">Note that our z-coordinate is 0 throughout this tutorial.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>Position<ept id="p1">**</ept> is a property that our app accesses to get the current position of the camera in the scene space.</source>
          <target state="new"><bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>Position<ept id="p1">**</ept> is a property that our app accesses to get the current position of the camera in the scene space.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You use this property as the way of communicating the current camera position to the app.</source>
          <target state="new">You use this property as the way of communicating the current camera position to the app.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>FixedLookPoint<ept id="p1">**</ept> is a property that our app accesses to get the current point toward which the controller camera is facing.</source>
          <target state="new"><bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>FixedLookPoint<ept id="p1">**</ept> is a property that our app accesses to get the current point toward which the controller camera is facing.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this example, it is locked normal to the x-y plane.</source>
          <target state="new">In this example, it is locked normal to the x-y plane.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Update<ept id="p1">**</ept> is a method that reads the controller state and updates the camera position.</source>
          <target state="new"><bpt id="p1">**</bpt>Update<ept id="p1">**</ept> is a method that reads the controller state and updates the camera position.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You continually call this <ph id="ph1">&amp;lt;</ph>something<ph id="ph2">&amp;gt;</ph> from the app's main loop to refresh the camera controller data and the camera position in the scene space.</source>
          <target state="new">You continually call this <ph id="ph1">&amp;lt;</ph>something<ph id="ph2">&amp;gt;</ph> from the app's main loop to refresh the camera controller data and the camera position in the scene space.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Now, you have here all the components you need to implement touch controls.</source>
          <target state="new">Now, you have here all the components you need to implement touch controls.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can detect when and where the touch or mouse pointer events have occurred, and what the action is.</source>
          <target state="new">You can detect when and where the touch or mouse pointer events have occurred, and what the action is.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can set the position and orientation of the camera relative to the scene space, and track the changes.</source>
          <target state="new">You can set the position and orientation of the camera relative to the scene space, and track the changes.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Finally, you can communicate the new camera position to the calling app.</source>
          <target state="new">Finally, you can communicate the new camera position to the calling app.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Now, let's connect these pieces together.</source>
          <target state="new">Now, let's connect these pieces together.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create the basic touch events</source>
          <target state="new">Create the basic touch events</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The Windows Runtime event dispatcher provides 3 events we want our app to handle:</source>
          <target state="new">The Windows Runtime event dispatcher provides 3 events we want our app to handle:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>PointerPressed</source>
          <target state="new">PointerPressed</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>PointerMoved</source>
          <target state="new">PointerMoved</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>PointerReleased</source>
          <target state="new">PointerReleased</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These events are implemented on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> type.</source>
          <target state="new">These events are implemented on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> type.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>We assume that you have a <bpt id="p1">**</bpt>CoreWindow<ept id="p1">**</ept> object to work with.</source>
          <target state="new">We assume that you have a <bpt id="p1">**</bpt>CoreWindow<ept id="p1">**</ept> object to work with.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>How to set up your UWP C++ app to display a DirectX view<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh465077)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>How to set up your UWP C++ app to display a DirectX view<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh465077)</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>As these events fire while our app is running, the handlers update the camera controller state info defined in our private fields.</source>
          <target state="new">As these events fire while our app is running, the handlers update the camera controller state info defined in our private fields.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>First, let's populate the touch pointer event handlers.</source>
          <target state="new">First, let's populate the touch pointer event handlers.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the first event handler, <bpt id="p1">**</bpt>OnPointerPressed<ept id="p1">**</ept>, we get the x-y coordinates of the pointer from the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> that manages our display when the user touches the screen or clicks the mouse.</source>
          <target state="new">In the first event handler, <bpt id="p1">**</bpt>OnPointerPressed<ept id="p1">**</ept>, we get the x-y coordinates of the pointer from the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> that manages our display when the user touches the screen or clicks the mouse.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>OnPointerPressed</source>
          <target state="new">OnPointerPressed</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>We use this handler to let the current <bpt id="p1">**</bpt>CameraPanController<ept id="p1">**</ept> instance know that camera controller should be treated as active by setting <bpt id="p2">**</bpt>m<ph id="ph1">\_</ph>panInUse<ept id="p2">**</ept> to TRUE.</source>
          <target state="new">We use this handler to let the current <bpt id="p1">**</bpt>CameraPanController<ept id="p1">**</ept> instance know that camera controller should be treated as active by setting <bpt id="p2">**</bpt>m<ph id="ph1">\_</ph>panInUse<ept id="p2">**</ept> to TRUE.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>That way, when the app calls <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> , it will use the current position data to update the viewport.</source>
          <target state="new">That way, when the app calls <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> , it will use the current position data to update the viewport.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Now that we've established the base values for the camera movement when the user touches the screen or click-presses in the display window, we must determine what to do when the user either drags the screen press or moves the mouse with button pressed.</source>
          <target state="new">Now that we've established the base values for the camera movement when the user touches the screen or click-presses in the display window, we must determine what to do when the user either drags the screen press or moves the mouse with button pressed.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>OnPointerMoved<ept id="p1">**</ept> event handler fires whenever the pointer moves, at every tick that the player drags it on the screen.</source>
          <target state="new">The <bpt id="p1">**</bpt>OnPointerMoved<ept id="p1">**</ept> event handler fires whenever the pointer moves, at every tick that the player drags it on the screen.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>We need to keep the app aware of the current location of the pointer, and this is how we do it.</source>
          <target state="new">We need to keep the app aware of the current location of the pointer, and this is how we do it.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>OnPointerMoved</source>
          <target state="new">OnPointerMoved</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Finally, we need to deactivate the camera pan behavior when the player stops touching the screen.</source>
          <target state="new">Finally, we need to deactivate the camera pan behavior when the player stops touching the screen.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>We use <bpt id="p1">**</bpt>OnPointerReleased<ept id="p1">**</ept>, which is called when <bpt id="p2">[</bpt><bpt id="p3">**</bpt>PointerReleased<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> is fired, to set <bpt id="p4">**</bpt>m<ph id="ph1">\_</ph>panInUse<ept id="p4">**</ept> to FALSE and turn off the camera pan movement, and set the pointer ID to 0.</source>
          <target state="new">We use <bpt id="p1">**</bpt>OnPointerReleased<ept id="p1">**</ept>, which is called when <bpt id="p2">[</bpt><bpt id="p3">**</bpt>PointerReleased<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> is fired, to set <bpt id="p4">**</bpt>m<ph id="ph1">\_</ph>panInUse<ept id="p4">**</ept> to FALSE and turn off the camera pan movement, and set the pointer ID to 0.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>OnPointerReleased</source>
          <target state="new">OnPointerReleased</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Initialize the touch controls and the controller state</source>
          <target state="new">Initialize the touch controls and the controller state</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Let's hook the events and initialize all the basic state fields of the camera controller.</source>
          <target state="new">Let's hook the events and initialize all the basic state fields of the camera controller.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Initialize</source>
          <target state="new">Initialize</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> takes a reference to the app's <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> instance as a parameter and registers the event handlers we developed to the appropriate events on that <bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> takes a reference to the app's <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> instance as a parameter and registers the event handlers we developed to the appropriate events on that <bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Getting and setting the position of the camera controller</source>
          <target state="new">Getting and setting the position of the camera controller</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Let's define some methods to get and set the position of the camera controller in the scene space.</source>
          <target state="new">Let's define some methods to get and set the position of the camera controller in the scene space.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SetPosition<ept id="p1">**</ept> is a public method that we can call from our app if we need to set the camera controller position to a specific point.</source>
          <target state="new"><bpt id="p1">**</bpt>SetPosition<ept id="p1">**</ept> is a public method that we can call from our app if we need to set the camera controller position to a specific point.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>Position<ept id="p1">**</ept> is our most important public property: it's the way our app gets the current position of the camera controller in the scene space so it can update the viewport accordingly.</source>
          <target state="new"><bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>Position<ept id="p1">**</ept> is our most important public property: it's the way our app gets the current position of the camera controller in the scene space so it can update the viewport accordingly.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>FixedLookPoint<ept id="p1">**</ept> is a public property that, in this example, obtains a look point that is normal to the x-y plane.</source>
          <target state="new"><bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>FixedLookPoint<ept id="p1">**</ept> is a public property that, in this example, obtains a look point that is normal to the x-y plane.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can change this method to use the trigonometric functions, sin and cos, when calculating the x, y, and z coordinate values if you want to create more oblique angles for the fixed camera.</source>
          <target state="new">You can change this method to use the trigonometric functions, sin and cos, when calculating the x, y, and z coordinate values if you want to create more oblique angles for the fixed camera.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Updating the camera controller state information</source>
          <target state="new">Updating the camera controller state information</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Now, we perform our calculations that convert the pointer coordinate info tracked in <bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panPointerPosition<ept id="p1">**</ept> into new coordinate info respective of our 3D scene space.</source>
          <target state="new">Now, we perform our calculations that convert the pointer coordinate info tracked in <bpt id="p1">**</bpt>m<ph id="ph1">\_</ph>panPointerPosition<ept id="p1">**</ept> into new coordinate info respective of our 3D scene space.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Our app calls this method every time we refresh the main app loop.</source>
          <target state="new">Our app calls this method every time we refresh the main app loop.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In it we compute the new position information we want to pass to the app which is used to update the view matrix before projection into the viewport.</source>
          <target state="new">In it we compute the new position information we want to pass to the app which is used to update the view matrix before projection into the viewport.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Because we don't want touch or mouse jitter to make our camera panning jerky, we set a dead zone around the pointer with a diameter of 32 pixels.</source>
          <target state="new">Because we don't want touch or mouse jitter to make our camera panning jerky, we set a dead zone around the pointer with a diameter of 32 pixels.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>We also have a velocity value, which in this case is 1:1 with the pixel traversal of the pointer past the dead zone.</source>
          <target state="new">We also have a velocity value, which in this case is 1:1 with the pixel traversal of the pointer past the dead zone.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can adjust this behavior to slow down or speed up the rate of movement.</source>
          <target state="new">You can adjust this behavior to slow down or speed up the rate of movement.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Updating the view matrix with the new camera position</source>
          <target state="new">Updating the view matrix with the new camera position</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>We can now obtain a scene space coordinate that our camera is focused on, and which is updated whenever you tell your app to do so (every 60 seconds in the main app loop, for example).</source>
          <target state="new">We can now obtain a scene space coordinate that our camera is focused on, and which is updated whenever you tell your app to do so (every 60 seconds in the main app loop, for example).</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This pseudocode suggests the calling behavior you can implement:</source>
          <target state="new">This pseudocode suggests the calling behavior you can implement:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
          <target state="new">Congratulations!</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You've implemented a simple set of camera panning touch controls in your game.</source>
          <target state="new">You've implemented a simple set of camera panning touch controls in your game.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
          <target state="new">This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</source>
          <target state="new">If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>