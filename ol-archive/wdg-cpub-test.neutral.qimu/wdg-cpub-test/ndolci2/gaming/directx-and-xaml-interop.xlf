<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\directx-and-xaml-interop.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3d0d7b37718ebb0060ee88a01de1b3847aa7237</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>DirectX and XAML interop</source>
          <target state="new">DirectX and XAML interop</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You can use Extensible Application Markup Language (XAML) and Microsoft DirectX together in your Universal Windows Platform (UWP) game.</source>
          <target state="new">You can use Extensible Application Markup Language (XAML) and Microsoft DirectX together in your Universal Windows Platform (UWP) game.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>DirectX and XAML interop</source>
          <target state="new">DirectX and XAML interop</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use Extensible Application Markup Language (XAML) and Microsoft DirectX together in your Universal Windows Platform (UWP) game.</source>
          <target state="new">You can use Extensible Application Markup Language (XAML) and Microsoft DirectX together in your Universal Windows Platform (UWP) game.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The combination of XAML and DirectX lets you build flexible user interface frameworks that interop with your DirectX-rendered content, and is particularly useful for graphics-intensive apps.</source>
          <target state="new">The combination of XAML and DirectX lets you build flexible user interface frameworks that interop with your DirectX-rendered content, and is particularly useful for graphics-intensive apps.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic explains the structure of a UWP app that uses DirectX and identifies the important types to use when building your UWP app to work with DirectX.</source>
          <target state="new">This topic explains the structure of a UWP app that uses DirectX and identifies the important types to use when building your UWP app to work with DirectX.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  DirectX APIs are not defined as Windows Runtime types, so you typically use Visual C++ component extensions (C++/CX) to develop XAMLUWP components that interop with DirectX.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  DirectX APIs are not defined as Windows Runtime types, so you typically use Visual C++ component extensions (C++/CX) to develop XAMLUWP components that interop with DirectX.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Also, you can create a UWP app with C# and XAML that uses DirectX, if you wrap the DirectX calls in a separate Windows Runtime metadata file.</source>
          <target state="new">Also, you can create a UWP app with C# and XAML that uses DirectX, if you wrap the DirectX calls in a separate Windows Runtime metadata file.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>XAML and DirectX</source>
          <target state="new">XAML and DirectX</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DirectX provides two powerful libraries for 2D and 3D graphics: Direct2D and Microsoft Direct3D.</source>
          <target state="new">DirectX provides two powerful libraries for 2D and 3D graphics: Direct2D and Microsoft Direct3D.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Although XAML provides support for basic 2D primitives and effects, many apps, such as modeling and gaming, need more complex graphics support.</source>
          <target state="new">Although XAML provides support for basic 2D primitives and effects, many apps, such as modeling and gaming, need more complex graphics support.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For these, you can use Direct2D and Direct3D to render part or all of the graphics and use XAML for everything else.</source>
          <target state="new">For these, you can use Direct2D and Direct3D to render part or all of the graphics and use XAML for everything else.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the XAML and DirectX interop scenario, you need to know these two concepts:</source>
          <target state="new">In the XAML and DirectX interop scenario, you need to know these two concepts:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Shared surfaces are sized regions of the display, defined by XAML, that you can use DirectX to draw into indirectly, using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Xaml::Media::Brush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> types.</source>
          <target state="new">Shared surfaces are sized regions of the display, defined by XAML, that you can use DirectX to draw into indirectly, using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Xaml::Media::Brush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> types.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For shared surfaces, you don't control the calls to present the swap chain(s).</source>
          <target state="new">For shared surfaces, you don't control the calls to present the swap chain(s).</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The updates to the shared surface are synced to the XAML framework's updates.</source>
          <target state="new">The updates to the shared surface are synced to the XAML framework's updates.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The swap chain itself.</source>
          <target state="new">The swap chain itself.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This provides the back buffer of the DirectX rendering pipeline, the area of memory that is presented for display after the render target is complete.</source>
          <target state="new">This provides the back buffer of the DirectX rendering pipeline, the area of memory that is presented for display after the render target is complete.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Consider what you are using DirectX for.</source>
          <target state="new">Consider what you are using DirectX for.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Will it be used to composite or animate a single control that fits within the dimensions of the display window?</source>
          <target state="new">Will it be used to composite or animate a single control that fits within the dimensions of the display window?</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Can the composited surface be occluded by other surfaces, or the edges of the screen?</source>
          <target state="new">Can the composited surface be occluded by other surfaces, or the edges of the screen?</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Will it contain output that needs to be rendered and controlled in real-time, as in a game?</source>
          <target state="new">Will it contain output that needs to be rendered and controlled in real-time, as in a game?</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Once you've determined how you intend to use DirectX, you use one of these Windows Runtime types to incorporate DirectX rendering into your Windows Store app:</source>
          <target state="new">Once you've determined how you intend to use DirectX, you use one of these Windows Runtime types to incorporate DirectX rendering into your Windows Store app:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you want to compose a static image, or draw a complex image on event-driven intervals, draw to a shared surface with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Xaml::Media::Imaging::SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept>.</source>
          <target state="new">If you want to compose a static image, or draw a complex image on event-driven intervals, draw to a shared surface with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Xaml::Media::Imaging::SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This type handles a sized DirectX drawing surface.</source>
          <target state="new">This type handles a sized DirectX drawing surface.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically, you use this type when composing an image or texture as a bitmap for display in a document or UI element.</source>
          <target state="new">Typically, you use this type when composing an image or texture as a bitmap for display in a document or UI element.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It doesn't work well for real-time interactivity, such as a high-performance game.</source>
          <target state="new">It doesn't work well for real-time interactivity, such as a high-performance game.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>That's because updates to a <bpt id="p1">**</bpt>SurfaceImageSource<ept id="p1">**</ept> object are synced to XAML user interface updates, and that can introduce latency into the visual feedback you provide to the user, like a fluctuating frame rate or a perceived poor response to real-time input.</source>
          <target state="new">That's because updates to a <bpt id="p1">**</bpt>SurfaceImageSource<ept id="p1">**</ept> object are synced to XAML user interface updates, and that can introduce latency into the visual feedback you provide to the user, like a fluctuating frame rate or a perceived poor response to real-time input.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Updates are still quick enough for dynamic controls or data simulations, though!</source>
          <target state="new">Updates are still quick enough for dynamic controls or data simulations, though!</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> graphics objects can be composited with other XAML UI elements.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> graphics objects can be composited with other XAML UI elements.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can transform or project them , and the XAML framework respects any opacity or z-index values.</source>
          <target state="new">You can transform or project them , and the XAML framework respects any opacity or z-index values.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the image is larger than the provided screen real estate, and can be panned or zoomed by the user, use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept>.</source>
          <target state="new">If the image is larger than the provided screen real estate, and can be panned or zoomed by the user, use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This type handles a sized DirectX drawing surface that is larger than the screen.</source>
          <target state="new">This type handles a sized DirectX drawing surface that is larger than the screen.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept>, you use this when composing a complex image or control dynamically.</source>
          <target state="new">Like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept>, you use this when composing a complex image or control dynamically.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>And, also like <bpt id="p1">**</bpt>SurfaceImageSource<ept id="p1">**</ept>, it doesn't work well for high-performance games.</source>
          <target state="new">And, also like <bpt id="p1">**</bpt>SurfaceImageSource<ept id="p1">**</ept>, it doesn't work well for high-performance games.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Some examples of XAML elements that could use a <bpt id="p1">**</bpt>VirtualSurfaceImageSource<ept id="p1">**</ept> are map controls, or a large, image-dense document viewer.</source>
          <target state="new">Some examples of XAML elements that could use a <bpt id="p1">**</bpt>VirtualSurfaceImageSource<ept id="p1">**</ept> are map controls, or a large, image-dense document viewer.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you are using DirectX to present graphics updated in real-time, or in a situation where the updates must come on regular low-latency intervals, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> class, so you can refresh the graphics without syncing to the XAML framework refresh timer.</source>
          <target state="new">If you are using DirectX to present graphics updated in real-time, or in a situation where the updates must come on regular low-latency intervals, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> class, so you can refresh the graphics without syncing to the XAML framework refresh timer.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This type enables you to access the graphics device's swap chain (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept>) directly and layer XAML atop the render target.</source>
          <target state="new">This type enables you to access the graphics device's swap chain (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept>) directly and layer XAML atop the render target.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This type works great for games and other full-screen DirectX apps that require a XAML-based user interface.</source>
          <target state="new">This type works great for games and other full-screen DirectX apps that require a XAML-based user interface.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You must know DirectX well to use this approach, including the Microsoft DirectX Graphics Infrastructure (DXGI), Direct2D, and Direct3D technologies.</source>
          <target state="new">You must know DirectX well to use this approach, including the Microsoft DirectX Graphics Infrastructure (DXGI), Direct2D, and Direct3D technologies.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Programming Guide for Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476345)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Programming Guide for Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476345)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>SurfaceImageSource</source>
          <target state="new">SurfaceImageSource</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> provides DirectX shared surfaces to draw into and then composes the bits into app content.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> provides DirectX shared surfaces to draw into and then composes the bits into app content.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Here is the basic process for creating and updating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> object in the code behind:</source>
          <target state="new">Here is the basic process for creating and updating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> object in the code behind:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Define the size of the shared surface by passing the height and width to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> constructor.</source>
          <target state="new">Define the size of the shared surface by passing the height and width to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> constructor.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can also indicate whether the surface needs alpha (opacity) support.</source>
          <target state="new">You can also indicate whether the surface needs alpha (opacity) support.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Get a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISurfaceImageSourceNative<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848322)</ept>.</source>
          <target state="new">Get a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISurfaceImageSourceNative<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848322)</ept>.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Cast the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> object as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IInspectable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/br205821)</ept> (or <bpt id="p5">**</bpt>IUnknown<ept id="p5">**</ept>), and call <bpt id="p6">**</bpt>QueryInterface<ept id="p6">**</ept> on it to get the underlying <bpt id="p7">**</bpt>ISurfaceImageSourceNative<ept id="p7">**</ept> implementation.</source>
          <target state="new">Cast the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> object as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IInspectable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/br205821)</ept> (or <bpt id="p5">**</bpt>IUnknown<ept id="p5">**</ept>), and call <bpt id="p6">**</bpt>QueryInterface<ept id="p6">**</ept> on it to get the underlying <bpt id="p7">**</bpt>ISurfaceImageSourceNative<ept id="p7">**</ept> implementation.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You use the methods defined on this implementation to set the device and run the draw operations.</source>
          <target state="new">You use the methods defined on this implementation to set the device and run the draw operations.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Set the DXGI device by first calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> and then passing the device and context to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ISurfaceImageSourceNative::SetDevice<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848325)</ept>.</source>
          <target state="new">Set the DXGI device by first calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> and then passing the device and context to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ISurfaceImageSourceNative::SetDevice<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848325)</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Provide a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174565)</ept> object to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ISurfaceImageSourceNative::BeginDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept>, and draw into that surface using DirectX.</source>
          <target state="new">Provide a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174565)</ept> object to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ISurfaceImageSourceNative::BeginDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept>, and draw into that surface using DirectX.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Only the area specified for update in the <bpt id="p1">*</bpt>updateRect<ept id="p1">*</ept> parameter is drawn.</source>
          <target state="new">Only the area specified for update in the <bpt id="p1">*</bpt>updateRect<ept id="p1">*</ept> parameter is drawn.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You can only have one outstanding <bpt id="p2">[</bpt><bpt id="p3">**</bpt>BeginDraw<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept> operation active at a time per <bpt id="p4">[</bpt><bpt id="p5">**</bpt>IDXGIDevice<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/bb174527)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You can only have one outstanding <bpt id="p2">[</bpt><bpt id="p3">**</bpt>BeginDraw<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept> operation active at a time per <bpt id="p4">[</bpt><bpt id="p5">**</bpt>IDXGIDevice<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/bb174527)</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This method returns the point (x,y) offset of the updated target rectangle in the <bpt id="p1">*</bpt>offset<ept id="p1">*</ept> parameter.</source>
          <target state="new">This method returns the point (x,y) offset of the updated target rectangle in the <bpt id="p1">*</bpt>offset<ept id="p1">*</ept> parameter.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You use this offset to determine where to draw into inside the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174565)</ept>.</source>
          <target state="new">You use this offset to determine where to draw into inside the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174565)</ept>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISurfaceImageSourceNative::EndDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848324)</ept> to complete the bitmap.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISurfaceImageSourceNative::EndDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848324)</ept> to complete the bitmap.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Pass this bitmap to an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ImageBrush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210101)</ept>.</source>
          <target state="new">Pass this bitmap to an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ImageBrush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210101)</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ImageBrush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210101)</ept> to draw the bitmap.</source>
          <target state="new">Use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ImageBrush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210101)</ept> to draw the bitmap.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Calling <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SurfaceImageSource::SetSource<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br243255)</ept> (inherited from <bpt id="p4">**</bpt>IBitmapSource::SetSource<ept id="p4">**</ept>) currently throws an exception.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Calling <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SurfaceImageSource::SetSource<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br243255)</ept> (inherited from <bpt id="p4">**</bpt>IBitmapSource::SetSource<ept id="p4">**</ept>) currently throws an exception.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Do not call it from your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> object.</source>
          <target state="new">Do not call it from your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> object.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>VirtualSurfaceImageSource</source>
          <target state="new">VirtualSurfaceImageSource</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> extends <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SurfaceImageSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> when the content is potentially larger than what can fit on screen and so the content must be virtualized to render optimally.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> extends <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SurfaceImageSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> when the content is potentially larger than what can fit on screen and so the content must be virtualized to render optimally.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> differs from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SurfaceImageSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> in that it uses a callback, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IVirtualSurfaceImageSourceCallbacksNative::UpdatesNeeded<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/hh848337)</ept>, that you implement to update regions of the surface as they become visible on the screen.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> differs from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SurfaceImageSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702041)</ept> in that it uses a callback, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IVirtualSurfaceImageSourceCallbacksNative::UpdatesNeeded<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/hh848337)</ept>, that you implement to update regions of the surface as they become visible on the screen.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You do not need to clear regions that are hidden, as the XAML framework takes care of that for you.</source>
          <target state="new">You do not need to clear regions that are hidden, as the XAML framework takes care of that for you.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Here is basic process for creating and updating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> object in the codebehind:</source>
          <target state="new">Here is basic process for creating and updating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> object in the codebehind:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Create an instance of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> with the size you want.</source>
          <target state="new">Create an instance of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> with the size you want.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Get a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848328)</ept>.</source>
          <target state="new">Get a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848328)</ept>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Cast the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> object as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IInspectable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/br205821)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IUnknown<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ms680509)</ept>, and call <bpt id="p7">[</bpt><bpt id="p8">**</bpt>QueryInterface<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/desktop/ms682521)</ept> on it to get the underlying <bpt id="p9">**</bpt>IVirtualSurfaceImageSourceNative<ept id="p9">**</ept> implementation.</source>
          <target state="new">Cast the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VirtualSurfaceImageSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> object as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IInspectable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/br205821)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IUnknown<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ms680509)</ept>, and call <bpt id="p7">[</bpt><bpt id="p8">**</bpt>QueryInterface<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/desktop/ms682521)</ept> on it to get the underlying <bpt id="p9">**</bpt>IVirtualSurfaceImageSourceNative<ept id="p9">**</ept> implementation.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You use the methods defined on this implementation to set the device and run the draw operations.</source>
          <target state="new">You use the methods defined on this implementation to set the device and run the draw operations.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Set the DXGI device by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::SetDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848325)</ept>.</source>
          <target state="new">Set the DXGI device by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::SetDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848325)</ept>.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848334)</ept>, passing in a reference to your implementation of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IVirtualSurfaceUpdatesCallbackNative<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848336)</ept>.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848334)</ept>, passing in a reference to your implementation of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IVirtualSurfaceUpdatesCallbackNative<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848336)</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The framework calls your implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848334)</ept> when a region of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VirtualSurfaceImageSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> needs to be updated.</source>
          <target state="new">The framework calls your implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848334)</ept> when a region of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VirtualSurfaceImageSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702050)</ept> needs to be updated.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This can happen either when the framework determines the region needs to be drawn (such as when the user pans or zooms the view of the surface), or after the app has called <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::Invalidate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848332)</ept> on that region.</source>
          <target state="new">This can happen either when the framework determines the region needs to be drawn (such as when the user pans or zooms the view of the surface), or after the app has called <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::Invalidate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848332)</ept> on that region.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::UpdatesNeeded<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848337)</ept>, use the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IVirtualSurfaceImageSourceNative::GetUpdateRectCount<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848329)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IVirtualSurfaceImageSourceNative::GetUpdateRects<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/hh848330)</ept> methods to determine which region(s) of the surface must be drawn.</source>
          <target state="new">In <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::UpdatesNeeded<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848337)</ept>, use the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IVirtualSurfaceImageSourceNative::GetUpdateRectCount<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848329)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IVirtualSurfaceImageSourceNative::GetUpdateRects<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/hh848330)</ept> methods to determine which region(s) of the surface must be drawn.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Lastly, for each region that must be updated:</source>
          <target state="new">Lastly, for each region that must be updated:</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Provide a pointer to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174565)</ept> object to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IVirtualSurfaceImageSourceNative::BeginDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept>, and draw into that surface using DirectX.</source>
          <target state="new">Provide a pointer to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174565)</ept> object to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IVirtualSurfaceImageSourceNative::BeginDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept>, and draw into that surface using DirectX.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Only the area specified for update in the <bpt id="p1">*</bpt>updateRect<ept id="p1">*</ept> parameter will be drawn.</source>
          <target state="new">Only the area specified for update in the <bpt id="p1">*</bpt>updateRect<ept id="p1">*</ept> parameter will be drawn.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>As with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IlSurfaceImageSourceNative::BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept>, this method returns the point (x,y) offset of the updated target rectangle in the <bpt id="p3">*</bpt>offset<ept id="p3">*</ept> parameter.</source>
          <target state="new">As with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IlSurfaceImageSourceNative::BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept>, this method returns the point (x,y) offset of the updated target rectangle in the <bpt id="p3">*</bpt>offset<ept id="p3">*</ept> parameter.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You use this offset to determine where to draw into inside the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174565)</ept>.</source>
          <target state="new">You use this offset to determine where to draw into inside the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174565)</ept>.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You can only have one outstanding <bpt id="p2">[</bpt><bpt id="p3">**</bpt>BeginDraw<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept> operation active at a time per <bpt id="p4">[</bpt><bpt id="p5">**</bpt>IDXGIDevice<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/bb174527)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You can only have one outstanding <bpt id="p2">[</bpt><bpt id="p3">**</bpt>BeginDraw<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh848323)</ept> operation active at a time per <bpt id="p4">[</bpt><bpt id="p5">**</bpt>IDXGIDevice<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/bb174527)</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Draw the specific content to that region, but constrain your drawing to the bounded regions for better performance.</source>
          <target state="new">Draw the specific content to that region, but constrain your drawing to the bounded regions for better performance.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::EndDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848324)</ept>.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IVirtualSurfaceImageSourceNative::EndDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh848324)</ept>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The result is a bitmap.</source>
          <target state="new">The result is a bitmap.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>SwapChainPanel and gaming</source>
          <target state="new">SwapChainPanel and gaming</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> is the Windows Runtime type designed to support high-performance graphics and gaming, where you manage the swap chain directly.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> is the Windows Runtime type designed to support high-performance graphics and gaming, where you manage the swap chain directly.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In this case, you create your own DirectX swap chain and manage the presentation of your rendered content.</source>
          <target state="new">In this case, you create your own DirectX swap chain and manage the presentation of your rendered content.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can then add XAML elements to the <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept> object, such as menus, heads-up displays, and other UI overlays.</source>
          <target state="new">You can then add XAML elements to the <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept> object, such as menus, heads-up displays, and other UI overlays.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To ensure good performance, there are certain limitations to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> type:</source>
          <target state="new">To ensure good performance, there are certain limitations to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> type:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>There are no more than 4 <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> instances per app.</source>
          <target state="new">There are no more than 4 <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> instances per app.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Opacity<ept id="p1">**</ept>, <bpt id="p2">**</bpt>RenderTransform<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Projection<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Clip<ept id="p4">**</ept> properties inherited by <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SwapChainPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> are not supported.</source>
          <target state="new">The <bpt id="p1">**</bpt>Opacity<ept id="p1">**</ept>, <bpt id="p2">**</bpt>RenderTransform<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Projection<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Clip<ept id="p4">**</ept> properties inherited by <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SwapChainPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> are not supported.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You should set the DirectX swap chain's height and width (in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>DESC1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept>) to the current dimensions of the app window.</source>
          <target state="new">You should set the DirectX swap chain's height and width (in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>DESC1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept>) to the current dimensions of the app window.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you don't, the display content will be scaled (using <bpt id="p1">**</bpt>DXGI<ph id="ph1">\_</ph>SCALING<ph id="ph2">\_</ph>STRETCH<ept id="p1">**</ept>) to fit.</source>
          <target state="new">If you don't, the display content will be scaled (using <bpt id="p1">**</bpt>DXGI<ph id="ph1">\_</ph>SCALING<ph id="ph2">\_</ph>STRETCH<ept id="p1">**</ept>) to fit.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You must set the DirectX swap chain's scaling mode (in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>DESC1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept>) to <bpt id="p3">**</bpt>DXGI<ph id="ph4">\_</ph>SCALING<ph id="ph5">\_</ph>STRETCH<ept id="p3">**</ept>.</source>
          <target state="new">You must set the DirectX swap chain's scaling mode (in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>DESC1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept>) to <bpt id="p3">**</bpt>DXGI<ph id="ph4">\_</ph>SCALING<ph id="ph5">\_</ph>STRETCH<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can't set the DirectX swap chain's alpha mode (in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>DESC1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept>) to <bpt id="p3">**</bpt>DXGI<ph id="ph4">\_</ph>ALPHA<ph id="ph5">\_</ph>MODE<ph id="ph6">\_</ph>PREMULTIPLIED<ept id="p3">**</ept>.</source>
          <target state="new">You can't set the DirectX swap chain's alpha mode (in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>DESC1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept>) to <bpt id="p3">**</bpt>DXGI<ph id="ph4">\_</ph>ALPHA<ph id="ph5">\_</ph>MODE<ph id="ph6">\_</ph>PREMULTIPLIED<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You must create the DirectX swap chain by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIFactory2::CreateSwapChainForComposition<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404558)</ept>.</source>
          <target state="new">You must create the DirectX swap chain by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIFactory2::CreateSwapChainForComposition<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404558)</ept>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You update the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> based on the needs of your app, and not the updates of the XAML framework.</source>
          <target state="new">You update the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> based on the needs of your app, and not the updates of the XAML framework.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you need to synchronize the updates of <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept> to those of the XAML framework, register for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::UI::Xaml::Media::CompositionTarget::Rendering<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br228127)</ept> event.</source>
          <target state="new">If you need to synchronize the updates of <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept> to those of the XAML framework, register for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::UI::Xaml::Media::CompositionTarget::Rendering<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br228127)</ept> event.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Otherwise, you must consider any cross-thread issues if you try to update the XAML elements from a different thread than the one updating the <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept>.</source>
          <target state="new">Otherwise, you must consider any cross-thread issues if you try to update the XAML elements from a different thread than the one updating the <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>There are also a few general best practices to follow designing your app to use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept>.</source>
          <target state="new">There are also a few general best practices to follow designing your app to use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> inherits from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows::UI::Xaml::Controls::Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept>, and supports similar layout behavior.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> inherits from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows::UI::Xaml::Controls::Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept>, and supports similar layout behavior.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Familiarize yourself with the <bpt id="p1">**</bpt>Grid<ept id="p1">**</ept> type and its properties.</source>
          <target state="new">Familiarize yourself with the <bpt id="p1">**</bpt>Grid<ept id="p1">**</ept> type and its properties.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>After a DirectX swap chain has been set, all input events that are fired for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> work the same as they do for any other XAML element.</source>
          <target state="new">After a DirectX swap chain has been set, all input events that are fired for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> work the same as they do for any other XAML element.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You don't set a background brush for <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept>, and you don't need to handle input events from the app's <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object directly as you do in DirectX apps that don't use <bpt id="p4">**</bpt>SwapChainPanel<ept id="p4">**</ept>.</source>
          <target state="new">You don't set a background brush for <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept>, and you don't need to handle input events from the app's <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object directly as you do in DirectX apps that don't use <bpt id="p4">**</bpt>SwapChainPanel<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>• All content of the visual XAML element tree under a direct child of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> is clipped to the layout size of the <bpt id="p3">**</bpt>SwapChainPanel<ept id="p3">**</ept> object’s immediate child.</source>
          <target state="new">• All content of the visual XAML element tree under a direct child of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> is clipped to the layout size of the <bpt id="p3">**</bpt>SwapChainPanel<ept id="p3">**</ept> object’s immediate child.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Any content that is transformed outside these layout bounds won't be rendered.</source>
          <target state="new">Any content that is transformed outside these layout bounds won't be rendered.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Therefore, place any XAML content that you animate with a XAML<bpt id="p1">[</bpt><bpt id="p2">**</bpt>Storyboard<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept> in the visual tree under an element whose layout bounds are large enough to contain the full range of the animation.</source>
          <target state="new">Therefore, place any XAML content that you animate with a XAML<bpt id="p1">[</bpt><bpt id="p2">**</bpt>Storyboard<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept> in the visual tree under an element whose layout bounds are large enough to contain the full range of the animation.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Limit the number of immediate visual XAML elements under a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept>.</source>
          <target state="new">Limit the number of immediate visual XAML elements under a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept>.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If possible, group elements that are in close proximity under a common parent.</source>
          <target state="new">If possible, group elements that are in close proximity under a common parent.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>But there is a performance tradeoff between the number of immediate visual children and the size of the children: too many or unnecessarily large XAML elements can impact overall performance.</source>
          <target state="new">But there is a performance tradeoff between the number of immediate visual children and the size of the children: too many or unnecessarily large XAML elements can impact overall performance.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Likewise, don't create a single full-screen child XAML element for your app's <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept> because this increases overdraw in the app and decreases performance.</source>
          <target state="new">Likewise, don't create a single full-screen child XAML element for your app's <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept> because this increases overdraw in the app and decreases performance.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>As a rule, create no more than 8 immediate XAML visual children for your app's <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept>, and each element must have a layout size only as large as necessary to contain the element's visual content.</source>
          <target state="new">As a rule, create no more than 8 immediate XAML visual children for your app's <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept>, and each element must have a layout size only as large as necessary to contain the element's visual content.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>However, you can make the visual tree of elements under a child element of the <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept> sufficiently complex without decreasing performance too badly.</source>
          <target state="new">However, you can make the visual tree of elements under a child element of the <bpt id="p1">**</bpt>SwapChainPanel<ept id="p1">**</ept> sufficiently complex without decreasing performance too badly.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   In general, your DirectX apps should create swap chains in landscape orientation, and equal to the display window size (which is usually the native screen resolution in most Windows Store games).</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   In general, your DirectX apps should create swap chains in landscape orientation, and equal to the display window size (which is usually the native screen resolution in most Windows Store games).</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This ensures that your app uses the optimal swap chain implementation when it doesn't have any visible XAML overlay.</source>
          <target state="new">This ensures that your app uses the optimal swap chain implementation when it doesn't have any visible XAML overlay.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If the app is rotated to portrait mode, your app should call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::SetRotation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446801)</ept> on the existing swap chain, apply a transform to the content if needed, and then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSwapChain<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/dn302144)</ept> again on the same swap chain.</source>
          <target state="new">If the app is rotated to portrait mode, your app should call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::SetRotation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446801)</ept> on the existing swap chain, apply a transform to the content if needed, and then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSwapChain<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/dn302144)</ept> again on the same swap chain.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Similarly, your app should call <bpt id="p1">**</bpt>SetSwapChain<ept id="p1">**</ept> again on the same swap chain whenever the swap chain is resized by calling <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGISwapChain::ResizeBuffers<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb174577)</ept>.</source>
          <target state="new">Similarly, your app should call <bpt id="p1">**</bpt>SetSwapChain<ept id="p1">**</ept> again on the same swap chain whenever the swap chain is resized by calling <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGISwapChain::ResizeBuffers<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb174577)</ept>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Here is basic process for creating and updating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> object in the code behind:</source>
          <target state="new">Here is basic process for creating and updating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> object in the code behind:</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Get an instance of a swap chain panel for your app.</source>
          <target state="new">Get an instance of a swap chain panel for your app.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The instances are indicated in your XAML with the <ph id="ph1">`&lt;SwapChainPanel&gt;`</ph> tag.</source>
          <target state="new">The instances are indicated in your XAML with the <ph id="ph1">`&lt;SwapChainPanel&gt;`</ph> tag.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Here is an example <ph id="ph1">`&lt;SwapChainPanel&gt;`</ph> tag.</source>
          <target state="new">Here is an example <ph id="ph1">`&lt;SwapChainPanel&gt;`</ph> tag.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Get a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISwapChainPanelNative<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn302143)</ept>.</source>
          <target state="new">Get a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISwapChainPanelNative<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn302143)</ept>.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Cast the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> object as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IInspectable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/br205821)</ept> (or <bpt id="p5">**</bpt>IUnknown<ept id="p5">**</ept>), and call <bpt id="p6">**</bpt>QueryInterface<ept id="p6">**</ept> on it to get the underlying <bpt id="p7">**</bpt>ISwapChainPanelNative<ept id="p7">**</ept> implementation.</source>
          <target state="new">Cast the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn252834)</ept> object as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IInspectable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/br205821)</ept> (or <bpt id="p5">**</bpt>IUnknown<ept id="p5">**</ept>), and call <bpt id="p6">**</bpt>QueryInterface<ept id="p6">**</ept> on it to get the underlying <bpt id="p7">**</bpt>ISwapChainPanelNative<ept id="p7">**</ept> implementation.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Create the DXGI device and the swap chain, and set the swap chain to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISwapChainPanelNative<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn302143)</ept> by passing it to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSwapChain<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/dn302144)</ept>.</source>
          <target state="new">Create the DXGI device and the swap chain, and set the swap chain to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISwapChainPanelNative<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn302143)</ept> by passing it to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSwapChain<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/dn302144)</ept>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Draw to the DirectX swap chain, and present it to display the contents.</source>
          <target state="new">Draw to the DirectX swap chain, and present it to display the contents.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The XAML elements are refreshed when the Windows Runtime layout/render logic signals an update.</source>
          <target state="new">The XAML elements are refreshed when the Windows Runtime layout/render logic signals an update.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>SurfaceImageSource</source>
          <target state="new">SurfaceImageSource</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>VirtualSurfaceImageSource</source>
          <target state="new">VirtualSurfaceImageSource</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>SwapChainPanel</source>
          <target state="new">SwapChainPanel</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>ISwapChainPanelNative</source>
          <target state="new">ISwapChainPanelNative</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Programming Guide for Direct3D 11</source>
          <target state="new">Programming Guide for Direct3D 11</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>