<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\change-your-shader-loading-code.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a79154290e78fbd456dab282345d1a1501984132</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compare the OpenGL ES 2.0 shader pipeline to Direct3D</source>
          <target state="new">Compare the OpenGL ES 2.0 shader pipeline to Direct3D</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</source>
          <target state="new">Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Compare the OpenGL ES 2.0 shader pipeline to Direct3D</source>
          <target state="new">Compare the OpenGL ES 2.0 shader pipeline to Direct3D</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Input-Assembler Stage</source>
          <target state="new">Input-Assembler Stage</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Vertex-Shader Stage</source>
          <target state="new">Vertex-Shader Stage</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pixel-Shader Stage</source>
          <target state="new">Pixel-Shader Stage</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</source>
          <target state="new">Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In terms of API design, however, the major components for creating and managing the shader stages are parts of two primary interfaces, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>.</source>
          <target state="new">In terms of API design, however, the major components for creating and managing the shader stages are parts of two primary interfaces, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This topic attempts to map common OpenGL ES 2.0 shader pipeline API patterns to the Direct3D 11 equivalents in these interfaces.</source>
          <target state="new">This topic attempts to map common OpenGL ES 2.0 shader pipeline API patterns to the Direct3D 11 equivalents in these interfaces.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Reviewing the Direct3D 11 shader pipeline</source>
          <target state="new">Reviewing the Direct3D 11 shader pipeline</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The shader objects are created with methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> interface, such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1::CreateVertexShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11Device1::CreatePixelShader<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept>.</source>
          <target state="new">The shader objects are created with methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> interface, such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1::CreateVertexShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11Device1::CreatePixelShader<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Direct3D 11 graphics pipeline is managed by instances of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> interface, and has the following stages:</source>
          <target state="new">The Direct3D 11 graphics pipeline is managed by instances of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> interface, and has the following stages:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Input-Assembler Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205116)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Input-Assembler Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205116)</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The input-assembler stage supplies data (triangles, lines and points) to the pipeline.</source>
          <target state="new">The input-assembler stage supplies data (triangles, lines and points) to the pipeline.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "IA".</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "IA".</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Vertex-Shader Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205146#Vertex_Shader_Stage)</ept> - The vertex-shader stage processes vertices, typically performing operations such as transformations, skinning, and lighting.</source>
          <target state="new"><bpt id="p1">[</bpt>Vertex-Shader Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205146#Vertex_Shader_Stage)</ept> - The vertex-shader stage processes vertices, typically performing operations such as transformations, skinning, and lighting.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A vertex shader always takes a single input vertex and produces a single output vertex.</source>
          <target state="new">A vertex shader always takes a single input vertex and produces a single output vertex.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "VS".</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "VS".</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Stream-Output Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205121)</ept> - The stream-output stage streams primitive data from the pipeline to memory on its way to the rasterizer.</source>
          <target state="new"><bpt id="p1">[</bpt>Stream-Output Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205121)</ept> - The stream-output stage streams primitive data from the pipeline to memory on its way to the rasterizer.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Data can be streamed out and/or passed into the rasterizer.</source>
          <target state="new">Data can be streamed out and/or passed into the rasterizer.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Data streamed out to memory can be recirculated back into the pipeline as input data or read-back from the CPU.</source>
          <target state="new">Data streamed out to memory can be recirculated back into the pipeline as input data or read-back from the CPU.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "SO".</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "SO".</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rasterizer Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205125)</ept> - The rasterizer clips primitives, prepares primitives for the pixel shader, and determines how to invoke pixel shaders.</source>
          <target state="new"><bpt id="p1">[</bpt>Rasterizer Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205125)</ept> - The rasterizer clips primitives, prepares primitives for the pixel shader, and determines how to invoke pixel shaders.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can disable rasterization by telling the pipeline there is no pixel shader (set the pixel shader stage to NULL with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::PSSetShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</ept>), and disabling depth and stencil testing (set DepthEnable and StencilEnable to FALSE in <bpt id="p3">[</bpt><bpt id="p4">**</bpt>D3D11<ph id="ph1">\_</ph>DEPTH<ph id="ph2">\_</ph>STENCIL<ph id="ph3">\_</ph>DESC<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476110)</ept>).</source>
          <target state="new">You can disable rasterization by telling the pipeline there is no pixel shader (set the pixel shader stage to NULL with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::PSSetShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</ept>), and disabling depth and stencil testing (set DepthEnable and StencilEnable to FALSE in <bpt id="p3">[</bpt><bpt id="p4">**</bpt>D3D11<ph id="ph1">\_</ph>DEPTH<ph id="ph2">\_</ph>STENCIL<ph id="ph3">\_</ph>DESC<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476110)</ept>).</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>While disabled, rasterization-related pipeline counters will not update.</source>
          <target state="new">While disabled, rasterization-related pipeline counters will not update.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pixel-Shader Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205146#Pixel_Shader_Stage)</ept> - The pixel-shader stage receives interpolated data for a primitive and generates per-pixel data such as color.</source>
          <target state="new"><bpt id="p1">[</bpt>Pixel-Shader Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205146#Pixel_Shader_Stage)</ept> - The pixel-shader stage receives interpolated data for a primitive and generates per-pixel data such as color.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "PS".</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "PS".</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Output-Merger Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205120)</ept> - The output-merger stage combines various types of output data (pixel shader values, depth and stencil information) with the contents of the render target and depth/stencil buffers to generate the final pipeline result.</source>
          <target state="new"><bpt id="p1">[</bpt>Output-Merger Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205120)</ept> - The output-merger stage combines various types of output data (pixel shader values, depth and stencil information) with the contents of the render target and depth/stencil buffers to generate the final pipeline result.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "OM".</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> methods that support this stage are prefixed with "OM".</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(There are also stages for geometry shaders, hull shaders, tesselators, and domain shaders, but since they have no analogues in OpenGL ES 2.0, we won't discuss them here.) For a complete list of the methods for these stages, refer to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> reference pages.</source>
          <target state="new">(There are also stages for geometry shaders, hull shaders, tesselators, and domain shaders, but since they have no analogues in OpenGL ES 2.0, we won't discuss them here.) For a complete list of the methods for these stages, refer to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> reference pages.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID3D11DeviceContext1<ept id="p1">**</ept> extends <bpt id="p2">**</bpt>ID3D11DeviceContext<ept id="p2">**</ept> for Direct3D 11.</source>
          <target state="new"><bpt id="p1">**</bpt>ID3D11DeviceContext1<ept id="p1">**</ept> extends <bpt id="p2">**</bpt>ID3D11DeviceContext<ept id="p2">**</ept> for Direct3D 11.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creating a shader</source>
          <target state="new">Creating a shader</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In Direct3D, shader resources are not created before compiling and loading them; rather, the resource is created when the HLSLis loaded.</source>
          <target state="new">In Direct3D, shader resources are not created before compiling and loading them; rather, the resource is created when the HLSLis loaded.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Therefore, there is no directly analogous function to glCreateShader, which creates an initialized shader resource of a specific type (such as GL<ph id="ph1">\_</ph>VERTEX<ph id="ph2">\_</ph>SHADER or GL<ph id="ph3">\_</ph>FRAGMENT<ph id="ph4">\_</ph>SHADER).</source>
          <target state="new">Therefore, there is no directly analogous function to glCreateShader, which creates an initialized shader resource of a specific type (such as GL<ph id="ph1">\_</ph>VERTEX<ph id="ph2">\_</ph>SHADER or GL<ph id="ph3">\_</ph>FRAGMENT<ph id="ph4">\_</ph>SHADER).</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Rather, shaders are created after the HLSL is loaded with specific functions like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1::CreateVertexShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1::CreatePixelShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept>, and which take the type and the compiled HLSL as parameters.</source>
          <target state="new">Rather, shaders are created after the HLSL is loaded with specific functions like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1::CreateVertexShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1::CreatePixelShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept>, and which take the type and the compiled HLSL as parameters.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>glCreateShader</source>
          <target state="new">glCreateShader</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1::CreateVertexShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1::CreatePixelShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept> after successfully loading the compiled shader object, passing them the CSO as a buffer.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1::CreateVertexShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1::CreatePixelShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept> after successfully loading the compiled shader object, passing them the CSO as a buffer.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Compiling a shader</source>
          <target state="new">Compiling a shader</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Direct3D haders must be precompiled as Compiled Shader Object (.cso) files in Universal Windows Platform (UWP) apps and loaded using one of the Windows Runtime file APIs.</source>
          <target state="new">Direct3D haders must be precompiled as Compiled Shader Object (.cso) files in Universal Windows Platform (UWP) apps and loaded using one of the Windows Runtime file APIs.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(Desktop apps can compile the shaders from text files or string at run-time.) The CSO files are built from any .hlsl files that are part of your Microsoft Visual Studio project, and retain the same names, only with a .cso file extension.</source>
          <target state="new">(Desktop apps can compile the shaders from text files or string at run-time.) The CSO files are built from any .hlsl files that are part of your Microsoft Visual Studio project, and retain the same names, only with a .cso file extension.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Ensure that they are included with your package when you ship!</source>
          <target state="new">Ensure that they are included with your package when you ship!</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>glCompileShader</source>
          <target state="new">glCompileShader</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Compile the shaders to .cso files in Visual Studio and include them in your package.</source>
          <target state="new">Compile the shaders to .cso files in Visual Studio and include them in your package.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Using glGetShaderiv for compile status</source>
          <target state="new">Using glGetShaderiv for compile status</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See the compilation output from Visual Studio's FX Compiler (FXC) if there are errors in compilation.</source>
          <target state="new">See the compilation output from Visual Studio's FX Compiler (FXC) if there are errors in compilation.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If compilation is successful, a corresponding CSO file is created.</source>
          <target state="new">If compilation is successful, a corresponding CSO file is created.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Loading a shader</source>
          <target state="new">Loading a shader</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>As noted in the section on creating a shader, Direct3D 11 creates the shader when the corresponding CSO file is loaded into a buffer and passed to one of the methods in the following table.</source>
          <target state="new">As noted in the section on creating a shader, Direct3D 11 creates the shader when the corresponding CSO file is loaded into a buffer and passed to one of the methods in the following table.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>ShaderSource</source>
          <target state="new">ShaderSource</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1::CreateVertexShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1::CreatePixelShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept> after successfully loading the compiled shader object.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1::CreateVertexShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1::CreatePixelShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept> after successfully loading the compiled shader object.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Setting up the pipeline</source>
          <target state="new">Setting up the pipeline</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0 has the "shader program" object, which contains multiple shaders for execution.</source>
          <target state="new">OpenGL ES 2.0 has the "shader program" object, which contains multiple shaders for execution.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Individual shaders are attached to the shader program object.</source>
          <target state="new">Individual shaders are attached to the shader program object.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>However, in Direct3D 11, you work with the rendering context (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>) directly and create shaders on it.</source>
          <target state="new">However, in Direct3D 11, you work with the rendering context (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>) directly and create shaders on it.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>glCreateProgram</source>
          <target state="new">glCreateProgram</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Direct3D 11 does not use the shader program object abstraction.</source>
          <target state="new">Direct3D 11 does not use the shader program object abstraction.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>glLinkProgram</source>
          <target state="new">glLinkProgram</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Direct3D 11 does not use the shader program object abstraction.</source>
          <target state="new">Direct3D 11 does not use the shader program object abstraction.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>glUseProgram</source>
          <target state="new">glUseProgram</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Direct3D 11 does not use the shader program object abstraction.</source>
          <target state="new">Direct3D 11 does not use the shader program object abstraction.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>glGetProgramiv</source>
          <target state="new">glGetProgramiv</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Use the reference you created to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>.</source>
          <target state="new">Use the reference you created to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Create an instance of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/dn280493)</ept> with the static <bpt id="p5">[</bpt><bpt id="p6">**</bpt>D3D11CreateDevice<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> method.</source>
          <target state="new">Create an instance of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/dn280493)</ept> with the static <bpt id="p5">[</bpt><bpt id="p6">**</bpt>D3D11CreateDevice<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> method.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Setting the viewport(s)</source>
          <target state="new">Setting the viewport(s)</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Setting a viewport in Direct3D 11 is very similar to how you set a viewport in OpenGL ES 2.0.</source>
          <target state="new">Setting a viewport in Direct3D 11 is very similar to how you set a viewport in OpenGL ES 2.0.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In Direct3D 11, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::RSSetViewports<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</ept> with a configured <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CD3D11<ph id="ph1">\_</ph>VIEWPORT<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/jj151722)</ept>.</source>
          <target state="new">In Direct3D 11, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::RSSetViewports<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</ept> with a configured <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CD3D11<ph id="ph1">\_</ph>VIEWPORT<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/jj151722)</ept>.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Direct3D 11: Setting a viewport.</source>
          <target state="new">Direct3D 11: Setting a viewport.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>glViewport</source>
          <target state="new">glViewport</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CD3D11<ph id="ph1">\_</ph>VIEWPORT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/jj151722)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext::RSSetViewports<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</ept></source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CD3D11<ph id="ph1">\_</ph>VIEWPORT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/jj151722)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext::RSSetViewports<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</ept></target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Configuring the vertex shaders</source>
          <target state="new">Configuring the vertex shaders</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Configuring a vertex shader in Direct3D 11 is done when the shader is loaded.</source>
          <target state="new">Configuring a vertex shader in Direct3D 11 is done when the shader is loaded.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Uniforms are passed as constant buffers using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::VSSetConstantBuffers1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446795)</ept>.</source>
          <target state="new">Uniforms are passed as constant buffers using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::VSSetConstantBuffers1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446795)</ept>.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>glAttachShader</source>
          <target state="new">glAttachShader</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ID3D11Device1::CreateVertexShader</source>
          <target state="new">ID3D11Device1::CreateVertexShader</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>glGetShaderiv, glGetShaderSource</source>
          <target state="new">glGetShaderiv, glGetShaderSource</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>ID3D11DeviceContext1::VSGetShader</source>
          <target state="new">ID3D11DeviceContext1::VSGetShader</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>glGetUniformfv, glGetUniformiv</source>
          <target state="new">glGetUniformfv, glGetUniformiv</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::VSGetConstantBuffers1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446793)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::VSGetConstantBuffers1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446793)</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Configuring the pixel shaders</source>
          <target state="new">Configuring the pixel shaders</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Configuring a pixel shader in Direct3D 11 is done when the shader is loaded.</source>
          <target state="new">Configuring a pixel shader in Direct3D 11 is done when the shader is loaded.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Uniforms are passed as constant buffers using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::PSSetConstantBuffers1.<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404649)</ept></source>
          <target state="new">Uniforms are passed as constant buffers using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::PSSetConstantBuffers1.<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404649)</ept></target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>glAttachShader</source>
          <target state="new">glAttachShader</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>ID3D11Device1::CreatePixelShader</source>
          <target state="new">ID3D11Device1::CreatePixelShader</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>glGetShaderiv, glGetShaderSource</source>
          <target state="new">glGetShaderiv, glGetShaderSource</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>ID3D11DeviceContext1::PSGetShader</source>
          <target state="new">ID3D11DeviceContext1::PSGetShader</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>glGetUniformfv, glGetUniformiv</source>
          <target state="new">glGetUniformfv, glGetUniformiv</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::PSGetConstantBuffers1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404645)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::PSGetConstantBuffers1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404645)</ept>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Generating the final results</source>
          <target state="new">Generating the final results</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When the pipeline completes, you draw the results of the shader stages into the back buffer.</source>
          <target state="new">When the pipeline completes, you draw the results of the shader stages into the back buffer.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In Direct3D 11, just as it is with Open GL ES 2.0, this involves calling a draw command to output the results as a color map in the back buffer, and thensending that back buffer to the display.</source>
          <target state="new">In Direct3D 11, just as it is with Open GL ES 2.0, this involves calling a draw command to output the results as a color map in the back buffer, and thensending that back buffer to the display.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>glDrawElements</source>
          <target state="new">glDrawElements</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::Draw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476407)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1::DrawIndexed<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476409)</ept> (or other Draw<ph id="ph1">\*</ph> methods on <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11DeviceContext1<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</ept>).</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::Draw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476407)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1::DrawIndexed<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476409)</ept> (or other Draw<ph id="ph1">\*</ph> methods on <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11DeviceContext1<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</ept>).</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>eglSwapBuffers</source>
          <target state="new">eglSwapBuffers</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>IDXGISwapChain1::Present1</source>
          <target state="new">IDXGISwapChain1::Present1</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Porting GLSL to HLSL</source>
          <target state="new">Porting GLSL to HLSL</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>GLSL and HLSL are not very different beyond complex type support and syntax some overall syntax.</source>
          <target state="new">GLSL and HLSL are not very different beyond complex type support and syntax some overall syntax.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Many developers find it easiest to port between the two by aliasing common OpenGL ES 2.0 instructions and definitions to their HLSL equivalent.</source>
          <target state="new">Many developers find it easiest to port between the two by aliasing common OpenGL ES 2.0 instructions and definitions to their HLSL equivalent.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Note that Direct3D uses the Shader Model version to express the feature set of the HLSL supported by a graphics interface; OpenGL has a different version specification for HLSL.</source>
          <target state="new">Note that Direct3D uses the Shader Model version to express the feature set of the HLSL supported by a graphics interface; OpenGL has a different version specification for HLSL.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following table attempts to give you some approximate idea of the shader language feature sets defined for Direct3D 11 and OpenGL ES 2.0 in the terms of the other's version.</source>
          <target state="new">The following table attempts to give you some approximate idea of the shader language feature sets defined for Direct3D 11 and OpenGL ES 2.0 in the terms of the other's version.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Shader language</source>
          <target state="new">Shader language</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>GLSL feature version</source>
          <target state="new">GLSL feature version</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Direct3D Shader Model</source>
          <target state="new">Direct3D Shader Model</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Direct3D 11 HLSL</source>
          <target state="new">Direct3D 11 HLSL</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>~4.30.</source>
          <target state="new">~4.30.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>SM 5.0</source>
          <target state="new">SM 5.0</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>GLSL ES for OpenGL ES 2.0</source>
          <target state="new">GLSL ES for OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>1.40.</source>
          <target state="new">1.40.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Older implementations of GLSL ES for OpenGL ES 2.0 may use 1.10 through 1.30.</source>
          <target state="new">Older implementations of GLSL ES for OpenGL ES 2.0 may use 1.10 through 1.30.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Check your original code with glGetString(GL<ph id="ph1">\_</ph>SHADING<ph id="ph2">\_</ph>LANGUAGE<ph id="ph3">\_</ph>VERSION) or glGetString(SHADING<ph id="ph4">\_</ph>LANGUAGE<ph id="ph5">\_</ph>VERSION) to determine it.</source>
          <target state="new">Check your original code with glGetString(GL<ph id="ph1">\_</ph>SHADING<ph id="ph2">\_</ph>LANGUAGE<ph id="ph3">\_</ph>VERSION) or glGetString(SHADING<ph id="ph4">\_</ph>LANGUAGE<ph id="ph5">\_</ph>VERSION) to determine it.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>~SM 2.0</source>
          <target state="new">~SM 2.0</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For more details of differences between the two shader languages, as well as common syntax mappings, read the <bpt id="p1">[</bpt>GLSL-to-HLSL reference<ept id="p1">](glsl-to-hlsl-reference.md)</ept>.</source>
          <target state="new">For more details of differences between the two shader languages, as well as common syntax mappings, read the <bpt id="p1">[</bpt>GLSL-to-HLSL reference<ept id="p1">](glsl-to-hlsl-reference.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Porting the OpenGL intrinsics to HLSL semantics</source>
          <target state="new">Porting the OpenGL intrinsics to HLSL semantics</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Direct3D 11 HLSL semantics are strings that, like a uniform or attribute name, are used to identify a value passed between the app and a shader program.</source>
          <target state="new">Direct3D 11 HLSL semantics are strings that, like a uniform or attribute name, are used to identify a value passed between the app and a shader program.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>While they can be any of a variety of possible strings, the best practice is to use a string like POSITION or COLOR that indicates the usage.</source>
          <target state="new">While they can be any of a variety of possible strings, the best practice is to use a string like POSITION or COLOR that indicates the usage.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You assign these semantics when you are constructing a constant buffer or buffer input layout.</source>
          <target state="new">You assign these semantics when you are constructing a constant buffer or buffer input layout.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You can also append a number between 0 and 7 to the semantic so that you use separate registers for similar values.</source>
          <target state="new">You can also append a number between 0 and 7 to the semantic so that you use separate registers for similar values.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For example: COLOR0, COLOR1, COLOR2...</source>
          <target state="new">For example: COLOR0, COLOR1, COLOR2...</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Semantics that are prefixed with "SV<ph id="ph1">\_</ph>" are system value semantics that are written to by your shader program; your app itself (running on the CPU) cannot modify them.</source>
          <target state="new">Semantics that are prefixed with "SV<ph id="ph1">\_</ph>" are system value semantics that are written to by your shader program; your app itself (running on the CPU) cannot modify them.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Typically, these contain values that are inputs or outputs from another shader stage in the graphics pipeline, or are generated entirely by the GPU.</source>
          <target state="new">Typically, these contain values that are inputs or outputs from another shader stage in the graphics pipeline, or are generated entirely by the GPU.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Additionally, SV<ph id="ph1">\_</ph> semantics have different behaviors when they are used to specify input to or output from a shader stage.</source>
          <target state="new">Additionally, SV<ph id="ph1">\_</ph> semantics have different behaviors when they are used to specify input to or output from a shader stage.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example, SV<ph id="ph1">\_</ph>POSITION (output) contains the vertex data transformed during the vertex shader stage, and SV<ph id="ph2">\_</ph>POSITION (input) contains the pixel position values interpolated during rasterization.</source>
          <target state="new">For example, SV<ph id="ph1">\_</ph>POSITION (output) contains the vertex data transformed during the vertex shader stage, and SV<ph id="ph2">\_</ph>POSITION (input) contains the pixel position values interpolated during rasterization.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Here are a few mappings for common OpenGL ES 2.0 shader instrinsics:</source>
          <target state="new">Here are a few mappings for common OpenGL ES 2.0 shader instrinsics:</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>OpenGL system value</source>
          <target state="new">OpenGL system value</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Use this HLSL Semantic</source>
          <target state="new">Use this HLSL Semantic</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>gl<ph id="ph1">\_</ph>Position</source>
          <target state="new">gl<ph id="ph1">\_</ph>Position</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>POSITION(n) for vertex buffer data.</source>
          <target state="new">POSITION(n) for vertex buffer data.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>SV<ph id="ph1">\_</ph>POSITION provides a pixel position to the pixel shader and cannot be written by your app.</source>
          <target state="new">SV<ph id="ph1">\_</ph>POSITION provides a pixel position to the pixel shader and cannot be written by your app.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>gl<ph id="ph1">\_</ph>Normal</source>
          <target state="new">gl<ph id="ph1">\_</ph>Normal</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>NORMAL(n) for normal data provided by the vertex buffer.</source>
          <target state="new">NORMAL(n) for normal data provided by the vertex buffer.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>gl<ph id="ph1">\_</ph>TexCoord<ph id="ph2">\[</ph>n</source>
          <target state="new">gl<ph id="ph1">\_</ph>TexCoord<ph id="ph2">\[</ph>n</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>TEXCOORD(n) for texture UV (ST in some OpenGL documentation) coordinate data supplied to a shader.</source>
          <target state="new">TEXCOORD(n) for texture UV (ST in some OpenGL documentation) coordinate data supplied to a shader.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>gl<ph id="ph1">\_</ph>FragColor</source>
          <target state="new">gl<ph id="ph1">\_</ph>FragColor</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>COLOR(n) for RGBA color data supplied to a shader.</source>
          <target state="new">COLOR(n) for RGBA color data supplied to a shader.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Note that it is treated identically to coordinate data; the semantic simply helps you identify that it is color data.</source>
          <target state="new">Note that it is treated identically to coordinate data; the semantic simply helps you identify that it is color data.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>gl<ph id="ph1">\_</ph>FragData<ph id="ph2">\[</ph>n</source>
          <target state="new">gl<ph id="ph1">\_</ph>FragData<ph id="ph2">\[</ph>n</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>SV<ph id="ph1">\_</ph>Target<ph id="ph2">\[</ph>n<ph id="ph3">\]</ph> for writing from a pixel shader to a target texture or other pixel buffer.</source>
          <target state="new">SV<ph id="ph1">\_</ph>Target<ph id="ph2">\[</ph>n<ph id="ph3">\]</ph> for writing from a pixel shader to a target texture or other pixel buffer.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The method by which you code for semantics is not the same as using intrinsics in OpenGL ES 2.0.</source>
          <target state="new">The method by which you code for semantics is not the same as using intrinsics in OpenGL ES 2.0.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In OpenGL, you can access many of the intrinsics directly without any configuration or declaration; in Direct3D, you must declare a field in a specific constant buffer to use a particular semantic, or you declare it as the return value for a shader's <bpt id="p1">**</bpt>main()<ept id="p1">**</ept> method.</source>
          <target state="new">In OpenGL, you can access many of the intrinsics directly without any configuration or declaration; in Direct3D, you must declare a field in a specific constant buffer to use a particular semantic, or you declare it as the return value for a shader's <bpt id="p1">**</bpt>main()<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Here's an example of a semantic used in a constant buffer definition:</source>
          <target state="new">Here's an example of a semantic used in a constant buffer definition:</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This code defines a pair of simple constant buffers</source>
          <target state="new">This code defines a pair of simple constant buffers</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>And here's an example of a semantic used to define the value returned by a fragment shader:</source>
          <target state="new">And here's an example of a semantic used to define the value returned by a fragment shader:</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>In this case, SV<ph id="ph1">\_</ph>TARGET is the location of the render target that the pixel color (defined as a vector with four float values) is written to when the shader completes execution.</source>
          <target state="new">In this case, SV<ph id="ph1">\_</ph>TARGET is the location of the render target that the pixel color (defined as a vector with four float values) is written to when the shader completes execution.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For more details on the use of semantics with Direct3D, read <bpt id="p1">[</bpt>HLSL Semantics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509647)</ept>.</source>
          <target state="new">For more details on the use of semantics with Direct3D, read <bpt id="p1">[</bpt>HLSL Semantics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509647)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>