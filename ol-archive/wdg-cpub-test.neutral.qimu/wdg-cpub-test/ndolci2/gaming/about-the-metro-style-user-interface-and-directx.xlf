<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\about-the-metro-style-user-interface-and-directx.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abd829af19528961c57120be4b0c6fecde6dc3e5</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The app object and DirectX</source>
          <target state="new">The app object and DirectX</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Universal Windows Platform (UWP) with DirectX games don't use many of the Windows UI user interface elements and objects.</source>
          <target state="new">Universal Windows Platform (UWP) with DirectX games don't use many of the Windows UI user interface elements and objects.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The app object and DirectX</source>
          <target state="new">The app object and DirectX</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Universal Windows Platform (UWP) with DirectX games don't use many of the Windows UI user interface elements and objects.</source>
          <target state="new">Universal Windows Platform (UWP) with DirectX games don't use many of the Windows UI user interface elements and objects.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Rather, because they run at a lower level in the Windows Runtime stack, they must interoperate with the user interface framework in a more fundamental way: by accessing and interoperating with the app object directly.</source>
          <target state="new">Rather, because they run at a lower level in the Windows Runtime stack, they must interoperate with the user interface framework in a more fundamental way: by accessing and interoperating with the app object directly.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Learn when and how this interoperation occurs, and how you, as a DirectX developer, can effectively use this model in the development of your UWP app.</source>
          <target state="new">Learn when and how this interoperation occurs, and how you, as a DirectX developer, can effectively use this model in the development of your UWP app.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The important core user interface namespaces</source>
          <target state="new">The important core user interface namespaces</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>First, let's note the Windows Runtime namespaces that you must include (with <bpt id="p1">**</bpt>using<ept id="p1">**</ept>) in your UWP app.</source>
          <target state="new">First, let's note the Windows Runtime namespaces that you must include (with <bpt id="p1">**</bpt>using<ept id="p1">**</ept>) in your UWP app.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>We get into the details in a bit.</source>
          <target state="new">We get into the details in a bit.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Windows.ApplicationModel.Core</source>
          <target state="new">Windows.ApplicationModel.Core</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Windows.ApplicationModel.Activation</source>
          <target state="new">Windows.ApplicationModel.Activation</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Windows.UI.Core</source>
          <target state="new">Windows.UI.Core</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Windows.System</source>
          <target state="new">Windows.System</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Windows.Foundation</source>
          <target state="new">Windows.Foundation</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   If you are not developing a UWP app, use the user interface components provided in the JavaScript- or XAML-specific libraries and namespaces instead of the types provided in these namespaces.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   If you are not developing a UWP app, use the user interface components provided in the JavaScript- or XAML-specific libraries and namespaces instead of the types provided in these namespaces.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Windows Runtime app object</source>
          <target state="new">The Windows Runtime app object</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In your UWP app, you want to get a window and a view provider from which you can get a view and to which you can connect your swap chain (your display buffers).</source>
          <target state="new">In your UWP app, you want to get a window and a view provider from which you can get a view and to which you can connect your swap chain (your display buffers).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also hook this view into the window-specific events for your running app.</source>
          <target state="new">You can also hook this view into the window-specific events for your running app.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To get the parent window for the app object, defined by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> type, create a type that implements <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IFrameworkViewSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh700482)</ept>, as we did in the previous code snippet.</source>
          <target state="new">To get the parent window for the app object, defined by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> type, create a type that implements <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IFrameworkViewSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh700482)</ept>, as we did in the previous code snippet.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Here's the basic set of steps to get a window using the core user interface framework:</source>
          <target state="new">Here's the basic set of steps to get a window using the core user interface framework:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create a type that implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IFrameworkView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept>.</source>
          <target state="new">Create a type that implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IFrameworkView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is your view.</source>
          <target state="new">This is your view.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this type, define:</source>
          <target state="new">In this type, define:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700495)</ept> method that takes an instance of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreApplicationView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225017)</ept> as a parameter.</source>
          <target state="new">An <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700495)</ept> method that takes an instance of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreApplicationView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225017)</ept> as a parameter.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can get an instance of this type by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreApplication.CreateNewView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn297278)</ept>.</source>
          <target state="new">You can get an instance of this type by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreApplication.CreateNewView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn297278)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The app object calls it when the app is launched.</source>
          <target state="new">The app object calls it when the app is launched.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700509)</ept> method that takes an instance of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> as a parameter.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700509)</ept> method that takes an instance of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> as a parameter.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can get an instance of this type by accessing the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225019)</ept> property on your new <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreApplicationView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225017)</ept> instance.</source>
          <target state="new">You can get an instance of this type by accessing the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225019)</ept> property on your new <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreApplicationView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225017)</ept> instance.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Load<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700501)</ept> method that takes a string for an entry point as the sole parameter.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Load<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700501)</ept> method that takes a string for an entry point as the sole parameter.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The app object provides the entry point string when you call this method.</source>
          <target state="new">The app object provides the entry point string when you call this method.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is where you set up resources.</source>
          <target state="new">This is where you set up resources.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You create your device resources here.</source>
          <target state="new">You create your device resources here.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The app object calls it when the app is launched.</source>
          <target state="new">The app object calls it when the app is launched.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Run<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700505)</ept> method that activates the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object and starts the window event dispatcher.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Run<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700505)</ept> method that activates the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object and starts the window event dispatcher.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The app object calls it when the app's process starts.</source>
          <target state="new">The app object calls it when the app's process starts.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Uninitialize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700523)</ept> method that cleans up the resources set up in the call to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Load<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh700501)</ept>.</source>
          <target state="new">An <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Uninitialize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700523)</ept> method that cleans up the resources set up in the call to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Load<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh700501)</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The app object calls this method when the app is closed.</source>
          <target state="new">The app object calls this method when the app is closed.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Create a type that implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IFrameworkViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700482)</ept>.</source>
          <target state="new">Create a type that implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IFrameworkViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700482)</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is your view provider.</source>
          <target state="new">This is your view provider.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In this type, define:</source>
          <target state="new">In this type, define:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A method named <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700491)</ept> that returns an instance of your <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IFrameworkView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept> implementation, as created in Step 1.</source>
          <target state="new">A method named <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700491)</ept> that returns an instance of your <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IFrameworkView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept> implementation, as created in Step 1.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pass an instance of the view provider to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreApplication.Run<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700469)</ept> from <bpt id="p3">**</bpt>main<ept id="p3">**</ept>.</source>
          <target state="new">Pass an instance of the view provider to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreApplication.Run<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700469)</ept> from <bpt id="p3">**</bpt>main<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>With those basics in mind, let's look at more options you have to extend this approach.</source>
          <target state="new">With those basics in mind, let's look at more options you have to extend this approach.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Core user interface types</source>
          <target state="new">Core user interface types</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Here are other core user interface types in the Windows Runtime that you might find helpful:</source>
          <target state="new">Here are other core user interface types in the Windows Runtime that you might find helpful:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Windows.ApplicationModel.Core.CoreApplicationView</source>
          <target state="new">Windows.ApplicationModel.Core.CoreApplicationView</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Windows.UI.Core.CoreWindow</source>
          <target state="new">Windows.UI.Core.CoreWindow</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Windows.UI.Core.CoreDispatcher</source>
          <target state="new">Windows.UI.Core.CoreDispatcher</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can use these types to access your app's view, specifically, the bits that draw the contents of the app's parent window, and handle the events fired for that window.</source>
          <target state="new">You can use these types to access your app's view, specifically, the bits that draw the contents of the app's parent window, and handle the events fired for that window.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The app window's process is an <bpt id="p1">*</bpt>application single-threaded apartment<ept id="p1">*</ept> (ASTA) that is isolated and that handles all callbacks.</source>
          <target state="new">The app window's process is an <bpt id="p1">*</bpt>application single-threaded apartment<ept id="p1">*</ept> (ASTA) that is isolated and that handles all callbacks.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Your app's view is generated by the view provider for your app window, and in most cases will be implemented by a specific framework package or the system itself, so you don't need to implement it yourself.</source>
          <target state="new">Your app's view is generated by the view provider for your app window, and in most cases will be implemented by a specific framework package or the system itself, so you don't need to implement it yourself.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For DirectX, you need to implement a thin view provider, as discussed previously.</source>
          <target state="new">For DirectX, you need to implement a thin view provider, as discussed previously.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>There is a specific 1-to-1 relationship between the following components and behaviors:</source>
          <target state="new">There is a specific 1-to-1 relationship between the following components and behaviors:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An app's view, which is represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreApplicationView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225017)</ept> type, and which defines the method(s) for updating the window.</source>
          <target state="new">An app's view, which is represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreApplicationView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225017)</ept> type, and which defines the method(s) for updating the window.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An ASTA, the attribution of which defines the threading behavior of the app.</source>
          <target state="new">An ASTA, the attribution of which defines the threading behavior of the app.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You cannot create instances of COM STA-attributed types on an ASTA.</source>
          <target state="new">You cannot create instances of COM STA-attributed types on an ASTA.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A view provider, which your app obtains from the system or which you implement.</source>
          <target state="new">A view provider, which your app obtains from the system or which you implement.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A parent window, which is represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> type.</source>
          <target state="new">A parent window, which is represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> type.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Sourcing for all activation events.</source>
          <target state="new">Sourcing for all activation events.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Both views and windows have separate activation events.</source>
          <target state="new">Both views and windows have separate activation events.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In summary, the app object provides a view provider factory.</source>
          <target state="new">In summary, the app object provides a view provider factory.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It creates a view provider and instantiates a parent window for the app.</source>
          <target state="new">It creates a view provider and instantiates a parent window for the app.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The view provider defines the app's view for the parent window of the app.</source>
          <target state="new">The view provider defines the app's view for the parent window of the app.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Now, let's discuss the specifics of the view and the parent window.</source>
          <target state="new">Now, let's discuss the specifics of the view and the parent window.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CoreApplicationView behaviors and properties</source>
          <target state="new">CoreApplicationView behaviors and properties</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreApplicationView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225017)</ept> represents the current app view.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreApplicationView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225017)</ept> represents the current app view.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The app singleton creates the app view during initialization, but the view remains dormant until it is activated.</source>
          <target state="new">The app singleton creates the app view during initialization, but the view remains dormant until it is activated.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can get the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> that displays the view by accessing the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreApplicationView.CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225019)</ept> property on it, and you can handle activation and deactivation events for the view by registering delegates with the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>CoreApplicationView.Activated<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br225018)</ept> event.</source>
          <target state="new">You can get the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> that displays the view by accessing the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreApplicationView.CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225019)</ept> property on it, and you can handle activation and deactivation events for the view by registering delegates with the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>CoreApplicationView.Activated<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br225018)</ept> event.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CoreWindow behaviors and properties</source>
          <target state="new">CoreWindow behaviors and properties</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The parent window, which is a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> instance, is created and passed to the view provider when the app object initializes.</source>
          <target state="new">The parent window, which is a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> instance, is created and passed to the view provider when the app object initializes.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the app has a window to display, it displays it; otherwise, it simply initializes the view.</source>
          <target state="new">If the app has a window to display, it displays it; otherwise, it simply initializes the view.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> provides a number of events specific to input and basic window behaviors.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> provides a number of events specific to input and basic window behaviors.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can handle these events by registering your own delegates with them.</source>
          <target state="new">You can handle these events by registering your own delegates with them.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can also obtain the window event dispatcher for the window by accessing the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow.Dispatcher<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208264)</ept> property, which provides an instance of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreDispatcher<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept>.</source>
          <target state="new">You can also obtain the window event dispatcher for the window by accessing the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow.Dispatcher<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208264)</ept> property, which provides an instance of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreDispatcher<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept>.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CoreDispatcher behaviors and properties</source>
          <target state="new">CoreDispatcher behaviors and properties</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can determine the threading behavior of event dispatching for a window with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept> type.</source>
          <target state="new">You can determine the threading behavior of event dispatching for a window with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept> type.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>On this type, there's one particularly important method: the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher.ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> method, which starts window event processing.</source>
          <target state="new">On this type, there's one particularly important method: the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher.ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> method, which starts window event processing.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Calling this method with the wrong option for your app can lead to all sorts of unexpected event processing behaviors.</source>
          <target state="new">Calling this method with the wrong option for your app can lead to all sorts of unexpected event processing behaviors.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CoreProcessEventsOption option</source>
          <target state="new">CoreProcessEventsOption option</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CoreProcessEventsOption.ProcessOneAndAllPending</source>
          <target state="new">CoreProcessEventsOption.ProcessOneAndAllPending</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Dispatch all currently available events in the queue.</source>
          <target state="new">Dispatch all currently available events in the queue.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If no events are pending, wait for the next new event.</source>
          <target state="new">If no events are pending, wait for the next new event.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CoreProcessEventsOption.ProcessOneIfPresent</source>
          <target state="new">CoreProcessEventsOption.ProcessOneIfPresent</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Dispatch one event if it is pending in the queue.</source>
          <target state="new">Dispatch one event if it is pending in the queue.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If no events are pending, don't wait for a new event to be raised but instead return immediately.</source>
          <target state="new">If no events are pending, don't wait for a new event to be raised but instead return immediately.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CoreProcessEventsOption.ProcessUntilQuit</source>
          <target state="new">CoreProcessEventsOption.ProcessUntilQuit</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Wait for new events and dispatch all available events.</source>
          <target state="new">Wait for new events and dispatch all available events.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Continue this behavior until the window is closed or the application calls the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Close<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208260)</ept> method on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> instance.</source>
          <target state="new">Continue this behavior until the window is closed or the application calls the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Close<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208260)</ept> method on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> instance.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CoreProcessEventsOption.ProcessAllIfPresent</source>
          <target state="new">CoreProcessEventsOption.ProcessAllIfPresent</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Dispatch all currently available events in the queue.</source>
          <target state="new">Dispatch all currently available events in the queue.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If no events are pending, return immediately.</source>
          <target state="new">If no events are pending, return immediately.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>UWP using DirectX should use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreProcessEventsOption.ProcessAllIfPresent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208217)</ept> option to prevent blocking behaviors that might interrupt graphics updates.</source>
          <target state="new">UWP using DirectX should use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreProcessEventsOption.ProcessAllIfPresent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208217)</ept> option to prevent blocking behaviors that might interrupt graphics updates.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>ASTA considerations for DirectX devs</source>
          <target state="new">ASTA considerations for DirectX devs</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The app object that defines the run-time representation of yourUWP and DirectX app uses a threading model called Application Single-Threaded Apartment (ASTA) to host your app’s UI views.</source>
          <target state="new">The app object that defines the run-time representation of yourUWP and DirectX app uses a threading model called Application Single-Threaded Apartment (ASTA) to host your app’s UI views.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you are developing a UWP and DirectX app, you're familiar with the properties of an ASTA, because any thread you dispatch from your UWP and DirectX app must use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::System::Threading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br229642)</ept> APIs, or use <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::CoreDispatcher<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept>.</source>
          <target state="new">If you are developing a UWP and DirectX app, you're familiar with the properties of an ASTA, because any thread you dispatch from your UWP and DirectX app must use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::System::Threading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br229642)</ept> APIs, or use <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::CoreDispatcher<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>(You can get the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object for the ASTA by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::GetForCurrentThread<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept> from your app.)</source>
          <target state="new">(You can get the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object for the ASTA by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::GetForCurrentThread<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept> from your app.)</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The most important thing for you to be aware of, as a developer of a UWP DirectX app, is that you must enable your app thread to dispatch MTA threads by setting <bpt id="p1">**</bpt>Platform::MTAThread<ept id="p1">**</ept> on <bpt id="p2">**</bpt>main()<ept id="p2">**</ept>.</source>
          <target state="new">The most important thing for you to be aware of, as a developer of a UWP DirectX app, is that you must enable your app thread to dispatch MTA threads by setting <bpt id="p1">**</bpt>Platform::MTAThread<ept id="p1">**</ept> on <bpt id="p2">**</bpt>main()<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When the app object for your UWP DirectX app activates, it creates the ASTA that will be used for the UI view.</source>
          <target state="new">When the app object for your UWP DirectX app activates, it creates the ASTA that will be used for the UI view.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The new ASTA thread calls into your view provider factory, to create the view provider for your app object, and as a result, your view provider code will run on that ASTA thread.</source>
          <target state="new">The new ASTA thread calls into your view provider factory, to create the view provider for your app object, and as a result, your view provider code will run on that ASTA thread.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Also, any thread that you spin off from the ASTA must be in an MTA.</source>
          <target state="new">Also, any thread that you spin off from the ASTA must be in an MTA.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Be aware that any MTA threads that you spin off can still create reentrancy issues and result in a deadlock.</source>
          <target state="new">Be aware that any MTA threads that you spin off can still create reentrancy issues and result in a deadlock.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If you're porting existing code to run on the ASTA thread, keep these considerations in mind:</source>
          <target state="new">If you're porting existing code to run on the ASTA thread, keep these considerations in mind:</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Wait primitives, such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoWaitForMultipleObjects<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404144)</ept>, behave differently in an ASTA than in an STA.</source>
          <target state="new">Wait primitives, such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoWaitForMultipleObjects<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404144)</ept>, behave differently in an ASTA than in an STA.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The COM call modal loop operates differently in an ASTA.</source>
          <target state="new">The COM call modal loop operates differently in an ASTA.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can no longer receive unrelated calls while an outgoing call is in progress.</source>
          <target state="new">You can no longer receive unrelated calls while an outgoing call is in progress.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For example, the following behavior will create a deadlock from an ASTA (and immediately crash the app):</source>
          <target state="new">For example, the following behavior will create a deadlock from an ASTA (and immediately crash the app):</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The ASTA calls an MTA object and passes an interface pointer P1.</source>
          <target state="new">The ASTA calls an MTA object and passes an interface pointer P1.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Later, the ASTA calls the same MTA object.</source>
          <target state="new">Later, the ASTA calls the same MTA object.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The MTA object calls P1 before it returns to the ASTA.</source>
          <target state="new">The MTA object calls P1 before it returns to the ASTA.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>P1 cannot enter the ASTA as it's blocked making an unrelated call.</source>
          <target state="new">P1 cannot enter the ASTA as it's blocked making an unrelated call.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>However, the MTA thread is blocked as it tries to make the call to P1.</source>
          <target state="new">However, the MTA thread is blocked as it tries to make the call to P1.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can resolve this by :</source>
          <target state="new">You can resolve this by :</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>async<ept id="p1">**</ept> pattern defined in the Parallel Patterns Library (PPLTasks.h)</source>
          <target state="new">Using the <bpt id="p1">**</bpt>async<ept id="p1">**</ept> pattern defined in the Parallel Patterns Library (PPLTasks.h)</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher::ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> from your app's ASTA (the main thread of your app) as soon as possible to allow arbitrary calls.</source>
          <target state="new">Calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher::ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> from your app's ASTA (the main thread of your app) as soon as possible to allow arbitrary calls.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>That said, you cannot rely on immediate delivery of unrelated calls to your app's ASTA.</source>
          <target state="new">That said, you cannot rely on immediate delivery of unrelated calls to your app's ASTA.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For more info about async calls, read <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.</source>
          <target state="new">For more info about async calls, read <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Overall, when designing your UWP app, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept> for your app's <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>CoreDispatcher::ProcessEvents<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> to handle all UI threads rather than trying to create and manage your MTA threads yourself.</source>
          <target state="new">Overall, when designing your UWP app, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept> for your app's <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>CoreDispatcher::ProcessEvents<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> to handle all UI threads rather than trying to create and manage your MTA threads yourself.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When you need a separate thread that you cannot handle with the <bpt id="p1">**</bpt>CoreDispatcher<ept id="p1">**</ept>, use async patterns and follow the guidance mentioned earlier to avoid reentrancy issues.</source>
          <target state="new">When you need a separate thread that you cannot handle with the <bpt id="p1">**</bpt>CoreDispatcher<ept id="p1">**</ept>, use async patterns and follow the guidance mentioned earlier to avoid reentrancy issues.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>