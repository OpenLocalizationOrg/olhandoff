<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\devices-sensors\3d-printing.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cff85c5a2446c6c16faba670ad43135a8be6afc7</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>3D printing from your app</source>
          <target state="new">3D printing from your app</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to add 3D printing functionality to your Universal Windows app.</source>
          <target state="new">Learn how to add 3D printing functionality to your Universal Windows app.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic covers how to launch the 3D print dialog after ensuring your 3D model is printable and in the correct format.</source>
          <target state="new">This topic covers how to launch the 3D print dialog after ensuring your 3D model is printable and in the correct format.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>3D printing from your app</source>
          <target state="new">3D printing from your app</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Windows.Graphics.Printing3D</source>
          <target state="new">Windows.Graphics.Printing3D</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Learn how to add 3D printing functionality to your Universal Windows app.</source>
          <target state="new">Learn how to add 3D printing functionality to your Universal Windows app.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic covers how to launch the 3D print dialog after ensuring your 3D model is printable and in the correct format.</source>
          <target state="new">This topic covers how to launch the 3D print dialog after ensuring your 3D model is printable and in the correct format.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Class setup</source>
          <target state="new">Class setup</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In your class that is to have 3D print functionality, add the <bpt id="p1">[</bpt>Windows.Graphics.Printing3D<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn998169)</ept> namespace.</source>
          <target state="new">In your class that is to have 3D print functionality, add the <bpt id="p1">[</bpt>Windows.Graphics.Printing3D<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn998169)</ept> namespace.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>3DPrintNamespace</source>
          <target state="new">3DPrintNamespace</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following additional namespaces will be used in this particular guide:</source>
          <target state="new">The following additional namespaces will be used in this particular guide:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>OtherNamespaces</source>
          <target state="new">OtherNamespaces</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Next, give your class some helpful member fields.</source>
          <target state="new">Next, give your class some helpful member fields.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Declare a <bpt id="p1">[</bpt>Print3DTask<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn998044)</ept> object to serve as a reference to the printing task that is to be passed to the print driver.</source>
          <target state="new">Declare a <bpt id="p1">[</bpt>Print3DTask<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn998044)</ept> object to serve as a reference to the printing task that is to be passed to the print driver.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Declare a <bpt id="p1">[</bpt>StorageFile<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227171)</ept> object to hold the original 3D data file.</source>
          <target state="new">Declare a <bpt id="p1">[</bpt>StorageFile<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227171)</ept> object to hold the original 3D data file.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Finally, declare a <bpt id="p1">[</bpt>Printing3D3MFPackage<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn998063)</ept> object, which represents a print-ready 3D model with all necessary metadata.</source>
          <target state="new">Finally, declare a <bpt id="p1">[</bpt>Printing3D3MFPackage<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn998063)</ept> object, which represents a print-ready 3D model with all necessary metadata.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>DeclareVars</source>
          <target state="new">DeclareVars</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create a simple UI</source>
          <target state="new">Create a simple UI</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This sample uses three user controls: a load button which will bring a file into program memory, a fix button which will modify the file as necessary, and a print button which will initiate the printing job.</source>
          <target state="new">This sample uses three user controls: a load button which will bring a file into program memory, a fix button which will modify the file as necessary, and a print button which will initiate the printing job.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following code generates these buttons (with their click event handlers) in your class' XAML file:</source>
          <target state="new">The following code generates these buttons (with their click event handlers) in your class' XAML file:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Buttons</source>
          <target state="new">Buttons</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> for UI feedback.</source>
          <target state="new">Add a <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> for UI feedback.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>OutputText</source>
          <target state="new">OutputText</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Get the 3D data</source>
          <target state="new">Get the 3D data</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The method by which your app acquires 3D geometry data to print will vary.</source>
          <target state="new">The method by which your app acquires 3D geometry data to print will vary.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Your app may retrieve data from a 3D scan, pull model data from a web resource, or generate a 3D mesh programmatically using equations.</source>
          <target state="new">Your app may retrieve data from a 3D scan, pull model data from a web resource, or generate a 3D mesh programmatically using equations.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For the sake of simplicity, this guide will load a 3D data file (of any of several common file types) into program memory from File Explorer.</source>
          <target state="new">For the sake of simplicity, this guide will load a 3D data file (of any of several common file types) into program memory from File Explorer.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In your <ph id="ph1">`OnLoadClick`</ph> method, use the <bpt id="p1">[</bpt>FileOpenPicker<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207847)</ept> class to load a single file into your app's memory.</source>
          <target state="new">In your <ph id="ph1">`OnLoadClick`</ph> method, use the <bpt id="p1">[</bpt>FileOpenPicker<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207847)</ept> class to load a single file into your app's memory.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>FileLoad</source>
          <target state="new">FileLoad</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use 3D Builder to convert to 3D Manufacturing Format (.3mf)</source>
          <target state="new">Use 3D Builder to convert to 3D Manufacturing Format (.3mf)</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>At this point, you are able to load a 3D data file into your app's memory.</source>
          <target state="new">At this point, you are able to load a 3D data file into your app's memory.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, 3D geometry data comes in many different formats, and not all are efficient for 3D printing.</source>
          <target state="new">However, 3D geometry data comes in many different formats, and not all are efficient for 3D printing.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Windows 10 uses the 3D Manufacturing Format (.3mf) file type for all 3D Printing tasks.</source>
          <target state="new">Windows 10 uses the 3D Manufacturing Format (.3mf) file type for all 3D Printing tasks.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The 3MF file type offers a great deal of functionality not covered in this tutorial.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The 3MF file type offers a great deal of functionality not covered in this tutorial.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To learn more about 3MF and the features it provides to producers and consumers of 3D products, refer to the <bpt id="p1">[</bpt>3MF Specification<ept id="p1">](http://3mf.io/what-is-3mf/3mf-specification/)</ept>.</source>
          <target state="new">To learn more about 3MF and the features it provides to producers and consumers of 3D products, refer to the <bpt id="p1">[</bpt>3MF Specification<ept id="p1">](http://3mf.io/what-is-3mf/3mf-specification/)</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Fortunately, the <bpt id="p1">[</bpt>3D Builder<ept id="p1">](https://www.microsoft.com/store/apps/3d-builder/9wzdncrfj3t6)</ept> app can open files of most popular 3D formats and save them as .3mf files.</source>
          <target state="new">Fortunately, the <bpt id="p1">[</bpt>3D Builder<ept id="p1">](https://www.microsoft.com/store/apps/3d-builder/9wzdncrfj3t6)</ept> app can open files of most popular 3D formats and save them as .3mf files.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this example, where the file type may vary, a very simple solution is to open 3D Builder and prompt the user to save the imported data as a .3mf file and then reload it.</source>
          <target state="new">In this example, where the file type may vary, a very simple solution is to open 3D Builder and prompt the user to save the imported data as a .3mf file and then reload it.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  In addition to converting file formats, <bpt id="p2">**</bpt>3D Builder<ept id="p2">**</ept> provides simple tools to edit your models, add color data, and perform other print-specific operations, so it is often worth integrating into an app that deals with 3D printing.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  In addition to converting file formats, <bpt id="p2">**</bpt>3D Builder<ept id="p2">**</ept> provides simple tools to edit your models, add color data, and perform other print-specific operations, so it is often worth integrating into an app that deals with 3D printing.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>FileCheck</source>
          <target state="new">FileCheck</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Repair model data for 3D printing</source>
          <target state="new">Repair model data for 3D printing</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Not all 3D model data is able to be printed, even in .3mf format.</source>
          <target state="new">Not all 3D model data is able to be printed, even in .3mf format.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In order for the printer to correctly determine what space to fill and what to leave empty, the model(s) to be printed must be a single seamless mess, have outward-facing surface normals, and have manifold geometry.</source>
          <target state="new">In order for the printer to correctly determine what space to fill and what to leave empty, the model(s) to be printed must be a single seamless mess, have outward-facing surface normals, and have manifold geometry.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Issues in these areas can crop up in a variety of different forms and can be hard to spot in complex shapes.</source>
          <target state="new">Issues in these areas can crop up in a variety of different forms and can be hard to spot in complex shapes.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Fortunately, current software solutions are often adequate for converting raw geometry to printable 3D shapes.</source>
          <target state="new">Fortunately, current software solutions are often adequate for converting raw geometry to printable 3D shapes.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This will be done in the <ph id="ph1">`OnFixClick`</ph> method.</source>
          <target state="new">This will be done in the <ph id="ph1">`OnFixClick`</ph> method.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The 3D data file must be converted to implement <bpt id="p1">[</bpt>IRandomAccessStream<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241731)</ept>, which can then be used to generate a <bpt id="p2">[</bpt>Printing3DModel<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt203679)</ept> object.</source>
          <target state="new">The 3D data file must be converted to implement <bpt id="p1">[</bpt>IRandomAccessStream<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241731)</ept>, which can then be used to generate a <bpt id="p2">[</bpt>Printing3DModel<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt203679)</ept> object.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>RepairModel</source>
          <target state="new">RepairModel</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Printing3DModel<ept id="p1">**</ept> object is now repaired and printable.</source>
          <target state="new">The <bpt id="p1">**</bpt>Printing3DModel<ept id="p1">**</ept> object is now repaired and printable.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>SaveModelToPackageAsync<ept id="p1">**</ept> to assign the model to the Printing3D3MFPackage object you declared when creating the class.</source>
          <target state="new">Use <bpt id="p1">**</bpt>SaveModelToPackageAsync<ept id="p1">**</ept> to assign the model to the Printing3D3MFPackage object you declared when creating the class.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>SaveModel</source>
          <target state="new">SaveModel</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Execute printing task: create a TaskRequested handler</source>
          <target state="new">Execute printing task: create a TaskRequested handler</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Later on, when the 3D print dialog is displayed to the user and the user elects to begin printing, your app will need to pass in the desired parameters to the 3D print pipeline.</source>
          <target state="new">Later on, when the 3D print dialog is displayed to the user and the user elects to begin printing, your app will need to pass in the desired parameters to the 3D print pipeline.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The 3D print API will raise the <bpt id="p1">**</bpt>TaskRequested<ept id="p1">**</ept> event.</source>
          <target state="new">The 3D print API will raise the <bpt id="p1">**</bpt>TaskRequested<ept id="p1">**</ept> event.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You must write a method to handle this event appropriately.</source>
          <target state="new">You must write a method to handle this event appropriately.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>As always, it must be of the same type as its event: The <bpt id="p1">**</bpt>TaskRequested<ept id="p1">**</ept> event has parameters <bpt id="p2">[</bpt>Print3DManager<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn998029)</ept> (its sender object) and a <bpt id="p3">[</bpt>Print3DTaskRequestedEventArgs<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn998051)</ept> object, which holds most of the relevant information.</source>
          <target state="new">As always, it must be of the same type as its event: The <bpt id="p1">**</bpt>TaskRequested<ept id="p1">**</ept> event has parameters <bpt id="p2">[</bpt>Print3DManager<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn998029)</ept> (its sender object) and a <bpt id="p3">[</bpt>Print3DTaskRequestedEventArgs<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn998051)</ept> object, which holds most of the relevant information.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Its return type is <bpt id="p1">**</bpt>void<ept id="p1">**</ept>.</source>
          <target state="new">Its return type is <bpt id="p1">**</bpt>void<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>MyTaskTitle</source>
          <target state="new">MyTaskTitle</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The core purpose of this method is to use the <bpt id="p1">*</bpt>args<ept id="p1">*</ept> object to send a <bpt id="p2">**</bpt>Printing3D3MFPackage<ept id="p2">**</ept> down the pipeline.</source>
          <target state="new">The core purpose of this method is to use the <bpt id="p1">*</bpt>args<ept id="p1">*</ept> object to send a <bpt id="p2">**</bpt>Printing3D3MFPackage<ept id="p2">**</ept> down the pipeline.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Print3DTaskRequestedEventArgs<ept id="p1">**</ept> type has one property: <bpt id="p2">**</bpt>Request<ept id="p2">**</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>Print3DTaskRequestedEventArgs<ept id="p1">**</ept> type has one property: <bpt id="p2">**</bpt>Request<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It is of the type <bpt id="p1">[</bpt>Print3DTaskRequest<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn998050)</ept> and represents one print job request.</source>
          <target state="new">It is of the type <bpt id="p1">[</bpt>Print3DTaskRequest<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn998050)</ept> and represents one print job request.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Its method <bpt id="p1">**</bpt>CreateTask<ept id="p1">**</ept> allows the program to submit the right information for your print job, and it returns a reference to the <bpt id="p2">[</bpt>Print3DTask<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn998044)</ept> object which is sent down the 3D print pipeline.</source>
          <target state="new">Its method <bpt id="p1">**</bpt>CreateTask<ept id="p1">**</ept> allows the program to submit the right information for your print job, and it returns a reference to the <bpt id="p2">[</bpt>Print3DTask<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn998044)</ept> object which is sent down the 3D print pipeline.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CreateTask<ept id="p1">**</ept> has the following input parameters: A <bpt id="p2">**</bpt>string<ept id="p2">**</ept> for the print job name, a <bpt id="p3">**</bpt>string<ept id="p3">**</ept> for the ID of the printer to use, and a <bpt id="p4">**</bpt>Print3DTaskSourceRequestedHandler<ept id="p4">**</ept> delegate.</source>
          <target state="new"><bpt id="p1">**</bpt>CreateTask<ept id="p1">**</ept> has the following input parameters: A <bpt id="p2">**</bpt>string<ept id="p2">**</ept> for the print job name, a <bpt id="p3">**</bpt>string<ept id="p3">**</ept> for the ID of the printer to use, and a <bpt id="p4">**</bpt>Print3DTaskSourceRequestedHandler<ept id="p4">**</ept> delegate.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The delegate is automatically invoked when the <bpt id="p1">**</bpt>3DTaskSourceRequested<ept id="p1">**</ept> event is raised (this is done by the API itself).</source>
          <target state="new">The delegate is automatically invoked when the <bpt id="p1">**</bpt>3DTaskSourceRequested<ept id="p1">**</ept> event is raised (this is done by the API itself).</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The important thing to note is that this delegate is invoked when a print job is initiated, and it is responsible for providing the right 3D print package.</source>
          <target state="new">The important thing to note is that this delegate is invoked when a print job is initiated, and it is responsible for providing the right 3D print package.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Print3DTaskSourceRequestedHandler<ept id="p1">**</ept> takes one parameter, a <bpt id="p2">[</bpt>Print3DTaskSourceRequestedArgs<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn998056)</ept> object which provides the data to be sent.</source>
          <target state="new"><bpt id="p1">**</bpt>Print3DTaskSourceRequestedHandler<ept id="p1">**</ept> takes one parameter, a <bpt id="p2">[</bpt>Print3DTaskSourceRequestedArgs<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn998056)</ept> object which provides the data to be sent.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The one public method of this class, <bpt id="p1">**</bpt>SetSource<ept id="p1">**</ept>, accepts the package to be printed.</source>
          <target state="new">The one public method of this class, <bpt id="p1">**</bpt>SetSource<ept id="p1">**</ept>, accepts the package to be printed.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Implement a <bpt id="p1">**</bpt>Print3DTaskSourceRequestedHandler<ept id="p1">**</ept> delegate as follows:</source>
          <target state="new">Implement a <bpt id="p1">**</bpt>Print3DTaskSourceRequestedHandler<ept id="p1">**</ept> delegate as follows:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>SourceHandler</source>
          <target state="new">SourceHandler</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Next, call <bpt id="p1">**</bpt>CreateTask<ept id="p1">**</ept>, using the newly-defined delegate <ph id="ph1">`sourceHandler`</ph>:</source>
          <target state="new">Next, call <bpt id="p1">**</bpt>CreateTask<ept id="p1">**</ept>, using the newly-defined delegate <ph id="ph1">`sourceHandler`</ph>:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CreateTask</source>
          <target state="new">CreateTask</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The returned <bpt id="p1">**</bpt>Print3DTask<ept id="p1">**</ept> is assigned to the class variable declared in the beginning.</source>
          <target state="new">The returned <bpt id="p1">**</bpt>Print3DTask<ept id="p1">**</ept> is assigned to the class variable declared in the beginning.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can now (optionally) use this reference to handle certain events thrown by the task:</source>
          <target state="new">You can now (optionally) use this reference to handle certain events thrown by the task:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="new">Optional</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You must implement a <ph id="ph1">`Task_Submitting`</ph> and <ph id="ph2">`Task_Completed`</ph> method if you wish to register them to these events.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You must implement a <ph id="ph1">`Task_Submitting`</ph> and <ph id="ph2">`Task_Completed`</ph> method if you wish to register them to these events.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Execute printing task: open 3D print dialog</source>
          <target state="new">Execute printing task: open 3D print dialog</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The final bit of code needed to print from your app is that which launches the 3D print dialog.</source>
          <target state="new">The final bit of code needed to print from your app is that which launches the 3D print dialog.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Like a conventional printing dialog window, the 3D print dialog provides a number of last-minute printing specifications and allows the user to choose which printer to use (whether connected via USB or the network).</source>
          <target state="new">Like a conventional printing dialog window, the 3D print dialog provides a number of last-minute printing specifications and allows the user to choose which printer to use (whether connected via USB or the network).</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>First, register your <ph id="ph1">`MyTaskRequested`</ph> method with the <bpt id="p1">**</bpt>TaskRequested<ept id="p1">**</ept> event.</source>
          <target state="new">First, register your <ph id="ph1">`MyTaskRequested`</ph> method with the <bpt id="p1">**</bpt>TaskRequested<ept id="p1">**</ept> event.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>RegisterMyTaskRequested</source>
          <target state="new">RegisterMyTaskRequested</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After registering your <bpt id="p1">**</bpt>TaskRequested<ept id="p1">**</ept> event handler, you can invoke the method <bpt id="p2">**</bpt>ShowPrintUIAsync<ept id="p2">**</ept>, which brings up the 3D print dialog in the current application window.</source>
          <target state="new">After registering your <bpt id="p1">**</bpt>TaskRequested<ept id="p1">**</ept> event handler, you can invoke the method <bpt id="p2">**</bpt>ShowPrintUIAsync<ept id="p2">**</ept>, which brings up the 3D print dialog in the current application window.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>ShowDialog</source>
          <target state="new">ShowDialog</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Finally, it is a good practice to de-register your event handlers once your app resumes control: <bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>DeregisterMyTaskRequested<ept id="p2">](./code/3dprinthowto/cs/MainPage.xaml.cs#SnippetDeregisterMyTaskRequested)</ept><ept id="p1">]</ept></source>
          <target state="new">Finally, it is a good practice to de-register your event handlers once your app resumes control: <bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>DeregisterMyTaskRequested<ept id="p2">](./code/3dprinthowto/cs/MainPage.xaml.cs#SnippetDeregisterMyTaskRequested)</ept><ept id="p1">]</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>