<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\layout\custom-panels-overview.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05654e371c417363d4ef17f5636e6c5bfcdd4515</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You can define custom panels for XAML layout by deriving a custom class from the Panel class.</source>
          <target state="new">You can define custom panels for XAML layout by deriving a custom class from the Panel class.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAML custom panels overview</source>
          <target state="new">XAML custom panels overview</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XAML custom panels overview</source>
          <target state="new">XAML custom panels overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>panel<ept id="p1">*</ept> is an object that provides a layout behavior for child elements it contains, when the Extensible Application Markup Language (XAML) layout system runs and your app UI is rendered.</source>
          <target state="new">A <bpt id="p1">*</bpt>panel<ept id="p1">*</ept> is an object that provides a layout behavior for child elements it contains, when the Extensible Application Markup Language (XAML) layout system runs and your app UI is rendered.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can define custom panels for XAML layout by deriving a custom class from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> class.</source>
          <target state="new">You can define custom panels for XAML layout by deriving a custom class from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> class.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You provide behavior for your panel by overriding the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept>, supplying logic that measures and arranges the child elements.</source>
          <target state="new">You provide behavior for your panel by overriding the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept>, supplying logic that measures and arranges the child elements.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept> base class</source>
          <target state="new">The <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept> base class</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To define a custom panel class, you can either derive from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> class directly, or derive from one of the practical panel classes that aren't sealed, such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>StackPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209635)</ept>.</source>
          <target state="new">To define a custom panel class, you can either derive from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> class directly, or derive from one of the practical panel classes that aren't sealed, such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>StackPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209635)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It's easier to derive from <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept>, because it can be difficult to work around the existing layout logic of a panel that already has layout behavior.</source>
          <target state="new">It's easier to derive from <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept>, because it can be difficult to work around the existing layout logic of a panel that already has layout behavior.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Also, a panel with behavior might have existing properties that aren't relevant for your panel's layout features.</source>
          <target state="new">Also, a panel with behavior might have existing properties that aren't relevant for your panel's layout features.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>From <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept>, your custom panel inherits these APIs:</source>
          <target state="new">From <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept>, your custom panel inherits these APIs:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Background<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227512)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ChildrenTransitions<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227515)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IsItemsHost<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br227517)</ept> properties, and the dependency property identifiers.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Background<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227512)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ChildrenTransitions<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227515)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IsItemsHost<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br227517)</ept> properties, and the dependency property identifiers.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>None of these properties are virtual, so you don't typically override or replace them.</source>
          <target state="new">None of these properties are virtual, so you don't typically override or replace them.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You don't typically need these properties for custom panel scenarios, not even for reading values.</source>
          <target state="new">You don't typically need these properties for custom panel scenarios, not even for reading values.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The layout override methods <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept>.</source>
          <target state="new">The layout override methods <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These were originally defined by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>.</source>
          <target state="new">These were originally defined by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The base <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> class doesn't override these, but practical panels like <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> do have override implementations that are implemented as native code and are run by the system.</source>
          <target state="new">The base <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> class doesn't override these, but practical panels like <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> do have override implementations that are implemented as native code and are run by the system.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Providing new (or additive) implementations for <bpt id="p1">**</bpt>ArrangeOverride<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept> is the bulk of the effort you need to define a custom panel.</source>
          <target state="new">Providing new (or additive) implementations for <bpt id="p1">**</bpt>ArrangeOverride<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept> is the bulk of the effort you need to define a custom panel.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>All the other APIs of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>UIElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>DependencyObject<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>, such as <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Height<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>Visibility<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/br208992)</ept> and so on.</source>
          <target state="new">All the other APIs of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>UIElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>DependencyObject<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>, such as <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Height<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>Visibility<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/br208992)</ept> and so on.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You sometimes reference values of these properties in your layout overrides, but they aren't virtual so you don't typically override or replace them.</source>
          <target state="new">You sometimes reference values of these properties in your layout overrides, but they aren't virtual so you don't typically override or replace them.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This focus here is to describe XAML layout concepts, so you can consider all the possibilities for how a custom panel can and should behave in layout.</source>
          <target state="new">This focus here is to describe XAML layout concepts, so you can consider all the possibilities for how a custom panel can and should behave in layout.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you'd rather jump right in and see an example custom panel implementation, see <bpt id="p1">[</bpt>BoxPanel, an example custom panel<ept id="p1">](boxpanel-example-custom-panel.md)</ept>.</source>
          <target state="new">If you'd rather jump right in and see an example custom panel implementation, see <bpt id="p1">[</bpt>BoxPanel, an example custom panel<ept id="p1">](boxpanel-example-custom-panel.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Children<ept id="p1">**</ept> property</source>
          <target state="new">The <bpt id="p1">**</bpt>Children<ept id="p1">**</ept> property</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property is relevant to a custom panel because all classes derived from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Panel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> use the <bpt id="p5">**</bpt>Children<ept id="p5">**</ept> property as the place to store their contained child elements in a collection.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property is relevant to a custom panel because all classes derived from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Panel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> use the <bpt id="p5">**</bpt>Children<ept id="p5">**</ept> property as the place to store their contained child elements in a collection.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Children<ept id="p1">**</ept> is designated as the XAML content property for the <bpt id="p2">**</bpt>Panel<ept id="p2">**</ept> class, and all classes derived from <bpt id="p3">**</bpt>Panel<ept id="p3">**</ept> can inherit the XAML content property behavior.</source>
          <target state="new"><bpt id="p1">**</bpt>Children<ept id="p1">**</ept> is designated as the XAML content property for the <bpt id="p2">**</bpt>Panel<ept id="p2">**</ept> class, and all classes derived from <bpt id="p3">**</bpt>Panel<ept id="p3">**</ept> can inherit the XAML content property behavior.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If a property is designated the XAML content property, that means that XAML markup can omit a property element when specifying that property in markup, and the values are set as immediate markup children (the "content").</source>
          <target state="new">If a property is designated the XAML content property, that means that XAML markup can omit a property element when specifying that property in markup, and the values are set as immediate markup children (the "content").</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, if you derive a class named <bpt id="p1">**</bpt>CustomPanel<ept id="p1">**</ept> from <bpt id="p2">**</bpt>Panel<ept id="p2">**</ept> that defines no new behavior, you can still use this markup:</source>
          <target state="new">For example, if you derive a class named <bpt id="p1">**</bpt>CustomPanel<ept id="p1">**</ept> from <bpt id="p2">**</bpt>Panel<ept id="p2">**</ept> that defines no new behavior, you can still use this markup:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When a XAML parser reads this markup, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> is known to be the XAML content property for all <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Panel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> derived types, so the parser will add the two <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Button<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> elements to the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>UIElementCollection<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br227633)</ept> value of the <bpt id="p9">**</bpt>Children<ept id="p9">**</ept> property.</source>
          <target state="new">When a XAML parser reads this markup, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> is known to be the XAML content property for all <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Panel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> derived types, so the parser will add the two <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Button<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> elements to the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>UIElementCollection<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br227633)</ept> value of the <bpt id="p9">**</bpt>Children<ept id="p9">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The XAML content property facilitates a streamlined parent-child relationship in the XAML markup for a UI definition.</source>
          <target state="new">The XAML content property facilitates a streamlined parent-child relationship in the XAML markup for a UI definition.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more info about XAML content properties, and how collection properties are populated when XAML is parsed, see the <bpt id="p1">[</bpt>XAML syntax guide<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185596)</ept>.</source>
          <target state="new">For more info about XAML content properties, and how collection properties are populated when XAML is parsed, see the <bpt id="p1">[</bpt>XAML syntax guide<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185596)</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The collection type that's maintaining the value of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property is the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>UIElementCollection<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227633)</ept> class.</source>
          <target state="new">The collection type that's maintaining the value of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property is the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>UIElementCollection<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227633)</ept> class.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UIElementCollection<ept id="p1">**</ept> is a strongly typed collection that uses <bpt id="p2">[</bpt><bpt id="p3">**</bpt>UIElement<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> as its enforced item type.</source>
          <target state="new"><bpt id="p1">**</bpt>UIElementCollection<ept id="p1">**</ept> is a strongly typed collection that uses <bpt id="p2">[</bpt><bpt id="p3">**</bpt>UIElement<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> as its enforced item type.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UIElement<ept id="p1">**</ept> is a base type that's inherited by hundreds of practical UI element types, so the type enforcement here is deliberately loose.</source>
          <target state="new"><bpt id="p1">**</bpt>UIElement<ept id="p1">**</ept> is a base type that's inherited by hundreds of practical UI element types, so the type enforcement here is deliberately loose.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>But it does enforce that you couldn't have a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Brush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> as a direct child of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Panel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept>, and it generally means that only elements that are expected to be visible in UI and participate in layout will be found as child elements in a <bpt id="p5">**</bpt>Panel<ept id="p5">**</ept>.</source>
          <target state="new">But it does enforce that you couldn't have a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Brush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> as a direct child of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Panel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept>, and it generally means that only elements that are expected to be visible in UI and participate in layout will be found as child elements in a <bpt id="p5">**</bpt>Panel<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Typically, a custom panel accepts any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> child element by a XAML definition, by simply using the characteristics of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Children<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property as-is.</source>
          <target state="new">Typically, a custom panel accepts any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> child element by a XAML definition, by simply using the characteristics of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Children<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property as-is.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, you could support further type checking of child elements, when you iterate over the collection in your layout overrides.</source>
          <target state="new">As an advanced scenario, you could support further type checking of child elements, when you iterate over the collection in your layout overrides.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Besides looping through the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> collection in the overrides, your panel logic might also be influenced by <ph id="ph1">`Children.Count`</ph>.</source>
          <target state="new">Besides looping through the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> collection in the overrides, your panel logic might also be influenced by <ph id="ph1">`Children.Count`</ph>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You might have logic that is allocating space at least partly based on the number of items, rather than desired sizes and the other characteristics of individual items.</source>
          <target state="new">You might have logic that is allocating space at least partly based on the number of items, rather than desired sizes and the other characteristics of individual items.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Overriding the layout methods</source>
          <target state="new">Overriding the layout methods</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The basic model for the layout override methods (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept>) is that they should iterate through all the children and call each child element's specific layout method.</source>
          <target state="new">The basic model for the layout override methods (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept>) is that they should iterate through all the children and call each child element's specific layout method.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The first layout cycle starts when the XAML layout system sets the visual for the root window.</source>
          <target state="new">The first layout cycle starts when the XAML layout system sets the visual for the root window.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Because each parent invokes layout on its children, this propagates a call to layout methods to every possible UI element that is supposed to be part of a layout.</source>
          <target state="new">Because each parent invokes layout on its children, this propagates a call to layout methods to every possible UI element that is supposed to be part of a layout.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In XAML layout, there are two stages: measure, then arrange.</source>
          <target state="new">In XAML layout, there are two stages: measure, then arrange.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You don't get any built-in layout method behavior for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> from the base <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Panel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> class.</source>
          <target state="new">You don't get any built-in layout method behavior for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> from the base <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Panel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> class.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Items in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> won't automatically render as part of the XAML visual tree.</source>
          <target state="new">Items in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Children<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> won't automatically render as part of the XAML visual tree.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It is up to you to make the items known to the layout process, by invoking layout methods on each of the items you find in <bpt id="p1">**</bpt>Children<ept id="p1">**</ept> through a layout pass within your <bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept> and <bpt id="p3">**</bpt>ArrangeOverride<ept id="p3">**</ept> implementations.</source>
          <target state="new">It is up to you to make the items known to the layout process, by invoking layout methods on each of the items you find in <bpt id="p1">**</bpt>Children<ept id="p1">**</ept> through a layout pass within your <bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept> and <bpt id="p3">**</bpt>ArrangeOverride<ept id="p3">**</ept> implementations.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There's no reason to call base implementations in layout overrides unless you have your own inheritance.</source>
          <target state="new">There's no reason to call base implementations in layout overrides unless you have your own inheritance.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The native methods for layout behavior (if they exist) run regardless, and not calling base implementation from overrides won't prevent the native behavior from happening.</source>
          <target state="new">The native methods for layout behavior (if they exist) run regardless, and not calling base implementation from overrides won't prevent the native behavior from happening.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>During the measure pass, your layout logic queries each child element for its desired size, by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> method on that child element.</source>
          <target state="new">During the measure pass, your layout logic queries each child element for its desired size, by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> method on that child element.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Calling the <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept> method establishes the value for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DesiredSize<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> property.</source>
          <target state="new">Calling the <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept> method establishes the value for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DesiredSize<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> property.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> return value is the desired size for the panel itself.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> return value is the desired size for the panel itself.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>During the arrange pass, the positions and sizes of child elements are determined in x-y space and the layout composition is prepared for rendering.</source>
          <target state="new">During the arrange pass, the positions and sizes of child elements are determined in x-y space and the layout composition is prepared for rendering.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Your code must call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Arrange<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> on each child element in <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Children<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> so that the layout system detects that the element belongs in the layout.</source>
          <target state="new">Your code must call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Arrange<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> on each child element in <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Children<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> so that the layout system detects that the element belongs in the layout.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Arrange<ept id="p1">**</ept> call is a precursor to composition and rendering; it informs the layout system where that element goes, when the composition is submitted for rendering.</source>
          <target state="new">The <bpt id="p1">**</bpt>Arrange<ept id="p1">**</ept> call is a precursor to composition and rendering; it informs the layout system where that element goes, when the composition is submitted for rendering.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Many properties and values contribute to how the layout logic will work at runtime.</source>
          <target state="new">Many properties and values contribute to how the layout logic will work at runtime.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A way to think about the layout process is that the elements with no children (generally the most deeply nested element in the UI) are the ones that can finalize measurements first.</source>
          <target state="new">A way to think about the layout process is that the elements with no children (generally the most deeply nested element in the UI) are the ones that can finalize measurements first.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>They don't have any dependencies on child elements that influence their desired size.</source>
          <target state="new">They don't have any dependencies on child elements that influence their desired size.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>They might have their own desired sizes, and these are size suggestions until the layout actually takes place.</source>
          <target state="new">They might have their own desired sizes, and these are size suggestions until the layout actually takes place.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Then, the measure pass continues walking up the visual tree until the root element has its measurements and all the measurements can be finalized.</source>
          <target state="new">Then, the measure pass continues walking up the visual tree until the root element has its measurements and all the measurements can be finalized.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The candidate layout must fit within the current app window or else parts of the UI will be clipped.</source>
          <target state="new">The candidate layout must fit within the current app window or else parts of the UI will be clipped.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Panels often are the place where the clipping logic is determined.</source>
          <target state="new">Panels often are the place where the clipping logic is determined.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Panel logic can determine what size is available from within the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> implementation, and may have to push the size restrictions onto the children and divide space amongst children so that everything fits as best it can.</source>
          <target state="new">Panel logic can determine what size is available from within the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> implementation, and may have to push the size restrictions onto the children and divide space amongst children so that everything fits as best it can.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The result of layout is ideally something that uses various properties of all parts of the layout but still fits within the app window.</source>
          <target state="new">The result of layout is ideally something that uses various properties of all parts of the layout but still fits within the app window.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>That requires both a good implementation for layout logic of the panels, and also a judicious UI design on the part of any app code that builds a UI using that panel.</source>
          <target state="new">That requires both a good implementation for layout logic of the panels, and also a judicious UI design on the part of any app code that builds a UI using that panel.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>No panel design is going to look good if the overall UI design includes more child elements than can possibly fit in the app.</source>
          <target state="new">No panel design is going to look good if the overall UI design includes more child elements than can possibly fit in the app.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A large part of what makes the layout system work is that any element that's based on <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> already has some of its own inherent behavior when acting as a child in a container.</source>
          <target state="new">A large part of what makes the layout system work is that any element that's based on <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> already has some of its own inherent behavior when acting as a child in a container.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, there are several APIs of <bpt id="p1">**</bpt>FrameworkElement<ept id="p1">**</ept> that either inform layout behavior or are needed to make layout work at all.</source>
          <target state="new">For example, there are several APIs of <bpt id="p1">**</bpt>FrameworkElement<ept id="p1">**</ept> that either inform layout behavior or are needed to make layout work at all.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These include:</source>
          <target state="new">These include:</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> (actually a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>UIElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> property)</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> (actually a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>UIElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> property)</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ActualHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept></source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ActualHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept></target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Height<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Width<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept></source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Height<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Width<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept></target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Margin</source>
          <target state="new">Margin</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> event</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> event</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>HorizontalAlignment<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208720)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VerticalAlignment<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208749)</ept></source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>HorizontalAlignment<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208720)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VerticalAlignment<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208749)</ept></target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MeasureOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> methods</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MeasureOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> methods</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Arrange<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Measure<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> methods: these have native implementations defined at the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>FrameworkElement<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> level, which handle the element-level layout action</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Arrange<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Measure<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> methods: these have native implementations defined at the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>FrameworkElement<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> level, which handle the element-level layout action</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>MeasureOverride</source>
          <target state="new">MeasureOverride</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> method has a return value that's used by the layout system as the starting <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DesiredSize<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> for the panel itself, when the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Measure<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> method is called on the panel by its parent in layout.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> method has a return value that's used by the layout system as the starting <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DesiredSize<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> for the panel itself, when the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Measure<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> method is called on the panel by its parent in layout.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The logic choices within the method are just as important as what it returns, and the logic often influences what value is returned.</source>
          <target state="new">The logic choices within the method are just as important as what it returns, and the logic often influences what value is returned.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> implementations should loop through <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Children<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept>, and call the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Measure<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> method on each child element.</source>
          <target state="new">All <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> implementations should loop through <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Children<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept>, and call the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Measure<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> method on each child element.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Calling the <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept> method establishes the value for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DesiredSize<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> property.</source>
          <target state="new">Calling the <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept> method establishes the value for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DesiredSize<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> property.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This might inform how much space the panel itself needs, as well as how that space is divided among elements or sized for a particular child element.</source>
          <target state="new">This might inform how much space the panel itself needs, as well as how that space is divided among elements or sized for a particular child element.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Here's a very basic skeleton of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> method:</source>
          <target state="new">Here's a very basic skeleton of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> method:</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Elements often have a natural size by the time they're ready for layout.</source>
          <target state="new">Elements often have a natural size by the time they're ready for layout.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>After the measure pass, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> might indicate that natural size, if the <bpt id="p3">*</bpt>availableSize<ept id="p3">*</ept> you passed for <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Measure<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> was smaller.</source>
          <target state="new">After the measure pass, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> might indicate that natural size, if the <bpt id="p3">*</bpt>availableSize<ept id="p3">*</ept> you passed for <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Measure<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> was smaller.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the natural size is larger than <bpt id="p1">*</bpt>availableSize<ept id="p1">*</ept> you passed for <bpt id="p2">**</bpt>Measure<ept id="p2">**</ept>, the <bpt id="p3">**</bpt>DesiredSize<ept id="p3">**</ept> is constrained to <bpt id="p4">*</bpt>availableSize<ept id="p4">*</ept>.</source>
          <target state="new">If the natural size is larger than <bpt id="p1">*</bpt>availableSize<ept id="p1">*</ept> you passed for <bpt id="p2">**</bpt>Measure<ept id="p2">**</ept>, the <bpt id="p3">**</bpt>DesiredSize<ept id="p3">**</ept> is constrained to <bpt id="p4">*</bpt>availableSize<ept id="p4">*</ept>.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>That's how <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept>'s internal implementation behaves, and your layout overrides should take that behavior into account.</source>
          <target state="new">That's how <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept>'s internal implementation behaves, and your layout overrides should take that behavior into account.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Some elements don't have a natural size because they have <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept> values for <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Height<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Width<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept>.</source>
          <target state="new">Some elements don't have a natural size because they have <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept> values for <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Height<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Width<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept>.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These elements use the full <bpt id="p1">*</bpt>availableSize<ept id="p1">*</ept>, because that's what an <bpt id="p2">**</bpt>Auto<ept id="p2">**</ept> value represents: size the element to the maximum available size, which the immediate layout parent communicates by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Measure<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> with <bpt id="p5">*</bpt>availableSize<ept id="p5">*</ept>.</source>
          <target state="new">These elements use the full <bpt id="p1">*</bpt>availableSize<ept id="p1">*</ept>, because that's what an <bpt id="p2">**</bpt>Auto<ept id="p2">**</ept> value represents: size the element to the maximum available size, which the immediate layout parent communicates by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Measure<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> with <bpt id="p5">*</bpt>availableSize<ept id="p5">*</ept>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In practice, there's always some measurement that a UI is sized to (even if that's the top level window.) Eventually, the measure pass resolves all the <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept> values to parent constraints and all <bpt id="p2">**</bpt>Auto<ept id="p2">**</ept> value elements get real measurements (which you can get by checking <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ActualHeight<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept>, after layout completes).</source>
          <target state="new">In practice, there's always some measurement that a UI is sized to (even if that's the top level window.) Eventually, the measure pass resolves all the <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept> values to parent constraints and all <bpt id="p2">**</bpt>Auto<ept id="p2">**</ept> value elements get real measurements (which you can get by checking <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ActualHeight<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept>, after layout completes).</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It's legal to pass a size to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> that has at least one infinite dimension, to indicate that the panel can attempt to size itself to fit measurements of its content.</source>
          <target state="new">It's legal to pass a size to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> that has at least one infinite dimension, to indicate that the panel can attempt to size itself to fit measurements of its content.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Each child element being measured sets its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> value using its natural size.</source>
          <target state="new">Each child element being measured sets its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> value using its natural size.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Then, during the arrange pass, the panel typically arranges using that size.</source>
          <target state="new">Then, during the arrange pass, the panel typically arranges using that size.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Text elements such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> have a calculated <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ActualHeight<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> based on their text string and text properties even if no <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Height<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> or <bpt id="p9">[</bpt><bpt id="p10">**</bpt>Width<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> value is set, and these dimensions should be respected by your panel logic.</source>
          <target state="new">Text elements such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> have a calculated <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ActualHeight<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> based on their text string and text properties even if no <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Height<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> or <bpt id="p9">[</bpt><bpt id="p10">**</bpt>Width<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> value is set, and these dimensions should be respected by your panel logic.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Clipping text is a particularly bad UI experience.</source>
          <target state="new">Clipping text is a particularly bad UI experience.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Even if your implementation doesn't use the desired size measurements, it's best to call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> method on each child element, because there are internal and native behaviors that are triggered by <bpt id="p3">**</bpt>Measure<ept id="p3">**</ept> being called.</source>
          <target state="new">Even if your implementation doesn't use the desired size measurements, it's best to call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> method on each child element, because there are internal and native behaviors that are triggered by <bpt id="p3">**</bpt>Measure<ept id="p3">**</ept> being called.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For an element to participate in layout, each child element must have <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept> called on it during the measure pass and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Arrange<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> method called on it during the arrange pass.</source>
          <target state="new">For an element to participate in layout, each child element must have <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept> called on it during the measure pass and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Arrange<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> method called on it during the arrange pass.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Calling these methods sets internal flags on the object and populates values (such as the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> property) that the system's layout logic needs when it builds the visual tree and renders the UI.</source>
          <target state="new">Calling these methods sets internal flags on the object and populates values (such as the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> property) that the system's layout logic needs when it builds the visual tree and renders the UI.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> return value is based on the panel's logic interpreting the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DesiredSize<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> or other size considerations for each of the child elements in <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Children<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> when <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Measure<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> is called on them.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> return value is based on the panel's logic interpreting the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DesiredSize<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> or other size considerations for each of the child elements in <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Children<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> when <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Measure<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> is called on them.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>What to do with <bpt id="p1">**</bpt>DesiredSize<ept id="p1">**</ept> values from children and how the <bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept> return value should use them is up to your own logic's interpretation.</source>
          <target state="new">What to do with <bpt id="p1">**</bpt>DesiredSize<ept id="p1">**</ept> values from children and how the <bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept> return value should use them is up to your own logic's interpretation.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You don't typically add up the values without modification, because the input of <bpt id="p1">**</bpt>MeasureOverride<ept id="p1">**</ept> is often a fixed available size that's being suggested by the panel's parent.</source>
          <target state="new">You don't typically add up the values without modification, because the input of <bpt id="p1">**</bpt>MeasureOverride<ept id="p1">**</ept> is often a fixed available size that's being suggested by the panel's parent.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If you exceed that size, the panel itself might get clipped.</source>
          <target state="new">If you exceed that size, the panel itself might get clipped.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You'd typically compare the total size of children to the panel's available size and make adjustments if necessary.</source>
          <target state="new">You'd typically compare the total size of children to the panel's available size and make adjustments if necessary.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Tips and guidance</source>
          <target state="new">Tips and guidance</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Ideally, a custom panel should be suitable for being the first true visual in a UI composition, perhaps at a level immediately under <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>UserControl<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227647)</ept> or another element that is the XAML page root.</source>
          <target state="new">Ideally, a custom panel should be suitable for being the first true visual in a UI composition, perhaps at a level immediately under <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>UserControl<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227647)</ept> or another element that is the XAML page root.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> implementations, don't routinely return the input <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Size<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> without examining the values.</source>
          <target state="new">In <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> implementations, don't routinely return the input <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Size<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> without examining the values.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If the return <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> has an <bpt id="p2">**</bpt>Infinity<ept id="p2">**</ept> value in it, this can throw exceptions in runtime layout logic.</source>
          <target state="new">If the return <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> has an <bpt id="p2">**</bpt>Infinity<ept id="p2">**</ept> value in it, this can throw exceptions in runtime layout logic.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>Infinity<ept id="p1">**</ept> value can come from the main app window, which is scrollable and therefore doesn't have a maximum height.</source>
          <target state="new">An <bpt id="p1">**</bpt>Infinity<ept id="p1">**</ept> value can come from the main app window, which is scrollable and therefore doesn't have a maximum height.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Other scrollable content might have the same behavior.</source>
          <target state="new">Other scrollable content might have the same behavior.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Another common mistake in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> implementations is to return a new default <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Size<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> (values for height and width are 0).</source>
          <target state="new">Another common mistake in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> implementations is to return a new default <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Size<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> (values for height and width are 0).</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You might start with that value, and it might even be the correct value if your panel determines that none of the children should be rendered.</source>
          <target state="new">You might start with that value, and it might even be the correct value if your panel determines that none of the children should be rendered.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>But, a default <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> results in your panel not being sized correctly by its host.</source>
          <target state="new">But, a default <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> results in your panel not being sized correctly by its host.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>It requests no space in the UI, and therefore gets no space and doesn't render.</source>
          <target state="new">It requests no space in the UI, and therefore gets no space and doesn't render.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>All your panel code otherwise might be functioning fine, but you still won't see your panel or contents thereof if it's being composed with zero height, zero width.</source>
          <target state="new">All your panel code otherwise might be functioning fine, but you still won't see your panel or contents thereof if it's being composed with zero height, zero width.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Within the overrides, avoid the temptation to cast child elements to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> and use properties that are calculated as a result of layout, particularly <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ActualHeight<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept>.</source>
          <target state="new">Within the overrides, avoid the temptation to cast child elements to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> and use properties that are calculated as a result of layout, particularly <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ActualHeight<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For most common scenarios, you can base the logic on the child's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> value and you won't need any of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Height<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Width<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> related properties of a child element.</source>
          <target state="new">For most common scenarios, you can base the logic on the child's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> value and you won't need any of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Height<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Width<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> related properties of a child element.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For specialized cases, where you know the type of element and have additional information, for example the natural size of an image file, you can use your element's specialized information because it's not a value that is actively being altered by layout systems.</source>
          <target state="new">For specialized cases, where you know the type of element and have additional information, for example the natural size of an image file, you can use your element's specialized information because it's not a value that is actively being altered by layout systems.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Including layout-calculated properties as part of layout logic substantially increases the risk of defining an unintentional layout loop.</source>
          <target state="new">Including layout-calculated properties as part of layout logic substantially increases the risk of defining an unintentional layout loop.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>These loops cause a condition where a valid layout can't be created and the system can throw a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutCycleException<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh673799)</ept> if the loop is not recoverable.</source>
          <target state="new">These loops cause a condition where a valid layout can't be created and the system can throw a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutCycleException<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh673799)</ept> if the loop is not recoverable.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Panels typically divide their available space between multiple child elements, although exactly how space is divided varies.</source>
          <target state="new">Panels typically divide their available space between multiple child elements, although exactly how space is divided varies.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> implements layout logic that uses its <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RowDefinition<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227606)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ColumnDefinition<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209324)</ept> values to divide the space into the <bpt id="p7">**</bpt>Grid<ept id="p7">**</ept> cells, supporting both star-sizing and pixel values.</source>
          <target state="new">For example, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> implements layout logic that uses its <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RowDefinition<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227606)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ColumnDefinition<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209324)</ept> values to divide the space into the <bpt id="p7">**</bpt>Grid<ept id="p7">**</ept> cells, supporting both star-sizing and pixel values.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If they're pixel values, the size available for each child is already known, so that's what is passed as input size for a grid-style <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept>.</source>
          <target state="new">If they're pixel values, the size available for each child is already known, so that's what is passed as input size for a grid-style <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Panels themselves can introduce reserved space for padding between items.</source>
          <target state="new">Panels themselves can introduce reserved space for padding between items.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If you do this, make sure to expose the measurements as a property that's distinct from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Margin<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208724)</ept> or any <bpt id="p3">**</bpt>Padding<ept id="p3">**</ept> property.</source>
          <target state="new">If you do this, make sure to expose the measurements as a property that's distinct from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Margin<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208724)</ept> or any <bpt id="p3">**</bpt>Padding<ept id="p3">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Elements might have values for their <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ActualWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> properties based on a previous layout pass.</source>
          <target state="new">Elements might have values for their <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ActualWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> properties based on a previous layout pass.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If values change, app UI code can put handlers for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> on elements if there's special logic to run, but panel logic typically doesn't need to check for changes with event handling.</source>
          <target state="new">If values change, app UI code can put handlers for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> on elements if there's special logic to run, but panel logic typically doesn't need to check for changes with event handling.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The layout system is already making the determinations of when to re-run layout because a layout-relevant property changed value, and a panel's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> are called automatically in the appropriate circumstances.</source>
          <target state="new">The layout system is already making the determinations of when to re-run layout because a layout-relevant property changed value, and a panel's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MeasureOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208730)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ArrangeOverride<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> are called automatically in the appropriate circumstances.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>ArrangeOverride</source>
          <target state="new">ArrangeOverride</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> method has a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Size<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> return value that's used by the layout system when rendering the panel itself, when the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Arrange<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> method is called on the panel by its parent in layout.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> method has a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Size<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> return value that's used by the layout system when rendering the panel itself, when the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Arrange<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> method is called on the panel by its parent in layout.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It's typical that the input <bpt id="p1">*</bpt>finalSize<ept id="p1">*</ept> and the <bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept> returned <bpt id="p3">**</bpt>Size<ept id="p3">**</ept> are the same.</source>
          <target state="new">It's typical that the input <bpt id="p1">*</bpt>finalSize<ept id="p1">*</ept> and the <bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept> returned <bpt id="p3">**</bpt>Size<ept id="p3">**</ept> are the same.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If they aren't, that means the panel is attempting to make itself a different size than what the other participants in layout claim is available.</source>
          <target state="new">If they aren't, that means the panel is attempting to make itself a different size than what the other participants in layout claim is available.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The final size was based on having previously run the measure pass of layout through your panel code, so that's why returning a different size isn't typical: it means you are deliberately ignoring measure logic.</source>
          <target state="new">The final size was based on having previously run the measure pass of layout through your panel code, so that's why returning a different size isn't typical: it means you are deliberately ignoring measure logic.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Don't return a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Size<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> with an <bpt id="p3">**</bpt>Infinity<ept id="p3">**</ept> component.</source>
          <target state="new">Don't return a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Size<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> with an <bpt id="p3">**</bpt>Infinity<ept id="p3">**</ept> component.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Trying to use such a <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> throws an exception from internal layout.</source>
          <target state="new">Trying to use such a <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> throws an exception from internal layout.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> implementations should loop through <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Children<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept>, and call the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Arrange<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> method on each child element.</source>
          <target state="new">All <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> implementations should loop through <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Children<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept>, and call the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Arrange<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> method on each child element.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept>, <bpt id="p3">**</bpt>Arrange<ept id="p3">**</ept> doesn't have a return value.</source>
          <target state="new">Like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Measure<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept>, <bpt id="p3">**</bpt>Arrange<ept id="p3">**</ept> doesn't have a return value.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept>, no calculated property gets set as a result (however, the element in question typically fires a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>LayoutUpdated<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> event).</source>
          <target state="new">Unlike <bpt id="p1">**</bpt>Measure<ept id="p1">**</ept>, no calculated property gets set as a result (however, the element in question typically fires a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>LayoutUpdated<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> event).</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Here's a very basic skeleton of an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> method:</source>
          <target state="new">Here's a very basic skeleton of an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> method:</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The arrange pass of layout might happen without being preceded by a measure pass.</source>
          <target state="new">The arrange pass of layout might happen without being preceded by a measure pass.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>However, this only happens when the layout system has determined no properties have changed that would have affected the previous measurements.</source>
          <target state="new">However, this only happens when the layout system has determined no properties have changed that would have affected the previous measurements.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For example, if an alignment changes, there's no need to re-measure that particular element because its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> would not change when its alignment choice changes.</source>
          <target state="new">For example, if an alignment changes, there's no need to re-measure that particular element because its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> would not change when its alignment choice changes.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>On the other hand, if <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ActualHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> changes on any element in a layout, a new measure pass is needed.</source>
          <target state="new">On the other hand, if <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ActualHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> changes on any element in a layout, a new measure pass is needed.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The layout system automatically detects true measure changes and invokes the measure pass again, and then runs another arrange pass.</source>
          <target state="new">The layout system automatically detects true measure changes and invokes the measure pass again, and then runs another arrange pass.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The input for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Arrange<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> takes a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Rect<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225994)</ept> value.</source>
          <target state="new">The input for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Arrange<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> takes a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Rect<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225994)</ept> value.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The most common way to construct this <bpt id="p1">**</bpt>Rect<ept id="p1">**</ept> is to use the constructor that has a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Point<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> input and a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Size<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> input.</source>
          <target state="new">The most common way to construct this <bpt id="p1">**</bpt>Rect<ept id="p1">**</ept> is to use the constructor that has a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Point<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> input and a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Size<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br225995)</ept> input.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Point<ept id="p1">**</ept> is the point where the top left corner of the bounding box for the element should be placed.</source>
          <target state="new">The <bpt id="p1">**</bpt>Point<ept id="p1">**</ept> is the point where the top left corner of the bounding box for the element should be placed.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> is the dimensions used to render that particular element.</source>
          <target state="new">The <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> is the dimensions used to render that particular element.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You often use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> for that element as this <bpt id="p3">**</bpt>Size<ept id="p3">**</ept> value, because establishing the <bpt id="p4">**</bpt>DesiredSize<ept id="p4">**</ept> for all elements involved in layout was the purpose of the measure pass of layout.</source>
          <target state="new">You often use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DesiredSize<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> for that element as this <bpt id="p3">**</bpt>Size<ept id="p3">**</ept> value, because establishing the <bpt id="p4">**</bpt>DesiredSize<ept id="p4">**</ept> for all elements involved in layout was the purpose of the measure pass of layout.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>(The measure pass determines all-up sizing of the elements in an iterative way so that the layout system can optimize how elements are placed once it gets to the arrange pass.)</source>
          <target state="new">(The measure pass determines all-up sizing of the elements in an iterative way so that the layout system can optimize how elements are placed once it gets to the arrange pass.)</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>What typically varies between <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> implementations is the logic by which the panel determines the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Point<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> component of how it arranges each child.</source>
          <target state="new">What typically varies between <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArrangeOverride<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208711)</ept> implementations is the logic by which the panel determines the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Point<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> component of how it arranges each child.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>An absolute positioning panel such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> uses the explicit placement info that it gets from each element through <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas.Left<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Canvas.Top<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/hh759772)</ept> values.</source>
          <target state="new">An absolute positioning panel such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> uses the explicit placement info that it gets from each element through <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas.Left<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Canvas.Top<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/hh759772)</ept> values.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A space-dividing panel such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> would have mathematical operations that divided the available space into cells and each cell would have an x-y value for where its content should be placed and arranged.</source>
          <target state="new">A space-dividing panel such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> would have mathematical operations that divided the available space into cells and each cell would have an x-y value for where its content should be placed and arranged.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>An adaptive panel such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209635)</ept> might be expanding itself to fit content in its orientation dimension.</source>
          <target state="new">An adaptive panel such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209635)</ept> might be expanding itself to fit content in its orientation dimension.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>There are still additional positioning influences on elements in layout, beyond what you directly control and pass to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Arrange<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept>.</source>
          <target state="new">There are still additional positioning influences on elements in layout, beyond what you directly control and pass to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Arrange<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept>.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>These come from the internal native implementation of <bpt id="p1">**</bpt>Arrange<ept id="p1">**</ept> that's common to all <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElement<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> derived types and augmented by some other types such as text elements.</source>
          <target state="new">These come from the internal native implementation of <bpt id="p1">**</bpt>Arrange<ept id="p1">**</ept> that's common to all <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElement<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> derived types and augmented by some other types such as text elements.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For example, elements can have margin and alignment, and some can have padding.</source>
          <target state="new">For example, elements can have margin and alignment, and some can have padding.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>These properties often interact.</source>
          <target state="new">These properties often interact.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Alignment, margin, and padding<ept id="p1">](alignment-margin-padding.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Alignment, margin, and padding<ept id="p1">](alignment-margin-padding.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Panels and controls</source>
          <target state="new">Panels and controls</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Avoid putting functionality into a custom panel that should instead be built as a custom control.</source>
          <target state="new">Avoid putting functionality into a custom panel that should instead be built as a custom control.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The role of a panel is to present any child element content that exists within it, as a function of layout that happens automatically.</source>
          <target state="new">The role of a panel is to present any child element content that exists within it, as a function of layout that happens automatically.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The panel might add decorations to content (similar to how a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Border<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> adds the border around the element it presents), or perform other layout-related adjustments like padding.</source>
          <target state="new">The panel might add decorations to content (similar to how a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Border<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> adds the border around the element it presents), or perform other layout-related adjustments like padding.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>But that's about as far as you should go when extending the visual tree output beyond reporting and using information from the children.</source>
          <target state="new">But that's about as far as you should go when extending the visual tree output beyond reporting and using information from the children.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If there's any interaction that's accessible to the user, you should write a custom control, not a panel.</source>
          <target state="new">If there's any interaction that's accessible to the user, you should write a custom control, not a panel.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For example, a panel shouldn't add scrolling viewports to content it presents, even if the goal is to prevent clipping, because the scrollbars, thumbs and so on are interactive control parts.</source>
          <target state="new">For example, a panel shouldn't add scrolling viewports to content it presents, even if the goal is to prevent clipping, because the scrollbars, thumbs and so on are interactive control parts.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>(Content might have scrollbars after all, but you should leave that up to the child's logic.</source>
          <target state="new">(Content might have scrollbars after all, but you should leave that up to the child's logic.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Don't force it by adding scrolling as a layout operation.) You might create a control and also write a custom panel that plays an important role in that control's visual tree, when it comes to presenting content in that control.</source>
          <target state="new">Don't force it by adding scrolling as a layout operation.) You might create a control and also write a custom panel that plays an important role in that control's visual tree, when it comes to presenting content in that control.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>But the control and the panel should be distinct code objects.</source>
          <target state="new">But the control and the panel should be distinct code objects.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>One reason the distinction between control and panel is important is because of Microsoft UI Automation and accessibility.</source>
          <target state="new">One reason the distinction between control and panel is important is because of Microsoft UI Automation and accessibility.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Panels provide a visual layout behavior, not a logical behavior.</source>
          <target state="new">Panels provide a visual layout behavior, not a logical behavior.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>How a UI element appears visually is not an aspect of UI that is typically important to accessibility scenarios.</source>
          <target state="new">How a UI element appears visually is not an aspect of UI that is typically important to accessibility scenarios.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Accessibility is about exposing the parts of an app that are logically important to understanding a UI.</source>
          <target state="new">Accessibility is about exposing the parts of an app that are logically important to understanding a UI.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>When interaction is required, controls should expose the interaction possibilities to the UI Automation infrastructure.</source>
          <target state="new">When interaction is required, controls should expose the interaction possibilities to the UI Automation infrastructure.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Custom automation peers<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt297667)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Custom automation peers<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt297667)</ept>.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Other layout API</source>
          <target state="new">Other layout API</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>There are some other APIs that are part of the layout system, but aren't declared by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept>.</source>
          <target state="new">There are some other APIs that are part of the layout system, but aren't declared by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept>.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You might use these in a panel implementation or in a custom control that uses panels.</source>
          <target state="new">You might use these in a panel implementation or in a custom control that uses panels.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>UpdateLayout<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208989)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>InvalidateMeasure<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208930)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>InvalidateArrange<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208929)</ept> are methods that initiate a layout pass.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>UpdateLayout<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208989)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>InvalidateMeasure<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208930)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>InvalidateArrange<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208929)</ept> are methods that initiate a layout pass.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>InvalidateArrange<ept id="p1">**</ept> might not trigger a measure pass, but the other two do.</source>
          <target state="new"><bpt id="p1">**</bpt>InvalidateArrange<ept id="p1">**</ept> might not trigger a measure pass, but the other two do.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Never call these methods from within a layout method override, because they're almost sure to cause a layout loop.</source>
          <target state="new">Never call these methods from within a layout method override, because they're almost sure to cause a layout loop.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Control code doesn't typically need to call them either.</source>
          <target state="new">Control code doesn't typically need to call them either.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Most aspects of layout are triggered automatically by detecting changes to the framework-defined layout properties such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Width<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> and so on.</source>
          <target state="new">Most aspects of layout are triggered automatically by detecting changes to the framework-defined layout properties such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Width<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> and so on.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> is an event that fires when some aspect of layout of the element has changed.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> is an event that fires when some aspect of layout of the element has changed.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>This isn't specific to panels; the event is defined by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>.</source>
          <target state="new">This isn't specific to panels; the event is defined by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SizeChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208742)</ept> is an event that fires only after layout passes are finalized, and indicates that <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ActualWidth<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> have changed as a result.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SizeChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208742)</ept> is an event that fires only after layout passes are finalized, and indicates that <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ActualWidth<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> have changed as a result.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This is another <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> event.</source>
          <target state="new">This is another <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> event.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>There are cases where <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> fires, but <bpt id="p3">**</bpt>SizeChanged<ept id="p3">**</ept> does not.</source>
          <target state="new">There are cases where <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208722)</ept> fires, but <bpt id="p3">**</bpt>SizeChanged<ept id="p3">**</ept> does not.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For example the internal contents might be rearranged, but the element's size didn't change.</source>
          <target state="new">For example the internal contents might be rearranged, but the element's size didn't change.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
          <target state="new">This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</source>
          <target state="new">If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="new">Reference</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>FrameworkElement.ArrangeOverride</source>
          <target state="new">FrameworkElement.ArrangeOverride</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>FrameworkElement.MeasureOverride</source>
          <target state="new">FrameworkElement.MeasureOverride</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Panel</source>
          <target state="new">Panel</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="new">Concepts</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Alignment, margin, and padding</source>
          <target state="new">Alignment, margin, and padding</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>