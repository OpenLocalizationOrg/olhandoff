<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\layout\design-and-ui-intro.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dccf8cbea79d6f216d059254ff6d254208a23dce</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>This article describes the features, benefits, and requirements of the Universal Windows Platform (UWP) from a design perspective.</source>
          <target state="new">This article describes the features, benefits, and requirements of the Universal Windows Platform (UWP) from a design perspective.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Find out what the platform gives you for free and the tools it puts at your disposal.</source>
          <target state="new">Find out what the platform gives you for free and the tools it puts at your disposal.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Introduction to Universal Windows Platform (UWP) app design</source>
          <target state="new">Introduction to Universal Windows Platform (UWP) app design</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Introduction to UWP app design</source>
          <target state="new">Introduction to UWP app design</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A Universal Windows Platform (UWP) app can run on any Windows-based device, from your phone to your tablet or PC.</source>
          <target state="new">A Universal Windows Platform (UWP) app can run on any Windows-based device, from your phone to your tablet or PC.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>windows-powered devices</source>
          <target state="new">windows-powered devices</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Designing an app that looks good on such a wide variety of devices can be a big challenge.</source>
          <target state="new">Designing an app that looks good on such a wide variety of devices can be a big challenge.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>So how do you go about designing an app that provides a great UX on devices with dramatically different screen sizes and input methods?</source>
          <target state="new">So how do you go about designing an app that provides a great UX on devices with dramatically different screen sizes and input methods?</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Fortunately, the Universal Windows Platform (UWP) provides a set of built-in features and universal building blocks that help you do just that.</source>
          <target state="new">Fortunately, the Universal Windows Platform (UWP) provides a set of built-in features and universal building blocks that help you do just that.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>a design for an app that runs on windows phone, tablets, and pcs</source>
          <target state="new">a design for an app that runs on windows phone, tablets, and pcs</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This articles describes the UI features and benefits of UWP apps and provides some high-level design guidance for creating your first UWP app.</source>
          <target state="new">This articles describes the UI features and benefits of UWP apps and provides some high-level design guidance for creating your first UWP app.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Let's start by taking a look at some of the features that you get when you create a UWP app.</source>
          <target state="new">Let's start by taking a look at some of the features that you get when you create a UWP app.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>UWP app features</source>
          <target state="new">UWP app features</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Effective pixels and scaling</source>
          <target state="new">Effective pixels and scaling</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>UWP apps automatically adjust the size of controls, fonts, and other UI elements so that they are legible on all devices.</source>
          <target state="new">UWP apps automatically adjust the size of controls, fonts, and other UI elements so that they are legible on all devices.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When your app runs on a device, the system uses an algorithm to normalize the way UI elements display on the screen.</source>
          <target state="new">When your app runs on a device, the system uses an algorithm to normalize the way UI elements display on the screen.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This scaling algorithm takes into account viewing distance and screen density (pixels per inch) to optimize for perceived size (rather than physical size).</source>
          <target state="new">This scaling algorithm takes into account viewing distance and screen density (pixels per inch) to optimize for perceived size (rather than physical size).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The scaling algorithm ensures that a 24 px font on Surface Hub 10 feet away is just as legible to the user as a 24 px font on 5' phone that's a few inches away.</source>
          <target state="new">The scaling algorithm ensures that a 24 px font on Surface Hub 10 feet away is just as legible to the user as a 24 px font on 5' phone that's a few inches away.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>viewing distances for different devices</source>
          <target state="new">viewing distances for different devices</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because of how the scaling system works, when you design your UWP app, you're designing in <bpt id="p1">*</bpt>effective pixels<ept id="p1">*</ept>, not actual physical pixels.</source>
          <target state="new">Because of how the scaling system works, when you design your UWP app, you're designing in <bpt id="p1">*</bpt>effective pixels<ept id="p1">*</ept>, not actual physical pixels.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>So, how does that impact the way you design your app?</source>
          <target state="new">So, how does that impact the way you design your app?</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can ignore the pixel density and the actual screen resolution when designing.</source>
          <target state="new">You can ignore the pixel density and the actual screen resolution when designing.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead, design for the effective resolution (the resolution in effective pixels) for a size class (we define size classes <bpt id="p1">[</bpt>later in this article<ept id="p1">](#sizeclasses)</ept>).</source>
          <target state="new">Instead, design for the effective resolution (the resolution in effective pixels) for a size class (we define size classes <bpt id="p1">[</bpt>later in this article<ept id="p1">](#sizeclasses)</ept>).</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the system scales your UI, it does so by multiples of 4.</source>
          <target state="new">When the system scales your UI, it does so by multiples of 4.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To ensure a crisp appearance, snap your designs to the 4x4 pixel grid: make margins, sizes and positions of UI elements, and the position (but not the size—text can be any size) of text a multiple of 4 effective pixels.</source>
          <target state="new">To ensure a crisp appearance, snap your designs to the 4x4 pixel grid: make margins, sizes and positions of UI elements, and the position (but not the size—text can be any size) of text a multiple of 4 effective pixels.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This illustration shows design elements that map to the 4x4 pixel grid.</source>
          <target state="new">This illustration shows design elements that map to the 4x4 pixel grid.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The design element will always have crisp, sharp edges.</source>
          <target state="new">The design element will always have crisp, sharp edges.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>snapping to the 4x4 pixel grid</source>
          <target state="new">snapping to the 4x4 pixel grid</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The next illustration shows design elements that don't map to the 4x4 grid.</source>
          <target state="new">The next illustration shows design elements that don't map to the 4x4 grid.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These design elements will have blurry, soft edges on some devices.</source>
          <target state="new">These design elements will have blurry, soft edges on some devices.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>design elements that do not align to the 4x4 pixel grid</source>
          <target state="new">design elements that do not align to the 4x4 pixel grid</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>   When creating screen mockups in image editing programs, set the DPI to 72 and set the image dimensions to the effective resolution for the size class you're targeting.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>   When creating screen mockups in image editing programs, set the DPI to 72 and set the image dimensions to the effective resolution for the size class you're targeting.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(For a list of size classes and effective resolutions, see the <bpt id="p1">[</bpt>Recommendations for specific size classes<ept id="p1">](#sizeclasses)</ept> section of this article.)</source>
          <target state="new">(For a list of size classes and effective resolutions, see the <bpt id="p1">[</bpt>Recommendations for specific size classes<ept id="p1">](#sizeclasses)</ept> section of this article.)</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Universal input and smart interactions</source>
          <target state="new">Universal input and smart interactions</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Another built-in capability of the UWP is universal input enabled via smart interactions.</source>
          <target state="new">Another built-in capability of the UWP is universal input enabled via smart interactions.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Although you can design your apps for specific input modes and devices, you aren’t required to.</source>
          <target state="new">Although you can design your apps for specific input modes and devices, you aren’t required to.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>That’s because Universal Windows apps by default rely on smart interactions.</source>
          <target state="new">That’s because Universal Windows apps by default rely on smart interactions.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>That means you can design around a click interaction without having to know or define whether the click comes from an actual mouse click or the tap of a finger.</source>
          <target state="new">That means you can design around a click interaction without having to know or define whether the click comes from an actual mouse click or the tap of a finger.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Universal controls and styles</source>
          <target state="new">Universal controls and styles</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The UWP also provides some useful building blocks that make it easier to design apps for multiple device families.</source>
          <target state="new">The UWP also provides some useful building blocks that make it easier to design apps for multiple device families.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Universal controls</source>
          <target state="new">Universal controls</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The UWP provides a set of universal controls that are guaranteed to work well on all Windows-powered devices.</source>
          <target state="new">The UWP provides a set of universal controls that are guaranteed to work well on all Windows-powered devices.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This set of universal controls includes everything from common form controls like radio button and text box to sophisticated controls like grid view and list view that can generate lists of items from a stream of data and a template.</source>
          <target state="new">This set of universal controls includes everything from common form controls like radio button and text box to sophisticated controls like grid view and list view that can generate lists of items from a stream of data and a template.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>These controls are input-aware and deploy with the proper set of input affordances, event states, and overall functionality for each device family.</source>
          <target state="new">These controls are input-aware and deploy with the proper set of input affordances, event states, and overall functionality for each device family.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For a complete list of these controls and the patterns you can make from them, see the <bpt id="p1">[</bpt>Controls and patterns<ept id="p1">](https://dev.windows.com/design/controls-patterns)</ept> section.</source>
          <target state="new">For a complete list of these controls and the patterns you can make from them, see the <bpt id="p1">[</bpt>Controls and patterns<ept id="p1">](https://dev.windows.com/design/controls-patterns)</ept> section.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Universal styles</source>
          <target state="new">Universal styles</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Your UWP app automatically gets a default set of styles that gives you these features:</source>
          <target state="new">Your UWP app automatically gets a default set of styles that gives you these features:</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A set of styles that automatically gives your app a light or dark theme (your choice) and can incorporate the user's accent color preference.</source>
          <target state="new">A set of styles that automatically gives your app a light or dark theme (your choice) and can incorporate the user's accent color preference.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>light and dark themes</source>
          <target state="new">light and dark themes</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A Segoe-based type ramp that ensures that app text looks crisp on all devices.</source>
          <target state="new">A Segoe-based type ramp that ensures that app text looks crisp on all devices.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Default animations for interactions.</source>
          <target state="new">Default animations for interactions.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Automatic support for high-contrast modes.</source>
          <target state="new">Automatic support for high-contrast modes.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Our styles were designed with high-contrast in mind, so when your app runs on a device in high-contrast mode, it will display properly.</source>
          <target state="new">Our styles were designed with high-contrast in mind, so when your app runs on a device in high-contrast mode, it will display properly.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Automatic support for other languages.</source>
          <target state="new">Automatic support for other languages.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Our default styles automatically select the correct font for every language that Windows supports.</source>
          <target state="new">Our default styles automatically select the correct font for every language that Windows supports.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can even use multiple languages in the same app and they'll be displayed properly.</source>
          <target state="new">You can even use multiple languages in the same app and they'll be displayed properly.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Built-in support for RTL reading order.</source>
          <target state="new">Built-in support for RTL reading order.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can customize these default styles to give your app a personal touch, or you can completely replace them with your own to create a unique visual experience.</source>
          <target state="new">You can customize these default styles to give your app a personal touch, or you can completely replace them with your own to create a unique visual experience.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, here's a design for a weather app with a unique visual style:</source>
          <target state="new">For example, here's a design for a weather app with a unique visual style:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>a weather app with its own visual style</source>
          <target state="new">a weather app with its own visual style</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Now that we've described the building blocks of UWP apps, let's take a look at how to put them together to create a UI.</source>
          <target state="new">Now that we've described the building blocks of UWP apps, let's take a look at how to put them together to create a UI.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The anatomy of a typical UWP app</source>
          <target state="new">The anatomy of a typical UWP app</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A modern user interface is a complex thing, made up of text, shapes, colors, and animations which are ultimately made up out of individual pixels of the screen of the device you're using.</source>
          <target state="new">A modern user interface is a complex thing, made up of text, shapes, colors, and animations which are ultimately made up out of individual pixels of the screen of the device you're using.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When you start designing a user interface, the sheer number of choices can be overwhelming.</source>
          <target state="new">When you start designing a user interface, the sheer number of choices can be overwhelming.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To make things simpler, let's define the anatomy of an app from a design perspective.</source>
          <target state="new">To make things simpler, let's define the anatomy of an app from a design perspective.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Let's say that an app is made up of screens and pages.</source>
          <target state="new">Let's say that an app is made up of screens and pages.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Each page has a user interface, made up of three types of UI elements: navigation, commanding, and content elements.</source>
          <target state="new">Each page has a user interface, made up of three types of UI elements: navigation, commanding, and content elements.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Navigation elements</source>
          <target state="new">Navigation elements</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Navigation elements help users choose the content they want to display.</source>
          <target state="new">Navigation elements help users choose the content they want to display.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Examples of navigation elements include <bpt id="p1">[</bpt>tabs and pivots<ept id="p1">](../controls-and-patterns/tabs-pivot.md)</ept>, <bpt id="p2">[</bpt>hyperlinks<ept id="p2">](../controls-and-patterns/hyperlinks.md)</ept>, and <bpt id="p3">[</bpt>nav panes<ept id="p3">](../controls-and-patterns/nav-pane.md)</ept>.</source>
          <target state="new">Examples of navigation elements include <bpt id="p1">[</bpt>tabs and pivots<ept id="p1">](../controls-and-patterns/tabs-pivot.md)</ept>, <bpt id="p2">[</bpt>hyperlinks<ept id="p2">](../controls-and-patterns/hyperlinks.md)</ept>, and <bpt id="p3">[</bpt>nav panes<ept id="p3">](../controls-and-patterns/nav-pane.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Navigation elements are covered in detail in the <bpt id="p1">[</bpt>Navigation design basics<ept id="p1">](navigation-basics.md)</ept> article.</source>
          <target state="new">Navigation elements are covered in detail in the <bpt id="p1">[</bpt>Navigation design basics<ept id="p1">](navigation-basics.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Command elements</source>
          <target state="new">Command elements</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Command elements initiate actions, such as manipulating, saving, or sharing content.</source>
          <target state="new">Command elements initiate actions, such as manipulating, saving, or sharing content.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Examples of command elements include <bpt id="p1">[</bpt>button<ept id="p1">](../controls-and-patterns/buttons.md)</ept> and the <bpt id="p2">[</bpt>command bar<ept id="p2">](../controls-and-patterns/app-bars.md)</ept>.</source>
          <target state="new">Examples of command elements include <bpt id="p1">[</bpt>button<ept id="p1">](../controls-and-patterns/buttons.md)</ept> and the <bpt id="p2">[</bpt>command bar<ept id="p2">](../controls-and-patterns/app-bars.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Command elements can also include keyboard shortcuts that aren't actually visible on the screen.</source>
          <target state="new">Command elements can also include keyboard shortcuts that aren't actually visible on the screen.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Command elements are covered in detail in the <bpt id="p1">[</bpt>Command design basics<ept id="p1">](commanding-basics.md)</ept> article.</source>
          <target state="new">Command elements are covered in detail in the <bpt id="p1">[</bpt>Command design basics<ept id="p1">](commanding-basics.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Content elements</source>
          <target state="new">Content elements</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Content elements display the app's content.</source>
          <target state="new">Content elements display the app's content.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For a painting app, the content might be a drawing; for a news app, the content might be a news article.</source>
          <target state="new">For a painting app, the content might be a drawing; for a news app, the content might be a news article.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Content elements are covered in detail in the <bpt id="p1">[</bpt>Content design basics<ept id="p1">](content-basics.md)</ept> article.</source>
          <target state="new">Content elements are covered in detail in the <bpt id="p1">[</bpt>Content design basics<ept id="p1">](content-basics.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>At a minimum, an app has a splash screen and a home page that defines the user interface.</source>
          <target state="new">At a minimum, an app has a splash screen and a home page that defines the user interface.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A typical app will have multiple pages and screens, and navigation, command, and content elements might change from page to page.</source>
          <target state="new">A typical app will have multiple pages and screens, and navigation, command, and content elements might change from page to page.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>When deciding on the right UI elements for your app, you might also consider the devices and the screen sizes your app will run on.</source>
          <target state="new">When deciding on the right UI elements for your app, you might also consider the devices and the screen sizes your app will run on.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Tailoring your app for specific devices and screen sizes.</source>
          <target state="new">Tailoring your app for specific devices and screen sizes.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>UWP apps use effective pixels to guarantee that your design elements will be legible and usable on all Windows-powered devices.</source>
          <target state="new">UWP apps use effective pixels to guarantee that your design elements will be legible and usable on all Windows-powered devices.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>So, why would you ever want to customize your app's UI for a specific device family?</source>
          <target state="new">So, why would you ever want to customize your app's UI for a specific device family?</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Before we go any further, Windows doesn't provide a way for your app to detect the specific device your app is running on.</source>
          <target state="new">Before we go any further, Windows doesn't provide a way for your app to detect the specific device your app is running on.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>It can tell you the device family (mobile, desktop, etc) the app is running on, the effective resolution, and the amount of screen space available to the app (the size of the app's window).</source>
          <target state="new">It can tell you the device family (mobile, desktop, etc) the app is running on, the effective resolution, and the amount of screen space available to the app (the size of the app's window).</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To make the most effective use of space and reduce the need to navigate</source>
          <target state="new">To make the most effective use of space and reduce the need to navigate</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you design an app to look good on a device that has a small screen, such as a phone, the app will be usable on a PC with a much bigger display, but there will probably be some wasted space.</source>
          <target state="new">If you design an app to look good on a device that has a small screen, such as a phone, the app will be usable on a PC with a much bigger display, but there will probably be some wasted space.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can customize the app to display more content when the screen is above a certain size.</source>
          <target state="new">You can customize the app to display more content when the screen is above a certain size.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, a shopping app might display one merchandise category at a time on a phone, but show multiple categories and products simultaneously on a PC or laptop.</source>
          <target state="new">For example, a shopping app might display one merchandise category at a time on a phone, but show multiple categories and products simultaneously on a PC or laptop.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>By putting more content on the screen, you reduce the amount of navigation that the user needs to perform.</source>
          <target state="new">By putting more content on the screen, you reduce the amount of navigation that the user needs to perform.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To take advantage of devices' capabilities</source>
          <target state="new">To take advantage of devices' capabilities</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Certain devices are more likely to have certain device capabilities.</source>
          <target state="new">Certain devices are more likely to have certain device capabilities.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For example, phones are likely to have a location sensor and a camera, while a PC might not have either.</source>
          <target state="new">For example, phones are likely to have a location sensor and a camera, while a PC might not have either.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Your app can detect which capabilities are available and enable features that use them.</source>
          <target state="new">Your app can detect which capabilities are available and enable features that use them.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>To optimize for input</source>
          <target state="new">To optimize for input</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The universal control library works with all input types (touch, pen, keyboard, mouse), but you can still optimize for certain input types by re-arranging your UI elements.</source>
          <target state="new">The universal control library works with all input types (touch, pen, keyboard, mouse), but you can still optimize for certain input types by re-arranging your UI elements.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, if you place navigation elements at the bottom of the screen, they'll be easier for phone users to access—but most PC users expect to see navigation elements toward the top of the screen.</source>
          <target state="new">For example, if you place navigation elements at the bottom of the screen, they'll be easier for phone users to access—but most PC users expect to see navigation elements toward the top of the screen.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Responsive design techniques</source>
          <target state="new">Responsive design techniques</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When you optimize your app's UI for specific screen widths, we say that you're creating a responsive design.</source>
          <target state="new">When you optimize your app's UI for specific screen widths, we say that you're creating a responsive design.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Here are six responsive design techniques you can use to customize your app's UI.</source>
          <target state="new">Here are six responsive design techniques you can use to customize your app's UI.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Reposition</source>
          <target state="new">Reposition</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can alter the location and position of app UI elements to get the most out of each device.</source>
          <target state="new">You can alter the location and position of app UI elements to get the most out of each device.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In this example, the portrait view on phone or phablet necessitates a scrolling UI because only one full frame is visible at a time.</source>
          <target state="new">In this example, the portrait view on phone or phablet necessitates a scrolling UI because only one full frame is visible at a time.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When the app translates to a device that allows two full on-screen frames, whether in portrait or landscape orientation, frame B can occupy a dedicated space.</source>
          <target state="new">When the app translates to a device that allows two full on-screen frames, whether in portrait or landscape orientation, frame B can occupy a dedicated space.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If you're using a grid for positioning, you can stick to the same grid when UI elements are repositioned.</source>
          <target state="new">If you're using a grid for positioning, you can stick to the same grid when UI elements are repositioned.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>reposition</source>
          <target state="new">reposition</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In this example design for a photo app, the photo app repositions its content on larger screens.</source>
          <target state="new">In this example design for a photo app, the photo app repositions its content on larger screens.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>a design for an app that repositions content on larger screens</source>
          <target state="new">a design for an app that repositions content on larger screens</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Resize</source>
          <target state="new">Resize</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You can optimize the frame size by adjusting the margins and size of UI elements.</source>
          <target state="new">You can optimize the frame size by adjusting the margins and size of UI elements.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This could allow you, as the example here shows, to augment the reading experience on a larger screen by simply growing the content frame.</source>
          <target state="new">This could allow you, as the example here shows, to augment the reading experience on a larger screen by simply growing the content frame.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>resizing design elements</source>
          <target state="new">resizing design elements</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Reflow</source>
          <target state="new">Reflow</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>By changing the flow of UI elements based on device and orientation, your app can offer an optimal display of content.</source>
          <target state="new">By changing the flow of UI elements based on device and orientation, your app can offer an optimal display of content.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For instance, when going to a larger screen, it might make sense to switch larger containers, add columns, and generate list items in a different way.</source>
          <target state="new">For instance, when going to a larger screen, it might make sense to switch larger containers, add columns, and generate list items in a different way.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This example shows how a single column of vertically scrolling content on phone or phablet can be reflowed on a larger screen to display two columns of text.</source>
          <target state="new">This example shows how a single column of vertically scrolling content on phone or phablet can be reflowed on a larger screen to display two columns of text.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>reflowing design elements</source>
          <target state="new">reflowing design elements</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Reveal</source>
          <target state="new">Reveal</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can reveal UI based on screen real estate, or when the device supports additional functionality, specific situations, or preferred screen orientations.</source>
          <target state="new">You can reveal UI based on screen real estate, or when the device supports additional functionality, specific situations, or preferred screen orientations.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In this example with tabs, the middle tab with the camera icon might be specific to the app on phone or phablet and not be applicable on larger devices, which is why it's revealed in the device on the right.</source>
          <target state="new">In this example with tabs, the middle tab with the camera icon might be specific to the app on phone or phablet and not be applicable on larger devices, which is why it's revealed in the device on the right.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Another common example of revealing or hiding UI applies to media player controls, where the button set is reduced on smaller devices and expanded on larger devices.</source>
          <target state="new">Another common example of revealing or hiding UI applies to media player controls, where the button set is reduced on smaller devices and expanded on larger devices.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The media player on PC, for instance, can handle far more on-screen functionality than it can on a phone.</source>
          <target state="new">The media player on PC, for instance, can handle far more on-screen functionality than it can on a phone.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>hiding design elements</source>
          <target state="new">hiding design elements</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Part of the reveal-or-hide technique includes choosing when to display more metadata.</source>
          <target state="new">Part of the reveal-or-hide technique includes choosing when to display more metadata.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When real estate is at a premium, such as with a phone or phablet, it's best to show a minimal amount of metadata.</source>
          <target state="new">When real estate is at a premium, such as with a phone or phablet, it's best to show a minimal amount of metadata.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>With a laptop or desktop PC, a significant amount of metadata can be surfaced.</source>
          <target state="new">With a laptop or desktop PC, a significant amount of metadata can be surfaced.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Some examples of how to handle showing or hiding metadata include:</source>
          <target state="new">Some examples of how to handle showing or hiding metadata include:</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In an email app, you can display the user's avatar.</source>
          <target state="new">In an email app, you can display the user's avatar.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In a music app, you can display more info about an album or artist.</source>
          <target state="new">In a music app, you can display more info about an album or artist.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In a video app, you can display more info about a film or a show, such as showing cast and crew details.</source>
          <target state="new">In a video app, you can display more info about a film or a show, such as showing cast and crew details.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In any app, you can break apart columns and reveal more details.</source>
          <target state="new">In any app, you can break apart columns and reveal more details.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>In any app, you can take something that's vertically stacked and lay it out horizontally.</source>
          <target state="new">In any app, you can take something that's vertically stacked and lay it out horizontally.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>When going from phone or phablet to larger devices, stacked list items can change to reveal rows of list items and columns of metadata.</source>
          <target state="new">When going from phone or phablet to larger devices, stacked list items can change to reveal rows of list items and columns of metadata.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Replace</source>
          <target state="new">Replace</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This technique lets you switch the user interface for a specific device size-class or orientation.</source>
          <target state="new">This technique lets you switch the user interface for a specific device size-class or orientation.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In this example, the nav pane and its compact, transient UI works well for a smaller device, but on a larger device tabs might be a better choice.</source>
          <target state="new">In this example, the nav pane and its compact, transient UI works well for a smaller device, but on a larger device tabs might be a better choice.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>replacing design elements</source>
          <target state="new">replacing design elements</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Re-architect</source>
          <target state="new">Re-architect</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You can collapse or fork the architecture of your app to better target specific devices.</source>
          <target state="new">You can collapse or fork the architecture of your app to better target specific devices.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In this example, going from the left device to the right device demonstrates the joining of pages.</source>
          <target state="new">In this example, going from the left device to the right device demonstrates the joining of pages.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>an example of re-architecting a user interface</source>
          <target state="new">an example of re-architecting a user interface</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Here's an example of this technique applied to the design for a smart home app.</source>
          <target state="new">Here's an example of this technique applied to the design for a smart home app.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>an example of a design that using the re-artchitect responsive design technique</source>
          <target state="new">an example of a design that using the re-artchitect responsive design technique</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Related articles</source>
          <target state="new">Related articles</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>What's a UWP app?</source>
          <target state="new">What's a UWP app?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>