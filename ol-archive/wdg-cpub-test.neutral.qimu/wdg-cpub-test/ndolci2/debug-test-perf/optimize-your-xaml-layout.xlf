<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\debug-test-perf\optimize-your-xaml-layout.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">416ec94513adc9ef6efbbdaf3586913d2877df7f</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Optimize your XAML layout</source>
          <target state="new">Optimize your XAML layout</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Layout can be an expensive part of a XAML app&amp;<ph id="ph1">\#</ph>8212;both in CPU usage and memory overhead.</source>
          <target state="new">Layout can be an expensive part of a XAML app&amp;<ph id="ph1">\#</ph>8212;both in CPU usage and memory overhead.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Here are some simple steps you can take to improve the layout performance of your XAML app.</source>
          <target state="new">Here are some simple steps you can take to improve the layout performance of your XAML app.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Optimize your XAML layout</source>
          <target state="new">Optimize your XAML layout</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Panel</source>
          <target state="new">Panel</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Layout is the process of defining the visual structure for your UI.</source>
          <target state="new">Layout is the process of defining the visual structure for your UI.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The primary mechanism for describing layout in XAML is through panels, which are container objects that enable you to position and arrange the UI elements within them.</source>
          <target state="new">The primary mechanism for describing layout in XAML is through panels, which are container objects that enable you to position and arrange the UI elements within them.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Layout can be an expensive part of a XAML app—both in CPU usage and memory overhead.</source>
          <target state="new">Layout can be an expensive part of a XAML app—both in CPU usage and memory overhead.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Here are some simple steps you can take to improve the layout performance of your XAML app.</source>
          <target state="new">Here are some simple steps you can take to improve the layout performance of your XAML app.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Reduce layout structure</source>
          <target state="new">Reduce layout structure</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The biggest gain in layout performance comes from simplifying the hierarchical structure of the tree of UI elements.</source>
          <target state="new">The biggest gain in layout performance comes from simplifying the hierarchical structure of the tree of UI elements.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Panels exist in the visual tree, but they are structural elements, not <bpt id="p1">*</bpt>pixel producing elements<ept id="p1">*</ept> like a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Button<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> or a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Rectangle<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR243371)</ept>.</source>
          <target state="new">Panels exist in the visual tree, but they are structural elements, not <bpt id="p1">*</bpt>pixel producing elements<ept id="p1">*</ept> like a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Button<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> or a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Rectangle<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR243371)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Simplifying the tree by reducing the number of non-pixel-producing elements typically provides a significant performance increase.</source>
          <target state="new">Simplifying the tree by reducing the number of non-pixel-producing elements typically provides a significant performance increase.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Many UIs are implemented by nesting panels which results in deep, complex trees of panels and elements.</source>
          <target state="new">Many UIs are implemented by nesting panels which results in deep, complex trees of panels and elements.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is convenient to nest panels, but in many cases the same UI can be achieved with a more complex single panel.</source>
          <target state="new">It is convenient to nest panels, but in many cases the same UI can be achieved with a more complex single panel.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using a single panel provides better performance.</source>
          <target state="new">Using a single panel provides better performance.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When to reduce layout structure</source>
          <target state="new">When to reduce layout structure</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Reducing layout structure in a trivial way—for example, reducing one nested panel from your top-level page—does not have a noticeable effect.</source>
          <target state="new">Reducing layout structure in a trivial way—for example, reducing one nested panel from your top-level page—does not have a noticeable effect.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The largest performance gains come from reducing layout structure that's repeated in the UI, like in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept>.</source>
          <target state="new">The largest performance gains come from reducing layout structure that's repeated in the UI, like in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept> elements use a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DataTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept>, which defines a subtree of UI elements that is instantiated many times.</source>
          <target state="new">These <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept> elements use a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DataTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept>, which defines a subtree of UI elements that is instantiated many times.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the same subtree is being duplicated many times in your app, any improvements to the performance of that subtree has a multiplicative effect on the overall performance of your app.</source>
          <target state="new">When the same subtree is being duplicated many times in your app, any improvements to the performance of that subtree has a multiplicative effect on the overall performance of your app.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="new">Examples</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Consider the following UI.</source>
          <target state="new">Consider the following UI.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Form layout example</source>
          <target state="new">Form layout example</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>These examples shows 3 ways of implementing the same UI.</source>
          <target state="new">These examples shows 3 ways of implementing the same UI.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each implementation choice results in nearly identical pixels on the screen, but differs substantially in the implementation details.</source>
          <target state="new">Each implementation choice results in nearly identical pixels on the screen, but differs substantially in the implementation details.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Option1: Nested <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept> elements</source>
          <target state="new">Option1: Nested <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept> elements</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although this is the simplest model, it uses 5 panel elements and results in significant overhead.</source>
          <target state="new">Although this is the simplest model, it uses 5 panel elements and results in significant overhead.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Option 2: A single <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept></source>
          <target state="new">Option 2: A single <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept></target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> adds some complexity, but uses only a single panel element.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> adds some complexity, but uses only a single panel element.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Option 3: A single <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativePanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn879546)</ept>:</source>
          <target state="new">Option 3: A single <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativePanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn879546)</ept>:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This single panel is also a bit more complex than using nested panels, but may be easier to understand and maintain than a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>.</source>
          <target state="new">This single panel is also a bit more complex than using nested panels, but may be easier to understand and maintain than a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>As these examples show, there are many ways of achieving the same UI.</source>
          <target state="new">As these examples show, there are many ways of achieving the same UI.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You should choose by carefully considering all the tradeoffs, including performance, readability, and maintainability.</source>
          <target state="new">You should choose by carefully considering all the tradeoffs, including performance, readability, and maintainability.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use single-cell grids for overlapping UI</source>
          <target state="new">Use single-cell grids for overlapping UI</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A common UI requirement is to have a layout where elements overlap each other.</source>
          <target state="new">A common UI requirement is to have a layout where elements overlap each other.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Typically padding, margins, alignments, and transforms are used to position the elements this way.</source>
          <target state="new">Typically padding, margins, alignments, and transforms are used to position the elements this way.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The XAML <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> control is optimized to improve layout performance for elements that overlap.</source>
          <target state="new">The XAML <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> control is optimized to improve layout performance for elements that overlap.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  To see the improvement, use a single-cell <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Grid<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  To see the improvement, use a single-cell <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Grid<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Do not define <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RowDefinitions<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704-rowdefinitions)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ColumnDefinitions<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242704-columndefinitions)</ept>.</source>
          <target state="new">Do not define <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RowDefinitions<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704-rowdefinitions)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ColumnDefinitions<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242704-columndefinitions)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="new">Examples</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Text overlaid on a circle</source>
          <target state="new">Text overlaid on a circle</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Two text blocks in a grid</source>
          <target state="new">Two text blocks in a grid</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Use a panel's built-in border properties</source>
          <target state="new">Use a panel's built-in border properties</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StackPanel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>RelativePanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn879546)</ept>, and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ContentPresenter<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR209378)</ept> controls have built-in border properties that let you draw a border around them without adding an additional <bpt id="p9">[</bpt><bpt id="p10">**</bpt>Border<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/BR209250)</ept> element to your XAML.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StackPanel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>RelativePanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn879546)</ept>, and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ContentPresenter<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR209378)</ept> controls have built-in border properties that let you draw a border around them without adding an additional <bpt id="p9">[</bpt><bpt id="p10">**</bpt>Border<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/BR209250)</ept> element to your XAML.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The new properties that support the built-in border are: <bpt id="p1">**</bpt>BorderBrush<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BorderThickness<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CornerRadius<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Padding<ept id="p4">**</ept>.</source>
          <target state="new">The new properties that support the built-in border are: <bpt id="p1">**</bpt>BorderBrush<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BorderThickness<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CornerRadius<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Padding<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Each of these is a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept>, so you can use them with bindings and animations.</source>
          <target state="new">Each of these is a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept>, so you can use them with bindings and animations.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>They’re designed to be a full replacement for a separate <bpt id="p1">**</bpt>Border<ept id="p1">**</ept> element.</source>
          <target state="new">They’re designed to be a full replacement for a separate <bpt id="p1">**</bpt>Border<ept id="p1">**</ept> element.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If your UI has <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Border<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209250)</ept> elements around these panels, use the built-in border instead, which saves an extra element in the layout structure of your app.</source>
          <target state="new">If your UI has <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Border<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209250)</ept> elements around these panels, use the built-in border instead, which saves an extra element in the layout structure of your app.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As mentioned previously, this can be a significant savings, especially in the case of repeated UI.</source>
          <target state="new">As mentioned previously, this can be a significant savings, especially in the case of repeated UI.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="new">Examples</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>SizeChanged<ept id="p1">**</ept> events to respond to layout changes</source>
          <target state="new">Use <bpt id="p1">**</bpt>SizeChanged<ept id="p1">**</ept> events to respond to layout changes</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> class exposes two similar events for responding to layout changes: <bpt id="p3">[</bpt><bpt id="p4">**</bpt>LayoutUpdated<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706-layoutupdated)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SizeChanged<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR208706-sizechanged)</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> class exposes two similar events for responding to layout changes: <bpt id="p3">[</bpt><bpt id="p4">**</bpt>LayoutUpdated<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706-layoutupdated)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SizeChanged<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR208706-sizechanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You might be using one of these events to receive notification when an element is resized during layout.</source>
          <target state="new">You might be using one of these events to receive notification when an element is resized during layout.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The semantics of the two events are different, and there are important performance considerations in choosing between them.</source>
          <target state="new">The semantics of the two events are different, and there are important performance considerations in choosing between them.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For good performance, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SizeChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706-sizechanged)</ept> is almost always the right choice.</source>
          <target state="new">For good performance, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SizeChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706-sizechanged)</ept> is almost always the right choice.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SizeChanged<ept id="p1">**</ept> has intuitive semantics.</source>
          <target state="new"><bpt id="p1">**</bpt>SizeChanged<ept id="p1">**</ept> has intuitive semantics.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It is raised during layout when the size of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> has been updated.</source>
          <target state="new">It is raised during layout when the size of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> has been updated.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706-layoutupdated)</ept> is also raised during layout, but it has global semantics—it is raised on every element whenever any element is updated.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>LayoutUpdated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706-layoutupdated)</ept> is also raised during layout, but it has global semantics—it is raised on every element whenever any element is updated.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It is typical to only do local processing in the event handler, in which case the code is run more often than needed.</source>
          <target state="new">It is typical to only do local processing in the event handler, in which case the code is run more often than needed.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>LayoutUpdated<ept id="p1">**</ept> only if you need to know when an element is repositioned without changing size (which is uncommon).</source>
          <target state="new">Use <bpt id="p1">**</bpt>LayoutUpdated<ept id="p1">**</ept> only if you need to know when an element is repositioned without changing size (which is uncommon).</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Choosing between panels</source>
          <target state="new">Choosing between panels</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Performance is typically not a consideration when choosing between individual panels.</source>
          <target state="new">Performance is typically not a consideration when choosing between individual panels.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>That choice is typically made by considering which panel provides the layout behavior that is closest to the UI you’re implementing.</source>
          <target state="new">That choice is typically made by considering which panel provides the layout behavior that is closest to the UI you’re implementing.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, if you’re choosing between <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StackPanel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept> , and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>RelativePanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn879546)</ept>, you should choose the panel that provides the closest mapping to your mental model of the implementation.</source>
          <target state="new">For example, if you’re choosing between <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StackPanel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept> , and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>RelativePanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn879546)</ept>, you should choose the panel that provides the closest mapping to your mental model of the implementation.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Every XAML panel is optimized for good performance, and all the panels provide similar performance for similar UI.</source>
          <target state="new">Every XAML panel is optimized for good performance, and all the panels provide similar performance for similar UI.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>