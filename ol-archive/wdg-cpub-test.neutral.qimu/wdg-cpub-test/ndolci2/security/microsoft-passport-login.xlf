<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\security\microsoft-passport-login.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a8ab3658b3f5ca9dcde5f2243146b4d482c7873</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create a Microsoft Passport login app</source>
          <target state="new">Create a Microsoft Passport login app</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This is Part 1 of a complete walkthrough on how to create a Windows 10 UWP (Universal Windows Platform) app that uses Microsoft Passport as an alternative to traditional username and password authentication systems.</source>
          <target state="new">This is Part 1 of a complete walkthrough on how to create a Windows 10 UWP (Universal Windows Platform) app that uses Microsoft Passport as an alternative to traditional username and password authentication systems.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create a Microsoft Passport login app</source>
          <target state="new">Create a Microsoft Passport login app</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target state="new">Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.</source>
          <target state="new">Microsoft makes no warranties, express or implied, with respect to the information provided here.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is Part 1 of a complete walkthrough on how to create a Windows 10 UWP (Universal Windows Platform) app that uses Microsoft Passport as an alternative to traditional username and password authentication systems.</source>
          <target state="new">This is Part 1 of a complete walkthrough on how to create a Windows 10 UWP (Universal Windows Platform) app that uses Microsoft Passport as an alternative to traditional username and password authentication systems.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The app uses a username for sign-in and create a Passport Key for each account.</source>
          <target state="new">The app uses a username for sign-in and create a Passport Key for each account.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These accounts will be protected by the PIN that is setup in Windows Settings on configuration of Microsoft Passport.</source>
          <target state="new">These accounts will be protected by the PIN that is setup in Windows Settings on configuration of Microsoft Passport.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This walkthrough is split into two parts: building the app and connecting the backend service.</source>
          <target state="new">This walkthrough is split into two parts: building the app and connecting the backend service.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you're finished with this article, continue on to Part 2: <bpt id="p1">[</bpt>Microsoft Passport login service<ept id="p1">](microsoft-passport-login-auth-service.md)</ept>.</source>
          <target state="new">When you're finished with this article, continue on to Part 2: <bpt id="p1">[</bpt>Microsoft Passport login service<ept id="p1">](microsoft-passport-login-auth-service.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Before you begin, you should read the <bpt id="p1">[</bpt>Microsoft Passport and Windows Hello<ept id="p1">](microsoft-passport.md)</ept> overview for a general understanding of how Microsoft Passport works.</source>
          <target state="new">Before you begin, you should read the <bpt id="p1">[</bpt>Microsoft Passport and Windows Hello<ept id="p1">](microsoft-passport.md)</ept> overview for a general understanding of how Microsoft Passport works.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Get started</source>
          <target state="new">Get started</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In order to build this project, you'll need some experience with C#, and XAML.</source>
          <target state="new">In order to build this project, you'll need some experience with C#, and XAML.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You'll also need to be using Visual Studio 2015 (Community Edition or greater) on a Windows 10 machine.</source>
          <target state="new">You'll also need to be using Visual Studio 2015 (Community Edition or greater) on a Windows 10 machine.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Open Visual Studio 2015 and select File &gt; New &gt; Project.</source>
          <target state="new">Open Visual Studio 2015 and select File &gt; New &gt; Project.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This will open a “New Project” window.</source>
          <target state="new">This will open a “New Project” window.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Navigation to Templates &gt; Visual C#.</source>
          <target state="new">Navigation to Templates &gt; Visual C#.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Choose Blank App (Universal Windows) and name your application "PassportLogin".</source>
          <target state="new">Choose Blank App (Universal Windows) and name your application "PassportLogin".</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Build and Run the new application (F5), you should see a blank window shown on the screen.</source>
          <target state="new">Build and Run the new application (F5), you should see a blank window shown on the screen.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Close the application.</source>
          <target state="new">Close the application.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Exercise 1: Login with Microsoft Passport</source>
          <target state="new">Exercise 1: Login with Microsoft Passport</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this exercise you will learn how to check if Microsoft Passport is setup on the machine, and how to sign into an account using Microsoft Passport.</source>
          <target state="new">In this exercise you will learn how to check if Microsoft Passport is setup on the machine, and how to sign into an account using Microsoft Passport.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the new project create a new folder in the solution called "Views".</source>
          <target state="new">In the new project create a new folder in the solution called "Views".</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This folder will contain the pages that will be navigated to in this sample.</source>
          <target state="new">This folder will contain the pages that will be navigated to in this sample.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Right click on the project in solution explorer, select Add &gt; New Folder, then rename the folder to Views.</source>
          <target state="new">Right click on the project in solution explorer, select Add &gt; New Folder, then rename the folder to Views.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Right click on the new Views folder, select Add &gt; New Item and select Blank Page.</source>
          <target state="new">Right click on the new Views folder, select Add &gt; New Item and select Blank Page.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Name this page "Login.xaml".</source>
          <target state="new">Name this page "Login.xaml".</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To define the user interface for the new login page, add the following XAML.</source>
          <target state="new">To define the user interface for the new login page, add the following XAML.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This XAML defines a StackPanel to align the following children:</source>
          <target state="new">This XAML defines a StackPanel to align the following children:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>TextBlock that will contain a title.</source>
          <target state="new">TextBlock that will contain a title.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>TextBlock for error messages.</source>
          <target state="new">TextBlock for error messages.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TextBox for the username to input.</source>
          <target state="new">TextBox for the username to input.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Button to navigate to a register page.</source>
          <target state="new">Button to navigate to a register page.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>TextBlock to contain the status of Microsoft Passport.</source>
          <target state="new">TextBlock to contain the status of Microsoft Passport.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>TextBlock to explain the Login page as there is no backend or configured users.</source>
          <target state="new">TextBlock to explain the Login page as there is no backend or configured users.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A few methods need to be added to the code behind to get the solution building.</source>
          <target state="new">A few methods need to be added to the code behind to get the solution building.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Either press F7 or use the Solution Explorer to get to the Login.xaml.cs.</source>
          <target state="new">Either press F7 or use the Solution Explorer to get to the Login.xaml.cs.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add in the following two event methods to handle the Login and Register events.</source>
          <target state="new">Add in the following two event methods to handle the Login and Register events.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For now these methods will set the ErrorMessage.Text to an empty string.</source>
          <target state="new">For now these methods will set the ErrorMessage.Text to an empty string.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In order to render the Login page, edit the MainPage code to navigate to the Login page when the MainPage is loaded.</source>
          <target state="new">In order to render the Login page, edit the MainPage code to navigate to the Login page when the MainPage is loaded.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Open the MainPage.xaml.cs file.</source>
          <target state="new">Open the MainPage.xaml.cs file.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the solution explorer double click on MainPage.xaml.cs.</source>
          <target state="new">In the solution explorer double click on MainPage.xaml.cs.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you can’t find this click the little arrow next to MainPage.xaml to show the code behind.</source>
          <target state="new">If you can’t find this click the little arrow next to MainPage.xaml to show the code behind.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Create a loaded event handler method that will navigate to the login page.</source>
          <target state="new">Create a loaded event handler method that will navigate to the login page.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You will need to add a reference to the Views namespace.</source>
          <target state="new">You will need to add a reference to the Views namespace.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the Login page you need to handle the OnNavigatedTo event to validate if Microsoft Passport is available on this machine.</source>
          <target state="new">In the Login page you need to handle the OnNavigatedTo event to validate if Microsoft Passport is available on this machine.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In Login.xaml.cs implement the following.</source>
          <target state="new">In Login.xaml.cs implement the following.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You will notice that the MicrosoftPassportHelper object flags an error.</source>
          <target state="new">You will notice that the MicrosoftPassportHelper object flags an error.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is because we have not implement it yet.</source>
          <target state="new">This is because we have not implement it yet.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To create the MicrosoftPassportHelper class, right click on the solution PassportLogin (Universal Windows) and click Add &gt; New Folder.</source>
          <target state="new">To create the MicrosoftPassportHelper class, right click on the solution PassportLogin (Universal Windows) and click Add &gt; New Folder.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Name this folder Utils.</source>
          <target state="new">Name this folder Utils.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Right click on the Utils folder and click Add &gt; Class.</source>
          <target state="new">Right click on the Utils folder and click Add &gt; Class.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Name this class "MicrosoftPassportHelper.cs".</source>
          <target state="new">Name this class "MicrosoftPassportHelper.cs".</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Change the class definition of MicrosoftPassportHelper to public static, then add the following method that to inform the user if Microsoft Passport is ready to be used or not.</source>
          <target state="new">Change the class definition of MicrosoftPassportHelper to public static, then add the following method that to inform the user if Microsoft Passport is ready to be used or not.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You will need to add the required namespaces.</source>
          <target state="new">You will need to add the required namespaces.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In Login.xaml.cs add a reference to the Utils namespace.</source>
          <target state="new">In Login.xaml.cs add a reference to the Utils namespace.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This will resolve the error in the OnNavigatedTo method.</source>
          <target state="new">This will resolve the error in the OnNavigatedTo method.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Build and run the application (F5).</source>
          <target state="new">Build and run the application (F5).</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You will be navigated to the login page and the Microsoft Passport banner will indicate to you if Passport is ready to be used.</source>
          <target state="new">You will be navigated to the login page and the Microsoft Passport banner will indicate to you if Passport is ready to be used.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You should see either the green or blue banner indicating the Microsoft Passport status on your machine.</source>
          <target state="new">You should see either the green or blue banner indicating the Microsoft Passport status on your machine.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The next thing you need to do is build the logic for signing in.</source>
          <target state="new">The next thing you need to do is build the logic for signing in.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Create a new folder called "Models".</source>
          <target state="new">Create a new folder called "Models".</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the Models folder create a new class called "Account.cs".</source>
          <target state="new">In the Models folder create a new class called "Account.cs".</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This class will act as your account model.</source>
          <target state="new">This class will act as your account model.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>As this is a sample it will only contain a username.</source>
          <target state="new">As this is a sample it will only contain a username.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Change the class definition to public and add the Username property.</source>
          <target state="new">Change the class definition to public and add the Username property.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You will need a way to handle accounts.</source>
          <target state="new">You will need a way to handle accounts.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For this hands on lab as there is no server, or a database, a list of users will be saved and loaded locally.</source>
          <target state="new">For this hands on lab as there is no server, or a database, a list of users will be saved and loaded locally.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Right click on the Utils folder and add a new class called "AccountHelper.cs".</source>
          <target state="new">Right click on the Utils folder and add a new class called "AccountHelper.cs".</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Change the class definition to be public static.</source>
          <target state="new">Change the class definition to be public static.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The AccountHelper is a static class that will contain all the necessary methods to save and load the list of accounts locally.</source>
          <target state="new">The AccountHelper is a static class that will contain all the necessary methods to save and load the list of accounts locally.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Saving and loading will work by using an XmlSerializer.</source>
          <target state="new">Saving and loading will work by using an XmlSerializer.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You will also need to remember the file you saved and where you saved it.</source>
          <target state="new">You will also need to remember the file you saved and where you saved it.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Additional namespaces will be need to be referenced.</source>
          <target state="new">Additional namespaces will be need to be referenced.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Next, implement a way to add and remove an account from the local list of accounts.</source>
          <target state="new">Next, implement a way to add and remove an account from the local list of accounts.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>These actions will each save the list.</source>
          <target state="new">These actions will each save the list.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The final method that you will need for this hands on lab is a validation method.</source>
          <target state="new">The final method that you will need for this hands on lab is a validation method.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>As there is no auth server or database of users, this will validate against a single user which is hard coded.</source>
          <target state="new">As there is no auth server or database of users, this will validate against a single user which is hard coded.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>These methods should be added to the AccountHelper class.</source>
          <target state="new">These methods should be added to the AccountHelper class.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The next thing you need to do is handle a sign in request from the user.</source>
          <target state="new">The next thing you need to do is handle a sign in request from the user.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In Login.xaml.cs create a new private variable that will hold the current account logging in.</source>
          <target state="new">In Login.xaml.cs create a new private variable that will hold the current account logging in.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Then add a new method call SignInPassport.</source>
          <target state="new">Then add a new method call SignInPassport.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This will validate the account credentials using the AccountHelper.ValidateAccountCredentials method.</source>
          <target state="new">This will validate the account credentials using the AccountHelper.ValidateAccountCredentials method.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This method will return a Boolean value if the entered user name is the same as the hard coded string value you set in the previous step.</source>
          <target state="new">This method will return a Boolean value if the entered user name is the same as the hard coded string value you set in the previous step.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The hard coded value for this sample is "sampleUsername".</source>
          <target state="new">The hard coded value for this sample is "sampleUsername".</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You may have noticed the commented code that was referencing a method in MicrosoftPassportHelper.</source>
          <target state="new">You may have noticed the commented code that was referencing a method in MicrosoftPassportHelper.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In MicrosoftPassportHelper.cs add in a new method called CreatePassportKeyAsync.</source>
          <target state="new">In MicrosoftPassportHelper.cs add in a new method called CreatePassportKeyAsync.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This method uses the Microsoft Passport API in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyCredentialManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn973043)</ept>.</source>
          <target state="new">This method uses the Microsoft Passport API in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyCredentialManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn973043)</ept>.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RequestCreateAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn973048)</ept> will create a Passport key that is specific to the <bpt id="p3">*</bpt>accountId<ept id="p3">*</ept> and the local machine.</source>
          <target state="new">Calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RequestCreateAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn973048)</ept> will create a Passport key that is specific to the <bpt id="p3">*</bpt>accountId<ept id="p3">*</ept> and the local machine.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Please note the comments in the switch statement if you are interested in implementing this in a real world scenario.</source>
          <target state="new">Please note the comments in the switch statement if you are interested in implementing this in a real world scenario.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Now you have created the CreatePassportKeyAsync method, return to the Login.xaml.cs file and uncomment the code inside the SignInPassport method.</source>
          <target state="new">Now you have created the CreatePassportKeyAsync method, return to the Login.xaml.cs file and uncomment the code inside the SignInPassport method.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
          <target state="new">Build and run the application.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You will be taken to the Login page.</source>
          <target state="new">You will be taken to the Login page.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Type in "sampleUsername" and click login.</source>
          <target state="new">Type in "sampleUsername" and click login.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You will be prompted with a Microsoft Passport prompt asking you to enter your PIN.</source>
          <target state="new">You will be prompted with a Microsoft Passport prompt asking you to enter your PIN.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Upon entering your PIN correctly the CreatePassportKeyAsync method will be able to create a Passport key.</source>
          <target state="new">Upon entering your PIN correctly the CreatePassportKeyAsync method will be able to create a Passport key.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Monitor the output windows to see if the messages saying successful are shown.</source>
          <target state="new">Monitor the output windows to see if the messages saying successful are shown.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Exercise 2: Welcome and User Selection Pages</source>
          <target state="new">Exercise 2: Welcome and User Selection Pages</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In this exercise, you will continue from the previous exercise.</source>
          <target state="new">In this exercise, you will continue from the previous exercise.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When a person successfully logs in they should be taken to a welcome page where they can sign out or delete their account.</source>
          <target state="new">When a person successfully logs in they should be taken to a welcome page where they can sign out or delete their account.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>As Passport creates a key for every machine, a user selection screen can be created, which displays all users that have been signed in on that machine.</source>
          <target state="new">As Passport creates a key for every machine, a user selection screen can be created, which displays all users that have been signed in on that machine.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A user can then select one of these accounts and go directly to the welcome screen without needed to re-enter a password as they have already authenticated to access the machine.</source>
          <target state="new">A user can then select one of these accounts and go directly to the welcome screen without needed to re-enter a password as they have already authenticated to access the machine.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the Views folder add a new blank page called "Welcome.xaml".</source>
          <target state="new">In the Views folder add a new blank page called "Welcome.xaml".</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Add the following XAML to complete the user interface.</source>
          <target state="new">Add the following XAML to complete the user interface.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This will display a title, the logged in username, and two buttons.</source>
          <target state="new">This will display a title, the logged in username, and two buttons.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>One of the buttons will navigate back to a user list (that you will create later), and the other button will handle forgetting this user.</source>
          <target state="new">One of the buttons will navigate back to a user list (that you will create later), and the other button will handle forgetting this user.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In the Welcome.xaml.cs code behind file, add a new private variable that will hold the account that is logged in.</source>
          <target state="new">In the Welcome.xaml.cs code behind file, add a new private variable that will hold the account that is logged in.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You will need to implement a method to override the OnNavigateTo event, this will store the account passed to the welcome page.</source>
          <target state="new">You will need to implement a method to override the OnNavigateTo event, this will store the account passed to the welcome page.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You will also need to implement the click event for the two buttons defined in the XAML.</source>
          <target state="new">You will also need to implement the click event for the two buttons defined in the XAML.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You will need a reference to the Models and Utils folders.</source>
          <target state="new">You will need a reference to the Models and Utils folders.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You may have noticed a line commented out in the forget user click event.</source>
          <target state="new">You may have noticed a line commented out in the forget user click event.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The account is being removed from your local list but currently there is no way to be removed from Passport.</source>
          <target state="new">The account is being removed from your local list but currently there is no way to be removed from Passport.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You need to implement a new method in MicrosoftPassportHelper.cs that will handle removing a Passport user.</source>
          <target state="new">You need to implement a new method in MicrosoftPassportHelper.cs that will handle removing a Passport user.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This method will use other Microsoft Passport API’s to open and delete the account.</source>
          <target state="new">This method will use other Microsoft Passport API’s to open and delete the account.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In the real world when you delete an account the server or database should be notified so the user database remains valid.</source>
          <target state="new">In the real world when you delete an account the server or database should be notified so the user database remains valid.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You will need a reference to the Models folder.</source>
          <target state="new">You will need a reference to the Models folder.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Back in Welcome.xaml.cs, uncomment the line that calls RemovePassportAccountAsync.</source>
          <target state="new">Back in Welcome.xaml.cs, uncomment the line that calls RemovePassportAccountAsync.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In the SignInPassport method (of Login.xaml.cs), once the CreatePassportKeyAsync is successful it should navigate to the Welcome screen and pass the Account.</source>
          <target state="new">In the SignInPassport method (of Login.xaml.cs), once the CreatePassportKeyAsync is successful it should navigate to the Welcome screen and pass the Account.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
          <target state="new">Build and run the application.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Login with "sampleUsername" and click login.</source>
          <target state="new">Login with "sampleUsername" and click login.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Enter your PIN and if successful you should be navigated to the welcome screen.</source>
          <target state="new">Enter your PIN and if successful you should be navigated to the welcome screen.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Try clicking forget user and monitor the output window to see if the user was deleted.</source>
          <target state="new">Try clicking forget user and monitor the output window to see if the user was deleted.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Notice that when the user is deleted you remain on the welcome page.</source>
          <target state="new">Notice that when the user is deleted you remain on the welcome page.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You will need to create a user selection page that the app can navigate to.</source>
          <target state="new">You will need to create a user selection page that the app can navigate to.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In the Views folder create a new blank page called "UserSelection.xaml" and add the following XAML to define the user interface.</source>
          <target state="new">In the Views folder create a new blank page called "UserSelection.xaml" and add the following XAML to define the user interface.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This page will contain a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242878)</ept> that displays all the users in the local accounts list, and a Button that will navigate to the login page to allow the user to add another account.</source>
          <target state="new">This page will contain a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242878)</ept> that displays all the users in the local accounts list, and a Button that will navigate to the login page to allow the user to add another account.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In UserSelection.xaml.cs implement the loaded method that will navigate to the login page if there are no accounts in the local list.</source>
          <target state="new">In UserSelection.xaml.cs implement the loaded method that will navigate to the login page if there are no accounts in the local list.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Also implement the SelectionChanged event for the ListView and a click event for the Button.</source>
          <target state="new">Also implement the SelectionChanged event for the ListView and a click event for the Button.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>There are a few places in the app where you want to navigated to the UserSelection page.</source>
          <target state="new">There are a few places in the app where you want to navigated to the UserSelection page.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml.cs you should navigate to the UserSelection page instead of the Login page.</source>
          <target state="new">In MainPage.xaml.cs you should navigate to the UserSelection page instead of the Login page.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>While you are in the loaded event in MainPage you will need to load the accounts list so that the UserSelection page can check if there are any accounts.</source>
          <target state="new">While you are in the loaded event in MainPage you will need to load the accounts list so that the UserSelection page can check if there are any accounts.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This will require changing the loaded method to be async and also adding a reference to the Utils folder.</source>
          <target state="new">This will require changing the loaded method to be async and also adding a reference to the Utils folder.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Next you will want to navigate to the UserSelection page from the Welcome page.</source>
          <target state="new">Next you will want to navigate to the UserSelection page from the Welcome page.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In both click events you should navigate back to the UserSelection page.</source>
          <target state="new">In both click events you should navigate back to the UserSelection page.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In the Login page you need code to log in to the account selected from the list in the UserSelection page.</source>
          <target state="new">In the Login page you need code to log in to the account selected from the list in the UserSelection page.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>In OnNavigatedTo event store the account passed to the navigation.</source>
          <target state="new">In OnNavigatedTo event store the account passed to the navigation.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Start by adding a new private variable that will identify if the account is an existing account.</source>
          <target state="new">Start by adding a new private variable that will identify if the account is an existing account.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Then handle the OnNavigatedTo event.</source>
          <target state="new">Then handle the OnNavigatedTo event.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The SignInPassport method will need to be updated to sign in to the selected account.</source>
          <target state="new">The SignInPassport method will need to be updated to sign in to the selected account.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The MicrosoftPassportHelper will need another method to open the account with Passport, as the account already has a Passport key created for it.</source>
          <target state="new">The MicrosoftPassportHelper will need another method to open the account with Passport, as the account already has a Passport key created for it.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Implement the new method in MicrosoftPassportHelper.cs to sign in an existing user with passport.</source>
          <target state="new">Implement the new method in MicrosoftPassportHelper.cs to sign in an existing user with passport.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For information on each part of the code please read through the code comments.</source>
          <target state="new">For information on each part of the code please read through the code comments.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Update the SignInPassport method in Login.xaml.cs to handle the existing account.</source>
          <target state="new">Update the SignInPassport method in Login.xaml.cs to handle the existing account.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This will use the new method in the MicrosoftPassportHelper.cs.</source>
          <target state="new">This will use the new method in the MicrosoftPassportHelper.cs.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If successful the account will be signed in and the user navigated to the welcome screen.</source>
          <target state="new">If successful the account will be signed in and the user navigated to the welcome screen.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
          <target state="new">Build and run the application.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Login with "sampleUsername".</source>
          <target state="new">Login with "sampleUsername".</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Type in your PIN and if successful you will be navigated to the Welcome screen.</source>
          <target state="new">Type in your PIN and if successful you will be navigated to the Welcome screen.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Click back to user list.</source>
          <target state="new">Click back to user list.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You should now see a user in the list.</source>
          <target state="new">You should now see a user in the list.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you click on this Passport enables you to sign back in without having to re-enter any passwords etc.</source>
          <target state="new">If you click on this Passport enables you to sign back in without having to re-enter any passwords etc.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Exercise 3: Registering a new Passport user</source>
          <target state="new">Exercise 3: Registering a new Passport user</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>In this exercise you will be creating a new page that will create a new account with Passport.</source>
          <target state="new">In this exercise you will be creating a new page that will create a new account with Passport.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This will work similarly to how the Login page works.</source>
          <target state="new">This will work similarly to how the Login page works.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The Login page is implemented for an existing user that is migrating to use Passport.</source>
          <target state="new">The Login page is implemented for an existing user that is migrating to use Passport.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A PassportRegister page will create Passport registration for a new user.</source>
          <target state="new">A PassportRegister page will create Passport registration for a new user.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>In the views folder create a new blank page called "PassportRegister.xaml".</source>
          <target state="new">In the views folder create a new blank page called "PassportRegister.xaml".</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In the XAML add in the following to setup the user interface.</source>
          <target state="new">In the XAML add in the following to setup the user interface.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The interface here is similar to the Login page.</source>
          <target state="new">The interface here is similar to the Login page.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In the PassportRegister.xaml.cs code behind file implement a private Account variable and a click event for the register Button.</source>
          <target state="new">In the PassportRegister.xaml.cs code behind file implement a private Account variable and a click event for the register Button.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This will add a new local account and create a Passport key.</source>
          <target state="new">This will add a new local account and create a Passport key.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>You need to navigate to this page from the Login page when register is clicked.</source>
          <target state="new">You need to navigate to this page from the Login page when register is clicked.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
          <target state="new">Build and run the application.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Try to register a new user.</source>
          <target state="new">Try to register a new user.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Then return to the user list and validate that you can select that user and login.</source>
          <target state="new">Then return to the user list and validate that you can select that user and login.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>In this lab you have learned the essential skills you need to use the new Microsoft Passport API to authenticate existing users and create accounts for new users.</source>
          <target state="new">In this lab you have learned the essential skills you need to use the new Microsoft Passport API to authenticate existing users and create accounts for new users.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>With this new knowledge you can start removing the need for users to remember passwords for your application, yet remain confident that your applications remain protected by user authentication.</source>
          <target state="new">With this new knowledge you can start removing the need for users to remember passwords for your application, yet remain confident that your applications remain protected by user authentication.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Windows 10 uses the Passport technology to support the biometrics login of Windows Hello.</source>
          <target state="new">Windows 10 uses the Passport technology to support the biometrics login of Windows Hello.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If you have been using a machine that supports Windows Hello you will have seen that this set of exercises already supports Windows Hello.</source>
          <target state="new">If you have been using a machine that supports Windows Hello you will have seen that this set of exercises already supports Windows Hello.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>There is no extra work you as a developer need to do in order to support Windows Hello once you have implemented support for Microsoft Passport.</source>
          <target state="new">There is no extra work you as a developer need to do in order to support Windows Hello once you have implemented support for Microsoft Passport.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Microsoft Passport and Windows Hello</source>
          <target state="new">Microsoft Passport and Windows Hello</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Microsoft Passport login service</source>
          <target state="new">Microsoft Passport login service</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>