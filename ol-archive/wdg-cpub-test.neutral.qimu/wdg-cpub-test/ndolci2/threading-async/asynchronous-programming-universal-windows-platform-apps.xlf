<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\threading-async\asynchronous-programming-universal-windows-platform-apps.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a0f4772e002479333abf6a271468269c4f46deb</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Asynchronous programming</source>
          <target state="new">Asynchronous programming</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C<ph id="ph1">\+\+</ph> component extensions (C<ph id="ph2">\+\+</ph>/CX), and JavaScript.</source>
          <target state="new">This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C<ph id="ph1">\+\+</ph> component extensions (C<ph id="ph2">\+\+</ph>/CX), and JavaScript.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Asynchronous programming</source>
          <target state="new">Asynchronous programming</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C++ component extensions (C++/CX), and JavaScript.</source>
          <target state="new">This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C++ component extensions (C++/CX), and JavaScript.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using asynchronous programming helps your app stay responsive when it does work that might take an extended amount of time.</source>
          <target state="new">Using asynchronous programming helps your app stay responsive when it does work that might take an extended amount of time.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, an app that downloads content from the Internet might spend several seconds waiting for the content to arrive.</source>
          <target state="new">For example, an app that downloads content from the Internet might spend several seconds waiting for the content to arrive.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you used a synchronous method on the UI thread to retrieve the content, the app is blocked until the method returns.</source>
          <target state="new">If you used a synchronous method on the UI thread to retrieve the content, the app is blocked until the method returns.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The app won't respond to user interaction, and because it seems non-responsive, the user might become frustrated.</source>
          <target state="new">The app won't respond to user interaction, and because it seems non-responsive, the user might become frustrated.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A much better way is to use asynchronous programming, where the app continues to run and respond to the UI while it waits for an operation to complete.</source>
          <target state="new">A much better way is to use asynchronous programming, where the app continues to run and respond to the UI while it waits for an operation to complete.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For methods that might take a long time to complete, asynchronous programming is the norm and not the exception in the UWP.</source>
          <target state="new">For methods that might take a long time to complete, asynchronous programming is the norm and not the exception in the UWP.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>JavaScript, C#, Visual Basic, and C++/CX each provide language support for asynchronous methods.</source>
          <target state="new">JavaScript, C#, Visual Basic, and C++/CX each provide language support for asynchronous methods.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Asynchronous programming in the UWP</source>
          <target state="new">Asynchronous programming in the UWP</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Many UWP features like the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaCapture<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR241124)</ept> APIs and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StorageFile<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227171)</ept> APIs are exposed as asynchronous APIs.</source>
          <target state="new">Many UWP features like the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaCapture<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR241124)</ept> APIs and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StorageFile<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227171)</ept> APIs are exposed as asynchronous APIs.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By convention, the names of asynchronous APIs end with "Async" to indicate that part of their execution may take place after the API has been invoked.</source>
          <target state="new">By convention, the names of asynchronous APIs end with "Async" to indicate that part of their execution may take place after the API has been invoked.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you use asynchronous APIs in your Universal Windows Platform (UWP) app, your code makes non-blocking calls in a consistent way.</source>
          <target state="new">When you use asynchronous APIs in your Universal Windows Platform (UWP) app, your code makes non-blocking calls in a consistent way.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you implement these asynchronous patterns in your own API definitions, callers can understand and use your code in a predictable way.</source>
          <target state="new">When you implement these asynchronous patterns in your own API definitions, callers can understand and use your code in a predictable way.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Here are some common tasks that require calling asynchronous UWP APIs.</source>
          <target state="new">Here are some common tasks that require calling asynchronous UWP APIs.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Displaying a message dialog</source>
          <target state="new">Displaying a message dialog</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Working with the file system, displaying a file picker</source>
          <target state="new">Working with the file system, displaying a file picker</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Sending and receiving data to and from the Internet</source>
          <target state="new">Sending and receiving data to and from the Internet</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Using sockets, streams, connectivity</source>
          <target state="new">Using sockets, streams, connectivity</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Working with appointments, contacts, calendar</source>
          <target state="new">Working with appointments, contacts, calendar</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Working with file types, such as opening Portable Document Format (PDF) files or decoding image or media formats</source>
          <target state="new">Working with file types, such as opening Portable Document Format (PDF) files or decoding image or media formats</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Interacting with a device or a service</source>
          <target state="new">Interacting with a device or a service</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>With UWP asynchronous pattern, you may be able to avoid explicitly manage threads at all.</source>
          <target state="new">With UWP asynchronous pattern, you may be able to avoid explicitly manage threads at all.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each programming language supports the asynchronous pattern for the UWP in its own way:</source>
          <target state="new">Each programming language supports the asynchronous pattern for the UWP in its own way:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Programming language</source>
          <target state="new">Programming language</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Asynchronous representation</source>
          <target state="new">Asynchronous representation</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>async<ept id="p1">**</ept> keyword, <bpt id="p2">**</bpt>await<ept id="p2">**</ept> operator</source>
          <target state="new"><bpt id="p1">**</bpt>async<ept id="p1">**</ept> keyword, <bpt id="p2">**</bpt>await<ept id="p2">**</ept> operator</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Visual Basic</source>
          <target state="new">Visual Basic</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Async<ept id="p1">**</ept> keyword, <bpt id="p2">**</bpt>Await<ept id="p2">**</ept> operator</source>
          <target state="new"><bpt id="p1">**</bpt>Async<ept id="p1">**</ept> keyword, <bpt id="p2">**</bpt>Await<ept id="p2">**</ept> operator</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>C++/CX</source>
          <target state="new">C++/CX</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>task<ept id="p1">**</ept> class, <bpt id="p2">**</bpt>.then<ept id="p2">**</ept> method</source>
          <target state="new"><bpt id="p1">**</bpt>task<ept id="p1">**</ept> class, <bpt id="p2">**</bpt>.then<ept id="p2">**</ept> method</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="new">JavaScript</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>promise object, <bpt id="p1">**</bpt>then<ept id="p1">**</ept> function</source>
          <target state="new">promise object, <bpt id="p1">**</bpt>then<ept id="p1">**</ept> function</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Asynchronous patterns in UWP using C# and Visual Basic</source>
          <target state="new">Asynchronous patterns in UWP using C# and Visual Basic</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A typical segment of code written in C# or Visual Basic executes synchronously, meaning that when a line executes, it finishes before the next line executes.</source>
          <target state="new">A typical segment of code written in C# or Visual Basic executes synchronously, meaning that when a line executes, it finishes before the next line executes.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There have been previous Microsoft .NET programming models for asynchronous execution, but the resulting code tends to emphasize the mechanics of executing asynchronous code instead of focusing on the task that the code is trying to accomplish.</source>
          <target state="new">There have been previous Microsoft .NET programming models for asynchronous execution, but the resulting code tends to emphasize the mechanics of executing asynchronous code instead of focusing on the task that the code is trying to accomplish.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The UWP, .NET framework, and C# and Visual Basic compilers have added features that abstract the asynchronous mechanics out of your code.</source>
          <target state="new">The UWP, .NET framework, and C# and Visual Basic compilers have added features that abstract the asynchronous mechanics out of your code.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For .NET and the UWP you can write asynchronous code that focuses on what your code does instead of how and when to do it.</source>
          <target state="new">For .NET and the UWP you can write asynchronous code that focuses on what your code does instead of how and when to do it.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Your asynchronous code will look reasonably similar to synchronous code.</source>
          <target state="new">Your asynchronous code will look reasonably similar to synchronous code.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id="p1">](call-asynchronous-apis-in-csharp-or-visual-basic.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id="p1">](call-asynchronous-apis-in-csharp-or-visual-basic.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Asynchronous patterns in UWP with C++</source>
          <target state="new">Asynchronous patterns in UWP with C++</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In C++/CX, asynchronous programming is based on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>task class<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750113.aspx)</ept>, and its <bpt id="p3">[</bpt><bpt id="p4">**</bpt>then method<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750044.aspx)</ept>.</source>
          <target state="new">In C++/CX, asynchronous programming is based on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>task class<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750113.aspx)</ept>, and its <bpt id="p3">[</bpt><bpt id="p4">**</bpt>then method<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750044.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The syntax is similar to that of JavaScript promises.</source>
          <target state="new">The syntax is similar to that of JavaScript promises.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>task class<ept id="p1">**</ept> and its related types also provide the capability for cancellation and management of the thread context.</source>
          <target state="new">The <bpt id="p1">**</bpt>task class<ept id="p1">**</ept> and its related types also provide the capability for cancellation and management of the thread context.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](asynchronous-programming-in-cpp-universal-windows-platform-apps.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](asynchronous-programming-in-cpp-universal-windows-platform-apps.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>create<ph id="ph1">\_</ph>async function<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750102.aspx)</ept> provides support for producing asynchronous APIs that can be consumed from JavaScript or any other language that supports the UWP.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>create<ph id="ph1">\_</ph>async function<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750102.aspx)</ept> provides support for producing asynchronous APIs that can be consumed from JavaScript or any other language that supports the UWP.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Creating Asynchronous Operations in C++<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750082.aspx)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Creating Asynchronous Operations in C++<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750082.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Asynchronous patterns in UWP using JavaScript</source>
          <target state="new">Asynchronous patterns in UWP using JavaScript</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In JavaScript, asynchronous programming follows the <bpt id="p1">[</bpt>Common JS Promises/A<ept id="p1">](http://wiki.commonjs.org/wiki/Promises/A)</ept> proposed standard by having asynchronous methods return promise objects.</source>
          <target state="new">In JavaScript, asynchronous programming follows the <bpt id="p1">[</bpt>Common JS Promises/A<ept id="p1">](http://wiki.commonjs.org/wiki/Promises/A)</ept> proposed standard by having asynchronous methods return promise objects.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Promises are used in both the UWP and Windows Library for JavaScript.</source>
          <target state="new">Promises are used in both the UWP and Windows Library for JavaScript.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A promise object represents a value that will be fulfilled in the future.</source>
          <target state="new">A promise object represents a value that will be fulfilled in the future.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the UWP you get a promise object from a factory function, which by convention has a name that ends with "Async".</source>
          <target state="new">In the UWP you get a promise object from a factory function, which by convention has a name that ends with "Async".</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In many cases, calling an asynchronous function is almost as simple as calling a conventional function.</source>
          <target state="new">In many cases, calling an asynchronous function is almost as simple as calling a conventional function.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The difference is that you use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>then<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR229728)</ept> or the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>done<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701079)</ept> method to assign the handlers for results or errors and to start the operation.</source>
          <target state="new">The difference is that you use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>then<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR229728)</ept> or the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>done<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701079)</ept> method to assign the handlers for results or errors and to start the operation.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Call asynchronous APIs in C# or Visual Basic</source>
          <target state="new">Call asynchronous APIs in C# or Visual Basic</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming with Async and Await (C# and Visual Basic)</source>
          <target state="new">Asynchronous Programming with Async and Await (C# and Visual Basic)</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Reversi sample feature scenarios: asynchronous code</source>
          <target state="new">Reversi sample feature scenarios: asynchronous code</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>