<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\accessibility\keyboard-accessibility.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f66209914d1fcdccf3541c28cdf7e4a61d34d8c3</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>If your app does not provide good keyboard access, users who are blind or have mobility issues can have difficulty using your app or may not be able to use it at all.</source>
          <target state="new">If your app does not provide good keyboard access, users who are blind or have mobility issues can have difficulty using your app or may not be able to use it at all.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Keyboard accessibility</source>
          <target state="new">Keyboard accessibility</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Keyboard accessibility</source>
          <target state="new">Keyboard accessibility</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If your app does not provide good keyboard access, users who are blind or have mobility issues can have difficulty using your app or may not be able to use it at all.</source>
          <target state="new">If your app does not provide good keyboard access, users who are blind or have mobility issues can have difficulty using your app or may not be able to use it at all.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Keyboard navigation among UI elements</source>
          <target state="new">Keyboard navigation among UI elements</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To use the keyboard with a control, the control must have focus, and to receive focus (without using a pointer) the control must be accessible in a UI design via tab navigation.</source>
          <target state="new">To use the keyboard with a control, the control must have focus, and to receive focus (without using a pointer) the control must be accessible in a UI design via tab navigation.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By default, the tab order of controls is the same as the order in which they are added to a design surface, listed in XAML, or programmatically added to a container.</source>
          <target state="new">By default, the tab order of controls is the same as the order in which they are added to a design surface, listed in XAML, or programmatically added to a container.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In most cases, the default order based on how you defined controls in XAML is the best order, especially because that is the order in which the controls are read by screen readers.</source>
          <target state="new">In most cases, the default order based on how you defined controls in XAML is the best order, especially because that is the order in which the controls are read by screen readers.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, the default order does not necessarily correspond to the visual order.</source>
          <target state="new">However, the default order does not necessarily correspond to the visual order.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The actual display position might depend on the parent layout container and certain properties that you can set on the child elements to influence the layout.</source>
          <target state="new">The actual display position might depend on the parent layout container and certain properties that you can set on the child elements to influence the layout.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To be sure your app has a good tab order, test this behavior yourself.</source>
          <target state="new">To be sure your app has a good tab order, test this behavior yourself.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Especially if you have a grid metaphor or table metaphor for your layout, the order in which users might read versus the tab order could end up different.</source>
          <target state="new">Especially if you have a grid metaphor or table metaphor for your layout, the order in which users might read versus the tab order could end up different.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>That's not always a problem in and of itself.</source>
          <target state="new">That's not always a problem in and of itself.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>But just make sure to test your app's functionality both as a touchable UI and as a keyboard-accessible UI and verify that your UI makes sense either way.</source>
          <target state="new">But just make sure to test your app's functionality both as a touchable UI and as a keyboard-accessible UI and verify that your UI makes sense either way.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can make the tab order match the visual order by adjusting the XAML.</source>
          <target state="new">You can make the tab order match the visual order by adjusting the XAML.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Or you can override the default tab order by setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> property, as shown in the following example of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> layout that uses column-first tab navigation.</source>
          <target state="new">Or you can override the default tab order by setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> property, as shown in the following example of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> layout that uses column-first tab navigation.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>XAML</source>
          <target state="new">XAML</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>TextBlock Grid.Column=<ph id="ph1">&amp;quot;</ph>1<ph id="ph2">&amp;quot;</ph> HorizontalAlignment=<ph id="ph3">&amp;quot;</ph>Center<ph id="ph4">&amp;quot;&amp;gt;</ph>Groom<ph id="ph5">&amp;lt;</ph>/TextBlock<ph id="ph6">&amp;gt;
</ph>  <ph id="ph7">&amp;lt;</ph>TextBlock Grid.Column=<ph id="ph8">&amp;quot;</ph>2<ph id="ph9">&amp;quot;</ph> HorizontalAlignment=<ph id="ph10">&amp;quot;</ph>Center<ph id="ph11">&amp;quot;&amp;gt;</ph>Bride<ph id="ph12">&amp;lt;</ph>/TextBlock</source>
          <target state="new">TextBlock Grid.Column=<ph id="ph1">&amp;quot;</ph>1<ph id="ph2">&amp;quot;</ph> HorizontalAlignment=<ph id="ph3">&amp;quot;</ph>Center<ph id="ph4">&amp;quot;&amp;gt;</ph>Groom<ph id="ph5">&amp;lt;</ph>/TextBlock<ph id="ph6">&amp;gt;
</ph>  <ph id="ph7">&amp;lt;</ph>TextBlock Grid.Column=<ph id="ph8">&amp;quot;</ph>2<ph id="ph9">&amp;quot;</ph> HorizontalAlignment=<ph id="ph10">&amp;quot;</ph>Center<ph id="ph11">&amp;quot;&amp;gt;</ph>Bride<ph id="ph12">&amp;lt;</ph>/TextBlock</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>TextBlock Grid.Row=<ph id="ph1">&amp;quot;</ph>1<ph id="ph2">&amp;quot;&amp;gt;</ph>First name<ph id="ph3">&amp;lt;</ph>/TextBlock<ph id="ph4">&amp;gt;
</ph>  <ph id="ph5">&amp;lt;</ph>TextBox x:Name=<ph id="ph6">&amp;quot;</ph>GroomFirstName<ph id="ph7">&amp;quot;</ph> Grid.Row=<ph id="ph8">&amp;quot;</ph>1<ph id="ph9">&amp;quot;</ph> Grid.Column=<ph id="ph10">&amp;quot;</ph>1<ph id="ph11">&amp;quot;</ph> TabIndex=<ph id="ph12">&amp;quot;</ph>1<ph id="ph13">&amp;quot;/&amp;gt;
</ph>  <ph id="ph14">&amp;lt;</ph>TextBox x:Name=<ph id="ph15">&amp;quot;</ph>BrideFirstName<ph id="ph16">&amp;quot;</ph> Grid.Row=<ph id="ph17">&amp;quot;</ph>1<ph id="ph18">&amp;quot;</ph> Grid.Column=<ph id="ph19">&amp;quot;</ph>2<ph id="ph20">&amp;quot;</ph> TabIndex=<ph id="ph21">&amp;quot;</ph>3</source>
          <target state="new">TextBlock Grid.Row=<ph id="ph1">&amp;quot;</ph>1<ph id="ph2">&amp;quot;&amp;gt;</ph>First name<ph id="ph3">&amp;lt;</ph>/TextBlock<ph id="ph4">&amp;gt;
</ph>  <ph id="ph5">&amp;lt;</ph>TextBox x:Name=<ph id="ph6">&amp;quot;</ph>GroomFirstName<ph id="ph7">&amp;quot;</ph> Grid.Row=<ph id="ph8">&amp;quot;</ph>1<ph id="ph9">&amp;quot;</ph> Grid.Column=<ph id="ph10">&amp;quot;</ph>1<ph id="ph11">&amp;quot;</ph> TabIndex=<ph id="ph12">&amp;quot;</ph>1<ph id="ph13">&amp;quot;/&amp;gt;
</ph>  <ph id="ph14">&amp;lt;</ph>TextBox x:Name=<ph id="ph15">&amp;quot;</ph>BrideFirstName<ph id="ph16">&amp;quot;</ph> Grid.Row=<ph id="ph17">&amp;quot;</ph>1<ph id="ph18">&amp;quot;</ph> Grid.Column=<ph id="ph19">&amp;quot;</ph>2<ph id="ph20">&amp;quot;</ph> TabIndex=<ph id="ph21">&amp;quot;</ph>3</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>TextBlock Grid.Row=<ph id="ph1">&amp;quot;</ph>2<ph id="ph2">&amp;quot;&amp;gt;</ph>Last name<ph id="ph3">&amp;lt;</ph>/TextBlock<ph id="ph4">&amp;gt;
</ph>  <ph id="ph5">&amp;lt;</ph>TextBox x:Name=<ph id="ph6">&amp;quot;</ph>GroomLastName<ph id="ph7">&amp;quot;</ph> Grid.Row=<ph id="ph8">&amp;quot;</ph>2<ph id="ph9">&amp;quot;</ph> Grid.Column=<ph id="ph10">&amp;quot;</ph>1<ph id="ph11">&amp;quot;</ph> TabIndex=<ph id="ph12">&amp;quot;</ph>2<ph id="ph13">&amp;quot;/&amp;gt;
</ph>  <ph id="ph14">&amp;lt;</ph>TextBox x:Name=<ph id="ph15">&amp;quot;</ph>BrideLastName<ph id="ph16">&amp;quot;</ph> Grid.Row=<ph id="ph17">&amp;quot;</ph>2<ph id="ph18">&amp;quot;</ph> Grid.Column=<ph id="ph19">&amp;quot;</ph>2<ph id="ph20">&amp;quot;</ph> TabIndex=<ph id="ph21">&amp;quot;</ph>4<ph id="ph22">&amp;quot;/&amp;gt;
&amp;lt;</ph>/Grid</source>
          <target state="new">TextBlock Grid.Row=<ph id="ph1">&amp;quot;</ph>2<ph id="ph2">&amp;quot;&amp;gt;</ph>Last name<ph id="ph3">&amp;lt;</ph>/TextBlock<ph id="ph4">&amp;gt;
</ph>  <ph id="ph5">&amp;lt;</ph>TextBox x:Name=<ph id="ph6">&amp;quot;</ph>GroomLastName<ph id="ph7">&amp;quot;</ph> Grid.Row=<ph id="ph8">&amp;quot;</ph>2<ph id="ph9">&amp;quot;</ph> Grid.Column=<ph id="ph10">&amp;quot;</ph>1<ph id="ph11">&amp;quot;</ph> TabIndex=<ph id="ph12">&amp;quot;</ph>2<ph id="ph13">&amp;quot;/&amp;gt;
</ph>  <ph id="ph14">&amp;lt;</ph>TextBox x:Name=<ph id="ph15">&amp;quot;</ph>BrideLastName<ph id="ph16">&amp;quot;</ph> Grid.Row=<ph id="ph17">&amp;quot;</ph>2<ph id="ph18">&amp;quot;</ph> Grid.Column=<ph id="ph19">&amp;quot;</ph>2<ph id="ph20">&amp;quot;</ph> TabIndex=<ph id="ph21">&amp;quot;</ph>4<ph id="ph22">&amp;quot;/&amp;gt;
&amp;lt;</ph>/Grid</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You may want to exclude a control from the tab order.</source>
          <target state="new">You may want to exclude a control from the tab order.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You typically do this only by making the control noninteractive, for example by setting its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsEnabled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209419)</ept> property to <bpt id="p3">**</bpt>false<ept id="p3">**</ept>.</source>
          <target state="new">You typically do this only by making the control noninteractive, for example by setting its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsEnabled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209419)</ept> property to <bpt id="p3">**</bpt>false<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A disabled control is automatically excluded from the tab order.</source>
          <target state="new">A disabled control is automatically excluded from the tab order.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>But occasionally you might want to exclude a control from the tab order even if it is not disabled.</source>
          <target state="new">But occasionally you might want to exclude a control from the tab order even if it is not disabled.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this case, you can set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsTabStop<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209422)</ept> property to <bpt id="p3">**</bpt>false<ept id="p3">**</ept>.</source>
          <target state="new">In this case, you can set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsTabStop<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209422)</ept> property to <bpt id="p3">**</bpt>false<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any elements that can have focus are usually in the tab order by default.</source>
          <target state="new">Any elements that can have focus are usually in the tab order by default.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The exception to this is that certain text-display types such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RichTextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227565)</ept> can have focus so that they can be accessed by the clipboard for text selection; however, they're not in the tab order because it is not expected for static text elements to be in the tab order.</source>
          <target state="new">The exception to this is that certain text-display types such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RichTextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227565)</ept> can have focus so that they can be accessed by the clipboard for text selection; however, they're not in the tab order because it is not expected for static text elements to be in the tab order.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>They're not conventionally interactive (they can't be invoked, and don't require text input, but do support the <bpt id="p1">[</bpt>Text control pattern<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671194)</ept> that supports finding and adjusting selection points in text).</source>
          <target state="new">They're not conventionally interactive (they can't be invoked, and don't require text input, but do support the <bpt id="p1">[</bpt>Text control pattern<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671194)</ept> that supports finding and adjusting selection points in text).</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Text should not have the connotation that setting focus to it will enable some action that's possible.</source>
          <target state="new">Text should not have the connotation that setting focus to it will enable some action that's possible.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Text elements will still be detected by assistive technologies, and read aloud in screen readers, but that relies on techniques other than finding those elements in the practical tab order.</source>
          <target state="new">Text elements will still be detected by assistive technologies, and read aloud in screen readers, but that relies on techniques other than finding those elements in the practical tab order.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Whether you adjust <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> values or use the default order, these rules apply:</source>
          <target state="new">Whether you adjust <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> values or use the default order, these rules apply:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>UI elements with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> equal to 0 are added to the tab order based on declaration order in XAML or child collections.</source>
          <target state="new">UI elements with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> equal to 0 are added to the tab order based on declaration order in XAML or child collections.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>UI elements with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> greater than 0 are added to the tab order based on the <bpt id="p3">**</bpt>TabIndex<ept id="p3">**</ept> value.</source>
          <target state="new">UI elements with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> greater than 0 are added to the tab order based on the <bpt id="p3">**</bpt>TabIndex<ept id="p3">**</ept> value.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>UI elements with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> less than 0 are added to the tab order and appear before any zero value.</source>
          <target state="new">UI elements with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209461)</ept> less than 0 are added to the tab order and appear before any zero value.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This potentially differs from HTML's handling of its <bpt id="p1">**</bpt>tabindex<ept id="p1">**</ept> attribute (and negative <bpt id="p2">**</bpt>tabindex<ept id="p2">**</ept> was not supported in older HTML specifications).</source>
          <target state="new">This potentially differs from HTML's handling of its <bpt id="p1">**</bpt>tabindex<ept id="p1">**</ept> attribute (and negative <bpt id="p2">**</bpt>tabindex<ept id="p2">**</ept> was not supported in older HTML specifications).</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Keyboard navigation within a UI element</source>
          <target state="new">Keyboard navigation within a UI element</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For composite elements, it is important to ensure proper inner navigation among the contained elements.</source>
          <target state="new">For composite elements, it is important to ensure proper inner navigation among the contained elements.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A composite element can manage its current active child to reduce the overhead of having all child elements able to have focus.</source>
          <target state="new">A composite element can manage its current active child to reduce the overhead of having all child elements able to have focus.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Such a composite element is included in the tab order, and it handles keyboard navigation events itself.</source>
          <target state="new">Such a composite element is included in the tab order, and it handles keyboard navigation events itself.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Many of the composite controls already have some inner navigation logic built into the into control's event handling.</source>
          <target state="new">Many of the composite controls already have some inner navigation logic built into the into control's event handling.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, arrow-key traversal of items is enabled by default on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242704view)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ListBox<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242868)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>FlipView<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242678)</ept> controls.</source>
          <target state="new">For example, arrow-key traversal of items is enabled by default on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242704view)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ListBox<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242868)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>FlipView<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242678)</ept> controls.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Keyboard alternatives to pointer actions and events for specific control elements</source>
          <target state="new">Keyboard alternatives to pointer actions and events for specific control elements</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Ensure that UI elements that can be clicked can also be invoked by using the keyboard.</source>
          <target state="new">Ensure that UI elements that can be clicked can also be invoked by using the keyboard.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To use the keyboard with a UI element, the element must have focus.</source>
          <target state="new">To use the keyboard with a UI element, the element must have focus.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Only classes that derive from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept> support focus and tab navigation.</source>
          <target state="new">Only classes that derive from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept> support focus and tab navigation.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For UI elements that can be invoked, implement keyboard event handlers for the Spacebar and Enter keys.</source>
          <target state="new">For UI elements that can be invoked, implement keyboard event handlers for the Spacebar and Enter keys.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This makes the basic keyboard accessibility support complete and enables users to accomplish basic app scenarios by using only the keyboard; that is, users can reach all interactive UI elements and activate the default functionality.</source>
          <target state="new">This makes the basic keyboard accessibility support complete and enables users to accomplish basic app scenarios by using only the keyboard; that is, users can reach all interactive UI elements and activate the default functionality.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In cases where an element that you want to use in the UI cannot have focus, you could create your own custom control.</source>
          <target state="new">In cases where an element that you want to use in the UI cannot have focus, you could create your own custom control.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You must set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsTabStop<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209422)</ept> property to <bpt id="p3">**</bpt>true<ept id="p3">**</ept> to enable focus and you must provide a visual indication of the focused state by creating a visual state that decorates the UI with a focus indicator.</source>
          <target state="new">You must set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsTabStop<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209422)</ept> property to <bpt id="p3">**</bpt>true<ept id="p3">**</ept> to enable focus and you must provide a visual indication of the focused state by creating a visual state that decorates the UI with a focus indicator.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, it is often easier to use control composition so that the support for tab stops, focus, and Microsoft UI Automation peers and patterns are handled by the control within which you choose to compose your content.</source>
          <target state="new">However, it is often easier to use control composition so that the support for tab stops, focus, and Microsoft UI Automation peers and patterns are handled by the control within which you choose to compose your content.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, instead of handling a pointer-pressed event on an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept>, you could wrap that element in a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Button<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> to get pointer, keyboard, and focus support.</source>
          <target state="new">For example, instead of handling a pointer-pressed event on an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept>, you could wrap that element in a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Button<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> to get pointer, keyboard, and focus support.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>XAML</source>
          <target state="new">XAML</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>!--Do this instead.--<ph id="ph1">&amp;gt;
&amp;lt;</ph>Button Click=<ph id="ph2">&amp;quot;</ph>Button_Click<ph id="ph3">&amp;quot;&amp;gt;&amp;lt;</ph>Image Source=<ph id="ph4">&amp;quot;</ph>sample.jpg<ph id="ph5">&amp;quot;/&amp;gt;&amp;lt;</ph>/Button</source>
          <target state="new">!--Do this instead.--<ph id="ph1">&amp;gt;
&amp;lt;</ph>Button Click=<ph id="ph2">&amp;quot;</ph>Button_Click<ph id="ph3">&amp;quot;&amp;gt;&amp;lt;</ph>Image Source=<ph id="ph4">&amp;quot;</ph>sample.jpg<ph id="ph5">&amp;quot;/&amp;gt;&amp;lt;</ph>/Button</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Keyboard shortcuts</source>
          <target state="new">Keyboard shortcuts</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In addition to implementing keyboard navigation and activation for your app, it is a good practice to implement shortcuts for your app's functionality.</source>
          <target state="new">In addition to implementing keyboard navigation and activation for your app, it is a good practice to implement shortcuts for your app's functionality.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Tab navigation provides a good, basic level of keyboard support, but with complex forms you may want to add support for shortcut keys as well.</source>
          <target state="new">Tab navigation provides a good, basic level of keyboard support, but with complex forms you may want to add support for shortcut keys as well.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This can make your application more efficient to use, even for people who use both a keyboard and pointing devices.</source>
          <target state="new">This can make your application more efficient to use, even for people who use both a keyboard and pointing devices.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>shortcut<ept id="p1">*</ept> is a keyboard combination that enhances productivity by providing an efficient way for the user to access app functionality.</source>
          <target state="new">A <bpt id="p1">*</bpt>shortcut<ept id="p1">*</ept> is a keyboard combination that enhances productivity by providing an efficient way for the user to access app functionality.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>There are two kinds of shortcut:</source>
          <target state="new">There are two kinds of shortcut:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>access key<ept id="p1">*</ept> is a shortcut to a piece of UI in your app.</source>
          <target state="new">An <bpt id="p1">*</bpt>access key<ept id="p1">*</ept> is a shortcut to a piece of UI in your app.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Access keys consist of the Alt key plus a letter key.</source>
          <target state="new">Access keys consist of the Alt key plus a letter key.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>accelerator key<ept id="p1">*</ept> is a shortcut to an app command.</source>
          <target state="new">An <bpt id="p1">*</bpt>accelerator key<ept id="p1">*</ept> is a shortcut to an app command.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Your app may or may not have UI that corresponds exactly to the command.</source>
          <target state="new">Your app may or may not have UI that corresponds exactly to the command.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Accelerator keys consist of the Ctrl key plus a letter key.</source>
          <target state="new">Accelerator keys consist of the Ctrl key plus a letter key.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It is imperative that you provide an easy way for users who rely on screen readers and other assistive technology to discover your app's shortcut keys.</source>
          <target state="new">It is imperative that you provide an easy way for users who rely on screen readers and other assistive technology to discover your app's shortcut keys.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Communicate shortcut keys by using tooltips, accessible names, accessible descriptions, or some other form of on-screen communication.</source>
          <target state="new">Communicate shortcut keys by using tooltips, accessible names, accessible descriptions, or some other form of on-screen communication.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>At a minimum, shortcut keys should be well documented in your app's Help content.</source>
          <target state="new">At a minimum, shortcut keys should be well documented in your app's Help content.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can document access keys through screen readers by setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessKey<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759763)</ept> attached property to a string that describes the shortcut key.</source>
          <target state="new">You can document access keys through screen readers by setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessKey<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759763)</ept> attached property to a string that describes the shortcut key.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>There is also an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AcceleratorKey<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759762)</ept> attached property for documenting non-mnemonic shortcut keys, although screen readers generally treat both properties the same way.</source>
          <target state="new">There is also an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AcceleratorKey<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759762)</ept> attached property for documenting non-mnemonic shortcut keys, although screen readers generally treat both properties the same way.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Try to document shortcut keys in multiple ways, using tooltips, automation properties, and written Help documentation.</source>
          <target state="new">Try to document shortcut keys in multiple ways, using tooltips, automation properties, and written Help documentation.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to document shortcut keys for media play, pause, and stop buttons.</source>
          <target state="new">The following example demonstrates how to document shortcut keys for media play, pause, and stop buttons.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>XAML</source>
          <target state="new">XAML</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Grid.RowDefinitions<ph id="ph1">&amp;gt;
</ph>    <ph id="ph2">&amp;lt;</ph>RowDefinition Height=<ph id="ph3">&amp;quot;</ph>Auto<ph id="ph4">&amp;quot; /&amp;gt;
</ph>    <ph id="ph5">&amp;lt;</ph>RowDefinition Height=<ph id="ph6">&amp;quot;</ph>Auto<ph id="ph7">&amp;quot; /&amp;gt;
</ph>  <ph id="ph8">&amp;lt;</ph>/Grid.RowDefinitions</source>
          <target state="new">Grid.RowDefinitions<ph id="ph1">&amp;gt;
</ph>    <ph id="ph2">&amp;lt;</ph>RowDefinition Height=<ph id="ph3">&amp;quot;</ph>Auto<ph id="ph4">&amp;quot; /&amp;gt;
</ph>    <ph id="ph5">&amp;lt;</ph>RowDefinition Height=<ph id="ph6">&amp;quot;</ph>Auto<ph id="ph7">&amp;quot; /&amp;gt;
</ph>  <ph id="ph8">&amp;lt;</ph>/Grid.RowDefinitions</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>MediaElement x:Name=<ph id="ph1">&amp;quot;</ph>DemoMovie<ph id="ph2">&amp;quot;</ph> Source=<ph id="ph3">&amp;quot;</ph>xbox.wmv<ph id="ph4">&amp;quot; 
</ph>    Width=<ph id="ph5">&amp;quot;</ph>500<ph id="ph6">&amp;quot;</ph> Height=<ph id="ph7">&amp;quot;</ph>500<ph id="ph8">&amp;quot;</ph> Margin=<ph id="ph9">&amp;quot;</ph>20<ph id="ph10">&amp;quot;</ph> HorizontalAlignment=<ph id="ph11">&amp;quot;</ph>Center</source>
          <target state="new">MediaElement x:Name=<ph id="ph1">&amp;quot;</ph>DemoMovie<ph id="ph2">&amp;quot;</ph> Source=<ph id="ph3">&amp;quot;</ph>xbox.wmv<ph id="ph4">&amp;quot; 
</ph>    Width=<ph id="ph5">&amp;quot;</ph>500<ph id="ph6">&amp;quot;</ph> Height=<ph id="ph7">&amp;quot;</ph>500<ph id="ph8">&amp;quot;</ph> Margin=<ph id="ph9">&amp;quot;</ph>20<ph id="ph10">&amp;quot;</ph> HorizontalAlignment=<ph id="ph11">&amp;quot;</ph>Center</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>StackPanel Grid.Row=<ph id="ph1">&amp;quot;</ph>1<ph id="ph2">&amp;quot;</ph> Margin=<ph id="ph3">&amp;quot;</ph>10<ph id="ph4">&amp;quot;
</ph>    Orientation=<ph id="ph5">&amp;quot;</ph>Horizontal<ph id="ph6">&amp;quot;</ph> HorizontalAlignment=<ph id="ph7">&amp;quot;</ph>Center</source>
          <target state="new">StackPanel Grid.Row=<ph id="ph1">&amp;quot;</ph>1<ph id="ph2">&amp;quot;</ph> Margin=<ph id="ph3">&amp;quot;</ph>10<ph id="ph4">&amp;quot;
</ph>    Orientation=<ph id="ph5">&amp;quot;</ph>Horizontal<ph id="ph6">&amp;quot;</ph> HorizontalAlignment=<ph id="ph7">&amp;quot;</ph>Center</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>/StackPanel</source>
          <target state="new">/StackPanel</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>/Grid</source>
          <target state="new">/Grid</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  Setting <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationProperties.AcceleratorKey<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Hh759762)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>AutomationProperties.AccessKey<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Hh759763)</ept> doesn't enable keyboard functionality.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  Setting <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationProperties.AcceleratorKey<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Hh759762)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>AutomationProperties.AccessKey<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Hh759763)</ept> doesn't enable keyboard functionality.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>It only reports to the UI Automation framework what keys should be used, so that such information can be passed on to users via assistive technologies.</source>
          <target state="new">It only reports to the UI Automation framework what keys should be used, so that such information can be passed on to users via assistive technologies.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The implementation for key handling still needs to be done in code, not XAML.</source>
          <target state="new">The implementation for key handling still needs to be done in code, not XAML.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You will still need to attach handlers for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208941)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208942)</ept> events on the relevant control in order to actually implement the keyboard shortcut behavior in your app.</source>
          <target state="new">You will still need to attach handlers for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208941)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208942)</ept> events on the relevant control in order to actually implement the keyboard shortcut behavior in your app.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Also, the underline text decoration for an access key is not provided automatically.</source>
          <target state="new">Also, the underline text decoration for an access key is not provided automatically.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You must explicitly underline the text for the specific key in your mnemonic as inline <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Underline<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209982)</ept> formatting if you wish to show underlined text in the UI.</source>
          <target state="new">You must explicitly underline the text for the specific key in your mnemonic as inline <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Underline<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209982)</ept> formatting if you wish to show underlined text in the UI.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For simplicity, the preceding example omits the use of resources for strings such as "Ctrl+A".</source>
          <target state="new">For simplicity, the preceding example omits the use of resources for strings such as "Ctrl+A".</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>However, you must also consider shortcut keys during localization.</source>
          <target state="new">However, you must also consider shortcut keys during localization.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Localizing shortcut keys is relevant because the choice of key to use as the shortcut key typically depends on the visible text label for the element.</source>
          <target state="new">Localizing shortcut keys is relevant because the choice of key to use as the shortcut key typically depends on the visible text label for the element.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more guidance about implementing shortcut keys, see <bpt id="p1">[</bpt>Shortcut keys<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=221825)</ept> in the Windows User Experience Interaction Guidelines.</source>
          <target state="new">For more guidance about implementing shortcut keys, see <bpt id="p1">[</bpt>Shortcut keys<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=221825)</ept> in the Windows User Experience Interaction Guidelines.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Implementing a key event handler</source>
          <target state="new">Implementing a key event handler</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Input events such as the key events use an event concept called <bpt id="p1">*</bpt>routed events<ept id="p1">*</ept>.</source>
          <target state="new">Input events such as the key events use an event concept called <bpt id="p1">*</bpt>routed events<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A routed event can bubble up through the child elements of a composited control, such that a common control parent can handle events for multiple child elements.</source>
          <target state="new">A routed event can bubble up through the child elements of a composited control, such that a common control parent can handle events for multiple child elements.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This event model is convenient for defining shortcut key actions for a control that contains several composite parts that by design cannot have focus or be part of the tab order.</source>
          <target state="new">This event model is convenient for defining shortcut key actions for a control that contains several composite parts that by design cannot have focus or be part of the tab order.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example code that shows how to write a key event handler that includes checking for modifiers such as the Ctrl key, see <bpt id="p1">[</bpt>Keyboard interactions<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt185607)</ept>.</source>
          <target state="new">For example code that shows how to write a key event handler that includes checking for modifiers such as the Ctrl key, see <bpt id="p1">[</bpt>Keyboard interactions<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt185607)</ept>.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Keyboard navigation for custom controls</source>
          <target state="new">Keyboard navigation for custom controls</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>We recommend the use of arrow keys as keyboard shortcuts for navigating among child elements, in cases where the child elements have a spacial relationship to each other.</source>
          <target state="new">We recommend the use of arrow keys as keyboard shortcuts for navigating among child elements, in cases where the child elements have a spacial relationship to each other.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If tree-view nodes have separate sub-elements for handling expand-collapse and node activation, use the left and right arrow keys to provide keyboard expand-collapse functionality.</source>
          <target state="new">If tree-view nodes have separate sub-elements for handling expand-collapse and node activation, use the left and right arrow keys to provide keyboard expand-collapse functionality.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you have an oriented control that supports directional traversal within the control content, use the appropriate arrow keys.</source>
          <target state="new">If you have an oriented control that supports directional traversal within the control content, use the appropriate arrow keys.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Generally you implement custom key handling for custom controls by including an override of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnKeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209390_onkeydown)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnKeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_onkeyup)</ept> methods as part of the class logic.</source>
          <target state="new">Generally you implement custom key handling for custom controls by including an override of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnKeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209390_onkeydown)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnKeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_onkeyup)</ept> methods as part of the class logic.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>An example of a visual state for a focus indicator</source>
          <target state="new">An example of a visual state for a focus indicator</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>We mentioned earlier that any custom control that enables the user to focus it should have a visual focus indicator.</source>
          <target state="new">We mentioned earlier that any custom control that enables the user to focus it should have a visual focus indicator.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Usually that focus indicator is as simple as drawing a rectangle shape immediately around the control's normal bounding rectangle.</source>
          <target state="new">Usually that focus indicator is as simple as drawing a rectangle shape immediately around the control's normal bounding rectangle.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Rectangle<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243371)</ept> for visual focus is a peer element to the rest of the control's composition in a control template, but is initially set with a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visibility<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208992)</ept> value of <bpt id="p5">**</bpt>Collapsed<ept id="p5">**</ept> because the control isn't focused yet.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Rectangle<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243371)</ept> for visual focus is a peer element to the rest of the control's composition in a control template, but is initially set with a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visibility<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208992)</ept> value of <bpt id="p5">**</bpt>Collapsed<ept id="p5">**</ept> because the control isn't focused yet.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Then, when the control does get focus, a visual state is invoked that specifically sets the <bpt id="p1">**</bpt>Visibility<ept id="p1">**</ept> of the focus visual to <bpt id="p2">**</bpt>Visible<ept id="p2">**</ept>.</source>
          <target state="new">Then, when the control does get focus, a visual state is invoked that specifically sets the <bpt id="p1">**</bpt>Visibility<ept id="p1">**</ept> of the focus visual to <bpt id="p2">**</bpt>Visible<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Once focus is moved elsewhere, another visual state is called, and the <bpt id="p1">**</bpt>Visibility<ept id="p1">**</ept> becomes <bpt id="p2">**</bpt>Collapsed<ept id="p2">**</ept>.</source>
          <target state="new">Once focus is moved elsewhere, another visual state is called, and the <bpt id="p1">**</bpt>Visibility<ept id="p1">**</ept> becomes <bpt id="p2">**</bpt>Collapsed<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>All of the default XAML controls will display an appropriate visual focus indicator when focused (if they can be focused).</source>
          <target state="new">All of the default XAML controls will display an appropriate visual focus indicator when focused (if they can be focused).</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>There are also potentially different looks depending on the user's selected theme (particularly if the user is using a high contrast mode.) If you're using the XAML controls in your UI and not replacing the control templates, you don't need to do anything extra to get visual focus indicators on controls that behave and display correctly.</source>
          <target state="new">There are also potentially different looks depending on the user's selected theme (particularly if the user is using a high contrast mode.) If you're using the XAML controls in your UI and not replacing the control templates, you don't need to do anything extra to get visual focus indicators on controls that behave and display correctly.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>But if you're intending to retemplate a control, or if you're curious about how XAML controls provide their visual focus indicators, the remainder of this section explains how this is done in XAML and in the control logic.</source>
          <target state="new">But if you're intending to retemplate a control, or if you're curious about how XAML controls provide their visual focus indicators, the remainder of this section explains how this is done in XAML and in the control logic.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Here's some example XAML that comes from the default XAML template for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept>.</source>
          <target state="new">Here's some example XAML that comes from the default XAML template for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>XAML</source>
          <target state="new">XAML</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>So far this is just the composition.</source>
          <target state="new">So far this is just the composition.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To control the focus indicator's visibility, you define visual states that toggle the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Visibility<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208992)</ept> property.</source>
          <target state="new">To control the focus indicator's visibility, you define visual states that toggle the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Visibility<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208992)</ept> property.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This is done using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager.VisualStateGroups<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh738505)</ept> attached property, as applied to the root element that defines the composition.</source>
          <target state="new">This is done using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager.VisualStateGroups<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh738505)</ept> attached property, as applied to the root element that defines the composition.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>XAML</source>
          <target state="new">XAML</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Note how only one of the named states adjusts <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Visibility<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208992)</ept> directly whereas the others are seemingly empty.</source>
          <target state="new">Note how only one of the named states adjusts <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Visibility<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208992)</ept> directly whereas the others are seemingly empty.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The way that visual states work is that as soon as the control uses another state from the same <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateGroup<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209014)</ept>, any animations applied by the previous state are immediately canceled.</source>
          <target state="new">The way that visual states work is that as soon as the control uses another state from the same <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateGroup<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209014)</ept>, any animations applied by the previous state are immediately canceled.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Because the default <bpt id="p1">**</bpt>Visibility<ept id="p1">**</ept> from composition is <bpt id="p2">**</bpt>Collapsed<ept id="p2">**</ept>, this means the rectangle will not appear.</source>
          <target state="new">Because the default <bpt id="p1">**</bpt>Visibility<ept id="p1">**</ept> from composition is <bpt id="p2">**</bpt>Collapsed<ept id="p2">**</ept>, this means the rectangle will not appear.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The control logic controls this by listening for focus events like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GotFocus<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208927)</ept> and changing the states with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GoToState<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209025)</ept>.</source>
          <target state="new">The control logic controls this by listening for focus events like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GotFocus<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208927)</ept> and changing the states with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GoToState<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209025)</ept>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Often this is already handled for you if you are using a default control or customizing based on a control that already has that behavior.</source>
          <target state="new">Often this is already handled for you if you are using a default control or customizing based on a control that already has that behavior.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Keyboard accessibility and Windows Phone</source>
          <target state="new">Keyboard accessibility and Windows Phone</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A Windows Phone device typically doesn't have a dedicated, hardware keyboard.</source>
          <target state="new">A Windows Phone device typically doesn't have a dedicated, hardware keyboard.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>However, a Soft Input Panel (SIP) can support several keyboard accessibility scenarios.</source>
          <target state="new">However, a Soft Input Panel (SIP) can support several keyboard accessibility scenarios.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Screen readers can read text input from the <bpt id="p1">**</bpt>Text<ept id="p1">**</ept> SIP, including announcing deletions.</source>
          <target state="new">Screen readers can read text input from the <bpt id="p1">**</bpt>Text<ept id="p1">**</ept> SIP, including announcing deletions.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Users can discover where their fingers are because the screen reader can detect that the user is scanning keys, and it reads the scanned key name aloud.</source>
          <target state="new">Users can discover where their fingers are because the screen reader can detect that the user is scanning keys, and it reads the scanned key name aloud.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Also, some of the keyboard-oriented accessibility concepts can be mapped to related assistive technology behaviors that don't use a keyboard at all.</source>
          <target state="new">Also, some of the keyboard-oriented accessibility concepts can be mapped to related assistive technology behaviors that don't use a keyboard at all.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For example, even though a SIP won't include a Tab key, Narrator supports a touch gesture that's the equivalent of pressing the Tab key, so having a useful tab order through the controls in a UI is still an important accessibility principle.</source>
          <target state="new">For example, even though a SIP won't include a Tab key, Narrator supports a touch gesture that's the equivalent of pressing the Tab key, so having a useful tab order through the controls in a UI is still an important accessibility principle.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Arrow keys as used for navigating the parts within complex controls are also supported through Narrator touch gestures.</source>
          <target state="new">Arrow keys as used for navigating the parts within complex controls are also supported through Narrator touch gestures.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Once focus has reached a control that's not for text input, Narrator supports a gesture that invokes that control's action.</source>
          <target state="new">Once focus has reached a control that's not for text input, Narrator supports a gesture that invokes that control's action.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Keyboard shortcuts aren't typically relevant for Windows Phone apps, because a SIP won't include Control or Alt keys.</source>
          <target state="new">Keyboard shortcuts aren't typically relevant for Windows Phone apps, because a SIP won't include Control or Alt keys.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="new">Accessibility</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Keyboard interactions</source>
          <target state="new">Keyboard interactions</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Input: Touch keyboard sample</source>
          <target state="new">Input: Touch keyboard sample</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Responding to the appearance of the on-screen keyboard sample</source>
          <target state="new">Responding to the appearance of the on-screen keyboard sample</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>XAML accessibility sample</source>
          <target state="new">XAML accessibility sample</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>