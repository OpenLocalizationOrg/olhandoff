<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\graphics\composition-native-interop.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa06fa4d0dda5524ace7a2278cd49729c7a14c2e</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Composition native DirectX and Direct2D interoperation with BeginDraw and EndDraw</source>
          <target state="new">Composition native DirectX and Direct2D interoperation with BeginDraw and EndDraw</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Windows.UI.Composition API provides native interoperation interfaces allowing content to be moved directly into the compositor.</source>
          <target state="new">The Windows.UI.Composition API provides native interoperation interfaces allowing content to be moved directly into the compositor.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Composition native DirectX and Direct2D interoperation with BeginDraw and EndDraw</source>
          <target state="new">Composition native DirectX and Direct2D interoperation with BeginDraw and EndDraw</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Windows.UI.Composition API provides the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICompositorInterop<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt620068)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ICompositionDrawingSurfaceInterop<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt620058)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ICompositionGraphicsDeviceInterop<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Mt620065)</ept> native interoperation interfaces allowing content to be moved directly into the compositor.</source>
          <target state="new">The Windows.UI.Composition API provides the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICompositorInterop<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt620068)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ICompositionDrawingSurfaceInterop<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt620058)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ICompositionGraphicsDeviceInterop<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Mt620065)</ept> native interoperation interfaces allowing content to be moved directly into the compositor.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Native interoperation is structured around surface objects that are backed by DirectX textures.</source>
          <target state="new">Native interoperation is structured around surface objects that are backed by DirectX textures.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The surfaces are created from a factory object called <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706749)</ept>.</source>
          <target state="new">The surfaces are created from a factory object called <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706749)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This object is backed by an underlying Direct2D or Direct3D device object, which it uses to allocate video memory for surfaces.</source>
          <target state="new">This object is backed by an underlying Direct2D or Direct3D device object, which it uses to allocate video memory for surfaces.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The composition API never creates the underlying DirectX device.</source>
          <target state="new">The composition API never creates the underlying DirectX device.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the application to create one and pass it to the <bpt id="p1">**</bpt>CompositionGraphicsDevice<ept id="p1">**</ept> object.</source>
          <target state="new">It is the responsibility of the application to create one and pass it to the <bpt id="p1">**</bpt>CompositionGraphicsDevice<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An application may create more than one <bpt id="p1">**</bpt>CompositionGraphicsDevice<ept id="p1">**</ept> object at a time, and it may use the same DirectX device as the rendering device for multiple <bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept> objects.</source>
          <target state="new">An application may create more than one <bpt id="p1">**</bpt>CompositionGraphicsDevice<ept id="p1">**</ept> object at a time, and it may use the same DirectX device as the rendering device for multiple <bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept> objects.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Creating a surface</source>
          <target state="new">Creating a surface</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706749)</ept> serves as a surface factory.</source>
          <target state="new">Each <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706749)</ept> serves as a surface factory.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each surface is created with an initial size (which may be 0,0), but no valid pixels.</source>
          <target state="new">Each surface is created with an initial size (which may be 0,0), but no valid pixels.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A surface in its initial state may be immediately consumed in a visual tree, for example, via a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionSurfaceBrush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt589415)</ept> and a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SpriteVisual<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt589433)</ept>, but in its initial state the surface has no effect on screen output.</source>
          <target state="new">A surface in its initial state may be immediately consumed in a visual tree, for example, via a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionSurfaceBrush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt589415)</ept> and a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SpriteVisual<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt589433)</ept>, but in its initial state the surface has no effect on screen output.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It is, for all purposes, entirely transparent, even if the specified alpha mode is “opaque”.</source>
          <target state="new">It is, for all purposes, entirely transparent, even if the specified alpha mode is “opaque”.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Occasionally, DirectX devices may be rendered unusable.</source>
          <target state="new">Occasionally, DirectX devices may be rendered unusable.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This may happen, amongst other reasons, if the application passes invalid arguments to certain DirectX APIs, or if the graphics adapter is reset by the system, or if the driver is updated.</source>
          <target state="new">This may happen, amongst other reasons, if the application passes invalid arguments to certain DirectX APIs, or if the graphics adapter is reset by the system, or if the driver is updated.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Direct3D has an API that an application may use to discover, asynchronously, if the device is lost for any reason.</source>
          <target state="new">Direct3D has an API that an application may use to discover, asynchronously, if the device is lost for any reason.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When a DirectX device is lost, the application must discard it, create a new one, and pass it to any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706749)</ept> objects previously associated with the bad DirectX device.</source>
          <target state="new">When a DirectX device is lost, the application must discard it, create a new one, and pass it to any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706749)</ept> objects previously associated with the bad DirectX device.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Loading pixels into a surface</source>
          <target state="new">Loading pixels into a surface</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To load pixels into the surface, the application must call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept> method, which returns a DirectX interface representing a texture or Direct2D context, depending on what the application requests.</source>
          <target state="new">To load pixels into the surface, the application must call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept> method, which returns a DirectX interface representing a texture or Direct2D context, depending on what the application requests.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The application must then render or upload pixels into that texture.</source>
          <target state="new">The application must then render or upload pixels into that texture.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When the application is done, it must call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>EndDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> method.</source>
          <target state="new">When the application is done, it must call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>EndDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> method.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Only at that point are the new pixels available for composition, but they still don't show up on screen until the next time all changes to the visual tree are committed.</source>
          <target state="new">Only at that point are the new pixels available for composition, but they still don't show up on screen until the next time all changes to the visual tree are committed.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the visual tree is committed before <bpt id="p1">**</bpt>EndDraw<ept id="p1">**</ept> is called, then the update that is in progress is not visible on screen and the surface continues to display the contents it had prior to <bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept>.</source>
          <target state="new">If the visual tree is committed before <bpt id="p1">**</bpt>EndDraw<ept id="p1">**</ept> is called, then the update that is in progress is not visible on screen and the surface continues to display the contents it had prior to <bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>EndDraw<ept id="p1">**</ept> is called, the texture or Direct2D context pointer returned by BeginDraw is invalidated.</source>
          <target state="new">When <bpt id="p1">**</bpt>EndDraw<ept id="p1">**</ept> is called, the texture or Direct2D context pointer returned by BeginDraw is invalidated.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An application should never cache that pointer beyond the <bpt id="p1">**</bpt>EndDraw<ept id="p1">**</ept> call.</source>
          <target state="new">An application should never cache that pointer beyond the <bpt id="p1">**</bpt>EndDraw<ept id="p1">**</ept> call.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The application may only call BeginDraw on one surface at a time, for any given <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706749)</ept>.</source>
          <target state="new">The application may only call BeginDraw on one surface at a time, for any given <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionGraphicsDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706749)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept>, the application must call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>EndDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> on that surface before calling <bpt id="p5">**</bpt>BeginDraw<ept id="p5">**</ept> on another.</source>
          <target state="new">After calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept>, the application must call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>EndDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> on that surface before calling <bpt id="p5">**</bpt>BeginDraw<ept id="p5">**</ept> on another.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>As the API is agile, the application is responsible for synchronizing these calls if it wishes to perform rendering from multiple worker threads.</source>
          <target state="new">As the API is agile, the application is responsible for synchronizing these calls if it wishes to perform rendering from multiple worker threads.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If an application wants to interrupt rendering one surface and switch to another temporarily, the application may use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SuspendDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620064.aspx)</ept> method.</source>
          <target state="new">If an application wants to interrupt rendering one surface and switch to another temporarily, the application may use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SuspendDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620064.aspx)</ept> method.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This allows another <bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> to succeed, but does not make the first surface update available for on-screen composition.</source>
          <target state="new">This allows another <bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> to succeed, but does not make the first surface update available for on-screen composition.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This allows the application to perform multiple updates in a transactional manner.</source>
          <target state="new">This allows the application to perform multiple updates in a transactional manner.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Once a surface is suspended, the application may continue the update by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResumeDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt620062)</ept> method, or it may declare that the update is done by calling <bpt id="p3">**</bpt>EndDraw<ept id="p3">**</ept>.</source>
          <target state="new">Once a surface is suspended, the application may continue the update by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResumeDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt620062)</ept> method, or it may declare that the update is done by calling <bpt id="p3">**</bpt>EndDraw<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This means only one surface can be actively updated at a time for any given <bpt id="p1">**</bpt>CompositionGraphicsDevice<ept id="p1">**</ept>.</source>
          <target state="new">This means only one surface can be actively updated at a time for any given <bpt id="p1">**</bpt>CompositionGraphicsDevice<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Each graphics device keeps this state independently of the others, so an application may render to two surfaces simultaneously if they belong to different graphics devices.</source>
          <target state="new">Each graphics device keeps this state independently of the others, so an application may render to two surfaces simultaneously if they belong to different graphics devices.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, this precludes the video memory for those two surfaces from being pooled together and, as such, is less memory efficient.</source>
          <target state="new">However, this precludes the video memory for those two surfaces from being pooled together and, as such, is less memory efficient.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SuspendDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620064.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ResumeDraw<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/mt620062)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>EndDraw<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> methods return failures if the application performs an incorrect operation (such as passing invalid arguments, or calling <bpt id="p9">**</bpt>BeginDraw<ept id="p9">**</ept> on a surface before calling <bpt id="p10">**</bpt>EndDraw<ept id="p10">**</ept> on another).</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SuspendDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620064.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ResumeDraw<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/mt620062)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>EndDraw<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> methods return failures if the application performs an incorrect operation (such as passing invalid arguments, or calling <bpt id="p9">**</bpt>BeginDraw<ept id="p9">**</ept> on a surface before calling <bpt id="p10">**</bpt>EndDraw<ept id="p10">**</ept> on another).</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These types of failures represent application bugs and, as such, the expectation is that they are handled with a fail fast.</source>
          <target state="new">These types of failures represent application bugs and, as such, the expectation is that they are handled with a fail fast.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> may also return a failure if the underlying DirectX device is lost.</source>
          <target state="new"><bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> may also return a failure if the underlying DirectX device is lost.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This failure is not fatal as the application can recreate its DirectX device and try again.</source>
          <target state="new">This failure is not fatal as the application can recreate its DirectX device and try again.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As such, the application is expected to handle device loss by simply skipping rendering.</source>
          <target state="new">As such, the application is expected to handle device loss by simply skipping rendering.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> fails for any reason, the application should also not call <bpt id="p2">**</bpt>EndDraw<ept id="p2">**</ept>, as the begin never succeeded in the first place.</source>
          <target state="new">If <bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> fails for any reason, the application should also not call <bpt id="p2">**</bpt>EndDraw<ept id="p2">**</ept>, as the begin never succeeded in the first place.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Scrolling</source>
          <target state="new">Scrolling</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For performance reasons, when an application calls <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept> the contents of the returned texture are not guaranteed to be the previous contents of the surface.</source>
          <target state="new">For performance reasons, when an application calls <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept> the contents of the returned texture are not guaranteed to be the previous contents of the surface.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The application must assume that the contents are random and, as such, the application must ensure that all pixels are touched, either by clearing the surface before rendering or by drawing enough opaque contents to cover the entire updated rectangle.</source>
          <target state="new">The application must assume that the contents are random and, as such, the application must ensure that all pixels are touched, either by clearing the surface before rendering or by drawing enough opaque contents to cover the entire updated rectangle.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This, combined with the fact that the texture pointer is only valid between <bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> and <bpt id="p2">[</bpt><bpt id="p3">**</bpt>EndDraw<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> calls, makes it impossible for the application to copy previous contents out of the surface.</source>
          <target state="new">This, combined with the fact that the texture pointer is only valid between <bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> and <bpt id="p2">[</bpt><bpt id="p3">**</bpt>EndDraw<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> calls, makes it impossible for the application to copy previous contents out of the surface.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For this reason, we offer a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Scroll<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt620063)</ept> method, which allows the application to perform a same-surface pixel copy.</source>
          <target state="new">For this reason, we offer a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Scroll<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt620063)</ept> method, which allows the application to perform a same-surface pixel copy.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="new">Usage Example</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following sample illustrates a very simple scenario where an application creates drawing surfaces, and uses <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>EndDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> to populate the surfaces with text.</source>
          <target state="new">The following sample illustrates a very simple scenario where an application creates drawing surfaces, and uses <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BeginDraw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt620059.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>EndDraw<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt620060)</ept> to populate the surfaces with text.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The application uses DirectWrite to layout the text (details not shown) and then uses Direct2D to render it.</source>
          <target state="new">The application uses DirectWrite to layout the text (details not shown) and then uses Direct2D to render it.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The composition graphics device accepts the Direct2D device directly at initialization time.</source>
          <target state="new">The composition graphics device accepts the Direct2D device directly at initialization time.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This allows <bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> to return an ID2D1DeviceContext interface pointer, which is considerably more efficient than having the application create a Direct2D context to wrap a returned ID3D11Texture2D interface at each drawing operation.</source>
          <target state="new">This allows <bpt id="p1">**</bpt>BeginDraw<ept id="p1">**</ept> to return an ID2D1DeviceContext interface pointer, which is considerably more efficient than having the application create a Direct2D context to wrap a returned ID3D11Texture2D interface at each drawing operation.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>