<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\xaml-platform\attached-properties-overview.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c20a0d1bcfda3c28c6289b7c745ef2e7f8a612cb</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Explains the concept of an attached property in XAML, and provides some examples.</source>
          <target state="new">Explains the concept of an attached property in XAML, and provides some examples.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Attached properties overview</source>
          <target state="new">Attached properties overview</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Attached properties overview</source>
          <target state="new">Attached properties overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>attached property<ept id="p1">*</ept> is a XAML concept.</source>
          <target state="new">An <bpt id="p1">*</bpt>attached property<ept id="p1">*</ept> is a XAML concept.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is conceptually similar to a global property that can be set on any object element in XAML.</source>
          <target state="new">It is conceptually similar to a global property that can be set on any object element in XAML.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Attached properties are typically defined as a specialized form of dependency property that doesn't have a conventional property wrapper in the owner type's object model.</source>
          <target state="new">Attached properties are typically defined as a specialized form of dependency property that doesn't have a conventional property wrapper in the owner type's object model.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>We assume that you understand the basic concept of dependency properties, and have read <bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](dependency-properties-overview.md)</ept>.</source>
          <target state="new">We assume that you understand the basic concept of dependency properties, and have read <bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](dependency-properties-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Attached properties in XAML</source>
          <target state="new">Attached properties in XAML</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Attached properties exist mostly because they enabled a XAML syntax.</source>
          <target state="new">Attached properties exist mostly because they enabled a XAML syntax.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In XAML, you set attached properties by using the syntax <bpt id="p1">_</bpt>AttachedPropertyProvider.PropertyName<ept id="p1">_</ept>.</source>
          <target state="new">In XAML, you set attached properties by using the syntax <bpt id="p1">_</bpt>AttachedPropertyProvider.PropertyName<ept id="p1">_</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Here is an example of how you can set <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> in XAML.</source>
          <target state="new">Here is an example of how you can set <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> in XAML.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that the usage is somewhat similar to a static property; you always reference the type <bpt id="p1">**</bpt>Canvas<ept id="p1">**</ept> that owns and registers the attached property, rather than referring to any instance by name.</source>
          <target state="new">Note that the usage is somewhat similar to a static property; you always reference the type <bpt id="p1">**</bpt>Canvas<ept id="p1">**</ept> that owns and registers the attached property, rather than referring to any instance by name.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  We're just using <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Canvas.Left<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> as an example attached property without fully explaining why you'd use it.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  We're just using <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Canvas.Left<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> as an example attached property without fully explaining why you'd use it.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you want to know more about what <bpt id="p1">**</bpt>Canvas.Left<ept id="p1">**</ept> is for and how <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Canvas<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> handles its layout children, see the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Canvas<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> reference topic or <bpt id="p6">[</bpt>Define layouts with XAML<ept id="p6">](https://msdn.microsoft.com/library/windows/apps/mt228350)</ept>.</source>
          <target state="new">If you want to know more about what <bpt id="p1">**</bpt>Canvas.Left<ept id="p1">**</ept> is for and how <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Canvas<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> handles its layout children, see the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Canvas<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> reference topic or <bpt id="p6">[</bpt>Define layouts with XAML<ept id="p6">](https://msdn.microsoft.com/library/windows/apps/mt228350)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Why use attached properties?</source>
          <target state="new">Why use attached properties?</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Attached properties are a way to escape the coding conventions that might prevent different objects in a relationship from communicating information to each other at run time.</source>
          <target state="new">Attached properties are a way to escape the coding conventions that might prevent different objects in a relationship from communicating information to each other at run time.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It's certainly possible to put properties on a common base class so that each object could just get and set that property.</source>
          <target state="new">It's certainly possible to put properties on a common base class so that each object could just get and set that property.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>But eventually the sheer number of scenarios where you might want to do this will bloat your base classes with shareable properties.</source>
          <target state="new">But eventually the sheer number of scenarios where you might want to do this will bloat your base classes with shareable properties.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It might even introduce cases where there might just be two of hundreds of descendants trying to use a property.</source>
          <target state="new">It might even introduce cases where there might just be two of hundreds of descendants trying to use a property.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>That's not good class design.</source>
          <target state="new">That's not good class design.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To address this, the attached property concept enables an object to assign a value for a property that its own class structure doesn't define.</source>
          <target state="new">To address this, the attached property concept enables an object to assign a value for a property that its own class structure doesn't define.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The defining class can read the value from child objects at run time after the various objects are created in relationships in an object tree.</source>
          <target state="new">The defining class can read the value from child objects at run time after the various objects are created in relationships in an object tree.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, child elements can use attached properties to inform their parent element of how they are to be presented in the UI.</source>
          <target state="new">For example, child elements can use attached properties to inform their parent element of how they are to be presented in the UI.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is the case with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> attached property.</source>
          <target state="new">This is the case with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> attached property.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Canvas.Left<ept id="p1">**</ept> is created as an attached property because it is set on elements that are contained within a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Canvas<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> element, rather than on the <bpt id="p4">**</bpt>Canvas<ept id="p4">**</ept> itself.</source>
          <target state="new"><bpt id="p1">**</bpt>Canvas.Left<ept id="p1">**</ept> is created as an attached property because it is set on elements that are contained within a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Canvas<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> element, rather than on the <bpt id="p4">**</bpt>Canvas<ept id="p4">**</ept> itself.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Any possible child element then uses <bpt id="p1">**</bpt>Canvas.Left<ept id="p1">**</ept> and <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Canvas.Top<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh759772)</ept> to specify its layout offset within the <bpt id="p4">**</bpt>Canvas<ept id="p4">**</ept> layout container parent.</source>
          <target state="new">Any possible child element then uses <bpt id="p1">**</bpt>Canvas.Left<ept id="p1">**</ept> and <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Canvas.Top<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh759772)</ept> to specify its layout offset within the <bpt id="p4">**</bpt>Canvas<ept id="p4">**</ept> layout container parent.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Attached properties make it possible for this to work without cluttering the base element's object model with lots of properties that each apply to only one of the many possible layout containers.</source>
          <target state="new">Attached properties make it possible for this to work without cluttering the base element's object model with lots of properties that each apply to only one of the many possible layout containers.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Instead, many of the layout containers implement their own attached property set.</source>
          <target state="new">Instead, many of the layout containers implement their own attached property set.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To implement the attached property, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> class defines a static <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field named <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Canvas.LeftProperty<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209272)</ept>.</source>
          <target state="new">To implement the attached property, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> class defines a static <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field named <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Canvas.LeftProperty<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209272)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Then, <bpt id="p1">**</bpt>Canvas<ept id="p1">**</ept> provides the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SetLeft<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209273)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>GetLeft<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209269)</ept> methods as public accessors for the attached property, to enable both XAML setting and run-time value access.</source>
          <target state="new">Then, <bpt id="p1">**</bpt>Canvas<ept id="p1">**</ept> provides the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SetLeft<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209273)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>GetLeft<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209269)</ept> methods as public accessors for the attached property, to enable both XAML setting and run-time value access.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For XAML and for the dependency property system, this set of APIs satisfies a pattern that enables a specific XAML syntax for attached properties, and stores the value in the dependency property store.</source>
          <target state="new">For XAML and for the dependency property system, this set of APIs satisfies a pattern that enables a specific XAML syntax for attached properties, and stores the value in the dependency property store.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>How the owning type uses attached properties</source>
          <target state="new">How the owning type uses attached properties</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Although attached properties can be set on any XAML element (or any underlying <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>), that doesn't automatically mean that setting the property produces a tangible result, or that the value is ever accessed.</source>
          <target state="new">Although attached properties can be set on any XAML element (or any underlying <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>), that doesn't automatically mean that setting the property produces a tangible result, or that the value is ever accessed.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The type that defines the attached property typically follows one of these scenarios:</source>
          <target state="new">The type that defines the attached property typically follows one of these scenarios:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The type that defines the attached property is the parent in a relationship of other objects.</source>
          <target state="new">The type that defines the attached property is the parent in a relationship of other objects.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The child objects will set values for the attached property.</source>
          <target state="new">The child objects will set values for the attached property.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The attached property owner type has some innate behavior that iterates through its child elements, obtains the values, and acts on those values at some point in object lifetime (a layout action, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SizeChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208742)</ept>, etc.)</source>
          <target state="new">The attached property owner type has some innate behavior that iterates through its child elements, obtains the values, and acts on those values at some point in object lifetime (a layout action, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SizeChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208742)</ept>, etc.)</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The type that defines the attached property is used as the child element for a variety of possible parent elements and content models, but the info isn't necessarily layout info.</source>
          <target state="new">The type that defines the attached property is used as the child element for a variety of possible parent elements and content models, but the info isn't necessarily layout info.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The attached property reports info to a service, not to another UI element.</source>
          <target state="new">The attached property reports info to a service, not to another UI element.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more info on these scenarios and owning types, see the "More about Canvas.Left" section of <bpt id="p1">[</bpt>Custom attached properties<ept id="p1">](custom-attached-properties.md)</ept>.</source>
          <target state="new">For more info on these scenarios and owning types, see the "More about Canvas.Left" section of <bpt id="p1">[</bpt>Custom attached properties<ept id="p1">](custom-attached-properties.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Attached properties in code</source>
          <target state="new">Attached properties in code</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Attached properties don't have the typical property wrappers for easy get and set access like other dependency properties do.</source>
          <target state="new">Attached properties don't have the typical property wrappers for easy get and set access like other dependency properties do.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is because the attached property is not necessarily part of the code-centered object model for instances where the property is set.</source>
          <target state="new">This is because the attached property is not necessarily part of the code-centered object model for instances where the property is set.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>(It is permissible, though uncommon, to define a property that is both an attached property that other types can set on themselves, and that also has a conventional property usage on the owning type.)</source>
          <target state="new">(It is permissible, though uncommon, to define a property that is both an attached property that other types can set on themselves, and that also has a conventional property usage on the owning type.)</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There are two ways to set an attached property in code: use the property-system APIs, or use the XAML pattern accessors.</source>
          <target state="new">There are two ways to set an attached property in code: use the property-system APIs, or use the XAML pattern accessors.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These techniques are pretty much equivalent in terms of their end result, so which one to use is mostly a matter of coding style.</source>
          <target state="new">These techniques are pretty much equivalent in terms of their end result, so which one to use is mostly a matter of coding style.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using the property system</source>
          <target state="new">Using the property system</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Attached properties for the Windows Runtime are implemented as dependency properties, so that the values can be stored in the shared dependency-property store by the property system, just as many conventional instance properties are stored.</source>
          <target state="new">Attached properties for the Windows Runtime are implemented as dependency properties, so that the values can be stored in the shared dependency-property store by the property system, just as many conventional instance properties are stored.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Therefore attached properties expose a dependency property identifier on the owning class.</source>
          <target state="new">Therefore attached properties expose a dependency property identifier on the owning class.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To set an attached property in code, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> method, and pass the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field that serves as the identifier for that attached property.</source>
          <target state="new">To set an attached property in code, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> method, and pass the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field that serves as the identifier for that attached property.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>(You also pass the value to set.)</source>
          <target state="new">(You also pass the value to set.)</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To get the value of an attached property in code, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> method, again passing the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field that serves as the identifier.</source>
          <target state="new">To get the value of an attached property in code, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> method, again passing the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field that serves as the identifier.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Using the XAML accessor pattern</source>
          <target state="new">Using the XAML accessor pattern</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A XAML processor must be able to set attached property values when XAML is parsed into an object tree.</source>
          <target state="new">A XAML processor must be able to set attached property values when XAML is parsed into an object tree.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The owner type of the attached property must implement dedicated accessor methods named in the form <bpt id="p1">**</bpt>Get<ept id="p1">**</ept><bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> and <bpt id="p3">**</bpt>Set<ept id="p3">**</ept><bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept>.</source>
          <target state="new">The owner type of the attached property must implement dedicated accessor methods named in the form <bpt id="p1">**</bpt>Get<ept id="p1">**</ept><bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> and <bpt id="p3">**</bpt>Set<ept id="p3">**</ept><bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These dedicated accessor methods are also one way to get or set the attached property in code.</source>
          <target state="new">These dedicated accessor methods are also one way to get or set the attached property in code.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>From a code perspective, an attached property is similar to a backing field that has method accessors instead of property accessors, and that backing field can exist on any object rather than having to be specifically defined.</source>
          <target state="new">From a code perspective, an attached property is similar to a backing field that has method accessors instead of property accessors, and that backing field can exist on any object rather than having to be specifically defined.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The next example shows how you can set an attached property in code via the XAML accessor API.</source>
          <target state="new">The next example shows how you can set an attached property in code via the XAML accessor API.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`myCheckBox`</ph> is an instance of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CheckBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> class.</source>
          <target state="new">In this example, <ph id="ph1">`myCheckBox`</ph> is an instance of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CheckBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> class.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The last line is the code that actually sets the value; the lines before that just establish the instances and their parent-child relationship.</source>
          <target state="new">The last line is the code that actually sets the value; the lines before that just establish the instances and their parent-child relationship.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The uncommented last line is the syntax if you use the property system.</source>
          <target state="new">The uncommented last line is the syntax if you use the property system.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The commented last line is the syntax if you use the XAML accessor pattern.</source>
          <target state="new">The commented last line is the syntax if you use the XAML accessor pattern.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Custom attached properties</source>
          <target state="new">Custom attached properties</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For code examples of how to define custom attached properties, and more info about the scenarios for using an attached property, see <bpt id="p1">[</bpt>Custom attached properties<ept id="p1">](custom-attached-properties.md)</ept>.</source>
          <target state="new">For code examples of how to define custom attached properties, and more info about the scenarios for using an attached property, see <bpt id="p1">[</bpt>Custom attached properties<ept id="p1">](custom-attached-properties.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Special syntax for attached property references</source>
          <target state="new">Special syntax for attached property references</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The dot in an attached property name is a key part of the identification pattern.</source>
          <target state="new">The dot in an attached property name is a key part of the identification pattern.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Sometimes there are sometimes ambiguities when a syntax or situation treats the dot as having some other meaning.</source>
          <target state="new">Sometimes there are sometimes ambiguities when a syntax or situation treats the dot as having some other meaning.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, a dot is treated as an object-model traversal for a binding path.</source>
          <target state="new">For example, a dot is treated as an object-model traversal for a binding path.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In most cases involving such ambiguity, there is a special syntax for an attached property that enables the inner dot still to be parsed as the <bpt id="p1">*</bpt>owner<ept id="p1">*</ept><bpt id="p2">**</bpt>.<ept id="p2">**</ept><bpt id="p3">*</bpt>property<ept id="p3">*</ept> separator of an attached property.</source>
          <target state="new">In most cases involving such ambiguity, there is a special syntax for an attached property that enables the inner dot still to be parsed as the <bpt id="p1">*</bpt>owner<ept id="p1">*</ept><bpt id="p2">**</bpt>.<ept id="p2">**</ept><bpt id="p3">*</bpt>property<ept id="p3">*</ept> separator of an attached property.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To specify an attached property as part of a target path for an animation, enclose the attached property name in parentheses ("()")—for example, "(Canvas.Left)".</source>
          <target state="new">To specify an attached property as part of a target path for an animation, enclose the attached property name in parentheses ("()")—for example, "(Canvas.Left)".</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Property-path syntax<ept id="p1">](property-path-syntax.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Property-path syntax<ept id="p1">](property-path-syntax.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate a custom attached property.</source>
          <target state="new"><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate a custom attached property.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To specify an attached property as the target property for a resource reference from a resource file to <bpt id="p1">**</bpt>x:Uid<ept id="p1">**</ept>, use a special syntax that injects a code-style, fully qualified <bpt id="p2">**</bpt>using:<ept id="p2">**</ept> declaration inside square brackets ("<ph id="ph1">\[\]</ph>"), to create a deliberate scope break.</source>
          <target state="new">To specify an attached property as the target property for a resource reference from a resource file to <bpt id="p1">**</bpt>x:Uid<ept id="p1">**</ept>, use a special syntax that injects a code-style, fully qualified <bpt id="p2">**</bpt>using:<ept id="p2">**</ept> declaration inside square brackets ("<ph id="ph1">\[\]</ph>"), to create a deliberate scope break.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, assuming there exists an element '<ph id="ph1">&lt;TextBlock x:Uid="Title" /&gt;</ph>', the resource key in the resource file that targets the <bpt id="p1">**</bpt>Canvas.Top<ept id="p1">**</ept> value on that instance is "Title.<ph id="ph2">\[</ph>using:Windows.UI.Xaml.Controls<ph id="ph3">\]</ph>Canvas.Top".</source>
          <target state="new">For example, assuming there exists an element '<ph id="ph1">&lt;TextBlock x:Uid="Title" /&gt;</ph>', the resource key in the resource file that targets the <bpt id="p1">**</bpt>Canvas.Top<ept id="p1">**</ept> value on that instance is "Title.<ph id="ph2">\[</ph>using:Windows.UI.Xaml.Controls<ph id="ph3">\]</ph>Canvas.Top".</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more info on resource files and XAML, see <bpt id="p1">[</bpt>Quickstart: Translating UI resources<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</ept>.</source>
          <target state="new">For more info on resource files and XAML, see <bpt id="p1">[</bpt>Quickstart: Translating UI resources<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</ept>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Custom attached properties</source>
          <target state="new">Custom attached properties</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Dependency properties overview</source>
          <target state="new">Dependency properties overview</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Define layouts with XAML</source>
          <target state="new">Define layouts with XAML</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Quickstart: Translating UI resources</source>
          <target state="new">Quickstart: Translating UI resources</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>SetValue</source>
          <target state="new">SetValue</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>GetValue</source>
          <target state="new">GetValue</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>