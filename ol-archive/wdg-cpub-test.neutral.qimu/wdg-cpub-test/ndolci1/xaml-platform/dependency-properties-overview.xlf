<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\xaml-platform\dependency-properties-overview.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6535ae83d4ff031c9515487fb6201694c3c95745</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>This topic explains the dependency property system that is available when you write a Windows Runtime app using C++, C#, or Visual Basic along with XAML definitions for UI.</source>
          <target state="new">This topic explains the dependency property system that is available when you write a Windows Runtime app using C++, C#, or Visual Basic along with XAML definitions for UI.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dependency properties overview</source>
          <target state="new">Dependency properties overview</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dependency properties overview</source>
          <target state="new">Dependency properties overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic explains the dependency property system that is available when you write a Windows Runtime app using C++, C#, or Visual Basic along with XAML definitions for UI.</source>
          <target state="new">This topic explains the dependency property system that is available when you write a Windows Runtime app using C++, C#, or Visual Basic along with XAML definitions for UI.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>What is a dependency property?</source>
          <target state="new">What is a dependency property?</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A dependency property is a specialized type of property.</source>
          <target state="new">A dependency property is a specialized type of property.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifically it's a property where the property's value is tracked and influenced by a dedicated property system that is part of the Windows Runtime.</source>
          <target state="new">Specifically it's a property where the property's value is tracked and influenced by a dedicated property system that is part of the Windows Runtime.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In order to support a dependency property, the object that defines the property must be a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> (in other words a class that has the <bpt id="p3">**</bpt>DependencyObject<ept id="p3">**</ept> base class somewhere in its inheritance).</source>
          <target state="new">In order to support a dependency property, the object that defines the property must be a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> (in other words a class that has the <bpt id="p3">**</bpt>DependencyObject<ept id="p3">**</ept> base class somewhere in its inheritance).</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Many of the types you use for your UI definitions for a Windows Store app with XAML will be a <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> subclass, and will support dependency properties.</source>
          <target state="new">Many of the types you use for your UI definitions for a Windows Store app with XAML will be a <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> subclass, and will support dependency properties.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, any type that comes from a Windows Runtime namespace that doesn't have "XAML" in its name won't support dependency properties; properties of such types are ordinary properties that won't have the property system's dependency behavior.</source>
          <target state="new">However, any type that comes from a Windows Runtime namespace that doesn't have "XAML" in its name won't support dependency properties; properties of such types are ordinary properties that won't have the property system's dependency behavior.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The purpose of dependency properties is to provide a systemic way to compute the value of a property based on other inputs (other properties, events and states that occur within your app while it runs).</source>
          <target state="new">The purpose of dependency properties is to provide a systemic way to compute the value of a property based on other inputs (other properties, events and states that occur within your app while it runs).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These other inputs might include:</source>
          <target state="new">These other inputs might include:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>External input such as user preference</source>
          <target state="new">External input such as user preference</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Just-in-time property determination mechanisms such as data binding, animations and storyboards</source>
          <target state="new">Just-in-time property determination mechanisms such as data binding, animations and storyboards</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Multiple-use templating patterns such as resources and styles</source>
          <target state="new">Multiple-use templating patterns such as resources and styles</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Values known through parent-child relationships with other elements in the object tree</source>
          <target state="new">Values known through parent-child relationships with other elements in the object tree</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A dependency property represents or supports a specific feature of the programming model for defining a Windows Runtime app with XAML for UI and C#, Microsoft Visual Basic or Visual C++ component extensions (C++/CX) for code.</source>
          <target state="new">A dependency property represents or supports a specific feature of the programming model for defining a Windows Runtime app with XAML for UI and C#, Microsoft Visual Basic or Visual C++ component extensions (C++/CX) for code.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These features include:</source>
          <target state="new">These features include:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="new">Data binding</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Styles</source>
          <target state="new">Styles</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Storyboarded animations</source>
          <target state="new">Storyboarded animations</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>"PropertyChanged" behavior; a dependency property can be implemented to provide callbacks that can propagate changes to other dependency properties</source>
          <target state="new">"PropertyChanged" behavior; a dependency property can be implemented to provide callbacks that can propagate changes to other dependency properties</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using a default value that comes from property metadata</source>
          <target state="new">Using a default value that comes from property metadata</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>General property system utility such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ClearValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept> and metadata lookup</source>
          <target state="new">General property system utility such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ClearValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept> and metadata lookup</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Dependency properties and Windows Runtime properties</source>
          <target state="new">Dependency properties and Windows Runtime properties</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Dependency properties extend basic Windows Runtime property functionality by providing a global, internal property store that backs all of the dependency properties in an app at run time.</source>
          <target state="new">Dependency properties extend basic Windows Runtime property functionality by providing a global, internal property store that backs all of the dependency properties in an app at run time.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is an alternative to the standard pattern of backing a property with a private field that's private in the property-definition class.</source>
          <target state="new">This is an alternative to the standard pattern of backing a property with a private field that's private in the property-definition class.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can think of this internal property store as being a set of property identifiers and values that exist for any particular object (so long as it's a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>).</source>
          <target state="new">You can think of this internal property store as being a set of property identifiers and values that exist for any particular object (so long as it's a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>).</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Rather than being identified by name, each property in the store is identified by a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> instance.</source>
          <target state="new">Rather than being identified by name, each property in the store is identified by a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> instance.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, the property system mostly hides this implementation detail: you can usually access dependency properties by using a simple name (the programmatic property name in the code language you're using, or an attribute name when you're writing XAML).</source>
          <target state="new">However, the property system mostly hides this implementation detail: you can usually access dependency properties by using a simple name (the programmatic property name in the code language you're using, or an attribute name when you're writing XAML).</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The base type that provides the underpinnings of the dependency property system is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>.</source>
          <target state="new">The base type that provides the underpinnings of the dependency property system is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> defines methods that can access the dependency property, and instances of a <bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept> derived class internally support the property store concept we mentioned earlier.</source>
          <target state="new"><bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> defines methods that can access the dependency property, and instances of a <bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept> derived class internally support the property store concept we mentioned earlier.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Here is a summation of the terminology that we use in the documentation when discussing dependency properties:</source>
          <target state="new">Here is a summation of the terminology that we use in the documentation when discussing dependency properties:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="new">Term</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Dependency property</source>
          <target state="new">Dependency property</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A property that exists on a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> identifier (see below).</source>
          <target state="new">A property that exists on a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> identifier (see below).</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Usually this identifier is available as a static member of the defining <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> derived class.</source>
          <target state="new">Usually this identifier is available as a static member of the defining <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> derived class.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Dependency property identifier</source>
          <target state="new">Dependency property identifier</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept>, that's why it is typically public even though it is read-only.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept>, that's why it is typically public even though it is read-only.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Property wrapper</source>
          <target state="new">Property wrapper</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The callable <bpt id="p1">**</bpt>get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>set<ept id="p2">**</ept> implementations for a Windows Runtime property.</source>
          <target state="new">The callable <bpt id="p1">**</bpt>get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>set<ept id="p2">**</ept> implementations for a Windows Runtime property.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Or, the language-specific projection of the original definition.</source>
          <target state="new">Or, the language-specific projection of the original definition.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>get<ept id="p1">**</ept> property wrapper implementation calls <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SetValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept>, passing the relevant dependency property identifier as one input and the value to set as the second input.</source>
          <target state="new">A <bpt id="p1">**</bpt>get<ept id="p1">**</ept> property wrapper implementation calls <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SetValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept>, passing the relevant dependency property identifier as one input and the value to set as the second input.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The property wrapper is not just convenience for callers, it also exposes the dependency property to any process, tool or projection that uses Windows Runtime definitions for properties.</source>
          <target state="new">The property wrapper is not just convenience for callers, it also exposes the dependency property to any process, tool or projection that uses Windows Runtime definitions for properties.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example defines a custom "IsSpinning" dependency property as defined for C#, and shows the relationship of the dependency property identifier to the property wrapper.</source>
          <target state="new">The following example defines a custom "IsSpinning" dependency property as defined for C#, and shows the relationship of the dependency property identifier to the property wrapper.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The preceding example is not intended as the complete example for how to create a custom dependency property.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The preceding example is not intended as the complete example for how to create a custom dependency property.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It is intended to show dependency property concepts for anyone that prefers learning concepts through code.</source>
          <target state="new">It is intended to show dependency property concepts for anyone that prefers learning concepts through code.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For a more complete example, see <bpt id="p1">[</bpt>Custom dependency properties<ept id="p1">](custom-dependency-properties.md)</ept>.</source>
          <target state="new">For a more complete example, see <bpt id="p1">[</bpt>Custom dependency properties<ept id="p1">](custom-dependency-properties.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Dependency property value precedence</source>
          <target state="new">Dependency property value precedence</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When you get the value of a dependency property, you are obtaining a value that was determined for that property through any one of the inputs that participate in the Windows Runtime property system.</source>
          <target state="new">When you get the value of a dependency property, you are obtaining a value that was determined for that property through any one of the inputs that participate in the Windows Runtime property system.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Dependency property value precedence exists so that the Windows Runtime property system can calculate values in a predictable way, and it's important that you be familiar with the basic precedence order too.</source>
          <target state="new">Dependency property value precedence exists so that the Windows Runtime property system can calculate values in a predictable way, and it's important that you be familiar with the basic precedence order too.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Otherwise, you might find yourself in a situation where you're trying to set a property at one level of precedence but something else (the system, third-party callers, some of your own code) is setting it at another level, and you'll get frustrated trying to figure out which property value is used and where that value came from.</source>
          <target state="new">Otherwise, you might find yourself in a situation where you're trying to set a property at one level of precedence but something else (the system, third-party callers, some of your own code) is setting it at another level, and you'll get frustrated trying to figure out which property value is used and where that value came from.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, styles and templates are intended to be a shared starting point for establishing property values and thus appearances of a control.</source>
          <target state="new">For example, styles and templates are intended to be a shared starting point for establishing property values and thus appearances of a control.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>But on a particular control instance you might want to change its value versus the common templated value, such as giving that control a different background color or a different text string as content.</source>
          <target state="new">But on a particular control instance you might want to change its value versus the common templated value, such as giving that control a different background color or a different text string as content.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The Windows Runtime property system considers local values at higher precedence than values provided by styles and templates.</source>
          <target state="new">The Windows Runtime property system considers local values at higher precedence than values provided by styles and templates.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>That enables the scenario of having app-specific values overwrite the templates so that the controls are useful for your own use of them in app UI.</source>
          <target state="new">That enables the scenario of having app-specific values overwrite the templates so that the controls are useful for your own use of them in app UI.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Dependency property precedence list</source>
          <target state="new">Dependency property precedence list</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following is the definitive order that the property system uses when assigning the run-time value for a dependency property.</source>
          <target state="new">The following is the definitive order that the property system uses when assigning the run-time value for a dependency property.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Highest precedence is listed first.</source>
          <target state="new">Highest precedence is listed first.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You'll find more detailed explanations just past this list.</source>
          <target state="new">You'll find more detailed explanations just past this list.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Animated values:<ept id="p1">**</ept> Active animations, visual state animations, or animations with a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>HoldEnd<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br210306)</ept> behavior.</source>
          <target state="new"><bpt id="p1">**</bpt>Animated values:<ept id="p1">**</ept> Active animations, visual state animations, or animations with a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>HoldEnd<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br210306)</ept> behavior.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To have any practical effect, an animation applied to a property must have precedence over the base (unanimated) value, even if that value was set locally.</source>
          <target state="new">To have any practical effect, an animation applied to a property must have precedence over the base (unanimated) value, even if that value was set locally.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Local value:<ept id="p1">**</ept> A local value might be set through the convenience of the property wrapper, which also equates to setting as an attribute or property element in XAML, or by a call to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SetValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> method using a property of a specific instance.</source>
          <target state="new"><bpt id="p1">**</bpt>Local value:<ept id="p1">**</ept> A local value might be set through the convenience of the property wrapper, which also equates to setting as an attribute or property element in XAML, or by a call to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SetValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> method using a property of a specific instance.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you set a local value by using a binding or a static resource, these each act in the precedence as if a local value was set, and bindings or resource references are erased if a new local value is set.</source>
          <target state="new">If you set a local value by using a binding or a static resource, these each act in the precedence as if a local value was set, and bindings or resource references are erased if a new local value is set.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Templated properties:<ept id="p1">**</ept> An element has these if it was created as part of a template (from a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ControlTemplate<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>DataTemplate<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br242348)</ept>).</source>
          <target state="new"><bpt id="p1">**</bpt>Templated properties:<ept id="p1">**</ept> An element has these if it was created as part of a template (from a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ControlTemplate<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>DataTemplate<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br242348)</ept>).</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Style setters:<ept id="p1">**</ept> Values from a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Setter<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept> within styles from page or application resources.</source>
          <target state="new"><bpt id="p1">**</bpt>Style setters:<ept id="p1">**</ept> Values from a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Setter<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept> within styles from page or application resources.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default value:<ept id="p1">**</ept> A dependency property can have a default value as part of its metadata.</source>
          <target state="new"><bpt id="p1">**</bpt>Default value:<ept id="p1">**</ept> A dependency property can have a default value as part of its metadata.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Templated properties</source>
          <target state="new">Templated properties</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Templated properties as a precedence item do not apply to any property of an element that you declare directly in XAML page markup.</source>
          <target state="new">Templated properties as a precedence item do not apply to any property of an element that you declare directly in XAML page markup.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The templated property concept exists only for objects that are created when the Windows Runtime applies a XAML template to a UI element and thus defines its visuals.</source>
          <target state="new">The templated property concept exists only for objects that are created when the Windows Runtime applies a XAML template to a UI element and thus defines its visuals.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>All the properties that are set from a control template have values of some kind.</source>
          <target state="new">All the properties that are set from a control template have values of some kind.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>These values are almost like an extended set of default values for the control and are often associated with values you can reset later by setting the property values directly.</source>
          <target state="new">These values are almost like an extended set of default values for the control and are often associated with values you can reset later by setting the property values directly.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Thus the template-set values must be distinguishable from a true local value, so that any new local value can overwrite it.</source>
          <target state="new">Thus the template-set values must be distinguishable from a true local value, so that any new local value can overwrite it.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In some cases the template might override even local values, if the template failed to expose <bpt id="p1">[</bpt>{TemplateBinding} markup extension<ept id="p1">](templatebinding-markup-extension.md)</ept> references for properties that should have been settable on instances.</source>
          <target state="new">In some cases the template might override even local values, if the template failed to expose <bpt id="p1">[</bpt>{TemplateBinding} markup extension<ept id="p1">](templatebinding-markup-extension.md)</ept> references for properties that should have been settable on instances.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is usually done only if the property is really not intended to be set on instances, for example if it's only relevant to visuals and template behavior and not to the intended function or runtime logic of the control that uses the template.</source>
          <target state="new">This is usually done only if the property is really not intended to be set on instances, for example if it's only relevant to visuals and template behavior and not to the intended function or runtime logic of the control that uses the template.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Bindings and precedence</source>
          <target state="new">Bindings and precedence</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Binding operations have the appropriate precedence for whatever scope they're used for.</source>
          <target state="new">Binding operations have the appropriate precedence for whatever scope they're used for.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, a binding applied to a local value acts as local value, and a binding (<bpt id="p1">[</bpt>{TemplateBinding} markup extension<ept id="p1">](templatebinding-markup-extension.md)</ept>) for a property setter applies as a style setter does.</source>
          <target state="new">For example, a binding applied to a local value acts as local value, and a binding (<bpt id="p1">[</bpt>{TemplateBinding} markup extension<ept id="p1">](templatebinding-markup-extension.md)</ept>) for a property setter applies as a style setter does.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Because bindings must wait until run-time to obtain values from data sources, the process of determining the property value precedence for any property extends into run-time as well.</source>
          <target state="new">Because bindings must wait until run-time to obtain values from data sources, the process of determining the property value precedence for any property extends into run-time as well.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Not only do bindings operate at the same precedence as a local value, they really are a local value, where the binding is the placeholder for a value that is deferred.</source>
          <target state="new">Not only do bindings operate at the same precedence as a local value, they really are a local value, where the binding is the placeholder for a value that is deferred.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you have a binding in place for a property value, and you set a local value on it at run-time, that replaces the binding entirely.</source>
          <target state="new">If you have a binding in place for a property value, and you set a local value on it at run-time, that replaces the binding entirely.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Similarly, if you call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetBinding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244257)</ept> to define a binding that only comes into existence at run-time, you replace any local value you might have applied in XAML or with previously executed code.</source>
          <target state="new">Similarly, if you call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetBinding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244257)</ept> to define a binding that only comes into existence at run-time, you replace any local value you might have applied in XAML or with previously executed code.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Storyboarded animations and base value</source>
          <target state="new">Storyboarded animations and base value</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Storyboarded animations act on a concept of a <bpt id="p1">*</bpt>base value<ept id="p1">*</ept>.</source>
          <target state="new">Storyboarded animations act on a concept of a <bpt id="p1">*</bpt>base value<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The base value is the value that's determined by the property system using its precedence, but omitting that last step of looking for animations.</source>
          <target state="new">The base value is the value that's determined by the property system using its precedence, but omitting that last step of looking for animations.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example, a base value might come from a control's template, or it might come from setting a local value on an instance of a control.</source>
          <target state="new">For example, a base value might come from a control's template, or it might come from setting a local value on an instance of a control.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Either way, applying an animation will overwrite this base value and apply the animated value for as long as your animation continues to run.</source>
          <target state="new">Either way, applying an animation will overwrite this base value and apply the animated value for as long as your animation continues to run.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For an animated property, the base value can still have an effect on the animation's behavior, if that animation does not explicitly specify both <bpt id="p1">**</bpt>From<ept id="p1">**</ept> and <bpt id="p2">**</bpt>To<ept id="p2">**</ept>, or if the animation reverts the property to its base value when completed.</source>
          <target state="new">For an animated property, the base value can still have an effect on the animation's behavior, if that animation does not explicitly specify both <bpt id="p1">**</bpt>From<ept id="p1">**</ept> and <bpt id="p2">**</bpt>To<ept id="p2">**</ept>, or if the animation reverts the property to its base value when completed.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In these cases, once an animation is no longer running, the rest of the precedence is used again.</source>
          <target state="new">In these cases, once an animation is no longer running, the rest of the precedence is used again.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>However, an animation that specifies a <bpt id="p1">**</bpt>To<ept id="p1">**</ept> with a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>HoldEnd<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br210306)</ept> behavior can override a local value until the animation is removed, even when it visually appears to be stopped.</source>
          <target state="new">However, an animation that specifies a <bpt id="p1">**</bpt>To<ept id="p1">**</ept> with a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>HoldEnd<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br210306)</ept> behavior can override a local value until the animation is removed, even when it visually appears to be stopped.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Conceptually this is like an animation that's running forever even if there is not a visual animation in the UI.</source>
          <target state="new">Conceptually this is like an animation that's running forever even if there is not a visual animation in the UI.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Multiple animations can be applied to a single property.</source>
          <target state="new">Multiple animations can be applied to a single property.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Each of these animations might have been defined to replace base values that came from different points in the value precedence.</source>
          <target state="new">Each of these animations might have been defined to replace base values that came from different points in the value precedence.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>However, these animations will all be running simultaneously at run time, and that often means that they must combine their values because each animation has equal influence on the value.</source>
          <target state="new">However, these animations will all be running simultaneously at run time, and that often means that they must combine their values because each animation has equal influence on the value.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This depends on exactly how the animations are defined, and the type of the value that is being animated.</source>
          <target state="new">This depends on exactly how the animations are defined, and the type of the value that is being animated.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Storyboarded animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187354)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Storyboarded animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187354)</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Default values</source>
          <target state="new">Default values</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Establishing the default value for a dependency property with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyMetadata<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> value is explained in more detail in the <bpt id="p3">[</bpt>Custom dependency properties<ept id="p3">](custom-dependency-properties.md)</ept> topic.</source>
          <target state="new">Establishing the default value for a dependency property with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyMetadata<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> value is explained in more detail in the <bpt id="p3">[</bpt>Custom dependency properties<ept id="p3">](custom-dependency-properties.md)</ept> topic.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Dependency properties still have default values even if those default values weren't explicitly defined in that property's metadata.</source>
          <target state="new">Dependency properties still have default values even if those default values weren't explicitly defined in that property's metadata.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Unless they have been changed by metadata, default values for the Windows Runtime dependency properties are generally one of the following:</source>
          <target state="new">Unless they have been changed by metadata, default values for the Windows Runtime dependency properties are generally one of the following:</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A property that uses a run-time object or the basic <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> type (a <bpt id="p2">*</bpt>reference type<ept id="p2">*</ept>) has a default value of <bpt id="p3">**</bpt>null<ept id="p3">**</ept>.</source>
          <target state="new">A property that uses a run-time object or the basic <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> type (a <bpt id="p2">*</bpt>reference type<ept id="p2">*</ept>) has a default value of <bpt id="p3">**</bpt>null<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208713)</ept> is <bpt id="p3">**</bpt>null<ept id="p3">**</ept> until it's deliberately set or is inherited.</source>
          <target state="new">For example, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208713)</ept> is <bpt id="p3">**</bpt>null<ept id="p3">**</ept> until it's deliberately set or is inherited.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A property that uses a basic value such as numbers or a Boolean value (a <bpt id="p1">*</bpt>value type<ept id="p1">*</ept>) uses an expected default for that value.</source>
          <target state="new">A property that uses a basic value such as numbers or a Boolean value (a <bpt id="p1">*</bpt>value type<ept id="p1">*</ept>) uses an expected default for that value.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, 0 for integers and floating-point numbers, <bpt id="p1">**</bpt>false<ept id="p1">**</ept> for a Boolean.</source>
          <target state="new">For example, 0 for integers and floating-point numbers, <bpt id="p1">**</bpt>false<ept id="p1">**</ept> for a Boolean.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A property that uses a Windows Runtime structure has a default value that's obtained by calling that structure's implicit default constructor.</source>
          <target state="new">A property that uses a Windows Runtime structure has a default value that's obtained by calling that structure's implicit default constructor.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This constructor uses the defaults for each of the basic value fields of the structure.</source>
          <target state="new">This constructor uses the defaults for each of the basic value fields of the structure.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, a default for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Point<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> value is initialized with its <bpt id="p3">**</bpt>X<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Y<ept id="p4">**</ept> values as 0.</source>
          <target state="new">For example, a default for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Point<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> value is initialized with its <bpt id="p3">**</bpt>X<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Y<ept id="p4">**</ept> values as 0.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A property that uses an enumeration has a default value of the first defined member in that enumeration.</source>
          <target state="new">A property that uses an enumeration has a default value of the first defined member in that enumeration.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Check the reference for specific enumerations to see what the default value is.</source>
          <target state="new">Check the reference for specific enumerations to see what the default value is.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A property that uses a string (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.String<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/system.string.aspx)</ept> for .NET, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Platform::String<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/hh755812.aspx)</ept> for C++/CX) has a default value of an empty string (<bpt id="p5">**</bpt>""<ept id="p5">**</ept>).</source>
          <target state="new">A property that uses a string (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.String<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/system.string.aspx)</ept> for .NET, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Platform::String<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/hh755812.aspx)</ept> for C++/CX) has a default value of an empty string (<bpt id="p5">**</bpt>""<ept id="p5">**</ept>).</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Collection properties aren't typically implemented as dependency properties, for reasons discussed further on in this topic.</source>
          <target state="new">Collection properties aren't typically implemented as dependency properties, for reasons discussed further on in this topic.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>But if you implement a custom collection property and you want it to be a dependency property, make sure to avoid an <bpt id="p1">*</bpt>unintentional singleton<ept id="p1">*</ept> as described near the end of <bpt id="p2">[</bpt>Custom dependency properties<ept id="p2">](custom-dependency-properties.md)</ept>.</source>
          <target state="new">But if you implement a custom collection property and you want it to be a dependency property, make sure to avoid an <bpt id="p1">*</bpt>unintentional singleton<ept id="p1">*</ept> as described near the end of <bpt id="p2">[</bpt>Custom dependency properties<ept id="p2">](custom-dependency-properties.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Property functionality provided by a dependency property</source>
          <target state="new">Property functionality provided by a dependency property</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="new">Data binding</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A dependency property can have its value set through applying a data binding.</source>
          <target state="new">A dependency property can have its value set through applying a data binding.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Data binding uses the <bpt id="p1">[</bpt>{Binding} markup extension<ept id="p1">](binding-markup-extension.md)</ept> syntax in XAML, or the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Binding<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> class in code.</source>
          <target state="new">Data binding uses the <bpt id="p1">[</bpt>{Binding} markup extension<ept id="p1">](binding-markup-extension.md)</ept> syntax in XAML, or the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Binding<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> class in code.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For a databound property, the final property value determination is deferred until run time.</source>
          <target state="new">For a databound property, the final property value determination is deferred until run time.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>At that time the value is obtained from a data source.</source>
          <target state="new">At that time the value is obtained from a data source.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The role that the dependency property system plays here is enabling a placeholder behavior for operations like loading XAML when the value is not yet known, and then supplying the value at run time by interacting with the Windows Runtime data binding engine.</source>
          <target state="new">The role that the dependency property system plays here is enabling a placeholder behavior for operations like loading XAML when the value is not yet known, and then supplying the value at run time by interacting with the Windows Runtime data binding engine.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following example sets the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Text<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209676)</ept> value for a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TextBlock<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> element, using a binding in XAML.</source>
          <target state="new">The following example sets the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Text<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209676)</ept> value for a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TextBlock<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> element, using a binding in XAML.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The binding uses an inherited data context and an object data source.</source>
          <target state="new">The binding uses an inherited data context and an object data source.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>(Neither of these is shown in the shortened example; for a more complete sample that shows context and source, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.)</source>
          <target state="new">(Neither of these is shown in the shortened example; for a more complete sample that shows context and source, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.)</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>You can also establish bindings using code rather than XAML.</source>
          <target state="new">You can also establish bindings using code rather than XAML.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetBinding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244257)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetBinding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244257)</ept>.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Bindings like this are treated as a local value for purposes of dependency property value precedence.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Bindings like this are treated as a local value for purposes of dependency property value precedence.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If you set another local value for a property that originally held a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> value, you will overwrite the binding entirely, not just the binding's run-time value.</source>
          <target state="new">If you set another local value for a property that originally held a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> value, you will overwrite the binding entirely, not just the binding's run-time value.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Binding sources, binding targets, the role of FrameworkElement</source>
          <target state="new">Binding sources, binding targets, the role of FrameworkElement</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To be the source of a binding, a property does not need to be a dependency property; you can generally use any property as a binding source, although this depends on your programming language and each has certain edge cases.</source>
          <target state="new">To be the source of a binding, a property does not need to be a dependency property; you can generally use any property as a binding source, although this depends on your programming language and each has certain edge cases.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>However, to be the target of a binding, that property must be a dependency property.</source>
          <target state="new">However, to be the target of a binding, that property must be a dependency property.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If you are creating a binding in code, note that the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetBinding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244257)</ept> API is defined only for <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>.</source>
          <target state="new">If you are creating a binding in code, note that the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetBinding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244257)</ept> API is defined only for <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>However, you can create a binding definition using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BindingOperations<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209823)</ept> instead, and thus reference any <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyObject<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> property.</source>
          <target state="new">However, you can create a binding definition using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BindingOperations<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209823)</ept> instead, and thus reference any <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyObject<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> property.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For either code or XAML, remember that <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208713)</ept> is a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> property.</source>
          <target state="new">For either code or XAML, remember that <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208713)</ept> is a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> property.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>By using a form of parent-child property inheritance (typically established in XAML markup), the binding system can resolve a <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> that exists on a parent element.</source>
          <target state="new">By using a form of parent-child property inheritance (typically established in XAML markup), the binding system can resolve a <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> that exists on a parent element.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This inheritance can evaluate even if the child object (which has the target property) is not a <bpt id="p1">**</bpt>FrameworkElement<ept id="p1">**</ept> and therefore does not hold its own <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept> value.</source>
          <target state="new">This inheritance can evaluate even if the child object (which has the target property) is not a <bpt id="p1">**</bpt>FrameworkElement<ept id="p1">**</ept> and therefore does not hold its own <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept> value.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, the parent element being inherited must be a <bpt id="p1">**</bpt>FrameworkElement<ept id="p1">**</ept> in order to set and hold the <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept>.</source>
          <target state="new">However, the parent element being inherited must be a <bpt id="p1">**</bpt>FrameworkElement<ept id="p1">**</ept> in order to set and hold the <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Alternatively, you must define the binding such that it can function with a <bpt id="p1">**</bpt>null<ept id="p1">**</ept> value for <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept>.</source>
          <target state="new">Alternatively, you must define the binding such that it can function with a <bpt id="p1">**</bpt>null<ept id="p1">**</ept> value for <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Wiring the binding is not the only thing that's needed for most data binding scenarios.</source>
          <target state="new">Wiring the binding is not the only thing that's needed for most data binding scenarios.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For a one-way or two-way binding to be effective, the source property must support change notifications that propagate to the binding system and thus the target.</source>
          <target state="new">For a one-way or two-way binding to be effective, the source property must support change notifications that propagate to the binding system and thus the target.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For custom binding sources, this means that the property must support <bpt id="p1">[</bpt><bpt id="p2">**</bpt>INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/system.componentmodel.inotifypropertychanged.aspx)</ept>.</source>
          <target state="new">For custom binding sources, this means that the property must support <bpt id="p1">[</bpt><bpt id="p2">**</bpt>INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/system.componentmodel.inotifypropertychanged.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Collections should support <bpt id="p1">[</bpt><bpt id="p2">**</bpt>INotifyCollectionChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/system.collections.specialized.inotifycollectionchanged.aspx)</ept>.</source>
          <target state="new">Collections should support <bpt id="p1">[</bpt><bpt id="p2">**</bpt>INotifyCollectionChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/system.collections.specialized.inotifycollectionchanged.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Certain classes support these interfaces in their implementations so that they are useful as base classes for data binding scenarios; an example of such a class is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/ms668604.aspx)</ept>.</source>
          <target state="new">Certain classes support these interfaces in their implementations so that they are useful as base classes for data binding scenarios; an example of such a class is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/ms668604.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For more information on data binding and how data binding relates to the property system, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</source>
          <target state="new">For more information on data binding and how data binding relates to the property system, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The types listed here support Microsoft .NET data sources.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The types listed here support Microsoft .NET data sources.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>C++/CX data sources use different interfaces for change notification or observable behavior, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</source>
          <target state="new">C++/CX data sources use different interfaces for change notification or observable behavior, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Styles and templates</source>
          <target state="new">Styles and templates</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Styles and templates are two of the scenarios for properties being defined as dependency properties.</source>
          <target state="new">Styles and templates are two of the scenarios for properties being defined as dependency properties.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Styles are useful for setting properties that define the app's UI.</source>
          <target state="new">Styles are useful for setting properties that define the app's UI.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Styles are defined as resources in XAML, either as an entry in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> collection, or in separate XAML files such as theme resource dictionaries.</source>
          <target state="new">Styles are defined as resources in XAML, either as an entry in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> collection, or in separate XAML files such as theme resource dictionaries.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Styles interact with the property system because they contain setters for properties.</source>
          <target state="new">Styles interact with the property system because they contain setters for properties.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The most important property here is the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control.Template<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209465)</ept> property of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Control<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209390)</ept>: it defines most of the visual appearance and visual state for a <bpt id="p5">**</bpt>Control<ept id="p5">**</ept>.</source>
          <target state="new">The most important property here is the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control.Template<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209465)</ept> property of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Control<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209390)</ept>: it defines most of the visual appearance and visual state for a <bpt id="p5">**</bpt>Control<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For more info on styles, and some example XAML that defines a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> and uses setters, see <bpt id="p3">[</bpt>Styling controls<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt210950)</ept>.</source>
          <target state="new">For more info on styles, and some example XAML that defines a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> and uses setters, see <bpt id="p3">[</bpt>Styling controls<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt210950)</ept>.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Values that come from styles or templates are deferred values, similar to bindings.</source>
          <target state="new">Values that come from styles or templates are deferred values, similar to bindings.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>This is so that control users can re-template controls or redefine styles.</source>
          <target state="new">This is so that control users can re-template controls or redefine styles.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>And that's why property setters in styles can only act on dependency properties, not ordinary properties.</source>
          <target state="new">And that's why property setters in styles can only act on dependency properties, not ordinary properties.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Storyboarded animations</source>
          <target state="new">Storyboarded animations</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>You can animate a dependency property's value using a storyboarded animation.</source>
          <target state="new">You can animate a dependency property's value using a storyboarded animation.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Storyboarded animations in the Windows Runtime are not merely visual decorations.</source>
          <target state="new">Storyboarded animations in the Windows Runtime are not merely visual decorations.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>It's more useful to think of animations as being a state machine technique that can set the values of individual properties or of all properties and visuals of a control, and change these values over time.</source>
          <target state="new">It's more useful to think of animations as being a state machine technique that can set the values of individual properties or of all properties and visuals of a control, and change these values over time.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>To be animated, the animation's target property must be a dependency property.</source>
          <target state="new">To be animated, the animation's target property must be a dependency property.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Also, to be animated, the target property's value type must be supported by one of the existing <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Timeline<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210517)</ept>-derived animation types.</source>
          <target state="new">Also, to be animated, the target property's value type must be supported by one of the existing <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Timeline<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210517)</ept>-derived animation types.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Values of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Color<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Double<ept id="p4">**</ept><ept id="p3">](T:System.Double)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Point<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> can be animated using either interpolation or keyframe techniques.</source>
          <target state="new">Values of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Color<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Double<ept id="p4">**</ept><ept id="p3">](T:System.Double)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Point<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> can be animated using either interpolation or keyframe techniques.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Most other values can be animated using discrete <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> key frames.</source>
          <target state="new">Most other values can be animated using discrete <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> key frames.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>When an animation is applied and running, the animated value operates at a higher precedence than any value (such as a local value) that the property otherwise has.</source>
          <target state="new">When an animation is applied and running, the animated value operates at a higher precedence than any value (such as a local value) that the property otherwise has.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Animations also have an optional <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HoldEnd<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210306)</ept> behavior that can cause animations to apply to property values even if the animation visually appears to be stopped.</source>
          <target state="new">Animations also have an optional <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HoldEnd<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210306)</ept> behavior that can cause animations to apply to property values even if the animation visually appears to be stopped.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The state machine principle is embodied by the use of storyboarded animations as part of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209021)</ept> state model for controls.</source>
          <target state="new">The state machine principle is embodied by the use of storyboarded animations as part of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209021)</ept> state model for controls.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For more info on storyboarded animations, see <bpt id="p1">[</bpt>Storyboarded animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187354)</ept>.</source>
          <target state="new">For more info on storyboarded animations, see <bpt id="p1">[</bpt>Storyboarded animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187354)</ept>.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more info on <bpt id="p1">**</bpt>VisualStateManager<ept id="p1">**</ept> and defining visual states for controls, see <bpt id="p2">[</bpt>Storyboarded animations for visual states<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/jj819808)</ept> or <bpt id="p3">[</bpt>Quickstart: Control templates<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/hh465374)</ept>.</source>
          <target state="new">For more info on <bpt id="p1">**</bpt>VisualStateManager<ept id="p1">**</ept> and defining visual states for controls, see <bpt id="p2">[</bpt>Storyboarded animations for visual states<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/jj819808)</ept> or <bpt id="p3">[</bpt>Quickstart: Control templates<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/hh465374)</ept>.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Property-changed behavior</source>
          <target state="new">Property-changed behavior</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Property-changed behavior is the origin of the "dependency" part of dependency property terminology.</source>
          <target state="new">Property-changed behavior is the origin of the "dependency" part of dependency property terminology.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Maintaining valid values for a property when another property can influence the first property's value is a difficult development problem in many frameworks.</source>
          <target state="new">Maintaining valid values for a property when another property can influence the first property's value is a difficult development problem in many frameworks.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>In the Windows Runtime property system, each dependency property can specify a callback that is invoked whenever its property value changes.</source>
          <target state="new">In the Windows Runtime property system, each dependency property can specify a callback that is invoked whenever its property value changes.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This callback can be used to notify or change related property values, in a generally synchronous manner.</source>
          <target state="new">This callback can be used to notify or change related property values, in a generally synchronous manner.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Many existing dependency properties have a property-changed behavior.</source>
          <target state="new">Many existing dependency properties have a property-changed behavior.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>You can also add similar callback behavior to custom dependency properties, and implement your own property-changed callbacks.</source>
          <target state="new">You can also add similar callback behavior to custom dependency properties, and implement your own property-changed callbacks.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Custom dependency properties<ept id="p1">](custom-dependency-properties.md)</ept> for an example.</source>
          <target state="new">See <bpt id="p1">[</bpt>Custom dependency properties<ept id="p1">](custom-dependency-properties.md)</ept> for an example.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Default value and <bpt id="p1">**</bpt>ClearValue<ept id="p1">**</ept></source>
          <target state="new">Default value and <bpt id="p1">**</bpt>ClearValue<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A dependency property can have a default value defined as part of its property metadata.</source>
          <target state="new">A dependency property can have a default value defined as part of its property metadata.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>For a dependency property, its default value doesn't become irrelevant after the property's been set the first time.</source>
          <target state="new">For a dependency property, its default value doesn't become irrelevant after the property's been set the first time.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The default value might apply again at run-time whenever some other determinant in value precedence disappears.</source>
          <target state="new">The default value might apply again at run-time whenever some other determinant in value precedence disappears.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>(Dependency property value precedence is discussed in the next section.) For example, you might deliberately remove a style value or an animation that applies to a property, but you want the value to be a reasonable default after you do so.</source>
          <target state="new">(Dependency property value precedence is discussed in the next section.) For example, you might deliberately remove a style value or an animation that applies to a property, but you want the value to be a reasonable default after you do so.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The dependency property default value can provide this value, without needing to specifically set each property's value as an extra step.</source>
          <target state="new">The dependency property default value can provide this value, without needing to specifically set each property's value as an extra step.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You can deliberately set a property to the default value even after you have already set it with a local value.</source>
          <target state="new">You can deliberately set a property to the default value even after you have already set it with a local value.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To reset a value to be the default again, and also to enable other participants in precedence that might override the default but not a local value, call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ClearValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept> method (reference the property to clear as a method parameter).</source>
          <target state="new">To reset a value to be the default again, and also to enable other participants in precedence that might override the default but not a local value, call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ClearValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept> method (reference the property to clear as a method parameter).</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You don't always want the property to literally use the default value, but clearing the local value and reverting to the default value might enable another item in precedence that you want to act now, such as using the value that came from a style setter in a control template.</source>
          <target state="new">You don't always want the property to literally use the default value, but clearing the local value and reverting to the default value might enable another item in precedence that you want to act now, such as using the value that came from a style setter in a control template.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> and threading</source>
          <target state="new"><bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> and threading</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> instances must be created on the UI thread which is associated with the current <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Window<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209041)</ept> that is shown by a Windows Runtime app.</source>
          <target state="new">All <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> instances must be created on the UI thread which is associated with the current <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Window<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209041)</ept> that is shown by a Windows Runtime app.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Although each <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> must be created on the main UI thread, the objects can be accessed using a dispatcher reference from other threads, by accessing the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Dispatcher<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br230616)</ept> property.</source>
          <target state="new">Although each <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> must be created on the main UI thread, the objects can be accessed using a dispatcher reference from other threads, by accessing the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Dispatcher<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br230616)</ept> property.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Then you can call methods such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RunAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh750317)</ept> on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreDispatcher<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept> object, and execute your code within the rules of thread restrictions on the UI thread.</source>
          <target state="new">Then you can call methods such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RunAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh750317)</ept> on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreDispatcher<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept> object, and execute your code within the rules of thread restrictions on the UI thread.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The threading aspects of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> are relevant because it generally means that only code that runs on the UI thread can change or even read the value of a dependency property.</source>
          <target state="new">The threading aspects of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> are relevant because it generally means that only code that runs on the UI thread can change or even read the value of a dependency property.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Threading issues can usually be avoided in typical UI code that makes correct use of <bpt id="p1">**</bpt>async<ept id="p1">**</ept> patterns and background worker threads.</source>
          <target state="new">Threading issues can usually be avoided in typical UI code that makes correct use of <bpt id="p1">**</bpt>async<ept id="p1">**</ept> patterns and background worker threads.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>You typically only run into <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept>-related threading issues if you are defining your own <bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept> types and you attempt to use them for data sources or other scenarios where a <bpt id="p3">**</bpt>DependencyObject<ept id="p3">**</ept> isn't necessarily appropriate.</source>
          <target state="new">You typically only run into <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept>-related threading issues if you are defining your own <bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept> types and you attempt to use them for data sources or other scenarios where a <bpt id="p3">**</bpt>DependencyObject<ept id="p3">**</ept> isn't necessarily appropriate.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Conceptual material</source>
          <target state="new">Conceptual material</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Custom dependency properties</source>
          <target state="new">Custom dependency properties</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Attached properties overview</source>
          <target state="new">Attached properties overview</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Data binding in depth</source>
          <target state="new">Data binding in depth</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Storyboarded animations</source>
          <target state="new">Storyboarded animations</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Creating Windows Runtime components</source>
          <target state="new">Creating Windows Runtime components</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML user and custom controls sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=238581)</ept><ph id="ph1">
</ph><bpt id="p2">**</bpt>APIs related to dependency properties<ept id="p2">**</ept></source>
          <target state="new"><bpt id="p1">[</bpt>XAML user and custom controls sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=238581)</ept><ph id="ph1">
</ph><bpt id="p2">**</bpt>APIs related to dependency properties<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>DependencyObject</source>
          <target state="new">DependencyObject</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>DependencyProperty</source>
          <target state="new">DependencyProperty</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>