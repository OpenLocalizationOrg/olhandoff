<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\xaml-platform\xaml-namespaces-and-namespace-mapping.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e9d37634964a2859e6f670b3449acfa84564f9b</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>This topic explains the XML/XAML namespace (xmlns) mappings as found in the root element of most XAML files.</source>
          <target state="new">This topic explains the XML/XAML namespace (xmlns) mappings as found in the root element of most XAML files.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>It also describes how to produce similar mappings for custom types and assemblies.</source>
          <target state="new">It also describes how to produce similar mappings for custom types and assemblies.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XAML namespaces and namespace mapping</source>
          <target state="new">XAML namespaces and namespace mapping</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XAML namespaces and namespace mapping</source>
          <target state="new">XAML namespaces and namespace mapping</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles,  see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles,  see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic explains the XML/XAML namespace (<bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept>) mappings as found in the root element of most XAML files.</source>
          <target state="new">This topic explains the XML/XAML namespace (<bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept>) mappings as found in the root element of most XAML files.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It also describes how to produce similar mappings for custom types and assemblies.</source>
          <target state="new">It also describes how to produce similar mappings for custom types and assemblies.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How XAML namespaces relate to code definition and type libraries</source>
          <target state="new">How XAML namespaces relate to code definition and type libraries</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Both in its general purpose and for its application to Windows Runtime app programming, XAML is used to declare objects, properties of those objects, and object-property relationships expressed as hierarchies.</source>
          <target state="new">Both in its general purpose and for its application to Windows Runtime app programming, XAML is used to declare objects, properties of those objects, and object-property relationships expressed as hierarchies.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The objects you declare in XAML are backed by type libraries or other representations that are defined by other programming techniques and languages.</source>
          <target state="new">The objects you declare in XAML are backed by type libraries or other representations that are defined by other programming techniques and languages.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These libraries might be:</source>
          <target state="new">These libraries might be:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The built-in set of objects for the Windows Runtime.</source>
          <target state="new">The built-in set of objects for the Windows Runtime.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is a fixed set of objects, and accessing these objects from XAML uses internal type-mapping and activation logic.</source>
          <target state="new">This is a fixed set of objects, and accessing these objects from XAML uses internal type-mapping and activation logic.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Distributed libraries that are provided either by Microsoft or by third parties.</source>
          <target state="new">Distributed libraries that are provided either by Microsoft or by third parties.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Libraries that represent the definition of a third-party control that your app incorporates and your package redistributes.</source>
          <target state="new">Libraries that represent the definition of a third-party control that your app incorporates and your package redistributes.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your own library, which is part of your project and which holds some or all of your user code definitions.</source>
          <target state="new">Your own library, which is part of your project and which holds some or all of your user code definitions.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Backing type info is associated with particular XAML namespace definitions.</source>
          <target state="new">Backing type info is associated with particular XAML namespace definitions.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>XAML frameworks such as the Windows Runtime can aggregate multiple assemblies and multiple code namespaces to map to a single XAML namespace.</source>
          <target state="new">XAML frameworks such as the Windows Runtime can aggregate multiple assemblies and multiple code namespaces to map to a single XAML namespace.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This enables the concept of a XAML vocabulary that covers a larger programming framework or technology.</source>
          <target state="new">This enables the concept of a XAML vocabulary that covers a larger programming framework or technology.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A XAML vocabulary can be quite extensive—for example, most of the XAML documented for Windows Runtime apps in this reference constitutes a single XAML vocabulary.</source>
          <target state="new">A XAML vocabulary can be quite extensive—for example, most of the XAML documented for Windows Runtime apps in this reference constitutes a single XAML vocabulary.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A XAML vocabulary is also extensible: you extend it by adding types to the backing code definitions, making sure to include the types in code namespaces that are already used as mapped namespace sources for the XAML vocabulary.</source>
          <target state="new">A XAML vocabulary is also extensible: you extend it by adding types to the backing code definitions, making sure to include the types in code namespaces that are already used as mapped namespace sources for the XAML vocabulary.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A XAML processor can look up types and members from the backing assemblies associated with that XAML namespace when it creates a run-time object representation.</source>
          <target state="new">A XAML processor can look up types and members from the backing assemblies associated with that XAML namespace when it creates a run-time object representation.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is why XAML is useful as a way to formalize and exchange definitions of object-construction behavior, and why XAML is used as a UI definition technique for a Windows Store app.</source>
          <target state="new">This is why XAML is useful as a way to formalize and exchange definitions of object-construction behavior, and why XAML is used as a UI definition technique for a Windows Store app.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>XAML namespaces in typical XAML markup usage</source>
          <target state="new">XAML namespaces in typical XAML markup usage</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A XAML file almost always declares a default XAML namespace in its root element.</source>
          <target state="new">A XAML file almost always declares a default XAML namespace in its root element.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The default XAML namespace defines which elements you can declare without qualifying them by a prefix.</source>
          <target state="new">The default XAML namespace defines which elements you can declare without qualifying them by a prefix.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, if you declare an element <ph id="ph1">`&lt;Balloon /&gt;`</ph>, a XAML parser will expect that an element <bpt id="p1">**</bpt>Balloon<ept id="p1">**</ept> exists and is valid in the default XAML namespace.</source>
          <target state="new">For example, if you declare an element <ph id="ph1">`&lt;Balloon /&gt;`</ph>, a XAML parser will expect that an element <bpt id="p1">**</bpt>Balloon<ept id="p1">**</ept> exists and is valid in the default XAML namespace.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In contrast, if <bpt id="p1">**</bpt>Balloon<ept id="p1">**</ept> is not in the defined default XAML namespace, you must instead qualify that element name with a prefix, for example <ph id="ph1">`&lt;party:Balloon /&gt;`</ph>.</source>
          <target state="new">In contrast, if <bpt id="p1">**</bpt>Balloon<ept id="p1">**</ept> is not in the defined default XAML namespace, you must instead qualify that element name with a prefix, for example <ph id="ph1">`&lt;party:Balloon /&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The prefix indicates that the element exists in a different XAML namespace than the default namespace, and you must map a XAML namespace to the prefix <bpt id="p1">**</bpt>party<ept id="p1">**</ept> before you can use this element.</source>
          <target state="new">The prefix indicates that the element exists in a different XAML namespace than the default namespace, and you must map a XAML namespace to the prefix <bpt id="p1">**</bpt>party<ept id="p1">**</ept> before you can use this element.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>XAML namespaces apply to the specific element on which they are declared, and also to any element that is contained by that element in the XAML structure.</source>
          <target state="new">XAML namespaces apply to the specific element on which they are declared, and also to any element that is contained by that element in the XAML structure.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For this reason, XAML namespaces are almost always declared on root elements of a XAML file to take advantage of this inheritance.</source>
          <target state="new">For this reason, XAML namespaces are almost always declared on root elements of a XAML file to take advantage of this inheritance.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The default and XAML language XAML namespace declarations</source>
          <target state="new">The default and XAML language XAML namespace declarations</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Within the root element of most XAML files, there are two <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> declarations.</source>
          <target state="new">Within the root element of most XAML files, there are two <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> declarations.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first declaration maps a XAML namespace as the default:</source>
          <target state="new">The first declaration maps a XAML namespace as the default:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is the same XAML namespace identifier used in several predecessor Microsoft technologies that also use XAML as a UI definition markup format.</source>
          <target state="new">This is the same XAML namespace identifier used in several predecessor Microsoft technologies that also use XAML as a UI definition markup format.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The use of the same identifier is deliberate, and is helpful when you migrate previously defined UI to a Windows Runtime app using C++, C#, or Visual Basic.</source>
          <target state="new">The use of the same identifier is deliberate, and is helpful when you migrate previously defined UI to a Windows Runtime app using C++, C#, or Visual Basic.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The second declaration maps a separate XAML namespace for the XAML-defined language elements, mapping it (typically) to the "x:" prefix:</source>
          <target state="new">The second declaration maps a separate XAML namespace for the XAML-defined language elements, mapping it (typically) to the "x:" prefix:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> value, and the "x:" prefix it is mapped to, is also identical to the definitions used in several predecessor Microsoft technologies that use XAML.</source>
          <target state="new">This <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> value, and the "x:" prefix it is mapped to, is also identical to the definitions used in several predecessor Microsoft technologies that use XAML.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The relationship between these declarations is that XAML is a language definition, and the Windows Runtime is one implementation that uses XAML as a language and defines a specific vocabulary where its types are referenced in XAML.</source>
          <target state="new">The relationship between these declarations is that XAML is a language definition, and the Windows Runtime is one implementation that uses XAML as a language and defines a specific vocabulary where its types are referenced in XAML.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The XAML language specifies certain language elements, and each of these should be accessible through XAML processor implementations working against the XAML namespace.</source>
          <target state="new">The XAML language specifies certain language elements, and each of these should be accessible through XAML processor implementations working against the XAML namespace.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The "x:" mapping convention for the XAML language XAML namespace is followed by project templates, sample code, and the documentation for language features.</source>
          <target state="new">The "x:" mapping convention for the XAML language XAML namespace is followed by project templates, sample code, and the documentation for language features.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The XAML language namespace defines several commonly used features that are necessary even for basic Windows Runtime apps using C++, C#, or Visual Basic.</source>
          <target state="new">The XAML language namespace defines several commonly used features that are necessary even for basic Windows Runtime apps using C++, C#, or Visual Basic.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, to join any code-behind to a XAML file through a partial class, you must name that class as the <bpt id="p1">[</bpt>x:Class attribute<ept id="p1">](x-class-attribute.md)</ept> in the root element of the relevant XAML file.</source>
          <target state="new">For example, to join any code-behind to a XAML file through a partial class, you must name that class as the <bpt id="p1">[</bpt>x:Class attribute<ept id="p1">](x-class-attribute.md)</ept> in the root element of the relevant XAML file.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Or, any element as defined in a XAML page as a keyed resource in a <bpt id="p1">[</bpt>ResourceDictionary and XAML resource references<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187273)</ept> must have the <bpt id="p2">[</bpt>x:Key attribute<ept id="p2">](x-key-attribute.md)</ept> set on the object element in question.</source>
          <target state="new">Or, any element as defined in a XAML page as a keyed resource in a <bpt id="p1">[</bpt>ResourceDictionary and XAML resource references<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187273)</ept> must have the <bpt id="p2">[</bpt>x:Key attribute<ept id="p2">](x-key-attribute.md)</ept> set on the object element in question.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Other XAML namespaces</source>
          <target state="new">Other XAML namespaces</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In addition to the default namespace and the XAML language XAML namespace "x:", you may also see other mapped XAML namespaces in the initial default XAML for apps as generated by Microsoft Visual Studio.</source>
          <target state="new">In addition to the default namespace and the XAML language XAML namespace "x:", you may also see other mapped XAML namespaces in the initial default XAML for apps as generated by Microsoft Visual Studio.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>d: (http://schemas.microsoft.com/expression/blend/2008)</source>
          <target state="new">d: (http://schemas.microsoft.com/expression/blend/2008)</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The "d:" XAML namespace is intended for designer support, specifically designer support in the XAML design surfaces of Microsoft Visual Studio.</source>
          <target state="new">The "d:" XAML namespace is intended for designer support, specifically designer support in the XAML design surfaces of Microsoft Visual Studio.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The" d:" XAML namespace enables designer or design-time attributes on XAML elements.</source>
          <target state="new">The" d:" XAML namespace enables designer or design-time attributes on XAML elements.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These designer attributes affect only the design aspects of how XAML behaves.</source>
          <target state="new">These designer attributes affect only the design aspects of how XAML behaves.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The designer attributes are ignored when the same XAML is loaded by the Windows Runtime XAML parser when an app runs.</source>
          <target state="new">The designer attributes are ignored when the same XAML is loaded by the Windows Runtime XAML parser when an app runs.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Generally, the designer attributes are valid on any XAML element, but in practice there are only certain scenarios where applying a designer attribute yourself is appropriate.</source>
          <target state="new">Generally, the designer attributes are valid on any XAML element, but in practice there are only certain scenarios where applying a designer attribute yourself is appropriate.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In particular, many of the designer attributes are intended to provide a better experience for interacting with data contexts and data sources while you are developing XAML and code that use data binding.</source>
          <target state="new">In particular, many of the designer attributes are intended to provide a better experience for interacting with data contexts and data sources while you are developing XAML and code that use data binding.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d:DesignHeight and d:DesignWidth attributes:<ept id="p1">**</ept> These attributes are sometimes applied to the root of a XAML file that Visual Studio or another XAML designer surface creates for you.</source>
          <target state="new"><bpt id="p1">**</bpt>d:DesignHeight and d:DesignWidth attributes:<ept id="p1">**</ept> These attributes are sometimes applied to the root of a XAML file that Visual Studio or another XAML designer surface creates for you.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, these attributes are set on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UserControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227647)</ept> root of the XAML that is created if you add a new <bpt id="p3">**</bpt>UserControl<ept id="p3">**</ept> to your app project.</source>
          <target state="new">For example, these attributes are set on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UserControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227647)</ept> root of the XAML that is created if you add a new <bpt id="p3">**</bpt>UserControl<ept id="p3">**</ept> to your app project.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These attributes make it easier to design the composition of the XAML content, so that you have some anticipation of the layout constraints that might exist once that XAML content is used for a control instance or other part of a larger UI page.</source>
          <target state="new">These attributes make it easier to design the composition of the XAML content, so that you have some anticipation of the layout constraints that might exist once that XAML content is used for a control instance or other part of a larger UI page.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you are migrating XAML from Microsoft Silverlight you might have these attributes on root elements that represent an entire UI page.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you are migrating XAML from Microsoft Silverlight you might have these attributes on root elements that represent an entire UI page.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You might want to remove the attributes in this case.</source>
          <target state="new">You might want to remove the attributes in this case.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Other features of the XAML designers such as the simulator are probably more useful for designing page layouts that handle scaling and view states well than is a fixed size page layout using <bpt id="p1">**</bpt>d:DesignHeight<ept id="p1">**</ept> and <bpt id="p2">**</bpt>d:DesignWidth<ept id="p2">**</ept>.</source>
          <target state="new">Other features of the XAML designers such as the simulator are probably more useful for designing page layouts that handle scaling and view states well than is a fixed size page layout using <bpt id="p1">**</bpt>d:DesignHeight<ept id="p1">**</ept> and <bpt id="p2">**</bpt>d:DesignWidth<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d:DataContext attribute:<ept id="p1">**</ept> You can set this attribute on a page root or a control to override any explicit or inherited <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DataContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208713)</ept> that object otherwise has.</source>
          <target state="new"><bpt id="p1">**</bpt>d:DataContext attribute:<ept id="p1">**</ept> You can set this attribute on a page root or a control to override any explicit or inherited <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DataContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208713)</ept> that object otherwise has.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d:DesignSource attribute:<ept id="p1">**</ept> Specifies a design-time data source for a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209833)</ept>, overriding <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Source<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209835)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>d:DesignSource attribute:<ept id="p1">**</ept> Specifies a design-time data source for a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209833)</ept>, overriding <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Source<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209835)</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d:DesignInstance and d:DesignData markup extensions:<ept id="p1">**</ept> These markup extensions are used to provide the design-time data resources for either <bpt id="p2">**</bpt>d:DataContext<ept id="p2">**</ept> or <bpt id="p3">**</bpt>d:DesignSource<ept id="p3">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>d:DesignInstance and d:DesignData markup extensions:<ept id="p1">**</ept> These markup extensions are used to provide the design-time data resources for either <bpt id="p2">**</bpt>d:DataContext<ept id="p2">**</ept> or <bpt id="p3">**</bpt>d:DesignSource<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>We won't fully document how to use design-time data resources here.</source>
          <target state="new">We won't fully document how to use design-time data resources here.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Design-Time Attributes<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=272504)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Design-Time Attributes<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=272504)</ept>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For some usage examples, see <bpt id="p1">[</bpt>Sample data on the design surface, and for prototyping<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt517866)</ept>.</source>
          <target state="new">For some usage examples, see <bpt id="p1">[</bpt>Sample data on the design surface, and for prototyping<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt517866)</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>mc: (http://schemas.openxmlformats.org/markup-compatibility/2006)</source>
          <target state="new">mc: (http://schemas.openxmlformats.org/markup-compatibility/2006)</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>" mc:" indicates and supports a markup compatibility mode for reading XAML.</source>
          <target state="new">" mc:" indicates and supports a markup compatibility mode for reading XAML.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Typically, the "d:" prefix is associated with the attribute <bpt id="p1">**</bpt>mc:Ignorable<ept id="p1">**</ept>.</source>
          <target state="new">Typically, the "d:" prefix is associated with the attribute <bpt id="p1">**</bpt>mc:Ignorable<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This technique enables run-time XAML parsers to ignore the design attributes in "d:".</source>
          <target state="new">This technique enables run-time XAML parsers to ignore the design attributes in "d:".</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>local:<ept id="p1">**</ept> and <bpt id="p2">**</bpt>common:<ept id="p2">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>local:<ept id="p1">**</ept> and <bpt id="p2">**</bpt>common:<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>"local:" is a prefix that is often mapped for you within the XAML pages for a templated Windows Store app project.</source>
          <target state="new">"local:" is a prefix that is often mapped for you within the XAML pages for a templated Windows Store app project.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It's mapped to refer to the same namespace that's created to contain the <bpt id="p1">[</bpt>x:Class attribute<ept id="p1">](x-class-attribute.md)</ept> and code for all the XAML files including app.xaml.</source>
          <target state="new">It's mapped to refer to the same namespace that's created to contain the <bpt id="p1">[</bpt>x:Class attribute<ept id="p1">](x-class-attribute.md)</ept> and code for all the XAML files including app.xaml.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>So long as you define any custom classes you want to use in XAML in this same namespace, you can use the <bpt id="p1">**</bpt>local:<ept id="p1">**</ept> prefix to refer to your custom types in XAML.</source>
          <target state="new">So long as you define any custom classes you want to use in XAML in this same namespace, you can use the <bpt id="p1">**</bpt>local:<ept id="p1">**</ept> prefix to refer to your custom types in XAML.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A related prefix that comes from a templated Windows Store app project is <bpt id="p1">**</bpt>common:<ept id="p1">**</ept>.</source>
          <target state="new">A related prefix that comes from a templated Windows Store app project is <bpt id="p1">**</bpt>common:<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This prefix refers to a nested "Common" namespace that contains utility classes such as converters and commands, and you can find the definitions in the Common folder in the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> view.</source>
          <target state="new">This prefix refers to a nested "Common" namespace that contains utility classes such as converters and commands, and you can find the definitions in the Common folder in the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> view.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>vsm:</source>
          <target state="new">vsm:</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Do not use.</source>
          <target state="new">Do not use.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>"vsm:" is a prefix that is sometimes seen in older XAML templates imported from other Microsoft technologies.</source>
          <target state="new">"vsm:" is a prefix that is sometimes seen in older XAML templates imported from other Microsoft technologies.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The namespace originally addressed a legacy namespace tooling issue.</source>
          <target state="new">The namespace originally addressed a legacy namespace tooling issue.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You should delete XAML namespace definitions for "vsm:" in any XAML you use for the Windows Runtime, and change any prefix usages for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualState<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209007)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VisualStateGroup<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209014)</ept> and related objects to use the default XAML namespace instead.</source>
          <target state="new">You should delete XAML namespace definitions for "vsm:" in any XAML you use for the Windows Runtime, and change any prefix usages for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualState<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209007)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VisualStateGroup<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209014)</ept> and related objects to use the default XAML namespace instead.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more info on XAML migration, see <bpt id="p1">[</bpt>Migrating Silverlight or WPF XAML/code to a Windows Runtime app<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br229571)</ept>.</source>
          <target state="new">For more info on XAML migration, see <bpt id="p1">[</bpt>Migrating Silverlight or WPF XAML/code to a Windows Runtime app<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br229571)</ept>.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Mapping custom types to XAML namespaces and prefixes</source>
          <target state="new">Mapping custom types to XAML namespaces and prefixes</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can map a XAML namespace so that you can use XAML to access your own custom types.</source>
          <target state="new">You can map a XAML namespace so that you can use XAML to access your own custom types.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In other words, you are mapping a code namespace as it exists in a code representation that defines the custom type, and assigning it a XAML namespace along with a prefix for usage.</source>
          <target state="new">In other words, you are mapping a code namespace as it exists in a code representation that defines the custom type, and assigning it a XAML namespace along with a prefix for usage.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Custom types for XAML can be defined either in a Microsoft .NET language (C# or Microsoft Visual Basic) or in C++.</source>
          <target state="new">Custom types for XAML can be defined either in a Microsoft .NET language (C# or Microsoft Visual Basic) or in C++.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The mapping is made by defining an <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> prefix.</source>
          <target state="new">The mapping is made by defining an <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> prefix.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`xmlns:myTypes`</ph> defines a new XAML namespace that is accessed by prefixing all usages with the token <ph id="ph2">`myTypes:`</ph>.</source>
          <target state="new">For example, <ph id="ph1">`xmlns:myTypes`</ph> defines a new XAML namespace that is accessed by prefixing all usages with the token <ph id="ph2">`myTypes:`</ph>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> definition includes a value as well as the prefix naming.</source>
          <target state="new">An <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> definition includes a value as well as the prefix naming.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The value is a string that goes inside quotation marks, following an equal sign.</source>
          <target state="new">The value is a string that goes inside quotation marks, following an equal sign.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A common XML convention is to associate the XML namespace with a Uniform Resource Identifier (URI), so that there is a convention for uniqueness and identification.</source>
          <target state="new">A common XML convention is to associate the XML namespace with a Uniform Resource Identifier (URI), so that there is a convention for uniqueness and identification.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You also see this convention for the default XAML namespace and the XAML language XAML namespace, as well as for some lesser-used XAML namespaces that are used by Windows Runtime XAML.</source>
          <target state="new">You also see this convention for the default XAML namespace and the XAML language XAML namespace, as well as for some lesser-used XAML namespaces that are used by Windows Runtime XAML.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>But for a XAML namespace that maps custom types, instead of specifying a URI, you begin the prefix definition with the token "using:".</source>
          <target state="new">But for a XAML namespace that maps custom types, instead of specifying a URI, you begin the prefix definition with the token "using:".</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Following the "using:" token, you then name the code namespace.</source>
          <target state="new">Following the "using:" token, you then name the code namespace.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, to map a "custom1" prefix that enables you to reference a "CustomClasses" namespace, and use classes from that namespace or assembly as object elements in XAML, your XAML page should include the following mapping on the root element:</source>
          <target state="new">For example, to map a "custom1" prefix that enables you to reference a "CustomClasses" namespace, and use classes from that namespace or assembly as object elements in XAML, your XAML page should include the following mapping on the root element:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Partial classes of the same page scope do not need to be mapped.</source>
          <target state="new">Partial classes of the same page scope do not need to be mapped.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For example, you don't need prefixes to reference any event handlers that you defined for handling events from the XAML UI definition of your page.</source>
          <target state="new">For example, you don't need prefixes to reference any event handlers that you defined for handling events from the XAML UI definition of your page.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Also, many of the starting XAML pages from Visual Studio generated projects for a Windows Runtime app using C++, C#, or Visual Basic already map a "local:" prefix, which references the project-specified default namespace and the namespace used by partial class definitions.</source>
          <target state="new">Also, many of the starting XAML pages from Visual Studio generated projects for a Windows Runtime app using C++, C#, or Visual Basic already map a "local:" prefix, which references the project-specified default namespace and the namespace used by partial class definitions.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CLR language rules</source>
          <target state="new">CLR language rules</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you are writing your backing code in a .NET language (C# or Microsoft Visual Basic), you might be using conventions that use a dot (".") as part of namespace names to create a conceptual hierarchy of code namespaces.</source>
          <target state="new">If you are writing your backing code in a .NET language (C# or Microsoft Visual Basic), you might be using conventions that use a dot (".") as part of namespace names to create a conceptual hierarchy of code namespaces.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If your namespace definition contains a dot, the dot should be part of the value you specify after the "using:" token.</source>
          <target state="new">If your namespace definition contains a dot, the dot should be part of the value you specify after the "using:" token.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If your code-behind file or code definition file is a C++ file, there are certain conventions that still follow the common language runtime (CLR) language form, so that there is no difference in the XAML syntax.</source>
          <target state="new">If your code-behind file or code definition file is a C++ file, there are certain conventions that still follow the common language runtime (CLR) language form, so that there is no difference in the XAML syntax.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you declare nested namespaces in C++, the separator between the successive nested namespace strings should be "." rather than "::" when you specify the value that follows the "using:" token.</source>
          <target state="new">If you declare nested namespaces in C++, the separator between the successive nested namespace strings should be "." rather than "::" when you specify the value that follows the "using:" token.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Don't use nested types (such as nesting an enumeration within a class) when you define your code for use with XAML.</source>
          <target state="new">Don't use nested types (such as nesting an enumeration within a class) when you define your code for use with XAML.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Nested types can't be evaluated.</source>
          <target state="new">Nested types can't be evaluated.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>There's no way for the XAML parser to distinguish that a dot is part of the nested type name rather than part of the namespace name.</source>
          <target state="new">There's no way for the XAML parser to distinguish that a dot is part of the nested type name rather than part of the namespace name.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Custom types and assemblies</source>
          <target state="new">Custom types and assemblies</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The name of the assembly that defines the backing types for a XAML namespace is not specified in the mapping.</source>
          <target state="new">The name of the assembly that defines the backing types for a XAML namespace is not specified in the mapping.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The logic for which assemblies are available is controlled at the app-definition level and is part of basic app deployment and security principles.</source>
          <target state="new">The logic for which assemblies are available is controlled at the app-definition level and is part of basic app deployment and security principles.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Declare any assembly that you want included as a code-definition source for XAML as a dependent assembly in project settings.</source>
          <target state="new">Declare any assembly that you want included as a code-definition source for XAML as a dependent assembly in project settings.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Creating Windows Runtime components in C# and Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh441572.aspx)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Creating Windows Runtime components in C# and Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh441572.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If you are referencing custom types from the primary app's application definition or page definitions, those types are available without further dependent assembly configuration, but you still must map the code namespace that contains those types.</source>
          <target state="new">If you are referencing custom types from the primary app's application definition or page definitions, those types are available without further dependent assembly configuration, but you still must map the code namespace that contains those types.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A common convention is to map the prefix "local" for the default code namespace of any given XAML page.</source>
          <target state="new">A common convention is to map the prefix "local" for the default code namespace of any given XAML page.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This convention is often included in starting project templates for XAML projects.</source>
          <target state="new">This convention is often included in starting project templates for XAML projects.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Attached properties</source>
          <target state="new">Attached properties</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If you are referencing attached properties, the owner-type portion of the attached property name must either be in the default XAML namespace or be prefixed.</source>
          <target state="new">If you are referencing attached properties, the owner-type portion of the attached property name must either be in the default XAML namespace or be prefixed.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>It's rare to prefix attributes separately from their elements but this is one case where it's sometimes required, particularly for a custom attached property.</source>
          <target state="new">It's rare to prefix attributes separately from their elements but this is one case where it's sometimes required, particularly for a custom attached property.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Custom attached properties<ept id="p1">](custom-attached-properties.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Custom attached properties<ept id="p1">](custom-attached-properties.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>XAML overview</source>
          <target state="new">XAML overview</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>XAML syntax guide</source>
          <target state="new">XAML syntax guide</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Creating Windows Runtime components in C# and Visual Basic</source>
          <target state="new">Creating Windows Runtime components in C# and Visual Basic</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>C#, VB, and C++ project templates for Windows Runtime apps</source>
          <target state="new">C#, VB, and C++ project templates for Windows Runtime apps</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Migrating Silverlight or WPF XAML/code to a Windows Runtime app</source>
          <target state="new">Migrating Silverlight or WPF XAML/code to a Windows Runtime app</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>