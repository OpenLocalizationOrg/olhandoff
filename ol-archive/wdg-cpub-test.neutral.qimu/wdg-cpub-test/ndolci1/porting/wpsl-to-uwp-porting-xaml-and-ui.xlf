<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\porting\wpsl-to-uwp-porting-xaml-and-ui.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a9e71a4ec58278205bb325fd875959ff9948fb5</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.</source>
          <target state="new">The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Porting Windows Phone Silverlight XAML and UI to UWP</source>
          <target state="new">Porting Windows Phone Silverlight XAML and UI to UWP</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Porting Windows Phone Silverlight XAML and UI to UWP</source>
          <target state="new">Porting Windows Phone Silverlight XAML and UI to UWP</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The previous topic was <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](wpsl-to-uwp-troubleshooting.md)</ept>.</source>
          <target state="new">The previous topic was <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](wpsl-to-uwp-troubleshooting.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.</source>
          <target state="new">The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</source>
          <target state="new">You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Much of the imperative code in your presentation layer—view models, and code that manipulates UI elements—will also be straightforward to port.</source>
          <target state="new">Much of the imperative code in your presentation layer—view models, and code that manipulates UI elements—will also be straightforward to port.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A first look at the XAML markup</source>
          <target state="new">A first look at the XAML markup</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The previous topic showed you how to copy your XAML and code-behind files into your new Windows 10 Visual Studio project.</source>
          <target state="new">The previous topic showed you how to copy your XAML and code-behind files into your new Windows 10 Visual Studio project.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>One of the first issues you might notice highlighted in the Visual Studio XAML designer is that the <ph id="ph1">`PhoneApplicationPage`</ph> element at the root of your XAML file is not valid for a Universal Windows Platform (UWP) project.</source>
          <target state="new">One of the first issues you might notice highlighted in the Visual Studio XAML designer is that the <ph id="ph1">`PhoneApplicationPage`</ph> element at the root of your XAML file is not valid for a Universal Windows Platform (UWP) project.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the previous topic, you saved a copy of the XAML files that Visual Studio generated when it created the Windows 10 project.</source>
          <target state="new">In the previous topic, you saved a copy of the XAML files that Visual Studio generated when it created the Windows 10 project.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you open that version of MainPage.xaml, you'll see that at the root is the type <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept>, which is in the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows.UI.Xaml.Controls<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227716)</ept> namespace.</source>
          <target state="new">If you open that version of MainPage.xaml, you'll see that at the root is the type <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept>, which is in the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows.UI.Xaml.Controls<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227716)</ept> namespace.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>So, you can change all <ph id="ph1">`&lt;phone:PhoneApplicationPage&gt;`</ph> elements to <ph id="ph2">`&lt;Page&gt;`</ph> (don't forget property element syntax) and you can delete the <ph id="ph3">`xmlns:phone`</ph> declaration.</source>
          <target state="new">So, you can change all <ph id="ph1">`&lt;phone:PhoneApplicationPage&gt;`</ph> elements to <ph id="ph2">`&lt;Page&gt;`</ph> (don't forget property element syntax) and you can delete the <ph id="ph3">`xmlns:phone`</ph> declaration.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For a more general approach to finding the UWP type that corresponds to a Windows Phone Silverlight type, you can refer to <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.</source>
          <target state="new">For a more general approach to finding the UWP type that corresponds to a Windows Phone Silverlight type, you can refer to <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>XAML namespace prefix declarations</source>
          <target state="new">XAML namespace prefix declarations</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you use instances of custom types in your views—perhaps a view model instance or a value converter—then you will have XAML namespace prefix declarations in your XAML markup.</source>
          <target state="new">If you use instances of custom types in your views—perhaps a view model instance or a value converter—then you will have XAML namespace prefix declarations in your XAML markup.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The syntax of these differs between Windows Phone Silverlight and the UWP.</source>
          <target state="new">The syntax of these differs between Windows Phone Silverlight and the UWP.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Here are some examples:</source>
          <target state="new">Here are some examples:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Change "clr-namespace" to "using" and delete any assembly token and semi-colon (the assembly will be inferred).</source>
          <target state="new">Change "clr-namespace" to "using" and delete any assembly token and semi-colon (the assembly will be inferred).</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The result looks like this:</source>
          <target state="new">The result looks like this:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You may have a resource whose type is defined by the system:</source>
          <target state="new">You may have a resource whose type is defined by the system:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the UWP, omit the "System" prefix declaration and use the (already declared) "x" prefix instead:</source>
          <target state="new">In the UWP, omit the "System" prefix declaration and use the (already declared) "x" prefix instead:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Imperative code</source>
          <target state="new">Imperative code</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your view models are one place where there's imperative code that references UI types.</source>
          <target state="new">Your view models are one place where there's imperative code that references UI types.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Another place is any code-behind files that directly manipulate UI elements.</source>
          <target state="new">Another place is any code-behind files that directly manipulate UI elements.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, you might find that a line of code like this one doesn't compile yet:</source>
          <target state="new">For example, you might find that a line of code like this one doesn't compile yet:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BitmapImage<ept id="p1">**</ept> is in the <bpt id="p2">**</bpt>System.Windows.Media.Imaging<ept id="p2">**</ept> namespace in Windows Phone Silverlight, and a using directive in the same file allows <bpt id="p3">**</bpt>BitmapImage<ept id="p3">**</ept> to be used without namespace qualification as in the snippet above.</source>
          <target state="new"><bpt id="p1">**</bpt>BitmapImage<ept id="p1">**</ept> is in the <bpt id="p2">**</bpt>System.Windows.Media.Imaging<ept id="p2">**</ept> namespace in Windows Phone Silverlight, and a using directive in the same file allows <bpt id="p3">**</bpt>BitmapImage<ept id="p3">**</ept> to be used without namespace qualification as in the snippet above.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In a case like this, you can right-click the type name (<bpt id="p1">**</bpt>BitmapImage<ept id="p1">**</ept>) in Visual Studio and use the <bpt id="p2">**</bpt>Resolve<ept id="p2">**</ept> command on the context menu to add a new namespace directive to the file.</source>
          <target state="new">In a case like this, you can right-click the type name (<bpt id="p1">**</bpt>BitmapImage<ept id="p1">**</ept>) in Visual Studio and use the <bpt id="p2">**</bpt>Resolve<ept id="p2">**</ept> command on the context menu to add a new namespace directive to the file.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this case, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Media.Imaging<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br243258)</ept> namespace is added, which is where the type lives in the UWP.</source>
          <target state="new">In this case, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Media.Imaging<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br243258)</ept> namespace is added, which is where the type lives in the UWP.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can remove the <bpt id="p1">**</bpt>System.Windows.Media.Imaging<ept id="p1">**</ept> using directive, and that will be all it takes to port code like that in the snippet above.</source>
          <target state="new">You can remove the <bpt id="p1">**</bpt>System.Windows.Media.Imaging<ept id="p1">**</ept> using directive, and that will be all it takes to port code like that in the snippet above.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you're done, you'll have removed all Windows Phone Silverlight namespaces.</source>
          <target state="new">When you're done, you'll have removed all Windows Phone Silverlight namespaces.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In simple cases like this, where you're mapping the types in an old namespace to the same types in a new one, you can use Visual Studio's <bpt id="p1">**</bpt>Find and Replace<ept id="p1">**</ept> command to make bulk changes to your source code.</source>
          <target state="new">In simple cases like this, where you're mapping the types in an old namespace to the same types in a new one, you can use Visual Studio's <bpt id="p1">**</bpt>Find and Replace<ept id="p1">**</ept> command to make bulk changes to your source code.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Resolve<ept id="p1">**</ept> command is a great way of discovering a type's new namespace.</source>
          <target state="new">The <bpt id="p1">**</bpt>Resolve<ept id="p1">**</ept> command is a great way of discovering a type's new namespace.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>As another example, you can replace all "System.Windows" with "Windows.UI.Xaml".</source>
          <target state="new">As another example, you can replace all "System.Windows" with "Windows.UI.Xaml".</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>That will essentially port all using directives and all fully-qualified type names that refer to that namespace.</source>
          <target state="new">That will essentially port all using directives and all fully-qualified type names that refer to that namespace.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Once all the old using directives are removed and the new ones added, you can use Visual Studio's <bpt id="p1">**</bpt>Organize Usings<ept id="p1">**</ept> command to sort your directives and remove unused ones.</source>
          <target state="new">Once all the old using directives are removed and the new ones added, you can use Visual Studio's <bpt id="p1">**</bpt>Organize Usings<ept id="p1">**</ept> command to sort your directives and remove unused ones.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Sometimes, fixing imperative code will be as minor as changing a parameter's type.</source>
          <target state="new">Sometimes, fixing imperative code will be as minor as changing a parameter's type.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Other times, you will need to use UWP APIs instead of .NET APIs for Windows Store apps.</source>
          <target state="new">Other times, you will need to use UWP APIs instead of .NET APIs for Windows Store apps.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To identify which APIs are supported, use the rest of this porting guide in combination with <bpt id="p1">[</bpt>.NET for Windows Store apps overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/br230302.aspx)</ept> and the <bpt id="p2">[</bpt>Windows Runtime reference<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br211377)</ept>.</source>
          <target state="new">To identify which APIs are supported, use the rest of this porting guide in combination with <bpt id="p1">[</bpt>.NET for Windows Store apps overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/br230302.aspx)</ept> and the <bpt id="p2">[</bpt>Windows Runtime reference<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br211377)</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>And, if you just want to get to the stage where your project builds, you can comment or stub out any non-essential code.</source>
          <target state="new">And, if you just want to get to the stage where your project builds, you can comment or stub out any non-essential code.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Then iterate, one issue at a time, and refer to the following topics in this section (and the previous topic: <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](wpsl-to-uwp-troubleshooting.md)</ept>), until any build and runtime issues are ironed-out and your port is complete.</source>
          <target state="new">Then iterate, one issue at a time, and refer to the following topics in this section (and the previous topic: <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](wpsl-to-uwp-troubleshooting.md)</ept>), until any build and runtime issues are ironed-out and your port is complete.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Adaptive/responsive UI</source>
          <target state="new">Adaptive/responsive UI</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Because your Windows 10 app can run on a potentially wide range of devices—each with its own screen size and resolution—you'll want to go beyond the minimal steps to port your app and you'll want to tailor your UI to look its best on those devices.</source>
          <target state="new">Because your Windows 10 app can run on a potentially wide range of devices—each with its own screen size and resolution—you'll want to go beyond the minimal steps to port your app and you'll want to tailor your UI to look its best on those devices.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use the adaptive Visual State Manager feature to dynamically detect window size and to change layout in response, and an example of how to do that is shown in the section <bpt id="p1">[</bpt>Adaptive UI<ept id="p1">](wpsl-to-uwp-case-study-bookstore2.md#adaptive-ui)</ept> in the Bookstore2 case study topic.</source>
          <target state="new">You can use the adaptive Visual State Manager feature to dynamically detect window size and to change layout in response, and an example of how to do that is shown in the section <bpt id="p1">[</bpt>Adaptive UI<ept id="p1">](wpsl-to-uwp-case-study-bookstore2.md#adaptive-ui)</ept> in the Bookstore2 case study topic.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Alarms and Reminders</source>
          <target state="new">Alarms and Reminders</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Code using the <bpt id="p1">**</bpt>Alarm<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Reminder<ept id="p2">**</ept> classes should be ported to use the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>BackgroundTaskBuilder<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br224768)</ept> class to create and register a background task, and display a toast at the relevant time.</source>
          <target state="new">Code using the <bpt id="p1">**</bpt>Alarm<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Reminder<ept id="p2">**</ept> classes should be ported to use the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>BackgroundTaskBuilder<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br224768)</ept> class to create and register a background task, and display a toast at the relevant time.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Background processing<ept id="p1">](wpsl-to-uwp-business-and-data.md#background-processing)</ept> and <bpt id="p2">[</bpt>Toasts<ept id="p2">](#toasts)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Background processing<ept id="p1">](wpsl-to-uwp-business-and-data.md#background-processing)</ept> and <bpt id="p2">[</bpt>Toasts<ept id="p2">](#toasts)</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Animation</source>
          <target state="new">Animation</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>As a preferred alternative to keyframe animations and from/to animations, the UWP animation library is available to UWP apps.</source>
          <target state="new">As a preferred alternative to keyframe animations and from/to animations, the UWP animation library is available to UWP apps.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These animations have been designed and tuned to run smoothly, to look great, and to make your app appear as integrated with Windows as the built-in apps do.</source>
          <target state="new">These animations have been designed and tuned to run smoothly, to look great, and to make your app appear as integrated with Windows as the built-in apps do.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Quickstart: Animating your UI using library animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh452703)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Quickstart: Animating your UI using library animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh452703)</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you do use keyframe animations or from/to animations in your UWP apps, then you may want to understand the distinction between independent and dependent animations that the new platform has introduced.</source>
          <target state="new">If you do use keyframe animations or from/to animations in your UWP apps, then you may want to understand the distinction between independent and dependent animations that the new platform has introduced.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Optimize animations and media<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204774)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Optimize animations and media<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204774)</ept>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Animations that run on the UI thread (ones that animate layout properties, for example) are known as dependent animations, and when run on the new platform, they will have no effect unless you do one of two things.</source>
          <target state="new">Animations that run on the UI thread (ones that animate layout properties, for example) are known as dependent animations, and when run on the new platform, they will have no effect unless you do one of two things.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can either re-target them to animate different properties, such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RenderTransform<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208980)</ept>, thereby making them independent.</source>
          <target state="new">You can either re-target them to animate different properties, such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RenderTransform<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208980)</ept>, thereby making them independent.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Or you can set <ph id="ph1">`EnableDependentAnimation="True"`</ph> on the animation element in order to confirm your intention to run an animation that cannot be guaranteed to run smoothly.</source>
          <target state="new">Or you can set <ph id="ph1">`EnableDependentAnimation="True"`</ph> on the animation element in order to confirm your intention to run an animation that cannot be guaranteed to run smoothly.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you use Blend for Visual Studio to author new animations, then that property will be set for you where necessary.</source>
          <target state="new">If you use Blend for Visual Studio to author new animations, then that property will be set for you where necessary.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Back button handling</source>
          <target state="new">Back button handling</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In a Windows 10 app, you can use a single approach to handling the back button and it will work on all devices.</source>
          <target state="new">In a Windows 10 app, you can use a single approach to handling the back button and it will work on all devices.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>On mobile devices, the button is provided for you as a capacitive button on the device, or as a button in the shell.</source>
          <target state="new">On mobile devices, the button is provided for you as a capacitive button on the device, or as a button in the shell.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>On a desktop device, you add a button to your app's chrome whenever back-navigation is possible within the app, and this appears in the title bar for windowed apps or in the task bar for Tablet mode.</source>
          <target state="new">On a desktop device, you add a button to your app's chrome whenever back-navigation is possible within the app, and this appears in the title bar for windowed apps or in the task bar for Tablet mode.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The back button event is a universal concept across all device families, and buttons implemented in hardware or in software raise the same <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BackRequested<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn893596)</ept> event.</source>
          <target state="new">The back button event is a universal concept across all device families, and buttons implemented in hardware or in software raise the same <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BackRequested<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn893596)</ept> event.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The example below works for all device families and it is good for cases where the same processing applies to all pages, and where you needn't confirm navigation (for example, to warn about unsaved changes).</source>
          <target state="new">The example below works for all device families and it is good for cases where the same processing applies to all pages, and where you needn't confirm navigation (for example, to warn about unsaved changes).</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>There's also a single approach for all device families for programmatically exiting the app.</source>
          <target state="new">There's also a single approach for all device families for programmatically exiting the app.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Binding, and compiled bindings with {x:Bind}</source>
          <target state="new">Binding, and compiled bindings with {x:Bind}</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The topic of binding includes:</source>
          <target state="new">The topic of binding includes:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Binding a UI element to "data" (that is, to the properties and commands of a view model)</source>
          <target state="new">Binding a UI element to "data" (that is, to the properties and commands of a view model)</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Binding a UI element to another UI element</source>
          <target state="new">Binding a UI element to another UI element</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Writing a view model that is observable (that is, it raises notifications when a property value changes and when the availability of a command changes)</source>
          <target state="new">Writing a view model that is observable (that is, it raises notifications when a property value changes and when the availability of a command changes)</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>All of these aspects are largely still supported, but there are namespace differences.</source>
          <target state="new">All of these aspects are largely still supported, but there are namespace differences.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>System.Windows.Data.Binding<ept id="p1">**</ept> maps to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows.UI.Xaml.Data.Binding<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept>, <bpt id="p4">**</bpt>System.ComponentModel.INotifyPropertyChanged<ept id="p4">**</ept> maps to <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Windows.UI.Xaml.Data.INotifyPropertyChanged<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209899)</ept>, and <bpt id="p7">**</bpt>System.Collections.Specialized.INotifyPropertyChanged<ept id="p7">**</ept> maps to <bpt id="p8">[</bpt><bpt id="p9">**</bpt>Windows.UI.Xaml.Interop.INotifyCollectionChanged<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/hh702001)</ept>.</source>
          <target state="new">For example, <bpt id="p1">**</bpt>System.Windows.Data.Binding<ept id="p1">**</ept> maps to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows.UI.Xaml.Data.Binding<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept>, <bpt id="p4">**</bpt>System.ComponentModel.INotifyPropertyChanged<ept id="p4">**</ept> maps to <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Windows.UI.Xaml.Data.INotifyPropertyChanged<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209899)</ept>, and <bpt id="p7">**</bpt>System.Collections.Specialized.INotifyPropertyChanged<ept id="p7">**</ept> maps to <bpt id="p8">[</bpt><bpt id="p9">**</bpt>Windows.UI.Xaml.Interop.INotifyCollectionChanged<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/hh702001)</ept>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight app bars and app bar buttons can't be bound like they can in a UWP app.</source>
          <target state="new">Windows Phone Silverlight app bars and app bar buttons can't be bound like they can in a UWP app.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You may have imperative code that constructs your app bar and its buttons, binds them to properties and localized strings, and handles their events.</source>
          <target state="new">You may have imperative code that constructs your app bar and its buttons, binds them to properties and localized strings, and handles their events.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If so, you now have the option to port that imperative code by replacing it with declarative markup bound to properties and commands, and with static resource references, thus making your app incrementally safer and more maintainable.</source>
          <target state="new">If so, you now have the option to port that imperative code by replacing it with declarative markup bound to properties and commands, and with static resource references, thus making your app incrementally safer and more maintainable.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can use Visual Studio or Blend for Visual Studio to bind and style UWP app bar buttons just like any other XAML element.</source>
          <target state="new">You can use Visual Studio or Blend for Visual Studio to bind and style UWP app bar buttons just like any other XAML element.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that in a UWP app the type names you use are <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CommandBar<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279427)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AppBarButton<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn279244)</ept>.</source>
          <target state="new">Note that in a UWP app the type names you use are <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CommandBar<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279427)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AppBarButton<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn279244)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The binding-related features of UWP apps currently have the following limitations:</source>
          <target state="new">The binding-related features of UWP apps currently have the following limitations:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>There is no built-in support for data-entry validation and the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDataErrorInfo<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.IDataErrorInfo)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>INotifyDataErrorInfo<ept id="p4">**</ept><ept id="p3">](T:System.ComponentModel.INotifyDataErrorInfo)</ept> interfaces.</source>
          <target state="new">There is no built-in support for data-entry validation and the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDataErrorInfo<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.IDataErrorInfo)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>INotifyDataErrorInfo<ept id="p4">**</ept><ept id="p3">](T:System.ComponentModel.INotifyDataErrorInfo)</ept> interfaces.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> class does not include the extended formatting properties available in Windows Phone Silverlight.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> class does not include the extended formatting properties available in Windows Phone Silverlight.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>However, you can still implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209903)</ept> to provide custom formatting.</source>
          <target state="new">However, you can still implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209903)</ept> to provide custom formatting.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209903)</ept> methods take language strings as parameters instead of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CultureInfo<ept id="p4">**</ept><ept id="p3">](T:System.Globalization.CultureInfo)</ept> objects.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209903)</ept> methods take language strings as parameters instead of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CultureInfo<ept id="p4">**</ept><ept id="p3">](T:System.Globalization.CultureInfo)</ept> objects.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209833)</ept> class does not provide built-in support for sorting and filtering, and grouping works differently.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209833)</ept> class does not provide built-in support for sorting and filtering, and grouping works differently.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept> and the <bpt id="p2">[</bpt>Data binding sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=226854)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept> and the <bpt id="p2">[</bpt>Data binding sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=226854)</ept>.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Although the same binding features are still largely supported, Windows 10 offers the option of a new and more performant binding mechanism called compiled bindings, which use the {x:Bind} markup extension.</source>
          <target state="new">Although the same binding features are still largely supported, Windows 10 offers the option of a new and more performant binding mechanism called compiled bindings, which use the {x:Bind} markup extension.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Data Binding: Boost Your Apps' Performance Through New Enhancements to XAML Data Binding<ept id="p1">](http://channel9.msdn.com/Events/Build/2015/3-635)</ept>, and the <bpt id="p2">[</bpt>x:Bind Sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=619989)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Data Binding: Boost Your Apps' Performance Through New Enhancements to XAML Data Binding<ept id="p1">](http://channel9.msdn.com/Events/Build/2015/3-635)</ept>, and the <bpt id="p2">[</bpt>x:Bind Sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=619989)</ept>.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Binding an Image to a view model</source>
          <target state="new">Binding an Image to a view model</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can bind the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image.Source<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242760)</ept> property to any property of a view model that's of type <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ImageSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br210107)</ept>.</source>
          <target state="new">You can bind the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image.Source<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242760)</ept> property to any property of a view model that's of type <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ImageSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br210107)</ept>.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Here's a typical implementation of such a property in a Windows Phone Silverlight app:</source>
          <target state="new">Here's a typical implementation of such a property in a Windows Phone Silverlight app:</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In a UWP app, you use the ms-appx <bpt id="p1">[</bpt>URI scheme<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/jj655406)</ept>.</source>
          <target state="new">In a UWP app, you use the ms-appx <bpt id="p1">[</bpt>URI scheme<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/jj655406)</ept>.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>So that you can keep the rest of your code the same, you can use a different overload of the <bpt id="p1">**</bpt>System.Uri<ept id="p1">**</ept> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.</source>
          <target state="new">So that you can keep the rest of your code the same, you can use a different overload of the <bpt id="p1">**</bpt>System.Uri<ept id="p1">**</ept> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Like this:</source>
          <target state="new">Like this:</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>That way, the rest of the view model, the path values in the image path property, and the bindings in the XAML markup, can all stay exactly the same.</source>
          <target state="new">That way, the rest of the view model, the path values in the image path property, and the bindings in the XAML markup, can all stay exactly the same.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Controls, and control styles/templates</source>
          <target state="new">Controls, and control styles/templates</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight apps use controls defined in the <bpt id="p1">**</bpt>Microsoft.Phone.Controls<ept id="p1">**</ept> namespace and the <bpt id="p2">**</bpt>System.Windows.Controls<ept id="p2">**</ept> namespace.</source>
          <target state="new">Windows Phone Silverlight apps use controls defined in the <bpt id="p1">**</bpt>Microsoft.Phone.Controls<ept id="p1">**</ept> namespace and the <bpt id="p2">**</bpt>System.Windows.Controls<ept id="p2">**</ept> namespace.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>XAML UWP apps use controls defined in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Controls<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227716)</ept> namespace.</source>
          <target state="new">XAML UWP apps use controls defined in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Controls<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227716)</ept> namespace.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The architecture and design of XAML controls in the UWP is virtually the same as Windows Phone Silverlight controls.</source>
          <target state="new">The architecture and design of XAML controls in the UWP is virtually the same as Windows Phone Silverlight controls.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>But, some changes have been made to improve the set of available controls and to unify them with Windows apps.</source>
          <target state="new">But, some changes have been made to improve the set of available controls and to unify them with Windows apps.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Here are specific examples.</source>
          <target state="new">Here are specific examples.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Control name</source>
          <target state="new">Control name</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Change</source>
          <target state="new">Change</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>ApplicationBar</source>
          <target state="new">ApplicationBar</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Page.TopAppBar<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702575)</ept> property.</source>
          <target state="new">The <bpt id="p1">[</bpt>Page.TopAppBar<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702575)</ept> property.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>ApplicationBarIconButton</source>
          <target state="new">ApplicationBarIconButton</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The UWP equivalent is the <bpt id="p1">[</bpt>Glyph<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279538)</ept> property.</source>
          <target state="new">The UWP equivalent is the <bpt id="p1">[</bpt>Glyph<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279538)</ept> property.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>PrimaryCommands is the content property of CommandBar.</source>
          <target state="new">PrimaryCommands is the content property of CommandBar.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The XAML parser interprets an element's inner xml as the value of its content property.</source>
          <target state="new">The XAML parser interprets an element's inner xml as the value of its content property.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>ApplicationBarMenuItem</source>
          <target state="new">ApplicationBarMenuItem</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The UWP equivalent is the <bpt id="p1">[</bpt>AppBarButton.Label<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279261)</ept> set to the menu item text.</source>
          <target state="new">The UWP equivalent is the <bpt id="p1">[</bpt>AppBarButton.Label<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279261)</ept> set to the menu item text.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>ContextMenu (in the Windows Phone Toolkit)</source>
          <target state="new">ContextMenu (in the Windows Phone Toolkit)</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For a single selection fly-out, use <bpt id="p1">[</bpt>Flyout<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279496)</ept>.</source>
          <target state="new">For a single selection fly-out, use <bpt id="p1">[</bpt>Flyout<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279496)</ept>.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>ControlTiltEffect.TiltEffect class</source>
          <target state="new">ControlTiltEffect.TiltEffect class</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Animations from the UWP animation library are built into the default Styles of the common controls.</source>
          <target state="new">Animations from the UWP animation library are built into the default Styles of the common controls.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Animating pointer actions<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/jj649432)</ept>.</source>
          <target state="new">See the <bpt id="p1">[</bpt>Animating pointer actions<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/jj649432)</ept>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>LongListSelector with grouped data</source>
          <target state="new">LongListSelector with grouped data</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The Windows Phone Silverlight LongListSelector functions in two ways, which can be used in concert.</source>
          <target state="new">The Windows Phone Silverlight LongListSelector functions in two ways, which can be used in concert.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>First, it is able to display data that is grouped by a key, for example, a list of names grouped by initial letter.</source>
          <target state="new">First, it is able to display data that is grouped by a key, for example, a list of names grouped by initial letter.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Second, it is able to "zoom" between two semantic views: the grouped list of items (for example, names), and a list of just the group keys themselves (for example, initial letters).</source>
          <target state="new">Second, it is able to "zoom" between two semantic views: the grouped list of items (for example, names), and a list of just the group keys themselves (for example, initial letters).</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>With the UWP, you can display grouped data with the <bpt id="p1">[</bpt>Guidelines for list and grid view controls<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt186889)</ept>.</source>
          <target state="new">With the UWP, you can display grouped data with the <bpt id="p1">[</bpt>Guidelines for list and grid view controls<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt186889)</ept>.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>LongListSelector with flat data</source>
          <target state="new">LongListSelector with flat data</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For performance reasons, in the case of very long lists, we recommended LongListSelector instead of a Windows Phone Silverlight list box even for flat, non-grouped data.</source>
          <target state="new">For performance reasons, in the case of very long lists, we recommended LongListSelector instead of a Windows Phone Silverlight list box even for flat, non-grouped data.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In a UWP app, <bpt id="p1">[</bpt>GridView<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242705)</ept> are preferred for long lists of items whether or not the data are amenable to grouping.</source>
          <target state="new">In a UWP app, <bpt id="p1">[</bpt>GridView<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242705)</ept> are preferred for long lists of items whether or not the data are amenable to grouping.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Panorama</source>
          <target state="new">Panorama</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The Windows Phone Silverlight Panorama control maps to the <bpt id="p1">[</bpt>Guidelines for hub controls in Windows Store apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn449149)</ept> and Guidelines for the hub control.</source>
          <target state="new">The Windows Phone Silverlight Panorama control maps to the <bpt id="p1">[</bpt>Guidelines for hub controls in Windows Store apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn449149)</ept> and Guidelines for the hub control.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Note that a Panorama control wraps around from the last section to the first, and its background image moves in parallax relative to the sections.</source>
          <target state="new">Note that a Panorama control wraps around from the last section to the first, and its background image moves in parallax relative to the sections.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hub<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn251843)</ept> sections do not wrap around, and parallax is not used.</source>
          <target state="new"><bpt id="p1">[</bpt>Hub<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn251843)</ept> sections do not wrap around, and parallax is not used.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Pivot</source>
          <target state="new">Pivot</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The UWP equivalent of the Windows Phone Silverlight Pivot control is <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Pivot<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn608241)</ept>.</source>
          <target state="new">The UWP equivalent of the Windows Phone Silverlight Pivot control is <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Pivot<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn608241)</ept>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It is available for all device families.</source>
          <target state="new">It is available for all device families.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The PointerOver visual state is relevant in custom styles/templates in Windows 10 apps, but not in Windows Phone Silverlight apps.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The PointerOver visual state is relevant in custom styles/templates in Windows 10 apps, but not in Windows Phone Silverlight apps.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>There are other reasons why your existing custom styles/templates may not be appropriate for Windows 10 apps, including system resource keys you are using, changes to the sets of visual states used, and performance improvements made to the Windows 10 default styles/templates.</source>
          <target state="new">There are other reasons why your existing custom styles/templates may not be appropriate for Windows 10 apps, including system resource keys you are using, changes to the sets of visual states used, and performance improvements made to the Windows 10 default styles/templates.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>We recommend that you edit a fresh copy of a control's default template for Windows 10 and then re-apply your style and template customization to that.</source>
          <target state="new">We recommend that you edit a fresh copy of a control's default template for Windows 10 and then re-apply your style and template customization to that.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For more info on UWP controls, see <bpt id="p1">[</bpt>Controls by function<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185405)</ept>, <bpt id="p2">[</bpt>Controls list<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt185406)</ept>, and <bpt id="p3">[</bpt>Guidelines for controls<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn611856)</ept>.</source>
          <target state="new">For more info on UWP controls, see <bpt id="p1">[</bpt>Controls by function<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185405)</ept>, <bpt id="p2">[</bpt>Controls list<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt185406)</ept>, and <bpt id="p3">[</bpt>Guidelines for controls<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn611856)</ept>.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Design language in Windows 10</source>
          <target state="new">Design language in Windows 10</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>There are some differences in design language between Windows Phone Silverlight apps and Windows 10 apps.</source>
          <target state="new">There are some differences in design language between Windows Phone Silverlight apps and Windows 10 apps.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For all the details, see <bpt id="p1">[</bpt>Design<ept id="p1">](http://dev.windows.com/design)</ept>.</source>
          <target state="new">For all the details, see <bpt id="p1">[</bpt>Design<ept id="p1">](http://dev.windows.com/design)</ept>.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Despite the design language changes, our design principles remain consistent: be attentive to detail but always strive for simplicity through focusing on content not chrome, fiercely reducing visual elements, and remaining authentic to the digital domain; use visual hierarchy especially with typography; design on a grid; and bring your experiences to life with fluid animations.</source>
          <target state="new">Despite the design language changes, our design principles remain consistent: be attentive to detail but always strive for simplicity through focusing on content not chrome, fiercely reducing visual elements, and remaining authentic to the digital domain; use visual hierarchy especially with typography; design on a grid; and bring your experiences to life with fluid animations.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Localization and globalization</source>
          <target state="new">Localization and globalization</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For localized strings, you can re-use the .resx file from your Windows Phone Silverlight project in your UWP app project.</source>
          <target state="new">For localized strings, you can re-use the .resx file from your Windows Phone Silverlight project in your UWP app project.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Copy the file over, add it to the project, and rename it to Resources.resw so that the lookup mechanism will find it by default.</source>
          <target state="new">Copy the file over, add it to the project, and rename it to Resources.resw so that the lookup mechanism will find it by default.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Set <bpt id="p1">**</bpt>Build Action<ept id="p1">**</ept> to <bpt id="p2">**</bpt>PRIResource<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Copy to Output Directory<ept id="p3">**</ept> to <bpt id="p4">**</bpt>Do not copy<ept id="p4">**</ept>.</source>
          <target state="new">Set <bpt id="p1">**</bpt>Build Action<ept id="p1">**</ept> to <bpt id="p2">**</bpt>PRIResource<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Copy to Output Directory<ept id="p3">**</ept> to <bpt id="p4">**</bpt>Do not copy<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can then use the strings in markup by specifying the <bpt id="p1">**</bpt>x:Uid<ept id="p1">**</ept> attribute on your XAML elements.</source>
          <target state="new">You can then use the strings in markup by specifying the <bpt id="p1">**</bpt>x:Uid<ept id="p1">**</ept> attribute on your XAML elements.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Quickstart: Using string resources<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Quickstart: Using string resources<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</ept>.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight apps use the <bpt id="p1">**</bpt>CultureInfo<ept id="p1">**</ept> class to help globalize an app.</source>
          <target state="new">Windows Phone Silverlight apps use the <bpt id="p1">**</bpt>CultureInfo<ept id="p1">**</ept> class to help globalize an app.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>UWP apps use MRT (Modern Resource Technology), which enables the dynamic loading of app resources (localization, scale, and theme) both at runtime and in the Visual Studio design surface.</source>
          <target state="new">UWP apps use MRT (Modern Resource Technology), which enables the dynamic loading of app resources (localization, scale, and theme) both at runtime and in the Visual Studio design surface.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Guidelines for files, data, and globalization<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn611859)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Guidelines for files, data, and globalization<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn611859)</ept>.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceContext.QualifierValues<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206071)</ept> topic describes how to load device family-specific resources based on the device family resource selection factor.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceContext.QualifierValues<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206071)</ept> topic describes how to load device family-specific resources based on the device family resource selection factor.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Media and graphics</source>
          <target state="new">Media and graphics</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>As you read about UWP media and graphics, bear in mind that the Windows design principles encourage a fierce reduction of anything superfluous, including graphical complexity and clutter.</source>
          <target state="new">As you read about UWP media and graphics, bear in mind that the Windows design principles encourage a fierce reduction of anything superfluous, including graphical complexity and clutter.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Windows design is typified by clean and clear visuals, typography, and motion.</source>
          <target state="new">Windows design is typified by clean and clear visuals, typography, and motion.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If your app follows the same principles, then it will seem more like the built-in apps.</source>
          <target state="new">If your app follows the same principles, then it will seem more like the built-in apps.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight has a <bpt id="p1">**</bpt>RadialGradientBrush<ept id="p1">**</ept> type which is not present in the UWP, although other <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Brush<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> types are.</source>
          <target state="new">Windows Phone Silverlight has a <bpt id="p1">**</bpt>RadialGradientBrush<ept id="p1">**</ept> type which is not present in the UWP, although other <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Brush<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> types are.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In some cases, you will be able to get a similar effect with a bitmap.</source>
          <target state="new">In some cases, you will be able to get a similar effect with a bitmap.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Note that you can <bpt id="p1">[</bpt>create a radial gradient brush<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd756679)</ept> with Direct2D in a <bpt id="p2">[</bpt>Microsoft DirectX<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP.</source>
          <target state="new">Note that you can <bpt id="p1">[</bpt>create a radial gradient brush<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd756679)</ept> with Direct2D in a <bpt id="p2">[</bpt>Microsoft DirectX<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight has the <bpt id="p1">**</bpt>System.Windows.UIElement.OpacityMask<ept id="p1">**</ept> property, but that property is not a member of the UWP<bpt id="p2"> [</bpt><bpt id="p3">**</bpt>UIElement<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> type.</source>
          <target state="new">Windows Phone Silverlight has the <bpt id="p1">**</bpt>System.Windows.UIElement.OpacityMask<ept id="p1">**</ept> property, but that property is not a member of the UWP<bpt id="p2"> [</bpt><bpt id="p3">**</bpt>UIElement<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> type.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In some cases, you will be able to get a similar effect with a bitmap.</source>
          <target state="new">In some cases, you will be able to get a similar effect with a bitmap.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>And you can <bpt id="p1">[</bpt>create an opacity mask<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ee329947)</ept> with Direct2D in a <bpt id="p2">[</bpt>Microsoft DirectX<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP app.</source>
          <target state="new">And you can <bpt id="p1">[</bpt>create an opacity mask<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ee329947)</ept> with Direct2D in a <bpt id="p2">[</bpt>Microsoft DirectX<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP app.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>But, a common use case for <bpt id="p1">**</bpt>OpacityMask<ept id="p1">**</ept> is to use a single bitmap that adapts to both light and dark themes.</source>
          <target state="new">But, a common use case for <bpt id="p1">**</bpt>OpacityMask<ept id="p1">**</ept> is to use a single bitmap that adapts to both light and dark themes.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>For vector graphics, you can use theme-aware system brushes (such as the pie charts illustrated below).</source>
          <target state="new">For vector graphics, you can use theme-aware system brushes (such as the pie charts illustrated below).</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>But, to make a theme-aware bitmap (such as the check marks illustrated below), requires a different approach.</source>
          <target state="new">But, to make a theme-aware bitmap (such as the check marks illustrated below), requires a different approach.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>a theme-aware bitmap</source>
          <target state="new">a theme-aware bitmap</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In a Windows Phone Silverlight app, the technique is to use an alpha mask (in the form of a bitmap) as the <bpt id="p1">**</bpt>OpacityMask<ept id="p1">**</ept> for a <bpt id="p2">**</bpt>Rectangle<ept id="p2">**</ept> filled with the foreground brush:</source>
          <target state="new">In a Windows Phone Silverlight app, the technique is to use an alpha mask (in the form of a bitmap) as the <bpt id="p1">**</bpt>OpacityMask<ept id="p1">**</ept> for a <bpt id="p2">**</bpt>Rectangle<ept id="p2">**</ept> filled with the foreground brush:</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The most straightforward way to port this to a UWP app is to use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BitmapIcon<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279306)</ept>, like this:</source>
          <target state="new">The most straightforward way to port this to a UWP app is to use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BitmapIcon<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn279306)</ept>, like this:</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Here, winrt<ph id="ph1">\_</ph>check.png is an alpha mask in the form of a bitmap just as wpsl<ph id="ph2">\_</ph>check.png is, and it could very well be the same file.</source>
          <target state="new">Here, winrt<ph id="ph1">\_</ph>check.png is an alpha mask in the form of a bitmap just as wpsl<ph id="ph2">\_</ph>check.png is, and it could very well be the same file.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>However, you may want to provide several different sizes of winrt<ph id="ph1">\_</ph>check.png to be used for different scaling factors.</source>
          <target state="new">However, you may want to provide several different sizes of winrt<ph id="ph1">\_</ph>check.png to be used for different scaling factors.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For more info on that, and for an explanation of the changes to the <bpt id="p1">**</bpt>Width<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Height<ept id="p2">**</ept> values, see <bpt id="p3">[</bpt>View/effective pixels, viewing distance, and scale factors<ept id="p3">](#view-effective-pixels-viewing-distance-and-scale-factors)</ept> in this topic.</source>
          <target state="new">For more info on that, and for an explanation of the changes to the <bpt id="p1">**</bpt>Width<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Height<ept id="p2">**</ept> values, see <bpt id="p3">[</bpt>View/effective pixels, viewing distance, and scale factors<ept id="p3">](#view-effective-pixels-viewing-distance-and-scale-factors)</ept> in this topic.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A more general approach, which is appropriate if there are differences between the light and dark theme form of a bitmap, is to use two image assets—one with a dark foreground (for light theme) and one with a light foreground (for dark theme).</source>
          <target state="new">A more general approach, which is appropriate if there are differences between the light and dark theme form of a bitmap, is to use two image assets—one with a dark foreground (for light theme) and one with a light foreground (for dark theme).</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>For further details about how to name this set of bitmap assets, see <bpt id="p1">[</bpt>How to name resources using qualifiers<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</ept>.</source>
          <target state="new">For further details about how to name this set of bitmap assets, see <bpt id="p1">[</bpt>How to name resources using qualifiers<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</ept>.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Once a set of image files are correctly named, you can refer to them in the abstract, using their root name, like this:</source>
          <target state="new">Once a set of image files are correctly named, you can refer to them in the abstract, using their root name, like this:</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>In Windows Phone Silverlight, the <bpt id="p1">**</bpt>UIElement.Clip<ept id="p1">**</ept> property can be any shape that you can express with a <bpt id="p2">**</bpt>Geometry<ept id="p2">**</ept> and is typically serialized in XAML markup in the <bpt id="p3">**</bpt>StreamGeometry<ept id="p3">**</ept> mini-language.</source>
          <target state="new">In Windows Phone Silverlight, the <bpt id="p1">**</bpt>UIElement.Clip<ept id="p1">**</ept> property can be any shape that you can express with a <bpt id="p2">**</bpt>Geometry<ept id="p2">**</ept> and is typically serialized in XAML markup in the <bpt id="p3">**</bpt>StreamGeometry<ept id="p3">**</ept> mini-language.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>In the UWP, the type of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Clip<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208919)</ept> property is <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RectangleGeometry<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br210259)</ept>, so you can only clip a rectangular region.</source>
          <target state="new">In the UWP, the type of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Clip<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208919)</ept> property is <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RectangleGeometry<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br210259)</ept>, so you can only clip a rectangular region.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Allowing a rectangle to be defined using mini-language would be too permissive.</source>
          <target state="new">Allowing a rectangle to be defined using mini-language would be too permissive.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>So, to port a clipping region in markup, replace the <bpt id="p1">**</bpt>Clip<ept id="p1">**</ept> attribute syntax and make it into property element syntax similar to the following:</source>
          <target state="new">So, to port a clipping region in markup, replace the <bpt id="p1">**</bpt>Clip<ept id="p1">**</ept> attribute syntax and make it into property element syntax similar to the following:</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Note that you can <bpt id="p1">[</bpt>use arbitrary geometry as a mask in a layer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd756654)</ept> with Direct2D in a <bpt id="p2">[</bpt>Microsoft DirectX<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP app.</source>
          <target state="new">Note that you can <bpt id="p1">[</bpt>use arbitrary geometry as a mask in a layer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd756654)</ept> with Direct2D in a <bpt id="p2">[</bpt>Microsoft DirectX<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP app.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Navigation</source>
          <target state="new">Navigation</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>When you navigate to a page in a Windows Phone Silverlight app, you use a Uniform Resource Identifier (URI) addressing scheme:</source>
          <target state="new">When you navigate to a page in a Windows Phone Silverlight app, you use a Uniform Resource Identifier (URI) addressing scheme:</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>In a UWP app, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Frame.Navigate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242694)</ept> method and specify the type of the destination page (as defined by the <bpt id="p3">**</bpt>x:Class<ept id="p3">**</ept> attribute of the page's XAML markup definition):</source>
          <target state="new">In a UWP app, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Frame.Navigate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242694)</ept> method and specify the type of the destination page (as defined by the <bpt id="p3">**</bpt>x:Class<ept id="p3">**</ept> attribute of the page's XAML markup definition):</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>You define the startup page for a Windows Phone Silverlight app in WMAppManifest.xml:</source>
          <target state="new">You define the startup page for a Windows Phone Silverlight app in WMAppManifest.xml:</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>In a UWP app, you use imperative code to define the startup page.</source>
          <target state="new">In a UWP app, you use imperative code to define the startup page.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Here's some code from App.xaml.cs that illustrates how:</source>
          <target state="new">Here's some code from App.xaml.cs that illustrates how:</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>URI mapping and fragment navigation are URI navigation techniques, and so they are not applicable to UWP navigation, which is not based on URIs.</source>
          <target state="new">URI mapping and fragment navigation are URI navigation techniques, and so they are not applicable to UWP navigation, which is not based on URIs.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>URI mapping exists in response to the weakly-typed nature of identifying a target page with a URI string, which leads to fragility and maintainability issues should the page move to a different folder and hence to a different relative path.</source>
          <target state="new">URI mapping exists in response to the weakly-typed nature of identifying a target page with a URI string, which leads to fragility and maintainability issues should the page move to a different folder and hence to a different relative path.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>UWP apps use type-based navigation, which is strongly-typed and compiler-checked, and does not have the problem that URI mapping solves.</source>
          <target state="new">UWP apps use type-based navigation, which is strongly-typed and compiler-checked, and does not have the problem that URI mapping solves.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The use case for fragment navigation is to pass along some context to the target page so that the page can cause a particular fragment of its content to be scrolled into view, or otherwise displayed.</source>
          <target state="new">The use case for fragment navigation is to pass along some context to the target page so that the page can cause a particular fragment of its content to be scrolled into view, or otherwise displayed.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The same goal can be achieved by passing a navigation parameter when you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Navigate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242694)</ept> method.</source>
          <target state="new">The same goal can be achieved by passing a navigation parameter when you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Navigate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242694)</ept> method.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Navigation<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187344)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Navigation<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187344)</ept>.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Resource key reference</source>
          <target state="new">Resource key reference</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The design language has evolved for Windows 10 and consequently certain system styles have changed, and many system resource keys have been removed or renamed.</source>
          <target state="new">The design language has evolved for Windows 10 and consequently certain system styles have changed, and many system resource keys have been removed or renamed.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The XAML markup editor in Visual Studio highlights references to resource keys that can't be resolved.</source>
          <target state="new">The XAML markup editor in Visual Studio highlights references to resource keys that can't be resolved.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For example, the XAML markup editor will underline a reference to the style key <ph id="ph1">`PhoneTextNormalStyle`</ph> with a red squiggle.</source>
          <target state="new">For example, the XAML markup editor will underline a reference to the style key <ph id="ph1">`PhoneTextNormalStyle`</ph> with a red squiggle.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If that isn't corrected, then the app will immediately terminate when you try to deploy it to the emulator or device.</source>
          <target state="new">If that isn't corrected, then the app will immediately terminate when you try to deploy it to the emulator or device.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>So, it's important to attend to XAML markup correctness.</source>
          <target state="new">So, it's important to attend to XAML markup correctness.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>And you will find Visual Studio to be a great tool for catching such issues.</source>
          <target state="new">And you will find Visual Studio to be a great tool for catching such issues.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Also, see <bpt id="p1">[</bpt>Text<ept id="p1">](#text)</ept>, below.</source>
          <target state="new">Also, see <bpt id="p1">[</bpt>Text<ept id="p1">](#text)</ept>, below.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Status bar (system tray)</source>
          <target state="new">Status bar (system tray)</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The system tray (set in XAML markup with <ph id="ph1">`shell:SystemTray.IsVisible`</ph>) is now called the status bar, and it is shown by default.</source>
          <target state="new">The system tray (set in XAML markup with <ph id="ph1">`shell:SystemTray.IsVisible`</ph>) is now called the status bar, and it is shown by default.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>You can control its visibility in imperative code by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.ViewManagement.StatusBar.ShowAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn610343)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>HideAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn610339)</ept> methods.</source>
          <target state="new">You can control its visibility in imperative code by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.ViewManagement.StatusBar.ShowAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn610343)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>HideAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn610339)</ept> methods.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="new">Text</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Text (or typography) is an important aspect of a UWP app and, while porting, you may want to revisit the visual designs of your views so that they are in harmony with the new design language.</source>
          <target state="new">Text (or typography) is an important aspect of a UWP app and, while porting, you may want to revisit the visual designs of your views so that they are in harmony with the new design language.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Use these illustrations to find the UWP<bpt id="p1"> **</bpt>TextBlock<ept id="p1">**</ept> system styles that are available.</source>
          <target state="new">Use these illustrations to find the UWP<bpt id="p1"> **</bpt>TextBlock<ept id="p1">**</ept> system styles that are available.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Find the ones that correspond to the Windows Phone Silverlight styles you used.</source>
          <target state="new">Find the ones that correspond to the Windows Phone Silverlight styles you used.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Alternatively, you can create your own universal styles and copy the properties from the Windows Phone Silverlight system styles into those.</source>
          <target state="new">Alternatively, you can create your own universal styles and copy the properties from the Windows Phone Silverlight system styles into those.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>system textblock styles for windows 10 apps<ph id="ph1">](images/label-uwp10stylegallery.png)</ph> System TextBlock styles for Windows 10 apps</source>
          <target state="new">system textblock styles for windows 10 apps<ph id="ph1">](images/label-uwp10stylegallery.png)</ph> System TextBlock styles for Windows 10 apps</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In a Windows Phone Silverlight app, the default font family is Segoe WP.</source>
          <target state="new">In a Windows Phone Silverlight app, the default font family is Segoe WP.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>In a Windows 10 app, the default font family is Segoe UI.</source>
          <target state="new">In a Windows 10 app, the default font family is Segoe UI.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>As a result, font metrics in your app may look different.</source>
          <target state="new">As a result, font metrics in your app may look different.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If you want to reproduce the look of your Windows Phone Silverlight text, you can set your own metrics using properties such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LineHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209671)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>LineStackingStrategy<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br244362)</ept>.</source>
          <target state="new">If you want to reproduce the look of your Windows Phone Silverlight text, you can set your own metrics using properties such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LineHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209671)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>LineStackingStrategy<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br244362)</ept>.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Guidelines for fonts<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700394.aspx)</ept> and <bpt id="p2">[</bpt>Design UWP apps<ept id="p2">](http://dev.windows.com/design)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Guidelines for fonts<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700394.aspx)</ept> and <bpt id="p2">[</bpt>Design UWP apps<ept id="p2">](http://dev.windows.com/design)</ept>.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Theme changes</source>
          <target state="new">Theme changes</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For a Windows Phone Silverlight app, the default theme is dark by default.</source>
          <target state="new">For a Windows Phone Silverlight app, the default theme is dark by default.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For Windows 10 devices, the default theme has changed, but you can control the theme used by declaring a requested theme in App.xaml.</source>
          <target state="new">For Windows 10 devices, the default theme has changed, but you can control the theme used by declaring a requested theme in App.xaml.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For example, to use a dark theme on all devices, add <ph id="ph1">`RequestedTheme="Dark"`</ph> to the root Application element.</source>
          <target state="new">For example, to use a dark theme on all devices, add <ph id="ph1">`RequestedTheme="Dark"`</ph> to the root Application element.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Tiles</source>
          <target state="new">Tiles</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Tiles for UWP apps have behaviors similar to Live Tiles for Windows Phone Silverlight apps, although there are some differences.</source>
          <target state="new">Tiles for UWP apps have behaviors similar to Live Tiles for Windows Phone Silverlight apps, although there are some differences.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For example, code that calls the <bpt id="p1">**</bpt>Microsoft.Phone.Shell.ShellTile.Create<ept id="p1">**</ept> method to create secondary tiles should be ported to call <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SecondaryTile.RequestCreateAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br230606)</ept>.</source>
          <target state="new">For example, code that calls the <bpt id="p1">**</bpt>Microsoft.Phone.Shell.ShellTile.Create<ept id="p1">**</ept> method to create secondary tiles should be ported to call <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SecondaryTile.RequestCreateAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br230606)</ept>.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Here is a before-and-after example, first the Windows Phone Silverlight version:</source>
          <target state="new">Here is a before-and-after example, first the Windows Phone Silverlight version:</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>And the UWP equivalent:</source>
          <target state="new">And the UWP equivalent:</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Code that updates a tile with the <bpt id="p1">**</bpt>Microsoft.Phone.Shell.ShellTile.Update<ept id="p1">**</ept> method, or the <bpt id="p2">**</bpt>Microsoft.Phone.Shell.ShellTileSchedule<ept id="p2">**</ept> class, should be ported to use the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TileUpdateManager<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208622)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TileUpdater<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208628)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>TileNotification<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br208616)</ept>, and/or <bpt id="p9">[</bpt><bpt id="p10">**</bpt>ScheduledTileNotification<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/hh701637)</ept> classes.</source>
          <target state="new">Code that updates a tile with the <bpt id="p1">**</bpt>Microsoft.Phone.Shell.ShellTile.Update<ept id="p1">**</ept> method, or the <bpt id="p2">**</bpt>Microsoft.Phone.Shell.ShellTileSchedule<ept id="p2">**</ept> class, should be ported to use the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TileUpdateManager<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208622)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TileUpdater<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208628)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>TileNotification<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br208616)</ept>, and/or <bpt id="p9">[</bpt><bpt id="p10">**</bpt>ScheduledTileNotification<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/hh701637)</ept> classes.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>For more info on tiles, toasts, badges, banners, and notifications, see <bpt id="p1">[</bpt>Creating tiles<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868260)</ept> and <bpt id="p2">[</bpt>Working with tiles, badges, and toast notifications<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</ept>.</source>
          <target state="new">For more info on tiles, toasts, badges, banners, and notifications, see <bpt id="p1">[</bpt>Creating tiles<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868260)</ept> and <bpt id="p2">[</bpt>Working with tiles, badges, and toast notifications<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</ept>.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For specifics about sizes of visual assets used for UWP Tiles, see <bpt id="p1">[</bpt>Tile and toast visual assets<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh781198)</ept>.</source>
          <target state="new">For specifics about sizes of visual assets used for UWP Tiles, see <bpt id="p1">[</bpt>Tile and toast visual assets<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh781198)</ept>.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Toasts</source>
          <target state="new">Toasts</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Code that displays a toast with the <bpt id="p1">**</bpt>Microsoft.Phone.Shell.ShellToast<ept id="p1">**</ept> class should be ported to use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ToastNotificationManager<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208642)</ept>, <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ToastNotifier<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208653)</ept>, <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ToastNotification<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br208641)</ept>, and/or <bpt id="p8">[</bpt><bpt id="p9">**</bpt>ScheduledToastNotification<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/br208607)</ept> classes.</source>
          <target state="new">Code that displays a toast with the <bpt id="p1">**</bpt>Microsoft.Phone.Shell.ShellToast<ept id="p1">**</ept> class should be ported to use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ToastNotificationManager<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208642)</ept>, <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ToastNotifier<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208653)</ept>, <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ToastNotification<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br208641)</ept>, and/or <bpt id="p8">[</bpt><bpt id="p9">**</bpt>ScheduledToastNotification<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/br208607)</ept> classes.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Note that on mobile devices, the consumer-facing term for "toast" is "banner".</source>
          <target state="new">Note that on mobile devices, the consumer-facing term for "toast" is "banner".</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Working with tiles, badges, and toast notifications<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Working with tiles, badges, and toast notifications<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</ept>.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>View/effective pixels, viewing distance, and scale factors</source>
          <target state="new">View/effective pixels, viewing distance, and scale factors</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight apps and Windows 10 apps differ in the way they abstract the size and layout of UI elements away from the actual physical size and resolution of devices.</source>
          <target state="new">Windows Phone Silverlight apps and Windows 10 apps differ in the way they abstract the size and layout of UI elements away from the actual physical size and resolution of devices.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A Windows Phone Silverlight app uses view pixels to do this.</source>
          <target state="new">A Windows Phone Silverlight app uses view pixels to do this.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>With Windows 10, the concept of view pixels has been refined into that of effective pixels.</source>
          <target state="new">With Windows 10, the concept of view pixels has been refined into that of effective pixels.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Here's an explanation of that term, what it means, and the extra value it offers.</source>
          <target state="new">Here's an explanation of that term, what it means, and the extra value it offers.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The term "resolution" refers to a measure of pixel density and not, as is commonly thought, pixel count.</source>
          <target state="new">The term "resolution" refers to a measure of pixel density and not, as is commonly thought, pixel count.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>"Effective resolution" is the way the physical pixels that compose an image or glyph resolve to the eye given differences in viewing distance and the physical pixel size of the device (pixel density being the reciprocal of physical pixel size).</source>
          <target state="new">"Effective resolution" is the way the physical pixels that compose an image or glyph resolve to the eye given differences in viewing distance and the physical pixel size of the device (pixel density being the reciprocal of physical pixel size).</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Effective resolution is a good metric to build an experience around because it is user-centric.</source>
          <target state="new">Effective resolution is a good metric to build an experience around because it is user-centric.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>By understanding all the factors, and controlling the size of UI elements, you can make the user's experience a good one.</source>
          <target state="new">By understanding all the factors, and controlling the size of UI elements, you can make the user's experience a good one.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>To a Windows Phone Silverlight app, all phone screens are exactly 480 view pixels wide, without exception, no matter how many physical pixels the screen has, nor what its pixel density or physical size is.</source>
          <target state="new">To a Windows Phone Silverlight app, all phone screens are exactly 480 view pixels wide, without exception, no matter how many physical pixels the screen has, nor what its pixel density or physical size is.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This means that an <bpt id="p1">**</bpt>Image<ept id="p1">**</ept> element with <ph id="ph1">`Width="48"`</ph> will be exactly one tenth of the width of the screen of any phone that can run the Windows Phone Silverlight app.</source>
          <target state="new">This means that an <bpt id="p1">**</bpt>Image<ept id="p1">**</ept> element with <ph id="ph1">`Width="48"`</ph> will be exactly one tenth of the width of the screen of any phone that can run the Windows Phone Silverlight app.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>To a Windows 10 app, it is <bpt id="p1">*</bpt>not<ept id="p1">*</ept> the case that all devices are some fixed number of effective pixels wide.</source>
          <target state="new">To a Windows 10 app, it is <bpt id="p1">*</bpt>not<ept id="p1">*</ept> the case that all devices are some fixed number of effective pixels wide.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>That's probably obvious, given the wide range of devices that a UWP app can run on.</source>
          <target state="new">That's probably obvious, given the wide range of devices that a UWP app can run on.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Different devices are a different number of effective pixels wide, ranging from 320 epx for the smallest devices, to 1024 epx for a modest-sized monitor, and far beyond to much higher widths.</source>
          <target state="new">Different devices are a different number of effective pixels wide, ranging from 320 epx for the smallest devices, to 1024 epx for a modest-sized monitor, and far beyond to much higher widths.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>All you have to do is continue to use auto-sized elements and dynamic layout panels as you always have.</source>
          <target state="new">All you have to do is continue to use auto-sized elements and dynamic layout panels as you always have.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>There will also be some cases where you'll set the properties of your UI elements to a fixed size in XAML markup.</source>
          <target state="new">There will also be some cases where you'll set the properties of your UI elements to a fixed size in XAML markup.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A scale factor is automatically applied to your app depending on what device it runs on and the display settings made by the user.</source>
          <target state="new">A scale factor is automatically applied to your app depending on what device it runs on and the display settings made by the user.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>And that scale factor serves to keep any UI element with a fixed size presenting a more-or-less constant-sized touch (and reading) target to the user across a wide variety of screen sizes.</source>
          <target state="new">And that scale factor serves to keep any UI element with a fixed size presenting a more-or-less constant-sized touch (and reading) target to the user across a wide variety of screen sizes.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>And together with dynamic layout your UI won't merely optically scale on different devices, it will instead do what's necessary to fit the appropriate amount of content into the available space.</source>
          <target state="new">And together with dynamic layout your UI won't merely optically scale on different devices, it will instead do what's necessary to fit the appropriate amount of content into the available space.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Because 480 was formerly the fixed width in view pixels for a phone-sized screen, and that value is now typically smaller in effective pixels, a rule of thumb is to multiply any dimension in your Windows Phone Silverlight app markup by a factor of 0.8.</source>
          <target state="new">Because 480 was formerly the fixed width in view pixels for a phone-sized screen, and that value is now typically smaller in effective pixels, a rule of thumb is to multiply any dimension in your Windows Phone Silverlight app markup by a factor of 0.8.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>So that your app has the best experience across all displays, we recommend that you create each bitmap asset in a range of sizes, each suitable for a particular scale factor.</source>
          <target state="new">So that your app has the best experience across all displays, we recommend that you create each bitmap asset in a range of sizes, each suitable for a particular scale factor.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Providing assets at 100%-scale, 200%-scale, and 400%-scale (in that priority order) will give you excellent results in most cases at all the intermediate scale factors.</source>
          <target state="new">Providing assets at 100%-scale, 200%-scale, and 400%-scale (in that priority order) will give you excellent results in most cases at all the intermediate scale factors.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If, for whatever reason, you cannot create assets in more than one size, then create 100%-scale assets.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If, for whatever reason, you cannot create assets in more than one size, then create 100%-scale assets.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>In Microsoft Visual Studio, the default project template for UWP apps provides branding assets (tile images and logos) in only one size, but they are not 100%-scale.</source>
          <target state="new">In Microsoft Visual Studio, the default project template for UWP apps provides branding assets (tile images and logos) in only one size, but they are not 100%-scale.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>When authoring assets for your own app, follow the guidance in this section and provide 100%, 200%, and 400% sizes, and use asset packs.</source>
          <target state="new">When authoring assets for your own app, follow the guidance in this section and provide 100%, 200%, and 400% sizes, and use asset packs.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>If you have intricate artwork, then you may want to provide your assets in even more sizes.</source>
          <target state="new">If you have intricate artwork, then you may want to provide your assets in even more sizes.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>If you're starting with vector art, then it's relatively easy to generate high-quality assets at any scale factor.</source>
          <target state="new">If you're starting with vector art, then it's relatively easy to generate high-quality assets at any scale factor.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>We don't recommend that you try to support all of the scale factors, but the full list of scale factors for Windows 10 apps is 100%, 125%, 150%, 200%, 250%, 300%, and 400%.</source>
          <target state="new">We don't recommend that you try to support all of the scale factors, but the full list of scale factors for Windows 10 apps is 100%, 125%, 150%, 200%, 250%, 300%, and 400%.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>If you provide them, the Store will pick the correct-sized asset(s) for each device, and only those assets will be downloaded.</source>
          <target state="new">If you provide them, the Store will pick the correct-sized asset(s) for each device, and only those assets will be downloaded.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The Store selects the assets to download based on the DPI of the device.</source>
          <target state="new">The Store selects the assets to download based on the DPI of the device.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Responsive design 101 for UWP apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn958435)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Responsive design 101 for UWP apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn958435)</ept>.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Window size</source>
          <target state="new">Window size</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>In your UWP app, you can specify a minimum size (both width and height) with imperative code.</source>
          <target state="new">In your UWP app, you can specify a minimum size (both width and height) with imperative code.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The default minimum size is 500x320epx, and that's also the smallest minimum size accepted.</source>
          <target state="new">The default minimum size is 500x320epx, and that's also the smallest minimum size accepted.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The largest minimum size accepted is 500x500epx.</source>
          <target state="new">The largest minimum size accepted is 500x500epx.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The next topic is <bpt id="p1">[</bpt>Porting for I/O, device, and app model<ept id="p1">](wpsl-to-uwp-input-and-sensors.md)</ept>.</source>
          <target state="new">The next topic is <bpt id="p1">[</bpt>Porting for I/O, device, and app model<ept id="p1">](wpsl-to-uwp-input-and-sensors.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Namespace and class mappings</source>
          <target state="new">Namespace and class mappings</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>