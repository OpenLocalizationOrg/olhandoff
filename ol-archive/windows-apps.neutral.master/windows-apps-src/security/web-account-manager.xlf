<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\security\web-account-manager.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">6ab12d6da9c4858cf6ab16d4143cf073bb0cb275</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Connect to identity providers with Web Account Manager</source>
          <target>Connect to identity providers with Web Account Manager</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>This article describes how to use the AccountsSettingsPane to connect your Universal Windows Platform (UWP) app to external identity providers, like Microsoft or Facebook, using the new Windows 10 Web Account Manager APIs.</source>
          <target>This article describes how to use the AccountsSettingsPane to connect your Universal Windows Platform (UWP) app to external identity providers, like Microsoft or Facebook, using the new Windows 10 Web Account Manager APIs.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Connect to identity providers with Web Account Manager</source>
          <target>Connect to identity providers with Web Account Manager</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>This article describes how to show the AccountsSettingsPane and connect your Universal Windows Platform (UWP) app to external identity providers, like Microsoft or Facebook, using the new Windows 10 Web Account Manager APIs.</source>
          <target>This article describes how to show the AccountsSettingsPane and connect your Universal Windows Platform (UWP) app to external identity providers, like Microsoft or Facebook, using the new Windows 10 Web Account Manager APIs.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>You'll learn how to request a user's permission to use their Microsoft account, obtain an access token, and use it to perform basic operations (like get profile data or upload files to their OneDrive).</source>
          <target>You'll learn how to request a user's permission to use their Microsoft account, obtain an access token, and use it to perform basic operations (like get profile data or upload files to their OneDrive).</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>The steps are similar for getting user permission and access with any identity provider that supports the Web Account Manager.</source>
          <target>The steps are similar for getting user permission and access with any identity provider that supports the Web Account Manager.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=620621)</data>
        </originalData>
        <segment state="initial">
          <source>Note: For a complete code sample, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebAccountManagement sample on GitHub</pc>.</source>
          <target>Note: For a complete code sample, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebAccountManagement sample on GitHub</pc>.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Get set up</source>
          <target>Get set up</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>First, create a new, blank app in Visual Studio.</source>
          <target>First, create a new, blank app in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Second, in order to connect to identity providers, you'll need to associate your app with the Store.</source>
          <target>Second, in order to connect to identity providers, you'll need to associate your app with the Store.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3"> &gt; </data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>To do this, right click your project, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Associate app with the store</pc>, and follow the wizard's instructions.</source>
          <target>To do this, right click your project, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Associate app with the store</pc>, and follow the wizard's instructions.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Third, create a very basic UI consisting of a simple XAML button and two text boxes.</source>
          <target>Third, create a very basic UI consisting of a simple XAML button and two text boxes.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>And an event handler attached to your button in the code-behind:</source>
          <target>And an event handler attached to your button in the code-behind:</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Lastly, add the following namespaces so you don't have to worry about any reference issues later:</source>
          <target>Lastly, add the following namespaces so you don't have to worry about any reference issues later:</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Show the AccountSettingsPane</source>
          <target>Show the AccountSettingsPane</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>The system provides a built-in user interface for managing identity providers and web accounts called the AccountSettingsPane.</source>
          <target>The system provides a built-in user interface for managing identity providers and web accounts called the AccountSettingsPane.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>You can show it like this:</source>
          <target>You can show it like this:</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>If you run your app and click the "Log in" button, it should display an empty window.</source>
          <target>If you run your app and click the "Log in" button, it should display an empty window.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Account settings pane</source>
          <target>Account settings pane</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>The pane is empty because the system only provides a UI shell - it's up to the developer to programatically populate the pane with the identity providers.</source>
          <target>The pane is empty because the system only provides a UI shell - it's up to the developer to programatically populate the pane with the identity providers.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Register for AccountCommandsRequested</source>
          <target>Register for AccountCommandsRequested</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>To add commands to the pane, we start by registering for the AccountCommandsRequested event handler.</source>
          <target>To add commands to the pane, we start by registering for the AccountCommandsRequested event handler.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>This tells the system to run our build logic when the user asks to see the pane (e.g., clicks our XAML button).</source>
          <target>This tells the system to run our build logic when the user asks to see the pane (e.g., clicks our XAML button).</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>In your code behind, override the OnNavigatedTo and OnNavigatedFrom events and add the following code to them:</source>
          <target>In your code behind, override the OnNavigatedTo and OnNavigatedFrom events and add the following code to them:</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Users don't interact with accounts very often, so registering and deregistering your event handler in this fashion helps prevent memory leaks.</source>
          <target>Users don't interact with accounts very often, so registering and deregistering your event handler in this fashion helps prevent memory leaks.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>This way, your customized pane is only in memory when there's a high chance a user is going to ask for it (because they're on a "settings" or "login" page, for example).</source>
          <target>This way, your customized pane is only in memory when there's a high chance a user is going to ask for it (because they're on a "settings" or "login" page, for example).</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Build the account settings pane</source>
          <target>Build the account settings pane</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>The BuildPaneAsync method is called whenever the AccountSettingsPane is shown.</source>
          <target>The BuildPaneAsync method is called whenever the AccountSettingsPane is shown.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>This is where we'll put the code to customize the commands shown in the pane.</source>
          <target>This is where we'll put the code to customize the commands shown in the pane.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Start by obtaining a deferral.</source>
          <target>Start by obtaining a deferral.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>This tells the system to delay showing the AccountsSettingsPane until we're finished building it.</source>
          <target>This tells the system to delay showing the AccountsSettingsPane until we're finished building it.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Next, get a provider using the WebAuthenticationCoreManager.FindAccountProviderAsync method.</source>
          <target>Next, get a provider using the WebAuthenticationCoreManager.FindAccountProviderAsync method.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>The URL for the provider varies based on the provider and can be found in the provider's documentation.</source>
          <target>The URL for the provider varies based on the provider and can be found in the provider's documentation.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>For Microsoft Accounts and Azure Active Directory, it's "https://login.microsoft.com".</source>
          <target>For Microsoft Accounts and Azure Active Directory, it's "https://login.microsoft.com".</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Notice that we also pass the string "consumers" to the optional <pc dataRefEnd="id2" dataRefStart="id1" id="p1">authority</pc> parameter.</source>
          <target>Notice that we also pass the string "consumers" to the optional <pc dataRefEnd="id2" dataRefStart="id1" id="p1">authority</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>This is because Microsoft provides two different types of authentication - Microsoft Accounts (MSA) for "consumers", and Azure Active Directory (AAD) for "organizations".</source>
          <target>This is because Microsoft provides two different types of authentication - Microsoft Accounts (MSA) for "consumers", and Azure Active Directory (AAD) for "organizations".</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>The "consumers" authority lets the provider know we are interested in the former option.</source>
          <target>The "consumers" authority lets the provider know we are interested in the former option.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>If you are developing an enterprise app, you may want to use the AAD graph endpoint instead.</source>
          <target>If you are developing an enterprise app, you may want to use the AAD graph endpoint instead.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=620621)</data>
        </originalData>
        <segment state="initial">
          <source>See the full <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebAccountManagement sample on GitHub</pc> and the Azure documentation for more on how to do this.</source>
          <target>See the full <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebAccountManagement sample on GitHub</pc> and the Azure documentation for more on how to do this.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Finally, add the provider to the AccountsSettingsPane by creating a new WebAccountProviderCommand like this:</source>
          <target>Finally, add the provider to the AccountsSettingsPane by creating a new WebAccountProviderCommand like this:</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Note that the GetMsaToken method we passed to our new WebAccountProviderCommand doesn't exist yet (we'll build that in the next step), so feel free to add it as an empty method for now.</source>
          <target>Note that the GetMsaToken method we passed to our new WebAccountProviderCommand doesn't exist yet (we'll build that in the next step), so feel free to add it as an empty method for now.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Run the above code and your pane should look something like this:</source>
          <target>Run the above code and your pane should look something like this:</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>Account settings pane</source>
          <target>Account settings pane</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Request a token</source>
          <target>Request a token</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Once we have the Microsoft Account option displaying in the AccountsSettingsPane, we need to handle what happens when the user selects it.</source>
          <target>Once we have the Microsoft Account option displaying in the AccountsSettingsPane, we need to handle what happens when the user selects it.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>We registered our GetMsaToken method to fire when the user chooses to log in with their Microsoft Account, so we'll obtain the token there.</source>
          <target>We registered our GetMsaToken method to fire when the user chooses to log in with their Microsoft Account, so we'll obtain the token there.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>To obtain a token, use the RequestTokenAsync method like this:</source>
          <target>To obtain a token, use the RequestTokenAsync method like this:</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>In this example, we pass the string "wl.basic" to the scope parameter.</source>
          <target>In this example, we pass the string "wl.basic" to the scope parameter.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Scope represents the type of information you are requesting from the providing service on a specific user.</source>
          <target>Scope represents the type of information you are requesting from the providing service on a specific user.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Certain scopes provide access only to a user's basic information, like name and email address.</source>
          <target>Certain scopes provide access only to a user's basic information, like name and email address.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Other scopes might grant access to sensitive information such as the user's photos or email inbox.</source>
          <target>Other scopes might grant access to sensitive information such as the user's photos or email inbox.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Generally, your app should use the least permissive scope unless our app explicitly needs additional permission - e.g., don't ask for access to sensitive information if your app doesn't absolutely need it.</source>
          <target>Generally, your app should use the least permissive scope unless our app explicitly needs additional permission - e.g., don't ask for access to sensitive information if your app doesn't absolutely need it.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Service providers will provide documentation on which scopes need to be specified to get tokens for use with their service.</source>
          <target>Service providers will provide documentation on which scopes need to be specified to get tokens for use with their service.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>For Office 365 and Outlook.com scopes, see (Authenticate Office 365 and Outlook.com APIs using the v2.0 authentication endpoint)[https://msdn.microsoft.com/office/office365/howto/authenticate-Office-365-APIs-using-v2].</source>
          <target>For Office 365 and Outlook.com scopes, see (Authenticate Office 365 and Outlook.com APIs using the v2.0 authentication endpoint)[https://msdn.microsoft.com/office/office365/howto/authenticate-Office-365-APIs-using-v2].</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>For OneDrive, see (OneDrive authentication and sign-in)[https://dev.onedrive.com/auth/msa_oauth.htm#authentication-scopes].</source>
          <target>For OneDrive, see (OneDrive authentication and sign-in)[https://dev.onedrive.com/auth/msa_oauth.htm#authentication-scopes].</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Use the token</source>
          <target>Use the token</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>The RequestTokenAsync method returns a WebTokenRequestResult object, which contains the results of your request.</source>
          <target>The RequestTokenAsync method returns a WebTokenRequestResult object, which contains the results of your request.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>If your request was successful, it will contain a token.</source>
          <target>If your request was successful, it will contain a token.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Once you have a token, you can use it to call your provider's API.</source>
          <target>Once you have a token, you can use it to call your provider's API.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>In the code below, we'll call the Microsoft Live APIs to obtain basic information about the user and display it in our UI.</source>
          <target>In the code below, we'll call the Microsoft Live APIs to obtain basic information about the user and display it in our UI.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>How you call various REST APIs varies between providers; see the provider's API documentation for information on how to use your token.</source>
          <target>How you call various REST APIs varies between providers; see the provider's API documentation for information on how to use your token.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Save account state</source>
          <target>Save account state</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Tokens are useful for immediately obtaining information about a user, but they usually have varying lifespans - MSA tokens, for instance, are only valid for a few hours.</source>
          <target>Tokens are useful for immediately obtaining information about a user, but they usually have varying lifespans - MSA tokens, for instance, are only valid for a few hours.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Fortunately, you don't need to re-show the AccountsSettingsPane each time a token expires.</source>
          <target>Fortunately, you don't need to re-show the AccountsSettingsPane each time a token expires.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Once a user has authorized your app once, you can store the user's account information for future use.</source>
          <target>Once a user has authorized your app once, you can store the user's account information for future use.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>To do this, use the WebAccount class.</source>
          <target>To do this, use the WebAccount class.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>A WebAccount is returned along with requesting a token:</source>
          <target>A WebAccount is returned along with requesting a token:</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Once you have a WebAccount, you can easily store it.</source>
          <target>Once you have a WebAccount, you can easily store it.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>In the following example, we use LocalSettings:</source>
          <target>In the following example, we use LocalSettings:</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>The next time the user launches your app, you can attempt to obtain a token silently (in the background) like this:</source>
          <target>The next time the user launches your app, you can attempt to obtain a token silently (in the background) like this:</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Because obtaining a token silently is very simple, you should use this process to refresh your token between sessions rather than caching an existing token (since that token might expire at any time).</source>
          <target>Because obtaining a token silently is very simple, you should use this process to refresh your token between sessions rather than caching an existing token (since that token might expire at any time).</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>Note the example above only covers basic success and fail cases.</source>
          <target>Note the example above only covers basic success and fail cases.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>Your app should also account for unusual scenarios (like a user revoking your app's permission or removing their account from Windows, for example) and handle them gracefully.</source>
          <target>Your app should also account for unusual scenarios (like a user revoking your app's permission or removing their account from Windows, for example) and handle them gracefully.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Log out an account</source>
          <target>Log out an account</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>If you persist a WebAccount, you may want to provide "log out" functionality to your users so they can switch accounts or simply dissasociate their account with your app.</source>
          <target>If you persist a WebAccount, you may want to provide "log out" functionality to your users so they can switch accounts or simply dissasociate their account with your app.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>To do this, first remove any saved account and provider information.</source>
          <target>To do this, first remove any saved account and provider information.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>Then call WebAccount.SignOutAsync() to clear the cache and invalidate any existing tokens your app may have.</source>
          <target>Then call WebAccount.SignOutAsync() to clear the cache and invalidate any existing tokens your app may have.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Add providers that don't support WebAccountManager</source>
          <target>Add providers that don't support WebAccountManager</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>If you want to integrate authentication from a service into your app but that service doesn't support WebAccountManager - Google+ or Twitter, for example - you can still manually add that provider to the AccountsSettingsPane.</source>
          <target>If you want to integrate authentication from a service into your app but that service doesn't support WebAccountManager - Google+ or Twitter, for example - you can still manually add that provider to the AccountsSettingsPane.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>To do so, create a new WebAccountProvider object and provide your own name and .png icon, then and add it to the WebAccountProviderCommands.</source>
          <target>To do so, create a new WebAccountProvider object and provide your own name and .png icon, then and add it to the WebAccountProviderCommands.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>Here's some stub code:</source>
          <target>Here's some stub code:</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>Note this only adds an icon to the AccountsSettingsPane and runs the method you specify when the icon is clicked (GetTwitterTokenAsync, in this case).</source>
          <target>Note this only adds an icon to the AccountsSettingsPane and runs the method you specify when the icon is clicked (GetTwitterTokenAsync, in this case).</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>You must provide the code that handles the actual authentication.</source>
          <target>You must provide the code that handles the actual authentication.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>For more information, see (Web authentication broker)[web-authentication-broker], which provides helper methods for authenticating using REST services.</source>
          <target>For more information, see (Web authentication broker)[web-authentication-broker], which provides helper methods for authenticating using REST services.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Add a custom header</source>
          <target>Add a custom header</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>You can customize the account settings pane using the HeaderText property, like this:</source>
          <target>You can customize the account settings pane using the HeaderText property, like this:</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>Account settings pane</source>
          <target>Account settings pane</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>Don't go overboard with header text; keep it short and sweet.</source>
          <target>Don't go overboard with header text; keep it short and sweet.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>If your login process is complicated and you need to display more information, link the user to a separate page using a custom link.</source>
          <target>If your login process is complicated and you need to display more information, link the user to a separate page using a custom link.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>Add custom links</source>
          <target>Add custom links</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>You can add custom commands to the AccountsSettingsPane, which appear as links below your supported WebAccountProviders.</source>
          <target>You can add custom commands to the AccountsSettingsPane, which appear as links below your supported WebAccountProviders.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Custom commands are great for simple tasks related to user accounts, like displaying a privacy policy or launching a support page for users having trouble.</source>
          <target>Custom commands are great for simple tasks related to user accounts, like displaying a privacy policy or launching a support page for users having trouble.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>Here's an example:</source>
          <target>Here's an example:</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>Account settings pane</source>
          <target>Account settings pane</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>Theoretically, you can use settings commands for anything.</source>
          <target>Theoretically, you can use settings commands for anything.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>However, we suggest limiting their use to intuitive, account-related scenarios like those described above.</source>
          <target>However, we suggest limiting their use to intuitive, account-related scenarios like those described above.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>See also</source>
          <target>See also</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>Windows.Security.Authentication.Web.Core namespace</source>
          <target>Windows.Security.Authentication.Web.Core namespace</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>Windows.Security.Credentials namespace</source>
          <target>Windows.Security.Credentials namespace</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>AccountsSettingsPane</source>
          <target>AccountsSettingsPane</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>Web authentication broker</source>
          <target>Web authentication broker</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>WebAccountManagement sample</source>
          <target>WebAccountManagement sample</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>