<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\controls-and-patterns\listview-and-gridview.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">e878b11bbecd4a1007f8b5f56bde5741da18c1e1</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Use list view or grid view controls to display and manipulate sets of data, such as a gallery of images or a set of email messages.</source>
          <target>Use list view or grid view controls to display and manipulate sets of data, such as a gallery of images or a set of email messages.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>List view and grid view</source>
          <target>List view and grid view</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>ListView and GridView</source>
          <target>ListView and GridView</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Most applications manipulate and display sets of data, such as a gallery of images or a set of email messages.</source>
          <target>Most applications manipulate and display sets of data, such as a gallery of images or a set of email messages.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>The XAML UI framework provides ListView and GridView controls that make it easy to display and manipulate data in your app.</source>
          <target>The XAML UI framework provides ListView and GridView controls that make it easy to display and manipulate data in your app.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>ListView and GridView both derive from the ListViewBase class, so they have the same functionality, but display data differently.</source>
          <target>ListView and GridView both derive from the ListViewBase class, so they have the same functionality, but display data differently.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>In this article, when we talk about ListView, the info applies to both the ListView and GridView controls unless otherwise specified.</source>
          <target>In this article, when we talk about ListView, the info applies to both the ListView and GridView controls unless otherwise specified.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>We may refer to classes like ListView or ListViewItem, but the “List” prefix can be replaced with “Grid” for the corresponding grid equivalent (GridView or GridViewItem).</source>
          <target>We may refer to classes like ListView or ListViewItem, but the “List” prefix can be replaced with “Grid” for the corresponding grid equivalent (GridView or GridViewItem).</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Important APIs</source>
          <target>Important APIs</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>ListView class</source>
          <target>ListView class</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>GridView class</source>
          <target>GridView class</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>ItemsSource property</source>
          <target>ItemsSource property</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>ItemTemplate property</source>
          <target>ItemTemplate property</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Is this the right control?</source>
          <target>Is this the right control?</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>The ListView displays data stacked vertically in a single column.</source>
          <target>The ListView displays data stacked vertically in a single column.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>It's often used to show an ordered list of items, such as a list of emails or search results.</source>
          <target>It's often used to show an ordered list of items, such as a list of emails or search results.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](master-details.md)</data>
        </originalData>
        <segment state="initial">
          <source>It's also useful in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">master-detail</pc> scenarios, where the list items contain only a small amount of info and the details of the selected item are shown separately.</source>
          <target>It's also useful in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">master-detail</pc> scenarios, where the list items contain only a small amount of info and the details of the selected item are shown separately.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Example of a master-details pattern</source>
          <target>Example of a master-details pattern</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>The GridView presents a collection of items in rows and columns that can scroll vertically.</source>
          <target>The GridView presents a collection of items in rows and columns that can scroll vertically.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Data is stacked horizontally until it fills the columns, then continues with the next row.</source>
          <target>Data is stacked horizontally until it fills the columns, then continues with the next row.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>It's often used when you need to show a rich visualization of each item that takes more space, such as a photo gallery.</source>
          <target>It's often used when you need to show a rich visualization of each item that takes more space, such as a photo gallery.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Example of a content library</source>
          <target>Example of a content library</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](lists.md)</data>
        </originalData>
        <segment state="initial">
          <source>For a more detailed comparison and guidance on which control to use, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Lists</pc>.</source>
          <target>For a more detailed comparison and guidance on which control to use, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Lists</pc>.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Create a list view</source>
          <target>Create a list view</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>List view is an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsControl</pc>, so it can contain a collection of items of any type.</source>
          <target>List view is an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsControl</pc>, so it can contain a collection of items of any type.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.items.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>It must have items in its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection before it can show anything on the screen.</source>
          <target>It must have items in its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection before it can show anything on the screen.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.items.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemssource.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>To populate the view, you can add items directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection, or set the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemsSource</pc></pc> property to a data source.</source>
          <target>To populate the view, you can add items directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection, or set the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemsSource</pc></pc> property to a data source.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>
            <ph dataRef="id3" id="ph1" />You can use either Items or ItemsSource to populate the list, but you can't use both at the same time.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>
            <ph dataRef="id3" id="ph1" />You can use either Items or ItemsSource to populate the list, but you can't use both at the same time.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>If you set the ItemsSource property and you add an item in XAML, the added item is ignored.</source>
          <target>If you set the ItemsSource property and you add an item in XAML, the added item is ignored.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>If you set the ItemsSource property and you add an item to the Items collection in code, an exception is thrown.</source>
          <target>If you set the ItemsSource property and you add an item to the Items collection in code, an exception is thrown.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Many of the examples in this article populate the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Items</pc> collection directly for the sake of simplicity.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Many of the examples in this article populate the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Items</pc> collection directly for the sake of simplicity.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>However, it's more common for the items in a list to come from a dynamic source, like a list of books from an online database.</source>
          <target>However, it's more common for the items in a list to come from a dynamic source, like a list of books from an online database.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsSource</pc> property for this purpose.</source>
          <target>You use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsSource</pc> property for this purpose.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Add items to the Items collection</source>
          <target>Add items to the Items collection</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.items.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can add items to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection using XAML or code.</source>
          <target>You can add items to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection using XAML or code.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>You typically add items this way if you have a small number of items that don't change and are easily defined in XAML, or if you generate the items in code at run time.</source>
          <target>You typically add items this way if you have a small number of items that don't change and are easily defined in XAML, or if you generate the items in code at run time.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Here's a list view with items defined inline in XAML.</source>
          <target>Here's a list view with items defined inline in XAML.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>When you define the items in XAML, they are automatically added to the Items collection.</source>
          <target>When you define the items in XAML, they are automatically added to the Items collection.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Here's the list view created in code.</source>
          <target>Here's the list view created in code.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>The resulting list is the same as the one created previously in XAML.</source>
          <target>The resulting list is the same as the one created previously in XAML.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>C</source>
          <target>C</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>The ListView looks like this.</source>
          <target>The ListView looks like this.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>A simple list view</source>
          <target>A simple list view</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Set the items source</source>
          <target>Set the items source</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>You typically use a list view to display data from a source such as a database or the Internet.</source>
          <target>You typically use a list view to display data from a source such as a database or the Internet.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemssource.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>To populate a list view from a data source, you set its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsSource</pc></pc> property to a collection of data items.</source>
          <target>To populate a list view from a data source, you set its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsSource</pc></pc> property to a collection of data items.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Here, the list view's ItemsSource is set in code directly to an instance of a collection.</source>
          <target>Here, the list view's ItemsSource is set in code directly to an instance of a collection.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>C</source>
          <target>C</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>You can also bind the ItemsSource property to a collection in XAML.</source>
          <target>You can also bind the ItemsSource property to a collection in XAML.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../data-binding/data-binding-quickstart.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding with XAML</pc>.</source>
          <target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding with XAML</pc>.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">`Items`</data>
        </originalData>
        <segment state="initial">
          <source>Here, the ItemsSource is bound to a public property named <ph dataRef="id1" id="ph1" /> that exposes the Page's private data collection.</source>
          <target>Here, the ItemsSource is bound to a public property named <ph dataRef="id1" id="ph1" /> that exposes the Page's private data collection.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>C</source>
          <target>C</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.data.collectionviewsource.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If you need to show grouped data in your list view, you must bind to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>.</source>
          <target>If you need to show grouped data in your list view, you must bind to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>The CollectionViewSource acts as a proxy for the collection class in XAML and enables grouping support.</source>
          <target>The CollectionViewSource acts as a proxy for the collection class in XAML and enables grouping support.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.data.collectionviewsource.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>.</source>
          <target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Data template</source>
          <target>Data template</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>An item’s data template defines how the data is visualized.</source>
          <target>An item’s data template defines how the data is visualized.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>By default, a data item is displayed in the list view as the string representation of the data object it's bound to.</source>
          <target>By default, a data item is displayed in the list view as the string representation of the data object it's bound to.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.displaymemberpath.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can show the string representation of a particular property of the data item by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DisplayMemberPath</pc></pc> to that property.</source>
          <target>You can show the string representation of a particular property of the data item by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DisplayMemberPath</pc></pc> to that property.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>However, you typically want to show a more rich presentation of your data.</source>
          <target>However, you typically want to show a more rich presentation of your data.</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.datatemplate.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>To specify exactly how items in the list view are displayed, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataTemplate</pc></pc>.</source>
          <target>To specify exactly how items in the list view are displayed, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataTemplate</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>The XAML in the DataTemplate defines the layout and appearance of controls used to display an individual item.</source>
          <target>The XAML in the DataTemplate defines the layout and appearance of controls used to display an individual item.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>The controls in the layout can be bound to properties of a data object, or have static content defined inline.</source>
          <target>The controls in the layout can be bound to properties of a data object, or have static content defined inline.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemtemplate.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You assign the DataTemplate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> property of the list control.</source>
          <target>You assign the DataTemplate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> property of the list control.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>In this example, the data item is a simple string.</source>
          <target>In this example, the data item is a simple string.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>You use a DataTemplate to add an image to the left of the string, and show the string in blue.</source>
          <target>You use a DataTemplate to add an image to the left of the string, and show the string in blue.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">[</data>
          <data id="id5">](https://msdn.microsoft.com/windows/uwp/xaml-platform/x-bind-markup-extension)</data>
          <data id="id6">`x:DataType`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />When you use the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">x:Bind markup extension</pc> in a DataTemplate, you have to specify the DataType (<ph dataRef="id6" id="ph2" />) on the DataTemplate.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />When you use the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">x:Bind markup extension</pc> in a DataTemplate, you have to specify the DataType (<ph dataRef="id6" id="ph2" />) on the DataTemplate.</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">`x:DataType="System:String"`</data>
          <data id="id2">`xmlns:System="using:System"`</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/windows/uwp/xaml-platform/xaml-overview#xaml-namespaces)</data>
        </originalData>
        <segment state="initial">
          <source>To set <ph dataRef="id1" id="ph1" />, as in this example, you have to add the <ph dataRef="id2" id="ph2" /><pc dataRefEnd="id4" dataRefStart="id3" id="p1">XAML namespace declaration</pc> to your Page.</source>
          <target>To set <ph dataRef="id1" id="ph1" />, as in this example, you have to add the <ph dataRef="id2" id="ph2" /><pc dataRefEnd="id4" dataRefStart="id3" id="p1">XAML namespace declaration</pc> to your Page.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>Here's what the data items look like when displayed with this data template.</source>
          <target>Here's what the data items look like when displayed with this data template.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>List view items with a data template</source>
          <target>List view items with a data template</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Data templates are the primary way you define the look of your list view.</source>
          <target>Data templates are the primary way you define the look of your list view.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>They can also have a significant impact on performance if your list displays a large number of items.</source>
          <target>They can also have a significant impact on performance if your list displays a large number of items.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>In this article, we use simple string data for most of the examples, and don't specify a data template.</source>
          <target>In this article, we use simple string data for most of the examples, and don't specify a data template.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>For more info and examples of how to use DataTemplates and item containers to define the look of items in your list or grid, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Modify the look of list items</pc>.</source>
          <target>For more info and examples of how to use DataTemplates and item containers to define the look of items in your list or grid, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Modify the look of list items</pc>.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Change the layout of items</source>
          <target>Change the layout of items</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>When you add items to a list view or grid view, the control automatically wraps each item in an item container and then lays out all of the item containers.</source>
          <target>When you add items to a list view or grid view, the control automatically wraps each item in an item container and then lays out all of the item containers.</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemspanel.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>How these item containers are laid out depends on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsPanel</pc></pc> of the control.</source>
          <target>How these item containers are laid out depends on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsPanel</pc></pc> of the control.</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemsstackpanel.aspx)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>By default, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> uses an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ItemsStackPanel</pc></pc>, which produces a vertical list, like this.</source>
          <target>By default, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> uses an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ItemsStackPanel</pc></pc>, which produces a vertical list, like this.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>A simple list view</source>
          <target>A simple list view</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemswrapgrid.aspx)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GridView</pc> uses an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ItemsWrapGrid</pc></pc>, which adds items horizontally, and wraps and scrolls vertically, like this.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GridView</pc> uses an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ItemsWrapGrid</pc></pc>, which adds items horizontally, and wraps and scrolls vertically, like this.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>A simple grid view</source>
          <target>A simple grid view</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>You can modify the layout of items by adjusting properties on the items panel, or you can replace the default panel with another panel.</source>
          <target>You can modify the layout of items by adjusting properties on the items panel, or you can replace the default panel with another panel.</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>Note<ph dataRef="id1" id="ph1" />Be careful to not disable virtualization if you change the ItemsPanel.</source>
          <target>Note<ph dataRef="id1" id="ph1" />Be careful to not disable virtualization if you change the ItemsPanel.</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Both <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsStackPanel</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsWrapGrid</pc> support virtualization, so these are safe to use.</source>
          <target>Both <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsStackPanel</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsWrapGrid</pc> support virtualization, so these are safe to use.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>If you use any other panel, you might disable virtualization and slow the performance of the list view.</source>
          <target>If you use any other panel, you might disable virtualization and slow the performance of the list view.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/windows/uwp/debug-test-perf/performance-and-xaml-ui)</data>
        </originalData>
        <segment state="initial">
          <source>For more info, see the list view articles under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Performance</pc>.</source>
          <target>For more info, see the list view articles under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Performance</pc>.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemsstackpanel.orientation.aspx)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>This example shows how to make a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> lay out its item containers in a horizontal list by changing the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Orientation</pc></pc> property of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemsStackPanel</pc>.</source>
          <target>This example shows how to make a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> lay out its item containers in a horizontal list by changing the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Orientation</pc></pc> property of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemsStackPanel</pc>.</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.scrollviewer.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Because the list view scrolls vertically by default, you also need to adjust some properties on the list view’s internal <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ScrollViewer</pc></pc> to make it scroll horizontally.</source>
          <target>Because the list view scrolls vertically by default, you also need to adjust some properties on the list view’s internal <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ScrollViewer</pc></pc> to make it scroll horizontally.</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.scrollviewer.horizontalscrollmode.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.HorizontalScrollMode</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enabled</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Auto</pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.HorizontalScrollMode</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enabled</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Auto</pc></target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.scrollviewer.horizontalscrollbarvisibility.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.HorizontalScrollBarVisibility</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Auto</pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.HorizontalScrollBarVisibility</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Auto</pc></target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.scrollviewer.verticalscrollmode.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.VerticalScrollMode</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Disabled</pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.VerticalScrollMode</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Disabled</pc></target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.scrollviewer.verticalscrollbarvisibility.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.VerticalScrollBarVisibility</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Hidden</pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.VerticalScrollBarVisibility</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Hidden</pc></target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />These examples are shown with the list view width unconstrained, so the horizontal scrollbars are not shown.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />These examples are shown with the list view width unconstrained, so the horizontal scrollbars are not shown.</target>
        </segment>
      </unit>
      <unit id="197">
        <originalData>
          <data id="id1">`Width="180"`</data>
        </originalData>
        <segment state="initial">
          <source>If you run this code, you can set <ph dataRef="id1" id="ph1" /> on the ListView to make the scrollbars show.</source>
          <target>If you run this code, you can set <ph dataRef="id1" id="ph1" /> on the ListView to make the scrollbars show.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>The resulting list looks like this.</source>
          <target>The resulting list looks like this.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>A horizontal list view</source>
          <target>A horizontal list view</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In the next example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> lays out items in a vertical wrapping list by using an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsWrapGrid</pc> instead of an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ItemsStackPanel</pc>.</source>
          <target>In the next example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> lays out items in a vertical wrapping list by using an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsWrapGrid</pc> instead of an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ItemsStackPanel</pc>.</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />The height of the list view must be constrained to force the control to wrap the containers.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />The height of the list view must be constrained to force the control to wrap the containers.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>The resulting list looks like this.</source>
          <target>The resulting list looks like this.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>A list view with grid layout</source>
          <target>A list view with grid layout</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>If you show grouped data in your list view, the ItemsPanel determines how the item groups are layed out, not how the individual items are layed out.</source>
          <target>If you show grouped data in your list view, the ItemsPanel determines how the item groups are layed out, not how the individual items are layed out.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>For example, if the horizontal ItemsStackPanel shown previously is used to show grouped data, the groups are arranged horizontally, but the items in each group are still stacked vertically, as shown here.</source>
          <target>For example, if the horizontal ItemsStackPanel shown previously is used to show grouped data, the groups are arranged horizontally, but the items in each group are still stacked vertically, as shown here.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>A grouped horizontal list view</source>
          <target>A grouped horizontal list view</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>Item selection and interaction</source>
          <target>Item selection and interaction</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>You can choose from various ways to let a user interact with a list view.</source>
          <target>You can choose from various ways to let a user interact with a list view.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>By default, a user can select a single item.</source>
          <target>By default, a user can select a single item.</target>
        </segment>
      </unit>
      <unit id="212">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.selectionmode.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionMode</pc></pc> property to enable multi-selection or to disable selection.</source>
          <target>You can change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionMode</pc></pc> property to enable multi-selection or to disable selection.</target>
        </segment>
      </unit>
      <unit id="213">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.isitemclickenabled.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsItemClickEnabled</pc></pc> property so that a user clicks an item to invoke an action (like a button) instead of selecting the item.</source>
          <target>You can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsItemClickEnabled</pc></pc> property so that a user clicks an item to invoke an action (like a button) instead of selecting the item.</target>
        </segment>
      </unit>
      <unit id="214">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">[</data>
          <data id="id5">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewselectionmode.aspx)</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Both ListView and GridView use the <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">ListViewSelectionMode</pc></pc> enumeration for their SelectionMode properties.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Both ListView and GridView use the <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">ListViewSelectionMode</pc></pc> enumeration for their SelectionMode properties.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>IsItemClickEnabled is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">False</pc> by default, so you need to set it only to enable click mode.</source>
          <target>IsItemClickEnabled is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">False</pc> by default, so you need to set it only to enable click mode.</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source>This table shows the ways a user can interact with a list view, and how you can respond to the interaction.</source>
          <target>This table shows the ways a user can interact with a list view, and how you can respond to the interaction.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>To enable this interaction:</source>
          <target>To enable this interaction:</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>Use these settings:</source>
          <target>Use these settings:</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>Handle this event:</source>
          <target>Handle this event:</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>Use this property to get the selected item:</source>
          <target>Use this property to get the selected item:</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>No interaction</source>
          <target>No interaction</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.selectionmode.aspx)</data>
          <data id="id3"> = </data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">[</data>
          <data id="id7">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.isitemclickenabled.aspx)</data>
          <data id="id8"> = </data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionMode</pc>
            <ph dataRef="id3" id="ph1" />
            <pc dataRefEnd="id5" dataRefStart="id4" id="p2">None</pc>, <pc dataRefEnd="id7" dataRefStart="id6" id="p3">IsItemClickEnabled</pc><ph dataRef="id8" id="ph2" /><pc dataRefEnd="id10" dataRefStart="id9" id="p4">False</pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionMode</pc>
            <ph dataRef="id3" id="ph1" />
            <pc dataRefEnd="id5" dataRefStart="id4" id="p2">None</pc>, <pc dataRefEnd="id7" dataRefStart="id6" id="p3">IsItemClickEnabled</pc><ph dataRef="id8" id="ph2" /><pc dataRefEnd="id10" dataRefStart="id9" id="p4">False</pc></target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>N/A</source>
          <target>N/A</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>N/A</source>
          <target>N/A</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>Single selection</source>
          <target>Single selection</target>
        </segment>
      </unit>
      <unit id="226">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>SelectionMode = <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Single</pc>, IsItemClickEnabled = <pc dataRefEnd="id4" dataRefStart="id3" id="p2">False</pc></source>
          <target>SelectionMode = <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Single</pc>, IsItemClickEnabled = <pc dataRefEnd="id4" dataRefStart="id3" id="p2">False</pc></target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>SelectionChanged</source>
          <target>SelectionChanged</target>
        </segment>
      </unit>
      <unit id="228">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.primitives.selector.selecteditem.aspx)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.primitives.selector.selectedindex.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedItem</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedIndex</pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedItem</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedIndex</pc></target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>Multiple selection</source>
          <target>Multiple selection</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>SelectionMode = <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multiple</pc>, IsItemClickEnabled = <pc dataRefEnd="id4" dataRefStart="id3" id="p2">False</pc></source>
          <target>SelectionMode = <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multiple</pc>, IsItemClickEnabled = <pc dataRefEnd="id4" dataRefStart="id3" id="p2">False</pc></target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>SelectionChanged</source>
          <target>SelectionChanged</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source>SelectedItems</source>
          <target>SelectedItems</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>Extended selection</source>
          <target>Extended selection</target>
        </segment>
      </unit>
      <unit id="234">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>SelectionMode = <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Extended</pc>, IsItemClickEnabled = <pc dataRefEnd="id4" dataRefStart="id3" id="p2">False</pc></source>
          <target>SelectionMode = <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Extended</pc>, IsItemClickEnabled = <pc dataRefEnd="id4" dataRefStart="id3" id="p2">False</pc></target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>SelectionChanged</source>
          <target>SelectionChanged</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>SelectedItems</source>
          <target>SelectedItems</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>Click</source>
          <target>Click</target>
        </segment>
      </unit>
      <unit id="238">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>SelectionMode = <pc dataRefEnd="id2" dataRefStart="id1" id="p1">None</pc>, IsItemClickEnabled = <pc dataRefEnd="id4" dataRefStart="id3" id="p2">True</pc></source>
          <target>SelectionMode = <pc dataRefEnd="id2" dataRefStart="id1" id="p1">None</pc>, IsItemClickEnabled = <pc dataRefEnd="id4" dataRefStart="id3" id="p2">True</pc></target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>ItemClick</source>
          <target>ItemClick</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>N/A</source>
          <target>N/A</target>
        </segment>
      </unit>
      <unit id="241">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Starting in Windows 10, you can enable IsItemClickEnabled to raise an ItemClick event while SelectionMode is also set to Single, Multiple, or Extended.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Starting in Windows 10, you can enable IsItemClickEnabled to raise an ItemClick event while SelectionMode is also set to Single, Multiple, or Extended.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source>If you do this, the ItemClick event is raised first, and then the SelectionChanged event is raised.</source>
          <target>If you do this, the ItemClick event is raised first, and then the SelectionChanged event is raised.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>In some cases, like if you navigate to another page in the ItemClick event handler, the SelectionChanged event is not raised and the item is not selected.</source>
          <target>In some cases, like if you navigate to another page in the ItemClick event handler, the SelectionChanged event is not raised and the item is not selected.</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source>You can set these properties in XAML or in code, as shown here.</source>
          <target>You can set these properties in XAML or in code, as shown here.</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>C</source>
          <target>C</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>Read-only</source>
          <target>Read-only</target>
        </segment>
      </unit>
      <unit id="248">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You can set the SelectionMode property to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListViewSelectionMode.None</pc> to disable item selection.</source>
          <target>You can set the SelectionMode property to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListViewSelectionMode.None</pc> to disable item selection.</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>This puts the control in read only mode, to be used for displaying data, but not for interacting with it.</source>
          <target>This puts the control in read only mode, to be used for displaying data, but not for interacting with it.</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>The control itself is not disabled, only item selection is disabled.</source>
          <target>The control itself is not disabled, only item selection is disabled.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>Single selection</source>
          <target>Single selection</target>
        </segment>
      </unit>
      <unit id="252">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This table describes the keyboard, mouse, and touch interactions when SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Single</pc>.</source>
          <target>This table describes the keyboard, mouse, and touch interactions when SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Single</pc>.</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>Modifier key</source>
          <target>Modifier key</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>Interaction</source>
          <target>Interaction</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source>None</source>
          <target>None</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source>A user can select a single item using the space bar, mouse click, or touch tap.</source>
          <target>A user can select a single item using the space bar, mouse click, or touch tap.</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>Ctrl</source>
          <target>Ctrl</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source>A user can deselect a single item using the space bar, mouse click, or touch tap.</source>
          <target>A user can deselect a single item using the space bar, mouse click, or touch tap.</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source>Using the arrow keys, a user can move focus independently of selection.</source>
          <target>Using the arrow keys, a user can move focus independently of selection.</target>
        </segment>
      </unit>
      <unit id="260">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.primitives.selector.selecteditem.aspx)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>When SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Single</pc>, you can get the selected data item from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SelectedItem</pc></pc> property.</source>
          <target>When SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Single</pc>, you can get the selected data item from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SelectedItem</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="261">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.primitives.selector.selectedindex.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can get the index in the collection of the selected item using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedIndex</pc></pc> property.</source>
          <target>You can get the index in the collection of the selected item using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedIndex</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="262">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If no item is selected, SelectedItem is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc>, and SelectedIndex is -1.</source>
          <target>If no item is selected, SelectedItem is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc>, and SelectedIndex is -1.</target>
        </segment>
      </unit>
      <unit id="263">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>If you try to set an item that is not in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Items</pc> collection as the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc>, the operation is ignored and SelectedItem is<pc dataRefEnd="id6" dataRefStart="id5" id="p3">null</pc>.</source>
          <target>If you try to set an item that is not in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Items</pc> collection as the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc>, the operation is ignored and SelectedItem is<pc dataRefEnd="id6" dataRefStart="id5" id="p3">null</pc>.</target>
        </segment>
      </unit>
      <unit id="264">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>However, if you try to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedIndex</pc> to an index that's out of the range of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc> in the list, a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">System.ArgumentException</pc> exception occurs.</source>
          <target>However, if you try to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedIndex</pc> to an index that's out of the range of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc> in the list, a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">System.ArgumentException</pc> exception occurs.</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>Multiple selection</source>
          <target>Multiple selection</target>
        </segment>
      </unit>
      <unit id="266">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This table describes the keyboard, mouse, and touch interactions when SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multiple</pc>.</source>
          <target>This table describes the keyboard, mouse, and touch interactions when SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multiple</pc>.</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source>Modifier key</source>
          <target>Modifier key</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source>Interaction</source>
          <target>Interaction</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source>None</source>
          <target>None</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source>A user can select multiple items using the space bar, mouse click, or touch tap to toggle selection on the focused item.</source>
          <target>A user can select multiple items using the space bar, mouse click, or touch tap to toggle selection on the focused item.</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source>Using the arrow keys, a user can move focus independently of selection.</source>
          <target>Using the arrow keys, a user can move focus independently of selection.</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source>Shift</source>
          <target>Shift</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source>A user can select multiple contiguous items by clicking or tapping the first item in the selection and then the last item in the selection.</source>
          <target>A user can select multiple contiguous items by clicking or tapping the first item in the selection and then the last item in the selection.</target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source>Using the arrow keys, a user can create a contiguous selection starting with the item selected when Shift is pressed.</source>
          <target>Using the arrow keys, a user can create a contiguous selection starting with the item selected when Shift is pressed.</target>
        </segment>
      </unit>
      <unit id="275">
        <segment state="initial">
          <source>Extended selection</source>
          <target>Extended selection</target>
        </segment>
      </unit>
      <unit id="276">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This table describes the keyboard, mouse, and touch interactions when SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Extended</pc>.</source>
          <target>This table describes the keyboard, mouse, and touch interactions when SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Extended</pc>.</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source>Modifier key</source>
          <target>Modifier key</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source>Interaction</source>
          <target>Interaction</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source>None</source>
          <target>None</target>
        </segment>
      </unit>
      <unit id="280">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The behavior is the same as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Single</pc> selection.</source>
          <target>The behavior is the same as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Single</pc> selection.</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source>Ctrl</source>
          <target>Ctrl</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source>A user can select multiple items using the space bar, mouse click, or touch tap to toggle selection on the focused item.</source>
          <target>A user can select multiple items using the space bar, mouse click, or touch tap to toggle selection on the focused item.</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source>Using the arrow keys, a user can move focus independently of selection.</source>
          <target>Using the arrow keys, a user can move focus independently of selection.</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source>Shift</source>
          <target>Shift</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source>A user can select multiple contiguous items by clicking or tapping the first item in the selection and then the last item in the selection.</source>
          <target>A user can select multiple contiguous items by clicking or tapping the first item in the selection and then the last item in the selection.</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source>Using the arrow keys, a user can create a contiguous selection starting with the item selected when Shift is pressed.</source>
          <target>Using the arrow keys, a user can create a contiguous selection starting with the item selected when Shift is pressed.</target>
        </segment>
      </unit>
      <unit id="287">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.selecteditems.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>When SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multiple</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Extended</pc>, you can get the selected data items from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SelectedItems</pc></pc> property.</source>
          <target>When SelectionMode is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multiple</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Extended</pc>, you can get the selected data items from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SelectedItems</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="288">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedIndex</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SelectedItems</pc> properties are synchronized.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedIndex</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SelectedItems</pc> properties are synchronized.</target>
        </segment>
      </unit>
      <unit id="289">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you set SelectedIndex to -1, SelectedItem is set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc> and SelectedItems is empty; if you set SelectedItem to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">null</pc>, SelectedIndex is set to -1 and SelectedItems is empty.</source>
          <target>For example, if you set SelectedIndex to -1, SelectedItem is set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc> and SelectedItems is empty; if you set SelectedItem to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">null</pc>, SelectedIndex is set to -1 and SelectedItems is empty.</target>
        </segment>
      </unit>
      <unit id="290">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In multi-select mode, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedItem</pc> contains the item that was selected first, and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Selectedindex</pc> contains the index of the item that was selected first.</source>
          <target>In multi-select mode, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedItem</pc> contains the item that was selected first, and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Selectedindex</pc> contains the index of the item that was selected first.</target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source>Respond to selection changes</source>
          <target>Respond to selection changes</target>
        </segment>
      </unit>
      <unit id="292">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.primitives.selector.selectionchanged.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>To respond to selection changes in a list view, handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChanged</pc></pc> event.</source>
          <target>To respond to selection changes in a list view, handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChanged</pc></pc> event.</target>
        </segment>
      </unit>
      <unit id="293">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.selectionchangedeventargs.addeditems.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the event handler code, you can get the list of selected items from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChangedEventArgs.AddedItems</pc></pc> property.</source>
          <target>In the event handler code, you can get the list of selected items from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChangedEventArgs.AddedItems</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="294">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.selectionchangedeventargs.removeditems.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can get any items that were deselected from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChangedEventArgs.RemovedItems</pc></pc> property.</source>
          <target>You can get any items that were deselected from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChangedEventArgs.RemovedItems</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="295">
        <segment state="initial">
          <source>The AddedItems and RemovedItems collections contain at most 1 item unless the user selects a range of items by holding down the Shift key.</source>
          <target>The AddedItems and RemovedItems collections contain at most 1 item unless the user selects a range of items by holding down the Shift key.</target>
        </segment>
      </unit>
      <unit id="296">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This example shows how to handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionChanged</pc> event and access the various items collections.</source>
          <target>This example shows how to handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionChanged</pc> event and access the various items collections.</target>
        </segment>
      </unit>
      <unit id="297">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source>C</source>
          <target>C</target>
        </segment>
      </unit>
      <unit id="299">
        <segment state="initial">
          <source>Click mode</source>
          <target>Click mode</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source>You can change a list view so that a user clicks items like buttons instead of selecting them.</source>
          <target>You can change a list view so that a user clicks items like buttons instead of selecting them.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source>For example, this is useful when your app navigates to a new page when your user clicks an item in a list or grid.</source>
          <target>For example, this is useful when your app navigates to a new page when your user clicks an item in a list or grid.</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source>To enable this behavior:</source>
          <target>To enable this behavior:</target>
        </segment>
      </unit>
      <unit id="303">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionMode</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">None</pc>.</source>
          <target>Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionMode</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">None</pc>.</target>
        </segment>
      </unit>
      <unit id="304">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsItemClickEnabled</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc>.</source>
          <target>Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsItemClickEnabled</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc>.</target>
        </segment>
      </unit>
      <unit id="305">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemClick</pc> event to do something when your user clicks an item.</source>
          <target>Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemClick</pc> event to do something when your user clicks an item.</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source>Here's a list view with clickable items.</source>
          <target>Here's a list view with clickable items.</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source>The code in the ItemClick event handler navigates to a new page.</source>
          <target>The code in the ItemClick event handler navigates to a new page.</target>
        </segment>
      </unit>
      <unit id="308">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="309">
        <segment state="initial">
          <source>C</source>
          <target>C</target>
        </segment>
      </unit>
      <unit id="310">
        <segment state="initial">
          <source>Select a range of items programmatically</source>
          <target>Select a range of items programmatically</target>
        </segment>
      </unit>
      <unit id="311">
        <segment state="initial">
          <source>Sometimes, you need to manipulate a list view’s item selection programmatically.</source>
          <target>Sometimes, you need to manipulate a list view’s item selection programmatically.</target>
        </segment>
      </unit>
      <unit id="312">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>For example, you might have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Select all</pc> button to let a user select all items in a list.</source>
          <target>For example, you might have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Select all</pc> button to let a user select all items in a list.</target>
        </segment>
      </unit>
      <unit id="313">
        <segment state="initial">
          <source>In this case, it’s usually not very efficient to add and remove items from the SelectedItems collection one by one.</source>
          <target>In this case, it’s usually not very efficient to add and remove items from the SelectedItems collection one by one.</target>
        </segment>
      </unit>
      <unit id="314">
        <segment state="initial">
          <source>Each item change causes a SelectionChanged event to occur, and when you work with the items directly instead of working with index values, the item is de-virtualized.</source>
          <target>Each item change causes a SelectionChanged event to occur, and when you work with the items directly instead of working with index values, the item is de-virtualized.</target>
        </segment>
      </unit>
      <unit id="315">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.selectall.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.selectrange.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.deselectrange.aspx)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectAll</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SelectRange</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">DeselectRange</pc></pc> methods provide a more efficient way to modify the selection than using the SelectedItems property.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectAll</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SelectRange</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">DeselectRange</pc></pc> methods provide a more efficient way to modify the selection than using the SelectedItems property.</target>
        </segment>
      </unit>
      <unit id="316">
        <segment state="initial">
          <source>These methods select or deselect using ranges of item indexes.</source>
          <target>These methods select or deselect using ranges of item indexes.</target>
        </segment>
      </unit>
      <unit id="317">
        <segment state="initial">
          <source>Items that are virtualized remain virtualized, because only the index is used.</source>
          <target>Items that are virtualized remain virtualized, because only the index is used.</target>
        </segment>
      </unit>
      <unit id="318">
        <segment state="initial">
          <source>All items in the specified range are selected (or deselected), regardless of their original selection state.</source>
          <target>All items in the specified range are selected (or deselected), regardless of their original selection state.</target>
        </segment>
      </unit>
      <unit id="319">
        <segment state="initial">
          <source>The SelectionChanged event occurs only once for each call to these methods.</source>
          <target>The SelectionChanged event occurs only once for each call to these methods.</target>
        </segment>
      </unit>
      <unit id="320">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>
            <ph dataRef="id3" id="ph1" />You should call these methods only when the SelectionMode property is set to Multiple or Extended.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>
            <ph dataRef="id3" id="ph1" />You should call these methods only when the SelectionMode property is set to Multiple or Extended.</target>
        </segment>
      </unit>
      <unit id="321">
        <segment state="initial">
          <source>If you call SelectRange when the SelectionMode is Single or None, an exception is thrown.</source>
          <target>If you call SelectRange when the SelectionMode is Single or None, an exception is thrown.</target>
        </segment>
      </unit>
      <unit id="322">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.listviewbase.selectedranges.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>When you select items using index ranges, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedRanges</pc></pc> property to get all selected ranges in the list.</source>
          <target>When you select items using index ranges, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedRanges</pc></pc> property to get all selected ranges in the list.</target>
        </segment>
      </unit>
      <unit id="323">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.data.iitemsrangeinfo.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>If the ItemsSource implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IItemsRangeInfo</pc></pc>, and you use these methods to modify the selection, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AddedItems</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">RemovedItems</pc> properties are not set in the SelectionChangedEventArgs.</source>
          <target>If the ItemsSource implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IItemsRangeInfo</pc></pc>, and you use these methods to modify the selection, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AddedItems</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">RemovedItems</pc> properties are not set in the SelectionChangedEventArgs.</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source>Setting these properties requires de-virtualizing the item object.</source>
          <target>Setting these properties requires de-virtualizing the item object.</target>
        </segment>
      </unit>
      <unit id="325">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedRanges</pc> property to get the items instead.</source>
          <target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedRanges</pc> property to get the items instead.</target>
        </segment>
      </unit>
      <unit id="326">
        <segment state="initial">
          <source>You can select all items in a collection by calling the SelectAll method.</source>
          <target>You can select all items in a collection by calling the SelectAll method.</target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source>However, there is no corresponding method to deselect all items.</source>
          <target>However, there is no corresponding method to deselect all items.</target>
        </segment>
      </unit>
      <unit id="328">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.data.itemindexrange.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.data.itemindexrange.firstindex.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.data.itemindexrange.length.aspx)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source>You can deselect all items by calling DeselectRange and passing an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemIndexRange</pc></pc> with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FirstIndex</pc></pc> value of 0 and a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Length</pc></pc> value equal to the number of items in the collection.</source>
          <target>You can deselect all items by calling DeselectRange and passing an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemIndexRange</pc></pc> with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FirstIndex</pc></pc> value of 0 and a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Length</pc></pc> value equal to the number of items in the collection.</target>
        </segment>
      </unit>
      <unit id="329">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="330">
        <segment state="initial">
          <source>C</source>
          <target>C</target>
        </segment>
      </unit>
      <unit id="331">
        <segment state="initial">
          <source>Related articles</source>
          <target>Related articles</target>
        </segment>
      </unit>
      <unit id="332">
        <segment state="initial">
          <source>Lists</source>
          <target>Lists</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>