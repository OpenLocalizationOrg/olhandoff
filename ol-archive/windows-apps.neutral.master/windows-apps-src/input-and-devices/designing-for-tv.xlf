<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\input-and-devices\designing-for-tv.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">daa1df78409bd10ee1d5c24e8874e011d4005a82</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Design your app so that it looks good and functions well on your television.</source>
          <target>Design your app so that it looks good and functions well on your television.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Designing for Xbox and TV</source>
          <target>Designing for Xbox and TV</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>This article describes a feature that's not yet available.</source>
          <target>This article describes a feature that's not yet available.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>This feature may be substantially modified before its commercial release.</source>
          <target>This feature may be substantially modified before its commercial release.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.</source>
          <target>Microsoft makes no warranties, express or implied, with respect to the information provided here.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Designing for Xbox and TV</source>
          <target>Designing for Xbox and TV</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Design your Universal Windows Platform (UWP) app so that it looks good and functions well on Xbox One and television screens.</source>
          <target>Design your Universal Windows Platform (UWP) app so that it looks good and functions well on Xbox One and television screens.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Overview</source>
          <target>Overview</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>The Universal Windows Platform lets you create delightful experiences across multiple Windows 10 devices.</source>
          <target>The Universal Windows Platform lets you create delightful experiences across multiple Windows 10 devices.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Most of the functionality provided by the UWP framework enables apps to use the same user interface (UI) across these devices, without additional work.</source>
          <target>Most of the functionality provided by the UWP framework enables apps to use the same user interface (UI) across these devices, without additional work.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>However, tailoring and optimizing your app to work great on Xbox One and TV screens requires special considerations.</source>
          <target>However, tailoring and optimizing your app to work great on Xbox One and TV screens requires special considerations.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The experience of sitting on your couch across the room, using a gamepad or remote to interact with your TV, is called the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">10-foot experience</pc>.</source>
          <target>The experience of sitting on your couch across the room, using a gamepad or remote to interact with your TV, is called the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">10-foot experience</pc>.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>It is so named because the user is generally sitting approximately 10 feet away from the screen.</source>
          <target>It is so named because the user is generally sitting approximately 10 feet away from the screen.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>This provides unique challenges that aren't present in, say, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">2-foot</pc> experience, or interacting with a PC.</source>
          <target>This provides unique challenges that aren't present in, say, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">2-foot</pc> experience, or interacting with a PC.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>If you are developing an app for Xbox One or any other device that outputs to the TV screen and uses a controller for input, you should always keep this in mind.</source>
          <target>If you are developing an app for Xbox One or any other device that outputs to the TV screen and uses a controller for input, you should always keep this in mind.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Not all of the steps in this article are required to make your app work well for 10-foot experiences, but understanding them and making the appropriate decisions for your app will result in a better 10-foot experience tailored for your app's specific needs.</source>
          <target>Not all of the steps in this article are required to make your app work well for 10-foot experiences, but understanding them and making the appropriate decisions for your app will result in a better 10-foot experience tailored for your app's specific needs.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>As you bring your app to life in the 10-foot environment, consider the following design principles.</source>
          <target>As you bring your app to life in the 10-foot environment, consider the following design principles.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Simple</source>
          <target>Simple</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Designing for the 10-foot environment presents a unique set of challenges.</source>
          <target>Designing for the 10-foot environment presents a unique set of challenges.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Resolution and viewing distance can make it difficult for people to process too much information.</source>
          <target>Resolution and viewing distance can make it difficult for people to process too much information.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Try to keep your design clean, reduced to the simplest possible components.</source>
          <target>Try to keep your design clean, reduced to the simplest possible components.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>The amount of information displayed on a TV should be comparable to what you'd see on a mobile phone, rather than on a desktop.</source>
          <target>The amount of information displayed on a TV should be comparable to what you'd see on a mobile phone, rather than on a desktop.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Xbox One home screen</source>
          <target>Xbox One home screen</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Coherent</source>
          <target>Coherent</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>UWP apps in the 10-foot environment should be intuitive and easy to use.</source>
          <target>UWP apps in the 10-foot environment should be intuitive and easy to use.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Make the focus clear and unmistakable.</source>
          <target>Make the focus clear and unmistakable.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Arrange content so that movement across the space is consistent and predictable.</source>
          <target>Arrange content so that movement across the space is consistent and predictable.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Give people the shortest path to what they want to do.</source>
          <target>Give people the shortest path to what they want to do.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Xbox One Movies app</source>
          <target>Xbox One Movies app</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>All movies shown in the screenshot are available on Microsoft Movies &amp; TV.</source>
          <target>All movies shown in the screenshot are available on Microsoft Movies &amp; TV.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Captivating</source>
          <target>Captivating</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>The most immersive, cinematic experiences take place on the big screen.</source>
          <target>The most immersive, cinematic experiences take place on the big screen.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Edge-to-edge scenery, elegant motion, and vibrant use of color and typography take your apps to the next level.</source>
          <target>Edge-to-edge scenery, elegant motion, and vibrant use of color and typography take your apps to the next level.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Be bold and beautiful.</source>
          <target>Be bold and beautiful.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Xbox One Avatar app</source>
          <target>Xbox One Avatar app</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Optimizations for the 10-foot experience</source>
          <target>Optimizations for the 10-foot experience</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Now that you know the principles of good UWP app design for the 10-foot experience, read through the following overview of the specific ways you can optimize your app and make for a great user experience.</source>
          <target>Now that you know the principles of good UWP app design for the 10-foot experience, read through the following overview of the specific ways you can optimize your app and make for a great user experience.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Feature</source>
          <target>Feature</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Gamepad and remote control</source>
          <target>Gamepad and remote control</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Making sure that your app works well with gamepad and remote is the most important step in optimizing for 10-foot experiences.</source>
          <target>Making sure that your app works well with gamepad and remote is the most important step in optimizing for 10-foot experiences.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>There are several gamepad and remote-specific improvements that you can make to optimize the user interaction experience on a device where their actions are somewhat limited.</source>
          <target>There are several gamepad and remote-specific improvements that you can make to optimize the user interaction experience on a device where their actions are somewhat limited.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>XY focus navigation and interaction</source>
          <target>XY focus navigation and interaction</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The UWP provides <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XY focus navigation</pc> that allows the user to navigate around your app's UI.</source>
          <target>The UWP provides <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XY focus navigation</pc> that allows the user to navigate around your app's UI.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>However, this limits the user to navigating up, down, left, and right.</source>
          <target>However, this limits the user to navigating up, down, left, and right.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Recommendations for dealing with this and other considerations are outlined in this section.</source>
          <target>Recommendations for dealing with this and other considerations are outlined in this section.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Mouse mode</source>
          <target>Mouse mode</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>In some user interfaces, such as maps and drawing surfaces, it is not possible or practical to use XY focus navigation.</source>
          <target>In some user interfaces, such as maps and drawing surfaces, it is not possible or practical to use XY focus navigation.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>For these interfaces, the UWP provides <pc dataRefEnd="id2" dataRefStart="id1" id="p1">mouse mode</pc> to let the gamepad/remote navigate freely, like a mouse on a desktop computer.</source>
          <target>For these interfaces, the UWP provides <pc dataRefEnd="id2" dataRefStart="id1" id="p1">mouse mode</pc> to let the gamepad/remote navigate freely, like a mouse on a desktop computer.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Focus visual</source>
          <target>Focus visual</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>The focus visual is the border around the UI element that currently has focus.</source>
          <target>The focus visual is the border around the UI element that currently has focus.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>This helps orient the user so that they can easily navigate your UI without getting lost.</source>
          <target>This helps orient the user so that they can easily navigate your UI without getting lost.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>If the focus is not clearly visible, the user could get lost in your UI and not have a great experience.</source>
          <target>If the focus is not clearly visible, the user could get lost in your UI and not have a great experience.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Focus engagement</source>
          <target>Focus engagement</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Setting focus engagement on a UI element requires the user to press the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">A/Select</pc> button in order to interact with it.</source>
          <target>Setting focus engagement on a UI element requires the user to press the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">A/Select</pc> button in order to interact with it.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>This can help create a better experience for the user when navigating your app's UI.</source>
          <target>This can help create a better experience for the user when navigating your app's UI.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>UI element sizing</source>
          <target>UI element sizing</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](..\layout\design-and-ui-intro.md#effective-pixels-and-scaling)</data>
        </originalData>
        <segment state="initial">
          <source>The Universal Windows Platform uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">scaling and effective pixels</pc> to scale the UI according to the viewing distance.</source>
          <target>The Universal Windows Platform uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">scaling and effective pixels</pc> to scale the UI according to the viewing distance.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Understanding sizing and applying it across your UI will help optimize your app for the 10-foot environment.</source>
          <target>Understanding sizing and applying it across your UI will help optimize your app for the 10-foot environment.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>TV-safe area</source>
          <target>TV-safe area</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>The UWP will automatically avoid displaying any UI in TV-unsafe areas (areas close to the edges of the screen) by default.</source>
          <target>The UWP will automatically avoid displaying any UI in TV-unsafe areas (areas close to the edges of the screen) by default.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>However, this creates a "boxed-in" effect in which the UI looks letterboxed.</source>
          <target>However, this creates a "boxed-in" effect in which the UI looks letterboxed.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>For your app to be truly immersive on TV, you will want to modify it so that it extends to the edges of the screen on TVs that support it.</source>
          <target>For your app to be truly immersive on TV, you will want to modify it so that it extends to the edges of the screen on TVs that support it.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Colors</source>
          <target>Colors</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The UWP supports color themes, and an app that respects the system theme will default to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dark</pc> on Xbox One.</source>
          <target>The UWP supports color themes, and an app that respects the system theme will default to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dark</pc> on Xbox One.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>If your app has a specific color theme, you should consider that some colors don't work well for TV and should be avoided.</source>
          <target>If your app has a specific color theme, you should consider that some colors don't work well for TV and should be avoided.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>Sound</source>
          <target>Sound</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Sounds play a key role in the 10-foot experience, helping to immerse and give feedback to the user.</source>
          <target>Sounds play a key role in the 10-foot experience, helping to immerse and give feedback to the user.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>The UWP provides functionality that automatically turns on sounds for common controls when the app is running on Xbox One.</source>
          <target>The UWP provides functionality that automatically turns on sounds for common controls when the app is running on Xbox One.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>Find out more about the sound support built into the UWP and learn how to take advantage of it.</source>
          <target>Find out more about the sound support built into the UWP and learn how to take advantage of it.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Guidelines for UI controls</source>
          <target>Guidelines for UI controls</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>There are several UI controls that work well across multiple devices, but have certain considerations when used on TV.</source>
          <target>There are several UI controls that work well across multiple devices, but have certain considerations when used on TV.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>Read about some best practices for using these controls when designing for the 10-foot experience.</source>
          <target>Read about some best practices for using these controls when designing for the 10-foot experience.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Gamepad and remote control</source>
          <target>Gamepad and remote control</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>Just like keyboard and mouse are for PC, and touch is for phone and tablet, gamepad and remote control are the main input devices for the 10-foot experience.</source>
          <target>Just like keyboard and mouse are for PC, and touch is for phone and tablet, gamepad and remote control are the main input devices for the 10-foot experience.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>This section introduces what the hardware buttons are and what they do.</source>
          <target>This section introduces what the hardware buttons are and what they do.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#xy-focus-navigation-and-interaction)</data>
          <data id="id3">[</data>
          <data id="id4">](#mouse-mode)</data>
        </originalData>
        <segment state="initial">
          <source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XY focus navigation and interaction</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Mouse mode</pc>, you will learn how to optimize your app when using these input devices.</source>
          <target>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XY focus navigation and interaction</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Mouse mode</pc>, you will learn how to optimize your app when using these input devices.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>The quality of gamepad and remote behavior that you get out-of-the-box depends on how well keyboard is supported in your app.</source>
          <target>The quality of gamepad and remote behavior that you get out-of-the-box depends on how well keyboard is supported in your app.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>A good way to ensure that your app will work well with gamepad/remote is to make sure that it works well with keyboard on PC, and then test with gamepad/remote to find weak spots in your UI.</source>
          <target>A good way to ensure that your app will work well with gamepad/remote is to make sure that it works well with keyboard on PC, and then test with gamepad/remote to find weak spots in your UI.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>Hardware buttons</source>
          <target>Hardware buttons</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>Throughout this document, buttons will be referred to by the names given in the following diagram.</source>
          <target>Throughout this document, buttons will be referred to by the names given in the following diagram.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>Gamepad and remote buttons diagram</source>
          <target>Gamepad and remote buttons diagram</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>As you can see from the diagram, there are some buttons that are supported on gamepad that are not supported on remote control, and vice versa.</source>
          <target>As you can see from the diagram, there are some buttons that are supported on gamepad that are not supported on remote control, and vice versa.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>While you can use buttons that are only supported on one input device to make navigating the UI faster, be aware that using them for critical interactions may create a situation where the user is unable to interact with certain parts of the UI.</source>
          <target>While you can use buttons that are only supported on one input device to make navigating the UI faster, be aware that using them for critical interactions may create a situation where the user is unable to interact with certain parts of the UI.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>The following table lists all of the hardware buttons supported by UWP apps, and which input device supports them.</source>
          <target>The following table lists all of the hardware buttons supported by UWP apps, and which input device supports them.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>Button</source>
          <target>Button</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>Gamepad</source>
          <target>Gamepad</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>Remote control</source>
          <target>Remote control</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>A/Select button</source>
          <target>A/Select button</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>B/Back button</source>
          <target>B/Back button</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>Directional pad (D-pad)</source>
          <target>Directional pad (D-pad)</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>Menu button</source>
          <target>Menu button</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>View button</source>
          <target>View button</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>X and Y buttons</source>
          <target>X and Y buttons</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>Left stick</source>
          <target>Left stick</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>Right stick</source>
          <target>Right stick</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>Left and right triggers</source>
          <target>Left and right triggers</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source>Left and right bumpers</source>
          <target>Left and right bumpers</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>OneGuide button</source>
          <target>OneGuide button</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>Volume button</source>
          <target>Volume button</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>Channel button</source>
          <target>Channel button</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>Media control buttons</source>
          <target>Media control buttons</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>Mute button</source>
          <target>Mute button</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>Built-in button support</source>
          <target>Built-in button support</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>The UWP automatically maps existing keyboard input behavior to gamepad and remote control input.</source>
          <target>The UWP automatically maps existing keyboard input behavior to gamepad and remote control input.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>The following table lists these built-in mappings.</source>
          <target>The following table lists these built-in mappings.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>Keyboard</source>
          <target>Keyboard</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>Gamepad/remote</source>
          <target>Gamepad/remote</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>Arrow keys</source>
          <target>Arrow keys</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>D-pad (also left stick on gamepad)</source>
          <target>D-pad (also left stick on gamepad)</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>Spacebar</source>
          <target>Spacebar</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source>A/Select button</source>
          <target>A/Select button</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>Enter</source>
          <target>Enter</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source>A/Select button</source>
          <target>A/Select button</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>Escape</source>
          <target>Escape</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>B/Back button*</source>
          <target>B/Back button*</target>
        </segment>
      </unit>
      <unit id="247">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208941)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.uielement.keyup.aspx)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.systemnavigationmanager.backrequested.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>When neither the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyDown</pc> nor <pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeyUp</pc> events for the B button are handled by the app, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SystemNavigationManager.BackRequested</pc> event will be fired, which will result in back navigation within the app.</source>
          <target>When neither the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyDown</pc> nor <pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeyUp</pc> events for the B button are handled by the app, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SystemNavigationManager.BackRequested</pc> event will be fired, which will result in back navigation within the app.</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>Accelerator support</source>
          <target>Accelerator support</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>Accelerator buttons are buttons that can be used to speed up navigation through a UI.</source>
          <target>Accelerator buttons are buttons that can be used to speed up navigation through a UI.</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>However, these buttons may be unique to a certain input device, so keep in mind that not all users will be able to use these functions.</source>
          <target>However, these buttons may be unique to a certain input device, so keep in mind that not all users will be able to use these functions.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>In fact, gamepad is currently the only input device that supports accelerator functions for UWP apps on Xbox One.</source>
          <target>In fact, gamepad is currently the only input device that supports accelerator functions for UWP apps on Xbox One.</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source>The following table lists the accelerator support built into the UWP, as well as that which you can implement on your own.</source>
          <target>The following table lists the accelerator support built into the UWP, as well as that which you can implement on your own.</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>Utilize these behaviors in your custom UI to provide a consistent and friendly user experience.</source>
          <target>Utilize these behaviors in your custom UI to provide a consistent and friendly user experience.</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>Interaction</source>
          <target>Interaction</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source>Keyboard</source>
          <target>Keyboard</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source>Gamepad</source>
          <target>Gamepad</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>Built-in for:</source>
          <target>Built-in for:</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source>Recommended for:</source>
          <target>Recommended for:</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source>Panning</source>
          <target>Panning</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source>None</source>
          <target>None</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source>Right stick</source>
          <target>Right stick</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source>None</source>
          <target>None</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source>ScrollViewer</source>
          <target>ScrollViewer</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>Page up/down</source>
          <target>Page up/down</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>Page up/down</source>
          <target>Page up/down</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source>Left/right triggers</source>
          <target>Left/right triggers</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source>None</source>
          <target>None</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source>and list/grid</source>
          <target>and list/grid</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source>Page left/right</source>
          <target>Page left/right</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source>None</source>
          <target>None</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source>Left/right bumpers</source>
          <target>Left/right bumpers</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source>Pivot</source>
          <target>Pivot</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source>Zoom in/out</source>
          <target>Zoom in/out</target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source>Ctrl +/-</source>
          <target>Ctrl +/-</target>
        </segment>
      </unit>
      <unit id="275">
        <segment state="initial">
          <source>Left/right triggers</source>
          <target>Left/right triggers</target>
        </segment>
      </unit>
      <unit id="276">
        <segment state="initial">
          <source>Views that support zooming in and out</source>
          <target>Views that support zooming in and out</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source>XY focus navigation and interaction</source>
          <target>XY focus navigation and interaction</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source>If your app supports proper focus navigation for keyboard, this will translate well to gamepad and remote control.</source>
          <target>If your app supports proper focus navigation for keyboard, this will translate well to gamepad and remote control.</target>
        </segment>
      </unit>
      <unit id="279">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](#gamepad-and-remote-control)</data>
        </originalData>
        <segment state="initial">
          <source>Navigation with the arrow keys is mapped to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">D-pad</pc> (as well as the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">left stick</pc> on gamepad), and interaction with UI elements is mapped to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Enter/Select</pc> key (see <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Gamepad and remote control</pc>).</source>
          <target>Navigation with the arrow keys is mapped to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">D-pad</pc> (as well as the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">left stick</pc> on gamepad), and interaction with UI elements is mapped to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Enter/Select</pc> key (see <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Gamepad and remote control</pc>).</target>
        </segment>
      </unit>
      <unit id="280">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](keyboard-interactions.md)</data>
        </originalData>
        <segment state="initial">
          <source>For keyboard design guidance, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Keyboard interactions</pc>.</source>
          <target>For keyboard design guidance, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Keyboard interactions</pc>.</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source>If keyboard support is implemented properly, your app will work reasonably well; however, there may be some extra work required to support every scenario.</source>
          <target>If keyboard support is implemented properly, your app will work reasonably well; however, there may be some extra work required to support every scenario.</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source>Think about your app's specific needs to provide the best user experience possible.</source>
          <target>Think about your app's specific needs to provide the best user experience possible.</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source>Inaccessible UI</source>
          <target>Inaccessible UI</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source>Because XY focus navigation limits the user to moving up, down, left, and right, you may end up with scenarios where parts of the UI are inaccessible.</source>
          <target>Because XY focus navigation limits the user to moving up, down, left, and right, you may end up with scenarios where parts of the UI are inaccessible.</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source>The following diagram illustrates an example of the kind of UI layout that XY focus navigation doesn't support.</source>
          <target>The following diagram illustrates an example of the kind of UI layout that XY focus navigation doesn't support.</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source>Note that the element in the middle is not accessible by using gamepad/remote because the vertical and horizontal navigation will be prioritized and the middle element will never be high enough priority to get focus.</source>
          <target>Note that the element in the middle is not accessible by using gamepad/remote because the vertical and horizontal navigation will be prioritized and the middle element will never be high enough priority to get focus.</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source>Elements in four corners with inaccessible element in middle</source>
          <target>Elements in four corners with inaccessible element in middle</target>
        </segment>
      </unit>
      <unit id="288">
        <segment state="initial">
          <source>If for some reason rearranging the UI is not possible, use one of the techniques discussed in the next section to override the default focus behavior.</source>
          <target>If for some reason rearranging the UI is not possible, use one of the techniques discussed in the next section to override the default focus behavior.</target>
        </segment>
      </unit>
      <unit id="289">
        <segment state="initial">
          <source>Overriding the default navigation</source>
          <target>Overriding the default navigation</target>
        </segment>
      </unit>
      <unit id="290">
        <segment state="initial">
          <source>While the UWP tries to ensure that D-pad/left stick navigation makes sense to the user, it cannot guarantee behavior that is optimized for your app's intentions.</source>
          <target>While the UWP tries to ensure that D-pad/left stick navigation makes sense to the user, it cannot guarantee behavior that is optimized for your app's intentions.</target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source>The best way to ensure that navigation is optimized for your app is to test it with a gamepad and confirm that every UI element can be accessed by the user in a manner that makes sense for your app's scenarios.</source>
          <target>The best way to ensure that navigation is optimized for your app is to test it with a gamepad and confirm that every UI element can be accessed by the user in a manner that makes sense for your app's scenarios.</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source>In case your app's scenarios call for a behavior not achieved through the XY focus navigation provided, consider following the recommendations in the following sections and/or overriding the behavior to place the focus on a logical item.</source>
          <target>In case your app's scenarios call for a behavior not achieved through the XY focus navigation provided, consider following the recommendations in the following sections and/or overriding the behavior to place the focus on a logical item.</target>
        </segment>
      </unit>
      <unit id="293">
        <segment state="initial">
          <source>The following code snippet shows how you might override the XY focus navigation behavior:</source>
          <target>The following code snippet shows how you might override the XY focus navigation behavior:</target>
        </segment>
      </unit>
      <unit id="294">
        <originalData>
          <data id="id1">`Home`</data>
          <data id="id2">`MyBtnLeft`</data>
          <data id="id3">`MyBtnRight`</data>
        </originalData>
        <segment state="initial">
          <source>In this case, when focus is on the <ph dataRef="id1" id="ph1" /> button and the user navigates to the left, focus will move to the <ph dataRef="id2" id="ph2" /> button; if the user navigates to the right, focus will move to the <ph dataRef="id3" id="ph3" /> button; and so on.</source>
          <target>In this case, when focus is on the <ph dataRef="id1" id="ph1" /> button and the user navigates to the left, focus will move to the <ph dataRef="id2" id="ph2" /> button; if the user navigates to the right, focus will move to the <ph dataRef="id3" id="ph3" /> button; and so on.</target>
        </segment>
      </unit>
      <unit id="295">
        <originalData>
          <data id="id1">`XYFocus*`</data>
        </originalData>
        <segment state="initial">
          <source>To prevent the focus from moving from a control in a certain direction, use the <ph dataRef="id1" id="ph1" /> property to point it at the same control:</source>
          <target>To prevent the focus from moving from a control in a certain direction, use the <ph dataRef="id1" id="ph1" /> property to point it at the same control:</target>
        </segment>
      </unit>
      <unit id="296">
        <segment state="initial">
          <source>Path of least clicks</source>
          <target>Path of least clicks</target>
        </segment>
      </unit>
      <unit id="297">
        <segment state="initial">
          <source>Try to allow the user to perform the most common tasks in the least number of clicks.</source>
          <target>Try to allow the user to perform the most common tasks in the least number of clicks.</target>
        </segment>
      </unit>
      <unit id="298">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the following example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> is placed between the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Play</pc> button (which initially gets focus) and a commonly used element, so that an unnecessary element is placed in between priority tasks.</source>
          <target>In the following example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> is placed between the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Play</pc> button (which initially gets focus) and a commonly used element, so that an unnecessary element is placed in between priority tasks.</target>
        </segment>
      </unit>
      <unit id="299">
        <segment state="initial">
          <source>Navigation best practices provide path with least clicks</source>
          <target>Navigation best practices provide path with least clicks</target>
        </segment>
      </unit>
      <unit id="300">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the following example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> is placed above the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Play</pc> button instead.</source>
          <target>In the following example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> is placed above the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Play</pc> button instead.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source>Simply rearranging the UI so that unnecessary elements are not placed in between priority tasks will greatly improve your app's usability.</source>
          <target>Simply rearranging the UI so that unnecessary elements are not placed in between priority tasks will greatly improve your app's usability.</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source>TextBlock moved above Play button so that it is no longer between priority tasks</source>
          <target>TextBlock moved above Play button so that it is no longer between priority tasks</target>
        </segment>
      </unit>
      <unit id="303">
        <segment state="initial">
          <source>CommandBar and ContextFlyout</source>
          <target>CommandBar and ContextFlyout</target>
        </segment>
      </unit>
      <unit id="304">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.commandbar.aspx)</data>
          <data id="id3">[</data>
          <data id="id4">](#problem-ui-elements-located-after-long-scrolling-list-grid)</data>
        </originalData>
        <segment state="initial">
          <source>When using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CommandBar</pc>, keep in mind the issue of scrolling through a list as mentioned in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Problem: UI elements located after long scrolling list/grid</pc>.</source>
          <target>When using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CommandBar</pc>, keep in mind the issue of scrolling through a list as mentioned in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Problem: UI elements located after long scrolling list/grid</pc>.</target>
        </segment>
      </unit>
      <unit id="305">
        <originalData>
          <data id="id1">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>The following image shows a UI layout with the <ph dataRef="id1" id="ph1" /> on the bottom of a list/grid.</source>
          <target>The following image shows a UI layout with the <ph dataRef="id1" id="ph1" /> on the bottom of a list/grid.</target>
        </segment>
      </unit>
      <unit id="306">
        <originalData>
          <data id="id1">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>The user would need to scroll all the way down through the list/grid to reach the <ph dataRef="id1" id="ph1" />.</source>
          <target>The user would need to scroll all the way down through the list/grid to reach the <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source>CommandBar at bottom of list/grid</source>
          <target>CommandBar at bottom of list/grid</target>
        </segment>
      </unit>
      <unit id="308">
        <originalData>
          <data id="id1">`CommandBar`</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
        </originalData>
        <segment state="initial">
          <source>What if you put the <ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">above</pc> the list/grid?</source>
          <target>What if you put the <ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">above</pc> the list/grid?</target>
        </segment>
      </unit>
      <unit id="309">
        <originalData>
          <data id="id1">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>While a user who scrolled down the list/grid would have to scroll back up to reach the <ph dataRef="id1" id="ph1" />, it is slightly less navigation than the previous configuration.</source>
          <target>While a user who scrolled down the list/grid would have to scroll back up to reach the <ph dataRef="id1" id="ph1" />, it is slightly less navigation than the previous configuration.</target>
        </segment>
      </unit>
      <unit id="310">
        <originalData>
          <data id="id1">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>Note that this is assuming that your app's initial focus is placed next to or above the <ph dataRef="id1" id="ph1" />; this approach won't work as well if the initial focus is below the list/grid.</source>
          <target>Note that this is assuming that your app's initial focus is placed next to or above the <ph dataRef="id1" id="ph1" />; this approach won't work as well if the initial focus is below the list/grid.</target>
        </segment>
      </unit>
      <unit id="311">
        <originalData>
          <data id="id1">`CommandBar`</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
        </originalData>
        <segment state="initial">
          <source>If these <ph dataRef="id1" id="ph1" /> items are global action items that don't have to be accessed very often (such as a <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Sync</pc> button), it may be acceptable to have them above the list/grid.</source>
          <target>If these <ph dataRef="id1" id="ph1" /> items are global action items that don't have to be accessed very often (such as a <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Sync</pc> button), it may be acceptable to have them above the list/grid.</target>
        </segment>
      </unit>
      <unit id="312">
        <originalData>
          <data id="id1">`CommandBar`</data>
          <data id="id2">`ContextFlyout`</data>
          <data id="id3">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>If your app has a <ph dataRef="id1" id="ph1" /> whose items need to be readily accessible by users, you may want to consider placing these items inside a <ph dataRef="id2" id="ph2" /> and removing them from the <ph dataRef="id3" id="ph3" />.</source>
          <target>If your app has a <ph dataRef="id1" id="ph1" /> whose items need to be readily accessible by users, you may want to consider placing these items inside a <ph dataRef="id2" id="ph2" /> and removing them from the <ph dataRef="id3" id="ph3" />.</target>
        </segment>
      </unit>
      <unit id="313">
        <originalData>
          <data id="id1">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>While you can't stack a <ph dataRef="id1" id="ph1" />'s items vertically, placing them against the scroll direction (for example, to the left or right of a vertically scrolling list, or the top or bottom of a horizontally scrolling list) is another option you may want to consider if it works well for your UI layout.</source>
          <target>While you can't stack a <ph dataRef="id1" id="ph1" />'s items vertically, placing them against the scroll direction (for example, to the left or right of a vertically scrolling list, or the top or bottom of a horizontally scrolling list) is another option you may want to consider if it works well for your UI layout.</target>
        </segment>
      </unit>
      <unit id="314">
        <segment state="initial">
          <source>UI layout challenges</source>
          <target>UI layout challenges</target>
        </segment>
      </unit>
      <unit id="315">
        <segment state="initial">
          <source>Some UI layouts are more challenging due to the nature of XY focus navigation, and should be evaluated on a case-by-case basis.</source>
          <target>Some UI layouts are more challenging due to the nature of XY focus navigation, and should be evaluated on a case-by-case basis.</target>
        </segment>
      </unit>
      <unit id="316">
        <segment state="initial">
          <source>While there is no single "right" way, and which solution you choose is up to your app's specific needs, there are some techniques that you can employ to make a great TV experience.</source>
          <target>While there is no single "right" way, and which solution you choose is up to your app's specific needs, there are some techniques that you can employ to make a great TV experience.</target>
        </segment>
      </unit>
      <unit id="317">
        <segment state="initial">
          <source>To understand this better, let's look at an imaginary app that illustrates some of these issues and techniques to overcome them.</source>
          <target>To understand this better, let's look at an imaginary app that illustrates some of these issues and techniques to overcome them.</target>
        </segment>
      </unit>
      <unit id="318">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />This fake app is meant to illustrate UI problems and potential solutions to them, and is not intended to show the best user experience for your particular app.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />This fake app is meant to illustrate UI problems and potential solutions to them, and is not intended to show the best user experience for your particular app.</target>
        </segment>
      </unit>
      <unit id="319">
        <segment state="initial">
          <source>The following is an imaginary real estate app which shows a list of houses available for sale, a map, a description of a property, and other information.</source>
          <target>The following is an imaginary real estate app which shows a list of houses available for sale, a map, a description of a property, and other information.</target>
        </segment>
      </unit>
      <unit id="320">
        <segment state="initial">
          <source>This app poses three challenges that you can overcome by using the following techniques:</source>
          <target>This app poses three challenges that you can overcome by using the following techniques:</target>
        </segment>
      </unit>
      <unit id="321">
        <segment state="initial">
          <source>UI rearrange</source>
          <target>UI rearrange</target>
        </segment>
      </unit>
      <unit id="322">
        <segment state="initial">
          <source>Focus engagement</source>
          <target>Focus engagement</target>
        </segment>
      </unit>
      <unit id="323">
        <segment state="initial">
          <source>Mouse mode</source>
          <target>Mouse mode</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source>Fake real estate app</source>
          <target>Fake real estate app</target>
        </segment>
      </unit>
      <unit id="325">
        <segment state="initial">
          <source>Problem: UI elements located after long scrolling list/grid</source>
          <target>Problem: UI elements located after long scrolling list/grid</target>
        </segment>
      </unit>
      <unit id="326">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.listview.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> of properties shown in the following image is a very long scrolling list.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> of properties shown in the following image is a very long scrolling list.</target>
        </segment>
      </unit>
      <unit id="327">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#focus-engagement)</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">engagement</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">not</pc> required on the <ph dataRef="id5" id="ph1" />, when the user navigates to the list, focus will be placed on the first item in the list.</source>
          <target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">engagement</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">not</pc> required on the <ph dataRef="id5" id="ph1" />, when the user navigates to the list, focus will be placed on the first item in the list.</target>
        </segment>
      </unit>
      <unit id="328">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For the user to reach the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Previous</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc> button, they must go through all the items in the list.</source>
          <target>For the user to reach the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Previous</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc> button, they must go through all the items in the list.</target>
        </segment>
      </unit>
      <unit id="329">
        <originalData>
          <data id="id1">&amp;mdash;</data>
          <data id="id2">&amp;mdash;</data>
        </originalData>
        <segment state="initial">
          <source>In cases like this where requiring the user to traverse the entire list is painful<ph dataRef="id1" id="ph1" />that is, when the list is not short enough for this experience to be acceptable<ph dataRef="id2" id="ph2" />you may want to consider other options.</source>
          <target>In cases like this where requiring the user to traverse the entire list is painful<ph dataRef="id1" id="ph1" />that is, when the list is not short enough for this experience to be acceptable<ph dataRef="id2" id="ph2" />you may want to consider other options.</target>
        </segment>
      </unit>
      <unit id="330">
        <segment state="initial">
          <source>Real estate app: list with 50 items takes 51 clicks to reach buttons below</source>
          <target>Real estate app: list with 50 items takes 51 clicks to reach buttons below</target>
        </segment>
      </unit>
      <unit id="331">
        <segment state="initial">
          <source>Solutions</source>
          <target>Solutions</target>
        </segment>
      </unit>
      <unit id="332">
        <segment state="initial">
          <source>UI rearrange</source>
          <target>UI rearrange</target>
        </segment>
      </unit>
      <unit id="333">
        <segment state="initial">
          <source>Unless your initial focus is placed at the bottom of the page, UI elements placed above a long scrolling list are typically more easily accessible than if placed below.</source>
          <target>Unless your initial focus is placed at the bottom of the page, UI elements placed above a long scrolling list are typically more easily accessible than if placed below.</target>
        </segment>
      </unit>
      <unit id="334">
        <segment state="initial">
          <source>If this new layout works for other devices, changing the layout for all device families instead of doing special UI changes just for Xbox One might be a less costly approach.</source>
          <target>If this new layout works for other devices, changing the layout for all device families instead of doing special UI changes just for Xbox One might be a less costly approach.</target>
        </segment>
      </unit>
      <unit id="335">
        <segment state="initial">
          <source>Additionally, placing UI elements against the scrolling direction (that is, horizontally to a vertically scrolling list, or vertically to a horizontally scrolling list) will make for even better accessibility.</source>
          <target>Additionally, placing UI elements against the scrolling direction (that is, horizontally to a vertically scrolling list, or vertically to a horizontally scrolling list) will make for even better accessibility.</target>
        </segment>
      </unit>
      <unit id="336">
        <segment state="initial">
          <source>Real estate app: place buttons above long scrolling list</source>
          <target>Real estate app: place buttons above long scrolling list</target>
        </segment>
      </unit>
      <unit id="337">
        <segment state="initial">
          <source>Focus engagement</source>
          <target>Focus engagement</target>
        </segment>
      </unit>
      <unit id="338">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>When engagement is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">required</pc>, the entire <ph dataRef="id3" id="ph1" /> becomes a single focus target.</source>
          <target>When engagement is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">required</pc>, the entire <ph dataRef="id3" id="ph1" /> becomes a single focus target.</target>
        </segment>
      </unit>
      <unit id="339">
        <segment state="initial">
          <source>The user will be able to bypass the contents of the list to get to the next focusable element.</source>
          <target>The user will be able to bypass the contents of the list to get to the next focusable element.</target>
        </segment>
      </unit>
      <unit id="340">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#focus-engagement)</data>
        </originalData>
        <segment state="initial">
          <source>Read more about what controls support engagement and how to use them in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus engagement</pc>.</source>
          <target>Read more about what controls support engagement and how to use them in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus engagement</pc>.</target>
        </segment>
      </unit>
      <unit id="341">
        <segment state="initial">
          <source>Real estate app: set engagement to required so that it only takes 1 click to reach Previous/Next buttons</source>
          <target>Real estate app: set engagement to required so that it only takes 1 click to reach Previous/Next buttons</target>
        </segment>
      </unit>
      <unit id="342">
        <segment state="initial">
          <source>Problem: ScrollViewer without any focusable elements</source>
          <target>Problem: ScrollViewer without any focusable elements</target>
        </segment>
      </unit>
      <unit id="343">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.scrollviewer.aspx)</data>
          <data id="id3">`ScrollViewer`</data>
        </originalData>
        <segment state="initial">
          <source>Because XY focus navigation relies on navigating to one focusable UI element at a time, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer</pc> that doesn't contain any focusable elements (such as one with only text, as in this example) may cause a scenario where the user isn't able to view all of the content in the <ph dataRef="id3" id="ph1" />.</source>
          <target>Because XY focus navigation relies on navigating to one focusable UI element at a time, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer</pc> that doesn't contain any focusable elements (such as one with only text, as in this example) may cause a scenario where the user isn't able to view all of the content in the <ph dataRef="id3" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="344">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#focus-engagement)</data>
        </originalData>
        <segment state="initial">
          <source>For solutions to this and other related scenarios, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus engagement</pc>.</source>
          <target>For solutions to this and other related scenarios, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus engagement</pc>.</target>
        </segment>
      </unit>
      <unit id="345">
        <segment state="initial">
          <source>Real estate app: ScrollViewer with only text</source>
          <target>Real estate app: ScrollViewer with only text</target>
        </segment>
      </unit>
      <unit id="346">
        <segment state="initial">
          <source>Problem: Free-scrolling UI</source>
          <target>Problem: Free-scrolling UI</target>
        </segment>
      </unit>
      <unit id="347">
        <segment state="initial">
          <source>When your app requires a freely scrolling UI, such as a drawing surface or, in this example, a map, XY focus navigation simply doesn't work.</source>
          <target>When your app requires a freely scrolling UI, such as a drawing surface or, in this example, a map, XY focus navigation simply doesn't work.</target>
        </segment>
      </unit>
      <unit id="348">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#mouse-mode)</data>
        </originalData>
        <segment state="initial">
          <source>In such cases, you can turn on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">mouse mode</pc> to allow the user to navigate freely inside a UI element.</source>
          <target>In such cases, you can turn on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">mouse mode</pc> to allow the user to navigate freely inside a UI element.</target>
        </segment>
      </unit>
      <unit id="349">
        <segment state="initial">
          <source>Map UI element using mouse mode</source>
          <target>Map UI element using mouse mode</target>
        </segment>
      </unit>
      <unit id="350">
        <segment state="initial">
          <source>Mouse mode</source>
          <target>Mouse mode</target>
        </segment>
      </unit>
      <unit id="351">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#xy-focus-navigation-and-interaction)</data>
        </originalData>
        <segment state="initial">
          <source>As described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XY focus navigation and interaction</pc>, on Xbox One the focus is moved by using an XY navigation system, allowing the user to shift the focus from control to control by moving up, down, left, and right.</source>
          <target>As described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XY focus navigation and interaction</pc>, on Xbox One the focus is moved by using an XY navigation system, allowing the user to shift the focus from control to control by moving up, down, left, and right.</target>
        </segment>
      </unit>
      <unit id="352">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.webview.aspx)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.maps.mapcontrol.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>However, some controls, such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebView</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MapControl</pc>, require a mouse-like interaction where users can freely move the pointer inside the boundaries of the control.</source>
          <target>However, some controls, such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebView</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MapControl</pc>, require a mouse-like interaction where users can freely move the pointer inside the boundaries of the control.</target>
        </segment>
      </unit>
      <unit id="353">
        <segment state="initial">
          <source>There are also some apps where it makes sense for the user to be able to move the pointer across the entire page, having an experience with gamepad/remote similar to what users can find on a PC with a mouse.</source>
          <target>There are also some apps where it makes sense for the user to be able to move the pointer across the entire page, having an experience with gamepad/remote similar to what users can find on a PC with a mouse.</target>
        </segment>
      </unit>
      <unit id="354">
        <segment state="initial">
          <source>For these scenarios, you should request a pointer (mouse mode) for the entire page, or on a control inside a page.</source>
          <target>For these scenarios, you should request a pointer (mouse mode) for the entire page, or on a control inside a page.</target>
        </segment>
      </unit>
      <unit id="355">
        <originalData>
          <data id="id1">`WebView`</data>
        </originalData>
        <segment state="initial">
          <source>For example, your app could have a page that has a <ph dataRef="id1" id="ph1" /> control that uses mouse mode only while inside the control, and XY focus navigation everywhere else.</source>
          <target>For example, your app could have a page that has a <ph dataRef="id1" id="ph1" /> control that uses mouse mode only while inside the control, and XY focus navigation everywhere else.</target>
        </segment>
      </unit>
      <unit id="356">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>To request a pointer, you can specify whether you want it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">when a control or page is engaged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">when a page has focus</pc>.</source>
          <target>To request a pointer, you can specify whether you want it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">when a control or page is engaged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">when a page has focus</pc>.</target>
        </segment>
      </unit>
      <unit id="357">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Requesting a pointer when a control gets focus is not supported.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Requesting a pointer when a control gets focus is not supported.</target>
        </segment>
      </unit>
      <unit id="358">
        <segment state="initial">
          <source>The following diagram shows the button mappings for gamepad/remote in mouse mode.</source>
          <target>The following diagram shows the button mappings for gamepad/remote in mouse mode.</target>
        </segment>
      </unit>
      <unit id="359">
        <segment state="initial">
          <source>Button mappings for gamepad/remote in mouse mode</source>
          <target>Button mappings for gamepad/remote in mouse mode</target>
        </segment>
      </unit>
      <unit id="360">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Mouse mode is only supported on Xbox One with gamepad/remote.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Mouse mode is only supported on Xbox One with gamepad/remote.</target>
        </segment>
      </unit>
      <unit id="361">
        <segment state="initial">
          <source>On other device families and input types it is silently ignored.</source>
          <target>On other device families and input types it is silently ignored.</target>
        </segment>
      </unit>
      <unit id="362">
        <originalData>
          <data id="id1">`RequiresPointer`</data>
        </originalData>
        <segment state="initial">
          <source>Use the <ph dataRef="id1" id="ph1" /> property on a control or page to activate mouse mode on it.</source>
          <target>Use the <ph dataRef="id1" id="ph1" /> property on a control or page to activate mouse mode on it.</target>
        </segment>
      </unit>
      <unit id="363">
        <originalData>
          <data id="id1">`Never`</data>
          <data id="id2">`WhenEngaged`</data>
          <data id="id3">`WhenFocused`</data>
        </originalData>
        <segment state="initial">
          <source>has three possible values: <ph dataRef="id1" id="ph1" /> (the default value), <ph dataRef="id2" id="ph2" />, and <ph dataRef="id3" id="ph3" />.</source>
          <target>has three possible values: <ph dataRef="id1" id="ph1" /> (the default value), <ph dataRef="id2" id="ph2" />, and <ph dataRef="id3" id="ph3" />.</target>
        </segment>
      </unit>
      <unit id="364">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;`RequiresPointer`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" /> is a new API and not yet documented.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" /> is a new API and not yet documented.</target>
        </segment>
      </unit>
      <unit id="365">
        <segment state="initial">
          <source>Activating mouse mode on a control</source>
          <target>Activating mouse mode on a control</target>
        </segment>
      </unit>
      <unit id="366">
        <originalData>
          <data id="id1">`RequiresPointer="WhenEngaged"`</data>
        </originalData>
        <segment state="initial">
          <source>When the user engages a control with <ph dataRef="id1" id="ph1" />, mouse mode is activated on the control until the user disengages it.</source>
          <target>When the user engages a control with <ph dataRef="id1" id="ph1" />, mouse mode is activated on the control until the user disengages it.</target>
        </segment>
      </unit>
      <unit id="367">
        <originalData>
          <data id="id1">`MapControl`</data>
        </originalData>
        <segment state="initial">
          <source>The following code snippet demonstrates a simple <ph dataRef="id1" id="ph1" /> that activates mouse mode when engaged:</source>
          <target>The following code snippet demonstrates a simple <ph dataRef="id1" id="ph1" /> that activates mouse mode when engaged:</target>
        </segment>
      </unit>
      <unit id="368">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">`IsEngagementRequired="true"`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />If a control activates mouse mode when engaged, it must also require engagement with <ph dataRef="id4" id="ph2" />; otherwise, mouse mode will never be activated.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />If a control activates mouse mode when engaged, it must also require engagement with <ph dataRef="id4" id="ph2" />; otherwise, mouse mode will never be activated.</target>
        </segment>
      </unit>
      <unit id="369">
        <segment state="initial">
          <source>When a control is in mouse mode, its nested controls will be in mouse mode as well.</source>
          <target>When a control is in mouse mode, its nested controls will be in mouse mode as well.</target>
        </segment>
      </unit>
      <unit id="370">
        <originalData>
          <data id="id1">&amp;mdash;</data>
        </originalData>
        <segment state="initial">
          <source>The requested mode of its children will be ignored<ph dataRef="id1" id="ph1" />it's impossible for a parent to be in mouse mode but a child not to be.</source>
          <target>The requested mode of its children will be ignored<ph dataRef="id1" id="ph1" />it's impossible for a parent to be in mouse mode but a child not to be.</target>
        </segment>
      </unit>
      <unit id="371">
        <segment state="initial">
          <source>Additionally, the requested mode of a control is only inspected when it gets focus, so the mode won't change dynamically while it has focus.</source>
          <target>Additionally, the requested mode of a control is only inspected when it gets focus, so the mode won't change dynamically while it has focus.</target>
        </segment>
      </unit>
      <unit id="372">
        <segment state="initial">
          <source>Activating mouse mode on a page</source>
          <target>Activating mouse mode on a page</target>
        </segment>
      </unit>
      <unit id="373">
        <originalData>
          <data id="id1">`RequiresPointer="WhenFocused"`</data>
        </originalData>
        <segment state="initial">
          <source>When a page has the property <ph dataRef="id1" id="ph1" />, mouse mode will be activated for the whole page when it gets focus.</source>
          <target>When a page has the property <ph dataRef="id1" id="ph1" />, mouse mode will be activated for the whole page when it gets focus.</target>
        </segment>
      </unit>
      <unit id="374">
        <segment state="initial">
          <source>The following code snippet demonstrates giving a page this property:</source>
          <target>The following code snippet demonstrates giving a page this property:</target>
        </segment>
      </unit>
      <unit id="375">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">`WhenFocused`</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.page.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />The <ph dataRef="id4" id="ph2" /> value is only supported on <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Page</pc> objects.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />The <ph dataRef="id4" id="ph2" /> value is only supported on <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Page</pc> objects.</target>
        </segment>
      </unit>
      <unit id="376">
        <segment state="initial">
          <source>If you try to set this value on a control, an exception will be thrown.</source>
          <target>If you try to set this value on a control, an exception will be thrown.</target>
        </segment>
      </unit>
      <unit id="377">
        <segment state="initial">
          <source>Focus visual</source>
          <target>Focus visual</target>
        </segment>
      </unit>
      <unit id="378">
        <segment state="initial">
          <source>The focus visual is the border around the UI element that currently has focus.</source>
          <target>The focus visual is the border around the UI element that currently has focus.</target>
        </segment>
      </unit>
      <unit id="379">
        <segment state="initial">
          <source>This helps orient the user so that they can easily navigate your UI without getting lost.</source>
          <target>This helps orient the user so that they can easily navigate your UI without getting lost.</target>
        </segment>
      </unit>
      <unit id="380">
        <segment state="initial">
          <source>With a visual update and numerous customization options added to focus visual, developers can trust that a single focus visual will work well on PCs and Xbox One, as well as on any other Windows 10 devices that support keyboard and/or gamepad/remote.</source>
          <target>With a visual update and numerous customization options added to focus visual, developers can trust that a single focus visual will work well on PCs and Xbox One, as well as on any other Windows 10 devices that support keyboard and/or gamepad/remote.</target>
        </segment>
      </unit>
      <unit id="381">
        <segment state="initial">
          <source>While the same focus visual can be used across different platforms, the context in which the user encounters it is slightly different for the 10-foot experience.</source>
          <target>While the same focus visual can be used across different platforms, the context in which the user encounters it is slightly different for the 10-foot experience.</target>
        </segment>
      </unit>
      <unit id="382">
        <segment state="initial">
          <source>You should assume that the user is not paying full attention to the entire TV screen, and therefore it is important that the currently focused element is clearly visible to the user at all times to avoid the frustration of searching for the visual.</source>
          <target>You should assume that the user is not paying full attention to the entire TV screen, and therefore it is important that the currently focused element is clearly visible to the user at all times to avoid the frustration of searching for the visual.</target>
        </segment>
      </unit>
      <unit id="383">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>It is also important to keep in mind that the focus visual is displayed by default when using a gamepad or remote control, but <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> a keyboard.</source>
          <target>It is also important to keep in mind that the focus visual is displayed by default when using a gamepad or remote control, but <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> a keyboard.</target>
        </segment>
      </unit>
      <unit id="384">
        <segment state="initial">
          <source>Thus, even if you don't implement it, it will appear when you run your app on Xbox One.</source>
          <target>Thus, even if you don't implement it, it will appear when you run your app on Xbox One.</target>
        </segment>
      </unit>
      <unit id="385">
        <segment state="initial">
          <source>Initial focus visual placement</source>
          <target>Initial focus visual placement</target>
        </segment>
      </unit>
      <unit id="386">
        <segment state="initial">
          <source>When launching an app or navigating to a page, place the focus on a UI element that makes sense as the first element on which the user would take action.</source>
          <target>When launching an app or navigating to a page, place the focus on a UI element that makes sense as the first element on which the user would take action.</target>
        </segment>
      </unit>
      <unit id="387">
        <segment state="initial">
          <source>For example, a photo app may place focus on the first item in the gallery, and a music app navigated to a detailed view of a song might place focus on the play button for ease of playing music.</source>
          <target>For example, a photo app may place focus on the first item in the gallery, and a music app navigated to a detailed view of a song might place focus on the play button for ease of playing music.</target>
        </segment>
      </unit>
      <unit id="388">
        <segment state="initial">
          <source>Try to put initial focus in the top left region of your app (or top right for a right-to-left flow).</source>
          <target>Try to put initial focus in the top left region of your app (or top right for a right-to-left flow).</target>
        </segment>
      </unit>
      <unit id="389">
        <segment state="initial">
          <source>Most users tend to focus on that corner first because that's where app content flow generally begins.</source>
          <target>Most users tend to focus on that corner first because that's where app content flow generally begins.</target>
        </segment>
      </unit>
      <unit id="390">
        <segment state="initial">
          <source>Making focus clearly visible</source>
          <target>Making focus clearly visible</target>
        </segment>
      </unit>
      <unit id="391">
        <segment state="initial">
          <source>One focus visual should always be visible on the screen so that the user can pick up where they left off without searching for the focus.</source>
          <target>One focus visual should always be visible on the screen so that the user can pick up where they left off without searching for the focus.</target>
        </segment>
      </unit>
      <unit id="392">
        <originalData>
          <data id="id1">&amp;mdash;</data>
        </originalData>
        <segment state="initial">
          <source>Similarly, there should be a focusable item onscreen at all times<ph dataRef="id1" id="ph1" />for example, don't use pop-ups with only text and no focusable elements.</source>
          <target>Similarly, there should be a focusable item onscreen at all times<ph dataRef="id1" id="ph1" />for example, don't use pop-ups with only text and no focusable elements.</target>
        </segment>
      </unit>
      <unit id="393">
        <segment state="initial">
          <source>Light dismiss overlay</source>
          <target>Light dismiss overlay</target>
        </segment>
      </unit>
      <unit id="394">
        <segment state="initial">
          <source>To call the user's attention to the UI elements that the user is currently manipulating with the game controller or remote control, the UWP automatically adds a "smoke" layer that covers areas outside of the popup UI when the app is running on Xbox One.</source>
          <target>To call the user's attention to the UI elements that the user is currently manipulating with the game controller or remote control, the UWP automatically adds a "smoke" layer that covers areas outside of the popup UI when the app is running on Xbox One.</target>
        </segment>
      </unit>
      <unit id="395">
        <segment state="initial">
          <source>This requires no extra work, but is something to keep in mind when designing your UI.</source>
          <target>This requires no extra work, but is something to keep in mind when designing your UI.</target>
        </segment>
      </unit>
      <unit id="396">
        <segment state="initial">
          <source>Focus engagement</source>
          <target>Focus engagement</target>
        </segment>
      </unit>
      <unit id="397">
        <segment state="initial">
          <source>Focus engagement is intended to make it easier to use a gamepad or remote to interact with an app.</source>
          <target>Focus engagement is intended to make it easier to use a gamepad or remote to interact with an app.</target>
        </segment>
      </unit>
      <unit id="398">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Setting focus engagement does not impact keyboard or other input devices.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Setting focus engagement does not impact keyboard or other input devices.</target>
        </segment>
      </unit>
      <unit id="399">
        <originalData>
          <data id="id1">`IsFocusEngagementEnabled`</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.frameworkelement.aspx)</data>
          <data id="id4">`True`</data>
        </originalData>
        <segment state="initial">
          <source>When the property <ph dataRef="id1" id="ph1" /> on a <pc dataRefEnd="id3" dataRefStart="id2" id="p1">FrameworkElement</pc> object is set to <ph dataRef="id4" id="ph2" />, it marks the control as requiring focus engagement.</source>
          <target>When the property <ph dataRef="id1" id="ph1" /> on a <pc dataRefEnd="id3" dataRefStart="id2" id="p1">FrameworkElement</pc> object is set to <ph dataRef="id4" id="ph2" />, it marks the control as requiring focus engagement.</target>
        </segment>
      </unit>
      <unit id="400">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This means that the user must press the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">A/Select</pc> button to "engage" the control and interact with it.</source>
          <target>This means that the user must press the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">A/Select</pc> button to "engage" the control and interact with it.</target>
        </segment>
      </unit>
      <unit id="401">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When they are finished, they can press the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">B/Back</pc> button to disengage the control and navigate out of it.</source>
          <target>When they are finished, they can press the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">B/Back</pc> button to disengage the control and navigate out of it.</target>
        </segment>
      </unit>
      <unit id="402">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;`IsFocusEngagementEnabled`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" /> is a new API and not yet documented.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" /> is a new API and not yet documented.</target>
        </segment>
      </unit>
      <unit id="403">
        <segment state="initial">
          <source>Focus trapping</source>
          <target>Focus trapping</target>
        </segment>
      </unit>
      <unit id="404">
        <segment state="initial">
          <source>Focus trapping is what happens when a user attempts to navigate an app's UI but becomes "trapped" within a control, making it difficult or even impossible to move outside of that control.</source>
          <target>Focus trapping is what happens when a user attempts to navigate an app's UI but becomes "trapped" within a control, making it difficult or even impossible to move outside of that control.</target>
        </segment>
      </unit>
      <unit id="405">
        <segment state="initial">
          <source>The following example shows UI that creates focus trapping.</source>
          <target>The following example shows UI that creates focus trapping.</target>
        </segment>
      </unit>
      <unit id="406">
        <segment state="initial">
          <source>Buttons to the left and right of a horizontal slider</source>
          <target>Buttons to the left and right of a horizontal slider</target>
        </segment>
      </unit>
      <unit id="407">
        <segment state="initial">
          <source>If the user wants to navigate from the left button to the right button, it would be logical to assume that all they'd have to do is press right on the D-pad/left stick twice.</source>
          <target>If the user wants to navigate from the left button to the right button, it would be logical to assume that all they'd have to do is press right on the D-pad/left stick twice.</target>
        </segment>
      </unit>
      <unit id="408">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.slider.aspx)</data>
          <data id="id3">`Slider`</data>
          <data id="id4">`Slider`</data>
        </originalData>
        <segment state="initial">
          <source>However, if the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Slider</pc> doesn't require engagement, the following behavior would occur: when the user presses right the first time, focus would shift to the <ph dataRef="id3" id="ph1" />, and when they press right again, the <ph dataRef="id4" id="ph2" />'s handle would move to the right.</source>
          <target>However, if the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Slider</pc> doesn't require engagement, the following behavior would occur: when the user presses right the first time, focus would shift to the <ph dataRef="id3" id="ph1" />, and when they press right again, the <ph dataRef="id4" id="ph2" />'s handle would move to the right.</target>
        </segment>
      </unit>
      <unit id="409">
        <segment state="initial">
          <source>The user would keep moving the handle to the right and wouldn't be able to get to the button.</source>
          <target>The user would keep moving the handle to the right and wouldn't be able to get to the button.</target>
        </segment>
      </unit>
      <unit id="410">
        <segment state="initial">
          <source>There are several approaches to getting around this issue.</source>
          <target>There are several approaches to getting around this issue.</target>
        </segment>
      </unit>
      <unit id="411">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#xy-focus-navigation-and-interaction)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>One is to design a different layout, similar to the real estate app example in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XY focus navigation and interaction</pc> where we relocated the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Previous</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Next</pc> buttons above the <ph dataRef="id7" id="ph1" />.</source>
          <target>One is to design a different layout, similar to the real estate app example in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XY focus navigation and interaction</pc> where we relocated the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Previous</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Next</pc> buttons above the <ph dataRef="id7" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="412">
        <segment state="initial">
          <source>Stacking the controls vertically instead of horizontally as in the following image would solve the problem.</source>
          <target>Stacking the controls vertically instead of horizontally as in the following image would solve the problem.</target>
        </segment>
      </unit>
      <unit id="413">
        <segment state="initial">
          <source>Buttons above and below a horizontal slider</source>
          <target>Buttons above and below a horizontal slider</target>
        </segment>
      </unit>
      <unit id="414">
        <originalData>
          <data id="id1">`Slider`</data>
          <data id="id2">`Slider`</data>
        </originalData>
        <segment state="initial">
          <source>Now the user can navigate to each of the controls by pressing up and down on the D-pad/left stick, and when the <ph dataRef="id1" id="ph1" /> has focus, they can press left and right to move the <ph dataRef="id2" id="ph2" /> handle, as expected.</source>
          <target>Now the user can navigate to each of the controls by pressing up and down on the D-pad/left stick, and when the <ph dataRef="id1" id="ph1" /> has focus, they can press left and right to move the <ph dataRef="id2" id="ph2" /> handle, as expected.</target>
        </segment>
      </unit>
      <unit id="415">
        <originalData>
          <data id="id1">`Slider`</data>
        </originalData>
        <segment state="initial">
          <source>Another approach to solving this problem is to require engagement on the <ph dataRef="id1" id="ph1" />.</source>
          <target>Another approach to solving this problem is to require engagement on the <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="416">
        <originalData>
          <data id="id1">`IsFocusEngagementEnabled="True"`</data>
        </originalData>
        <segment state="initial">
          <source>If you set <ph dataRef="id1" id="ph1" />, this will result in the following behavior.</source>
          <target>If you set <ph dataRef="id1" id="ph1" />, this will result in the following behavior.</target>
        </segment>
      </unit>
      <unit id="417">
        <segment state="initial">
          <source>Requiring focus engagement on slider so user can navigate to button on the right</source>
          <target>Requiring focus engagement on slider so user can navigate to button on the right</target>
        </segment>
      </unit>
      <unit id="418">
        <originalData>
          <data id="id1">`Slider`</data>
        </originalData>
        <segment state="initial">
          <source>When the <ph dataRef="id1" id="ph1" /> requires focus engagement, the user can get to the button on the right simply by pressing right on the D-pad/left stick twice.</source>
          <target>When the <ph dataRef="id1" id="ph1" /> requires focus engagement, the user can get to the button on the right simply by pressing right on the D-pad/left stick twice.</target>
        </segment>
      </unit>
      <unit id="419">
        <segment state="initial">
          <source>This solution is great because it requires no UI adjustment and produces the expected behavior.</source>
          <target>This solution is great because it requires no UI adjustment and produces the expected behavior.</target>
        </segment>
      </unit>
      <unit id="420">
        <segment state="initial">
          <source>Items controls</source>
          <target>Items controls</target>
        </segment>
      </unit>
      <unit id="421">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.slider.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>Aside from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Slider</pc> control, there are other controls which you may want to require engagement, such as:</source>
          <target>Aside from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Slider</pc> control, there are other controls which you may want to require engagement, such as:</target>
        </segment>
      </unit>
      <unit id="422">
        <segment state="initial">
          <source>ListBox</source>
          <target>ListBox</target>
        </segment>
      </unit>
      <unit id="423">
        <segment state="initial">
          <source>ListView</source>
          <target>ListView</target>
        </segment>
      </unit>
      <unit id="424">
        <segment state="initial">
          <source>GridView</source>
          <target>GridView</target>
        </segment>
      </unit>
      <unit id="425">
        <segment state="initial">
          <source>FlipView</source>
          <target>FlipView</target>
        </segment>
      </unit>
      <unit id="426">
        <originalData>
          <data id="id1">`Slider`</data>
        </originalData>
        <segment state="initial">
          <source>Unlike the <ph dataRef="id1" id="ph1" /> control, these controls don't trap focus within themselves; however, they can cause usability issues when they contain large amounts of data.</source>
          <target>Unlike the <ph dataRef="id1" id="ph1" /> control, these controls don't trap focus within themselves; however, they can cause usability issues when they contain large amounts of data.</target>
        </segment>
      </unit>
      <unit id="427">
        <originalData>
          <data id="id1">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>The following is an example of a <ph dataRef="id1" id="ph1" /> that contains a large amount of data.</source>
          <target>The following is an example of a <ph dataRef="id1" id="ph1" /> that contains a large amount of data.</target>
        </segment>
      </unit>
      <unit id="428">
        <segment state="initial">
          <source>ListView with large amount of data and buttons above and below</source>
          <target>ListView with large amount of data and buttons above and below</target>
        </segment>
      </unit>
      <unit id="429">
        <originalData>
          <data id="id1">`Slider`</data>
        </originalData>
        <segment state="initial">
          <source>Similar to the <ph dataRef="id1" id="ph1" /> example, let's try to navigate from the button at the top to the button at the bottom with a gamepad/remote.</source>
          <target>Similar to the <ph dataRef="id1" id="ph1" /> example, let's try to navigate from the button at the top to the button at the bottom with a gamepad/remote.</target>
        </segment>
      </unit>
      <unit id="430">
        <originalData>
          <data id="id1">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>Starting with focus on the top button, pressing down on the D-pad/stick will place the focus on the first item in the <ph dataRef="id1" id="ph1" /> ("Item 1").</source>
          <target>Starting with focus on the top button, pressing down on the D-pad/stick will place the focus on the first item in the <ph dataRef="id1" id="ph1" /> ("Item 1").</target>
        </segment>
      </unit>
      <unit id="431">
        <segment state="initial">
          <source>When the user presses down again, the next item in the list gets focus, not the button on the bottom.</source>
          <target>When the user presses down again, the next item in the list gets focus, not the button on the bottom.</target>
        </segment>
      </unit>
      <unit id="432">
        <originalData>
          <data id="id1">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>To get to the button, the user must navigate through every item in the <ph dataRef="id1" id="ph1" /> first.</source>
          <target>To get to the button, the user must navigate through every item in the <ph dataRef="id1" id="ph1" /> first.</target>
        </segment>
      </unit>
      <unit id="433">
        <originalData>
          <data id="id1">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>If the <ph dataRef="id1" id="ph1" /> contains a large amount of data, this could be inconvenient and not an optimal user experience.</source>
          <target>If the <ph dataRef="id1" id="ph1" /> contains a large amount of data, this could be inconvenient and not an optimal user experience.</target>
        </segment>
      </unit>
      <unit id="434">
        <originalData>
          <data id="id1">`IsFocusEngagementEnabled="True"`</data>
          <data id="id2">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>To solve this problem, set the property <ph dataRef="id1" id="ph1" /> on the <ph dataRef="id2" id="ph2" /> to require engagement on it.</source>
          <target>To solve this problem, set the property <ph dataRef="id1" id="ph1" /> on the <ph dataRef="id2" id="ph2" /> to require engagement on it.</target>
        </segment>
      </unit>
      <unit id="435">
        <originalData>
          <data id="id1">`ListView`</data>
        </originalData>
        <segment state="initial">
          <source>This will allow the user to quickly skip over the <ph dataRef="id1" id="ph1" /> by simply pressing down.</source>
          <target>This will allow the user to quickly skip over the <ph dataRef="id1" id="ph1" /> by simply pressing down.</target>
        </segment>
      </unit>
      <unit id="436">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>However, they will not be able to scroll through the list or choose an item from it unless they engage it by pressing the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">A/Select</pc> button when it has focus, and then pressing the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">B/Back</pc> button to disengage.</source>
          <target>However, they will not be able to scroll through the list or choose an item from it unless they engage it by pressing the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">A/Select</pc> button when it has focus, and then pressing the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">B/Back</pc> button to disengage.</target>
        </segment>
      </unit>
      <unit id="437">
        <segment state="initial">
          <source>ListView with engagement required</source>
          <target>ListView with engagement required</target>
        </segment>
      </unit>
      <unit id="438">
        <segment state="initial">
          <source>ScrollViewer</source>
          <target>ScrollViewer</target>
        </segment>
      </unit>
      <unit id="439">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.scrollviewer.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>Slightly different from these controls is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer</pc>, which has its own quirks to consider.</source>
          <target>Slightly different from these controls is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer</pc>, which has its own quirks to consider.</target>
        </segment>
      </unit>
      <unit id="440">
        <originalData>
          <data id="id1">`ScrollViewer`</data>
          <data id="id2">`ScrollViewer`</data>
        </originalData>
        <segment state="initial">
          <source>If you have a <ph dataRef="id1" id="ph1" /> with focusable content, by default navigating to the <ph dataRef="id2" id="ph2" /> will allow you to move through its focusable elements.</source>
          <target>If you have a <ph dataRef="id1" id="ph1" /> with focusable content, by default navigating to the <ph dataRef="id2" id="ph2" /> will allow you to move through its focusable elements.</target>
        </segment>
      </unit>
      <unit id="441">
        <originalData>
          <data id="id1">`ListView`</data>
          <data id="id2">`ScrollViewer`</data>
        </originalData>
        <segment state="initial">
          <source>Like in a <ph dataRef="id1" id="ph1" />, you must scroll through each item to navigate outside of the <ph dataRef="id2" id="ph2" />.</source>
          <target>Like in a <ph dataRef="id1" id="ph1" />, you must scroll through each item to navigate outside of the <ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="442">
        <originalData>
          <data id="id1">`ScrollViewer`</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;mdash;</data>
          <data id="id5">&amp;mdash;</data>
          <data id="id6">`IsFocusEngagementEnabled="True"`</data>
          <data id="id7">`ScrollViewer`</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
        </originalData>
        <segment state="initial">
          <source>If the <ph dataRef="id1" id="ph1" /> has <pc dataRefEnd="id3" dataRefStart="id2" id="p1">no</pc> focusable content<ph dataRef="id4" id="ph2" />for example, if it only contains text<ph dataRef="id5" id="ph3" />you can set <ph dataRef="id6" id="ph4" /> so the user can engage the <ph dataRef="id7" id="ph5" /> by using the <pc dataRefEnd="id9" dataRefStart="id8" id="p2">A/Select</pc> button.</source>
          <target>If the <ph dataRef="id1" id="ph1" /> has <pc dataRefEnd="id3" dataRefStart="id2" id="p1">no</pc> focusable content<ph dataRef="id4" id="ph2" />for example, if it only contains text<ph dataRef="id5" id="ph3" />you can set <ph dataRef="id6" id="ph4" /> so the user can engage the <ph dataRef="id7" id="ph5" /> by using the <pc dataRefEnd="id9" dataRefStart="id8" id="p2">A/Select</pc> button.</target>
        </segment>
      </unit>
      <unit id="443">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>After they have engaged, they can scroll through the text by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">D-pad/left stick</pc>, and then press the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">B/Back</pc> button to disengage when they're finished.</source>
          <target>After they have engaged, they can scroll through the text by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">D-pad/left stick</pc>, and then press the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">B/Back</pc> button to disengage when they're finished.</target>
        </segment>
      </unit>
      <unit id="444">
        <originalData>
          <data id="id1">`IsTabStop="True"`</data>
          <data id="id2">`ScrollViewer`</data>
          <data id="id3">&amp;mdash;</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">`ScrollViewer`</data>
        </originalData>
        <segment state="initial">
          <source>Another approach would be to set <ph dataRef="id1" id="ph1" /> on the <ph dataRef="id2" id="ph2" /> so that the user doesn't have to engage the control<ph dataRef="id3" id="ph3" />they can simply place focus on it and then scroll by using the <pc dataRefEnd="id5" dataRefStart="id4" id="p1">D-pad/left stick</pc> when there are no focusable elements within the <ph dataRef="id6" id="ph4" />.</source>
          <target>Another approach would be to set <ph dataRef="id1" id="ph1" /> on the <ph dataRef="id2" id="ph2" /> so that the user doesn't have to engage the control<ph dataRef="id3" id="ph3" />they can simply place focus on it and then scroll by using the <pc dataRefEnd="id5" dataRefStart="id4" id="p1">D-pad/left stick</pc> when there are no focusable elements within the <ph dataRef="id6" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="445">
        <segment state="initial">
          <source>Focus engagement defaults</source>
          <target>Focus engagement defaults</target>
        </segment>
      </unit>
      <unit id="446">
        <segment state="initial">
          <source>Some controls cause focus trapping commonly enough to warrant their default settings to require focus engagement, while others have focus engagement turned off by default but can benefit from turning it on.</source>
          <target>Some controls cause focus trapping commonly enough to warrant their default settings to require focus engagement, while others have focus engagement turned off by default but can benefit from turning it on.</target>
        </segment>
      </unit>
      <unit id="447">
        <segment state="initial">
          <source>The following table lists these controls and their default focus engagement behaviors.</source>
          <target>The following table lists these controls and their default focus engagement behaviors.</target>
        </segment>
      </unit>
      <unit id="448">
        <segment state="initial">
          <source>Control</source>
          <target>Control</target>
        </segment>
      </unit>
      <unit id="449">
        <segment state="initial">
          <source>Focus engagement default</source>
          <target>Focus engagement default</target>
        </segment>
      </unit>
      <unit id="450">
        <segment state="initial">
          <source>CalendarDatePicker</source>
          <target>CalendarDatePicker</target>
        </segment>
      </unit>
      <unit id="451">
        <segment state="initial">
          <source>On</source>
          <target>On</target>
        </segment>
      </unit>
      <unit id="452">
        <segment state="initial">
          <source>FlipView</source>
          <target>FlipView</target>
        </segment>
      </unit>
      <unit id="453">
        <segment state="initial">
          <source>Off</source>
          <target>Off</target>
        </segment>
      </unit>
      <unit id="454">
        <segment state="initial">
          <source>GridView</source>
          <target>GridView</target>
        </segment>
      </unit>
      <unit id="455">
        <segment state="initial">
          <source>Off</source>
          <target>Off</target>
        </segment>
      </unit>
      <unit id="456">
        <segment state="initial">
          <source>ListBox</source>
          <target>ListBox</target>
        </segment>
      </unit>
      <unit id="457">
        <segment state="initial">
          <source>Off</source>
          <target>Off</target>
        </segment>
      </unit>
      <unit id="458">
        <segment state="initial">
          <source>ListView</source>
          <target>ListView</target>
        </segment>
      </unit>
      <unit id="459">
        <segment state="initial">
          <source>Off</source>
          <target>Off</target>
        </segment>
      </unit>
      <unit id="460">
        <segment state="initial">
          <source>ScrollViewer</source>
          <target>ScrollViewer</target>
        </segment>
      </unit>
      <unit id="461">
        <segment state="initial">
          <source>Off</source>
          <target>Off</target>
        </segment>
      </unit>
      <unit id="462">
        <segment state="initial">
          <source>SemanticZoom</source>
          <target>SemanticZoom</target>
        </segment>
      </unit>
      <unit id="463">
        <segment state="initial">
          <source>Off</source>
          <target>Off</target>
        </segment>
      </unit>
      <unit id="464">
        <segment state="initial">
          <source>Slider</source>
          <target>Slider</target>
        </segment>
      </unit>
      <unit id="465">
        <segment state="initial">
          <source>On</source>
          <target>On</target>
        </segment>
      </unit>
      <unit id="466">
        <originalData>
          <data id="id1">`IsFocusEngagementEnabled="True"`</data>
        </originalData>
        <segment state="initial">
          <source>All other UWP controls will result in no behavioral or visual changes when <ph dataRef="id1" id="ph1" />.</source>
          <target>All other UWP controls will result in no behavioral or visual changes when <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="467">
        <segment state="initial">
          <source>UI element sizing</source>
          <target>UI element sizing</target>
        </segment>
      </unit>
      <unit id="468">
        <segment state="initial">
          <source>Because the user of an app in the 10-foot environment is using a remote control or gamepad and is sitting several feet away from the screen, there are some UI considerations that need to be factored into your design.</source>
          <target>Because the user of an app in the 10-foot environment is using a remote control or gamepad and is sitting several feet away from the screen, there are some UI considerations that need to be factored into your design.</target>
        </segment>
      </unit>
      <unit id="469">
        <segment state="initial">
          <source>Make sure that the UI has an appropriate content density and is not too cluttered so that the user can easily navigate and select elements.</source>
          <target>Make sure that the UI has an appropriate content density and is not too cluttered so that the user can easily navigate and select elements.</target>
        </segment>
      </unit>
      <unit id="470">
        <segment state="initial">
          <source>Remember: simplicity is key.</source>
          <target>Remember: simplicity is key.</target>
        </segment>
      </unit>
      <unit id="471">
        <segment state="initial">
          <source>Scale factor and adaptive layout</source>
          <target>Scale factor and adaptive layout</target>
        </segment>
      </unit>
      <unit id="472">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Scale factor</pc> helps with ensuring that UI elements are displayed with the right sizing for the device on which the app is running.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Scale factor</pc> helps with ensuring that UI elements are displayed with the right sizing for the device on which the app is running.</target>
        </segment>
      </unit>
      <unit id="473">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On desktop, this setting can be found in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Settings &gt; System &gt; Display</pc> as a sliding value.</source>
          <target>On desktop, this setting can be found in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Settings &gt; System &gt; Display</pc> as a sliding value.</target>
        </segment>
      </unit>
      <unit id="474">
        <segment state="initial">
          <source>This same setting exists on phone as well if the device supports it.</source>
          <target>This same setting exists on phone as well if the device supports it.</target>
        </segment>
      </unit>
      <unit id="475">
        <segment state="initial">
          <source>Change the size of text, apps, and other items</source>
          <target>Change the size of text, apps, and other items</target>
        </segment>
      </unit>
      <unit id="476">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On Xbox One, there is no such system setting; however, for UWP UI elements to be sized appropriately for TV, they are scaled at a default of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">200%</pc>.</source>
          <target>On Xbox One, there is no such system setting; however, for UWP UI elements to be sized appropriately for TV, they are scaled at a default of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">200%</pc>.</target>
        </segment>
      </unit>
      <unit id="477">
        <segment state="initial">
          <source>As long as UI elements are appropriately sized for other devices, they will be appropriately sized for TV.</source>
          <target>As long as UI elements are appropriately sized for other devices, they will be appropriately sized for TV.</target>
        </segment>
      </unit>
      <unit id="478">
        <segment state="initial">
          <source>Xbox One renders your app at 1080p (1920 x 1080 pixels).</source>
          <target>Xbox One renders your app at 1080p (1920 x 1080 pixels).</target>
        </segment>
      </unit>
      <unit id="479">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/windows/uwp/layout/screen-sizes-and-breakpoints-for-responsive-design)</data>
        </originalData>
        <segment state="initial">
          <source>Therefore, when bringing an app from other devices such as PC, ensure that the UI looks great at 960 x 540 px at 100% scale utilizing <pc dataRefEnd="id2" dataRefStart="id1" id="p1">adaptive techniques</pc>.</source>
          <target>Therefore, when bringing an app from other devices such as PC, ensure that the UI looks great at 960 x 540 px at 100% scale utilizing <pc dataRefEnd="id2" dataRefStart="id1" id="p1">adaptive techniques</pc>.</target>
        </segment>
      </unit>
      <unit id="480">
        <segment state="initial">
          <source>Designing for Xbox is a little different from designing for PC because you only need to worry about one resolution, 1920 x 1080.</source>
          <target>Designing for Xbox is a little different from designing for PC because you only need to worry about one resolution, 1920 x 1080.</target>
        </segment>
      </unit>
      <unit id="481">
        <originalData>
          <data id="id1">&amp;mdash;</data>
        </originalData>
        <segment state="initial">
          <source>It doesn't matter if the user has a TV that has better resolution<ph dataRef="id1" id="ph1" />UWP apps will always scale to 1080p.</source>
          <target>It doesn't matter if the user has a TV that has better resolution<ph dataRef="id1" id="ph1" />UWP apps will always scale to 1080p.</target>
        </segment>
      </unit>
      <unit id="482">
        <segment state="initial">
          <source>Correct asset sizes from the 200% set will also be pulled in for your app when running on Xbox One, regardless of TV resolution.</source>
          <target>Correct asset sizes from the 200% set will also be pulled in for your app when running on Xbox One, regardless of TV resolution.</target>
        </segment>
      </unit>
      <unit id="483">
        <segment state="initial">
          <source>Content density</source>
          <target>Content density</target>
        </segment>
      </unit>
      <unit id="484">
        <segment state="initial">
          <source>When designing your app, remember that the user will be viewing the UI from a distance and interacting with it by using a remote or game controller, which takes more time to navigate than using mouse or touch input.</source>
          <target>When designing your app, remember that the user will be viewing the UI from a distance and interacting with it by using a remote or game controller, which takes more time to navigate than using mouse or touch input.</target>
        </segment>
      </unit>
      <unit id="485">
        <segment state="initial">
          <source>Sizes of UI controls</source>
          <target>Sizes of UI controls</target>
        </segment>
      </unit>
      <unit id="486">
        <segment state="initial">
          <source>Interactive UI elements should be sized at a minimum height of 32 epx (effective pixels).</source>
          <target>Interactive UI elements should be sized at a minimum height of 32 epx (effective pixels).</target>
        </segment>
      </unit>
      <unit id="487">
        <segment state="initial">
          <source>This is the default for common UWP controls, and when used at 200% scale, it ensures that UI elements are visible from a distance and helps reduce content density.</source>
          <target>This is the default for common UWP controls, and when used at 200% scale, it ensures that UI elements are visible from a distance and helps reduce content density.</target>
        </segment>
      </unit>
      <unit id="488">
        <segment state="initial">
          <source>UWP button at 100% and 200% scale</source>
          <target>UWP button at 100% and 200% scale</target>
        </segment>
      </unit>
      <unit id="489">
        <segment state="initial">
          <source>Number of clicks</source>
          <target>Number of clicks</target>
        </segment>
      </unit>
      <unit id="490">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When the user is navigating from one edge of the TV screen to the other, it should take no more than <pc dataRefEnd="id2" dataRefStart="id1" id="p1">six clicks</pc> to simplify your UI.</source>
          <target>When the user is navigating from one edge of the TV screen to the other, it should take no more than <pc dataRefEnd="id2" dataRefStart="id1" id="p1">six clicks</pc> to simplify your UI.</target>
        </segment>
      </unit>
      <unit id="491">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Again, the principle of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">simplicity</pc> applies here.</source>
          <target>Again, the principle of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">simplicity</pc> applies here.</target>
        </segment>
      </unit>
      <unit id="492">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#path-of-least-clicks)</data>
        </originalData>
        <segment state="initial">
          <source>For more details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path of least clicks</pc>.</source>
          <target>For more details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path of least clicks</pc>.</target>
        </segment>
      </unit>
      <unit id="493">
        <segment state="initial">
          <source>6 icons across</source>
          <target>6 icons across</target>
        </segment>
      </unit>
      <unit id="494">
        <segment state="initial">
          <source>Text sizes</source>
          <target>Text sizes</target>
        </segment>
      </unit>
      <unit id="495">
        <segment state="initial">
          <source>To make your UI visible from a distance, use the following rules of thumb:</source>
          <target>To make your UI visible from a distance, use the following rules of thumb:</target>
        </segment>
      </unit>
      <unit id="496">
        <segment state="initial">
          <source>Main text and reading content: 15 epx minimum</source>
          <target>Main text and reading content: 15 epx minimum</target>
        </segment>
      </unit>
      <unit id="497">
        <segment state="initial">
          <source>Non-critical text and supplemental content: 12 epx minimum</source>
          <target>Non-critical text and supplemental content: 12 epx minimum</target>
        </segment>
      </unit>
      <unit id="498">
        <segment state="initial">
          <source>When using larger text in your UI, pick a size that does not limit screen real estate too much, taking up space that other content could potentially fill.</source>
          <target>When using larger text in your UI, pick a size that does not limit screen real estate too much, taking up space that other content could potentially fill.</target>
        </segment>
      </unit>
      <unit id="499">
        <segment state="initial">
          <source>Opting out of scale factor</source>
          <target>Opting out of scale factor</target>
        </segment>
      </unit>
      <unit id="500">
        <segment state="initial">
          <source>We recommend that your app take advantage of scale factor support, which will help it run appropriately on all devices by scaling for each device type.</source>
          <target>We recommend that your app take advantage of scale factor support, which will help it run appropriately on all devices by scaling for each device type.</target>
        </segment>
      </unit>
      <unit id="501">
        <segment state="initial">
          <source>However, it is possible to opt out of this behavior and design all of your UI at 100% scale.</source>
          <target>However, it is possible to opt out of this behavior and design all of your UI at 100% scale.</target>
        </segment>
      </unit>
      <unit id="502">
        <segment state="initial">
          <source>Note that you cannot change the scale factor to anything other than 100%.</source>
          <target>Note that you cannot change the scale factor to anything other than 100%.</target>
        </segment>
      </unit>
      <unit id="503">
        <segment state="initial">
          <source>You can opt out of scale factor by using the following code snippet:</source>
          <target>You can opt out of scale factor by using the following code snippet:</target>
        </segment>
      </unit>
      <unit id="504">
        <segment state="initial">
          <source>will inform you whether you successfully opted out.</source>
          <target>will inform you whether you successfully opted out.</target>
        </segment>
      </unit>
      <unit id="505">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Please be sure to calculate the appropriate sizes of UI elements by doubling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">effective</pc> pixel values mentioned in this topic to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">actual</pc> pixel values.</source>
          <target>Please be sure to calculate the appropriate sizes of UI elements by doubling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">effective</pc> pixel values mentioned in this topic to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">actual</pc> pixel values.</target>
        </segment>
      </unit>
      <unit id="506">
        <segment state="initial">
          <source>TV-safe area</source>
          <target>TV-safe area</target>
        </segment>
      </unit>
      <unit id="507">
        <segment state="initial">
          <source>Not all TVs display content all the way to the edges of the screen due to historical and technological reasons.</source>
          <target>Not all TVs display content all the way to the edges of the screen due to historical and technological reasons.</target>
        </segment>
      </unit>
      <unit id="508">
        <segment state="initial">
          <source>By default, the UWP will avoid displaying any UI content in TV-unsafe areas and instead will only draw the page background.</source>
          <target>By default, the UWP will avoid displaying any UI content in TV-unsafe areas and instead will only draw the page background.</target>
        </segment>
      </unit>
      <unit id="509">
        <segment state="initial">
          <source>The TV-unsafe area is represented by the blue area in the following image.</source>
          <target>The TV-unsafe area is represented by the blue area in the following image.</target>
        </segment>
      </unit>
      <unit id="510">
        <segment state="initial">
          <source>TV-unsafe area</source>
          <target>TV-unsafe area</target>
        </segment>
      </unit>
      <unit id="511">
        <segment state="initial">
          <source>You can set the background to a static or themed color, or to an image, as the following code snippets demonstrate.</source>
          <target>You can set the background to a static or themed color, or to an image, as the following code snippets demonstrate.</target>
        </segment>
      </unit>
      <unit id="512">
        <segment state="initial">
          <source>Theme color</source>
          <target>Theme color</target>
        </segment>
      </unit>
      <unit id="513">
        <segment state="initial">
          <source>Image</source>
          <target>Image</target>
        </segment>
      </unit>
      <unit id="514">
        <segment state="initial">
          <source>This is what your app will look like without additional work.</source>
          <target>This is what your app will look like without additional work.</target>
        </segment>
      </unit>
      <unit id="515">
        <segment state="initial">
          <source>TV-safe area</source>
          <target>TV-safe area</target>
        </segment>
      </unit>
      <unit id="516">
        <segment state="initial">
          <source>This is not optimal because it gives the app a "boxed-in" effect, with parts of the UI such as the nav pane and grid seemingly cut off.</source>
          <target>This is not optimal because it gives the app a "boxed-in" effect, with parts of the UI such as the nav pane and grid seemingly cut off.</target>
        </segment>
      </unit>
      <unit id="517">
        <segment state="initial">
          <source>However, you can make optimizations to extend parts of the UI to the edges of the screen to give the app a more cinematic effect.</source>
          <target>However, you can make optimizations to extend parts of the UI to the edges of the screen to give the app a more cinematic effect.</target>
        </segment>
      </unit>
      <unit id="518">
        <segment state="initial">
          <source>Drawing UI to the edge</source>
          <target>Drawing UI to the edge</target>
        </segment>
      </unit>
      <unit id="519">
        <segment state="initial">
          <source>We recommend that you use certain UI elements to extend to the edges of the screen to provide more immersion to the user.</source>
          <target>We recommend that you use certain UI elements to extend to the edges of the screen to provide more immersion to the user.</target>
        </segment>
      </unit>
      <unit id="520">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.scrollviewer.aspx)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/en-us/windows/uwp/controls-and-patterns/nav-pane)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.commandbar.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>These include <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewers</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">nav panes</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CommandBars</pc>.</source>
          <target>These include <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewers</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">nav panes</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CommandBars</pc>.</target>
        </segment>
      </unit>
      <unit id="521">
        <segment state="initial">
          <source>On the other hand, it's also important that interactive elements and text always avoid the screen edges to ensure that they won't be cut off on some TVs.</source>
          <target>On the other hand, it's also important that interactive elements and text always avoid the screen edges to ensure that they won't be cut off on some TVs.</target>
        </segment>
      </unit>
      <unit id="522">
        <segment state="initial">
          <source>We recommend that you draw only non-essential visuals within 5% of the screen edges.</source>
          <target>We recommend that you draw only non-essential visuals within 5% of the screen edges.</target>
        </segment>
      </unit>
      <unit id="523">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#ui-element-sizing)</data>
        </originalData>
        <segment state="initial">
          <source>As mentioned in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UI element sizing</pc>, a UWP app following the Xbox One console's default scale factor of 200% will utilize an area of 960 x 540 epx, so in your app's UI, you should avoid putting essential UI in the following areas:</source>
          <target>As mentioned in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UI element sizing</pc>, a UWP app following the Xbox One console's default scale factor of 200% will utilize an area of 960 x 540 epx, so in your app's UI, you should avoid putting essential UI in the following areas:</target>
        </segment>
      </unit>
      <unit id="524">
        <segment state="initial">
          <source>27 epx from the top and bottom</source>
          <target>27 epx from the top and bottom</target>
        </segment>
      </unit>
      <unit id="525">
        <segment state="initial">
          <source>48 epx from the left and right sides</source>
          <target>48 epx from the left and right sides</target>
        </segment>
      </unit>
      <unit id="526">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>There are two ways to have UI extend to the screen edges: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">core window bounds</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">negative margins</pc>.</source>
          <target>There are two ways to have UI extend to the screen edges: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">core window bounds</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">negative margins</pc>.</target>
        </segment>
      </unit>
      <unit id="527">
        <segment state="initial">
          <source>Core window bounds</source>
          <target>Core window bounds</target>
        </segment>
      </unit>
      <unit id="528">
        <segment state="initial">
          <source>For UWP apps targeting only the 10-foot experience, using core window bounds is a more straightforward option.</source>
          <target>For UWP apps targeting only the 10-foot experience, using core window bounds is a more straightforward option.</target>
        </segment>
      </unit>
      <unit id="529">
        <originalData>
          <data id="id1">`OnLaunched`</data>
          <data id="id2">`App.xaml.cs`</data>
        </originalData>
        <segment state="initial">
          <source>In the <ph dataRef="id1" id="ph1" /> method of <ph dataRef="id2" id="ph2" />, add the following code:</source>
          <target>In the <ph dataRef="id1" id="ph1" /> method of <ph dataRef="id2" id="ph2" />, add the following code:</target>
        </segment>
      </unit>
      <unit id="530">
        <segment state="initial">
          <source>With this line of code, the app window will extend to the edges of the screen, so you will need to move all interactive and essential UI into the TV-safe area described earlier.</source>
          <target>With this line of code, the app window will extend to the edges of the screen, so you will need to move all interactive and essential UI into the TV-safe area described earlier.</target>
        </segment>
      </unit>
      <unit id="531">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.combobox.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>Transient UI, such as context menus and opened <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ComboBoxes</pc>, will automatically remain inside the TV-safe area.</source>
          <target>Transient UI, such as context menus and opened <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ComboBoxes</pc>, will automatically remain inside the TV-safe area.</target>
        </segment>
      </unit>
      <unit id="532">
        <segment state="initial">
          <source>Core window bounds</source>
          <target>Core window bounds</target>
        </segment>
      </unit>
      <unit id="533">
        <segment state="initial">
          <source>Negative margins</source>
          <target>Negative margins</target>
        </segment>
      </unit>
      <unit id="534">
        <segment state="initial">
          <source>For UWP apps targeting a range of devices such as mobile, desktop, and Xbox One, negative margins may be a more intuitive method for tailoring adaptive layouts.</source>
          <target>For UWP apps targeting a range of devices such as mobile, desktop, and Xbox One, negative margins may be a more intuitive method for tailoring adaptive layouts.</target>
        </segment>
      </unit>
      <unit id="535">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#custom-visual-state-trigger-for-xbox-one)</data>
        </originalData>
        <segment state="initial">
          <source>We recommend that you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">custom trigger</pc> and modify the margins for TV layouts.</source>
          <target>We recommend that you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">custom trigger</pc> and modify the margins for TV layouts.</target>
        </segment>
      </unit>
      <unit id="536">
        <segment state="initial">
          <source>Pane backgrounds</source>
          <target>Pane backgrounds</target>
        </segment>
      </unit>
      <unit id="537">
        <segment state="initial">
          <source>Navigation panes are typically drawn near the edge of the screen, so the background should extend into the TV-unsafe area so as not to introduce awkward gaps.</source>
          <target>Navigation panes are typically drawn near the edge of the screen, so the background should extend into the TV-unsafe area so as not to introduce awkward gaps.</target>
        </segment>
      </unit>
      <unit id="538">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.splitview.aspx)</data>
          <data id="id3">`SplitView`</data>
        </originalData>
        <segment state="initial">
          <source>You can do this with negative margins on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SplitView</pc> control, which is commonly used as a nav pane building block, and positive margins on the <ph dataRef="id3" id="ph1" />'s content to keep it within the TV-safe area.</source>
          <target>You can do this with negative margins on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SplitView</pc> control, which is commonly used as a nav pane building block, and positive margins on the <ph dataRef="id3" id="ph1" />'s content to keep it within the TV-safe area.</target>
        </segment>
      </unit>
      <unit id="539">
        <segment state="initial">
          <source>Nav pane extended to edges of screen</source>
          <target>Nav pane extended to edges of screen</target>
        </segment>
      </unit>
      <unit id="540">
        <segment state="initial">
          <source>Here, the nav pane's background has been extended to the edges of the screen, while its navigation items are kept in the TV-safe area.</source>
          <target>Here, the nav pane's background has been extended to the edges of the screen, while its navigation items are kept in the TV-safe area.</target>
        </segment>
      </unit>
      <unit id="541">
        <originalData>
          <data id="id1">`SplitView`</data>
        </originalData>
        <segment state="initial">
          <source>The content of the <ph dataRef="id1" id="ph1" /> (in this case, a grid of items) has been extended to the bottom of the screen so that it looks like it continues and isn't cut off, while the top of the grid is still within the TV-safe area.</source>
          <target>The content of the <ph dataRef="id1" id="ph1" /> (in this case, a grid of items) has been extended to the bottom of the screen so that it looks like it continues and isn't cut off, while the top of the grid is still within the TV-safe area.</target>
        </segment>
      </unit>
      <unit id="542">
        <segment state="initial">
          <source>Later in this section you will learn how to keep the focused item in the TV-safe area as well.</source>
          <target>Later in this section you will learn how to keep the focused item in the TV-safe area as well.</target>
        </segment>
      </unit>
      <unit id="543">
        <segment state="initial">
          <source>The following code snippet achieves this effect:</source>
          <target>The following code snippet achieves this effect:</target>
        </segment>
      </unit>
      <unit id="544">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.commandbar.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CommandBar</pc> is another example of a pane that is commonly positioned near one or more edges of the app, and as such on TV its background should extend to the edges of the screen.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CommandBar</pc> is another example of a pane that is commonly positioned near one or more edges of the app, and as such on TV its background should extend to the edges of the screen.</target>
        </segment>
      </unit>
      <unit id="545">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>It also usually contains a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">More</pc> button, represented by "..." on the right side, which should remain in the TV-safe area.</source>
          <target>It also usually contains a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">More</pc> button, represented by "..." on the right side, which should remain in the TV-safe area.</target>
        </segment>
      </unit>
      <unit id="546">
        <segment state="initial">
          <source>Following are a few different strategies to achieve the desired interactions and visual effects.</source>
          <target>Following are a few different strategies to achieve the desired interactions and visual effects.</target>
        </segment>
      </unit>
      <unit id="547">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Option 1</pc>: Change the <ph dataRef="id3" id="ph1" /> background color to either transparent or the same color as the page background:</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Option 1</pc>: Change the <ph dataRef="id3" id="ph1" /> background color to either transparent or the same color as the page background:</target>
        </segment>
      </unit>
      <unit id="548">
        <originalData>
          <data id="id1">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>Doing this will make the <ph dataRef="id1" id="ph1" /> look like it is on top of the same background as the rest of the page, so the background seamlessly flows to the edge of the screen.</source>
          <target>Doing this will make the <ph dataRef="id1" id="ph1" /> look like it is on top of the same background as the rest of the page, so the background seamlessly flows to the edge of the screen.</target>
        </segment>
      </unit>
      <unit id="549">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`CommandBar`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Option 2</pc>: Add a background rectangle whose fill is the same color as the <ph dataRef="id3" id="ph1" /> background, and extend it to the edges of the screen with negative margins:</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Option 2</pc>: Add a background rectangle whose fill is the same color as the <ph dataRef="id3" id="ph1" /> background, and extend it to the edges of the screen with negative margins:</target>
        </segment>
      </unit>
      <unit id="550">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">`CommandBar`</data>
          <data id="id7">`AppBarButton`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />If using this approach, be aware that the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">More</pc> button changes the height of the opened <ph dataRef="id6" id="ph2" /> if necessary, in order to show the labels of the <ph dataRef="id7" id="ph3" />s below their icons.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />If using this approach, be aware that the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">More</pc> button changes the height of the opened <ph dataRef="id6" id="ph2" /> if necessary, in order to show the labels of the <ph dataRef="id7" id="ph3" />s below their icons.</target>
        </segment>
      </unit>
      <unit id="551">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>We recommend that you move the labels to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">right</pc> of their icons to avoid this resizing.</source>
          <target>We recommend that you move the labels to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">right</pc> of their icons to avoid this resizing.</target>
        </segment>
      </unit>
      <unit id="552">
        <segment state="initial">
          <source>Background images and media elements</source>
          <target>Background images and media elements</target>
        </segment>
      </unit>
      <unit id="553">
        <segment state="initial">
          <source>Most images and other media elements don't contain critical information at their edges, so it's safe to draw these UI elements to the edges of the screen to provide an immersive experience.</source>
          <target>Most images and other media elements don't contain critical information at their edges, so it's safe to draw these UI elements to the edges of the screen to provide an immersive experience.</target>
        </segment>
      </unit>
      <unit id="554">
        <segment state="initial">
          <source>The following code snippet shows an example of drawing an image to the edges of the screen:</source>
          <target>The following code snippet shows an example of drawing an image to the edges of the screen:</target>
        </segment>
      </unit>
      <unit id="555">
        <segment state="initial">
          <source>You can of course do the same thing for media, such as videos.</source>
          <target>You can of course do the same thing for media, such as videos.</target>
        </segment>
      </unit>
      <unit id="556">
        <segment state="initial">
          <source>Scrolling ends of lists and grids</source>
          <target>Scrolling ends of lists and grids</target>
        </segment>
      </unit>
      <unit id="557">
        <segment state="initial">
          <source>It's common for lists and grids to contain more items than can fit onscreen at the same time.</source>
          <target>It's common for lists and grids to contain more items than can fit onscreen at the same time.</target>
        </segment>
      </unit>
      <unit id="558">
        <segment state="initial">
          <source>When this is the case, we recommend that you extend the list or grid to the edge of the screen.</source>
          <target>When this is the case, we recommend that you extend the list or grid to the edge of the screen.</target>
        </segment>
      </unit>
      <unit id="559">
        <segment state="initial">
          <source>Horizontally scrolling lists and grids should extend to the right edge, and vertically scrolling ones should extend to the bottom.</source>
          <target>Horizontally scrolling lists and grids should extend to the right edge, and vertically scrolling ones should extend to the bottom.</target>
        </segment>
      </unit>
      <unit id="560">
        <segment state="initial">
          <source>TV safe area grid cutoff</source>
          <target>TV safe area grid cutoff</target>
        </segment>
      </unit>
      <unit id="561">
        <segment state="initial">
          <source>While a list or grid is extended like this, it's important to keep the focus visual and its associated item inside the TV-safe area.</source>
          <target>While a list or grid is extended like this, it's important to keep the focus visual and its associated item inside the TV-safe area.</target>
        </segment>
      </unit>
      <unit id="562">
        <segment state="initial">
          <source>Scrolling grid focus should be kept in TV-safe area</source>
          <target>Scrolling grid focus should be kept in TV-safe area</target>
        </segment>
      </unit>
      <unit id="563">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.viewmanagement.applicationview.visiblebounds.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>The UWP has functionality that will keep the focus visual inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">VisibleBounds</pc>, but you need to add padding to ensure that the list/grid items can scroll into view of the safe area.</source>
          <target>The UWP has functionality that will keep the focus visual inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">VisibleBounds</pc>, but you need to add padding to ensure that the list/grid items can scroll into view of the safe area.</target>
        </segment>
      </unit>
      <unit id="564">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.listview.aspx)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.gridview.aspx)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.itemspresenter.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>Specifically, you add a positive margin to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc>'s <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ItemsPresenter</pc>, as in the following code snippet:</source>
          <target>Specifically, you add a positive margin to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc>'s <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ItemsPresenter</pc>, as in the following code snippet:</target>
        </segment>
      </unit>
      <unit id="565">
        <segment state="initial">
          <source>You would put the previous code snippet in either the page or app resources, and then access it in the following way:</source>
          <target>You would put the previous code snippet in either the page or app resources, and then access it in the following way:</target>
        </segment>
      </unit>
      <unit id="566">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">`ListView`</data>
          <data id="id5">`GridView`</data>
          <data id="id6">[</data>
          <data id="id7">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.controltemplate.targettype.aspx)</data>
          <data id="id8">[</data>
          <data id="id9">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.controltemplate.aspx)</data>
          <data id="id10">[</data>
          <data id="id11">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.style.aspx)</data>
          <data id="id12">`GridView`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />This code snippet is specifically for <ph dataRef="id4" id="ph2" />s; for a <ph dataRef="id5" id="ph3" /> style, set the <pc dataRefEnd="id7" dataRefStart="id6" id="p2">TargetType</pc> attribute for both the <pc dataRefEnd="id9" dataRefStart="id8" id="p3">ControlTemplate</pc> and the <pc dataRefEnd="id11" dataRefStart="id10" id="p4">Style</pc> to <ph dataRef="id12" id="ph4" />.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />This code snippet is specifically for <ph dataRef="id4" id="ph2" />s; for a <ph dataRef="id5" id="ph3" /> style, set the <pc dataRefEnd="id7" dataRefStart="id6" id="p2">TargetType</pc> attribute for both the <pc dataRefEnd="id9" dataRefStart="id8" id="p3">ControlTemplate</pc> and the <pc dataRefEnd="id11" dataRefStart="id10" id="p4">Style</pc> to <ph dataRef="id12" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="567">
        <segment state="initial">
          <source>Custom visual state trigger for Xbox One</source>
          <target>Custom visual state trigger for Xbox One</target>
        </segment>
      </unit>
      <unit id="568">
        <segment state="initial">
          <source>To tailor your UWP app for the 10-foot experience, we recommend that you make layout changes when the app detects that it has been launched on an Xbox console.</source>
          <target>To tailor your UWP app for the 10-foot experience, we recommend that you make layout changes when the app detects that it has been launched on an Xbox console.</target>
        </segment>
      </unit>
      <unit id="569">
        <segment state="initial">
          <source>This can be done by using a custom visual state trigger, as in the following code snippet:</source>
          <target>This can be done by using a custom visual state trigger, as in the following code snippet:</target>
        </segment>
      </unit>
      <unit id="570">
        <segment state="initial">
          <source>To create the trigger, add the following class to your app.</source>
          <target>To create the trigger, add the following class to your app.</target>
        </segment>
      </unit>
      <unit id="571">
        <segment state="initial">
          <source>This is the class that is referenced by the XAML code earlier:</source>
          <target>This is the class that is referenced by the XAML code earlier:</target>
        </segment>
      </unit>
      <unit id="572">
        <segment state="initial">
          <source>After you've added your custom trigger, your app will automatically make the layout modifications you specified in your XAML code whenever it detects that it is running on an Xbox One console.</source>
          <target>After you've added your custom trigger, your app will automatically make the layout modifications you specified in your XAML code whenever it detects that it is running on an Xbox One console.</target>
        </segment>
      </unit>
      <unit id="573">
        <segment state="initial">
          <source>Colors</source>
          <target>Colors</target>
        </segment>
      </unit>
      <unit id="574">
        <segment state="initial">
          <source>By default, the Universal Windows Platform doesn't do anything to alter your app's colors.</source>
          <target>By default, the Universal Windows Platform doesn't do anything to alter your app's colors.</target>
        </segment>
      </unit>
      <unit id="575">
        <segment state="initial">
          <source>That said, there are improvements that you can make to the set of colors your app uses to improve the visual experience on TV.</source>
          <target>That said, there are improvements that you can make to the set of colors your app uses to improve the visual experience on TV.</target>
        </segment>
      </unit>
      <unit id="576">
        <segment state="initial">
          <source>Application theme</source>
          <target>Application theme</target>
        </segment>
      </unit>
      <unit id="577">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You can choose an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application theme</pc> (dark or light) according to what is right for your app, or you can opt out of theming.</source>
          <target>You can choose an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application theme</pc> (dark or light) according to what is right for your app, or you can opt out of theming.</target>
        </segment>
      </unit>
      <unit id="578">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../style/color.md#color-themes)</data>
        </originalData>
        <segment state="initial">
          <source>Read more about general recommendations for themes in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color themes</pc>.</source>
          <target>Read more about general recommendations for themes in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color themes</pc>.</target>
        </segment>
      </unit>
      <unit id="579">
        <segment state="initial">
          <source>The UWP also allows apps to dynamically set the theme based on the system settings provided by the devices on which they run.</source>
          <target>The UWP also allows apps to dynamically set the theme based on the system settings provided by the devices on which they run.</target>
        </segment>
      </unit>
      <unit id="580">
        <segment state="initial">
          <source>While the UWP always respects the theme settings specified by the user, each device also provides an appropriate default theme.</source>
          <target>While the UWP always respects the theme settings specified by the user, each device also provides an appropriate default theme.</target>
        </segment>
      </unit>
      <unit id="581">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Because of the nature of Xbox One, which is expected to have more <pc dataRefEnd="id2" dataRefStart="id1" id="p1">media</pc> experiences than <pc dataRefEnd="id4" dataRefStart="id3" id="p2">productivity</pc> experiences, it defaults to a dark system theme.</source>
          <target>Because of the nature of Xbox One, which is expected to have more <pc dataRefEnd="id2" dataRefStart="id1" id="p1">media</pc> experiences than <pc dataRefEnd="id4" dataRefStart="id3" id="p2">productivity</pc> experiences, it defaults to a dark system theme.</target>
        </segment>
      </unit>
      <unit id="582">
        <segment state="initial">
          <source>If your app's theme is based on the system settings, expect it to default to dark on Xbox One.</source>
          <target>If your app's theme is based on the system settings, expect it to default to dark on Xbox One.</target>
        </segment>
      </unit>
      <unit id="583">
        <segment state="initial">
          <source>Accent color</source>
          <target>Accent color</target>
        </segment>
      </unit>
      <unit id="584">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The UWP provides a convenient way to expose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">accent color</pc> that the user has selected from their system settings.</source>
          <target>The UWP provides a convenient way to expose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">accent color</pc> that the user has selected from their system settings.</target>
        </segment>
      </unit>
      <unit id="585">
        <segment state="initial">
          <source>On Xbox One, the user is able to select a user color, just as they can select an accent color on a PC.</source>
          <target>On Xbox One, the user is able to select a user color, just as they can select an accent color on a PC.</target>
        </segment>
      </unit>
      <unit id="586">
        <segment state="initial">
          <source>As long as your app calls these accent colors through brushes or color resources, the color that the user selected in the system settings will be used.</source>
          <target>As long as your app calls these accent colors through brushes or color resources, the color that the user selected in the system settings will be used.</target>
        </segment>
      </unit>
      <unit id="587">
        <segment state="initial">
          <source>Note that accent colors on Xbox One are per user, not per system.</source>
          <target>Note that accent colors on Xbox One are per user, not per system.</target>
        </segment>
      </unit>
      <unit id="588">
        <segment state="initial">
          <source>Please also note that the set of user colors on Xbox One is not the same as that on PCs, phones, and other devices.</source>
          <target>Please also note that the set of user colors on Xbox One is not the same as that on PCs, phones, and other devices.</target>
        </segment>
      </unit>
      <unit id="589">
        <segment state="initial">
          <source>This is partly due to the fact that these colors are hand-picked to make for the best 10-foot experience on Xbox One, following the same methodologies and strategies explained in this article.</source>
          <target>This is partly due to the fact that these colors are hand-picked to make for the best 10-foot experience on Xbox One, following the same methodologies and strategies explained in this article.</target>
        </segment>
      </unit>
      <unit id="590">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.viewmanagement.uicolortype.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>As long as your app uses a brush resource such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemControlForegroundAccentBrush</pc>, or a color resource (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemAccentColor</pc>), or instead calls accent colors directly through the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">UIColorType.Accent*</pc> API, those colors are replaced with accent colors appropriate for TV.</source>
          <target>As long as your app uses a brush resource such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemControlForegroundAccentBrush</pc>, or a color resource (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemAccentColor</pc>), or instead calls accent colors directly through the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">UIColorType.Accent*</pc> API, those colors are replaced with accent colors appropriate for TV.</target>
        </segment>
      </unit>
      <unit id="591">
        <segment state="initial">
          <source>High contrast brush colors are also pulled in from the system the same way as on a PC and phone, but with TV-appropriate colors.</source>
          <target>High contrast brush colors are also pulled in from the system the same way as on a PC and phone, but with TV-appropriate colors.</target>
        </segment>
      </unit>
      <unit id="592">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../style/color.md#accent-color)</data>
        </originalData>
        <segment state="initial">
          <source>To learn more about accent color in general, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Accent color</pc>.</source>
          <target>To learn more about accent color in general, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Accent color</pc>.</target>
        </segment>
      </unit>
      <unit id="593">
        <segment state="initial">
          <source>Color variance among TVs</source>
          <target>Color variance among TVs</target>
        </segment>
      </unit>
      <unit id="594">
        <segment state="initial">
          <source>When designing for TV, note that colors display quite differently depending on the TV on which they are rendered.</source>
          <target>When designing for TV, note that colors display quite differently depending on the TV on which they are rendered.</target>
        </segment>
      </unit>
      <unit id="595">
        <segment state="initial">
          <source>Don't assume colors will look exactly as they do on your monitor.</source>
          <target>Don't assume colors will look exactly as they do on your monitor.</target>
        </segment>
      </unit>
      <unit id="596">
        <segment state="initial">
          <source>If your app relies on subtle differences in color to differentiate parts of the UI, colors could blend together and users could get confused.</source>
          <target>If your app relies on subtle differences in color to differentiate parts of the UI, colors could blend together and users could get confused.</target>
        </segment>
      </unit>
      <unit id="597">
        <segment state="initial">
          <source>Try to use colors that are different enough that users will be able to clearly differentiate them, regardless of the TV they are using.</source>
          <target>Try to use colors that are different enough that users will be able to clearly differentiate them, regardless of the TV they are using.</target>
        </segment>
      </unit>
      <unit id="598">
        <segment state="initial">
          <source>TV-safe colors</source>
          <target>TV-safe colors</target>
        </segment>
      </unit>
      <unit id="599">
        <segment state="initial">
          <source>A color's RGB values represent intensities for red, green, and blue.</source>
          <target>A color's RGB values represent intensities for red, green, and blue.</target>
        </segment>
      </unit>
      <unit id="600">
        <segment state="initial">
          <source>TVs don't handle extreme intensities very well; therefore, you should avoid using these colors when designing for the 10-foot experience.</source>
          <target>TVs don't handle extreme intensities very well; therefore, you should avoid using these colors when designing for the 10-foot experience.</target>
        </segment>
      </unit>
      <unit id="601">
        <segment state="initial">
          <source>They can produce an odd banded effect, or appear washed out on certain TVs.</source>
          <target>They can produce an odd banded effect, or appear washed out on certain TVs.</target>
        </segment>
      </unit>
      <unit id="602">
        <segment state="initial">
          <source>Additionally, high-intensity colors may cause blooming (nearby pixels start drawing the same colors).</source>
          <target>Additionally, high-intensity colors may cause blooming (nearby pixels start drawing the same colors).</target>
        </segment>
      </unit>
      <unit id="603">
        <segment state="initial">
          <source>While there are different schools of thought in what are considered TV-safe colors, colors within the RGB values of 16-235 (or 10-EB in hexadecimal) are generally safe to use for TV.</source>
          <target>While there are different schools of thought in what are considered TV-safe colors, colors within the RGB values of 16-235 (or 10-EB in hexadecimal) are generally safe to use for TV.</target>
        </segment>
      </unit>
      <unit id="604">
        <segment state="initial">
          <source>TV-safe color range</source>
          <target>TV-safe color range</target>
        </segment>
      </unit>
      <unit id="605">
        <segment state="initial">
          <source>Fixing TV-unsafe colors</source>
          <target>Fixing TV-unsafe colors</target>
        </segment>
      </unit>
      <unit id="606">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Fixing TV-unsafe colors individually by adjusting their RGB values to be within the TV-safe range is typically referred to as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">color clamping</pc>.</source>
          <target>Fixing TV-unsafe colors individually by adjusting their RGB values to be within the TV-safe range is typically referred to as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">color clamping</pc>.</target>
        </segment>
      </unit>
      <unit id="607">
        <segment state="initial">
          <source>This method may be appropriate for an app that doesn't use a rich color palette.</source>
          <target>This method may be appropriate for an app that doesn't use a rich color palette.</target>
        </segment>
      </unit>
      <unit id="608">
        <segment state="initial">
          <source>However, fixing colors using only this method may cause colors to collide with each other, which doesn't provide for the best 10-foot experience.</source>
          <target>However, fixing colors using only this method may cause colors to collide with each other, which doesn't provide for the best 10-foot experience.</target>
        </segment>
      </unit>
      <unit id="609">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To optimize your color palette for TV, we recommend that you first ensure that your colors are TV-safe through a method such as color clamping, then use a method called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">scaling</pc>.</source>
          <target>To optimize your color palette for TV, we recommend that you first ensure that your colors are TV-safe through a method such as color clamping, then use a method called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">scaling</pc>.</target>
        </segment>
      </unit>
      <unit id="610">
        <segment state="initial">
          <source>This involves scaling all of your colors' RGB values by a certain factor to get them within the TV-safe range.</source>
          <target>This involves scaling all of your colors' RGB values by a certain factor to get them within the TV-safe range.</target>
        </segment>
      </unit>
      <unit id="611">
        <segment state="initial">
          <source>Scaling all of your app's colors helps prevent color collision and makes for a better 10-foot experience.</source>
          <target>Scaling all of your app's colors helps prevent color collision and makes for a better 10-foot experience.</target>
        </segment>
      </unit>
      <unit id="612">
        <segment state="initial">
          <source>Clamping vs. scaling</source>
          <target>Clamping vs. scaling</target>
        </segment>
      </unit>
      <unit id="613">
        <segment state="initial">
          <source>Assets</source>
          <target>Assets</target>
        </segment>
      </unit>
      <unit id="614">
        <segment state="initial">
          <source>When making changes to colors, make sure to also update assets accordingly.</source>
          <target>When making changes to colors, make sure to also update assets accordingly.</target>
        </segment>
      </unit>
      <unit id="615">
        <segment state="initial">
          <source>If your app uses a color in XAML that is supposed to look the same as an asset color, but you only update the XAML code, your assets will look off-color.</source>
          <target>If your app uses a color in XAML that is supposed to look the same as an asset color, but you only update the XAML code, your assets will look off-color.</target>
        </segment>
      </unit>
      <unit id="616">
        <segment state="initial">
          <source>UWP color sample</source>
          <target>UWP color sample</target>
        </segment>
      </unit>
      <unit id="617">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../style/color.md#color-themes)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UWP color themes</pc> are designed around the app's background being either <pc dataRefEnd="id4" dataRefStart="id3" id="p2">black</pc> for the dark theme or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">white</pc> for the light theme.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UWP color themes</pc> are designed around the app's background being either <pc dataRefEnd="id4" dataRefStart="id3" id="p2">black</pc> for the dark theme or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">white</pc> for the light theme.</target>
        </segment>
      </unit>
      <unit id="618">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Because neither black nor white are TV-safe, these colors needed to be fixed by using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">clamping</pc>.</source>
          <target>Because neither black nor white are TV-safe, these colors needed to be fixed by using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">clamping</pc>.</target>
        </segment>
      </unit>
      <unit id="619">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>After they were fixed, all the other colors needed to be adjusted through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">scaling</pc> to retain the necessary contrast.</source>
          <target>After they were fixed, all the other colors needed to be adjusted through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">scaling</pc> to retain the necessary contrast.</target>
        </segment>
      </unit>
      <unit id="620">
        <segment state="initial">
          <source>The following sample code provides a color theme that has been optimized for TV use:</source>
          <target>The following sample code provides a color theme that has been optimized for TV use:</target>
        </segment>
      </unit>
      <unit id="621">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />The light theme <pc dataRefEnd="id5" dataRefStart="id4" id="p2">SystemChromeMediumLowColor</pc> and <pc dataRefEnd="id7" dataRefStart="id6" id="p3">SystemChromeMediumLowColor</pc> are the same color on purpose and not caused as a result of clamping.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />The light theme <pc dataRefEnd="id5" dataRefStart="id4" id="p2">SystemChromeMediumLowColor</pc> and <pc dataRefEnd="id7" dataRefStart="id6" id="p3">SystemChromeMediumLowColor</pc> are the same color on purpose and not caused as a result of clamping.</target>
        </segment>
      </unit>
      <unit id="622">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Hexadecimal colors are specified in <pc dataRefEnd="id5" dataRefStart="id4" id="p2">ARGB</pc> (Alpha Red Green Blue).</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />Hexadecimal colors are specified in <pc dataRefEnd="id5" dataRefStart="id4" id="p2">ARGB</pc> (Alpha Red Green Blue).</target>
        </segment>
      </unit>
      <unit id="623">
        <segment state="initial">
          <source>We don't recommend using TV-safe colors on a monitor able to display the full range without clamping because the colors will look washed out.</source>
          <target>We don't recommend using TV-safe colors on a monitor able to display the full range without clamping because the colors will look washed out.</target>
        </segment>
      </unit>
      <unit id="624">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Instead, load the resource dictionary (previous sample) when your app is running on Xbox but <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> other platforms.</source>
          <target>Instead, load the resource dictionary (previous sample) when your app is running on Xbox but <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> other platforms.</target>
        </segment>
      </unit>
      <unit id="625">
        <originalData>
          <data id="id1">`OnLaunched`</data>
          <data id="id2">`App.xaml.cs`</data>
        </originalData>
        <segment state="initial">
          <source>In the <ph dataRef="id1" id="ph1" /> method of <ph dataRef="id2" id="ph2" />, add the following check:</source>
          <target>In the <ph dataRef="id1" id="ph1" /> method of <ph dataRef="id2" id="ph2" />, add the following check:</target>
        </segment>
      </unit>
      <unit id="626">
        <segment state="initial">
          <source>This will ensure that the correct colors will display on whichever device the app is running, providing the user with a better, more aesthetically pleasing experience.</source>
          <target>This will ensure that the correct colors will display on whichever device the app is running, providing the user with a better, more aesthetically pleasing experience.</target>
        </segment>
      </unit>
      <unit id="627">
        <segment state="initial">
          <source>Guidelines for UI controls</source>
          <target>Guidelines for UI controls</target>
        </segment>
      </unit>
      <unit id="628">
        <segment state="initial">
          <source>There are several UI controls that work well across multiple devices, but have certain considerations when used on TV.</source>
          <target>There are several UI controls that work well across multiple devices, but have certain considerations when used on TV.</target>
        </segment>
      </unit>
      <unit id="629">
        <segment state="initial">
          <source>Read about some best practices for using these controls when designing for the 10-foot experience.</source>
          <target>Read about some best practices for using these controls when designing for the 10-foot experience.</target>
        </segment>
      </unit>
      <unit id="630">
        <segment state="initial">
          <source>Pivot control</source>
          <target>Pivot control</target>
        </segment>
      </unit>
      <unit id="631">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.pivot.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pivot</pc> control has properties you can set that make it so headers won't wrap around the screen like they do on phone and tablet.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pivot</pc> control has properties you can set that make it so headers won't wrap around the screen like they do on phone and tablet.</target>
        </segment>
      </unit>
      <unit id="632">
        <segment state="initial">
          <source>This is a better experience for large-screen displays such as TV, because header wrapping can be distracting to users.</source>
          <target>This is a better experience for large-screen displays such as TV, because header wrapping can be distracting to users.</target>
        </segment>
      </unit>
      <unit id="633">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/windows/uwp/controls-and-patterns/tabs-pivot)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tabs and pivots</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tabs and pivots</pc>.</target>
        </segment>
      </unit>
      <unit id="634">
        <segment state="initial">
          <source>Navigation pane</source>
          <target>Navigation pane</target>
        </segment>
      </unit>
      <unit id="635">
        <segment state="initial">
          <source>The UWP allows for a consistent look and feel across all devices.</source>
          <target>The UWP allows for a consistent look and feel across all devices.</target>
        </segment>
      </unit>
      <unit id="636">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/windows/uwp/controls-and-patterns/nav-pane)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how nav panes behave in different screen sizes as well as best practices for gamepad/remote navigation, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Nav panes</pc>.</source>
          <target>For more information about how nav panes behave in different screen sizes as well as best practices for gamepad/remote navigation, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Nav panes</pc>.</target>
        </segment>
      </unit>
      <unit id="637">
        <segment state="initial">
          <source>CommandBar labels</source>
          <target>CommandBar labels</target>
        </segment>
      </unit>
      <unit id="638">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.commandbar.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CommandBar</pc> control has a property that causes the labels next to icons to always be displayed.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CommandBar</pc> control has a property that causes the labels next to icons to always be displayed.</target>
        </segment>
      </unit>
      <unit id="639">
        <segment state="initial">
          <source>This works well for the 10-foot experience because it minimizes the number of clicks for the user to see what the buttons do.</source>
          <target>This works well for the 10-foot experience because it minimizes the number of clicks for the user to see what the buttons do.</target>
        </segment>
      </unit>
      <unit id="640">
        <segment state="initial">
          <source>This is also a great model for other device types to follow.</source>
          <target>This is also a great model for other device types to follow.</target>
        </segment>
      </unit>
      <unit id="641">
        <segment state="initial">
          <source>Tooltip</source>
          <target>Tooltip</target>
        </segment>
      </unit>
      <unit id="642">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.tooltip.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tooltip</pc> control was introduced as a way to provide more information in the UI when the user hovers the mouse over, or taps and holds their figure on, an element.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tooltip</pc> control was introduced as a way to provide more information in the UI when the user hovers the mouse over, or taps and holds their figure on, an element.</target>
        </segment>
      </unit>
      <unit id="643">
        <originalData>
          <data id="id1">`Tooltip`</data>
        </originalData>
        <segment state="initial">
          <source>For gamepad and remote, <ph dataRef="id1" id="ph1" /> appears after a brief moment when the element gets focus, stays onscreen for a short time, and then disappears.</source>
          <target>For gamepad and remote, <ph dataRef="id1" id="ph1" /> appears after a brief moment when the element gets focus, stays onscreen for a short time, and then disappears.</target>
        </segment>
      </unit>
      <unit id="644">
        <originalData>
          <data id="id1">`Tooltip`</data>
        </originalData>
        <segment state="initial">
          <source>This behavior could be distracting if too many <ph dataRef="id1" id="ph1" />s are used.</source>
          <target>This behavior could be distracting if too many <ph dataRef="id1" id="ph1" />s are used.</target>
        </segment>
      </unit>
      <unit id="645">
        <segment state="initial">
          <source>Try to avoid using Tooltip when designing for TV.</source>
          <target>Try to avoid using Tooltip when designing for TV.</target>
        </segment>
      </unit>
      <unit id="646">
        <segment state="initial">
          <source>Button styles</source>
          <target>Button styles</target>
        </segment>
      </unit>
      <unit id="647">
        <segment state="initial">
          <source>While the standard UWP buttons work well on TV, some visual styles of buttons call attention to the UI better, which you may want to consider for all platforms, particularly in the 10-foot experience, which benefits from clearly communicating where the focus is located.</source>
          <target>While the standard UWP buttons work well on TV, some visual styles of buttons call attention to the UI better, which you may want to consider for all platforms, particularly in the 10-foot experience, which benefits from clearly communicating where the focus is located.</target>
        </segment>
      </unit>
      <unit id="648">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/windows/uwp/controls-and-patterns/buttons)</data>
        </originalData>
        <segment state="initial">
          <source>To read more about these styles, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Buttons</pc>.</source>
          <target>To read more about these styles, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Buttons</pc>.</target>
        </segment>
      </unit>
      <unit id="649">
        <segment state="initial">
          <source>Nested UI elements</source>
          <target>Nested UI elements</target>
        </segment>
      </unit>
      <unit id="650">
        <segment state="initial">
          <source>When UI elements are nested inside other UI elements, the default behavior is that the user will not be able to access the nested UI elements.</source>
          <target>When UI elements are nested inside other UI elements, the default behavior is that the user will not be able to access the nested UI elements.</target>
        </segment>
      </unit>
      <unit id="651">
        <segment state="initial">
          <source>One of the main scenarios is when there is UI that displays when the user hovers over a nested UI element with the mouse, but it does not display otherwise.</source>
          <target>One of the main scenarios is when there is UI that displays when the user hovers over a nested UI element with the mouse, but it does not display otherwise.</target>
        </segment>
      </unit>
      <unit id="652">
        <segment state="initial">
          <source>UI elements displaying when mouse hovers over them</source>
          <target>UI elements displaying when mouse hovers over them</target>
        </segment>
      </unit>
      <unit id="653">
        <originalData>
          <data id="id1">`ContextFlyout`</data>
        </originalData>
        <segment state="initial">
          <source>The recommended way to handle this scenario for gamepad/remote input is to place these UI elements in a <ph dataRef="id1" id="ph1" />.</source>
          <target>The recommended way to handle this scenario for gamepad/remote input is to place these UI elements in a <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="654">
        <segment state="initial">
          <source>Summary</source>
          <target>Summary</target>
        </segment>
      </unit>
      <unit id="655">
        <segment state="initial">
          <source>Designing for the 10-foot experience has special considerations to take into account that make it different from designing for any other platform.</source>
          <target>Designing for the 10-foot experience has special considerations to take into account that make it different from designing for any other platform.</target>
        </segment>
      </unit>
      <unit id="656">
        <segment state="initial">
          <source>While you can certainly do a straight port of your UWP app to Xbox One and it will work, it won't necessarily be optimized for the 10-foot experience and can lead to user frustration.</source>
          <target>While you can certainly do a straight port of your UWP app to Xbox One and it will work, it won't necessarily be optimized for the 10-foot experience and can lead to user frustration.</target>
        </segment>
      </unit>
      <unit id="657">
        <segment state="initial">
          <source>Following the guidelines in this article will make sure that your app is as good as it can be on TV.</source>
          <target>Following the guidelines in this article will make sure that your app is as good as it can be on TV.</target>
        </segment>
      </unit>
      <unit id="658">
        <segment state="initial">
          <source>Related articles</source>
          <target>Related articles</target>
        </segment>
      </unit>
      <unit id="659">
        <segment state="initial">
          <source>Device primer for Universal Windows Platform (UWP) apps</source>
          <target>Device primer for Universal Windows Platform (UWP) apps</target>
        </segment>
      </unit>
      <unit id="660">
        <segment state="initial">
          <source>Gamepad and remote control interactions</source>
          <target>Gamepad and remote control interactions</target>
        </segment>
      </unit>
      <unit id="661">
        <segment state="initial">
          <source>Sound in UWP apps</source>
          <target>Sound in UWP apps</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>