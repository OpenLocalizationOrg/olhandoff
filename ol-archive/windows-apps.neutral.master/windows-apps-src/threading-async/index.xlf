<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\threading-async\index.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">d69259d449ffb7d4dfc1824c77c16eb9e1cdb026</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Threading and async programming</source>
          <target>Threading and async programming</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Threading and async programming enables your app to accomplish work asynchronously in parallel threads.</source>
          <target>Threading and async programming enables your app to accomplish work asynchronously in parallel threads.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Threading and async programming</source>
          <target>Threading and async programming</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Threading and async programming enables your app to accomplish work asynchronously in parallel threads.</source>
          <target>Threading and async programming enables your app to accomplish work asynchronously in parallel threads.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Your app can use the thread pool to accomplish work asynchronously in parallel threads.</source>
          <target>Your app can use the thread pool to accomplish work asynchronously in parallel threads.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>The thread pool manages a set of threads and uses a queue to assign work items to threads as they become available.</source>
          <target>The thread pool manages a set of threads and uses a queue to assign work items to threads as they become available.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>The thread pool is similar to the asynchronous programming patterns available in the Windows Runtime because it can be used to accomplish extended work without blocking the UI, but the thread pool offers more control than the asynchronous programming patterns and you can use it to complete multiple work items in parallel.</source>
          <target>The thread pool is similar to the asynchronous programming patterns available in the Windows Runtime because it can be used to accomplish extended work without blocking the UI, but the thread pool offers more control than the asynchronous programming patterns and you can use it to complete multiple work items in parallel.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>You can use the thread pool to:</source>
          <target>You can use the thread pool to:</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Submit work items, control their priority, and cancel work items.</source>
          <target>Submit work items, control their priority, and cancel work items.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Schedule work items using timers and periodic timers.</source>
          <target>Schedule work items using timers and periodic timers.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Set aside resources for critical work items.</source>
          <target>Set aside resources for critical work items.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Run work items in response to named events and semaphores.</source>
          <target>Run work items in response to named events and semaphores.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>The thread pool is more efficient at managing threads because it reduces the overhead of creating and destroying threads.</source>
          <target>The thread pool is more efficient at managing threads because it reduces the overhead of creating and destroying threads.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>The means it has access to optimize threads across multiple CPU cores, and it can balance thread resources between apps and when background tasks are running.</source>
          <target>The means it has access to optimize threads across multiple CPU cores, and it can balance thread resources between apps and when background tasks are running.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Using the built-in thread pool is convenient because you focus on writing code that accomplishes a task instead of the mechanics of thread management.</source>
          <target>Using the built-in thread pool is convenient because you focus on writing code that accomplishes a task instead of the mechanics of thread management.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Topic</source>
          <target>Topic</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Asynchronous programming (UWP apps)</source>
          <target>Asynchronous programming (UWP apps)</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C++ component extensions (C++/CX), and JavaScript.</source>
          <target>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C++ component extensions (C++/CX), and JavaScript.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Asynchronous programming in C++ (UWP apps)</source>
          <target>Asynchronous programming in C++ (UWP apps)</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">&lt;code&gt;task&lt;/code&gt;</data>
          <data id="id2">&lt;code&gt;concurrency&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>This article describes the recommended way to consume asynchronous methods in C++/CX by using the <ph dataRef="id1" id="ph1" /> class that's defined in the <ph dataRef="id2" id="ph2" /> namespace in ppltasks.h.</source>
          <target>This article describes the recommended way to consume asynchronous methods in C++/CX by using the <ph dataRef="id1" id="ph1" /> class that's defined in the <ph dataRef="id2" id="ph2" /> namespace in ppltasks.h.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Best practices for using the thread pool</source>
          <target>Best practices for using the thread pool</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>This topic describes best practices for working with the thread pool.</source>
          <target>This topic describes best practices for working with the thread pool.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Call asynchronous APIs in C# or Visual Basic</source>
          <target>Call asynchronous APIs in C# or Visual Basic</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</source>
          <target>The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.</source>
          <target>This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Create a periodic work item</source>
          <target>Create a periodic work item</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Learn how to create a work item that repeats periodically.</source>
          <target>Learn how to create a work item that repeats periodically.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Submit a work item to the thread pool</source>
          <target>Submit a work item to the thread pool</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Learn how to do work in a separate thread by submitting a work item to the thread pool.</source>
          <target>Learn how to do work in a separate thread by submitting a work item to the thread pool.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Use a timer to submit a work item</source>
          <target>Use a timer to submit a work item</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Learn how to create a work item that runs after a timer elapses.</source>
          <target>Learn how to create a work item that runs after a timer elapses.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>