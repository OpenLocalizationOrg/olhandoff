<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\gaming\render-the-scene-with-depth-testing.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">2bac8e8337a10a8411b02eeed53d772dbb5abad6</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Render the scene with depth testing</source>
          <target>Render the scene with depth testing</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Create a shadow effect by adding depth testing to your vertex (or geometry) shader and your pixel shader.</source>
          <target>Create a shadow effect by adding depth testing to your vertex (or geometry) shader and your pixel shader.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Render the scene with depth testing</source>
          <target>Render the scene with depth testing</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Create a shadow effect by adding depth testing to your vertex (or geometry) shader and your pixel shader.</source>
          <target>Create a shadow effect by adding depth testing to your vertex (or geometry) shader and your pixel shader.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](implementing-depth-buffers-for-shadow-mapping.md)</data>
        </originalData>
        <segment state="initial">
          <source>Part 3 of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Walkthrough: Implement shadow volumes using depth buffers in Direct3D 11</pc>.</source>
          <target>Part 3 of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Walkthrough: Implement shadow volumes using depth buffers in Direct3D 11</pc>.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Include transformation for light frustum</source>
          <target>Include transformation for light frustum</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Your vertex shader needs to compute the transformed light space position for each vertex.</source>
          <target>Your vertex shader needs to compute the transformed light space position for each vertex.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Provide the light space model, view, and projection matrices using a constant buffer.</source>
          <target>Provide the light space model, view, and projection matrices using a constant buffer.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>You can also use this constant buffer to provide the light position and normal for lighting calculations.</source>
          <target>You can also use this constant buffer to provide the light position and normal for lighting calculations.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>The transformed position in light space will be used during the depth test.</source>
          <target>The transformed position in light space will be used during the depth test.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Next, the pixel shader will use the interpolated light space position provided by the vertex shader to test whether the pixel is in shadow.</source>
          <target>Next, the pixel shader will use the interpolated light space position provided by the vertex shader to test whether the pixel is in shadow.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Test whether the position is in the light frustum</source>
          <target>Test whether the position is in the light frustum</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>First, check that the pixel is in the view frustum of the light by normalizing the X and Y coordinates.</source>
          <target>First, check that the pixel is in the view frustum of the light by normalizing the X and Y coordinates.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>If they are both within the range <ph dataRef="id1" id="ph1" />0, 1<ph dataRef="id2" id="ph2" /> then it's possible for the pixel to be in shadow.</source>
          <target>If they are both within the range <ph dataRef="id1" id="ph1" />0, 1<ph dataRef="id2" id="ph2" /> then it's possible for the pixel to be in shadow.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Otherwise you can skip the depth test.</source>
          <target>Otherwise you can skip the depth test.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh447231)</data>
        </originalData>
        <segment state="initial">
          <source>A shader can test for this quickly by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Saturate</pc> and comparing the result against the original value.</source>
          <target>A shader can test for this quickly by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Saturate</pc> and comparing the result against the original value.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Depth test against the shadow map</source>
          <target>Depth test against the shadow map</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb509696)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/desktop/bb509697)</data>
        </originalData>
        <segment state="initial">
          <source>Use a sample comparison function (either <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SampleCmp</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SampleCmpLevelZero</pc>) to test the pixel's depth in light space against the depth map.</source>
          <target>Use a sample comparison function (either <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SampleCmp</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SampleCmpLevelZero</pc>) to test the pixel's depth in light space against the depth map.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">`z / w`</data>
        </originalData>
        <segment state="initial">
          <source>Compute the normalized light space depth value, which is <ph dataRef="id1" id="ph1" />, and pass the value to the comparison function.</source>
          <target>Compute the normalized light space depth value, which is <ph dataRef="id1" id="ph1" />, and pass the value to the comparison function.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Since we use a LessOrEqual comparison test for the sampler, the intrinsic function returns zero when the comparison test passes; this indicates that the pixel is in shadow.</source>
          <target>Since we use a LessOrEqual comparison test for the sampler, the intrinsic function returns zero when the comparison test passes; this indicates that the pixel is in shadow.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Compute lighting in or out of shadow</source>
          <target>Compute lighting in or out of shadow</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>If the pixel is not in shadow, the pixel shader should compute direct lighting and add it to the pixel value.</source>
          <target>If the pixel is not in shadow, the pixel shader should compute direct lighting and add it to the pixel value.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Otherwise, the pixel shader should compute the pixel value using ambient lighting.</source>
          <target>Otherwise, the pixel shader should compute the pixel value using ambient lighting.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](target-a-range-of-hardware.md)</data>
        </originalData>
        <segment state="initial">
          <source>In the next part of this walkthrough, learn how to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Support shadow maps on a range of hardware</pc>.</source>
          <target>In the next part of this walkthrough, learn how to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Support shadow maps on a range of hardware</pc>.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>