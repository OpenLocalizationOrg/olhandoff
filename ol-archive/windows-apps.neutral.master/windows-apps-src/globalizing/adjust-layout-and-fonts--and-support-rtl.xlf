<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\globalizing\adjust-layout-and-fonts--and-support-rtl.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">989d810724c925a5bcbebf5f7fb301636905fff9</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Develop your app to support the layouts and fonts of multiple languages, including RTL (right-to-left) flow direction.</source>
          <target>Develop your app to support the layouts and fonts of multiple languages, including RTL (right-to-left) flow direction.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Adjust layout and fonts, and support RTL</source>
          <target>Adjust layout and fonts, and support RTL</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Adjust layout and fonts, and support RTL</source>
          <target>Adjust layout and fonts, and support RTL</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Develop your app to support the layouts and fonts of multiple languages, including RTL (right-to-left) flow direction.</source>
          <target>Develop your app to support the layouts and fonts of multiple languages, including RTL (right-to-left) flow direction.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Layout guidelines</source>
          <target>Layout guidelines</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Some languages, such as German and Finnish, require more space than English for their text.</source>
          <target>Some languages, such as German and Finnish, require more space than English for their text.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>The fonts for some languages, such as Japanese, require more height.</source>
          <target>The fonts for some languages, such as Japanese, require more height.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>And some languages, such as Arabic and Hebrew, require that text layout and app layout must be in right-to-left (RTL) reading order.</source>
          <target>And some languages, such as Arabic and Hebrew, require that text layout and app layout must be in right-to-left (RTL) reading order.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Use flexible layout mechanisms instead of absolute positioning, fixed widths, or fixed heights.</source>
          <target>Use flexible layout mechanisms instead of absolute positioning, fixed widths, or fixed heights.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>When necessary, particular UI elements can be adjusted based on language.</source>
          <target>When necessary, particular UI elements can be adjusted based on language.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uid</pc> for an element:</source>
          <target>Specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uid</pc> for an element:</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Ensure that your app's ResW file has a resource for Block1.Width, which you can set for each language that you localize into.</source>
          <target>Ensure that your app's ResW file has a resource for Block1.Width, which you can set for each language that you localize into.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">\#</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/library/windows/apps/br208716)</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>For Windows Store apps using C++, C<ph dataRef="id1" id="ph1" />, or Visual Basic, use the <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">FlowDirection</pc></pc> property, with symmetrical padding and margins, to enable localization for other layout directions.</source>
          <target>For Windows Store apps using C++, C<ph dataRef="id1" id="ph1" />, or Visual Basic, use the <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">FlowDirection</pc></pc> property, with symmetrical padding and margins, to enable localization for other layout directions.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242704)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208716)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>XAML layout controls such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> scale and flip automatically with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FlowDirection</pc></pc> property.</source>
          <target>XAML layout controls such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> scale and flip automatically with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FlowDirection</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Expose your own <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlowDirection</pc> property in your app as a resource for localizers.</source>
          <target>Expose your own <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlowDirection</pc> property in your app as a resource for localizers.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uid</pc> for the main page of your app:</source>
          <target>Specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uid</pc> for the main page of your app:</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Ensure that your app's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResW</pc> file has a resource for MainPage.FlowDirection, which you can set for each language that you localize into.</source>
          <target>Ensure that your app's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResW</pc> file has a resource for MainPage.FlowDirection, which you can set for each language that you localize into.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>HTML</source>
          <target>HTML</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/ms531209)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/en-us/library/windows/apps/hh465453.aspx#g_section)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/hh465453.aspx#f_section)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows Store apps using JavaScript, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cascading Style Sheets (CSS)</pc> layout mechanisms such as <pc dataRefEnd="id4" dataRefStart="id3" id="p2">-ms-grid</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">–ms-box</pc>.</source>
          <target>For Windows Store apps using JavaScript, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cascading Style Sheets (CSS)</pc> layout mechanisms such as <pc dataRefEnd="id4" dataRefStart="id3" id="p2">-ms-grid</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">–ms-box</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Use symmetrical padding and margins to enable localization for various layout directions.</source>
          <target>Use symmetrical padding and margins to enable localization for various layout directions.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/cc848867)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Your app can also use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">:-ms-lang()</pc></pc> pseudo-class selector to adjust CSS properties such as width on particular elements based on the language of the app.</source>
          <target>Your app can also use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">:-ms-lang()</pc></pc> pseudo-class selector to adjust CSS properties such as width on particular elements based on the language of the app.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To enable this, the App Host sets the root element's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">lang</pc> attribute to the app language.</source>
          <target>To enable this, the App Host sets the root element's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">lang</pc> attribute to the app language.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>CSS</source>
          <target>CSS</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Windows Store apps using JavaScript that use the ui-light.css or ui-dark.css style sheets have their body layout direction set automatically, based on the app language.</source>
          <target>Windows Store apps using JavaScript that use the ui-light.css or ui-dark.css style sheets have their body layout direction set automatically, based on the app language.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>The following CSS is in ui-light and ui-dark.css, and you don't need to write it yourself.</source>
          <target>The following CSS is in ui-light and ui-dark.css, and you don't need to write it yourself.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>CSS</source>
          <target>CSS</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>This means that most app layouts are set correctly when the system uses a right-to-left language.</source>
          <target>This means that most app layouts are set correctly when the system uses a right-to-left language.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br229782)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/cc848867)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source>Like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI</pc> controls, your app can use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">:-ms-lang()</pc></pc> pseudo-class selector to adjust physical CSS properties, such as <pc dataRefEnd="id8" dataRefStart="id7" id="p4">margin</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">padding</pc>.</source>
          <target>Like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI</pc> controls, your app can use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">:-ms-lang()</pc></pc> pseudo-class selector to adjust physical CSS properties, such as <pc dataRefEnd="id8" dataRefStart="id7" id="p4">margin</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">padding</pc>.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You don't need to adjust logical CSS properties that use keywords such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">after</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">before</pc>.</source>
          <target>You don't need to adjust logical CSS properties that use keywords such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">after</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">before</pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Don't use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">align</pc> property or attribute in HTML.</source>
          <target>Don't use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">align</pc> property or attribute in HTML.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Instead, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">direction</pc> property to control alignment of particular components.</source>
          <target>Instead, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">direction</pc> property to control alignment of particular components.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/ms531187)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">writing-mode</pc></pc> property to support vertical text layouts in CSS.</source>
          <target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">writing-mode</pc></pc> property to support vertical text layouts in CSS.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Mirroring images</source>
          <target>Mirroring images</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>XAML</source>
          <target>XAML</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208716)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If your app has images that must be mirrored (that is, the same image can be flipped) for RTL, you can apply the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FlowDirection</pc></pc> property:</source>
          <target>If your app has images that must be mirrored (that is, the same image can be flipped) for RTL, you can apply the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FlowDirection</pc></pc> property:</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>HTML</source>
          <target>HTML</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>If your app has images that must be mirrored (that is, the same image can be flipped) for RTL, you can use CSS transforms to mirror your images at rendering time by adding a .mirrorable class to your elements and adding the following CSS class:</source>
          <target>If your app has images that must be mirrored (that is, the same image can be flipped) for RTL, you can use CSS transforms to mirror your images at rendering time by adding a .mirrorable class to your elements and adding the following CSS class:</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">For both XAML and HTML:</pc> If your app requires a different image to flip the image correctly, you can use the resource management system with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">layoutdir qualifier</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">For both XAML and HTML:</pc> If your app requires a different image to flip the image correctly, you can use the resource management system with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">layoutdir qualifier</pc>.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](manage-language-and-region.md)</data>
        </originalData>
        <segment state="initial">
          <source>The system chooses an image named file.layoutdir-rtl.png when the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">application language</pc> is set to an RTL language.</source>
          <target>The system chooses an image named file.layoutdir-rtl.png when the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">application language</pc> is set to an RTL language.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>This approach may be necessary when some part of the image is flipped, but another part isn't.</source>
          <target>This approach may be necessary when some part of the image is flipped, but another part isn't.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Fonts</source>
          <target>Fonts</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br206864)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">For both XAML and HTML:</pc> Use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">LanguageFont</pc></pc> font-mapping APIs for programmatic access to the recommended font family, size, weight, and style for a particular language.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">For both XAML and HTML:</pc> Use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">LanguageFont</pc></pc> font-mapping APIs for programmatic access to the recommended font family, size, weight, and style for a particular language.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LanguageFont</pc> object provides access to the correct font info for various categories of content including UI headers, notifications, body text, and user-editable document body fonts.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LanguageFont</pc> object provides access to the correct font info for various categories of content including UI headers, notifications, body text, and user-editable document body fonts.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>HTML</source>
          <target>HTML</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Windows Store apps using JavaScript that use the ui-light.css or ui-dark.css style sheets have their font set automatically to the most appropriate font, based on the app language.</source>
          <target>Windows Store apps using JavaScript that use the ui-light.css or ui-dark.css style sheets have their font set automatically to the most appropriate font, based on the app language.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The App Host sets the root element's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">lang</pc> attribute to the app language.</source>
          <target>The App Host sets the root element's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">lang</pc> attribute to the app language.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Apps that display multiple languages on a single page should set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">lang</pc> attribute for the section in each language.</source>
          <target>Apps that display multiple languages on a single page should set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">lang</pc> attribute for the section in each language.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/cc848867)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">:-ms-lang()</pc></pc> pseudo-class selector picks up the correct font for each section of the page.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">:-ms-lang()</pc></pc> pseudo-class selector picks up the correct font for each section of the page.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>