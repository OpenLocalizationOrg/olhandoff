<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\porting\desktop-to-uwp-deploy-and-debug.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">14634c12435cd8d6d4471a65c0f8deb36e3b1c80</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Deploy and debug a Universal Windows Platform (UWP) app converted from a Windows desktop application (Win32, WPF, and Windows Forms) by using the Desktop Conversion extensions.</source>
          <target>Deploy and debug a Universal Windows Platform (UWP) app converted from a Windows desktop application (Win32, WPF, and Windows Forms) by using the Desktop Conversion extensions.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Deploy and debug a Universal Windows Platform (UWP) app converted from a Windows desktop application</source>
          <target>Deploy and debug a Universal Windows Platform (UWP) app converted from a Windows desktop application</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Deploy and debug your converted UWP app (Project Centennial)</source>
          <target>Deploy and debug your converted UWP app (Project Centennial)</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target>Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.</source>
          <target>Microsoft makes no warranties, express or implied, with respect to the information provided here.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>This topic contains info to help you be successful deploying and debugging your app after converting it.</source>
          <target>This topic contains info to help you be successful deploying and debugging your app after converting it.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Also, if you're curious about some of the internals of the Desktop Conversion extensions, then this topic is for you.</source>
          <target>Also, if you're curious about some of the internals of the Desktop Conversion extensions, then this topic is for you.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Debug your converted UWP app</source>
          <target>Debug your converted UWP app</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>You have two main options for debugging your converted app using Visual Studio.</source>
          <target>You have two main options for debugging your converted app using Visual Studio.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Attach to process</source>
          <target>Attach to process</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">__</data>
          <data id="id2">__</data>
          <data id="id3">__</data>
          <data id="id4">__</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/bb625963)</data>
        </originalData>
        <segment state="initial">
          <source>When Microsoft Visual Studio is running "as administrator", the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Without Debugging</pc> commands will work for a converted app's project, but the launched app will run with <pc dataRefEnd="id6" dataRefStart="id5" id="p3">medium integrity level</pc>.</source>
          <target>When Microsoft Visual Studio is running "as administrator", the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Without Debugging</pc> commands will work for a converted app's project, but the launched app will run with <pc dataRefEnd="id6" dataRefStart="id5" id="p3">medium integrity level</pc>.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">_</data>
          <data id="id2">_</data>
        </originalData>
        <segment state="initial">
          <source>That is, it will <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> have elevated privileges.</source>
          <target>That is, it will <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> have elevated privileges.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>To confer administrator privileges onto the launched app, first you need to launch the "as administrator" via a shortcut or a tile.</source>
          <target>To confer administrator privileges onto the launched app, first you need to launch the "as administrator" via a shortcut or a tile.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">__</data>
          <data id="id2">__</data>
        </originalData>
        <segment state="initial">
          <source>Once the app is running, from an instance of Microsoft Visual Studio running "as administrator", invoke the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Attach to Process</pc> and select your app's process from the dialog.</source>
          <target>Once the app is running, from an instance of Microsoft Visual Studio running "as administrator", invoke the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Attach to Process</pc> and select your app's process from the dialog.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>F5 debug</source>
          <target>F5 debug</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Visual Studio now supports a new packaging project that enables you to automatically copy any updates you make when you build your application into the AppX package created when you ran the converter on your application’s installer.</source>
          <target>Visual Studio now supports a new packaging project that enables you to automatically copy any updates you make when you build your application into the AppX package created when you ran the converter on your application’s installer.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Once you configure the packaging projectyou can now also use F5 to debug directly into the AppX package.</source>
          <target>Once you configure the packaging projectyou can now also use F5 to debug directly into the AppX package.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Here's how to get started:</source>
          <target>Here's how to get started:</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>First, ensure you're set up to use Centennial.</source>
          <target>First, ensure you're set up to use Centennial.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/windows/uwp/porting/desktop-to-uwp-run-desktop-app-converter)</data>
        </originalData>
        <segment state="initial">
          <source>For instructions, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Desktop App Converter Preview (Project Centennial)</pc>.</source>
          <target>For instructions, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Desktop App Converter Preview (Project Centennial)</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Run the converter and then installer for your Win32 application.</source>
          <target>Run the converter and then installer for your Win32 application.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>The converter captures the layout, and any changes made to the registry and outputs an Appx with manifest and registery.dat to virtualize the registry:</source>
          <target>The converter captures the layout, and any changes made to the registry and outputs an Appx with manifest and registery.dat to virtualize the registry:</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>alt</source>
          <target>alt</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://www.visualstudio.com/downloads/visual-studio-next-downloads-vs.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>Install and launch <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio "15" Preview 2</pc>.</source>
          <target>Install and launch <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio "15" Preview 2</pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=797871)</data>
        </originalData>
        <segment state="initial">
          <source>Install the Desktop to UWP Packaging VSIX project from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Gallery</pc>.</source>
          <target>Install the Desktop to UWP Packaging VSIX project from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Gallery</pc>.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Open the corresponding Win32 solution that was converted in Visual Studio.</source>
          <target>Open the corresponding Win32 solution that was converted in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Add the new packaging project to your solution by right clicking on the solution and choosing "Add New Project".</source>
          <target>Add the new packaging project to your solution by right clicking on the solution and choosing "Add New Project".</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Then pick the Desktop to UWP Packaging Project under Setup and Deployment:</source>
          <target>Then pick the Desktop to UWP Packaging Project under Setup and Deployment:</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>alt</source>
          <target>alt</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>The resulting project will be added to your solution:</source>
          <target>The resulting project will be added to your solution:</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>alt</source>
          <target>alt</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>In the Packaging project, the AppXFileList provides a mapping of files into the AppX layout.</source>
          <target>In the Packaging project, the AppXFileList provides a mapping of files into the AppX layout.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>References begins empty, but should be manually set to the .exe project for build ordering.</source>
          <target>References begins empty, but should be manually set to the .exe project for build ordering.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>The DesktopToUWPPackaging project has a property page which allows you to configure the AppX package root and which tile to execute:</source>
          <target>The DesktopToUWPPackaging project has a property page which allows you to configure the AppX package root and which tile to execute:</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>alt</source>
          <target>alt</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Set the PackageLayout to the root location of the AppX that was created by the converter (above).</source>
          <target>Set the PackageLayout to the root location of the AppX that was created by the converter (above).</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Then pick which tile to execute.</source>
          <target>Then pick which tile to execute.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Open and edit the AppXFileList.xml.</source>
          <target>Open and edit the AppXFileList.xml.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>This file defines how to copy the output of the Win32 debug build into the AppX layout  the converter built.</source>
          <target>This file defines how to copy the output of the Win32 debug build into the AppX layout  the converter built.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>By default, we have a placeholder in the file with an example tag and comment:</source>
          <target>By default, we have a placeholder in the file with an example tag and comment:</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Below is an example of creating the mapping.</source>
          <target>Below is an example of creating the mapping.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>In this case, we copy the .exe and .dll from the Win32 build location into the package layout location.</source>
          <target>In this case, we copy the .exe and .dll from the Win32 build location into the package layout location.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>The file is defined as follows:</source>
          <target>The file is defined as follows:</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>First, we define <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MyProjectOutputPath</pc> to point at the location where the Win32 project is building to:</source>
          <target>First, we define <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MyProjectOutputPath</pc> to point at the location where the Win32 project is building to:</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Then, each <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LayoutFile</pc> specifies a file to copy from the Win32 build location to the Appx Package layout.</source>
          <target>Then, each <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LayoutFile</pc> specifies a file to copy from the Win32 build location to the Appx Package layout.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>In this case first a .exe, then a .dll are copied.</source>
          <target>In this case first a .exe, then a .dll are copied.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Set the packaging project the start-up project.</source>
          <target>Set the packaging project the start-up project.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>This will copy the Win32 files into the AppX and then launch the debugger when the project is built and run.</source>
          <target>This will copy the Win32 files into the AppX and then launch the debugger when the project is built and run.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>alt</source>
          <target>alt</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Finally, you can now set a breakpoint in the Win32 code and hit F5 to launch the debugger.</source>
          <target>Finally, you can now set a breakpoint in the Win32 code and hit F5 to launch the debugger.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>It will copy any updates you have made to your Win32 application across to the AppX package and allow you to debug directly from within Visual Studio.</source>
          <target>It will copy any updates you have made to your Win32 application across to the AppX package and allow you to debug directly from within Visual Studio.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>If you update your application, you'll need to use MakeAppX to repackage your app again.</source>
          <target>If you update your application, you'll need to use MakeAppX to repackage your app again.</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/desktop/hh446767(v=vs.85).aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App packager (MakeAppx.exe)</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App packager (MakeAppx.exe)</pc>.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>If you have multiple build configurations (for instance for release and debug), you can add the following to the AppXFileList.xml file to copy the Win32 build from different locations:</source>
          <target>If you have multiple build configurations (for instance for release and debug), you can add the following to the AppXFileList.xml file to copy the Win32 build from different locations:</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>You can also use conditional compilation to enable particular code paths if you update your application to UWP but also still want to build it for Win32.</source>
          <target>You can also use conditional compilation to enable particular code paths if you update your application to UWP but also still want to build it for Win32.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>In the example below the code will only be compiled for DesktopUWP and will show a tile using the WinRT API.</source>
          <target>In the example below the code will only be compiled for DesktopUWP and will show a tile using the WinRT API.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>You can use Configuration Manager to add the new build configuration:</source>
          <target>You can use Configuration Manager to add the new build configuration:</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>alt</source>
          <target>alt</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>alt</source>
          <target>alt</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Then under the project properties add support for conditional compilation symbols:</source>
          <target>Then under the project properties add support for conditional compilation symbols:</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>alt</source>
          <target>alt</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>You can now toggle the build target to DesktopUWP if you want to build to target the UWP API you added.</source>
          <target>You can now toggle the build target to DesktopUWP if you want to build to target the UWP API you added.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Deploy your converted UWP app</source>
          <target>Deploy your converted UWP app</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>To deploy your app during development, run the following PowerShell cmdlet:</source>
          <target>To deploy your app during development, run the following PowerShell cmdlet:</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>To update your app's .exe or .dll files, simply replace the existing files in your package with the new ones, increase the version number in AppxManifest.xml, and then run the above command again.</source>
          <target>To update your app's .exe or .dll files, simply replace the existing files in your package with the new ones, increase the version number in AppxManifest.xml, and then run the above command again.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>Note the following:</source>
          <target>Note the following:</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>Any drive that you install your converted app on to must be formatted to NTFS format.</source>
          <target>Any drive that you install your converted app on to must be formatted to NTFS format.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>A converted app always runs as the interactive user.</source>
          <target>A converted app always runs as the interactive user.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">__</data>
          <data id="id2">__</data>
        </originalData>
        <segment state="initial">
          <source>This has particular significance for a .NET app whose manifest specifies an execution level of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">requireAdministrator</pc>.</source>
          <target>This has particular significance for a .NET app whose manifest specifies an execution level of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">requireAdministrator</pc>.</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">_</data>
          <data id="id2">_</data>
        </originalData>
        <segment state="initial">
          <source>If the interactive user has administrator privileges then a UAC prompt will be displayed <pc dataRefEnd="id2" dataRefStart="id1" id="p1">each time the app is launched</pc>.</source>
          <target>If the interactive user has administrator privileges then a UAC prompt will be displayed <pc dataRefEnd="id2" dataRefStart="id1" id="p1">each time the app is launched</pc>.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>For standard users, the app will fail to launch.</source>
          <target>For standard users, the app will fail to launch.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>If you try to run the Add-AppxPackage cmdlet on a machine where you haven't imported the cert you created, you'll get an error.</source>
          <target>If you try to run the Add-AppxPackage cmdlet on a machine where you haven't imported the cert you created, you'll get an error.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>Before you deploy your app, you'll need to sign it with a certificate.</source>
          <target>Before you deploy your app, you'll need to sign it with a certificate.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/windows/uwp/porting/desktop-to-uwp-run-desktop-app-converter#deploy-your-converted-appx)</data>
        </originalData>
        <segment state="initial">
          <source>For information on creating a certificate, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Sign your .Appx Package</pc>.</source>
          <target>For information on creating a certificate, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Sign your .Appx Package</pc>.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>Here's how you import a certificate that you created previously.</source>
          <target>Here's how you import a certificate that you created previously.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>You can install it directly, or you can install it from an appx that you've signed, like the customer will.</source>
          <target>You can install it directly, or you can install it from an appx that you've signed, like the customer will.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In File Explorer, right click an appx that you've signed with a test cert and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc> from the context menu.</source>
          <target>In File Explorer, right click an appx that you've signed with a test cert and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc> from the context menu.</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click or tap the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Digital Signatures</pc> tab.</source>
          <target>Click or tap the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Digital Signatures</pc> tab.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click or tap on the certificate and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Details</pc>.</source>
          <target>Click or tap on the certificate and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Details</pc>.</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">View Certificate</pc>.</source>
          <target>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">View Certificate</pc>.</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Install Certificate</pc>.</source>
          <target>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Install Certificate</pc>.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store Location</pc> group, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Local Machine</pc>.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store Location</pc> group, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Local Machine</pc>.</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc> to confirm the UAC dialog.</source>
          <target>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc> to confirm the UAC dialog.</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the next screen of the Certificate Import Wizard, change the selected option to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Place all certificates in the following store</pc>.</source>
          <target>In the next screen of the Certificate Import Wizard, change the selected option to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Place all certificates in the following store</pc>.</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Browse</pc>.</source>
          <target>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Browse</pc>.</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the Select Certificate Store window, scroll down and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trusted People</pc> and click or tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc>.</source>
          <target>In the Select Certificate Store window, scroll down and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trusted People</pc> and click or tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc>.</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc>.</source>
          <target>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc>.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>A new screen appears.</source>
          <target>A new screen appears.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Finish</pc>.</source>
          <target>Click or tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Finish</pc>.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>A confirmation dialog should appear.</source>
          <target>A confirmation dialog should appear.</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If so, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc>.</source>
          <target>If so, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc>.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>If a different dialog indicates that there is a problem with the certificate, you may need to do some certificate troubleshooting.</source>
          <target>If a different dialog indicates that there is a problem with the certificate, you may need to do some certificate troubleshooting.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For Windows to trust the certificate, the certificate must be located in either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certificates (Local Computer) &gt; Trusted Root Certification Authorities &gt; Certificates</pc> node or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Certificates (Local Computer) &gt; Trusted People &gt; Certificates</pc> node.</source>
          <target>For Windows to trust the certificate, the certificate must be located in either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certificates (Local Computer) &gt; Trusted Root Certification Authorities &gt; Certificates</pc> node or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Certificates (Local Computer) &gt; Trusted People &gt; Certificates</pc> node.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>Only certificates in these two locations can validate the certificate trust in the context of the local machine.</source>
          <target>Only certificates in these two locations can validate the certificate trust in the context of the local machine.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>Otherwise, an error message that resembles the following string appears:</source>
          <target>Otherwise, an error message that resembles the following string appears:</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>Behind the scenes</source>
          <target>Behind the scenes</target>
        </segment>
      </unit>
      <unit id="197">
        <originalData>
          <data id="id1">\\&amp;lt;</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
          <data id="id4">&amp;gt;\\&amp;lt;</data>
          <data id="id5">_</data>
          <data id="id6">_</data>
          <data id="id7">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When you run your converted app, your UWP app package is launched from \Program Files\WindowsApps<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">package name</pc><ph dataRef="id4" id="ph2" /><pc dataRefEnd="id6" dataRefStart="id5" id="p2">appname</pc><ph dataRef="id7" id="ph3" />.exe.</source>
          <target>When you run your converted app, your UWP app package is launched from \Program Files\WindowsApps<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">package name</pc><ph dataRef="id4" id="ph2" /><pc dataRefEnd="id6" dataRefStart="id5" id="p2">appname</pc><ph dataRef="id7" id="ph3" />.exe.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>If you look there, you'll see that your app has an app package manifest (named AppxManifest.xml), which references a special xml namespace that's used for converted apps.</source>
          <target>If you look there, you'll see that your app has an app package manifest (named AppxManifest.xml), which references a special xml namespace that's used for converted apps.</target>
        </segment>
      </unit>
      <unit id="199">
        <originalData>
          <data id="id1">__</data>
          <data id="id2">__</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Inside that manifest file is an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />EntryPoint<ph dataRef="id4" id="ph2" /></pc> element, which references a full-trust app.</source>
          <target>Inside that manifest file is an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />EntryPoint<ph dataRef="id4" id="ph2" /></pc> element, which references a full-trust app.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>When that app is launched, it does not run inside an app container, but instead it runs as the user as it normally would.</source>
          <target>When that app is launched, it does not run inside an app container, but instead it runs as the user as it normally would.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>But the app runs in a special environment where any accesses that the app makes to the file system and to the Registry are redirected.</source>
          <target>But the app runs in a special environment where any accesses that the app makes to the file system and to the Registry are redirected.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>The file named Registry.dat is used for Registry redirection.</source>
          <target>The file named Registry.dat is used for Registry redirection.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>It's actually a Registry hive, so you can view it in the Windows Registry Editor (Regedit).</source>
          <target>It's actually a Registry hive, so you can view it in the Windows Registry Editor (Regedit).</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>Note, that this mechanism means that you can't use the Registry for inter-process communication.</source>
          <target>Note, that this mechanism means that you can't use the Registry for inter-process communication.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>The Registry wasn't designed for, and is not well-suited to, that practice in any case.</source>
          <target>The Registry wasn't designed for, and is not well-suited to, that practice in any case.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>When it comes to the file system, the only thing redirected is the AppData folder, and it is redirected to the same location that app data is stored for all UWP apps.</source>
          <target>When it comes to the file system, the only thing redirected is the AppData folder, and it is redirected to the same location that app data is stored for all UWP apps.</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241621)</data>
        </originalData>
        <segment state="initial">
          <source>This location is known as the local app data store, and you access it by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ApplicationData.LocalFolder</pc> property.</source>
          <target>This location is known as the local app data store, and you access it by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ApplicationData.LocalFolder</pc> property.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>This way, your code is already ported to read and write app data in the correct place without you doing anything.</source>
          <target>This way, your code is already ported to read and write app data in the correct place without you doing anything.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>And you can also write there directly.</source>
          <target>And you can also write there directly.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>One benefit of file system redirection is a cleaner uninstall experience.</source>
          <target>One benefit of file system redirection is a cleaner uninstall experience.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>Inside a folder named VFS, you will see folders that contain the DLLs that your app has dependencies on.</source>
          <target>Inside a folder named VFS, you will see folders that contain the DLLs that your app has dependencies on.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>These DLLs are installed into system folders for the classic desktop version of your app.</source>
          <target>These DLLs are installed into system folders for the classic desktop version of your app.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>But, as a UWP app, the DLLs are local to your app.</source>
          <target>But, as a UWP app, the DLLs are local to your app.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>This way, there are no versioning problems when UWP apps are installed and uninstalled.</source>
          <target>This way, there are no versioning problems when UWP apps are installed and uninstalled.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>See also</source>
          <target>See also</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source>Convert your desktop application to a Universal Windows Platform (UWP) app</source>
          <target>Convert your desktop application to a Universal Windows Platform (UWP) app</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Desktop App Converter Preview (Project Centennial)</source>
          <target>Desktop App Converter Preview (Project Centennial)</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>Manually convert your Windows desktop application to a Universal Windows Platform (UWP) app</source>
          <target>Manually convert your Windows desktop application to a Universal Windows Platform (UWP) app</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>Desktop app bridge to UWP code samples on GitHub</source>
          <target>Desktop app bridge to UWP code samples on GitHub</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>