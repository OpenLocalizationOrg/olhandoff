<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\winrt-components\walkthrough-creating-a-basic-windows-runtime-component-in-cpp-and-calling-it-from-javascript-or-csharp.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">860333e3239198cd54eea061195e2a51d786821b</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</source>
          <target>Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</source>
          <target>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Walkthrough: Creating a Windows Runtime component in C++ and calling it from JavaScript or C</source>
          <target>Walkthrough: Creating a Windows Runtime component in C++ and calling it from JavaScript or C</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</source>
          <target>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Before you begin this walkthrough, make sure that you understand concepts such as the Abstract Binary Interface (ABI), ref classes, and the Visual C++ Component Extensions that make working with ref classes easier.</source>
          <target>Before you begin this walkthrough, make sure that you understand concepts such as the Abstract Binary Interface (ABI), ref classes, and the Visual C++ Component Extensions that make working with ref classes easier.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](creating-windows-runtime-components-in-cpp.md)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699871.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C++</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C++ Language Reference (C++/CX)</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C++</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C++ Language Reference (C++/CX)</pc>.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Creating the C++ component DLL</source>
          <target>Creating the C++ component DLL</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>In this example, we create the component project first, but you could create the JavaScript project first.</source>
          <target>In this example, we create the component project first, but you could create the JavaScript project first.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>The order doesn’t matter.</source>
          <target>The order doesn’t matter.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Notice that the main class of the component contains examples of property and method definitions, and an event declaration.</source>
          <target>Notice that the main class of the component contains examples of property and method definitions, and an event declaration.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>These are provided just to show you how it's done.</source>
          <target>These are provided just to show you how it's done.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>They are not required, and in this example, we'll replace all of the generated code with our own code.</source>
          <target>They are not required, and in this example, we'll replace all of the generated code with our own code.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>To create the C++ component project</source>
          <target>To create the C++ component project</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On the Visual Studio menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File, New, Project</pc>.</source>
          <target>On the Visual Studio menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File, New, Project</pc>.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, in the left pane, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C++</pc> and then select the node for Universal Windows apps.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, in the left pane, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C++</pc> and then select the node for Universal Windows apps.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>In the center pane, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime Component</pc> and then name the project WinRT<ph dataRef="id3" id="ph1" />CPP.</source>
          <target>In the center pane, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime Component</pc> and then name the project WinRT<ph dataRef="id3" id="ph1" />CPP.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
          <target>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>To add an activatable class to the component</source>
          <target>To add an activatable class to the component</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>An activatable class is one that client code can create by using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">new</pc> expression (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc> in Visual Basic, or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ref new</pc> in C++).</source>
          <target>An activatable class is one that client code can create by using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">new</pc> expression (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc> in Visual Basic, or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ref new</pc> in C++).</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In your component, you declare it as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public ref class sealed</pc>.</source>
          <target>In your component, you declare it as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public ref class sealed</pc>.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>In fact, the Class1.h and .cpp files already have a ref class.</source>
          <target>In fact, the Class1.h and .cpp files already have a ref class.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>You can change the name, but in this example we’ll use the default name—Class1.</source>
          <target>You can change the name, but in this example we’ll use the default name—Class1.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>You can define additional ref classes or regular classes in your component if they are required.</source>
          <target>You can define additional ref classes or regular classes in your component if they are required.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh755822.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about ref classes, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Type System (C++/CX)</pc>.</source>
          <target>For more information about ref classes, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Type System (C++/CX)</pc>.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">\#</data>
        </originalData>
        <segment state="initial">
          <source>Add these <ph dataRef="id1" id="ph1" />include directives to Class1.h:</source>
          <target>Add these <ph dataRef="id1" id="ph1" />include directives to Class1.h:</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>collection.h is the header file for C++ concrete classes such as the Platform::Collections::Vector class and the Platform::Collections::Map class, which implement language-neutral interfaces that are defined by the Windows Runtime.</source>
          <target>collection.h is the header file for C++ concrete classes such as the Platform::Collections::Vector class and the Platform::Collections::Map class, which implement language-neutral interfaces that are defined by the Windows Runtime.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>The amp headers are used to run computations on the GPU.</source>
          <target>The amp headers are used to run computations on the GPU.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>They have no Windows Runtime equivalents, and that’s fine because they are private.</source>
          <target>They have no Windows Runtime equivalents, and that’s fine because they are private.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>In general, for performance reasons you should use ISO C++ code and standard libraries internally within the component; it’s just the Windows Runtime interface that must be expressed in Windows Runtime types.</source>
          <target>In general, for performance reasons you should use ISO C++ code and standard libraries internally within the component; it’s just the Windows Runtime interface that must be expressed in Windows Runtime types.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>To add a delegate at namespace scope</source>
          <target>To add a delegate at namespace scope</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>A delegate is a construct that defines the parameters and return type for methods.</source>
          <target>A delegate is a construct that defines the parameters and return type for methods.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>An event is an instance of a particular delegate type, and any event handler method that subscribes to the event must have the signature that's specified in the delegate.</source>
          <target>An event is an instance of a particular delegate type, and any event handler method that subscribes to the event must have the signature that's specified in the delegate.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>The following code defines a delegate type that takes an int and returns void.</source>
          <target>The following code defines a delegate type that takes an int and returns void.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Next the code declares a public event of this type; this enables client code to provide methods that are invoked when the event is fired.</source>
          <target>Next the code declares a public event of this type; this enables client code to provide methods that are invoked when the event is fired.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Add the following delegate declaration at namespace scope in Class1.h, just before the Class1 declaration.</source>
          <target>Add the following delegate declaration at namespace scope in Class1.h, just before the Class1 declaration.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>If the code isn’t lining up correctly when you paste it into Visual Studio, just press Ctrl+K+D to fix the indentation for the entire file.</source>
          <target>If the code isn’t lining up correctly when you paste it into Visual Studio, just press Ctrl+K+D to fix the indentation for the entire file.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>To add the public members</source>
          <target>To add the public members</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>The class exposes three public methods and one public event.</source>
          <target>The class exposes three public methods and one public event.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>The first method is synchronous because it always executes very fast.</source>
          <target>The first method is synchronous because it always executes very fast.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Because the other two methods might take some time, they are asynchronous so that they don’t block the UI thread.</source>
          <target>Because the other two methods might take some time, they are asynchronous so that they don’t block the UI thread.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>These methods return IAsyncOperationWithProgress and IAsyncActionWithProgress.</source>
          <target>These methods return IAsyncOperationWithProgress and IAsyncActionWithProgress.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>The former defines an async method that returns a result, and the latter defines an async method that returns void.</source>
          <target>The former defines an async method that returns a result, and the latter defines an async method that returns void.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>These interfaces also enable client code to receive updates on the progress of the operation.</source>
          <target>These interfaces also enable client code to receive updates on the progress of the operation.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>To add the private members</source>
          <target>To add the private members</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>The class contains three private members: two helper methods for the numeric computations and a CoreDispatcher object that’s used to marshal the event invocations from worker threads back to the UI thread.</source>
          <target>The class contains three private members: two helper methods for the numeric computations and a CoreDispatcher object that’s used to marshal the event invocations from worker threads back to the UI thread.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>To add the header and namespace directives</source>
          <target>To add the header and namespace directives</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>In Class1.cpp, add these #include directives:</source>
          <target>In Class1.cpp, add these #include directives:</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Now add these using statements to pull in the required namespaces:</source>
          <target>Now add these using statements to pull in the required namespaces:</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>To add the implementation for ComputeResult</source>
          <target>To add the implementation for ComputeResult</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>In Class1.cpp, add the following method implementation.</source>
          <target>In Class1.cpp, add the following method implementation.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>This method executes synchronously on the calling thread, but it is very fast because it uses C++ AMP to parallelize the computation on the GPU.</source>
          <target>This method executes synchronously on the calling thread, but it is very fast because it uses C++ AMP to parallelize the computation on the GPU.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>For more information, see C++ AMP Overview.</source>
          <target>For more information, see C++ AMP Overview.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">&lt;T&gt;</data>
          <data id="id2">&lt;T&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The results are appended to a Platform::Collections::Vector<ph dataRef="id1" id="ph1" /> concrete type, which is implicitly converted to a Windows::Foundation::Collections::IVector<ph dataRef="id2" id="ph2" /> when it is returned.</source>
          <target>The results are appended to a Platform::Collections::Vector<ph dataRef="id1" id="ph1" /> concrete type, which is implicitly converted to a Windows::Foundation::Collections::IVector<ph dataRef="id2" id="ph2" /> when it is returned.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>To add the implementation for GetPrimesOrdered and its helper method</source>
          <target>To add the implementation for GetPrimesOrdered and its helper method</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>In Class1.cpp, add the implementations for GetPrimesOrdered and the is_prime helper method.</source>
          <target>In Class1.cpp, add the implementations for GetPrimesOrdered and the is_prime helper method.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>GetPrimesOrdered uses a concurrent_vector class and a parallel_for function loop to divide up the work and use the maximum resources of the computer on which the program is running to produce results.</source>
          <target>GetPrimesOrdered uses a concurrent_vector class and a parallel_for function loop to divide up the work and use the maximum resources of the computer on which the program is running to produce results.</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">&lt;T&gt;</data>
          <data id="id2">&lt;T&gt;</data>
        </originalData>
        <segment state="initial">
          <source>After the results are computed, stored, and sorted, they are added to a Platform::Collections::Vector<ph dataRef="id1" id="ph1" /> and returned as Windows::Foundation::Collections::IVector<ph dataRef="id2" id="ph2" /> to client code.</source>
          <target>After the results are computed, stored, and sorted, they are added to a Platform::Collections::Vector<ph dataRef="id1" id="ph1" /> and returned as Windows::Foundation::Collections::IVector<ph dataRef="id2" id="ph2" /> to client code.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Notice the code for the progress reporter, which enables the client to hook up a progress bar or other UI to show the user how much longer the operation is going to take.</source>
          <target>Notice the code for the progress reporter, which enables the client to hook up a progress bar or other UI to show the user how much longer the operation is going to take.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>Progress reporting has a cost.</source>
          <target>Progress reporting has a cost.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>An event must be fired on the component side and handled on the UI thread, and the progress value must be stored on each iteration.</source>
          <target>An event must be fired on the component side and handled on the UI thread, and the progress value must be stored on each iteration.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>One way to minimize the cost is by limiting the frequency at which a progress event is fired.</source>
          <target>One way to minimize the cost is by limiting the frequency at which a progress event is fired.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>If the cost is still prohibitive, or if you can't estimate the length of the operation, then consider using a progress ring, which shows that an operation is in progress but doesn't show time remaining until completion.</source>
          <target>If the cost is still prohibitive, or if you can't estimate the length of the operation, then consider using a progress ring, which shows that an operation is in progress but doesn't show time remaining until completion.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>To add the implementation for GetPrimesUnordered</source>
          <target>To add the implementation for GetPrimesUnordered</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>The last step to create the C++ component is to add the implementation for the GetPrimesUnordered in Class1.cpp.</source>
          <target>The last step to create the C++ component is to add the implementation for the GetPrimesUnordered in Class1.cpp.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>This method returns each result as it is found, without waiting until all results are found.</source>
          <target>This method returns each result as it is found, without waiting until all results are found.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Each result is returned in the event handler and displayed on the UI in real time.</source>
          <target>Each result is returned in the event handler and displayed on the UI in real time.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>Again, notice that a progress reporter is used.</source>
          <target>Again, notice that a progress reporter is used.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>This method also uses the is_prime helper method.</source>
          <target>This method also uses the is_prime helper method.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Creating a JavaScript client app</source>
          <target>Creating a JavaScript client app</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>If you just want to create a C# client, you can skip this section.</source>
          <target>If you just want to create a C# client, you can skip this section.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>To create a JavaScript project</source>
          <target>To create a JavaScript project</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In Solution Explorer, open the shortcut menu for the Solution node and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add, New Project</pc>.</source>
          <target>In Solution Explorer, open the shortcut menu for the Solution node and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add, New Project</pc>.</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Expand JavaScript (it might be nested under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Other Languages</pc>) and choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Blank App (Universal Windows)</pc>.</source>
          <target>Expand JavaScript (it might be nested under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Other Languages</pc>) and choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Blank App (Universal Windows)</pc>.</target>
        </segment>
      </unit>
      <unit id="176">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Accept the default name—App1—by choosing the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
          <target>Accept the default name—App1—by choosing the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the shortcut menu for the App1 project node and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set as Startup Project</pc>.</source>
          <target>Open the shortcut menu for the App1 project node and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set as Startup Project</pc>.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Add a project reference to WinRT_CPP:</source>
          <target>Add a project reference to WinRT_CPP:</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the shortcut menu for the References node and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add Reference</pc>.</source>
          <target>Open the shortcut menu for the References node and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add Reference</pc>.</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the left pane of the References Manager dialog box, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Projects</pc> and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution</pc>.</source>
          <target>In the left pane of the References Manager dialog box, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Projects</pc> and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution</pc>.</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the center pane, select WinRT_CPP and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button</source>
          <target>In the center pane, select WinRT_CPP and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>To add the HTML that invokes the JavaScript event handlers</source>
          <target>To add the HTML that invokes the JavaScript event handlers</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">&lt;body&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Paste this HTML into the <ph dataRef="id1" id="ph1" /> node of the default.html page:</source>
          <target>Paste this HTML into the <ph dataRef="id1" id="ph1" /> node of the default.html page:</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>To add styles</source>
          <target>To add styles</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>In default.css, remove the body style and then add these styles:</source>
          <target>In default.css, remove the body style and then add these styles:</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>To add the JavaScript event handlers that call into the component DLL</source>
          <target>To add the JavaScript event handlers that call into the component DLL</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>Add the following functions at the end of the default.js file.</source>
          <target>Add the following functions at the end of the default.js file.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>These functions are called when the buttons on the main page are chosen.</source>
          <target>These functions are called when the buttons on the main page are chosen.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>Notice how JavaScript activates the C++ class, and then calls its methods and uses the return values to populate the HTML labels.</source>
          <target>Notice how JavaScript activates the C++ class, and then calls its methods and uses the return values to populate the HTML labels.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>Add code to add the event listeners by replacing the existing call to WinJS.UI.processAll in app.onactivated in default.js with the following code that implements event registration in a then block.</source>
          <target>Add code to add the event listeners by replacing the existing call to WinJS.UI.processAll in app.onactivated in default.js with the following code that implements event registration in a then block.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>For a detailed explanation of this, see Create a "Hello World" app (JS).</source>
          <target>For a detailed explanation of this, see Create a "Hello World" app (JS).</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Press F5 to run the app.</source>
          <target>Press F5 to run the app.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>Creating a C# client app</source>
          <target>Creating a C# client app</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>To create a C# project</source>
          <target>To create a C# project</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In Solution Explorer, open the shortcut menu for the Solution node and then choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add, New Project</pc>.</source>
          <target>In Solution Explorer, open the shortcut menu for the Solution node and then choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add, New Project</pc>.</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>Expand Visual C# (it might be nested under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Other Languages</pc>), select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows</pc> and then <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Universal</pc> in the left pane, and then select <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Blank App</pc> in the middle pane.</source>
          <target>Expand Visual C# (it might be nested under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Other Languages</pc>), select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows</pc> and then <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Universal</pc> in the left pane, and then select <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Blank App</pc> in the middle pane.</target>
        </segment>
      </unit>
      <unit id="197">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Name this app CS_Client and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
          <target>Name this app CS_Client and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the shortcut menu for the CS_Client project node and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set as Startup Project</pc>.</source>
          <target>Open the shortcut menu for the CS_Client project node and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set as Startup Project</pc>.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>Add a project reference to WinRT_CPP:</source>
          <target>Add a project reference to WinRT_CPP:</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the shortcut menu for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">References</pc> node and choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add Reference</pc>.</source>
          <target>Open the shortcut menu for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">References</pc> node and choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add Reference</pc>.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In the left pane of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">References Manager</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Projects</pc> and then select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Solution</pc>.</source>
          <target>In the left pane of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">References Manager</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Projects</pc> and then select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Solution</pc>.</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the center pane, select WinRT_CPP and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
          <target>In the center pane, select WinRT_CPP and then choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>To add the XAML that defines the user interface</source>
          <target>To add the XAML that defines the user interface</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>Copy the following code into the Grid element in MainPage.xaml.</source>
          <target>Copy the following code into the Grid element in MainPage.xaml.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>To add the event handlers for the buttons</source>
          <target>To add the event handlers for the buttons</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>In Solution Explorer, open MainPage.xaml.cs.</source>
          <target>In Solution Explorer, open MainPage.xaml.cs.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>(The file might be nested under MainPage.xaml.) Add a using directive for System.Text, and then add the event handler for the Logarithm calculation in the MainPage class.</source>
          <target>(The file might be nested under MainPage.xaml.) Add a using directive for System.Text, and then add the event handler for the Logarithm calculation in the MainPage class.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>Add the event handler for the ordered result:</source>
          <target>Add the event handler for the ordered result:</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>Add the event handler for the unordered result, and for the button that clears the results so that you can run the code again.</source>
          <target>Add the event handler for the unordered result, and for the button that clears the results so that you can run the code again.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>Running the app</source>
          <target>Running the app</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Select either the C# project or JavaScript project as the startup project by opening the shortcut menu for the project node in Solution Explorer and choosing <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set As Startup Project</pc>.</source>
          <target>Select either the C# project or JavaScript project as the startup project by opening the shortcut menu for the project node in Solution Explorer and choosing <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set As Startup Project</pc>.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>Then press F5 to run with debugging, or Ctrl+F5 to run without debugging.</source>
          <target>Then press F5 to run with debugging, or Ctrl+F5 to run without debugging.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>Inspecting your component in Object Browser (optional)</source>
          <target>Inspecting your component in Object Browser (optional)</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>In Object Browser, you can inspect all Windows Runtime types that are defined in .winmd files.</source>
          <target>In Object Browser, you can inspect all Windows Runtime types that are defined in .winmd files.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>This includes the types in the Platform namespace and the default namespace.</source>
          <target>This includes the types in the Platform namespace and the default namespace.</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source>However, because the types in the Platform::Collections namespace are defined in the header file collections.h, not in a winmd file, they don’t appear in Object Browser.</source>
          <target>However, because the types in the Platform::Collections namespace are defined in the header file collections.h, not in a winmd file, they don’t appear in Object Browser.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>To inspect a component</source>
          <target>To inspect a component</target>
        </segment>
      </unit>
      <unit id="218">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">View, Object Browser</pc> (Ctrl+Alt+J).</source>
          <target>On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">View, Object Browser</pc> (Ctrl+Alt+J).</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>In the left pane of the Object Browser, expand the WinRT<ph dataRef="id1" id="ph1" />CPP node to show the types and methods that are defined on your component.</source>
          <target>In the left pane of the Object Browser, expand the WinRT<ph dataRef="id1" id="ph1" />CPP node to show the types and methods that are defined on your component.</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>Debugging tips</source>
          <target>Debugging tips</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>For a better debugging experience, download the debugging symbols from the public Microsoft symbol servers:</source>
          <target>For a better debugging experience, download the debugging symbols from the public Microsoft symbol servers:</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>To download debugging symbols</source>
          <target>To download debugging symbols</target>
        </segment>
      </unit>
      <unit id="223">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tools, Options</pc>.</source>
          <target>On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tools, Options</pc>.</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Options</pc> dialog box, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Debugging</pc> and select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Symbols</pc>.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Options</pc> dialog box, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Debugging</pc> and select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Symbols</pc>.</target>
        </segment>
      </unit>
      <unit id="225">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Symbol Servers</pc> and the choose the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc> button.</source>
          <target>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Symbol Servers</pc> and the choose the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>It might take some time to download the symbols the first time.</source>
          <target>It might take some time to download the symbols the first time.</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>For faster performance the next time you press F5, specify a local directory in which to cache the symbols.</source>
          <target>For faster performance the next time you press F5, specify a local directory in which to cache the symbols.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>When you debug a JavaScript solution that has a component DLL, you can set the debugger to enable either stepping through script or stepping through native code in the component, but not both at the same time.</source>
          <target>When you debug a JavaScript solution that has a component DLL, you can set the debugger to enable either stepping through script or stepping through native code in the component, but not both at the same time.</target>
        </segment>
      </unit>
      <unit id="229">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To change the setting, open the shortcut menu for the JavaScript project node in Solution Explorer and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties, Debugging, Debugger Type</pc>.</source>
          <target>To change the setting, open the shortcut menu for the JavaScript project node in Solution Explorer and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties, Debugging, Debugger Type</pc>.</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source>Be sure to select appropriate capabilities in the package designer.</source>
          <target>Be sure to select appropriate capabilities in the package designer.</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>You can open the package designer by opening the Package.appxmanifest file.</source>
          <target>You can open the package designer by opening the Package.appxmanifest file.</target>
        </segment>
      </unit>
      <unit id="232">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you are attempting to programmatically access files in the Pictures folder, be sure to select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pictures Library</pc> check box in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Capabilities</pc> pane of the package designer.</source>
          <target>For example, if you are attempting to programmatically access files in the Pictures folder, be sure to select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pictures Library</pc> check box in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Capabilities</pc> pane of the package designer.</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>If your JavaScript code doesn't recognize the public properties or methods in the component, make sure that in JavaScript you are using camel casing.</source>
          <target>If your JavaScript code doesn't recognize the public properties or methods in the component, make sure that in JavaScript you are using camel casing.</target>
        </segment>
      </unit>
      <unit id="234">
        <originalData>
          <data id="id1">`ComputeResult`</data>
          <data id="id2">`computeResult`</data>
        </originalData>
        <segment state="initial">
          <source>For example, the <ph dataRef="id1" id="ph1" /> C++ method must be referenced as <ph dataRef="id2" id="ph2" /> in JavaScript.</source>
          <target>For example, the <ph dataRef="id1" id="ph1" /> C++ method must be referenced as <ph dataRef="id2" id="ph2" /> in JavaScript.</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>If you remove a C++ Windows Runtime Component project from a solution, you must also manually remove the project reference from the JavaScript project.</source>
          <target>If you remove a C++ Windows Runtime Component project from a solution, you must also manually remove the project reference from the JavaScript project.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>Failure to do so prevents subsequent debug or build operations.</source>
          <target>Failure to do so prevents subsequent debug or build operations.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>If necessary, you can then add an assembly reference to the DLL.</source>
          <target>If necessary, you can then add an assembly reference to the DLL.</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>Creating Windows Runtime Components in C++</source>
          <target>Creating Windows Runtime Components in C++</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>