<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\winrt-components\passing-arrays-to-a-windows-runtime-component.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">21e4b504b4adc6e2cb9b16d377781aaaab6a4aac</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Passing arrays to a Windows Runtime Component</source>
          <target>Passing arrays to a Windows Runtime Component</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>In the Windows Universal Platform (UWP), parameters are either for input or for output, never both.</source>
          <target>In the Windows Universal Platform (UWP), parameters are either for input or for output, never both.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>This means that the contents of an array that is passed to a method, as well as the array itself, are either for input or for output.</source>
          <target>This means that the contents of an array that is passed to a method, as well as the array itself, are either for input or for output.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Passing arrays to a Windows Runtime Component</source>
          <target>Passing arrays to a Windows Runtime Component</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>In the Windows Universal Platform (UWP), parameters are either for input or for output, never both.</source>
          <target>In the Windows Universal Platform (UWP), parameters are either for input or for output, never both.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>This means that the contents of an array that is passed to a method, as well as the array itself, are either for input or for output.</source>
          <target>This means that the contents of an array that is passed to a method, as well as the array itself, are either for input or for output.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>If the contents of the array are for input, the method reads from the array but doesn't write to it.</source>
          <target>If the contents of the array are for input, the method reads from the array but doesn't write to it.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>If the contents of the array are for output, the method writes to the array but doesn't read from it.</source>
          <target>If the contents of the array are for output, the method writes to the array but doesn't read from it.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This presents a problem for array parameters, because arrays in the .NET Framework are reference types, and the contents of an array are mutable even when the array reference is passed by value (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ByVal</pc> in Visual Basic).</source>
          <target>This presents a problem for array parameters, because arrays in the .NET Framework are reference types, and the contents of an array are mutable even when the array reference is passed by value (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ByVal</pc> in Visual Basic).</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/hh925576.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime Metadata Export Tool (Winmdexp.exe)</pc> requires you to specify the intended usage of the array if it is not clear from context, by applying the ReadOnlyArrayAttribute attribute or the WriteOnlyArrayAttribute attribute to the parameter.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime Metadata Export Tool (Winmdexp.exe)</pc> requires you to specify the intended usage of the array if it is not clear from context, by applying the ReadOnlyArrayAttribute attribute or the WriteOnlyArrayAttribute attribute to the parameter.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Array usage is determined as follows:</source>
          <target>Array usage is determined as follows:</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/system.runtime.interopservices.outattribute.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For the return value or for an out parameter (a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ByRef</pc> parameter with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OutAttribute</pc> attribute in Visual Basic) the array is always for output only.</source>
          <target>For the return value or for an out parameter (a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ByRef</pc> parameter with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OutAttribute</pc> attribute in Visual Basic) the array is always for output only.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Do not apply the ReadOnlyArrayAttribute attribute.</source>
          <target>Do not apply the ReadOnlyArrayAttribute attribute.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>The WriteOnlyArrayAttribute attribute is allowed on output parameters, but it's redundant.</source>
          <target>The WriteOnlyArrayAttribute attribute is allowed on output parameters, but it's redundant.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc>  The Visual Basic compiler does not enforce output-only rules.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc>  The Visual Basic compiler does not enforce output-only rules.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You should never read from an output parameter; it may contain <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Nothing</pc>.</source>
          <target>You should never read from an output parameter; it may contain <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Nothing</pc>.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Always assign a new array.</source>
          <target>Always assign a new array.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Parameters that have the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ref</pc> modifier (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ByRef</pc> in Visual Basic) are not allowed.</source>
          <target>Parameters that have the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ref</pc> modifier (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ByRef</pc> in Visual Basic) are not allowed.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Winmdexp.exe generates an error.</source>
          <target>Winmdexp.exe generates an error.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.readonlyarrayattribute.aspx)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.writeonlyarrayattribute.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For a parameter that is passed by value, you must specify whether the array contents are for input or output by applying either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadOnlyArrayAttribute</pc> attribute or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">WriteOnlyArrayAttribute</pc> attribute.</source>
          <target>For a parameter that is passed by value, you must specify whether the array contents are for input or output by applying either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadOnlyArrayAttribute</pc> attribute or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">WriteOnlyArrayAttribute</pc> attribute.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Specifying both attributes is an error.</source>
          <target>Specifying both attributes is an error.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>If a method must accept an array for input, modify the array contents, and return the array to the caller, use a read-only parameter for the input and a write-only parameter (or the return value) for the output.</source>
          <target>If a method must accept an array for input, modify the array contents, and return the array to the caller, use a read-only parameter for the input and a write-only parameter (or the return value) for the output.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>The following code shows one way to implement this pattern:</source>
          <target>The following code shows one way to implement this pattern:</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>We recommend that you make a copy of the input array immediately, and manipulate the copy.</source>
          <target>We recommend that you make a copy of the input array immediately, and manipulate the copy.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>This helps ensure that the method behaves the same whether or not your component is called by .NET Framework code.</source>
          <target>This helps ensure that the method behaves the same whether or not your component is called by .NET Framework code.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Using components from managed and unmanaged code</source>
          <target>Using components from managed and unmanaged code</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Parameters that have the ReadOnlyArrayAttribute attribute or the WriteOnlyArrayAttribute attribute behave differently depending on whether the caller is written in native code or managed code.</source>
          <target>Parameters that have the ReadOnlyArrayAttribute attribute or the WriteOnlyArrayAttribute attribute behave differently depending on whether the caller is written in native code or managed code.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>If the caller is native code (JavaScript or Visual C++ component extensions), the array contents are treated as follows:</source>
          <target>If the caller is native code (JavaScript or Visual C++ component extensions), the array contents are treated as follows:</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>ReadOnlyArrayAttribute: The array is copied when the call crosses the application binary interface (ABI) boundary.</source>
          <target>ReadOnlyArrayAttribute: The array is copied when the call crosses the application binary interface (ABI) boundary.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Elements are converted if necessary.</source>
          <target>Elements are converted if necessary.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Therefore, any accidental changes the method makes to an input-only array are not visible to the caller.</source>
          <target>Therefore, any accidental changes the method makes to an input-only array are not visible to the caller.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>WriteOnlyArrayAttribute: The called method can't make any assumptions about the contents of the original array.</source>
          <target>WriteOnlyArrayAttribute: The called method can't make any assumptions about the contents of the original array.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>For example, the array the method receives might not be initialized, or might contain default values.</source>
          <target>For example, the array the method receives might not be initialized, or might contain default values.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>The method is expected to set the values of all the elements in the array.</source>
          <target>The method is expected to set the values of all the elements in the array.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>If the caller is managed code, the original array is available to the called method, as it would be in any method call in the .NET Framework.</source>
          <target>If the caller is managed code, the original array is available to the called method, as it would be in any method call in the .NET Framework.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Array contents are mutable in .NET Framework code, so any changes the method makes to the array are visible to the caller.</source>
          <target>Array contents are mutable in .NET Framework code, so any changes the method makes to the array are visible to the caller.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>This is important to remember because it affects unit tests written for a Windows Runtime Component.</source>
          <target>This is important to remember because it affects unit tests written for a Windows Runtime Component.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>If the tests are written in managed code, the contents of an array will appear to be mutable during testing.</source>
          <target>If the tests are written in managed code, the contents of an array will appear to be mutable during testing.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>ReadOnlyArrayAttribute</source>
          <target>ReadOnlyArrayAttribute</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>WriteOnlyArrayAttribute</source>
          <target>WriteOnlyArrayAttribute</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Creating Windows Runtime Components in C# and Visual Basic</source>
          <target>Creating Windows Runtime Components in C# and Visual Basic</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>