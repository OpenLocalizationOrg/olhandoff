{"nodes":[{"content":"Explains how to implement a XAML attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.","pos":[32,216]},{"content":"Custom attached properties","pos":[224,250]},{"content":"Custom attached properties","pos":[307,333]},{"content":"Updated for UWP apps on Windows 10.","pos":[338,373]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[374,466]},{"content":"An <bpt id=\"p1\">*</bpt>attached property<ept id=\"p1\">*</ept> is a XAML concept.","pos":[471,512]},{"content":"Attached properties are typically defined as a specialized form of dependency property.","pos":[513,600]},{"content":"This topic explains how to implement an attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.","pos":[601,792]},{"content":"Prerequisites","pos":[797,810]},{"content":"We assume that you understand dependency properties from the perspective of a consumer of existing dependency properties, and that you have read the <bpt id=\"p1\">[</bpt>Dependency properties overview<ept id=\"p1\">](dependency-properties-overview.md)</ept>.","pos":[812,1029]},{"content":"You should also have read <bpt id=\"p1\">[</bpt>Attached properties overview<ept id=\"p1\">](attached-properties-overview.md)</ept>.","pos":[1030,1120]},{"content":"To follow the examples in this topic, you should also understand XAML and know how to write a basic Windows Runtime app using C++, C#, or Visual Basic.","pos":[1121,1272]},{"content":"Scenarios for attached properties","pos":[1277,1310]},{"content":"You might create an attached property when there is a reason to have a property-setting mechanism available for classes other than the defining class.","pos":[1312,1462]},{"content":"The most common scenarios for this are layout and services support.","pos":[1463,1530]},{"content":"Examples of existing layout properties are <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas.ZIndex<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759773)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Canvas.Top<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh759772)</ept>.","pos":[1531,1731]},{"content":"In a layout scenario, elements that exist as child elements to layout-controlling elements can express layout requirements to their parent elements individually, each setting a property value that the parent defines as an attached property.","pos":[1732,1972]},{"content":"An example of the services-support scenario in the Windows Runtime API is set of the attached properties of <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ScrollViewer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209527)</ept>, such as <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ScrollViewer.IsZoomChainingEnabled<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209561)</ept>.","pos":[1973,2266]},{"pos":[2268,2404],"content":"<bpt id=\"p1\">**</bpt>Caution<ept id=\"p1\">**</ept>  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate your custom attached property."},{"content":"Registering a custom attached property","pos":[2409,2447]},{"content":"If you are defining the attached property strictly for use on other types, the class where the property is registered does not have to derive from <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DependencyObject<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>.","pos":[2449,2677]},{"content":"But you do need to have the target parameter for accessors use <bpt id=\"p1\">**</bpt>DependencyObject<ept id=\"p1\">**</ept> if you follow the typical model of having your attached property also be a dependency property, so that you can use the backing property store.","pos":[2678,2905]},{"content":"Define your attached property as a dependency property by declaring a <bpt id=\"p1\">**</bpt>public<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>static<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>readonly<ept id=\"p3\">**</ept> property of type <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>DependencyProperty<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept>.","pos":[2907,3112]},{"content":"You define this property by using the return value of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RegisterAttached<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701833)</ept> method.","pos":[3113,3259]},{"content":"The property name must match the attached property name you specify as the <bpt id=\"p1\">**</bpt>RegisterAttached<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>name<ept id=\"p2\">*</ept> parameter, with the string \"Property\" added to the end.","pos":[3260,3418]},{"content":"This is the established convention for naming the identifiers of dependency properties in relation to the properties that they represent.","pos":[3419,3556]},{"content":"The main area where defining a custom attached property differs from a custom dependency property is in how you define the accessors or wrappers.","pos":[3558,3703]},{"content":"Instead of the using the wrapper technique described in <bpt id=\"p1\">[</bpt>Custom dependency properties<ept id=\"p1\">](custom-dependency-properties.md)</ept>, you must also provide static <bpt id=\"p2\">**</bpt>Get<ept id=\"p2\">**</ept><bpt id=\"p3\">*</bpt>PropertyName<ept id=\"p3\">*</ept> and <bpt id=\"p4\">**</bpt>Set<ept id=\"p4\">**</ept><bpt id=\"p5\">*</bpt>PropertyName<ept id=\"p5\">*</ept> methods as accessors for the attached property.","pos":[3704,3949]},{"content":"The accessors are used mostly by the XAML parser, although any other caller can also use them to set values in non-XAML scenarios.","pos":[3950,4080]},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>  If you don't define the accessors correctly, the XAML processor can't access your attached property and anyone who tries to use it will probably get a XAML parser error.","pos":[4082,4266]},{"content":"Also, design and coding tools often rely on the \"<ph id=\"ph1\">\\*</ph>Property\" conventions for naming identifiers when they encounter a custom dependency property in a referenced assembly.","pos":[4267,4437]},{"content":"Accessors","pos":[4442,4451]},{"pos":[4453,4519],"content":"The signature for the <bpt id=\"p1\">**</bpt>Get<ept id=\"p1\">**</ept><bpt id=\"p2\">_</bpt>PropertyName<ept id=\"p2\">_</ept> accessor must be this."},{"pos":[4537,4570],"content":"<bpt id=\"p1\">_</bpt>valueType<ept id=\"p1\">_</ept> <bpt id=\"p2\">**</bpt>Get<ept id=\"p2\">**</ept><bpt id=\"p3\">_</bpt>PropertyName<ept id=\"p3\">_</ept>"},{"content":"For Microsoft Visual Basic, it is this.","pos":[4600,4639]},{"pos":[4670,4735],"content":"<bpt id=\"p1\">_</bpt>PropertyName<ept id=\"p1\">_</ept><ph id=\"ph1\">`(ByVal target As DependencyObject) As `</ph><bpt id=\"p2\">_</bpt>valueType<ept id=\"p2\">_</ept>"},{"content":"The <bpt id=\"p1\">*</bpt>target<ept id=\"p1\">*</ept> object can be of a more specific type in your implementation, but must derive from <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DependencyObject<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>.","pos":[4740,4917]},{"content":"The <bpt id=\"p1\">*</bpt>valueType<ept id=\"p1\">*</ept> return value can also be of a more specific type in your implementation.","pos":[4918,5006]},{"content":"The basic <bpt id=\"p1\">**</bpt>Object<ept id=\"p1\">**</ept> type is acceptable, but often you'll want your attached property to enforce type safety.","pos":[5007,5116]},{"content":"The use of typing in the getter and setter signatures is a recommended type-safety technique.","pos":[5117,5210]},{"pos":[5212,5278],"content":"The signature for the <bpt id=\"p1\">**</bpt>Set<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt>PropertyName<ept id=\"p2\">*</ept> accessor must be this."},{"pos":[5306,5361],"content":"<bpt id=\"p1\">_</bpt>PropertyName<ept id=\"p1\">_</ept><ph id=\"ph1\">` (DependencyObject target , `</ph><bpt id=\"p2\">_</bpt>valueType<ept id=\"p2\">_</ept>"},{"content":"For Visual Basic, it is this.","pos":[5372,5401]},{"pos":[5426,5504],"content":"<bpt id=\"p1\">_</bpt>PropertyName<ept id=\"p1\">_</ept><ph id=\"ph1\">` (ByVal target As DependencyObject, ByVal value As `</ph><bpt id=\"p2\">_</bpt>valueType<ept id=\"p2\">_</ept>"},{"content":"The <bpt id=\"p1\">*</bpt>target<ept id=\"p1\">*</ept> object can be of a more specific type in your implementation, but must derive from <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DependencyObject<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>.","pos":[5509,5686]},{"content":"The <bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept> object and its <bpt id=\"p2\">*</bpt>valueType<ept id=\"p2\">*</ept> can be of a more specific type in your implementation.","pos":[5687,5780]},{"content":"Remember that the value for this method is the input that comes from the XAML processor when it encounters your attached property in markup.","pos":[5781,5921]},{"content":"There must be type conversion or existing markup extension support for the type you use, so that the appropriate type can be created from an attribute value (which is ultimately just a string).","pos":[5922,6115]},{"content":"The basic <bpt id=\"p1\">**</bpt>Object<ept id=\"p1\">**</ept> type is acceptable, but often you'll want further type safety.","pos":[6116,6199]},{"content":"To accomplish that, put type enforcement in the accessors.","pos":[6200,6258]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  It's also possible to define an attached property where the intended usage is through property element syntax.","pos":[6260,6380]},{"content":"In that case you don't need type conversion for the values, but you do need to assure that the values you intend can be constructed in XAML.","pos":[6381,6521]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualStateManager.VisualStateGroups<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh738505)</ept> is an example of an existing attached property that only supports property element usage.","pos":[6522,6712]},{"content":"Code example","pos":[6717,6729]},{"content":"This example shows the dependency property registration (using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RegisterAttached<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701833)</ept> method), as well as the <bpt id=\"p3\">**</bpt>Get<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>Set<ept id=\"p4\">**</ept> accessors, for a custom attached property.","pos":[6731,6965]},{"content":"In the example, the attached property name is <ph id=\"ph1\">`IsMovable`</ph>.","pos":[6966,7024]},{"content":"Therefore, the accessors must be named <ph id=\"ph1\">`GetIsMovable`</ph> and <ph id=\"ph2\">`SetIsMovable`</ph>.","pos":[7025,7098]},{"content":"The owner of the attached property is a service class named <ph id=\"ph1\">`GameService`</ph> that doesn't have a UI of its own; its purpose is only to provide the attached property services when the <bpt id=\"p1\">**</bpt>GameService.IsMovable<ept id=\"p1\">**</ept> attached property is used.","pos":[7099,7331]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[7335,7368]},{"content":"Defining the attached property in C++ is a bit more complex.","pos":[8595,8655]},{"content":"You have to decide how to factor between the header and code file.","pos":[8656,8722]},{"content":"Also, you should expose the identifier as a property with only a <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> accessor, for reasons discussed in <bpt id=\"p2\">[</bpt>Custom dependency properties<ept id=\"p2\">](custom-dependency-properties.md)</ept>.","pos":[8723,8895]},{"content":"In C++ you must define this property-field relationship explicitly rather than relying on .NET <bpt id=\"p1\">**</bpt>readonly<ept id=\"p1\">**</ept> keywording and implicit backing of simple properties.","pos":[8896,9057]},{"content":"You also need to perform the registration of the attached property within a helper function that only gets run once, when the app first starts but before any XAML pages that need the attached property are loaded.","pos":[9058,9270]},{"content":"The typical place to call your property registration helper functions for any and all dependency or attached properties is from within the <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept><ph id=\"ph1\"> / </ph><bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Application<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br242325)</ept> constructor in the code for your app.xaml file.","pos":[9271,9543]},{"content":"Using your custom attached property in XAML","pos":[11336,11379]},{"content":"After you have defined your attached property and included its support members as part of a custom type, you must then make the definitions available for XAML usage.","pos":[11381,11546]},{"content":"To do this, you must map a XAML namespace that will reference the code namespace that contains the relevant class.","pos":[11547,11661]},{"content":"In cases where you have defined the attached property as part of a library, you must include that library as part of the app package for the app.","pos":[11662,11807]},{"content":"An XML namespace mapping for XAML is typically placed in the root element of a XAML page.","pos":[11809,11898]},{"content":"For example, for the class named <ph id=\"ph1\">`GameService`</ph> in the namespace <ph id=\"ph2\">`UserAndCustomControls`</ph> that contains the attached property definitions shown in preceding snippets, the mapping might look like this.","pos":[11899,12097]},{"pos":[12239,12425],"content":"Using the mapping, you can set your <ph id=\"ph1\">`GameService.IsMovable`</ph> attached property on any element that matches your target definition, including an existing type that Windows Runtime defines."},{"content":"If you are setting the property on an element that is also within the same mapped XML namespace, you still must include the prefix on the attached property name.","pos":[12484,12645]},{"content":"This is because the prefix qualifies the owner type.","pos":[12646,12698]},{"content":"The attached property's attribute cannot be assumed to be within the same XML namespace as the element where the attribute is included, even though, by normal XML rules, attributes can inherit namespace from elements.","pos":[12699,12916]},{"content":"For example, if you are setting <ph id=\"ph1\">`GameService.IsMovable`</ph> on a custom type of <ph id=\"ph2\">`ImageWithLabelControl`</ph> (definition not shown), and even if both were defined in the same code namespace mapped to same prefix, the XAML would still be this.","pos":[12917,13150]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  If you are writing a XAML UI with C++, you must include the header for the custom type that defines the attached property, any time that a XAML page uses that type.","pos":[13228,13402]},{"content":"Each XAML page has an associated .xaml.h code-behind header.","pos":[13403,13463]},{"content":"This is where you should include (using <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\#</ph>include<ept id=\"p1\">**</ept>) the header for the definition of the attached property's owner type.","pos":[13464,13587]},{"content":"Value type of a custom attached property","pos":[13592,13632]},{"content":"The type that is used as the value type of a custom attached property affects the usage, the definition, or both the usage and definition.","pos":[13634,13772]},{"content":"The attached property's value type is declared in several places: in the signatures of both the <bpt id=\"p1\">**</bpt>Get<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Set<ept id=\"p2\">**</ept> accessor methods, and also as the <bpt id=\"p3\">*</bpt>propertyType<ept id=\"p3\">*</ept> parameter of the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>RegisterAttached<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/hh701833)</ept> call.","pos":[13773,14041]},{"content":"The most common value type for attached properties (custom or otherwise) is a simple string.","pos":[14043,14135]},{"content":"This is because attached properties are generally intended for XAML attribute usage, and using a string as the value type keeps the properties lightweight.","pos":[14136,14291]},{"content":"Other primitives that have native conversion to string methods, such as integer, double, or an enumeration value, are also common as value types for attached properties.","pos":[14292,14461]},{"content":"You can use other value types—ones that don't support native string conversion—as the attached property value.","pos":[14462,14572]},{"content":"However, this entails making a choice about either the usage or the implementation:","pos":[14573,14656]},{"content":"You can leave the attached property as it is, but the attached property can support usage only where the attached property is a property element, and the value is declared as an object element.","pos":[14660,14853]},{"content":"In this case, the property type does have to support XAML usage as an object element.","pos":[14854,14939]},{"content":"For existing Windows Runtime reference classes, check the XAML syntax to make sure that the type supports XAML object element usage.","pos":[14940,15072]},{"pos":[15075,15272],"content":"You can leave the attached property as it is, but use it only in an attribute usage through a XAML reference technique such as a <bpt id=\"p1\">**</bpt>Binding<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>StaticResource<ept id=\"p2\">**</ept> that can be expressed as a string."},{"pos":[15277,15315],"content":"More about the <bpt id=\"p1\">**</bpt>Canvas.Left<ept id=\"p1\">**</ept> example"},{"content":"In earlier examples of attached property usages we showed different ways to set the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas.Left<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> attached property.","pos":[15317,15495]},{"content":"But what does that change about how a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> interacts with your object, and when does that happen?","pos":[15496,15659]},{"content":"We'll examine this particular example further, because if you implement an attached property, it's interesting to see what else a typical attached property owner class intends to do with its attached property values if it finds them on other objects.","pos":[15660,15910]},{"content":"The main function of a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> is to be an absolute-positioned layout container in UI.","pos":[15912,16061]},{"content":"The children of a <bpt id=\"p1\">**</bpt>Canvas<ept id=\"p1\">**</ept> are stored in a base-class defined property <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Children<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept>.","pos":[16062,16208]},{"content":"Of all the panels <bpt id=\"p1\">**</bpt>Canvas<ept id=\"p1\">**</ept> is the only one that uses absolute positioning.","pos":[16209,16285]},{"content":"It would've bloated the object model of the common <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>UIElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> type to add properties that might only be of concern to <bpt id=\"p3\">**</bpt>Canvas<ept id=\"p3\">**</ept> and those particular <bpt id=\"p4\">**</bpt>UIElement<ept id=\"p4\">**</ept> cases where they are child elements of a <bpt id=\"p5\">**</bpt>UIElement<ept id=\"p5\">**</ept>.","pos":[16286,16568]},{"content":"Defining the layout control properties of a <bpt id=\"p1\">**</bpt>Canvas<ept id=\"p1\">**</ept> to be attached properties that any <bpt id=\"p2\">**</bpt>UIElement<ept id=\"p2\">**</ept> can use keeps the object model cleaner.","pos":[16569,16712]},{"content":"In order to be a practical panel, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> has behavior that overrides the framework-level <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Measure<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208952)</ept> and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Arrange<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br208914)</ept> methods.","pos":[16714,17023]},{"content":"This is where <bpt id=\"p1\">**</bpt>Canvas<ept id=\"p1\">**</ept> actually checks for attached property values on its children.","pos":[17024,17110]},{"content":"Part of both the <bpt id=\"p1\">**</bpt>Measure<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Arrange<ept id=\"p2\">**</ept> patterns is a loop that iterates over any content, and a panel has the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Children<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227514)</ept> property that makes it explicit what's supposed to be considered the child of a panel.","pos":[17111,17386]},{"content":"So the <bpt id=\"p1\">**</bpt>Canvas<ept id=\"p1\">**</ept> layout behavior iterates through these children, and makes static <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Canvas.GetLeft<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209269)</ept> and <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Canvas.GetTop<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br209270)</ept> calls on each child to see whether those attached properties contain a non-default value (default is 0).","pos":[17387,17736]},{"content":"These values are then used to absolutely position each child in the <bpt id=\"p1\">**</bpt>Canvas<ept id=\"p1\">**</ept> available layout space according to the specific values provided by each child, and committed using <bpt id=\"p2\">**</bpt>Arrange<ept id=\"p2\">**</ept>.","pos":[17737,17928]},{"content":"The code looks something like this pseudocode:","pos":[17930,17976]},{"pos":[18416,18552],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  For more info on how panels work, see <bpt id=\"p2\">[</bpt>XAML custom panels overview<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/mt228351)</ept>."},{"content":"Related topics","pos":[18557,18571]},{"content":"RegisterAttached","pos":[18578,18594]},{"content":"Attached properties overview","pos":[18659,18687]},{"content":"Custom dependency properties","pos":[18725,18753]},{"content":"XAML overview","pos":[18791,18804]}],"content":"---\nauthor: jwmsft\ndescription: Explains how to implement a XAML attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.\ntitle: Custom attached properties\nms.assetid: E9C0C57E-6098-4875-AA3E-9D7B36E160E0\n---\n\n# Custom attached properties\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nAn *attached property* is a XAML concept. Attached properties are typically defined as a specialized form of dependency property. This topic explains how to implement an attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.\n\n## Prerequisites\n\nWe assume that you understand dependency properties from the perspective of a consumer of existing dependency properties, and that you have read the [Dependency properties overview](dependency-properties-overview.md). You should also have read [Attached properties overview](attached-properties-overview.md). To follow the examples in this topic, you should also understand XAML and know how to write a basic Windows Runtime app using C++, C#, or Visual Basic.\n\n## Scenarios for attached properties\n\nYou might create an attached property when there is a reason to have a property-setting mechanism available for classes other than the defining class. The most common scenarios for this are layout and services support. Examples of existing layout properties are [**Canvas.ZIndex**](https://msdn.microsoft.com/library/windows/apps/hh759773) and [**Canvas.Top**](https://msdn.microsoft.com/library/windows/apps/hh759772). In a layout scenario, elements that exist as child elements to layout-controlling elements can express layout requirements to their parent elements individually, each setting a property value that the parent defines as an attached property. An example of the services-support scenario in the Windows Runtime API is set of the attached properties of [**ScrollViewer**](https://msdn.microsoft.com/library/windows/apps/br209527), such as [**ScrollViewer.IsZoomChainingEnabled**](https://msdn.microsoft.com/library/windows/apps/br209561).\n\n**Caution**  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate your custom attached property.\n\n## Registering a custom attached property\n\nIf you are defining the attached property strictly for use on other types, the class where the property is registered does not have to derive from [**DependencyObject**](https://msdn.microsoft.com/library/windows/apps/br242356). But you do need to have the target parameter for accessors use **DependencyObject** if you follow the typical model of having your attached property also be a dependency property, so that you can use the backing property store.\n\nDefine your attached property as a dependency property by declaring a **public** **static** **readonly** property of type [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/br242362). You define this property by using the return value of the [**RegisterAttached**](https://msdn.microsoft.com/library/windows/apps/hh701833) method. The property name must match the attached property name you specify as the **RegisterAttached** *name* parameter, with the string \"Property\" added to the end. This is the established convention for naming the identifiers of dependency properties in relation to the properties that they represent.\n\nThe main area where defining a custom attached property differs from a custom dependency property is in how you define the accessors or wrappers. Instead of the using the wrapper technique described in [Custom dependency properties](custom-dependency-properties.md), you must also provide static **Get***PropertyName* and **Set***PropertyName* methods as accessors for the attached property. The accessors are used mostly by the XAML parser, although any other caller can also use them to set values in non-XAML scenarios.\n\n**Important**  If you don't define the accessors correctly, the XAML processor can't access your attached property and anyone who tries to use it will probably get a XAML parser error. Also, design and coding tools often rely on the \"\\*Property\" conventions for naming identifiers when they encounter a custom dependency property in a referenced assembly.\n\n## Accessors\n\nThe signature for the **Get**_PropertyName_ accessor must be this.\n\n`public static` _valueType_ **Get**_PropertyName_ `(DependencyObject target)`\n\nFor Microsoft Visual Basic, it is this.\n\n` Public Shared Function Get`_PropertyName_`(ByVal target As DependencyObject) As `_valueType_`)`\n\nThe *target* object can be of a more specific type in your implementation, but must derive from [**DependencyObject**](https://msdn.microsoft.com/library/windows/apps/br242356). The *valueType* return value can also be of a more specific type in your implementation. The basic **Object** type is acceptable, but often you'll want your attached property to enforce type safety. The use of typing in the getter and setter signatures is a recommended type-safety technique.\n\nThe signature for the **Set***PropertyName* accessor must be this.\n\n`  public static void Set`_PropertyName_` (DependencyObject target , `_valueType_` value)`\n\nFor Visual Basic, it is this.\n\n`Public Shared Sub Set`_PropertyName_` (ByVal target As DependencyObject, ByVal value As `_valueType_`)`\n\nThe *target* object can be of a more specific type in your implementation, but must derive from [**DependencyObject**](https://msdn.microsoft.com/library/windows/apps/br242356). The *value* object and its *valueType* can be of a more specific type in your implementation. Remember that the value for this method is the input that comes from the XAML processor when it encounters your attached property in markup. There must be type conversion or existing markup extension support for the type you use, so that the appropriate type can be created from an attribute value (which is ultimately just a string). The basic **Object** type is acceptable, but often you'll want further type safety. To accomplish that, put type enforcement in the accessors.\n\n**Note**  It's also possible to define an attached property where the intended usage is through property element syntax. In that case you don't need type conversion for the values, but you do need to assure that the values you intend can be constructed in XAML. [**VisualStateManager.VisualStateGroups**](https://msdn.microsoft.com/library/windows/apps/hh738505) is an example of an existing attached property that only supports property element usage.\n\n## Code example\n\nThis example shows the dependency property registration (using the [**RegisterAttached**](https://msdn.microsoft.com/library/windows/apps/hh701833) method), as well as the **Get** and **Set** accessors, for a custom attached property. In the example, the attached property name is `IsMovable`. Therefore, the accessors must be named `GetIsMovable` and `SetIsMovable`. The owner of the attached property is a service class named `GameService` that doesn't have a UI of its own; its purpose is only to provide the attached property services when the **GameService.IsMovable** attached property is used.\n\n> [!div class=\"tabbedCodeSnippets\"]\n```csharp\n    public class GameService : DependencyObject\n    {\n        public static readonly DependencyProperty IsMovableProperty = \n        DependencyProperty.RegisterAttached(\n          \"IsMovable\",\n          typeof(Boolean),\n          typeof(GameService),\n          new PropertyMetadata(false)\n        );\n        public static void SetIsMovable(UIElement element, Boolean value)\n        {\n            element.SetValue(IsMovableProperty, value);\n        }\n        public static Boolean GetIsMovable(UIElement element)\n        {\n            return (Boolean)element.GetValue(IsMovableProperty);\n        }\n    }\n```\n```vb\nPublic Class GameService\n    Inherits DependencyObject\n\n    Public Shared ReadOnly IsMovableProperty As DependencyProperty = \n        DependencyProperty.RegisterAttached(\"IsMovable\",  \n        GetType(Boolean), \n        GetType(GameService), \n        New PropertyMetadata(False))\n\n    Public Shared Sub SetIsMovable(ByRef element As UIElement, value As Boolean)\n        element.SetValue(IsMovableProperty, value)\n    End Sub\n\n    Public Shared Function GetIsMovable(ByRef element As UIElement) As Boolean\n        GetIsMovable = CBool(element.GetValue(IsMovableProperty))\n    End Function\nEnd Class\n```\n\nDefining the attached property in C++ is a bit more complex. You have to decide how to factor between the header and code file. Also, you should expose the identifier as a property with only a **get** accessor, for reasons discussed in [Custom dependency properties](custom-dependency-properties.md). In C++ you must define this property-field relationship explicitly rather than relying on .NET **readonly** keywording and implicit backing of simple properties. You also need to perform the registration of the attached property within a helper function that only gets run once, when the app first starts but before any XAML pages that need the attached property are loaded. The typical place to call your property registration helper functions for any and all dependency or attached properties is from within the **App** / [**Application**](https://msdn.microsoft.com/library/windows/apps/br242325) constructor in the code for your app.xaml file.\n\n```cpp\n//\n// GameService.h\n// Declaration of the GameService class.\n//\n\n#pragma once\n\n#include \"pch.h\"\n//namespace WUX = Windows::UI::Xaml;\n\nnamespace UserAndCustomControls {\n    public ref class GameService sealed : public WUX::DependencyObject {\n    private:\n        static WUX::DependencyProperty^ _IsMovableProperty;\n    public:\n        GameService::GameService();\n        void GameService::RegisterDependencyProperties();\n        static property WUX::DependencyProperty^ IsMovableProperty\n        {\n            WUX::DependencyProperty^ get() {\n                return _IsMovableProperty;\n            }\n        };\n        static bool GameService::GetIsMovable(WUX::UIElement^ element) {\n            return (bool)element->GetValue(_IsMovableProperty);\n        };\n        static void GameService::SetIsMovable(WUX::UIElement^ element, bool value) {\n            element->SetValue(_IsMovableProperty,value);\n        }\n    };\n}\n```\n\n```cpp\n//\n// GameService.cpp\n// Implementation of the GameService class.\n//\n\n#include \"pch.h\"\n#include \"GameService.h\"\n\nusing namespace UserAndCustomControls;\n\nusing namespace Platform;\nusing namespace Windows::Foundation;\nusing namespace Windows::Foundation::Collections;\nusing namespace Windows::UI::Xaml;\nusing namespace Windows::UI::Xaml::Controls;\nusing namespace Windows::UI::Xaml::Data;\nusing namespace Windows::UI::Xaml::Documents;\nusing namespace Windows::UI::Xaml::Input;\nusing namespace Windows::UI::Xaml::Interop;\nusing namespace Windows::UI::Xaml::Media;\n\nGameService::GameService() {\n\n};\n\n\nGameService::RegisterDependencyProperties() {\n    DependencyProperty^ GameService::_IsMovableProperty = DependencyProperty::RegisterAttached(\n         \"IsMovable\", Platform::Boolean::typeid, GameService::typeid, ref new PropertyMetadata(false));\n}\n```\n\n## Using your custom attached property in XAML\n\nAfter you have defined your attached property and included its support members as part of a custom type, you must then make the definitions available for XAML usage. To do this, you must map a XAML namespace that will reference the code namespace that contains the relevant class. In cases where you have defined the attached property as part of a library, you must include that library as part of the app package for the app.\n\nAn XML namespace mapping for XAML is typically placed in the root element of a XAML page. For example, for the class named `GameService` in the namespace `UserAndCustomControls` that contains the attached property definitions shown in preceding snippets, the mapping might look like this.\n\n```XML\n<UserControl\n  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n  xmlns:uc=\"using:UserAndCustomControls\"\n...\n>\n```\n\nUsing the mapping, you can set your `GameService.IsMovable` attached property on any element that matches your target definition, including an existing type that Windows Runtime defines.\n\n```XML\n<Image uc:GameService.IsMovable=\"true\" .../>\n```\n\nIf you are setting the property on an element that is also within the same mapped XML namespace, you still must include the prefix on the attached property name. This is because the prefix qualifies the owner type. The attached property's attribute cannot be assumed to be within the same XML namespace as the element where the attribute is included, even though, by normal XML rules, attributes can inherit namespace from elements. For example, if you are setting `GameService.IsMovable` on a custom type of `ImageWithLabelControl` (definition not shown), and even if both were defined in the same code namespace mapped to same prefix, the XAML would still be this.\n\n```XML\n<uc:ImageWithLabelControl uc:GameService.IsMovable=\"true\" .../>\n```\n\n**Note**  If you are writing a XAML UI with C++, you must include the header for the custom type that defines the attached property, any time that a XAML page uses that type. Each XAML page has an associated .xaml.h code-behind header. This is where you should include (using **\\#include**) the header for the definition of the attached property's owner type.\n\n## Value type of a custom attached property\n\nThe type that is used as the value type of a custom attached property affects the usage, the definition, or both the usage and definition. The attached property's value type is declared in several places: in the signatures of both the **Get** and **Set** accessor methods, and also as the *propertyType* parameter of the [**RegisterAttached**](https://msdn.microsoft.com/library/windows/apps/hh701833) call.\n\nThe most common value type for attached properties (custom or otherwise) is a simple string. This is because attached properties are generally intended for XAML attribute usage, and using a string as the value type keeps the properties lightweight. Other primitives that have native conversion to string methods, such as integer, double, or an enumeration value, are also common as value types for attached properties. You can use other value types—ones that don't support native string conversion—as the attached property value. However, this entails making a choice about either the usage or the implementation:\n\n- You can leave the attached property as it is, but the attached property can support usage only where the attached property is a property element, and the value is declared as an object element. In this case, the property type does have to support XAML usage as an object element. For existing Windows Runtime reference classes, check the XAML syntax to make sure that the type supports XAML object element usage.\n- You can leave the attached property as it is, but use it only in an attribute usage through a XAML reference technique such as a **Binding** or **StaticResource** that can be expressed as a string.\n\n## More about the **Canvas.Left** example\n\nIn earlier examples of attached property usages we showed different ways to set the [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/hh759771) attached property. But what does that change about how a [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) interacts with your object, and when does that happen? We'll examine this particular example further, because if you implement an attached property, it's interesting to see what else a typical attached property owner class intends to do with its attached property values if it finds them on other objects.\n\nThe main function of a [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) is to be an absolute-positioned layout container in UI. The children of a **Canvas** are stored in a base-class defined property [**Children**](https://msdn.microsoft.com/library/windows/apps/br227514). Of all the panels **Canvas** is the only one that uses absolute positioning. It would've bloated the object model of the common [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911) type to add properties that might only be of concern to **Canvas** and those particular **UIElement** cases where they are child elements of a **UIElement**. Defining the layout control properties of a **Canvas** to be attached properties that any **UIElement** can use keeps the object model cleaner.\n\nIn order to be a practical panel, [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) has behavior that overrides the framework-level [**Measure**](https://msdn.microsoft.com/library/windows/apps/br208952) and [**Arrange**](https://msdn.microsoft.com/library/windows/apps/br208914) methods. This is where **Canvas** actually checks for attached property values on its children. Part of both the **Measure** and **Arrange** patterns is a loop that iterates over any content, and a panel has the [**Children**](https://msdn.microsoft.com/library/windows/apps/br227514) property that makes it explicit what's supposed to be considered the child of a panel. So the **Canvas** layout behavior iterates through these children, and makes static [**Canvas.GetLeft**](https://msdn.microsoft.com/library/windows/apps/br209269) and [**Canvas.GetTop**](https://msdn.microsoft.com/library/windows/apps/br209270) calls on each child to see whether those attached properties contain a non-default value (default is 0). These values are then used to absolutely position each child in the **Canvas** available layout space according to the specific values provided by each child, and committed using **Arrange**.\n\nThe code looks something like this pseudocode:\n\n``` syntax\n    protected override Size ArrangeOverride(Size finalSize)\n    {\n        foreach (UIElement child in Children)\n        {\n            double x = (double) Canvas.GetLeft(child);\n            double y = (double) Canvas.GetTop(child);\n            child.Arrange(new Rect(new Point(x, y), child.DesiredSize));\n        }\n        return base.ArrangeOverride(finalSize); \n        // real Canvas has more sophisticated sizing\n    }\n```\n\n**Note**  For more info on how panels work, see [XAML custom panels overview](https://msdn.microsoft.com/library/windows/apps/mt228351).\n\n## Related topics\n\n* [**RegisterAttached**](https://msdn.microsoft.com/library/windows/apps/hh701833)\n* [Attached properties overview](attached-properties-overview.md)\n* [Custom dependency properties](custom-dependency-properties.md)\n* [XAML overview](xaml-overview.md)\n\n"}