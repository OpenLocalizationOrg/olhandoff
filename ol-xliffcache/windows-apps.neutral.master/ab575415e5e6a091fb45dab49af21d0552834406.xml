{"nodes":[{"content":"Handle a cancelled background task","pos":[29,63]},{"content":"Learn how to make a background task that recognizes cancellation requests and stops work, reporting the cancellation to the app using persistent storage.","pos":[77,230]},{"content":"Handle a cancelled background task","pos":[287,321]},{"content":"Updated for UWP apps on Windows 10.","pos":[326,361]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[362,454]},{"content":"Important APIs","pos":[461,475]},{"content":"BackgroundTaskCanceledEventHandler","pos":[486,520]},{"content":"IBackgroundTaskInstance","pos":[589,612]},{"content":"ApplicationData.Current","pos":[681,704]},{"content":"Learn how to make a background task that recognizes cancellation requests and stops work, reporting the cancellation to the app using persistent storage.","pos":[767,920]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  For all device families except desktop, if the device becomes low on memory, background tasks may be terminated.","pos":[924,1046]},{"content":"If an out of memory exception is not surfaced, or the app does not handle it, then the background task will be terminated without warning and without raising the OnCanceled event.","pos":[1047,1226]},{"content":"This helps to ensure the user experience of the app in the foreground.","pos":[1227,1297]},{"content":"Your background task should be designed to handle this scenario.","pos":[1298,1362]},{"content":"This topic assumes you have already created a background task class, including the Run method that is used as the background task entry point.","pos":[1364,1506]},{"content":"To get started quickly building a background task, see <bpt id=\"p1\">[</bpt>Create and register a background task<ept id=\"p1\">](create-and-register-a-background-task.md)</ept>.","pos":[1507,1644]},{"content":"For more in-depth information on conditions and triggers, see <bpt id=\"p1\">[</bpt>Support your app with background tasks<ept id=\"p1\">](support-your-app-with-background-tasks.md)</ept>.","pos":[1645,1791]},{"content":"Use the OnCanceled method to recognize cancellation requests","pos":[1796,1856]},{"content":"Write a method to handle the cancellation event.","pos":[1858,1906]},{"content":"Create a method named OnCanceled that has the following footprint.","pos":[1908,1974]},{"content":"This method is the entry point called by the Windows Runtime whenever a cancellation request is made against your background task.","pos":[1975,2105]},{"content":"The OnCanceled method needs to have the following footprint:","pos":[2107,2167]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[2171,2204]},{"content":"Add a flag variable called <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\_</ph>CancelRequested<ept id=\"p1\">**</ept> to the background task class.","pos":[2647,2725]},{"content":"This variable will be used to indicate when a cancellation request has been made.","pos":[2726,2807]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[2811,2844]},{"pos":[2969,3073],"content":"In the OnCanceled method you created in step 1, set the flag variable <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\_</ph>CancelRequested<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>."},{"pos":[3075,3259],"content":"The full <bpt id=\"p1\">[</bpt>background task sample<ept id=\"p1\">]( http://go.microsoft.com/fwlink/p/?linkid=227509)</ept> OnCanceled method sets <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\_</ph>CancelRequested<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>true<ept id=\"p3\">**</ept> and writes potentially useful debug output:"},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[3263,3296]},{"content":"In the background task's Run method, register the OnCanceled event handler method before starting work.","pos":[3919,4022]},{"content":"For example, use the following line of code:","pos":[4023,4067]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[4071,4104]},{"content":"Handle cancellation by exiting the Run method","pos":[4338,4383]},{"pos":[4386,4531],"content":"When a cancellation request is received, the Run method needs to stop work and exit by recognizing when <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\_</ph>cancelRequested<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>."},{"content":"Modify the code of your background task class to check the flag variable while it's working.","pos":[4533,4625]},{"content":"If <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\_</ph>cancelRequested<ept id=\"p1\">**</ept> set to true, stop work from continuing.","pos":[4626,4690]},{"pos":[4692,4861],"content":"The <bpt id=\"p1\">[</bpt>background task sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</ept> includes a check that stops the periodic timer callback if the background task is canceled:"},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[4865,4898]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The code sample shown above uses the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>IBackgroundTaskInstance<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br224797)</ept>.<bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Progress<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br224800)</ept> property being used to record background task progress.","pos":[5495,5758]},{"content":"Progress is reported back to the app using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskProgressEventArgs<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224782)</ept> class.","pos":[5759,5908]},{"content":"Modify the Run method so that after work has stopped, it records whether the task completed or was cancelled.","pos":[5910,6019]},{"pos":[6021,6131],"content":"The <bpt id=\"p1\">[</bpt>background task sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</ept> records status in LocalSettings:"},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[6135,6168]},{"content":"Remarks","pos":[7778,7785]},{"pos":[7787,7935],"content":"You can download the <bpt id=\"p1\">[</bpt>background task sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</ept> to see these code examples in the context of methods."},{"pos":[7937,8122],"content":"For illustrative purposes, the sample code shows only portions of the Run method (and callback timer) from the <bpt id=\"p1\">[</bpt>background task sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</ept>."},{"content":"Run method example","pos":[8127,8145]},{"pos":[8147,8308],"content":"The complete Run method, and timer callback code, from the <bpt id=\"p1\">[</bpt>background task sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</ept> are shown below for context:"},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[8312,8345]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.","pos":[12302,12400]},{"content":"If youâ€™re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id=\"p1\">[</bpt>archived documentation<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.","pos":[12401,12542]},{"content":"Related topics","pos":[12547,12561]},{"content":"Create and register a background task","pos":[12566,12603]},{"content":"Declare background tasks in the application manifest","pos":[12650,12702]},{"content":"Guidelines for background tasks","pos":[12764,12795]},{"content":"Monitor background task progress and completion","pos":[12836,12883]},{"content":"Register a background task","pos":[12940,12966]},{"content":"Respond to system events with background tasks","pos":[13002,13048]},{"content":"Run a background task on a timer","pos":[13104,13136]},{"content":"Set conditions for running a background task","pos":[13179,13223]},{"content":"Update a live tile from a background task","pos":[13277,13318]},{"content":"Use a maintenance trigger","pos":[13369,13394]},{"content":"Debug a background task","pos":[13430,13453]},{"content":"How to trigger suspend, resume, and background events in Windows Store apps (when debugging)","pos":[13486,13578]}],"content":"---\nauthor: TylerMSFT\ntitle: Handle a cancelled background task\ndescription: Learn how to make a background task that recognizes cancellation requests and stops work, reporting the cancellation to the app using persistent storage.\nms.assetid: B7E23072-F7B0-4567-985B-737DD2A8728E\n---\n\n# Handle a cancelled background task\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n**Important APIs**\n\n-   [**BackgroundTaskCanceledEventHandler**](https://msdn.microsoft.com/library/windows/apps/br224775)\n-   [**IBackgroundTaskInstance**](https://msdn.microsoft.com/library/windows/apps/br224797)\n-   [**ApplicationData.Current**](https://msdn.microsoft.com/library/windows/apps/br241619)\n\nLearn how to make a background task that recognizes cancellation requests and stops work, reporting the cancellation to the app using persistent storage.\n\n> **Note**  For all device families except desktop, if the device becomes low on memory, background tasks may be terminated. If an out of memory exception is not surfaced, or the app does not handle it, then the background task will be terminated without warning and without raising the OnCanceled event. This helps to ensure the user experience of the app in the foreground. Your background task should be designed to handle this scenario.\n\nThis topic assumes you have already created a background task class, including the Run method that is used as the background task entry point. To get started quickly building a background task, see [Create and register a background task](create-and-register-a-background-task.md). For more in-depth information on conditions and triggers, see [Support your app with background tasks](support-your-app-with-background-tasks.md).\n\n## Use the OnCanceled method to recognize cancellation requests\n\nWrite a method to handle the cancellation event.\n\nCreate a method named OnCanceled that has the following footprint. This method is the entry point called by the Windows Runtime whenever a cancellation request is made against your background task.\n\nThe OnCanceled method needs to have the following footprint:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>    private void OnCanceled(IBackgroundTaskInstance sender, BackgroundTaskCancellationReason reason)\n>    {\n>        // TODO: Add code to notify the background task that it is cancelled.\n>    }\n> ```\n> ```cpp\n>    void ExampleBackgroundTask::OnCanceled(IBackgroundTaskInstance^ taskInstance, BackgroundTaskCancellationReason reason)\n>    {\n>        // TODO: Add code to notify the background task that it is cancelled.\n>    }\n> ```\n\nAdd a flag variable called **\\_CancelRequested** to the background task class. This variable will be used to indicate when a cancellation request has been made.\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>   volatile bool _CancelRequested = false;\n> ```\n> ```cpp\n>   private:\n>     volatile bool CancelRequested;\n> ```\n\nIn the OnCanceled method you created in step 1, set the flag variable **\\_CancelRequested** to **true**.\n\nThe full [background task sample]( http://go.microsoft.com/fwlink/p/?linkid=227509) OnCanceled method sets **\\_CancelRequested** to **true** and writes potentially useful debug output:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     private void OnCanceled(IBackgroundTaskInstance sender, BackgroundTaskCancellationReason reason)\n>     {\n>         //\n>         // Indicate that the background task is canceled.\n>         //\n>\n>         _cancelRequested = true;\n>\n>         Debug.WriteLine(\"Background \" + sender.Task.Name + \" Cancel Requested...\");\n>     }\n> ```\n> ```cpp\n>     void SampleBackgroundTask::OnCanceled(IBackgroundTaskInstance^ taskInstance, BackgroundTaskCancellationReason reason)\n>     {\n>         //\n>         // Indicate that the background task is canceled.\n>         //\n>\n>         CancelRequested = true;\n>     }\n> ```\n\nIn the background task's Run method, register the OnCanceled event handler method before starting work. For example, use the following line of code:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     taskInstance.Canceled += new BackgroundTaskCanceledEventHandler(OnCanceled);\n> ```\n> ```cpp\n>     taskInstance->Canceled += ref new BackgroundTaskCanceledEventHandler(this, &SampleBackgroundTask::OnCanceled);\n> ```\n\n## Handle cancellation by exiting the Run method\n\n\nWhen a cancellation request is received, the Run method needs to stop work and exit by recognizing when **\\_cancelRequested** is set to **true**.\n\nModify the code of your background task class to check the flag variable while it's working. If **\\_cancelRequested** set to true, stop work from continuing.\n\nThe [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666) includes a check that stops the periodic timer callback if the background task is canceled:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     if ((_cancelRequested == false) && (_progress < 100))\n>     {\n>         _progress += 10;\n>         _taskInstance.Progress = _progress;\n>     }\n>     else\n>     {\n>         _periodicTimer.Cancel();\n>\n>         // TODO: Record whether the task completed or was cancelled.\n>     }\n> ```\n> ```cpp\n>     if ((CancelRequested == false) && (Progress < 100))\n>     {\n>         Progress += 10;\n>         TaskInstance->Progress = Progress;\n>     }\n>     else\n>     {\n>         PeriodicTimer->Cancel();\n>\n>         // TODO: Record whether the task completed or was cancelled.\n>     }\n> ```\n\n> **Note**  The code sample shown above uses the [**IBackgroundTaskInstance**](https://msdn.microsoft.com/library/windows/apps/br224797).[**Progress**](https://msdn.microsoft.com/library/windows/apps/br224800) property being used to record background task progress. Progress is reported back to the app using the [**BackgroundTaskProgressEventArgs**](https://msdn.microsoft.com/library/windows/apps/br224782) class.\n\nModify the Run method so that after work has stopped, it records whether the task completed or was cancelled.\n\nThe [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666) records status in LocalSettings:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     if ((_cancelRequested == false) && (_progress < 100))\n>     {\n>         _progress += 10;\n>         _taskInstance.Progress = _progress;\n>     }\n>     else\n>     {\n>         _periodicTimer.Cancel();\n>\n>         var settings = ApplicationData.Current.LocalSettings;\n>         var key = _taskInstance.Task.TaskId.ToString();\n>\n>         //\n>         // Write to LocalSettings to indicate that this background task ran.\n>         //\n>\n>         if (_cancelRequested)\n>         {\n>             settings.Values[key] = \"Canceled\";\n>         }\n>         else\n>         {\n>             settings.Values[key] = \"Completed\";\n>         }\n>         \n>         Debug.WriteLine(\"Background \" + _taskInstance.Task.Name + (_cancelRequested ? \" Canceled\" : \" Completed\"));\n>         \n>         //\n>         // Indicate that the background task has completed.\n>         //\n>\n>         _deferral.Complete();\n>     }\n> ```\n> ```cpp\n>     if ((CancelRequested == false) && (Progress < 100))\n>     {\n>         Progress += 10;\n>         TaskInstance->Progress = Progress;\n>     }\n>     else\n>     {\n>         PeriodicTimer->Cancel();\n>         \n>         //\n>         // Write to LocalSettings to indicate that this background task ran.\n>         //\n>         \n>         auto settings = ApplicationData::Current->LocalSettings;\n>         auto key = TaskInstance->Task->Name;\n>         settings->Values->Insert(key, (Progress < 100) ? \"Canceled\" : \"Completed\");\n>         \n>         //\n>         // Indicate that the background task has completed.\n>         //\n>         \n>         Deferral->Complete();\n>     }\n> ```\n\n## Remarks\n\nYou can download the [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666) to see these code examples in the context of methods.\n\nFor illustrative purposes, the sample code shows only portions of the Run method (and callback timer) from the [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666).\n\n## Run method example\n\nThe complete Run method, and timer callback code, from the [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666) are shown below for context:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n> //\n> // The Run method is the entry point of a background task.\n> //\n> public void Run(IBackgroundTaskInstance taskInstance)\n> {\n>     Debug.WriteLine(\"Background \" + taskInstance.Task.Name + \" Starting...\");\n>\n>     //\n>     // Query BackgroundWorkCost\n>     // Guidance: If BackgroundWorkCost is high, then perform only the minimum amount\n>     // of work in the background task and return immediately.\n>     //\n>     var cost = BackgroundWorkCost.CurrentBackgroundWorkCost;\n>     var settings = ApplicationData.Current.LocalSettings;\n>     settings.Values[\"BackgroundWorkCost\"] = cost.ToString();\n>\n>     //\n>     // Associate a cancellation handler with the background task.\n>     //\n>     taskInstance.Canceled += new BackgroundTaskCanceledEventHandler(OnCanceled);\n>\n>     //\n>     // Get the deferral object from the task instance, and take a reference to the taskInstance;\n>     //\n>     _deferral = taskInstance.GetDeferral();\n>     _taskInstance = taskInstance;\n>\n>     _periodicTimer = ThreadPoolTimer.CreatePeriodicTimer(new TimerElapsedHandler(PeriodicTimerCallback), TimeSpan.FromSeconds(1));\n> }\n>\n> //\n> // Simulate the background task activity.\n> //\n> private void PeriodicTimerCallback(ThreadPoolTimer timer)\n> {\n>     if ((_cancelRequested == false) && (_progress < 100))\n>     {\n>         _progress += 10;\n>         _taskInstance.Progress = _progress;\n>     }\n>     else\n>     {\n>         _periodicTimer.Cancel();\n>\n>         var settings = ApplicationData.Current.LocalSettings;\n>         var key = _taskInstance.Task.Name;\n>\n>         //\n>         // Write to LocalSettings to indicate that this background task ran.\n>         //\n>         settings.Values[key] = (_progress < 100) ? \"Canceled with reason: \" + _cancelReason.ToString() : \"Completed\";\n>         Debug.WriteLine(\"Background \" + _taskInstance.Task.Name + settings.Values[key]);\n>\n>         //\n>         // Indicate that the background task has completed.\n>         //\n>         _deferral.Complete();\n>     }\n> }\n> ```\n> ```cpp\n> void SampleBackgroundTask::Run(IBackgroundTaskInstance^ taskInstance)\n> {\n>     //\n>     // Query BackgroundWorkCost\n>     // Guidance: If BackgroundWorkCost is high, then perform only the minimum amount\n>     // of work in the background task and return immediately.\n>     //\n>     auto cost = BackgroundWorkCost::CurrentBackgroundWorkCost;\n>     auto settings = ApplicationData::Current->LocalSettings;\n>     settings->Values->Insert(\"BackgroundWorkCost\", cost.ToString());\n>\n>     //\n>     // Associate a cancellation handler with the background task.\n>     //\n>     taskInstance->Canceled += ref new BackgroundTaskCanceledEventHandler(this, &SampleBackgroundTask::OnCanceled);\n>\n>     //\n>     // Get the deferral object from the task instance, and take a reference to the taskInstance.\n>     //\n>     TaskDeferral = taskInstance->GetDeferral();\n>     TaskInstance = taskInstance;\n>\n>     auto timerDelegate = [this](ThreadPoolTimer^ timer)\n>     {\n>         if ((CancelRequested == false) &&\n>             (Progress < 100))\n>         {\n>             Progress += 10;\n>             TaskInstance->Progress = Progress;\n>         }\n>         else\n>         {\n>             PeriodicTimer->Cancel();\n>\n>             //\n>             // Write to LocalSettings to indicate that this background task ran.\n>             //\n>             auto settings = ApplicationData::Current->LocalSettings;\n>             auto key = TaskInstance->Task->Name;\n>             settings->Values->Insert(key, (Progress < 100) ? \"Canceled with reason: \" + CancelReason.ToString() : \"Completed\");\n>\n>             //\n>             // Indicate that the background task has completed.\n>             //\n>             TaskDeferral->Complete();\n>         }\n>     };\n>\n>     TimeSpan period;\n>     period.Duration = 1000 * 10000; // 1 second\n>     PeriodicTimer = ThreadPoolTimer::CreatePeriodicTimer(ref new TimerElapsedHandler(timerDelegate), period);\n> }\n> ```\n\n> **Note**  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps. If youâ€™re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132).\n\n## Related topics\n\n* [Create and register a background task](create-and-register-a-background-task.md)\n* [Declare background tasks in the application manifest](declare-background-tasks-in-the-application-manifest.md)\n* [Guidelines for background tasks](guidelines-for-background-tasks.md)\n* [Monitor background task progress and completion](monitor-background-task-progress-and-completion.md)\n* [Register a background task](register-a-background-task.md)\n* [Respond to system events with background tasks](respond-to-system-events-with-background-tasks.md)\n* [Run a background task on a timer](run-a-background-task-on-a-timer-.md)\n* [Set conditions for running a background task](set-conditions-for-running-a-background-task.md)\n* [Update a live tile from a background task](update-a-live-tile-from-a-background-task.md)\n* [Use a maintenance trigger](use-a-maintenance-trigger.md)\n\n* [Debug a background task](debug-a-background-task.md)\n* [How to trigger suspend, resume, and background events in Windows Store apps (when debugging)](http://go.microsoft.com/fwlink/p/?linkid=254345)\n"}