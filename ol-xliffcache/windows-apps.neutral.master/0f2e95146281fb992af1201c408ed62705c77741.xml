{"nodes":[{"content":"UWP apps that support Windows Ink can serialize and deserialize ink strokes to an Ink Serialized Format (ISF) file.","pos":[47,162]},{"content":"The ISF file is a GIF image with additional metadata for all ink stroke properties and behaviors.","pos":[163,260]},{"content":"Apps that are not ink-enabled, can view the static GIF image, including alpha-channel background transparency.","pos":[261,371]},{"content":"Store and retrieve Windows Ink stroke data","pos":[379,421]},{"content":"Store and retrieve Windows Ink stroke data","pos":[650,692]},{"content":"UWP apps that support Windows Ink can serialize and deserialize ink strokes to an Ink Serialized Format (ISF) file.","pos":[695,810]},{"content":"The ISF file is a GIF image with additional metadata for all ink stroke properties and behaviors.","pos":[811,908]},{"content":"Apps that are not ink-enabled, can view the static GIF image, including alpha-channel background transparency.","pos":[909,1019]},{"content":"Important APIs","pos":[1024,1038]},{"content":"InkCanvas","pos":[1049,1058]},{"content":"Windows.UI.Input.Inking","pos":[1127,1150]},{"content":"Note","pos":[1217,1221]},{"content":"ISF is the most compact persistent representation of ink.","pos":[1226,1283]},{"content":"It can be embedded within a binary document format, such as a GIF file, or placed directly on the Clipboard.","pos":[1284,1392]},{"pos":[1535,1561],"content":"Save ink strokes to a file"},{"pos":[1564,1703],"content":"Here, we demonstrate how to save ink strokes drawn on an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept> control."},{"content":"First, we set up the UI.","pos":[1709,1733]},{"pos":[1739,1874],"content":"The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept>."},{"content":"We then set some basic ink input behaviors.","pos":[2869,2912]},{"pos":[2918,3223],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkPresenter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn899081)</ept> is configured to interpret input data from both pen and mouse as ink strokes (<bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InputDeviceTypes<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn922019)</ept>), and listeners for the click events on the buttons are declared."},{"pos":[3806,3881],"content":"Finally, we save the ink in the click event handler of the <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> button."},{"pos":[3887,4048],"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FileSavePicker<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207871)</ept> lets the user select both the file and the location where the ink data is saved."},{"pos":[4054,4262],"content":"Once a file is selected, we open an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IRandomAccessStream<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241731)</ept> stream set to <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ReadWrite<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241635)</ept>."},{"pos":[4268,4496],"content":"We then call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SaveAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242114)</ept> to serialize the ink strokes managed by the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InkStrokeContainer<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208492)</ept> to the stream."},{"content":"GIF is the only supported format for saving ink data.","pos":[7107,7160]},{"content":"However, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LoadAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701607)</ept> method (demonstrated in the next section) does support additional formats for backward compatibility.","pos":[7161,7349]},{"pos":[7498,7526],"content":"Load ink strokes from a file"},{"pos":[7529,7690],"content":"Here, we demonstrate how to load ink strokes from a file and render them on an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept> control."},{"content":"First, we set up the UI.","pos":[7696,7720]},{"pos":[7726,7861],"content":"The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept>."},{"content":"We then set some basic ink input behaviors.","pos":[8856,8899]},{"pos":[8905,9210],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkPresenter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn899081)</ept> is configured to interpret input data from both pen and mouse as ink strokes (<bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InputDeviceTypes<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn922019)</ept>), and listeners for the click events on the buttons are declared."},{"pos":[9793,9868],"content":"Finally, we load the ink in the click event handler of the <bpt id=\"p1\">**</bpt>Load<ept id=\"p1\">**</ept> button."},{"pos":[9874,10049],"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FileOpenPicker<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207847)</ept> lets the user select both the file and the location from where to retrieve the saved ink data."},{"pos":[10055,10258],"content":"Once a file is selected, we open an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IRandomAccessStream<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241731)</ept> stream set to <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Read<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241635)</ept>."},{"content":"We then call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LoadAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701607)</ept> to read, de-serialize, and load the saved ink strokes into the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InkStrokeContainer<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208492)</ept>.","pos":[10264,10497]},{"content":"Loading the strokes into the <bpt id=\"p1\">**</bpt>InkStrokeContainer<ept id=\"p1\">**</ept> causes the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>InkPresenter<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn899081)</ept> to immediately render them to the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>InkCanvas<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept>.","pos":[10498,10746]},{"content":"Note","pos":[11892,11896]},{"content":"GIF is the only supported format for saving ink data.","pos":[11901,11954]},{"content":"However, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LoadAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701607)</ept> method does support the following formats for backward compatibility.","pos":[11955,12111]},{"content":"Format","pos":[12115,12121]},{"content":"Description","pos":[12143,12154]},{"content":"InkSerializedFormat","pos":[12581,12600]},{"content":"Specifies ink that is persisted using ISF.","pos":[12609,12651]},{"content":"This is the most compact persistent representation of ink.","pos":[12652,12710]},{"content":"It can be embedded within a binary document format or placed directly on the Clipboard.","pos":[12711,12798]},{"content":"Base64InkSerializedFormat","pos":[13003,13028]},{"content":"Specifies ink that is persisted by encoding the ISF as a base64 stream.","pos":[13031,13102]},{"content":"This format is provided so ink can be encoded directly in an XML or HTML file.","pos":[13103,13181]},{"content":"Gif","pos":[13425,13428]},{"content":"Specifies ink that is persisted by using a GIF file that contains ISF as metadata embedded within the file.","pos":[13453,13560]},{"content":"This enables ink to be viewed in applications that are not ink-enabled and maintain its full ink fidelity when it returns to an ink-enabled application.","pos":[13561,13713]},{"content":"This format is ideal when transporting ink content within an HTML file and for making it usable by ink and non-ink applications.","pos":[13714,13842]},{"content":"Base64Gif","pos":[13847,13856]},{"content":"Specifies ink that is persisted by using a base64-encoded fortified GIF.","pos":[13875,13947]},{"content":"This format is provided when ink is to be encoded directly in an XML or HTML file for later conversion into an image.","pos":[13948,14065]},{"content":"A possible use of this is in an XML format generated to contain all ink information and used to generate HTML through Extensible Stylesheet Language Transformations (XSLT).","pos":[14066,14238]},{"pos":[14436,14481],"content":"Copy and paste ink strokes with the clipboard"},{"content":"Here, we demonstrate how to use the clipboard to transfer ink strokes between apps.","pos":[14484,14567]},{"pos":[14569,14767],"content":"To support clipboard functionality, the built-in <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkStrokeContainer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208492)</ept> cut and copy commands require one or more ink strokes be selected."},{"content":"For this example, we enable stroke selection when input is modified with a pen barrel button (or right mouse button).","pos":[14769,14886]},{"content":"For a complete example of how to implement stroke selection, see <bpt id=\"p1\">[</bpt>Pass-through input for advanced processing<ept id=\"p1\">](pen-and-stylus-interactions.md#passthrough)</ept> in <bpt id=\"p2\">[</bpt>Pen and stylus interactions<ept id=\"p2\">](pen-and-stylus-interactions.md)</ept>.","pos":[14887,15106]},{"content":"First, we set up the UI.","pos":[15112,15136]},{"pos":[15142,15315],"content":"The UI includes \"Cut\", \"Copy\", \"Paste\", and \"Clear\" buttons, along with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept> and a selection canvas."},{"content":"We then set some basic ink input behaviors.","pos":[16583,16626]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkPresenter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn899081)</ept> is configured to interpret input data from both pen and mouse as ink strokes (<bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InputDeviceTypes<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn922019)</ept>).","pos":[16632,16873]},{"content":"Listeners for the click events on the buttons as well as pointer and stroke events for selection functionality are also declared here.","pos":[16874,17008]},{"pos":[17014,17233],"content":"For a complete example of how to implement stroke selection, see <bpt id=\"p1\">[</bpt>Pass-through input for advanced processing<ept id=\"p1\">](pen-and-stylus-interactions.md#passthrough)</ept> in <bpt id=\"p2\">[</bpt>Pen and stylus interactions<ept id=\"p2\">](pen-and-stylus-interactions.md)</ept>."},{"pos":[19182,19343],"content":"Finally, after adding stroke selection support, we implement clipboard functionality in the click event handlers of the <bpt id=\"p1\">**</bpt>Cut<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Copy<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Paste<ept id=\"p3\">**</ept> buttons."},{"pos":[19349,19634],"content":"For cut, we first call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CopySelectedToClipboard<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244232)</ept> on the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InkStrokeContainer<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208492)</ept> of the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>InkPresenter<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/dn922011)</ept>."},{"pos":[19640,19774],"content":"We then call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeleteSelected<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244233)</ept> to remove the strokes from the ink canvas."},{"content":"Finally, we delete all selection strokes from the selection canvas.","pos":[19780,19847]},{"pos":[22021,22037],"content":"Related articles"},{"content":"Pen and stylus interactions","pos":[22042,22069]},{"content":"Samples","pos":[22106,22113]},{"content":"Ink sample","pos":[22119,22129]},{"content":"Simple ink sample","pos":[22183,22200]},{"content":"Complex ink sample","pos":[22254,22272]}],"content":"---\nauthor: Karl-Bridge-Microsoft\nDescription: UWP apps that support Windows Ink can serialize and deserialize ink strokes to an Ink Serialized Format (ISF) file. The ISF file is a GIF image with additional metadata for all ink stroke properties and behaviors. Apps that are not ink-enabled, can view the static GIF image, including alpha-channel background transparency.\ntitle: Store and retrieve Windows Ink stroke data\nms.assetid: C96C9D2F-DB69-4883-9809-4A0DF7CEC506\nlabel: Store and retrieve Windows Ink stroke data\ntemplate: detail.hbs\nkeyword: Windows Ink, Windows Inking, DirectInk, InkPresenter, InkCanvas, ISF, Ink Serialized Format\n---\n\n# Store and retrieve Windows Ink stroke data\n\n\nUWP apps that support Windows Ink can serialize and deserialize ink strokes to an Ink Serialized Format (ISF) file. The ISF file is a GIF image with additional metadata for all ink stroke properties and behaviors. Apps that are not ink-enabled, can view the static GIF image, including alpha-channel background transparency.\n\n\n**Important APIs**\n\n-   [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535)\n-   [**Windows.UI.Input.Inking**](https://msdn.microsoft.com/library/windows/apps/br208524)\n\n\n\n**Note**  \nISF is the most compact persistent representation of ink. It can be embedded within a binary document format, such as a GIF file, or placed directly on the Clipboard.\n\n \n\n## <span id=\"Save_ink_strokes_to_a_file\"></span><span id=\"save_ink_strokes_to_a_file\"></span><span id=\"SAVE_INK_STROKES_TO_A_FILE\"></span>Save ink strokes to a file\n\n\nHere, we demonstrate how to save ink strokes drawn on an [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) control.\n\n1.  First, we set up the UI.\n\n    The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535).\n```    XAML\n<Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"*\"/>\n        </Grid.RowDefinitions>\n        <StackPanel x:Name=\"HeaderPanel\" Orientation=\"Horizontal\" Grid.Row=\"0\">\n            <TextBlock x:Name=\"Header\" \n                       Text=\"Basic ink store sample\" \n                       Style=\"{ThemeResource HeaderTextBlockStyle}\" \n                       Margin=\"10,0,0,0\" />\n            <Button x:Name=\"btnSave\" \n                    Content=\"Save\" \n                    Margin=\"50,0,10,0\"/>\n            <Button x:Name=\"btnLoad\" \n                    Content=\"Load\" \n                    Margin=\"50,0,10,0\"/>\n            <Button x:Name=\"btnClear\" \n                    Content=\"Clear\" \n                    Margin=\"50,0,10,0\"/>\n        </StackPanel>\n        <Grid Grid.Row=\"1\">\n            <InkCanvas x:Name=\"inkCanvas\" />\n        </Grid>\n    </Grid>\n```\n\n2.  We then set some basic ink input behaviors.\n\n    The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019)), and listeners for the click events on the buttons are declared.\n```    CSharp\npublic MainPage()\n    {\n        this.InitializeComponent();\n\n        // Set supported inking device types.\n        inkCanvas.InkPresenter.InputDeviceTypes =\n            Windows.UI.Core.CoreInputDeviceTypes.Mouse |\n            Windows.UI.Core.CoreInputDeviceTypes.Pen;\n\n        // Listen for button click to initiate save.\n        btnSave.Click += btnSave_Click;\n        // Listen for button click to initiate load.\n        btnLoad.Click += btnLoad_Click;\n        // Listen for button click to clear ink canvas.\n        btnClear.Click += btnClear_Click;\n    }\n```\n\n3.  Finally, we save the ink in the click event handler of the **Save** button.\n\n    A [**FileSavePicker**](https://msdn.microsoft.com/library/windows/apps/br207871) lets the user select both the file and the location where the ink data is saved.\n\n    Once a file is selected, we open an [**IRandomAccessStream**](https://msdn.microsoft.com/library/windows/apps/br241731) stream set to [**ReadWrite**](https://msdn.microsoft.com/library/windows/apps/br241635).\n\n    We then call [**SaveAsync**](https://msdn.microsoft.com/library/windows/apps/br242114) to serialize the ink strokes managed by the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) to the stream.\n```    CSharp\n// Save ink data to a file.\n    private async void btnSave_Click(object sender, RoutedEventArgs e)\n    {\n        // Get all strokes on the InkCanvas.\n        IReadOnlyList<InkStroke> currentStrokes = inkCanvas.InkPresenter.StrokeContainer.GetStrokes();\n\n        // Strokes present on ink canvas.\n        if (currentStrokes.Count > 0)\n        {\n            // Let users choose their ink file using a file picker.\n            // Initialize the picker.\n            Windows.Storage.Pickers.FileSavePicker savePicker = \n                new Windows.Storage.Pickers.FileSavePicker();\n            savePicker.SuggestedStartLocation = \n                Windows.Storage.Pickers.PickerLocationId.DocumentsLibrary;\n            savePicker.FileTypeChoices.Add(\n                \"GIF with embedded ISF\", \n                new List<string>() { \".gif\" });\n            savePicker.DefaultFileExtension = \".gif\";\n            savePicker.SuggestedFileName = \"InkSample\";\n\n            // Show the file picker.\n            Windows.Storage.StorageFile file = \n                await savePicker.PickSaveFileAsync();\n            // When chosen, picker returns a reference to the selected file.\n            if (file != null)\n            {\n                // Prevent updates to the file until updates are \n                // finalized with call to CompleteUpdatesAsync.\n                Windows.Storage.CachedFileManager.DeferUpdates(file);\n                // Open a file stream for writing.\n                IRandomAccessStream stream = await file.OpenAsync(Windows.Storage.FileAccessMode.ReadWrite);\n                // Write the ink strokes to the output stream.\n                using (IOutputStream outputStream = stream.GetOutputStreamAt(0))\n                {\n                    await inkCanvas.InkPresenter.StrokeContainer.SaveAsync(outputStream);\n                    await outputStream.FlushAsync();\n                }\n                stream.Dispose();\n\n                // Finalize write so other apps can update file.\n                Windows.Storage.Provider.FileUpdateStatus status =\n                    await Windows.Storage.CachedFileManager.CompleteUpdatesAsync(file);\n\n                if (status == Windows.Storage.Provider.FileUpdateStatus.Complete)\n                {\n                    // File saved.\n                }\n                else\n                {\n                    // File couldn&#39;t be saved.\n                }\n            }\n            // User selects Cancel and picker returns null.\n            else\n            {\n                // Operation cancelled.\n            }\n        }\n    }\n```\n\n[!NOTE]  \nGIF is the only supported format for saving ink data. However, the [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) method (demonstrated in the next section) does support additional formats for backward compatibility.\n\n \n\n## <span id=\"Load_ink_strokes_from_a_file\"></span><span id=\"load_ink_strokes_from_a_file\"></span><span id=\"LOAD_INK_STROKES_FROM_A_FILE\"></span>Load ink strokes from a file\n\n\nHere, we demonstrate how to load ink strokes from a file and render them on an [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) control.\n\n1.  First, we set up the UI.\n\n    The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535).\n```    XAML\n<Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"*\"/>\n        </Grid.RowDefinitions>\n        <StackPanel x:Name=\"HeaderPanel\" Orientation=\"Horizontal\" Grid.Row=\"0\">\n            <TextBlock x:Name=\"Header\" \n                       Text=\"Basic ink store sample\" \n                       Style=\"{ThemeResource HeaderTextBlockStyle}\" \n                       Margin=\"10,0,0,0\" />\n            <Button x:Name=\"btnSave\" \n                    Content=\"Save\" \n                    Margin=\"50,0,10,0\"/>\n            <Button x:Name=\"btnLoad\" \n                    Content=\"Load\" \n                    Margin=\"50,0,10,0\"/>\n            <Button x:Name=\"btnClear\" \n                    Content=\"Clear\" \n                    Margin=\"50,0,10,0\"/>\n        </StackPanel>\n        <Grid Grid.Row=\"1\">\n            <InkCanvas x:Name=\"inkCanvas\" />\n        </Grid>\n    </Grid>\n```\n\n2.  We then set some basic ink input behaviors.\n\n    The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019)), and listeners for the click events on the buttons are declared.\n```    CSharp\npublic MainPage()\n    {\n        this.InitializeComponent();\n\n        // Set supported inking device types.\n        inkCanvas.InkPresenter.InputDeviceTypes =\n            Windows.UI.Core.CoreInputDeviceTypes.Mouse |\n            Windows.UI.Core.CoreInputDeviceTypes.Pen;\n\n        // Listen for button click to initiate save.\n        btnSave.Click += btnSave_Click;\n        // Listen for button click to initiate load.\n        btnLoad.Click += btnLoad_Click;\n        // Listen for button click to clear ink canvas.\n        btnClear.Click += btnClear_Click;\n    }\n```\n\n3.  Finally, we load the ink in the click event handler of the **Load** button.\n\n    A [**FileOpenPicker**](https://msdn.microsoft.com/library/windows/apps/br207847) lets the user select both the file and the location from where to retrieve the saved ink data.\n\n    Once a file is selected, we open an [**IRandomAccessStream**](https://msdn.microsoft.com/library/windows/apps/br241731) stream set to [**Read**](https://msdn.microsoft.com/library/windows/apps/br241635).\n\n    We then call [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) to read, de-serialize, and load the saved ink strokes into the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492). Loading the strokes into the **InkStrokeContainer** causes the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) to immediately render them to the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535).\n``` csharp\n// Load ink data from a file.\nprivate async void btnLoad_Click(object sender, RoutedEventArgs e)\n{\n    // Let users choose their ink file using a file picker.\n    // Initialize the picker.\n    Windows.Storage.Pickers.FileOpenPicker openPicker =\n        new Windows.Storage.Pickers.FileOpenPicker();\n    openPicker.SuggestedStartLocation =\n        Windows.Storage.Pickers.PickerLocationId.DocumentsLibrary;\n    openPicker.FileTypeFilter.Add(\".gif\");\n    // Show the file picker.\n    Windows.Storage.StorageFile file = await openPicker.PickSingleFileAsync();\n    // User selects a file and picker returns a reference to the selected file.\n    if (file != null)\n    {\n        // Open a file stream for reading.\n        IRandomAccessStream stream = await file.OpenAsync(Windows.Storage.FileAccessMode.Read);\n        // Read from file.\n        using (var inputStream = stream.GetInputStreamAt(0))\n        {\n            await inkCanvas.InkPresenter.StrokeContainer.LoadAsync(stream);\n        }\n        stream.Dispose();\n    }\n    // User selects Cancel and picker returns null.\n    else\n    {\n        // Operation cancelled.\n    }\n}\n```\n\n**Note**  \nGIF is the only supported format for saving ink data. However, the [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) method does support the following formats for backward compatibility.\n\n| Format                    | Description |\n|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| InkSerializedFormat       | Specifies ink that is persisted using ISF. This is the most compact persistent representation of ink. It can be embedded within a binary document format or placed directly on the Clipboard.                                                                                                                                                                                                         |\n| Base64InkSerializedFormat | Specifies ink that is persisted by encoding the ISF as a base64 stream. This format is provided so ink can be encoded directly in an XML or HTML file.                                                                                                                                                                                                                                                |\n| Gif                       | Specifies ink that is persisted by using a GIF file that contains ISF as metadata embedded within the file. This enables ink to be viewed in applications that are not ink-enabled and maintain its full ink fidelity when it returns to an ink-enabled application. This format is ideal when transporting ink content within an HTML file and for making it usable by ink and non-ink applications. |\n| Base64Gif                 | Specifies ink that is persisted by using a base64-encoded fortified GIF. This format is provided when ink is to be encoded directly in an XML or HTML file for later conversion into an image. A possible use of this is in an XML format generated to contain all ink information and used to generate HTML through Extensible Stylesheet Language Transformations (XSLT). \n\n## <span id=\"Copy_and_paste_ink_strokes_with_the_clipboard\"></span><span id=\"copy_and_paste_ink_strokes_with_the_clipboard\"></span><span id=\"COPY_AND_PASTE_INK_STROKES_WITH_THE_CLIPBOARD\"></span>Copy and paste ink strokes with the clipboard\n\n\nHere, we demonstrate how to use the clipboard to transfer ink strokes between apps.\n\nTo support clipboard functionality, the built-in [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) cut and copy commands require one or more ink strokes be selected.\n\nFor this example, we enable stroke selection when input is modified with a pen barrel button (or right mouse button). For a complete example of how to implement stroke selection, see [Pass-through input for advanced processing](pen-and-stylus-interactions.md#passthrough) in [Pen and stylus interactions](pen-and-stylus-interactions.md).\n\n1.  First, we set up the UI.\n\n    The UI includes \"Cut\", \"Copy\", \"Paste\", and \"Clear\" buttons, along with the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) and a selection canvas.\n```    XAML\n<Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"*\"/>\n        </Grid.RowDefinitions>\n        <StackPanel x:Name=\"HeaderPanel\" Orientation=\"Horizontal\" Grid.Row=\"0\">\n            <TextBlock x:Name=\"tbHeader\" \n                       Text=\"Basic ink store sample\" \n                       Style=\"{ThemeResource HeaderTextBlockStyle}\" \n                       Margin=\"10,0,0,0\" />\n            <Button x:Name=\"btnCut\" \n                    Content=\"Cut\" \n                    Margin=\"20,0,10,0\"/>\n            <Button x:Name=\"btnCopy\" \n                    Content=\"Copy\" \n                    Margin=\"20,0,10,0\"/>\n            <Button x:Name=\"btnPaste\" \n                    Content=\"Paste\" \n                    Margin=\"20,0,10,0\"/>\n            <Button x:Name=\"btnClear\" \n                    Content=\"Clear\" \n                    Margin=\"20,0,10,0\"/>\n        </StackPanel>\n        <Grid x:Name=\"gridCanvas\" Grid.Row=\"1\">\n            <!-- Canvas for displaying selection UI. -->\n            <Canvas x:Name=\"selectionCanvas\"/>\n            <!-- Inking area -->\n            <InkCanvas x:Name=\"inkCanvas\"/>\n        </Grid>\n    </Grid>\n```\n\n2.  We then set some basic ink input behaviors.\n\n    The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019)). Listeners for the click events on the buttons as well as pointer and stroke events for selection functionality are also declared here.\n\n    For a complete example of how to implement stroke selection, see [Pass-through input for advanced processing](pen-and-stylus-interactions.md#passthrough) in [Pen and stylus interactions](pen-and-stylus-interactions.md).\n```    CSharp\npublic MainPage()\n    {\n        this.InitializeComponent();\n\n        // Set supported inking device types.\n        inkCanvas.InkPresenter.InputDeviceTypes =\n            Windows.UI.Core.CoreInputDeviceTypes.Mouse |\n            Windows.UI.Core.CoreInputDeviceTypes.Pen;\n\n        // Listen for button click to cut ink strokes.\n        btnCut.Click += btnCut_Click;\n        // Listen for button click to copy ink strokes.\n        btnCopy.Click += btnCopy_Click;\n        // Listen for button click to paste ink strokes.\n        btnPaste.Click += btnPaste_Click;\n        // Listen for button click to clear ink canvas.\n        btnClear.Click += btnClear_Click;\n\n        // By default, the InkPresenter processes input modified by \n        // a secondary affordance (pen barrel button, right mouse \n        // button, or similar) as ink.\n        // To pass through modified input to the app for custom processing \n        // on the app UI thread instead of the background ink thread, set \n        // InputProcessingConfiguration.RightDragAction to LeaveUnprocessed.\n        inkCanvas.InkPresenter.InputProcessingConfiguration.RightDragAction =\n            InkInputRightDragAction.LeaveUnprocessed;\n\n        // Listen for unprocessed pointer events from modified input.\n        // The input is used to provide selection functionality.\n        inkCanvas.InkPresenter.UnprocessedInput.PointerPressed +=\n            UnprocessedInput_PointerPressed;\n        inkCanvas.InkPresenter.UnprocessedInput.PointerMoved +=\n            UnprocessedInput_PointerMoved;\n        inkCanvas.InkPresenter.UnprocessedInput.PointerReleased +=\n            UnprocessedInput_PointerReleased;\n\n        // Listen for new ink or erase strokes to clean up selection UI.\n        inkCanvas.InkPresenter.StrokeInput.StrokeStarted +=\n            StrokeInput_StrokeStarted;\n        inkCanvas.InkPresenter.StrokesErased +=\n            InkPresenter_StrokesErased;\n    }\n```\n\n3.  Finally, after adding stroke selection support, we implement clipboard functionality in the click event handlers of the **Cut**, **Copy**, and **Paste** buttons.\n\n    For cut, we first call [**CopySelectedToClipboard**](https://msdn.microsoft.com/library/windows/apps/br244232) on the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) of the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn922011).\n\n    We then call [**DeleteSelected**](https://msdn.microsoft.com/library/windows/apps/br244233) to remove the strokes from the ink canvas.\n\n    Finally, we delete all selection strokes from the selection canvas.\n```    CSharp\nprivate void btnCut_Click(object sender, RoutedEventArgs e)\n    {\n        inkCanvas.InkPresenter.StrokeContainer.CopySelectedToClipboard();\n        inkCanvas.InkPresenter.StrokeContainer.DeleteSelected();\n        ClearSelection();\n    }\n```\n```    CSharp\n// Clean up selection UI.\n    private void ClearSelection()\n    {\n        var strokes = inkCanvas.InkPresenter.StrokeContainer.GetStrokes();\n        foreach (var stroke in strokes)\n        {\n            stroke.Selected = false;\n        }\n        ClearDrawnBoundingRect();\n    }\n\n    private void ClearDrawnBoundingRect()\n    {\n        if (selectionCanvas.Children.Any())\n        {\n            selectionCanvas.Children.Clear();\n            boundingRect = Rect.Empty;\n        }\n    }\n```\n\n    For copy, we simply call [**CopySelectedToClipboard**](https://msdn.microsoft.com/library/windows/apps/br244232) on the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) of the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn922011).\n```    CSharp\nprivate void btnCopy_Click(object sender, RoutedEventArgs e)\n    {\n        inkCanvas.InkPresenter.StrokeContainer.CopySelectedToClipboard();\n    }\n```\n\n    For paste, we call [**CanPasteFromClipboard**](https://msdn.microsoft.com/library/windows/apps/br208495) to ensure that the content on the clipboard can be pasted to the ink canvas.\n\n    If so, we call [**PasteFromClipboard**](https://msdn.microsoft.com/library/windows/apps/br208503) to insert the clipboard ink strokes into the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) of the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn922011), which then renders the strokes to the ink canvas.\n```    CSharp\nprivate void btnPaste_Click(object sender, RoutedEventArgs e)\n    {\n        if (inkCanvas.InkPresenter.StrokeContainer.CanPasteFromClipboard())\n        {\n            inkCanvas.InkPresenter.StrokeContainer.PasteFromClipboard(\n                new Point(0, 0));\n        }\n        else\n        {\n            // Cannot paste from clipboard.\n        }\n    }\n```\n\n## <span id=\"related_topics\"></span>Related articles\n\n* [Pen and stylus interactions](pen-and-stylus-interactions.md)\n\n**Samples**\n* [Ink sample](http://go.microsoft.com/fwlink/p/?LinkID=620308)\n* [Simple ink sample](http://go.microsoft.com/fwlink/p/?LinkID=620312)\n* [Complex ink sample](http://go.microsoft.com/fwlink/p/?LinkID=620314)\n \n\n \n\n\n\n\n"}