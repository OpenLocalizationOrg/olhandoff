{"nodes":[{"content":"Launch an app for results","pos":[29,54]},{"content":"Learn how to launch an app from another app and exchange data between the two.","pos":[68,146]},{"content":"This is called launching an app for results.","pos":[147,191]},{"content":"Launch an app for results","pos":[248,273]},{"content":"Updated for UWP apps on Windows 10.","pos":[279,314]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[315,407]},{"content":"Important APIs","pos":[415,429]},{"content":"LaunchUriForResultsAsync","pos":[440,464]},{"content":"ValueSet","pos":[533,541]},{"content":"Learn how to launch an app from another app and exchange data between the two.","pos":[604,682]},{"content":"This is called <bpt id=\"p1\">*</bpt>launching an app for results<ept id=\"p1\">*</ept>.","pos":[683,729]},{"content":"The example here shows you how to use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LaunchUriForResultsAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn956686)</ept> to launch an app for results.","pos":[730,886]},{"content":"New app-to-app communication APIs in Windows 10 make it possible for Windows apps (and Windows Web apps) to launch an app and exchange data and files.","pos":[888,1038]},{"content":"This enables you to build mash-up solutions from multiple apps.","pos":[1039,1102]},{"content":"Using these new APIs, complex tasks that would have required the user to use multiple apps can now be handled seamlessly.","pos":[1103,1224]},{"content":"For example, your app could launch a social networking app to choose a contact, or launch a checkout app to complete a payment process.","pos":[1225,1360]},{"content":"The app that you'll launch for results will be referred to as the launched app.","pos":[1362,1441]},{"content":"The app that launches the app will be referred to as the calling app.","pos":[1442,1511]},{"content":"For this example you will write both the calling app and the launched app.","pos":[1512,1586]},{"content":"Step 1: Register the protocol to be handled in the app that you'll launch for results","pos":[1591,1676]},{"content":"In the Package.appxmanifest file of the launched app, add a protocol extension to the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;lt;</ph>Application<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> section.","pos":[1679,1797]},{"content":"The example here uses a fictional protocol named <bpt id=\"p1\">**</bpt>test-app2app<ept id=\"p1\">**</ept>.","pos":[1798,1864]},{"pos":[1866,1952],"content":"The <bpt id=\"p1\">**</bpt>ReturnResults<ept id=\"p1\">**</ept> attribute in the protocol extension accepts one of these values:"},{"content":"<bpt id=\"p1\">**</bpt>optional<ept id=\"p1\">**</ept>—The app can be launched for results by using the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>LaunchUriForResultsAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn956686)</ept> method, or not for results by using <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>LaunchUriAsync<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/hh701476)</ept>.","pos":[1958,2224]},{"content":"When you use <bpt id=\"p1\">**</bpt>optional<ept id=\"p1\">**</ept>, the launched app must determine whether it was launched for results.","pos":[2225,2320]},{"content":"It can do that by checking the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>OnActivated<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242330)</ept> event argument.","pos":[2321,2443]},{"content":"If the argument's <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IActivatedEventArgs.Kind<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224728)</ept> property returns <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ActivationKind.ProtocolForResults<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br224693)</ept>, or if the type of the event argument is <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>ProtocolActivatedEventArgs<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br224742)</ept>, the app was launched via <bpt id=\"p7\">**</bpt>LaunchUriForResultsAsync<ept id=\"p7\">**</ept>.","pos":[2444,2853]},{"pos":[2858,3032],"content":"<bpt id=\"p1\">**</bpt>always<ept id=\"p1\">**</ept>—The app can be launched only for results; that is, it can respond only to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>LaunchUriForResultsAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn956686)</ept>."},{"pos":[3037,3188],"content":"<bpt id=\"p1\">**</bpt>none<ept id=\"p1\">**</ept>—The app cannot be launched for results; it can respond only to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>LaunchUriAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh701476)</ept>."},{"content":"In this protocol-extension example, the app can be launched only for results.","pos":[3190,3267]},{"content":"This simplifies the logic inside the <bpt id=\"p1\">**</bpt>OnActivated<ept id=\"p1\">**</ept> method, discussed below, because we have to handle only the \"launched for results\" case and not the other ways that the app could be activated.","pos":[3268,3464]},{"content":"Step 2: Override Application.OnActivated in the app that you'll launch for results","pos":[3818,3900]},{"pos":[3903,4018],"content":"If this method does not already exist in the launched app, create it within the <ph id=\"ph1\">`App`</ph> class defined in App.xaml.cs."},{"content":"In an app that lets you pick your friends in a social network, this function could be where you open the people-picker page.","pos":[4020,4144]},{"content":"In this next example, a page named <bpt id=\"p1\">**</bpt>LaunchedForResultsPage<ept id=\"p1\">**</ept> is displayed when the app is activated for results.","pos":[4145,4258]},{"content":"Ensure that the <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statement is included at the top of the file.","pos":[4259,4330]},{"content":"Because the protocol extension in the Package.appxmanifest file specifies <bpt id=\"p1\">**</bpt>ReturnResults<ept id=\"p1\">**</ept> as <bpt id=\"p2\">**</bpt>always<ept id=\"p2\">**</ept>, the code just shown can cast <ph id=\"ph1\">`args`</ph> directly to <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ProtocolForResultsActivatedEventArgs<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn906905)</ept> with confidence that only <bpt id=\"p5\">**</bpt>ProtocolForResultsActivatedEventArgs<ept id=\"p5\">**</ept> will be sent to <bpt id=\"p6\">**</bpt>OnActivated<ept id=\"p6\">**</ept> for this app.","pos":[5000,5368]},{"content":"If your app can be activated in ways other than launching for results, you can check whether <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IActivatedEventArgs.Kind<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224728)</ept> property returns <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ActivationKind.ProtocolForResults<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br224693)</ept> to tell whether the app was launched for results.","pos":[5369,5715]},{"content":"Step 3: Add a ProtocolForResultsOperation field to the app you launch for results","pos":[5720,5801]},{"content":"You'll use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ProtocolForResultsOperation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn906913)</ept> field to signal when the launched app is ready to return the result to the calling app.","pos":[5885,6079]},{"content":"In this example, the field is added to the <bpt id=\"p1\">**</bpt>LaunchedForResultsPage<ept id=\"p1\">**</ept> class because you'll complete the launch-for-results operation from that page and will need access to it.","pos":[6080,6255]},{"content":"Step 4: Override OnNavigatedTo() in the app you launch for results","pos":[6260,6326]},{"content":"Override the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>OnNavigatedTo<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227508)</ept> method on the page that you'll display when your app is launched for results.","pos":[6329,6497]},{"content":"If this method does not already exist, create it within the class for the page defined in <ph id=\"ph1\">&amp;lt;</ph>pagename<ph id=\"ph2\">&amp;gt;</ph>.xaml.cs.","pos":[6498,6613]},{"content":"Ensure that the following <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statement is included at the top of the file:","pos":[6614,6695]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>NavigationEventArgs<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br243285)</ept> object in the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>OnNavigatedTo<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227508)</ept> method contains the data passed from the calling app.","pos":[6750,6983]},{"content":"The data may not exceed 100KB and is stored in a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ValueSet<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> object.","pos":[6984,7113]},{"pos":[7115,7376],"content":"In this example code, the launched app expects the data sent from the calling app to be in a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ValueSet<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> under a key named <bpt id=\"p3\">**</bpt>TestData<ept id=\"p3\">**</ept>, because that's what the example's calling app is coded to send."},{"content":"Step 5: Write code to return data to the calling app","pos":[7940,7992]},{"content":"In the launched app, use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ProtocolForResultsOperation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn906913)</ept> to return data to the calling app.","pos":[7995,8146]},{"content":"In this example code, a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ValueSet<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> object is created that contains the value to return to the calling app.","pos":[8147,8315]},{"content":"The <bpt id=\"p1\">**</bpt>ProtocolForResultsOperation<ept id=\"p1\">**</ept> field is then used to send the value to the calling app.","pos":[8316,8408]},{"content":"Step 6: Write code to launch the app for results and get the returned data","pos":[8554,8628]},{"content":"Launch the app from within an async method in your calling app as shown in this example code.","pos":[8631,8724]},{"content":"Note the <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statements, which are necessary for the code to compile:","pos":[8725,8800]},{"content":"In this example, a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ValueSet<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> containing the key <bpt id=\"p3\">**</bpt>TestData<ept id=\"p3\">**</ept> is passed to the launched app.","pos":[9644,9798]},{"content":"The launched app creates a <bpt id=\"p1\">**</bpt>ValueSet<ept id=\"p1\">**</ept> with a key named <bpt id=\"p2\">**</bpt>ReturnedData<ept id=\"p2\">**</ept> that contains the result returned to the caller.","pos":[9799,9921]},{"content":"You must build and deploy the app that you'll launch for results before running your calling app.","pos":[9923,10020]},{"content":"Otherwise, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LaunchUriResult.Status<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn906892)</ept> will report <bpt id=\"p3\">**</bpt>LaunchUriStatus.AppUnavailable<ept id=\"p3\">**</ept>.","pos":[10021,10166]},{"content":"You'll need the family name of the launched app when you set the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TargetApplicationPackageFamilyName<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn893511)</ept>.","pos":[10168,10332]},{"content":"One way to get the family name is to make the following call from within the launched app:","pos":[10333,10423]},{"content":"Remarks","pos":[10515,10522]},{"content":"The example in this how-to provides a \"hello world\" introduction to launching an app for results.","pos":[10525,10622]},{"content":"The key things to note are that the new <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LaunchUriForResultsAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn956686)</ept> API lets you asynchronously launch an app and communicate via the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ValueSet<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> class.","pos":[10623,10897]},{"content":"Passing data via a <bpt id=\"p1\">**</bpt>ValueSet<ept id=\"p1\">**</ept> is limited to 100KB.","pos":[10898,10950]},{"content":"If you need to pass larger amounts of data, you can share files by using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SharedStorageAccessManager<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn889985)</ept> class to create file tokens that you can pass between apps.","pos":[10951,11178]},{"content":"For example, given a <bpt id=\"p1\">**</bpt>ValueSet<ept id=\"p1\">**</ept> named <ph id=\"ph1\">`inputData`</ph>, you could store the token to a file that you want to share with the launched app:","pos":[11179,11313]},{"pos":[11400,11466],"content":"Then pass it to the launched app via <bpt id=\"p1\">**</bpt>LaunchUriForResultsAsync<ept id=\"p1\">**</ept>."},{"content":"Related topics","pos":[11471,11485]},{"content":"LaunchUri","pos":[11493,11502]},{"content":"LaunchUriForResultsAsync","pos":[11569,11593]},{"content":"ValueSet","pos":[11660,11668]}],"content":"---\nauthor: TylerMSFT\ntitle: Launch an app for results\ndescription: Learn how to launch an app from another app and exchange data between the two. This is called launching an app for results.\nms.assetid: AFC53D75-B3DD-4FF6-9FC0-9335242EE327\n---\n\n# Launch an app for results\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n**Important APIs**\n\n-   [**LaunchUriForResultsAsync**](https://msdn.microsoft.com/library/windows/apps/dn956686)\n-   [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131)\n\nLearn how to launch an app from another app and exchange data between the two. This is called *launching an app for results*. The example here shows you how to use [**LaunchUriForResultsAsync**](https://msdn.microsoft.com/library/windows/apps/dn956686) to launch an app for results.\n\nNew app-to-app communication APIs in Windows 10 make it possible for Windows apps (and Windows Web apps) to launch an app and exchange data and files. This enables you to build mash-up solutions from multiple apps. Using these new APIs, complex tasks that would have required the user to use multiple apps can now be handled seamlessly. For example, your app could launch a social networking app to choose a contact, or launch a checkout app to complete a payment process.\n\nThe app that you'll launch for results will be referred to as the launched app. The app that launches the app will be referred to as the calling app. For this example you will write both the calling app and the launched app.\n\n## Step 1: Register the protocol to be handled in the app that you'll launch for results\n\n\nIn the Package.appxmanifest file of the launched app, add a protocol extension to the **&lt;Application&gt;** section. The example here uses a fictional protocol named **test-app2app**.\n\nThe **ReturnResults** attribute in the protocol extension accepts one of these values:\n\n-   **optional**—The app can be launched for results by using the [**LaunchUriForResultsAsync**](https://msdn.microsoft.com/library/windows/apps/dn956686) method, or not for results by using [**LaunchUriAsync**](https://msdn.microsoft.com/library/windows/apps/hh701476). When you use **optional**, the launched app must determine whether it was launched for results. It can do that by checking the [**OnActivated**](https://msdn.microsoft.com/library/windows/apps/br242330) event argument. If the argument's [**IActivatedEventArgs.Kind**](https://msdn.microsoft.com/library/windows/apps/br224728) property returns [**ActivationKind.ProtocolForResults**](https://msdn.microsoft.com/library/windows/apps/br224693), or if the type of the event argument is [**ProtocolActivatedEventArgs**](https://msdn.microsoft.com/library/windows/apps/br224742), the app was launched via **LaunchUriForResultsAsync**.\n-   **always**—The app can be launched only for results; that is, it can respond only to [**LaunchUriForResultsAsync**](https://msdn.microsoft.com/library/windows/apps/dn956686).\n-   **none**—The app cannot be launched for results; it can respond only to [**LaunchUriAsync**](https://msdn.microsoft.com/library/windows/apps/hh701476).\n\nIn this protocol-extension example, the app can be launched only for results. This simplifies the logic inside the **OnActivated** method, discussed below, because we have to handle only the \"launched for results\" case and not the other ways that the app could be activated.\n\n```xml\n<Applications>\n   <Application ...>\n\n     <Extensions>\n       <uap:Extension Category=\"windows.protocol\">\n         <uap:Protocol Name=\"test-app2app\" ReturnResults=\"always\">\n           <uap:DisplayName>Test app-2-app</uap:DisplayName>\n         </uap:Protocol>\n       </uap:Extension>\n     </Extensions>\n\n   </Application>\n</Applications>\n```\n\n## Step 2: Override Application.OnActivated in the app that you'll launch for results\n\n\nIf this method does not already exist in the launched app, create it within the `App` class defined in App.xaml.cs.\n\nIn an app that lets you pick your friends in a social network, this function could be where you open the people-picker page. In this next example, a page named **LaunchedForResultsPage** is displayed when the app is activated for results. Ensure that the **using** statement is included at the top of the file.\n\n```cs\nusing Windows.ApplicationModel.Activation;\n...\nprotected override void OnActivated(IActivatedEventArgs args)\n{\n    // Window management\n    Frame rootFrame = Window.Current.Content as Frame;\n    if (rootFrame == null)\n    {\n        rootFrame = new Frame();\n        Window.Current.Content = rootFrame;\n    }\n\n    // Code specific to launch for results\n    var protocolForResultsArgs = (ProtocolForResultsActivatedEventArgs)args;\n    // Open the page that we created to handle activation for results.\n    rootFrame.Navigate(typeof(LaunchedForResultsPage), protocolForResultsArgs);\n\n    // Ensure the current window is active.\n    Window.Current.Activate();\n}\n```\n\nBecause the protocol extension in the Package.appxmanifest file specifies **ReturnResults** as **always**, the code just shown can cast `args` directly to [**ProtocolForResultsActivatedEventArgs**](https://msdn.microsoft.com/library/windows/apps/dn906905) with confidence that only **ProtocolForResultsActivatedEventArgs** will be sent to **OnActivated** for this app. If your app can be activated in ways other than launching for results, you can check whether [**IActivatedEventArgs.Kind**](https://msdn.microsoft.com/library/windows/apps/br224728) property returns [**ActivationKind.ProtocolForResults**](https://msdn.microsoft.com/library/windows/apps/br224693) to tell whether the app was launched for results.\n\n## Step 3: Add a ProtocolForResultsOperation field to the app you launch for results\n\n\n```cs\nprivate Windows.System.ProtocolForResultsOperation _operation = null;\n```\n\nYou'll use the [**ProtocolForResultsOperation**](https://msdn.microsoft.com/library/windows/apps/dn906913) field to signal when the launched app is ready to return the result to the calling app. In this example, the field is added to the **LaunchedForResultsPage** class because you'll complete the launch-for-results operation from that page and will need access to it.\n\n## Step 4: Override OnNavigatedTo() in the app you launch for results\n\n\nOverride the [**OnNavigatedTo**](https://msdn.microsoft.com/library/windows/apps/br227508) method on the page that you'll display when your app is launched for results. If this method does not already exist, create it within the class for the page defined in &lt;pagename&gt;.xaml.cs. Ensure that the following **using** statement is included at the top of the file:\n\n```cs\nusing Windows.ApplicationModel.Activation\n```\n\nThe [**NavigationEventArgs**](https://msdn.microsoft.com/library/windows/apps/br243285) object in the [**OnNavigatedTo**](https://msdn.microsoft.com/library/windows/apps/br227508) method contains the data passed from the calling app. The data may not exceed 100KB and is stored in a [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) object.\n\nIn this example code, the launched app expects the data sent from the calling app to be in a [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) under a key named **TestData**, because that's what the example's calling app is coded to send.\n\n```cs\nusing Windows.ApplicationModel.Activation;\n...\nprotected override void OnNavigatedTo(NavigationEventArgs e)\n{\n    var protocolForResultsArgs = e.Parameter as ProtocolForResultsActivatedEventArgs;\n    // Set the ProtocolForResultsOperation field.\n    _operation = protocolForResultsArgs.ProtocolForResultsOperation;\n\n    if (protocolForResultsArgs.Data.ContainsKey(\"TestData\"))\n    {\n        string dataFromCaller = protocolForResultsArgs.Data[\"TestData\"] as string;\n    }\n}\n...\nprivate Windows.System.ProtocolForResultsOperation _operation = null;\n```\n\n## Step 5: Write code to return data to the calling app\n\n\nIn the launched app, use [**ProtocolForResultsOperation**](https://msdn.microsoft.com/library/windows/apps/dn906913) to return data to the calling app. In this example code, a [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) object is created that contains the value to return to the calling app. The **ProtocolForResultsOperation** field is then used to send the value to the calling app.\n\n```cs\n    ValueSet result = new ValueSet();\n    result[\"ReturnedData\"] = \"The returned result\";\n    _operation.ReportCompleted(result);\n```\n\n## Step 6: Write code to launch the app for results and get the returned data\n\n\nLaunch the app from within an async method in your calling app as shown in this example code. Note the **using** statements, which are necessary for the code to compile:\n\n```cs\nusing System.Threading.Tasks;\nusing Windows.System;\n...\n\nasync Task<string> LaunchAppForResults()\n{\n    var testAppUri = new Uri(\"test-app2app:\"); // The protocol handled by the launched app\n    var options = new LauncherOptions();\n    options.TargetApplicationPackageFamilyName = \"67d987e1-e842-4229-9f7c-98cf13b5da45_yd7nk54bq29ra\";\n\n    var inputData = new ValueSet();\n    inputData[\"TestData\"] = \"Test data\";\n\n    string theResult = \"\";\n    LaunchUriResult result = await Windows.System.Launcher.LaunchUriForResultsAsync(testAppUri, options, inputData);\n    if (result.Status == LaunchUriStatus.Success &&\n        result.Result != null &&\n        result.Result.ContainsKey(\"ReturnedData\"))\n    {\n        ValueSet theValues = result.Result;\n        theResult = theValues[\"ReturnedData\"] as string;\n    }\n    return theResult;\n}\n```\n\nIn this example, a [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) containing the key **TestData** is passed to the launched app. The launched app creates a **ValueSet** with a key named **ReturnedData** that contains the result returned to the caller.\n\nYou must build and deploy the app that you'll launch for results before running your calling app. Otherwise, [**LaunchUriResult.Status**](https://msdn.microsoft.com/library/windows/apps/dn906892) will report **LaunchUriStatus.AppUnavailable**.\n\nYou'll need the family name of the launched app when you set the [**TargetApplicationPackageFamilyName**](https://msdn.microsoft.com/library/windows/apps/dn893511). One way to get the family name is to make the following call from within the launched app:\n\n```cs\nstring familyName = Windows.ApplicationModel.Package.Current.Id.FamilyName;\n```\n\n## Remarks\n\n\nThe example in this how-to provides a \"hello world\" introduction to launching an app for results. The key things to note are that the new [**LaunchUriForResultsAsync**](https://msdn.microsoft.com/library/windows/apps/dn956686) API lets you asynchronously launch an app and communicate via the [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) class. Passing data via a **ValueSet** is limited to 100KB. If you need to pass larger amounts of data, you can share files by using the [**SharedStorageAccessManager**](https://msdn.microsoft.com/library/windows/apps/dn889985) class to create file tokens that you can pass between apps. For example, given a **ValueSet** named `inputData`, you could store the token to a file that you want to share with the launched app:\n\n```cs\ninputData[\"ImageFileToken\"] = SharedStorageAccessManager.AddFile(myFile);\n```\n\nThen pass it to the launched app via **LaunchUriForResultsAsync**.\n\n## Related topics\n\n\n* [**LaunchUri**](https://msdn.microsoft.com/library/windows/apps/hh701476)\n* [**LaunchUriForResultsAsync**](https://msdn.microsoft.com/library/windows/apps/dn956686)\n* [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131)\n\n \n\n \n"}