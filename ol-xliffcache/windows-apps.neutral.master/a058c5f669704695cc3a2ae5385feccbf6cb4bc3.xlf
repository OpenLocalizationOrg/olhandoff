<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\gaming\map-concepts-and-infrastructure.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">a058c5f669704695cc3a2ae5385feccbf6cb4bc3</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Map OpenGL ES 2.0 to Direct3D 11</source>
          <target>Map OpenGL ES 2.0 to Direct3D 11</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>When starting the process of porting your graphics architecture from OpenGL ES 2.0 to Direct3D for the first time, familiarize yourself with the key differences between the APIs.</source>
          <target>When starting the process of porting your graphics architecture from OpenGL ES 2.0 to Direct3D for the first time, familiarize yourself with the key differences between the APIs.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Map OpenGL ES 2.0 to Direct3D 11</source>
          <target>Map OpenGL ES 2.0 to Direct3D 11</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>When starting the process of porting your graphics architecture from OpenGL ES 2.0 to Direct3D for the first time, familiarize yourself with the key differences between the APIs.</source>
          <target>When starting the process of porting your graphics architecture from OpenGL ES 2.0 to Direct3D for the first time, familiarize yourself with the key differences between the APIs.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>The topics in this section help you plan your port strategy and the API changes that you must make when moving your graphics processing to Direct3D.</source>
          <target>The topics in this section help you plan your port strategy and the API changes that you must make when moving your graphics processing to Direct3D.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Topic</source>
          <target>Topic</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Plan your port from OpenGL ES 2.0 to Direct3D</source>
          <target>Plan your port from OpenGL ES 2.0 to Direct3D</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</source>
          <target>If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>When preparing to move your graphics pipeline codebase to Direct3D 11 and the Windows Runtime, there are a few things you should consider before you start.</source>
          <target>When preparing to move your graphics pipeline codebase to Direct3D 11 and the Windows Runtime, there are a few things you should consider before you start.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Compare EGL code to DXGI and Direct3D</source>
          <target>Compare EGL code to DXGI and Direct3D</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>The DirectX Graphics Interface (DXGI) and several Direct3D APIs serve the same role as EGL.</source>
          <target>The DirectX Graphics Interface (DXGI) and several Direct3D APIs serve the same role as EGL.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>This topic helps you understand DXGI and Direct3D 11 from the perspective of EGL.</source>
          <target>This topic helps you understand DXGI and Direct3D 11 from the perspective of EGL.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Compare OpenGL ES 2.0 buffers, uniforms, and vertex attributes to Direct3D</source>
          <target>Compare OpenGL ES 2.0 buffers, uniforms, and vertex attributes to Direct3D</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>During the process of porting to Direct3D 11 from OpenGL ES 2.0, you must change the syntax and API behavior for passing data between the app and the shader programs.</source>
          <target>During the process of porting to Direct3D 11 from OpenGL ES 2.0, you must change the syntax and API behavior for passing data between the app and the shader programs.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Compare the OpenGL ES 2.0 shader pipeline to Direct3D</source>
          <target>Compare the OpenGL ES 2.0 shader pipeline to Direct3D</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</source>
          <target>Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&lt;/strong&gt;</data>
          <data id="id3">&lt;strong&gt;</data>
          <data id="id4">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>In terms of API design, however, the major components for creating and managing the shader stages are parts of two primary interfaces, [<ph dataRef="id1" id="ph1" />ID3D11Device1<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/desktop/hh404575) and [<ph dataRef="id3" id="ph3" />ID3D11DeviceContext1<ph dataRef="id4" id="ph4" />](https://msdn.microsoft.com/library/windows/desktop/hh404598).</source>
          <target>In terms of API design, however, the major components for creating and managing the shader stages are parts of two primary interfaces, [<ph dataRef="id1" id="ph1" />ID3D11Device1<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/desktop/hh404575) and [<ph dataRef="id3" id="ph3" />ID3D11DeviceContext1<ph dataRef="id4" id="ph4" />](https://msdn.microsoft.com/library/windows/desktop/hh404598).</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>This topic attempts to map common OpenGL ES 2.0 shader pipeline API patterns to the Direct3D 11 equivalents in these interfaces.</source>
          <target>This topic attempts to map common OpenGL ES 2.0 shader pipeline API patterns to the Direct3D 11 equivalents in these interfaces.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Notes on specific OpenGL ES 2.0 providers</source>
          <target>Notes on specific OpenGL ES 2.0 providers</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>These topics use the Khronos OpenGL ES 2.0 specification with platform-agnostic C. Both iOS and Android utilize the same specification and OpenGL ES 2.0 code developed for those platforms is very similar to the code snippets we will walk through, although they are typically exposed as object-oriented APIs.</source>
          <target>These topics use the Khronos OpenGL ES 2.0 specification with platform-agnostic C. Both iOS and Android utilize the same specification and OpenGL ES 2.0 code developed for those platforms is very similar to the code snippets we will walk through, although they are typically exposed as object-oriented APIs.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Also, due to the intricacies and language differences of each platform, there may be minor differences, especially in method parameter types, or in general language syntax.</source>
          <target>Also, due to the intricacies and language differences of each platform, there may be minor differences, especially in method parameter types, or in general language syntax.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>iOS, for instance, uses Objective-C.</source>
          <target>iOS, for instance, uses Objective-C.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Android has the capability to use C++; however, some developers may have relied on a pure Java implementation.</source>
          <target>Android has the capability to use C++; however, some developers may have relied on a pure Java implementation.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>With that in mind, these topics should still be useful as the overall concepts, structure and usage of the OpenGL ES APIs do not differ.</source>
          <target>With that in mind, these topics should still be useful as the overall concepts, structure and usage of the OpenGL ES APIs do not differ.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>