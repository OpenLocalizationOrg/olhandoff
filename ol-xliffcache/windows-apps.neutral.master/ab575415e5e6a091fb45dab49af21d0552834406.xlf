<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\launch-resume\handle-a-cancelled-background-task.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">ab575415e5e6a091fb45dab49af21d0552834406</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Handle a cancelled background task</source>
          <target>Handle a cancelled background task</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Learn how to make a background task that recognizes cancellation requests and stops work, reporting the cancellation to the app using persistent storage.</source>
          <target>Learn how to make a background task that recognizes cancellation requests and stops work, reporting the cancellation to the app using persistent storage.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Handle a cancelled background task</source>
          <target>Handle a cancelled background task</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Important APIs</source>
          <target>Important APIs</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>BackgroundTaskCanceledEventHandler</source>
          <target>BackgroundTaskCanceledEventHandler</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>IBackgroundTaskInstance</source>
          <target>IBackgroundTaskInstance</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>ApplicationData.Current</source>
          <target>ApplicationData.Current</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Learn how to make a background task that recognizes cancellation requests and stops work, reporting the cancellation to the app using persistent storage.</source>
          <target>Learn how to make a background task that recognizes cancellation requests and stops work, reporting the cancellation to the app using persistent storage.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For all device families except desktop, if the device becomes low on memory, background tasks may be terminated.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For all device families except desktop, if the device becomes low on memory, background tasks may be terminated.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>If an out of memory exception is not surfaced, or the app does not handle it, then the background task will be terminated without warning and without raising the OnCanceled event.</source>
          <target>If an out of memory exception is not surfaced, or the app does not handle it, then the background task will be terminated without warning and without raising the OnCanceled event.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>This helps to ensure the user experience of the app in the foreground.</source>
          <target>This helps to ensure the user experience of the app in the foreground.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Your background task should be designed to handle this scenario.</source>
          <target>Your background task should be designed to handle this scenario.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>This topic assumes you have already created a background task class, including the Run method that is used as the background task entry point.</source>
          <target>This topic assumes you have already created a background task class, including the Run method that is used as the background task entry point.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](create-and-register-a-background-task.md)</data>
        </originalData>
        <segment state="initial">
          <source>To get started quickly building a background task, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create and register a background task</pc>.</source>
          <target>To get started quickly building a background task, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create and register a background task</pc>.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](support-your-app-with-background-tasks.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more in-depth information on conditions and triggers, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Support your app with background tasks</pc>.</source>
          <target>For more in-depth information on conditions and triggers, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Support your app with background tasks</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Use the OnCanceled method to recognize cancellation requests</source>
          <target>Use the OnCanceled method to recognize cancellation requests</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Write a method to handle the cancellation event.</source>
          <target>Write a method to handle the cancellation event.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Create a method named OnCanceled that has the following footprint.</source>
          <target>Create a method named OnCanceled that has the following footprint.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>This method is the entry point called by the Windows Runtime whenever a cancellation request is made against your background task.</source>
          <target>This method is the entry point called by the Windows Runtime whenever a cancellation request is made against your background task.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>The OnCanceled method needs to have the following footprint:</source>
          <target>The OnCanceled method needs to have the following footprint:</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>Add a flag variable called <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />CancelRequested</pc> to the background task class.</source>
          <target>Add a flag variable called <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />CancelRequested</pc> to the background task class.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>This variable will be used to indicate when a cancellation request has been made.</source>
          <target>This variable will be used to indicate when a cancellation request has been made.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>In the OnCanceled method you created in step 1, set the flag variable <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />CancelRequested</pc> to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">true</pc>.</source>
          <target>In the OnCanceled method you created in step 1, set the flag variable <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />CancelRequested</pc> to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">true</pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]( http://go.microsoft.com/fwlink/p/?linkid=227509)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>The full <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> OnCanceled method sets <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />CancelRequested</pc> to <pc dataRefEnd="id7" dataRefStart="id6" id="p3">true</pc> and writes potentially useful debug output:</source>
          <target>The full <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> OnCanceled method sets <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />CancelRequested</pc> to <pc dataRefEnd="id7" dataRefStart="id6" id="p3">true</pc> and writes potentially useful debug output:</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>In the background task's Run method, register the OnCanceled event handler method before starting work.</source>
          <target>In the background task's Run method, register the OnCanceled event handler method before starting work.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>For example, use the following line of code:</source>
          <target>For example, use the following line of code:</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Handle cancellation by exiting the Run method</source>
          <target>Handle cancellation by exiting the Run method</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>When a cancellation request is received, the Run method needs to stop work and exit by recognizing when <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />cancelRequested</pc> is set to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">true</pc>.</source>
          <target>When a cancellation request is received, the Run method needs to stop work and exit by recognizing when <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />cancelRequested</pc> is set to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">true</pc>.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Modify the code of your background task class to check the flag variable while it's working.</source>
          <target>Modify the code of your background task class to check the flag variable while it's working.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />cancelRequested</pc> set to true, stop work from continuing.</source>
          <target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />cancelRequested</pc> set to true, stop work from continuing.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> includes a check that stops the periodic timer callback if the background task is canceled:</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> includes a check that stops the periodic timer callback if the background task is canceled:</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br224797)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/br224800)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The code sample shown above uses the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IBackgroundTaskInstance</pc></pc>.<pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Progress</pc></pc> property being used to record background task progress.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The code sample shown above uses the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IBackgroundTaskInstance</pc></pc>.<pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Progress</pc></pc> property being used to record background task progress.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224782)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Progress is reported back to the app using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskProgressEventArgs</pc></pc> class.</source>
          <target>Progress is reported back to the app using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskProgressEventArgs</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Modify the Run method so that after work has stopped, it records whether the task completed or was cancelled.</source>
          <target>Modify the Run method so that after work has stopped, it records whether the task completed or was cancelled.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> records status in LocalSettings:</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> records status in LocalSettings:</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Remarks</source>
          <target>Remarks</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</data>
        </originalData>
        <segment state="initial">
          <source>You can download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> to see these code examples in the context of methods.</source>
          <target>You can download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> to see these code examples in the context of methods.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</data>
        </originalData>
        <segment state="initial">
          <source>For illustrative purposes, the sample code shows only portions of the Run method (and callback timer) from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc>.</source>
          <target>For illustrative purposes, the sample code shows only portions of the Run method (and callback timer) from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc>.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Run method example</source>
          <target>Run method example</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</data>
        </originalData>
        <segment state="initial">
          <source>The complete Run method, and timer callback code, from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> are shown below for context:</source>
          <target>The complete Run method, and timer callback code, from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background task sample</pc> are shown below for context:</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</source>
          <target>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Create and register a background task</source>
          <target>Create and register a background task</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Declare background tasks in the application manifest</source>
          <target>Declare background tasks in the application manifest</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>Guidelines for background tasks</source>
          <target>Guidelines for background tasks</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Monitor background task progress and completion</source>
          <target>Monitor background task progress and completion</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Register a background task</source>
          <target>Register a background task</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Respond to system events with background tasks</source>
          <target>Respond to system events with background tasks</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Run a background task on a timer</source>
          <target>Run a background task on a timer</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Set conditions for running a background task</source>
          <target>Set conditions for running a background task</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>Update a live tile from a background task</source>
          <target>Update a live tile from a background task</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Use a maintenance trigger</source>
          <target>Use a maintenance trigger</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Debug a background task</source>
          <target>Debug a background task</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>How to trigger suspend, resume, and background events in Windows Store apps (when debugging)</source>
          <target>How to trigger suspend, resume, and background events in Windows Store apps (when debugging)</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>