<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\security\companion-device-unlock.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">18102d6277ff1c66ebd147b5c1fd2f2d6c91edd1</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Windows Unlock with companion (IoT) devices</source>
          <target>Windows Unlock with companion (IoT) devices</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>A companion device is a device that can act in conjunction with your Windows 10 desktop to enhance the user authentication experience.</source>
          <target>A companion device is a device that can act in conjunction with your Windows 10 desktop to enhance the user authentication experience.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Using the Companion Device Framework, a companion device can provide a rich experience for Microsoft Passport even when Windows Hello is not available (e.g., if the Windows 10 desktop lacks a camera for face authentication or fingerprint reader device, for example).</source>
          <target>Using the Companion Device Framework, a companion device can provide a rich experience for Microsoft Passport even when Windows Hello is not available (e.g., if the Windows 10 desktop lacks a camera for face authentication or fingerprint reader device, for example).</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Windows Unlock with companion (IoT) devices</source>
          <target>Windows Unlock with companion (IoT) devices</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>A companion device is a device that can act in conjunction with your Windows 10 desktop to enhance the user authentication experience.</source>
          <target>A companion device is a device that can act in conjunction with your Windows 10 desktop to enhance the user authentication experience.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Using the Companion Device Framework, a companion device can provide a rich experience for Microsoft Passport even when Windows Hello is not available (e.g., if the Windows 10 desktop lacks a camera for face authentication or fingerprint reader device, for example).</source>
          <target>Using the Companion Device Framework, a companion device can provide a rich experience for Microsoft Passport even when Windows Hello is not available (e.g., if the Windows 10 desktop lacks a camera for face authentication or fingerprint reader device, for example).</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> The Companion Device Framework is a specialized feature not available to all app developers.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> The Companion Device Framework is a specialized feature not available to all app developers.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>To use this framework, your app must be specifically provisioned by Microsoft and list the restricted <pc dataRefEnd="id2" dataRefStart="id1" id="p1">secondaryAuthenticationFactor</pc> capability in its manifest.</source>
          <target>To use this framework, your app must be specifically provisioned by Microsoft and list the restricted <pc dataRefEnd="id2" dataRefStart="id1" id="p1">secondaryAuthenticationFactor</pc> capability in its manifest.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](mailto:cdfonboard@microsoft.com)</data>
        </originalData>
        <segment state="initial">
          <source>To obtain approval, contact <pc dataRefEnd="id2" dataRefStart="id1" id="p1">cdfonboard@microsoft.com</pc>.</source>
          <target>To obtain approval, contact <pc dataRefEnd="id2" dataRefStart="id1" id="p1">cdfonboard@microsoft.com</pc>.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Introduction</source>
          <target>Introduction</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://channel9.msdn.com/Events/Build/2016/P491)</data>
        </originalData>
        <segment state="initial">
          <source>For a video overview, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Unlock with IoT Devices</pc> session from Build 2016 on Channel 9.</source>
          <target>For a video overview, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Unlock with IoT Devices</pc> session from Build 2016 on Channel 9.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Use cases</source>
          <target>Use cases</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>There are numerous ways one can use the Companion Device Framework to build a great Windows unlock experience with a companion device.</source>
          <target>There are numerous ways one can use the Companion Device Framework to build a great Windows unlock experience with a companion device.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>For example, users could:</source>
          <target>For example, users could:</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Attach their companion device to PC via USB, touch the button on the companion device, and automatically unlock their PC.</source>
          <target>Attach their companion device to PC via USB, touch the button on the companion device, and automatically unlock their PC.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Carry a phone in their pocket that is already paired with PC over Bluetooth.</source>
          <target>Carry a phone in their pocket that is already paired with PC over Bluetooth.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Upon hitting the spacebar on their PC, their phone receives a notification.</source>
          <target>Upon hitting the spacebar on their PC, their phone receives a notification.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Approve it and the PC simply unlocks.</source>
          <target>Approve it and the PC simply unlocks.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Tap their companion device to an NFC reader to quickly unlock their PC.</source>
          <target>Tap their companion device to an NFC reader to quickly unlock their PC.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Wear a fitness band that has already authenticated the wearer.</source>
          <target>Wear a fitness band that has already authenticated the wearer.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Upon approaching PC, and by performing a special gesture (like clapping), the PC unlocks.</source>
          <target>Upon approaching PC, and by performing a special gesture (like clapping), the PC unlocks.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Biometric enabled companion devices</source>
          <target>Biometric enabled companion devices</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/hardware/mt608302(v=vs.85).aspx)</data>
        </originalData>
        <segment state="initial">
          <source>If the companion device supports biometrics, in some cases the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Biometric framework</pc> may be a better solution than the Companion Device Framework.</source>
          <target>If the companion device supports biometrics, in some cases the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Biometric framework</pc> may be a better solution than the Companion Device Framework.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](mailto:cdfonboard@microsoft.com)</data>
        </originalData>
        <segment state="initial">
          <source>Please contact <pc dataRefEnd="id2" dataRefStart="id1" id="p1">cdfonboard@microsoft.com</pc> and we'll help you pick the right approach.</source>
          <target>Please contact <pc dataRefEnd="id2" dataRefStart="id1" id="p1">cdfonboard@microsoft.com</pc> and we'll help you pick the right approach.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Components of the solution</source>
          <target>Components of the solution</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>The diagram below depicts the components of the solution and who is responsible for building them.</source>
          <target>The diagram below depicts the components of the solution and who is responsible for building them.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>framework overview</source>
          <target>framework overview</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>The Companion Device Framework is implemented as a service running on Windows (called Companion Authentication Service in this article).</source>
          <target>The Companion Device Framework is implemented as a service running on Windows (called Companion Authentication Service in this article).</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>This service is responsible for generating an unlock token which needs to be protected by an HMAC key stored on companion device.</source>
          <target>This service is responsible for generating an unlock token which needs to be protected by an HMAC key stored on companion device.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>This guarantees that access to the unlock token requires companion device presence.</source>
          <target>This guarantees that access to the unlock token requires companion device presence.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Per each (PC, Windows user) tuple, there will be a unique unlock token.</source>
          <target>Per each (PC, Windows user) tuple, there will be a unique unlock token.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Integration with the Companion Device Framework requires:</source>
          <target>Integration with the Companion Device Framework requires:</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/windows/uwp/get-started/universal-application-platform-guide)</data>
        </originalData>
        <segment state="initial">
          <source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Universal Windows Platform (UWP)</pc> companion device app for the companion device, downloaded from the Windows app store.</source>
          <target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Universal Windows Platform (UWP)</pc> companion device app for the companion device, downloaded from the Windows app store.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>The ability to create two 256 bit HMAC keys on the companion device and generate HMAC with it (using SHA-256).</source>
          <target>The ability to create two 256 bit HMAC keys on the companion device and generate HMAC with it (using SHA-256).</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Security settings on the Windows 10 desktop properly configured.</source>
          <target>Security settings on the Windows 10 desktop properly configured.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>The Companion Authentication Service will require this PIN to be set up before any companion device can be plugged into it.</source>
          <target>The Companion Authentication Service will require this PIN to be set up before any companion device can be plugged into it.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>The users must set up a PIN via Settings &gt; Accounts &gt; Sign-in options.</source>
          <target>The users must set up a PIN via Settings &gt; Accounts &gt; Sign-in options.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>In addition to the above requirements, the companion device app is responsible for:</source>
          <target>In addition to the above requirements, the companion device app is responsible for:</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>User experience and branding of initial registration and later de-registration of the companion device.</source>
          <target>User experience and branding of initial registration and later de-registration of the companion device.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Running in the background, discovering the companion device, communicating to the companion device and also Companion Authentication Service.</source>
          <target>Running in the background, discovering the companion device, communicating to the companion device and also Companion Authentication Service.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Error handling</source>
          <target>Error handling</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Normally, companion devices ship with an app for initial setup, like setting up a fitness band for the first time.</source>
          <target>Normally, companion devices ship with an app for initial setup, like setting up a fitness band for the first time.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>The functionality described in this document can be part of that app and a separate app should not be required.</source>
          <target>The functionality described in this document can be part of that app and a separate app should not be required.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>User signals</source>
          <target>User signals</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Each companion device should be combined with an app that supports three user signals.</source>
          <target>Each companion device should be combined with an app that supports three user signals.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>These signals can be in form of an action or gesture.</source>
          <target>These signals can be in form of an action or gesture.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Intent signal</pc>: Allows the user to show his intent for unlock by, for example, hitting a button on the companion device.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Intent signal</pc>: Allows the user to show his intent for unlock by, for example, hitting a button on the companion device.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The intent signal must be collected on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">companion device</pc> side.</source>
          <target>The intent signal must be collected on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">companion device</pc> side.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">User presence signal</pc>: Proves the presence of the user.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">User presence signal</pc>: Proves the presence of the user.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>The companion device might, for instance, require a PIN before it can be used for unlocking PC (not to be confused with PC PIN), or it might require press of a button.</source>
          <target>The companion device might, for instance, require a PIN before it can be used for unlocking PC (not to be confused with PC PIN), or it might require press of a button.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disambiguation signal</pc>: Disambiguates which Windows 10 desktop the user wants to unlock when multiple options are available to the companion device.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disambiguation signal</pc>: Disambiguates which Windows 10 desktop the user wants to unlock when multiple options are available to the companion device.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Any number of these user signals can be combined into one.</source>
          <target>Any number of these user signals can be combined into one.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>User presence and intent signals must be required on each use.</source>
          <target>User presence and intent signals must be required on each use.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Registration and future communication between a PC and companion devices</source>
          <target>Registration and future communication between a PC and companion devices</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>Before a companion device can be plugged into Companion Device Framework, it needs to be registered with the framework.</source>
          <target>Before a companion device can be plugged into Companion Device Framework, it needs to be registered with the framework.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>The experience for registration is completely owned by the companion device app.</source>
          <target>The experience for registration is completely owned by the companion device app.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Registered relationship between the companion device and the Windows 10 desktop  device can be one to many (i.e., one companion device can be used for many Windows 10 desktop  devices).</source>
          <target>Registered relationship between the companion device and the Windows 10 desktop  device can be one to many (i.e., one companion device can be used for many Windows 10 desktop  devices).</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>However, each companion device can only be used for one user on each Windows 10 desktop  device.</source>
          <target>However, each companion device can only be used for one user on each Windows 10 desktop  device.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Before a companion device can communicate with a PC, they need to agree on a transport to use.</source>
          <target>Before a companion device can communicate with a PC, they need to agree on a transport to use.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Such choice is left to the companion device app; the Companion Device Framework does not impose any limitations on transport type (USB, NFC, WiFi, BT, BLE, etc) or protocol being used between the companion device and the companion device app on Windows 10 desktop device side.</source>
          <target>Such choice is left to the companion device app; the Companion Device Framework does not impose any limitations on transport type (USB, NFC, WiFi, BT, BLE, etc) or protocol being used between the companion device and the companion device app on Windows 10 desktop device side.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>It does, however, suggests certain security considerations for the transport layer as outlined in the "Security Requirements" section of this document.</source>
          <target>It does, however, suggests certain security considerations for the transport layer as outlined in the "Security Requirements" section of this document.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>It is the device provider’s responsibility to provide those requirements.</source>
          <target>It is the device provider’s responsibility to provide those requirements.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>The framework does not provide them for you.</source>
          <target>The framework does not provide them for you.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>User Interaction Model</source>
          <target>User Interaction Model</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Companion device app discovery, installation, and first-time registration</source>
          <target>Companion device app discovery, installation, and first-time registration</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>A typical user workflow is as follows:</source>
          <target>A typical user workflow is as follows:</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>The user sets up the PIN on each of target Windows 10 desktop devices she wants to unlock with that companion device.</source>
          <target>The user sets up the PIN on each of target Windows 10 desktop devices she wants to unlock with that companion device.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>The user runs the companion device app on their Windows 10 desktop device to register her companion device with Windows 10 desktop.</source>
          <target>The user runs the companion device app on their Windows 10 desktop device to register her companion device with Windows 10 desktop.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>Notes:</source>
          <target>Notes:</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>We recommend the discovery, download, and launch of the companion device app is streamlined and, if possible, automated (e.g., the app can be downloaded upon tapping companion device app on an NFC reader on Windows 10 desktop device side).</source>
          <target>We recommend the discovery, download, and launch of the companion device app is streamlined and, if possible, automated (e.g., the app can be downloaded upon tapping companion device app on an NFC reader on Windows 10 desktop device side).</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>This is, however, the responsibility of the companion device and companion device app.</source>
          <target>This is, however, the responsibility of the companion device and companion device app.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>In an enterprise environment, the companion device app can be deployed via MDM.</source>
          <target>In an enterprise environment, the companion device app can be deployed via MDM.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>The companion device app is responsible to show user any error messages that happen as part of registration.</source>
          <target>The companion device app is responsible to show user any error messages that happen as part of registration.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Registration and de-registration protocol</source>
          <target>Registration and de-registration protocol</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>The following diagram illustrates how the companion device interacts with Companion Authentication Service during registration.</source>
          <target>The following diagram illustrates how the companion device interacts with Companion Authentication Service during registration.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>registration flow</source>
          <target>registration flow</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>There are two keys used in our protocol:</source>
          <target>There are two keys used in our protocol:</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Device key (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">devicekey</pc>): used to protect unlock tokens that PC needs to unlock Windows.</source>
          <target>Device key (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">devicekey</pc>): used to protect unlock tokens that PC needs to unlock Windows.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The authentication key (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">authkey</pc>): used to mutually authenticate the companion device and Companion Authentication Service.</source>
          <target>The authentication key (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">authkey</pc>): used to mutually authenticate the companion device and Companion Authentication Service.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>The device key and authentication keys are exchanged at registration time between companion device app and the companion device.</source>
          <target>The device key and authentication keys are exchanged at registration time between companion device app and the companion device.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>As a result, the companion device app and companion device must use a secure transport to protect keys.</source>
          <target>As a result, the companion device app and companion device must use a secure transport to protect keys.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>Also, note that while the diagram above displays two HMAC keys generating on the companion device, it is also possible for app to generate them and send them to companion device for storage.</source>
          <target>Also, note that while the diagram above displays two HMAC keys generating on the companion device, it is also possible for app to generate them and send them to companion device for storage.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>Starting authentication flows</source>
          <target>Starting authentication flows</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>There are two ways for user to start the signing in flow to Windows 10 desktop using Companion Device Framework (i.e., provide intent signal):</source>
          <target>There are two ways for user to start the signing in flow to Windows 10 desktop using Companion Device Framework (i.e., provide intent signal):</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Open up the lid on laptop, or hit the space or swipe up on PC.</source>
          <target>Open up the lid on laptop, or hit the space or swipe up on PC.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>Perform a gesture or an action on companion device side.</source>
          <target>Perform a gesture or an action on companion device side.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>It is the companion device's choice to select which one is the starting point.</source>
          <target>It is the companion device's choice to select which one is the starting point.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>The Companion Device Framework will inform companion device app when option one happens.</source>
          <target>The Companion Device Framework will inform companion device app when option one happens.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>For option two, the companion device app should query the companion device to see if that event has been captured.</source>
          <target>For option two, the companion device app should query the companion device to see if that event has been captured.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>This ensures the companion device collects the intent signal before the unlock succeeds.</source>
          <target>This ensures the companion device collects the intent signal before the unlock succeeds.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>Companion device credential provider</source>
          <target>Companion device credential provider</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>There is a new credential provider in Windows 10 that handles all companion devices.</source>
          <target>There is a new credential provider in Windows 10 that handles all companion devices.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>The companion device credential provider is responsible for launching companion device background task via activating a trigger.</source>
          <target>The companion device credential provider is responsible for launching companion device background task via activating a trigger.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>The trigger is set for first time when the PC awakens and a lock screen is displayed.</source>
          <target>The trigger is set for first time when the PC awakens and a lock screen is displayed.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>The second time is when the PC is entering logon UI and the Companion Device Credential Provider is the selected tile.</source>
          <target>The second time is when the PC is entering logon UI and the Companion Device Credential Provider is the selected tile.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>The helper library for companion device app will listen to the lock screen status change and send the event corresponding to the companion device background task.</source>
          <target>The helper library for companion device app will listen to the lock screen status change and send the event corresponding to the companion device background task.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>If there are multiple companion device background tasks, the first background task that has finished the authentication process will unlock the PC.</source>
          <target>If there are multiple companion device background tasks, the first background task that has finished the authentication process will unlock the PC.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>The companion device authentication service will ignore any remaining authentication calls.</source>
          <target>The companion device authentication service will ignore any remaining authentication calls.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>The experience on companion device side is owned and managed by the companion device app.</source>
          <target>The experience on companion device side is owned and managed by the companion device app.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>The Companion Device Framework has no control over this part of the user experience.</source>
          <target>The Companion Device Framework has no control over this part of the user experience.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>More specifically, the companion authentication provider informs the companion device app (via its background app) about state changes in logon UI (e.g., lock screen just came down, or user just dispelled lock screen by hitting spacebar), and it is the responsibility of the companion device app to build an experience around that (e.g., upon user hitting spacebar and dispelling unlock screen, start looking for the device over USB).</source>
          <target>More specifically, the companion authentication provider informs the companion device app (via its background app) about state changes in logon UI (e.g., lock screen just came down, or user just dispelled lock screen by hitting spacebar), and it is the responsibility of the companion device app to build an experience around that (e.g., upon user hitting spacebar and dispelling unlock screen, start looking for the device over USB).</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>The Companion Device Framework will provide a stock of (localized) text and error messages for the companion device app to choose from.</source>
          <target>The Companion Device Framework will provide a stock of (localized) text and error messages for the companion device app to choose from.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>These will be displayed on top of lock screen (or in logon UI).</source>
          <target>These will be displayed on top of lock screen (or in logon UI).</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>See the Dealing with Messages and Errors section for more details.</source>
          <target>See the Dealing with Messages and Errors section for more details.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>Authentication protocol</source>
          <target>Authentication protocol</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>Once the background task associated with a companion device app is trigger started, it is responsible for asking companion device to help calculate two HMAC values:</source>
          <target>Once the background task associated with a companion device app is trigger started, it is responsible for asking companion device to help calculate two HMAC values:</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>The HMAC of the device key with a nonce.</source>
          <target>The HMAC of the device key with a nonce.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>The HMAC of the authentication key with first HMAC value concatenated with a nonce generated by Companion Authentication Service.</source>
          <target>The HMAC of the authentication key with first HMAC value concatenated with a nonce generated by Companion Authentication Service.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>The second value is used by the service to authenticate the device and also prevent replay attack in transport channel.</source>
          <target>The second value is used by the service to authenticate the device and also prevent replay attack in transport channel.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>registration flow</source>
          <target>registration flow</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>Lifecycle management</source>
          <target>Lifecycle management</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>Register once, use everywhere</source>
          <target>Register once, use everywhere</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>Without a backend server, users must register their companion device with each Windows 10 desktop device separately.</source>
          <target>Without a backend server, users must register their companion device with each Windows 10 desktop device separately.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>A companion device vendor or OEM can implement a web service to roam the registration state across user Windows 10 desktops or mobile devices.</source>
          <target>A companion device vendor or OEM can implement a web service to roam the registration state across user Windows 10 desktops or mobile devices.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>For more details, see the Roaming, Revocation, and Filter Service section.</source>
          <target>For more details, see the Roaming, Revocation, and Filter Service section.</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source>PIN management</source>
          <target>PIN management</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Before a companion device can be used, a PIN needs to be set up on Windows 10 desktop device.</source>
          <target>Before a companion device can be used, a PIN needs to be set up on Windows 10 desktop device.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>This ensures the user has a backup in case their companion device is not working.</source>
          <target>This ensures the user has a backup in case their companion device is not working.</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>The PIN is something that Windows manages and that apps never see.</source>
          <target>The PIN is something that Windows manages and that apps never see.</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>To change it, the user navigates to Settings &gt; Accounts &gt; Sign-in options.</source>
          <target>To change it, the user navigates to Settings &gt; Accounts &gt; Sign-in options.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>Management and policy</source>
          <target>Management and policy</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>Users can remove a companion device from a Windows 10 desktops by running the companion device app on that desktop device.</source>
          <target>Users can remove a companion device from a Windows 10 desktops by running the companion device app on that desktop device.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>Enterprises have two options for controlling the Companion Device Framework:</source>
          <target>Enterprises have two options for controlling the Companion Device Framework:</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>Turn the feature on or off</source>
          <target>Turn the feature on or off</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>Define the whitelist of companion devices allowed using Windows app locker</source>
          <target>Define the whitelist of companion devices allowed using Windows app locker</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>The Companion Device Framework does not support any centralized way to keep inventory of available companion devices, or a method to further filter which instances of a companion device type is allowed (for example, only companion device with serial number between X and Y are allowed).</source>
          <target>The Companion Device Framework does not support any centralized way to keep inventory of available companion devices, or a method to further filter which instances of a companion device type is allowed (for example, only companion device with serial number between X and Y are allowed).</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>Apps developers can, however, build a service to provide such functionality.</source>
          <target>Apps developers can, however, build a service to provide such functionality.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>For more details, see the Roaming, Revocation, and Filter Service section.</source>
          <target>For more details, see the Roaming, Revocation, and Filter Service section.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>Revocation</source>
          <target>Revocation</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source>The Companion Device Framework does not support removing a companion device from a specific Windows 10 desktop device remotely.</source>
          <target>The Companion Device Framework does not support removing a companion device from a specific Windows 10 desktop device remotely.</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>Instead, users can remove the companion device via the companion device app running on that Windows 10 desktop.</source>
          <target>Instead, users can remove the companion device via the companion device app running on that Windows 10 desktop.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source>Companion device vendors, however, can build a service to provide remote revocation functionality.</source>
          <target>Companion device vendors, however, can build a service to provide remote revocation functionality.</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>For more details, see Roaming, Revocation, and Filter Service section.</source>
          <target>For more details, see Roaming, Revocation, and Filter Service section.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>Roaming and filter services</source>
          <target>Roaming and filter services</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>Companion device vendors can implement a web service that can be used for the following scenarios:</source>
          <target>Companion device vendors can implement a web service that can be used for the following scenarios:</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>A filter service for enterprise: An enterprise can limit the set of companion devices that can work in their environment to a select few from a specific vendor.</source>
          <target>A filter service for enterprise: An enterprise can limit the set of companion devices that can work in their environment to a select few from a specific vendor.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>For example, the company Contoso could order 10,000 Model Y companion devices from Vendor X and ensure only those devices will work in the Contoso domain (and not any other device model from Vendor X).</source>
          <target>For example, the company Contoso could order 10,000 Model Y companion devices from Vendor X and ensure only those devices will work in the Contoso domain (and not any other device model from Vendor X).</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>Inventory:  An enterprise can determine the list of existing companion devices used in an enterprise environment.</source>
          <target>Inventory:  An enterprise can determine the list of existing companion devices used in an enterprise environment.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>Real time revocation: If an employee reports that his companion device is lost or stolen, the web service can be used to revoke that device.</source>
          <target>Real time revocation: If an employee reports that his companion device is lost or stolen, the web service can be used to revoke that device.</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>Roaming: A user only has to register his companion device once and it works on all of his Windows 10 desktops and Mobile.</source>
          <target>Roaming: A user only has to register his companion device once and it works on all of his Windows 10 desktops and Mobile.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>Implementing these features requires the companion device app to check with the web service at registration and usage time.</source>
          <target>Implementing these features requires the companion device app to check with the web service at registration and usage time.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source>The companion device app can optimize for cached logon scenarios like requiring checking with web service only once a day (at the cost of extending the revocation time to up to one day).</source>
          <target>The companion device app can optimize for cached logon scenarios like requiring checking with web service only once a day (at the cost of extending the revocation time to up to one day).</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>Companion Device Framework API model</source>
          <target>Companion Device Framework API model</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source>Overview</source>
          <target>Overview</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>A companion app should contain two components: a foregroud app with UI responsible for registering and unregistering the device, and a background task that handles authentication.</source>
          <target>A companion app should contain two components: a foregroud app with UI responsible for registering and unregistering the device, and a background task that handles authentication.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>The overall API flow is as follows:</source>
          <target>The overall API flow is as follows:</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>Register the companion device</source>
          <target>Register the companion device</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>Make sure device is nearby and query its capability (if required)</source>
          <target>Make sure device is nearby and query its capability (if required)</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>Generate two HMAC keys (either on the companion device side or the app side</source>
          <target>Generate two HMAC keys (either on the companion device side or the app side</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>Call RequestStartRegisteringDeviceAsync</source>
          <target>Call RequestStartRegisteringDeviceAsync</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>Call FinishRegisteringDeviceAsync</source>
          <target>Call FinishRegisteringDeviceAsync</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source>Make sure companion device app stores HMAC keys (if supported) and companion device app discards its copies</source>
          <target>Make sure companion device app stores HMAC keys (if supported) and companion device app discards its copies</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>Register your background task</source>
          <target>Register your background task</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>Wait for the right event in the background task</source>
          <target>Wait for the right event in the background task</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source>WaitingForUserConfirmation: Wait for this event if the user action/gesture on the companion device side is required to start authentication flow</source>
          <target>WaitingForUserConfirmation: Wait for this event if the user action/gesture on the companion device side is required to start authentication flow</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source>CollectingCredential: Wait for this event if the companion device relies on user action/gesture on the PC side to start authentication flow (e.g., by hitting spacebar)</source>
          <target>CollectingCredential: Wait for this event if the companion device relies on user action/gesture on the PC side to start authentication flow (e.g., by hitting spacebar)</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>Other trigger, like a smartcard: Make sure to query for current authentication state to call the right APIs.</source>
          <target>Other trigger, like a smartcard: Make sure to query for current authentication state to call the right APIs.</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source>Keep user informed about error messages or required next steps by calling ShowNotificationMessageAsync.</source>
          <target>Keep user informed about error messages or required next steps by calling ShowNotificationMessageAsync.</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source>Only call this API once an intent signal is collected</source>
          <target>Only call this API once an intent signal is collected</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source>Unlock</source>
          <target>Unlock</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source>Make sure intent and user presence signals were collected</source>
          <target>Make sure intent and user presence signals were collected</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source>Call StartAuthenticationAsync</source>
          <target>Call StartAuthenticationAsync</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source>Communicate with the companion device to perform required HMAC operations</source>
          <target>Communicate with the companion device to perform required HMAC operations</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>Call FinishAuthenticationAsync</source>
          <target>Call FinishAuthenticationAsync</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>Un-register a companion device when the user requests it (for example, if they've lost their companion device)</source>
          <target>Un-register a companion device when the user requests it (for example, if they've lost their companion device)</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source>Enumerate the companion device for logged in user via FindAllRegisteredDeviceInfoAsync</source>
          <target>Enumerate the companion device for logged in user via FindAllRegisteredDeviceInfoAsync</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source>Un-register it using UnregisterDeviceAsync</source>
          <target>Un-register it using UnregisterDeviceAsync</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source>Registration and de-registration</source>
          <target>Registration and de-registration</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source>Registration requires two API calls to the Companion Authentication Service: RequestStartRegisteringDeviceAsync and FinishRegisteringDeviceAsync.</source>
          <target>Registration requires two API calls to the Companion Authentication Service: RequestStartRegisteringDeviceAsync and FinishRegisteringDeviceAsync.</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source>Before any of these calls are made, the companion device app must make sure that the companion device is available.</source>
          <target>Before any of these calls are made, the companion device app must make sure that the companion device is available.</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source>If the companion device is responsible for generating HMAC keys (authentication and device keys), then the companion device app should also ask companion device to generate them before making any of the above two calls.</source>
          <target>If the companion device is responsible for generating HMAC keys (authentication and device keys), then the companion device app should also ask companion device to generate them before making any of the above two calls.</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source>If companion device app is responsible for generating HMAC keys, then it should do so before calling above two calls.</source>
          <target>If companion device app is responsible for generating HMAC keys, then it should do so before calling above two calls.</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source>Additionally, as part of first API call (RequestStartRegisteringDeviceAsync), the companion device app must decide on device capability and be prepared to pass it as part of the API call; for example, whether companion device supports secure storage for HMAC keys.</source>
          <target>Additionally, as part of first API call (RequestStartRegisteringDeviceAsync), the companion device app must decide on device capability and be prepared to pass it as part of the API call; for example, whether companion device supports secure storage for HMAC keys.</target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source>If the same companion device app is used to manage multiple versions of the same companion device and those capabilities change (and requires a device query to decide), we recommend this queries occurs before first API call is made.</source>
          <target>If the same companion device app is used to manage multiple versions of the same companion device and those capabilities change (and requires a device query to decide), we recommend this queries occurs before first API call is made.</target>
        </segment>
      </unit>
      <unit id="275">
        <segment state="initial">
          <source>The first API (RequestStartRegisteringDeviceAsync) will return a handle used by the second API (FinishRegisteringDeviceAsync).</source>
          <target>The first API (RequestStartRegisteringDeviceAsync) will return a handle used by the second API (FinishRegisteringDeviceAsync).</target>
        </segment>
      </unit>
      <unit id="276">
        <segment state="initial">
          <source>The first call for registration will launch the PIN prompt to make sure user is present.</source>
          <target>The first call for registration will launch the PIN prompt to make sure user is present.</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source>If no PIN is set up, this call will fail.</source>
          <target>If no PIN is set up, this call will fail.</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source>Companion device app can query whether PIN is set up or not via KeyCredentialManager.IsSupportedAsync call as well.</source>
          <target>Companion device app can query whether PIN is set up or not via KeyCredentialManager.IsSupportedAsync call as well.</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source>RequestStartRegisteringDeviceAsync call can also fail if policy has disabled the usage of companion device.</source>
          <target>RequestStartRegisteringDeviceAsync call can also fail if policy has disabled the usage of companion device.</target>
        </segment>
      </unit>
      <unit id="280">
        <segment state="initial">
          <source>The result of first call is returned via SecondaryAuthenticationFactorRegistrationStatus enum:</source>
          <target>The result of first call is returned via SecondaryAuthenticationFactorRegistrationStatus enum:</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source>The second call (FinishRegisteringDeviceAsync) finishes the registration.</source>
          <target>The second call (FinishRegisteringDeviceAsync) finishes the registration.</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source>As part of registration process, the companion device app can store companion device configuration data with Companion Authentication Service.</source>
          <target>As part of registration process, the companion device app can store companion device configuration data with Companion Authentication Service.</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source>There is a 4K size limit for this data.</source>
          <target>There is a 4K size limit for this data.</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source>This data will be available to companion device app at authentication time.</source>
          <target>This data will be available to companion device app at authentication time.</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source>This data can be used, as an example, to connect to companion device, like a MAC address, or if companion device does not have storage and companion device wants to use PC for storage, then configuration data can be used.</source>
          <target>This data can be used, as an example, to connect to companion device, like a MAC address, or if companion device does not have storage and companion device wants to use PC for storage, then configuration data can be used.</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source>Note that any sensitive data stored as part of configuration data must be encrypted with a key that only companion device knows.</source>
          <target>Note that any sensitive data stored as part of configuration data must be encrypted with a key that only companion device knows.</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source>Also, given that configuration data is stored by a Windows service, it is available to companion device app across user profiles.</source>
          <target>Also, given that configuration data is stored by a Windows service, it is available to companion device app across user profiles.</target>
        </segment>
      </unit>
      <unit id="288">
        <segment state="initial">
          <source>The companion device app can call AbortRegisteringDeviceAsync to cancel the registration and pass in an error code.</source>
          <target>The companion device app can call AbortRegisteringDeviceAsync to cancel the registration and pass in an error code.</target>
        </segment>
      </unit>
      <unit id="289">
        <segment state="initial">
          <source>The Companion Authentication Service will log the error in the telemetry data.</source>
          <target>The Companion Authentication Service will log the error in the telemetry data.</target>
        </segment>
      </unit>
      <unit id="290">
        <segment state="initial">
          <source>A good example for this call would be when something went wrong with companion device and it could not finish registration (e.g., it cannot store HMAC keys or BT connection was lost).</source>
          <target>A good example for this call would be when something went wrong with companion device and it could not finish registration (e.g., it cannot store HMAC keys or BT connection was lost).</target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source>The companion device app must provide an option for user to de-register their companion device from their Windows 10 desktop (e.g., if they lost their companion device or bought a newer version).</source>
          <target>The companion device app must provide an option for user to de-register their companion device from their Windows 10 desktop (e.g., if they lost their companion device or bought a newer version).</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source>When user selects that option, then the companion device app must call UnregisterDeviceAsync.</source>
          <target>When user selects that option, then the companion device app must call UnregisterDeviceAsync.</target>
        </segment>
      </unit>
      <unit id="293">
        <segment state="initial">
          <source>This call by the companion device app will trigger companion device authentication service to delete all data (including HMAC keys) corresponding to the specific device Id and AppId of the caller app from PC side.</source>
          <target>This call by the companion device app will trigger companion device authentication service to delete all data (including HMAC keys) corresponding to the specific device Id and AppId of the caller app from PC side.</target>
        </segment>
      </unit>
      <unit id="294">
        <segment state="initial">
          <source>This API call does not attempt to delete HMAC keys from companion device app or companion device side.</source>
          <target>This API call does not attempt to delete HMAC keys from companion device app or companion device side.</target>
        </segment>
      </unit>
      <unit id="295">
        <segment state="initial">
          <source>That is left for companion device app to implement.</source>
          <target>That is left for companion device app to implement.</target>
        </segment>
      </unit>
      <unit id="296">
        <segment state="initial">
          <source>The companion device app is responsible for showing any error messages that happen in registration and de-registration phase.</source>
          <target>The companion device app is responsible for showing any error messages that happen in registration and de-registration phase.</target>
        </segment>
      </unit>
      <unit id="297">
        <segment state="initial">
          <source>Authentication</source>
          <target>Authentication</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source>Authentication requires two API calls to the Companion Authentication Service: StartAuthenticationAsync and FinishAuthencationAsync.</source>
          <target>Authentication requires two API calls to the Companion Authentication Service: StartAuthenticationAsync and FinishAuthencationAsync.</target>
        </segment>
      </unit>
      <unit id="299">
        <segment state="initial">
          <source>The first initiation API will return a handle used by the second API.</source>
          <target>The first initiation API will return a handle used by the second API.</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source>The first call returns, among other things, a nonce that – once concatenated with other things - needs to be HMAC'ed with the device key stored on the companion device.</source>
          <target>The first call returns, among other things, a nonce that – once concatenated with other things - needs to be HMAC'ed with the device key stored on the companion device.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source>The second call returns the results of HMAC with device key and can potentially end in successful authentication (i.e., the user will see their desktop).</source>
          <target>The second call returns the results of HMAC with device key and can potentially end in successful authentication (i.e., the user will see their desktop).</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source>The first initiation API (StartAuthenticationAsync) can fail if policy has disabled that companion device after initial registration.</source>
          <target>The first initiation API (StartAuthenticationAsync) can fail if policy has disabled that companion device after initial registration.</target>
        </segment>
      </unit>
      <unit id="303">
        <segment state="initial">
          <source>It can also fail if the API call was made outside WaitingForUserConfirmation or CollectingCredential states (more on this later in this section).</source>
          <target>It can also fail if the API call was made outside WaitingForUserConfirmation or CollectingCredential states (more on this later in this section).</target>
        </segment>
      </unit>
      <unit id="304">
        <segment state="initial">
          <source>It can also fail if an unregistered companion device app calls it.</source>
          <target>It can also fail if an unregistered companion device app calls it.</target>
        </segment>
      </unit>
      <unit id="305">
        <segment state="initial">
          <source>SecondaryAuthenticationFactorAuthenticationStatus Enum summarizes the possible outcomes:</source>
          <target>SecondaryAuthenticationFactorAuthenticationStatus Enum summarizes the possible outcomes:</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source>The second API call (FinishAuthencationAsync) can fail if the nonce that was provided in the first call is expired (20 seconds).</source>
          <target>The second API call (FinishAuthencationAsync) can fail if the nonce that was provided in the first call is expired (20 seconds).</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source>SecondaryAuthenticationFactorFinishAuthenticationStatus enum captures possible outcomes.</source>
          <target>SecondaryAuthenticationFactorFinishAuthenticationStatus enum captures possible outcomes.</target>
        </segment>
      </unit>
      <unit id="308">
        <segment state="initial">
          <source>The timing of two API calls (StartAuthenticationAsync and FinishAuthencationAsync) need to align with how the companion device collects intent, user presence and disambiguation signals (see User Signals for more details).</source>
          <target>The timing of two API calls (StartAuthenticationAsync and FinishAuthencationAsync) need to align with how the companion device collects intent, user presence and disambiguation signals (see User Signals for more details).</target>
        </segment>
      </unit>
      <unit id="309">
        <segment state="initial">
          <source>For example, the second call must not be submitted until intent signal is available.</source>
          <target>For example, the second call must not be submitted until intent signal is available.</target>
        </segment>
      </unit>
      <unit id="310">
        <segment state="initial">
          <source>In other words, PC should not unlock if user has not expressed intent for it.</source>
          <target>In other words, PC should not unlock if user has not expressed intent for it.</target>
        </segment>
      </unit>
      <unit id="311">
        <segment state="initial">
          <source>To make this more clear, assume that Bluetooth proximity is used for PC unlock, then an explicit intent signal must be collected otherwise, as soon as user walks by his PC on the way to kitchen, PC will unlock.</source>
          <target>To make this more clear, assume that Bluetooth proximity is used for PC unlock, then an explicit intent signal must be collected otherwise, as soon as user walks by his PC on the way to kitchen, PC will unlock.</target>
        </segment>
      </unit>
      <unit id="312">
        <segment state="initial">
          <source>Also, the nonce returned from the first call is time bound (20 seconds) and will expire after certain period.</source>
          <target>Also, the nonce returned from the first call is time bound (20 seconds) and will expire after certain period.</target>
        </segment>
      </unit>
      <unit id="313">
        <segment state="initial">
          <source>As a result, the first call only should be made when companion device app has good indication of companion device presence, e.g., companion device is inserted into USB port, or tapped on NFC reader.</source>
          <target>As a result, the first call only should be made when companion device app has good indication of companion device presence, e.g., companion device is inserted into USB port, or tapped on NFC reader.</target>
        </segment>
      </unit>
      <unit id="314">
        <segment state="initial">
          <source>With Bluetooth, care must be taken to avoid affecting battery on PC side or affecting other Bluetooth activities going on at that point when checking for companion device presence.</source>
          <target>With Bluetooth, care must be taken to avoid affecting battery on PC side or affecting other Bluetooth activities going on at that point when checking for companion device presence.</target>
        </segment>
      </unit>
      <unit id="315">
        <segment state="initial">
          <source>Also, if user presence signal needs to be provided (e.g., by typing in PIN), it is recommended that the first authentication call is only made after that signal is collected.</source>
          <target>Also, if user presence signal needs to be provided (e.g., by typing in PIN), it is recommended that the first authentication call is only made after that signal is collected.</target>
        </segment>
      </unit>
      <unit id="316">
        <segment state="initial">
          <source>The Companion Device Framework helps the companion device app to make informed decision on when to make above two calls by providing a complete picture of where user is in authentication flow.</source>
          <target>The Companion Device Framework helps the companion device app to make informed decision on when to make above two calls by providing a complete picture of where user is in authentication flow.</target>
        </segment>
      </unit>
      <unit id="317">
        <segment state="initial">
          <source>Companion Device Framework provides this functionality by providing lock state change notification to app background task.</source>
          <target>Companion Device Framework provides this functionality by providing lock state change notification to app background task.</target>
        </segment>
      </unit>
      <unit id="318">
        <segment state="initial">
          <source>companion device flow</source>
          <target>companion device flow</target>
        </segment>
      </unit>
      <unit id="319">
        <segment state="initial">
          <source>Details of each of these states are as follows:</source>
          <target>Details of each of these states are as follows:</target>
        </segment>
      </unit>
      <unit id="320">
        <segment state="initial">
          <source>State</source>
          <target>State</target>
        </segment>
      </unit>
      <unit id="321">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="322">
        <segment state="initial">
          <source>WaitingForUserConfirmation</source>
          <target>WaitingForUserConfirmation</target>
        </segment>
      </unit>
      <unit id="323">
        <segment state="initial">
          <source>This state change notification event is fired when lock screen comes down (e.g., user pressed Windows + L).</source>
          <target>This state change notification event is fired when lock screen comes down (e.g., user pressed Windows + L).</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source>We recommend not to request any error messages relating to having difficulty finding a device in this state.</source>
          <target>We recommend not to request any error messages relating to having difficulty finding a device in this state.</target>
        </segment>
      </unit>
      <unit id="325">
        <segment state="initial">
          <source>In general, we recommend to only show messages, when intent signal is available.</source>
          <target>In general, we recommend to only show messages, when intent signal is available.</target>
        </segment>
      </unit>
      <unit id="326">
        <segment state="initial">
          <source>The companion device app should make the first API call for authentication in this state if companion device collects intent signal (e.g., tapping on NFC reader, press of a button on the companion device or a specific gesture, like clapping), and the companion device app background task receives indication from the companion device that intent signal was detected.</source>
          <target>The companion device app should make the first API call for authentication in this state if companion device collects intent signal (e.g., tapping on NFC reader, press of a button on the companion device or a specific gesture, like clapping), and the companion device app background task receives indication from the companion device that intent signal was detected.</target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source>Otherwise, if companion device app relies on PC to start authentication flow (by having user swipe up the unlock screen or hitting space bar), then companion device app needs to wait for next state (CollectingCredential).</source>
          <target>Otherwise, if companion device app relies on PC to start authentication flow (by having user swipe up the unlock screen or hitting space bar), then companion device app needs to wait for next state (CollectingCredential).</target>
        </segment>
      </unit>
      <unit id="328">
        <segment state="initial">
          <source>CollectingCredential</source>
          <target>CollectingCredential</target>
        </segment>
      </unit>
      <unit id="329">
        <segment state="initial">
          <source>This state change notification event is fired when user either opens their laptop lid, hits any key on their keyboard, or swipes up to the unlock screen.</source>
          <target>This state change notification event is fired when user either opens their laptop lid, hits any key on their keyboard, or swipes up to the unlock screen.</target>
        </segment>
      </unit>
      <unit id="330">
        <segment state="initial">
          <source>If companion device relies on above actions to start collecting intent signal then companion device app should start collecting it (e.g., via a pop up on companion device asking whether user wants to unlock the PC).</source>
          <target>If companion device relies on above actions to start collecting intent signal then companion device app should start collecting it (e.g., via a pop up on companion device asking whether user wants to unlock the PC).</target>
        </segment>
      </unit>
      <unit id="331">
        <segment state="initial">
          <source>This would be a good time to provide error cases if companion device app needs user to provide user presence signal on the companion device (like typing in PIN on the companion device).</source>
          <target>This would be a good time to provide error cases if companion device app needs user to provide user presence signal on the companion device (like typing in PIN on the companion device).</target>
        </segment>
      </unit>
      <unit id="332">
        <segment state="initial">
          <source>Suspendingauthentication</source>
          <target>Suspendingauthentication</target>
        </segment>
      </unit>
      <unit id="333">
        <segment state="initial">
          <source>When companion device app receives this state, it means that Companion Authentication Service has stopped accepting authentication requests.</source>
          <target>When companion device app receives this state, it means that Companion Authentication Service has stopped accepting authentication requests.</target>
        </segment>
      </unit>
      <unit id="334">
        <segment state="initial">
          <source>CredentialCollected</source>
          <target>CredentialCollected</target>
        </segment>
      </unit>
      <unit id="335">
        <segment state="initial">
          <source>This means that another companion device app has called the second API and that Companion Authentication Service is verifying what was submitted.</source>
          <target>This means that another companion device app has called the second API and that Companion Authentication Service is verifying what was submitted.</target>
        </segment>
      </unit>
      <unit id="336">
        <segment state="initial">
          <source>At this point, Companion Authentication Service is not accepting any other authentication requests unless the currently submitted one does not pass verification.</source>
          <target>At this point, Companion Authentication Service is not accepting any other authentication requests unless the currently submitted one does not pass verification.</target>
        </segment>
      </unit>
      <unit id="337">
        <segment state="initial">
          <source>Companion device app should stay tuned until next state is reached.</source>
          <target>Companion device app should stay tuned until next state is reached.</target>
        </segment>
      </unit>
      <unit id="338">
        <segment state="initial">
          <source>CredentialAuthenticated</source>
          <target>CredentialAuthenticated</target>
        </segment>
      </unit>
      <unit id="339">
        <segment state="initial">
          <source>This means that the submitted credential worked.</source>
          <target>This means that the submitted credential worked.</target>
        </segment>
      </unit>
      <unit id="340">
        <segment state="initial">
          <source>The credentialAuthenticated has device ID of the companion device that succeeded.</source>
          <target>The credentialAuthenticated has device ID of the companion device that succeeded.</target>
        </segment>
      </unit>
      <unit id="341">
        <segment state="initial">
          <source>Companion device app should make sure to check on that to see if its associated device was the winner.</source>
          <target>Companion device app should make sure to check on that to see if its associated device was the winner.</target>
        </segment>
      </unit>
      <unit id="342">
        <segment state="initial">
          <source>If not, then the companion device app should avoid showing any post authentication flows (like success message on the companion device or perhaps a vibration on that device).</source>
          <target>If not, then the companion device app should avoid showing any post authentication flows (like success message on the companion device or perhaps a vibration on that device).</target>
        </segment>
      </unit>
      <unit id="343">
        <segment state="initial">
          <source>Note that if the submitted credential did not work, then state will change to CollectingCredential state.</source>
          <target>Note that if the submitted credential did not work, then state will change to CollectingCredential state.</target>
        </segment>
      </unit>
      <unit id="344">
        <segment state="initial">
          <source>StoppoingAuthentication</source>
          <target>StoppoingAuthentication</target>
        </segment>
      </unit>
      <unit id="345">
        <segment state="initial">
          <source>Authentication succeeded and user saw desktop.</source>
          <target>Authentication succeeded and user saw desktop.</target>
        </segment>
      </unit>
      <unit id="346">
        <segment state="initial">
          <source>Time to kill your background task</source>
          <target>Time to kill your background task</target>
        </segment>
      </unit>
      <unit id="347">
        <segment state="initial">
          <source>Companion device apps should only call the two authentication APIs in the first two states.</source>
          <target>Companion device apps should only call the two authentication APIs in the first two states.</target>
        </segment>
      </unit>
      <unit id="348">
        <segment state="initial">
          <source>Companion device apps should check is what scenario this event is being fired.</source>
          <target>Companion device apps should check is what scenario this event is being fired.</target>
        </segment>
      </unit>
      <unit id="349">
        <segment state="initial">
          <source>There are two possibilities: unlock or post unlock.</source>
          <target>There are two possibilities: unlock or post unlock.</target>
        </segment>
      </unit>
      <unit id="350">
        <segment state="initial">
          <source>Currently, only unlock is supported.</source>
          <target>Currently, only unlock is supported.</target>
        </segment>
      </unit>
      <unit id="351">
        <segment state="initial">
          <source>In upcoming releases, post-unlock scenarios may be supported.</source>
          <target>In upcoming releases, post-unlock scenarios may be supported.</target>
        </segment>
      </unit>
      <unit id="352">
        <segment state="initial">
          <source>The SecondaryAuthenticationFactorAuthenticationScenario enum captures these two options:</source>
          <target>The SecondaryAuthenticationFactorAuthenticationScenario enum captures these two options:</target>
        </segment>
      </unit>
      <unit id="353">
        <segment state="initial">
          <source>Complete code sample:</source>
          <target>Complete code sample:</target>
        </segment>
      </unit>
      <unit id="354">
        <segment state="initial">
          <source>Register a background task</source>
          <target>Register a background task</target>
        </segment>
      </unit>
      <unit id="355">
        <segment state="initial">
          <source>When the companion device app registers the first companion device, it should also register its background task component which will pass authentication information between device and companion device authentication service.</source>
          <target>When the companion device app registers the first companion device, it should also register its background task component which will pass authentication information between device and companion device authentication service.</target>
        </segment>
      </unit>
      <unit id="356">
        <segment state="initial">
          <source>Errors and messages</source>
          <target>Errors and messages</target>
        </segment>
      </unit>
      <unit id="357">
        <segment state="initial">
          <source>The Companion Device Framework is responsible for providing feedback to the user about success or failure of the signing in.</source>
          <target>The Companion Device Framework is responsible for providing feedback to the user about success or failure of the signing in.</target>
        </segment>
      </unit>
      <unit id="358">
        <segment state="initial">
          <source>The Companion Device Framework will provide a stock of (localized) text and error messages for the companion device app to choose from.</source>
          <target>The Companion Device Framework will provide a stock of (localized) text and error messages for the companion device app to choose from.</target>
        </segment>
      </unit>
      <unit id="359">
        <segment state="initial">
          <source>These will be displayed in logon UI.</source>
          <target>These will be displayed in logon UI.</target>
        </segment>
      </unit>
      <unit id="360">
        <segment state="initial">
          <source>companion device error</source>
          <target>companion device error</target>
        </segment>
      </unit>
      <unit id="361">
        <segment state="initial">
          <source>Companion device apps can use ShowNotificationMessageAsync to show messages to user as part of logon UI.</source>
          <target>Companion device apps can use ShowNotificationMessageAsync to show messages to user as part of logon UI.</target>
        </segment>
      </unit>
      <unit id="362">
        <segment state="initial">
          <source>Call this API when intent signal is available.</source>
          <target>Call this API when intent signal is available.</target>
        </segment>
      </unit>
      <unit id="363">
        <segment state="initial">
          <source>Note that intent signal must always be collected on companion device side.</source>
          <target>Note that intent signal must always be collected on companion device side.</target>
        </segment>
      </unit>
      <unit id="364">
        <segment state="initial">
          <source>There are two types of messages: guidance and errors.</source>
          <target>There are two types of messages: guidance and errors.</target>
        </segment>
      </unit>
      <unit id="365">
        <segment state="initial">
          <source>Guidance messages are designed to show to user how to start the unlock process.</source>
          <target>Guidance messages are designed to show to user how to start the unlock process.</target>
        </segment>
      </unit>
      <unit id="366">
        <segment state="initial">
          <source>Those messages are only shown to user once, upon first device registration and never shown again.</source>
          <target>Those messages are only shown to user once, upon first device registration and never shown again.</target>
        </segment>
      </unit>
      <unit id="367">
        <segment state="initial">
          <source>Error messages are always shown.</source>
          <target>Error messages are always shown.</target>
        </segment>
      </unit>
      <unit id="368">
        <segment state="initial">
          <source>Error messages will be shown to user for 5 seconds and then disappear.</source>
          <target>Error messages will be shown to user for 5 seconds and then disappear.</target>
        </segment>
      </unit>
      <unit id="369">
        <segment state="initial">
          <source>Given that intent signal must be collected before showing messages to user, and user will provide that intent only using one of this companion devices, there must not be a situation where multiple companion devices race for showing error messages.</source>
          <target>Given that intent signal must be collected before showing messages to user, and user will provide that intent only using one of this companion devices, there must not be a situation where multiple companion devices race for showing error messages.</target>
        </segment>
      </unit>
      <unit id="370">
        <segment state="initial">
          <source>As a result, Companion Device Framework does not maintain any queue.</source>
          <target>As a result, Companion Device Framework does not maintain any queue.</target>
        </segment>
      </unit>
      <unit id="371">
        <segment state="initial">
          <source>When a caller asks for an error message, it will be shown for 5 seconds and all other requests for showing error message in that 5 seconds are dropped.</source>
          <target>When a caller asks for an error message, it will be shown for 5 seconds and all other requests for showing error message in that 5 seconds are dropped.</target>
        </segment>
      </unit>
      <unit id="372">
        <segment state="initial">
          <source>Once 5 second is passed, then opportunity arises for another caller to show error message.</source>
          <target>Once 5 second is passed, then opportunity arises for another caller to show error message.</target>
        </segment>
      </unit>
      <unit id="373">
        <segment state="initial">
          <source>We prohibit any caller from jamming the error channel.</source>
          <target>We prohibit any caller from jamming the error channel.</target>
        </segment>
      </unit>
      <unit id="374">
        <segment state="initial">
          <source>Guidance and error messages are as follows.</source>
          <target>Guidance and error messages are as follows.</target>
        </segment>
      </unit>
      <unit id="375">
        <segment state="initial">
          <source>Device name is a parameter passed by companion device app as part of ShowNotificationMessageAsync.</source>
          <target>Device name is a parameter passed by companion device app as part of ShowNotificationMessageAsync.</target>
        </segment>
      </unit>
      <unit id="376">
        <segment state="initial">
          <source>Guidance</source>
          <target>Guidance</target>
        </segment>
      </unit>
      <unit id="377">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Swipe up or press space bar to sign in with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>."</source>
          <target>"Swipe up or press space bar to sign in with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>."</target>
        </segment>
      </unit>
      <unit id="378">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to the NFC reader to sign in."</source>
          <target>"Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to the NFC reader to sign in."</target>
        </segment>
      </unit>
      <unit id="379">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Looking for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> ..."</source>
          <target>"Looking for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> ..."</target>
        </segment>
      </unit>
      <unit id="380">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Plug <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> into a USB port to sign in."</source>
          <target>"Plug <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> into a USB port to sign in."</target>
        </segment>
      </unit>
      <unit id="381">
        <segment state="initial">
          <source>Errors</source>
          <target>Errors</target>
        </segment>
      </unit>
      <unit id="382">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> for sign-in instructions."</source>
          <target>"See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> for sign-in instructions."</target>
        </segment>
      </unit>
      <unit id="383">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Turn on Bluetooth to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</source>
          <target>"Turn on Bluetooth to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</target>
        </segment>
      </unit>
      <unit id="384">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Turn on NFC to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</source>
          <target>"Turn on NFC to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</target>
        </segment>
      </unit>
      <unit id="385">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Connect to a Wi-Fi network to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</source>
          <target>"Connect to a Wi-Fi network to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</target>
        </segment>
      </unit>
      <unit id="386">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> again."</source>
          <target>"Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> again."</target>
        </segment>
      </unit>
      <unit id="387">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Your enterprise prevents sign in with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>.</source>
          <target>"Your enterprise prevents sign in with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>.</target>
        </segment>
      </unit>
      <unit id="388">
        <segment state="initial">
          <source>Use another sign-in option."</source>
          <target>Use another sign-in option."</target>
        </segment>
      </unit>
      <unit id="389">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</source>
          <target>"Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</target>
        </segment>
      </unit>
      <unit id="390">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Rest your finger on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</source>
          <target>"Rest your finger on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</target>
        </segment>
      </unit>
      <unit id="391">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Swipe your finger on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</source>
          <target>"Swipe your finger on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</target>
        </segment>
      </unit>
      <unit id="392">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Couldn’t sign in with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>.</source>
          <target>"Couldn’t sign in with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>.</target>
        </segment>
      </unit>
      <unit id="393">
        <segment state="initial">
          <source>Use another sign-in option."</source>
          <target>Use another sign-in option."</target>
        </segment>
      </unit>
      <unit id="394">
        <segment state="initial">
          <source>"Something went wrong.</source>
          <target>"Something went wrong.</target>
        </segment>
      </unit>
      <unit id="395">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Use another sign-in option, and then set up <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> again."</source>
          <target>Use another sign-in option, and then set up <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> again."</target>
        </segment>
      </unit>
      <unit id="396">
        <segment state="initial">
          <source>"Try again."</source>
          <target>"Try again."</target>
        </segment>
      </unit>
      <unit id="397">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Say your Spoken Passphrase into <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>."</source>
          <target>"Say your Spoken Passphrase into <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>."</target>
        </segment>
      </unit>
      <unit id="398">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Ready to sign in with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>."</source>
          <target>"Ready to sign in with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc>."</target>
        </segment>
      </unit>
      <unit id="399">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>"Use another sign-in option first, then you can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</source>
          <target>"Use another sign-in option first, then you can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">device name</pc> to sign in."</target>
        </segment>
      </unit>
      <unit id="400">
        <segment state="initial">
          <source>Enumerating registered devices</source>
          <target>Enumerating registered devices</target>
        </segment>
      </unit>
      <unit id="401">
        <segment state="initial">
          <source>Companion device app can enumerate the list of registered companion devices via FindAllRegisteredDeviceInfoAsync call.</source>
          <target>Companion device app can enumerate the list of registered companion devices via FindAllRegisteredDeviceInfoAsync call.</target>
        </segment>
      </unit>
      <unit id="402">
        <segment state="initial">
          <source>This API supports two query type defined via enum SecondaryAuthenticaitonFactorDeviceFindScope:</source>
          <target>This API supports two query type defined via enum SecondaryAuthenticaitonFactorDeviceFindScope:</target>
        </segment>
      </unit>
      <unit id="403">
        <segment state="initial">
          <source>The first scope returns the list of devices for the logged on user.</source>
          <target>The first scope returns the list of devices for the logged on user.</target>
        </segment>
      </unit>
      <unit id="404">
        <segment state="initial">
          <source>The second one returns the list for all users on that PC.</source>
          <target>The second one returns the list for all users on that PC.</target>
        </segment>
      </unit>
      <unit id="405">
        <segment state="initial">
          <source>The first scope must be used at un-registration time to avoid un-registering other user's companion device.</source>
          <target>The first scope must be used at un-registration time to avoid un-registering other user's companion device.</target>
        </segment>
      </unit>
      <unit id="406">
        <segment state="initial">
          <source>The second one must be used at authentication or registration time: at registration time, this enumeration can help app avoid trying to register the same companion device twice.</source>
          <target>The second one must be used at authentication or registration time: at registration time, this enumeration can help app avoid trying to register the same companion device twice.</target>
        </segment>
      </unit>
      <unit id="407">
        <segment state="initial">
          <source>Note that even if app does not perform this check, PC does and will reject the same companion device be registered more than once.</source>
          <target>Note that even if app does not perform this check, PC does and will reject the same companion device be registered more than once.</target>
        </segment>
      </unit>
      <unit id="408">
        <segment state="initial">
          <source>At authentication time, using AllUsers scope helps companion device app support switch user flow: log on user A when user B is logged in (this requires that both users have installed the companion device app and user A has registered their companion devices with PC and PC is sitting on lock screen (or logon screen)).</source>
          <target>At authentication time, using AllUsers scope helps companion device app support switch user flow: log on user A when user B is logged in (this requires that both users have installed the companion device app and user A has registered their companion devices with PC and PC is sitting on lock screen (or logon screen)).</target>
        </segment>
      </unit>
      <unit id="409">
        <segment state="initial">
          <source>Security requirements</source>
          <target>Security requirements</target>
        </segment>
      </unit>
      <unit id="410">
        <segment state="initial">
          <source>The Companion Authentication Service provides the following security protections.</source>
          <target>The Companion Authentication Service provides the following security protections.</target>
        </segment>
      </unit>
      <unit id="411">
        <segment state="initial">
          <source>Malware on a Windows 10 desktop  device running as medium user or app container cannot use the companion device to access user credential keys (stored as part of Microsoft Passport) on PC silently.</source>
          <target>Malware on a Windows 10 desktop  device running as medium user or app container cannot use the companion device to access user credential keys (stored as part of Microsoft Passport) on PC silently.</target>
        </segment>
      </unit>
      <unit id="412">
        <segment state="initial">
          <source>A malicious user on a Windows 10 desktop device cannot use the companion device that belongs to another user on that Windows 10 desktop device to get silent access to his user credential keys (on the same Windows 10 desktop device).</source>
          <target>A malicious user on a Windows 10 desktop device cannot use the companion device that belongs to another user on that Windows 10 desktop device to get silent access to his user credential keys (on the same Windows 10 desktop device).</target>
        </segment>
      </unit>
      <unit id="413">
        <segment state="initial">
          <source>Malware on the companion device cannot silently get access to user credential keys on Windows 10 desktop  device, including leveraging functionality or code developed specifically for the Companion Device Framework.</source>
          <target>Malware on the companion device cannot silently get access to user credential keys on Windows 10 desktop  device, including leveraging functionality or code developed specifically for the Companion Device Framework.</target>
        </segment>
      </unit>
      <unit id="414">
        <segment state="initial">
          <source>A malicious user cannot unlock Windows 10 desktop  device by capturing traffic between the companion device and the Windows 10 desktop  device and replaying it later.</source>
          <target>A malicious user cannot unlock Windows 10 desktop  device by capturing traffic between the companion device and the Windows 10 desktop  device and replaying it later.</target>
        </segment>
      </unit>
      <unit id="415">
        <segment state="initial">
          <source>Usage of nonce, authkey, and HMAC in our protocol guarantees protection against a replay attack.</source>
          <target>Usage of nonce, authkey, and HMAC in our protocol guarantees protection against a replay attack.</target>
        </segment>
      </unit>
      <unit id="416">
        <segment state="initial">
          <source>Malware or a malicious user on a rouge PC cannot use companion device to get access to honest user PC.</source>
          <target>Malware or a malicious user on a rouge PC cannot use companion device to get access to honest user PC.</target>
        </segment>
      </unit>
      <unit id="417">
        <segment state="initial">
          <source>This is achieved through mutual authentication between Companion Authenticaiton Service and companion device through usage of authkey and HMAC in our protocol.</source>
          <target>This is achieved through mutual authentication between Companion Authenticaiton Service and companion device through usage of authkey and HMAC in our protocol.</target>
        </segment>
      </unit>
      <unit id="418">
        <segment state="initial">
          <source>The key to achieve the security protections enumerated above is to protect HMAC keys from unauthorized access and also verifying user presence.</source>
          <target>The key to achieve the security protections enumerated above is to protect HMAC keys from unauthorized access and also verifying user presence.</target>
        </segment>
      </unit>
      <unit id="419">
        <segment state="initial">
          <source>More specifically, it must satisfy these requirements:</source>
          <target>More specifically, it must satisfy these requirements:</target>
        </segment>
      </unit>
      <unit id="420">
        <segment state="initial">
          <source>Provide protection against cloning the companion device</source>
          <target>Provide protection against cloning the companion device</target>
        </segment>
      </unit>
      <unit id="421">
        <segment state="initial">
          <source>Provide protection against eavesdropping when sending HMAC keys at registration time to PC</source>
          <target>Provide protection against eavesdropping when sending HMAC keys at registration time to PC</target>
        </segment>
      </unit>
      <unit id="422">
        <segment state="initial">
          <source>Make sure that user presence signal is available.</source>
          <target>Make sure that user presence signal is available.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>