{"nodes":[{"content":"Bind hierarchical data and create a master/details view","pos":[78,133]},{"content":"You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to CollectionViewSource instances that are bound together in a chain.","pos":[147,339]},{"content":"Bind hierarchical data and create a master/details view","pos":[346,401]},{"content":"Updated for UWP apps on Windows 10.","pos":[406,441]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[442,534]},{"pos":[542,637],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Also see the <bpt id=\"p2\">[</bpt>Master/detail sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?linkid=619991)</ept>."},{"content":"You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> instances that are bound together in a chain.","pos":[639,895]},{"content":"In this topic we use the <bpt id=\"p1\">[</bpt>{x:Bind} markup extension<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> where possible, and the more flexible (but less performant) <bpt id=\"p2\">[</bpt>{Binding} markup extension<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> where necessary.","pos":[896,1170]},{"content":"One common structure for Universal Windows Platform (UWP) apps is to navigate to different details pages when a user makes a selection in a master list.","pos":[1172,1324]},{"content":"This is useful when you want to provide a rich visual representation of each item at every level in a hierarchy.","pos":[1325,1437]},{"content":"Another option is to display multiple levels of data on a single page.","pos":[1438,1508]},{"content":"This is useful when you want to display a few simple lists that let the user quickly drill down to an item of interest.","pos":[1509,1628]},{"content":"This topic describes how to implement this interaction.","pos":[1629,1684]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> instances keep track of the current selection at each hierarchical level.","pos":[1685,1847]},{"content":"We'll create a view of a sports team hierarchy that is organized into lists for leagues, divisions, and teams, and includes a team details view.","pos":[1849,1993]},{"content":"When you select an item from any list, the subsequent views update automatically.","pos":[1994,2075]},{"content":"master/details view of a sports hierarchy","pos":[2079,2120]},{"content":"Prerequisites","pos":[2157,2170]},{"content":"This topic assumes that you know how to create a basic UWP app.","pos":[2172,2235]},{"content":"For instructions on creating your first UWP app, see <bpt id=\"p1\">[</bpt>Create your first UWP app using C# or Visual Basic<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh974581)</ept>.","pos":[2236,2400]},{"content":"Create the project","pos":[2405,2423]},{"content":"Create a new <bpt id=\"p1\">**</bpt>Blank Application (Windows Universal)<ept id=\"p1\">**</ept> project.","pos":[2425,2488]},{"content":"Name it \"MasterDetailsBinding\".","pos":[2489,2520]},{"content":"Create the data model","pos":[2525,2546]},{"content":"Add a new class to your project, name it ViewModel.cs, and add this code to it.","pos":[2548,2627]},{"content":"This will be your binding source class.","pos":[2628,2667]},{"content":"Create the view","pos":[4427,4442]},{"content":"Next, expose the binding source class from the class that represents your page of markup.","pos":[4444,4533]},{"content":"We do that by adding a property of type <bpt id=\"p1\">**</bpt>LeagueList<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>MainPage<ept id=\"p2\">**</ept>.","pos":[4534,4605]},{"content":"Finally, replace the contents of the MainPage.xaml file with the following markup, which declares three <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> instances and binds them together in a chain.","pos":[5015,5249]},{"content":"The subsequent controls can then bind to the appropriate <bpt id=\"p1\">**</bpt>CollectionViewSource<ept id=\"p1\">**</ept>, depending on its level in the hierarchy.","pos":[5250,5373]},{"content":"Note that by binding directly to the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.","pos":[8687,8936]},{"content":"There's no need to specify the <bpt id=\"p1\">**</bpt>CurrentItem<ept id=\"p1\">**</ept> property as the path for the binding, although you can do that if there's any ambiguity.","pos":[8937,9072]},{"content":"For example, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ContentControl<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept> representing the team view has its <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Content<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.contentcontrol.content)</ept> property bound to the <ph id=\"ph1\">`Teams`</ph><bpt id=\"p5\">**</bpt>CollectionViewSource<ept id=\"p5\">**</ept>.","pos":[9073,9369]},{"content":"However, the controls in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept> bind to properties of the <ph id=\"ph1\">`Team`</ph> class because the <bpt id=\"p3\">**</bpt>CollectionViewSource<ept id=\"p3\">**</ept> automatically supplies the currently selected team from the teams list when necessary.","pos":[9370,9638]}],"content":"---\nauthor: mcleblanc\nms.assetid: 0C69521B-47E0-421F-857B-851B0E9605F2\ntitle: Bind hierarchical data and create a master/details view\ndescription: You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to CollectionViewSource instances that are bound together in a chain.\n---\n# Bind hierarchical data and create a master/details view\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n> **Note**  Also see the [Master/detail sample](http://go.microsoft.com/fwlink/p/?linkid=619991).\n\nYou can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances that are bound together in a chain. In this topic we use the [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783) where possible, and the more flexible (but less performant) [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782) where necessary.\n\nOne common structure for Universal Windows Platform (UWP) apps is to navigate to different details pages when a user makes a selection in a master list. This is useful when you want to provide a rich visual representation of each item at every level in a hierarchy. Another option is to display multiple levels of data on a single page. This is useful when you want to display a few simple lists that let the user quickly drill down to an item of interest. This topic describes how to implement this interaction. The [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances keep track of the current selection at each hierarchical level.\n\nWe'll create a view of a sports team hierarchy that is organized into lists for leagues, divisions, and teams, and includes a team details view. When you select an item from any list, the subsequent views update automatically.\n\n![master/details view of a sports hierarchy](images/xaml-masterdetails.png)\n\n## Prerequisites\n\nThis topic assumes that you know how to create a basic UWP app. For instructions on creating your first UWP app, see [Create your first UWP app using C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/Hh974581).\n\n## Create the project\n\nCreate a new **Blank Application (Windows Universal)** project. Name it \"MasterDetailsBinding\".\n\n## Create the data model\n\nAdd a new class to your project, name it ViewModel.cs, and add this code to it. This will be your binding source class.\n\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MasterDetailsBinding\n{\n    public class Team\n    {\n        public string Name { get; set; }\n        public int Wins { get; set; }\n        public int Losses { get; set; }\n    }\n\n    public class Division\n    {\n        public string Name { get; set; }\n        public IEnumerable<Team> Teams { get; set; }\n    }\n\n    public class League\n    {\n        public string Name { get; set; }\n        public IEnumerable<Division> Divisions { get; set; }\n    }\n\n    public class LeagueList : List<League>\n    {\n        public LeagueList()\n        {\n            this.AddRange(GetLeague().ToList());\n        }\n\n        public IEnumerable<League> GetLeague()\n        {\n            return from x in Enumerable.Range(1, 2)\n                   select new League\n                   {\n                       Name = \"League \" + x,\n                       Divisions = GetDivisions(x).ToList()\n                   };\n        }\n\n        public IEnumerable<Division> GetDivisions(int x)\n        {\n            return from y in Enumerable.Range(1, 3)\n                   select new Division\n                   {\n                       Name = String.Format(\"Division {0}-{1}\", x, y),\n                       Teams = GetTeams(x, y).ToList()\n                   };\n        }\n\n        public IEnumerable<Team> GetTeams(int x, int y)\n        {\n            return from z in Enumerable.Range(1, 4)\n                   select new Team\n                   {\n                       Name = String.Format(\"Team {0}-{1}-{2}\", x, y, z),\n                       Wins = 25 - (x * y * z),\n                       Losses = x * y * z\n                   };\n        }\n    }\n}\n```\n\n## Create the view\n\nNext, expose the binding source class from the class that represents your page of markup. We do that by adding a property of type **LeagueList** to **MainPage**.\n\n```cs\nnamespace MasterDetailsBinding\n{\n    /// <summary>\n    /// An empty page that can be used on its own or navigated to within a Frame.\n    /// </summary>\n    public sealed partial class MainPage : Page\n    {\n        public MainPage()\n        {\n            this.InitializeComponent();\n            this.ViewModel = new LeagueList();\n        }\n        public LeagueList ViewModel { get; set; }\n    }\n}\n```\n\nFinally, replace the contents of the MainPage.xaml file with the following markup, which declares three [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances and binds them together in a chain. The subsequent controls can then bind to the appropriate **CollectionViewSource**, depending on its level in the hierarchy.\n\n```xml\n<Page\n    x:Class=\"MasterDetailsBinding.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:MasterDetailsBinding\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\">\n\n    <Page.Resources>\n        <CollectionViewSource x:Name=\"Leagues\"\n            Source=\"{x:Bind ViewModel}\"/>\n        <CollectionViewSource x:Name=\"Divisions\"\n            Source=\"{Binding Divisions, Source={StaticResource Leagues}}\"/>\n        <CollectionViewSource x:Name=\"Teams\"\n            Source=\"{Binding Teams, Source={StaticResource Divisions}}\"/>\n\n        <Style TargetType=\"TextBlock\">\n            <Setter Property=\"FontSize\" Value=\"15\"/>\n            <Setter Property=\"FontWeight\" Value=\"Bold\"/>\n        </Style>\n\n        <Style TargetType=\"ListBox\">\n            <Setter Property=\"FontSize\" Value=\"15\"/>\n        </Style>\n\n        <Style TargetType=\"ContentControl\">\n            <Setter Property=\"FontSize\" Value=\"15\"/>\n        </Style>\n\n    </Page.Resources>\n\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n\n        <StackPanel Orientation=\"Horizontal\">\n\n            <!-- All Leagues view -->\n\n            <StackPanel Margin=\"5\">\n                <TextBlock Text=\"All Leagues\"/>\n                <ListBox ItemsSource=\"{Binding Source={StaticResource Leagues}}\" \n                    DisplayMemberPath=\"Name\"/>\n            </StackPanel>\n\n            <!-- League/Divisions view -->\n\n            <StackPanel Margin=\"5\">\n                <TextBlock Text=\"{Binding Name, Source={StaticResource Leagues}}\"/>\n                <ListBox ItemsSource=\"{Binding Source={StaticResource Divisions}}\" \n                    DisplayMemberPath=\"Name\"/>\n            </StackPanel>\n\n            <!-- Division/Teams view -->\n\n            <StackPanel Margin=\"5\">\n                <TextBlock Text=\"{Binding Name, Source={StaticResource Divisions}}\"/>\n                <ListBox ItemsSource=\"{Binding Source={StaticResource Teams}}\" \n                    DisplayMemberPath=\"Name\"/>\n            </StackPanel>\n\n            <!-- Team view -->\n\n            <ContentControl Content=\"{Binding Source={StaticResource Teams}}\">\n                <ContentControl.ContentTemplate>\n                    <DataTemplate>\n                        <StackPanel Margin=\"5\">\n                            <TextBlock Text=\"{Binding Name}\" \n                                FontSize=\"15\" FontWeight=\"Bold\"/>\n                            <StackPanel Orientation=\"Horizontal\" Margin=\"10,10\">\n                                <TextBlock Text=\"Wins:\" Margin=\"0,0,5,0\"/>\n                                <TextBlock Text=\"{Binding Wins}\"/>\n                            </StackPanel>\n                            <StackPanel Orientation=\"Horizontal\" Margin=\"10,0\">\n                                <TextBlock Text=\"Losses:\" Margin=\"0,0,5,0\"/>\n                                <TextBlock Text=\"{Binding Losses}\"/>\n                            </StackPanel>\n                        </StackPanel>\n                    </DataTemplate>\n                </ContentControl.ContentTemplate>\n            </ContentControl>\n\n        </StackPanel>\n\n    </Grid>\n</Page>\n```\n\nNote that by binding directly to the [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833), you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself. There's no need to specify the **CurrentItem** property as the path for the binding, although you can do that if there's any ambiguity. For example, the [**ContentControl**](https://msdn.microsoft.com/library/windows/apps/BR209365) representing the team view has its [**Content**](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.contentcontrol.content) property bound to the `Teams`**CollectionViewSource**. However, the controls in the [**DataTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242348) bind to properties of the `Team` class because the **CollectionViewSource** automatically supplies the currently selected team from the teams list when necessary.\n\n \n\n \n\n"}