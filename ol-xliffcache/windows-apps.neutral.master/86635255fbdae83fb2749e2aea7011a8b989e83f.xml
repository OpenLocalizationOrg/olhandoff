{"nodes":[{"content":"Use alignment, margin, and padding to influence the layout of elements on a page.","pos":[32,113]},{"content":"Alignment, margin, and padding for Universal Windows Platform (UWP) apps","pos":[121,193]},{"content":"Alignment, margin, and padding","pos":[308,338]},{"content":"In addition to dimension properties (width, height, and constraints) elements can also have alignment, margin, and padding properties that influence the layout behavior when an element goes through a layout pass and is rendered in a UI.","pos":[340,576]},{"content":"There are relationships between alignment, margin, padding and dimension properties that have a typical logic flow when a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FrameworkElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> object is positioned, such that values are sometimes used and sometimes ignored depending on the circumstances.","pos":[577,891]},{"content":"Alignment properties","pos":[896,916]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>HorizontalAlignment<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208720)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>VerticalAlignment<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208749)</ept> properties describe how a child element should be positioned within a parent element's allocated layout space.","pos":[918,1202]},{"content":"By using these properties together, layout logic for a container can position child elements within the container (either a panel or a control).","pos":[1203,1347]},{"content":"Alignment properties are intended to hint the desired layout to an adaptive layout container, so basically they're set on <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FrameworkElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> children and interpreted by another <bpt id=\"p3\">**</bpt>FrameworkElement<ept id=\"p3\">**</ept> container parent.","pos":[1348,1625]},{"content":"Alignment values can specify whether elements align to one of the two edges of an orientation, or to the center.","pos":[1626,1738]},{"content":"However, the default value for both alignment properties is <bpt id=\"p1\">**</bpt>Stretch<ept id=\"p1\">**</ept>.","pos":[1739,1811]},{"content":"With <bpt id=\"p1\">**</bpt>Stretch<ept id=\"p1\">**</ept> alignment, elements fill the space they're provided in layout.","pos":[1812,1891]},{"content":"<bpt id=\"p1\">**</bpt>Stretch<ept id=\"p1\">**</ept> is the default so that it's easier to use adaptive layout techniques in the cases where there is no explicit measurement or no <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DesiredSize<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> value that came from the measure pass of layout.","pos":[1892,2155]},{"content":"With this default, there's no risk of an explicit height/width not fitting within the container and being clipped until you size each container.","pos":[2156,2300]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept><ph id=\"ph1\">&amp;nbsp;&amp;nbsp;</ph>As a general layout principle, it's best to only apply measurements to certain key elements and use the adaptive layout behavior for the other elements.","pos":[2304,2476]},{"content":"This provides flexible layout behavior for when the user sizes the top app window, which typically is possible to do at any time.","pos":[2477,2606]},{"content":"If there are either <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Height<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Width<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> values or clipping within an adaptive container, even if <bpt id=\"p5\">**</bpt>Stretch<ept id=\"p5\">**</ept> is set as an alignment value, the layout is controlled by the behavior of its container.","pos":[2610,2932]},{"content":"In panels, a <bpt id=\"p1\">**</bpt>Stretch<ept id=\"p1\">**</ept> value that's been obviated by <bpt id=\"p2\">**</bpt>Height<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Width<ept id=\"p3\">**</ept> acts as if the value is <bpt id=\"p4\">**</bpt>Center<ept id=\"p4\">**</ept>.","pos":[2933,3048]},{"content":"If there are no natural or calculated height and width values, these dimension values are mathematically <bpt id=\"p1\">**</bpt>NaN<ept id=\"p1\">**</ept> (Not A Number).","pos":[3050,3178]},{"content":"The elements are waiting for their layout container to give them dimensions.","pos":[3179,3255]},{"content":"After layout is run, there will be values for <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ActualHeight<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ActualWidth<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> properties for elements where a <bpt id=\"p5\">**</bpt>Stretch<ept id=\"p5\">**</ept> alignment was used.","pos":[3256,3522]},{"content":"The <bpt id=\"p1\">**</bpt>NaN<ept id=\"p1\">**</ept> values remain in <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Height<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Width<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> for the child elements so that the adaptive behavior can run again, for example, if layout-related changes such as app window sizing causes another layout cycle.","pos":[3523,3858]},{"content":"Text elements such as <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> don't usually have an explicitly declared width, but they do have a calculated width that you can query with <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ActualWidth<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept>, and that width also cancels out a <bpt id=\"p5\">**</bpt>Stretch<ept id=\"p5\">**</ept> alignment.","pos":[3860,4198]},{"content":"(The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FontSize<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209657)</ept> property and other text properties, as well as the text itself, are already hinting the intended layout size.","pos":[4199,4386]},{"content":"You don't typically want your text to be stretched.) Text used as content within a control has the same effect; the presence of text that needs presenting causes an <bpt id=\"p1\">**</bpt>ActualWidth<ept id=\"p1\">**</ept> to be calculated, and this also commutes a desired width and size to the containing control.","pos":[4387,4660]},{"content":"Text elements also have an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ActualHeight<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> based on font size per line, line breaks, and other text properties.","pos":[4661,4833]},{"content":"A panel such as <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Grid<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept> already has other logic for layout (row and column definitions, and attached properties such as <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Grid.Row<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh759795)</ept> set on elements to indicate which cell to be drawn in).","pos":[4835,5144]},{"content":"In that case, the alignment properties influence how the content is aligned within the area of that cell, but the cell structure and sizing is controlled by settings on the <bpt id=\"p1\">**</bpt>Grid<ept id=\"p1\">**</ept>.","pos":[5145,5327]},{"content":"Item controls sometimes display items where the base types of the items are data.","pos":[5329,5410]},{"content":"This involves an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemsPresenter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242843)</ept>.","pos":[5411,5507]},{"content":"Although the data itself is not a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FrameworkElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> derived type, <bpt id=\"p3\">**</bpt>ItemsPresenter<ept id=\"p3\">**</ept> is, so you can set <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>HorizontalAlignment<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br208720)</ept> and <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>VerticalAlignment<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br208749)</ept> for the presenter and that alignment applies to the data items when presented in the items control.","pos":[5508,5944]},{"content":"Alignment properties are only relevant for cases when there's extra space available in a dimension of the parent layout container.","pos":[5946,6076]},{"content":"If a layout container is already clipping content, alignment can affect the area of the element where the clipping will apply.","pos":[6077,6203]},{"content":"For example, if you set <ph id=\"ph1\">`HorizontalAlignment=\"Left\"`</ph>, the right size of the element gets clipped.","pos":[6204,6301]},{"content":"Margin","pos":[6306,6312]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Margin<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208724)</ept> property describes the distance between an element and its peers in a layout situation, and also the distance between an element and the content area of a container that contains the element.","pos":[6314,6580]},{"content":"If you think of elements as bounding boxes or rectangles where the dimensions are the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ActualHeight<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ActualWidth<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept>, the <bpt id=\"p5\">**</bpt>Margin<ept id=\"p5\">**</ept> layout applies to the outside of that rectangle and does not add pixels to the <bpt id=\"p6\">**</bpt>ActualHeight<ept id=\"p6\">**</ept> and <bpt id=\"p7\">**</bpt>ActualWidth<ept id=\"p7\">**</ept>.","pos":[6581,6956]},{"content":"The margin is also not considered part of the element for purposes of hit testing and sourcing input events.","pos":[6957,7065]},{"content":"In general layout behavior, components of a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Margin<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208724)</ept> value are constrained last, and are constrained only after <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Height<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Width<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> are already constrained all the way to 0.","pos":[7067,7427]},{"content":"So, be careful with margins when the container is already clipping or constraining the element; otherwise, your margin could be the cause of an element not appearing to render (because one of its dimensions has been constrained to 0 after the margin was applied).","pos":[7428,7691]},{"content":"Margin values can be uniform, by using syntax like <ph id=\"ph1\">`Margin=\"20\"`</ph>.","pos":[7693,7758]},{"content":"With this syntax, a uniform margin of 20 pixels would be applied to the element, with a 20-pixel margin on the left, top, right, and bottom sides.","pos":[7759,7905]},{"content":"Margin values can also take the form of four distinct values, each value describing a distinct margin to apply to the left, top, right, and bottom (in that order).","pos":[7906,8069]},{"content":"For example, <ph id=\"ph1\">`Margin=\"0,10,5,25\"`</ph>.","pos":[8070,8104]},{"content":"The underlying type for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Margin<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208724)</ept> property is a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Thickness<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208864)</ept> structure, which has properties that hold the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Left<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/hh673893)</ept>, <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>Top<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/hh673840)</ept>, <bpt id=\"p9\">[</bpt><bpt id=\"p10\">**</bpt>Right<ept id=\"p10\">**</ept><ept id=\"p9\">](https://msdn.microsoft.com/library/windows/apps/hh673881)</ept>, and <bpt id=\"p11\">[</bpt><bpt id=\"p12\">**</bpt>Bottom<ept id=\"p12\">**</ept><ept id=\"p11\">](https://msdn.microsoft.com/library/windows/apps/hh673775)</ept> values as separate <bpt id=\"p13\">**</bpt>Double<ept id=\"p13\">**</ept> values.","pos":[8105,8660]},{"content":"Margins are additive.","pos":[8662,8683]},{"content":"For example, if two elements each specify a uniform margin of 10 pixels and they are adjacent peers in any orientation, the distance between the elements is 20 pixels.","pos":[8684,8851]},{"content":"Negative margins are permitted.","pos":[8853,8884]},{"content":"However, using a negative margin can often cause clipping, or overdraws of peers, so it's not a common technique to use negative margins.","pos":[8885,9022]},{"content":"Proper use of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Margin<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208724)</ept> property enables very fine control of an element's rendering position and the rendering position of its neighbor elements and children.","pos":[9024,9248]},{"content":"When you use element dragging to position elements within the XAML designer in Visual Studio, you'll see that the modified XAML typically has values for <bpt id=\"p1\">**</bpt>Margin<ept id=\"p1\">**</ept> of that element that were used to serialize your positioning changes back into the XAML.","pos":[9249,9501]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Block<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244379)</ept> class, which is a base class for <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Paragraph<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br244503)</ept>, also has a <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Margin<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/jj191725)</ept> property.","pos":[9503,9776]},{"content":"It has an analogous effect on how that <bpt id=\"p1\">**</bpt>Paragraph<ept id=\"p1\">**</ept> is positioned within its parent container, which is typically a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>RichTextBlock<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br227565)</ept> or <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>RichEditBox<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br227548)</ept> object, and also how more than one paragraph is positioned relative to other <bpt id=\"p6\">**</bpt>Block<ept id=\"p6\">**</ept> peers from the <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>RichTextBlock.Blocks<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/br244347)</ept> collection.","pos":[9777,10249]},{"content":"Padding","pos":[10254,10261]},{"content":"A <bpt id=\"p1\">**</bpt>Padding<ept id=\"p1\">**</ept> property describes the distance between an element and any child elements or content that it contains.","pos":[10263,10379]},{"content":"Content is treated as a single bounding box that encloses all the content, if it's an element that permits more than one child.","pos":[10380,10507]},{"content":"For example, if there's an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemsControl<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242803)</ept> that contains two items, the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Padding<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209459)</ept> is applied around the bounding box that contains the items.","pos":[10508,10772]},{"content":"<bpt id=\"p1\">**</bpt>Padding<ept id=\"p1\">**</ept> subtracts from the available size when it comes to the measure and arrange pass calculations for that container and are part of the desired size values when the container itself goes through the layout pass for whatever contains it.","pos":[10773,11017]},{"content":"Unlike <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Margin<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208724)</ept>, <bpt id=\"p3\">**</bpt>Padding<ept id=\"p3\">**</ept> is not a property of <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>FrameworkElement<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>, and in fact there are several classes which each define their own <bpt id=\"p6\">**</bpt>Padding<ept id=\"p6\">**</ept> property:","pos":[11018,11299]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Control.Padding<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209459)</ept>: inherits to all <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Control<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209390)</ept> derived classes.","pos":[11305,11490]},{"content":"Not all controls have content, so for some controls (for example <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AppBarSeparator<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn279268)</ept>) setting the property does nothing.","pos":[11491,11671]},{"content":"If the control has a border (see <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Control.BorderThickness<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209399)</ept>), the padding applies inside that border.","pos":[11672,11834]},{"pos":[11839,12213],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Border.Padding<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209263)</ept>: defines space between the rectangle line created by <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BorderThickness<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209256)</ept><ph id=\"ph1\">/</ph><bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>BorderBrush<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br209254)</ept> and the <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>Child<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/br209258)</ept> element."},{"pos":[12218,12432],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemsPresenter.Padding<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh968021)</ept>: contributes to appearance of the generated visuals for items in item controls, placing the specified padding around each item."},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock.Padding<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209673)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>RichTextBlock.Padding<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227596)</ept>: expands the bounding box around the text of the text element.","pos":[12437,12671]},{"content":"These text elements don't have a <bpt id=\"p1\">**</bpt>Background<ept id=\"p1\">**</ept>, so it can be visually difficult to see what's the text's padding versus other layout behavior applied by the text element's container.","pos":[12672,12855]},{"content":"For that reason, text element padding is seldom used and it's more typical to use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Margin<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/jj191725)</ept> settings on contained <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Block<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br244379)</ept> containers (for the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>RichTextBlock<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br227565)</ept> case).","pos":[12856,13205]},{"content":"In each of these cases, the same element also has a <bpt id=\"p1\">**</bpt>Margin<ept id=\"p1\">**</ept> property.","pos":[13207,13279]},{"content":"If both margin and padding are applied, they are additive in the sense that the apparent distance between an outer container and any inner content will be margin plus padding.","pos":[13280,13455]},{"content":"If there are different background values applied to content, element or container, the point at which margin ends and padding begins is potentially visible in the rendering.","pos":[13456,13629]},{"content":"Dimensions (Height, Width)","pos":[13634,13660]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Height<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Width<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept> properties of a <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>FrameworkElement<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> often influence how the alignment, margin, and padding properties behave when a layout pass happens.","pos":[13662,14008]},{"content":"In particular, real-number <bpt id=\"p1\">**</bpt>Height<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Width<ept id=\"p2\">**</ept> value cancels <bpt id=\"p3\">**</bpt>Stretch<ept id=\"p3\">**</ept> alignments, and is also promoted as a possible component of the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>DesiredSize<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br208921)</ept> value that's established during the measure pass of the layout.","pos":[14009,14290]},{"content":"<bpt id=\"p1\">**</bpt>Height<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Width<ept id=\"p2\">**</ept> have constraint properties: the <bpt id=\"p3\">**</bpt>Height<ept id=\"p3\">**</ept> value can be constrained with <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>MinHeight<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br208731)</ept> and <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>MaxHeight<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br208726)</ept>, the <bpt id=\"p8\">**</bpt>Width<ept id=\"p8\">**</ept> value can be constrained with <bpt id=\"p9\">[</bpt><bpt id=\"p10\">**</bpt>MinWidth<ept id=\"p10\">**</ept><ept id=\"p9\">](https://msdn.microsoft.com/library/windows/apps/br208733)</ept> and <bpt id=\"p11\">[</bpt><bpt id=\"p12\">**</bpt>MaxWidth<ept id=\"p12\">**</ept><ept id=\"p11\">](https://msdn.microsoft.com/library/windows/apps/br208728)</ept>.","pos":[14291,14736]},{"content":"Also, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ActualWidth<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ActualHeight<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> are calculated, read-only properties that only contain valid values after a layout pass has completed.","pos":[14737,15002]},{"content":"For more info about how the dimensions and constraints or calculated properties interrelate, see Remarks in <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FrameworkElement.Height<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208718)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>FrameworkElement.Width<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept>.","pos":[15003,15290]},{"content":"Related topics","pos":[15295,15309]},{"content":"Reference","pos":[15313,15322]},{"content":"FrameworkElement.Height","pos":[15329,15352]},{"content":"FrameworkElement.Width","pos":[15418,15440]},{"content":"FrameworkElement.HorizontalAlignment","pos":[15506,15542]},{"content":"FrameworkElement.VerticalAlignment","pos":[15608,15642]},{"content":"FrameworkElement.Margin","pos":[15708,15731]},{"content":"Control.Padding","pos":[15797,15812]}],"content":"---\nauthor: Jwmsft\nDescription: Use alignment, margin, and padding to influence the layout of elements on a page.\ntitle: Alignment, margin, and padding for Universal Windows Platform (UWP) apps\nms.assetid: 9412ABD4-3674-4865-B07D-64C7C26E4842\nlabel: Alignment, margin, and padding\ntemplate: detail.hbs\n---\n# Alignment, margin, and padding\n\nIn addition to dimension properties (width, height, and constraints) elements can also have alignment, margin, and padding properties that influence the layout behavior when an element goes through a layout pass and is rendered in a UI. There are relationships between alignment, margin, padding and dimension properties that have a typical logic flow when a [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/br208706) object is positioned, such that values are sometimes used and sometimes ignored depending on the circumstances.\n\n## Alignment properties\n\nThe [**HorizontalAlignment**](https://msdn.microsoft.com/library/windows/apps/br208720) and [**VerticalAlignment**](https://msdn.microsoft.com/library/windows/apps/br208749) properties describe how a child element should be positioned within a parent element's allocated layout space. By using these properties together, layout logic for a container can position child elements within the container (either a panel or a control). Alignment properties are intended to hint the desired layout to an adaptive layout container, so basically they're set on [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/br208706) children and interpreted by another **FrameworkElement** container parent. Alignment values can specify whether elements align to one of the two edges of an orientation, or to the center. However, the default value for both alignment properties is **Stretch**. With **Stretch** alignment, elements fill the space they're provided in layout. **Stretch** is the default so that it's easier to use adaptive layout techniques in the cases where there is no explicit measurement or no [**DesiredSize**](https://msdn.microsoft.com/library/windows/apps/br208921) value that came from the measure pass of layout. With this default, there's no risk of an explicit height/width not fitting within the container and being clipped until you size each container.\n\n> **Note**&nbsp;&nbsp;As a general layout principle, it's best to only apply measurements to certain key elements and use the adaptive layout behavior for the other elements. This provides flexible layout behavior for when the user sizes the top app window, which typically is possible to do at any time.\n\n \nIf there are either [**Height**](https://msdn.microsoft.com/library/windows/apps/br208718) and [**Width**](https://msdn.microsoft.com/library/windows/apps/br208751) values or clipping within an adaptive container, even if **Stretch** is set as an alignment value, the layout is controlled by the behavior of its container. In panels, a **Stretch** value that's been obviated by **Height** and **Width** acts as if the value is **Center**.\n\nIf there are no natural or calculated height and width values, these dimension values are mathematically **NaN** (Not A Number). The elements are waiting for their layout container to give them dimensions. After layout is run, there will be values for [**ActualHeight**](https://msdn.microsoft.com/library/windows/apps/br208707) and [**ActualWidth**](https://msdn.microsoft.com/library/windows/apps/br208709) properties for elements where a **Stretch** alignment was used. The **NaN** values remain in [**Height**](https://msdn.microsoft.com/library/windows/apps/br208718) and [**Width**](https://msdn.microsoft.com/library/windows/apps/br208751) for the child elements so that the adaptive behavior can run again, for example, if layout-related changes such as app window sizing causes another layout cycle.\n\nText elements such as [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) don't usually have an explicitly declared width, but they do have a calculated width that you can query with [**ActualWidth**](https://msdn.microsoft.com/library/windows/apps/br208709), and that width also cancels out a **Stretch** alignment. (The [**FontSize**](https://msdn.microsoft.com/library/windows/apps/br209657) property and other text properties, as well as the text itself, are already hinting the intended layout size. You don't typically want your text to be stretched.) Text used as content within a control has the same effect; the presence of text that needs presenting causes an **ActualWidth** to be calculated, and this also commutes a desired width and size to the containing control. Text elements also have an [**ActualHeight**](https://msdn.microsoft.com/library/windows/apps/br208707) based on font size per line, line breaks, and other text properties.\n\nA panel such as [**Grid**](https://msdn.microsoft.com/library/windows/apps/br242704) already has other logic for layout (row and column definitions, and attached properties such as [**Grid.Row**](https://msdn.microsoft.com/library/windows/apps/hh759795) set on elements to indicate which cell to be drawn in). In that case, the alignment properties influence how the content is aligned within the area of that cell, but the cell structure and sizing is controlled by settings on the **Grid**.\n\nItem controls sometimes display items where the base types of the items are data. This involves an [**ItemsPresenter**](https://msdn.microsoft.com/library/windows/apps/br242843). Although the data itself is not a [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/br208706) derived type, **ItemsPresenter** is, so you can set [**HorizontalAlignment**](https://msdn.microsoft.com/library/windows/apps/br208720) and [**VerticalAlignment**](https://msdn.microsoft.com/library/windows/apps/br208749) for the presenter and that alignment applies to the data items when presented in the items control.\n\nAlignment properties are only relevant for cases when there's extra space available in a dimension of the parent layout container. If a layout container is already clipping content, alignment can affect the area of the element where the clipping will apply. For example, if you set `HorizontalAlignment=\"Left\"`, the right size of the element gets clipped.\n\n## Margin\n\nThe [**Margin**](https://msdn.microsoft.com/library/windows/apps/br208724) property describes the distance between an element and its peers in a layout situation, and also the distance between an element and the content area of a container that contains the element. If you think of elements as bounding boxes or rectangles where the dimensions are the [**ActualHeight**](https://msdn.microsoft.com/library/windows/apps/br208707) and [**ActualWidth**](https://msdn.microsoft.com/library/windows/apps/br208709), the **Margin** layout applies to the outside of that rectangle and does not add pixels to the **ActualHeight** and **ActualWidth**. The margin is also not considered part of the element for purposes of hit testing and sourcing input events.\n\nIn general layout behavior, components of a [**Margin**](https://msdn.microsoft.com/library/windows/apps/br208724) value are constrained last, and are constrained only after [**Height**](https://msdn.microsoft.com/library/windows/apps/br208718) and [**Width**](https://msdn.microsoft.com/library/windows/apps/br208751) are already constrained all the way to 0. So, be careful with margins when the container is already clipping or constraining the element; otherwise, your margin could be the cause of an element not appearing to render (because one of its dimensions has been constrained to 0 after the margin was applied).\n\nMargin values can be uniform, by using syntax like `Margin=\"20\"`. With this syntax, a uniform margin of 20 pixels would be applied to the element, with a 20-pixel margin on the left, top, right, and bottom sides. Margin values can also take the form of four distinct values, each value describing a distinct margin to apply to the left, top, right, and bottom (in that order). For example, `Margin=\"0,10,5,25\"`. The underlying type for the [**Margin**](https://msdn.microsoft.com/library/windows/apps/br208724) property is a [**Thickness**](https://msdn.microsoft.com/library/windows/apps/br208864) structure, which has properties that hold the [**Left**](https://msdn.microsoft.com/library/windows/apps/hh673893), [**Top**](https://msdn.microsoft.com/library/windows/apps/hh673840), [**Right**](https://msdn.microsoft.com/library/windows/apps/hh673881), and [**Bottom**](https://msdn.microsoft.com/library/windows/apps/hh673775) values as separate **Double** values.\n\nMargins are additive. For example, if two elements each specify a uniform margin of 10 pixels and they are adjacent peers in any orientation, the distance between the elements is 20 pixels.\n\nNegative margins are permitted. However, using a negative margin can often cause clipping, or overdraws of peers, so it's not a common technique to use negative margins.\n\nProper use of the [**Margin**](https://msdn.microsoft.com/library/windows/apps/br208724) property enables very fine control of an element's rendering position and the rendering position of its neighbor elements and children. When you use element dragging to position elements within the XAML designer in Visual Studio, you'll see that the modified XAML typically has values for **Margin** of that element that were used to serialize your positioning changes back into the XAML.\n\nThe [**Block**](https://msdn.microsoft.com/library/windows/apps/br244379) class, which is a base class for [**Paragraph**](https://msdn.microsoft.com/library/windows/apps/br244503), also has a [**Margin**](https://msdn.microsoft.com/library/windows/apps/jj191725) property. It has an analogous effect on how that **Paragraph** is positioned within its parent container, which is typically a [**RichTextBlock**](https://msdn.microsoft.com/library/windows/apps/br227565) or [**RichEditBox**](https://msdn.microsoft.com/library/windows/apps/br227548) object, and also how more than one paragraph is positioned relative to other **Block** peers from the [**RichTextBlock.Blocks**](https://msdn.microsoft.com/library/windows/apps/br244347) collection.\n\n## Padding\n\nA **Padding** property describes the distance between an element and any child elements or content that it contains. Content is treated as a single bounding box that encloses all the content, if it's an element that permits more than one child. For example, if there's an [**ItemsControl**](https://msdn.microsoft.com/library/windows/apps/br242803) that contains two items, the [**Padding**](https://msdn.microsoft.com/library/windows/apps/br209459) is applied around the bounding box that contains the items. **Padding** subtracts from the available size when it comes to the measure and arrange pass calculations for that container and are part of the desired size values when the container itself goes through the layout pass for whatever contains it. Unlike [**Margin**](https://msdn.microsoft.com/library/windows/apps/br208724), **Padding** is not a property of [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/br208706), and in fact there are several classes which each define their own **Padding** property:\n\n-   [**Control.Padding**](https://msdn.microsoft.com/library/windows/apps/br209459): inherits to all [**Control**](https://msdn.microsoft.com/library/windows/apps/br209390) derived classes. Not all controls have content, so for some controls (for example [**AppBarSeparator**](https://msdn.microsoft.com/library/windows/apps/dn279268)) setting the property does nothing. If the control has a border (see [**Control.BorderThickness**](https://msdn.microsoft.com/library/windows/apps/br209399)), the padding applies inside that border.\n-   [**Border.Padding**](https://msdn.microsoft.com/library/windows/apps/br209263): defines space between the rectangle line created by [**BorderThickness**](https://msdn.microsoft.com/library/windows/apps/br209256)/[**BorderBrush**](https://msdn.microsoft.com/library/windows/apps/br209254) and the [**Child**](https://msdn.microsoft.com/library/windows/apps/br209258) element.\n-   [**ItemsPresenter.Padding**](https://msdn.microsoft.com/library/windows/apps/hh968021): contributes to appearance of the generated visuals for items in item controls, placing the specified padding around each item.\n-   [**TextBlock.Padding**](https://msdn.microsoft.com/library/windows/apps/br209673) and [**RichTextBlock.Padding**](https://msdn.microsoft.com/library/windows/apps/br227596): expands the bounding box around the text of the text element. These text elements don't have a **Background**, so it can be visually difficult to see what's the text's padding versus other layout behavior applied by the text element's container. For that reason, text element padding is seldom used and it's more typical to use [**Margin**](https://msdn.microsoft.com/library/windows/apps/jj191725) settings on contained [**Block**](https://msdn.microsoft.com/library/windows/apps/br244379) containers (for the [**RichTextBlock**](https://msdn.microsoft.com/library/windows/apps/br227565) case).\n\nIn each of these cases, the same element also has a **Margin** property. If both margin and padding are applied, they are additive in the sense that the apparent distance between an outer container and any inner content will be margin plus padding. If there are different background values applied to content, element or container, the point at which margin ends and padding begins is potentially visible in the rendering.\n\n## Dimensions (Height, Width)\n\nThe [**Height**](https://msdn.microsoft.com/library/windows/apps/br208718) and [**Width**](https://msdn.microsoft.com/library/windows/apps/br208751) properties of a [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/br208706) often influence how the alignment, margin, and padding properties behave when a layout pass happens. In particular, real-number **Height** and **Width** value cancels **Stretch** alignments, and is also promoted as a possible component of the [**DesiredSize**](https://msdn.microsoft.com/library/windows/apps/br208921) value that's established during the measure pass of the layout. **Height** and **Width** have constraint properties: the **Height** value can be constrained with [**MinHeight**](https://msdn.microsoft.com/library/windows/apps/br208731) and [**MaxHeight**](https://msdn.microsoft.com/library/windows/apps/br208726), the **Width** value can be constrained with [**MinWidth**](https://msdn.microsoft.com/library/windows/apps/br208733) and [**MaxWidth**](https://msdn.microsoft.com/library/windows/apps/br208728). Also, [**ActualWidth**](https://msdn.microsoft.com/library/windows/apps/br208709) and [**ActualHeight**](https://msdn.microsoft.com/library/windows/apps/br208707) are calculated, read-only properties that only contain valid values after a layout pass has completed. For more info about how the dimensions and constraints or calculated properties interrelate, see Remarks in [**FrameworkElement.Height**](https://msdn.microsoft.com/library/windows/apps/br208718) and [**FrameworkElement.Width**](https://msdn.microsoft.com/library/windows/apps/br208751).\n\n## Related topics\n\n**Reference**\n\n[**FrameworkElement.Height**](https://msdn.microsoft.com/library/windows/apps/br208718)\n\n[**FrameworkElement.Width**](https://msdn.microsoft.com/library/windows/apps/br208751)\n\n[**FrameworkElement.HorizontalAlignment**](https://msdn.microsoft.com/library/windows/apps/br208720)\n\n[**FrameworkElement.VerticalAlignment**](https://msdn.microsoft.com/library/windows/apps/br208749)\n\n[**FrameworkElement.Margin**](https://msdn.microsoft.com/library/windows/apps/br208724)\n\n[**Control.Padding**](https://msdn.microsoft.com/library/windows/apps/br209459)\n"}