{"nodes":[{"content":"Get battery information","pos":[77,100]},{"content":"Learn how to get detailed battery information using APIs in the Windows.Devices.Power namespace.","pos":[114,210]},{"content":"Get battery information","pos":[217,240]},{"content":"Updated for UWP apps on Windows 10.","pos":[245,280]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[281,373]},{"content":"Important APIs","pos":[381,395]},{"content":"Windows.Devices.Power","pos":[407,428]},{"content":"DeviceInformation.FindAllAsync","pos":[497,527]},{"content":"Learn how to get detailed battery information using APIs in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Power<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn895017)</ept> namespace.","pos":[590,750]},{"content":"A <bpt id=\"p1\">*</bpt>battery report<ept id=\"p1\">*</ept> (<bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>BatteryReport<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Dn895005)</ept>) describes the charge, capacity, and status of a battery or aggregate of batteries.","pos":[751,932]},{"content":"This topic demonstrates how your app can get battery reports and be notified of changes.","pos":[933,1021]},{"content":"Code examples are from the basic battery app that's listed at the end of this topic.","pos":[1022,1106]},{"content":"Get aggregate battery report","pos":[1111,1139]},{"content":"Some devices have more than one battery and it's not always obvious how each battery contributes to the overall energy capacity of the device.","pos":[1142,1284]},{"content":"This is where the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AggregateBattery<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn895011)</ept> class comes in.","pos":[1285,1399]},{"content":"The <bpt id=\"p1\">*</bpt>aggregate battery<ept id=\"p1\">*</ept> represents all battery controllers connected to the device and can provide a single overall <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>BatteryReport<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Dn895005)</ept> object.","pos":[1400,1601]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  A <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Battery<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Dn895004)</ept> class actually corresponds to a battery controller.","pos":[1603,1738]},{"content":"Depending on the device, sometimes the controller is attached to the physical battery and sometimes it's attached to the device enclosure.","pos":[1739,1877]},{"content":"Thus, it's possible to create a battery object even when no batteries are present.","pos":[1878,1960]},{"content":"Other times, the battery object may be <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","pos":[1961,2009]},{"pos":[2011,2267],"content":"Once you have an aggregate battery object, call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetReport<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.battery.getreport)</ept> to get the corresponding <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BatteryReport<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Dn895005)</ept>."},{"content":"Get individual battery reports","pos":[2566,2596]},{"content":"You can also create a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BatteryReport<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn895005)</ept> object for individual batteries.","pos":[2598,2730]},{"content":"Use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetDeviceSelector<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.battery.getdeviceselector.aspx)</ept> with the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>FindAllAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR225432)</ept> method to obtain a collection of <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>DeviceInformation<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/BR225393)</ept> objects that represent any battery controllers that are connected to the device.","pos":[2731,3148]},{"content":"Then, using the <bpt id=\"p1\">**</bpt>Id<ept id=\"p1\">**</ept> property of the desired <bpt id=\"p2\">**</bpt>DeviceInformation<ept id=\"p2\">**</ept> object, create a corresponding <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Battery<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Dn895004)</ept> with the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>FromIdAsync<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.battery.fromidasync.aspx)</ept> method.","pos":[3149,3457]},{"content":"Finally, call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetReport<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.battery.getreport)</ept> to get the individual battery report.","pos":[3458,3614]},{"content":"This example shows how to create a battery report for all batteries connected to the device.","pos":[3616,3708]},{"content":"Access report details","pos":[4297,4318]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BatteryReport<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn895005)</ept> object provides a lot of battery information.","pos":[4320,4447]},{"content":"For more info, see the API reference for its properties: <bpt id=\"p1\">**</bpt>Status<ept id=\"p1\">**</ept> (a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>BatteryStatus<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Dn818458)</ept> enumeration), <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>ChargeRateInMilliwatts<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.batteryreport.chargerateinmilliwatts.aspx)</ept>, <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>DesignCapacityInMilliwattHours<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.batteryreport.designcapacityinmilliwatthours.aspx)</ept>, <bpt id=\"p8\">[</bpt><bpt id=\"p9\">**</bpt>FullChargeCapacityInMilliwattHours<ept id=\"p9\">**</ept><ept id=\"p8\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.batteryreport.fullchargecapacityinmilliwatthours.aspx)</ept>, and <bpt id=\"p10\">[</bpt><bpt id=\"p11\">**</bpt>RemainingCapacityInMilliwattHours<ept id=\"p11\">**</ept><ept id=\"p10\">](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.batteryreport.remainingcapacityinmilliwatthours)</ept>.","pos":[4448,5261]},{"content":"This example shows some of the battery report properties used by the basic battery app, that's provided later in this topic.","pos":[5262,5386]},{"content":"Request report updates","pos":[5923,5945]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Battery<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn895004)</ept> object triggers the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ReportUpdated<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.battery.reportupdated)</ept> event when charge, capacity, or status of the battery changes.","pos":[5947,6218]},{"content":"This typically happens immediately for status changes and periodically for all other changes.","pos":[6219,6312]},{"content":"This example shows how to register for battery report updates.","pos":[6313,6375]},{"content":"Handle report updates","pos":[6477,6498]},{"content":"When a battery update occurs, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ReportUpdated<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.battery.reportupdated)</ept> event passes the corresponding <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Battery<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Dn895004)</ept> object to the event handler method.","pos":[6500,6785]},{"content":"However, this event handler is not called from the UI thread.","pos":[6786,6847]},{"content":"You'll need to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Dispatcher<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208211)</ept> object to invoke any UI changes, as shown in this example.","pos":[6848,7004]},{"content":"Example: basic battery app","pos":[7642,7668]},{"content":"Test out these APIs by building the following basic battery app in Microsoft Visual Studio.","pos":[7670,7761]},{"content":"From the Visual Studio start page, click <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept>, and then under the <bpt id=\"p2\">**</bpt>Visual C# <ph id=\"ph1\">&amp;gt;</ph> Windows <ph id=\"ph2\">&amp;gt;</ph> Universal<ept id=\"p2\">**</ept> templates, create a new app using the <bpt id=\"p3\">**</bpt>Blank App<ept id=\"p3\">**</ept> template.","pos":[7762,7942]},{"pos":[7944,8058],"content":"Next, open the file <bpt id=\"p1\">**</bpt>MainPage.xaml<ept id=\"p1\">**</ept> and copy the following XML into this file (replacing its original contents)."},{"content":"If your app isn't named <bpt id=\"p1\">**</bpt>App1<ept id=\"p1\">**</ept>, you'll need to replace the first part of the class name in the previous snippet with the namespace of your app.","pos":[9170,9315]},{"content":"For example, if you created a project named <bpt id=\"p1\">**</bpt>BasicBatteryApp<ept id=\"p1\">**</ept>, you'd replace <ph id=\"ph1\">`x:Class=\"App1.MainPage\"`</ph> with <ph id=\"ph2\">`x:Class=\"BasicBatteryApp.MainPage\"`</ph>.","pos":[9316,9463]},{"content":"You should also replace <ph id=\"ph1\">`xmlns:local=\"using:App1\"`</ph> with <ph id=\"ph2\">`xmlns:local=\"using:BasicBatteryApp\"`</ph>.","pos":[9464,9558]},{"pos":[9560,9661],"content":"Next, open your project's <bpt id=\"p1\">**</bpt>MainPage.xaml.cs<ept id=\"p1\">**</ept> file and replace the existing code with the following."},{"content":"If your app isn't named <bpt id=\"p1\">**</bpt>App1<ept id=\"p1\">**</ept>, you'll need to rename the namespace in the previous example with the name you gave your project.","pos":[15503,15633]},{"content":"For example, if you created a project named <bpt id=\"p1\">**</bpt>BasicBatteryApp<ept id=\"p1\">**</ept>, you'd replace namespace <ph id=\"ph1\">`App1`</ph> with namespace <ph id=\"ph2\">`BasicBatteryApp`</ph>.","pos":[15634,15763]},{"pos":[15765,15875],"content":"Finally, to run this basic battery app: on the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Start Debugging<ept id=\"p2\">**</ept> to test the solution."},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  To receive numeric values from the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>BatteryReport<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Dn895005)</ept> object, debug your app on the <bpt id=\"p4\">**</bpt>Local Machine<ept id=\"p4\">**</ept> or an external <bpt id=\"p5\">**</bpt>Device<ept id=\"p5\">**</ept> (such as a Windows Phone).","pos":[15877,16099]},{"content":"When debugging on a device emulator, the <bpt id=\"p1\">**</bpt>BatteryReport<ept id=\"p1\">**</ept> object returns <bpt id=\"p2\">**</bpt>null<ept id=\"p2\">**</ept> to the capacity and rate properties.","pos":[16100,16219]}],"content":"---\nauthor: DBirtolo\nms.assetid: 90BB59FC-90FE-453E-A8DE-9315E29EB98C\ntitle: Get battery information\ndescription: Learn how to get detailed battery information using APIs in the Windows.Devices.Power namespace.\n---\n# Get battery information\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n** Important APIs **\n\n-   [**Windows.Devices.Power**](https://msdn.microsoft.com/library/windows/apps/Dn895017)\n-   [**DeviceInformation.FindAllAsync**](https://msdn.microsoft.com/library/windows/apps/BR225432)\n\nLearn how to get detailed battery information using APIs in the [**Windows.Devices.Power**](https://msdn.microsoft.com/library/windows/apps/Dn895017) namespace. A *battery report* ([**BatteryReport**](https://msdn.microsoft.com/library/windows/apps/Dn895005)) describes the charge, capacity, and status of a battery or aggregate of batteries. This topic demonstrates how your app can get battery reports and be notified of changes. Code examples are from the basic battery app that's listed at the end of this topic.\n\n## Get aggregate battery report\n\n\nSome devices have more than one battery and it's not always obvious how each battery contributes to the overall energy capacity of the device. This is where the [**AggregateBattery**](https://msdn.microsoft.com/library/windows/apps/Dn895011) class comes in. The *aggregate battery* represents all battery controllers connected to the device and can provide a single overall [**BatteryReport**](https://msdn.microsoft.com/library/windows/apps/Dn895005) object.\n\n**Note**  A [**Battery**](https://msdn.microsoft.com/library/windows/apps/Dn895004) class actually corresponds to a battery controller. Depending on the device, sometimes the controller is attached to the physical battery and sometimes it's attached to the device enclosure. Thus, it's possible to create a battery object even when no batteries are present. Other times, the battery object may be **null**.\n\nOnce you have an aggregate battery object, call [**GetReport**](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.battery.getreport) to get the corresponding [**BatteryReport**](https://msdn.microsoft.com/library/windows/apps/Dn895005).\n\n```csharp\nprivate void RequestAggregateBatteryReport()\n{\n    // Create aggregate battery object\n    var aggBattery = Battery.AggregateBattery;\n\n    // Get report\n    var report = aggBattery.GetReport();\n\n    // Update UI\n    AddReportUI(BatteryReportPanel, report, aggBattery.DeviceId);\n}\n```\n\n## Get individual battery reports\n\nYou can also create a [**BatteryReport**](https://msdn.microsoft.com/library/windows/apps/Dn895005) object for individual batteries. Use [**GetDeviceSelector**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.battery.getdeviceselector.aspx) with the [**FindAllAsync**](https://msdn.microsoft.com/library/windows/apps/BR225432) method to obtain a collection of [**DeviceInformation**](https://msdn.microsoft.com/library/windows/apps/BR225393) objects that represent any battery controllers that are connected to the device. Then, using the **Id** property of the desired **DeviceInformation** object, create a corresponding [**Battery**](https://msdn.microsoft.com/library/windows/apps/Dn895004) with the [**FromIdAsync**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.battery.fromidasync.aspx) method. Finally, call [**GetReport**](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.battery.getreport) to get the individual battery report.\n\nThis example shows how to create a battery report for all batteries connected to the device.\n\n```csharp\nasync private void RequestIndividualBatteryReports()\n{\n    // Find batteries \n    var deviceInfo = await DeviceInformation.FindAllAsync(Battery.GetDeviceSelector());\n    foreach(DeviceInformation device in deviceInfo)\n    {\n        try\n        {\n        // Create battery object\n        var battery = await Battery.FromIdAsync(device.Id);\n\n        // Get report\n        var report = battery.GetReport();\n\n        // Update UI\n        AddReportUI(BatteryReportPanel, report, battery.DeviceId);\n        }\n        catch { /* Add error handling, as applicable */ }\n    }\n}\n```\n\n## Access report details\n\nThe [**BatteryReport**](https://msdn.microsoft.com/library/windows/apps/Dn895005) object provides a lot of battery information. For more info, see the API reference for its properties: **Status** (a [**BatteryStatus**](https://msdn.microsoft.com/library/windows/apps/Dn818458) enumeration), [**ChargeRateInMilliwatts**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.batteryreport.chargerateinmilliwatts.aspx), [**DesignCapacityInMilliwattHours**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.batteryreport.designcapacityinmilliwatthours.aspx), [**FullChargeCapacityInMilliwattHours**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.power.batteryreport.fullchargecapacityinmilliwatthours.aspx), and [**RemainingCapacityInMilliwattHours**](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.batteryreport.remainingcapacityinmilliwatthours). This example shows some of the battery report properties used by the basic battery app, that's provided later in this topic.\n\n```csharp\n...\nTextBlock txt3 = new TextBlock { Text = \"Charge rate (mW): \" + report.ChargeRateInMilliwatts.ToString() };\nTextBlock txt4 = new TextBlock { Text = \"Design energy capacity (mWh): \" + report.DesignCapacityInMilliwattHours.ToString() };\nTextBlock txt5 = new TextBlock { Text = \"Fully-charged energy capacity (mWh): \" + report.FullChargeCapacityInMilliwattHours.ToString() };\nTextBlock txt6 = new TextBlock { Text = \"Remaining energy capacity (mWh): \" + report.RemainingCapacityInMilliwattHours.ToString() };\n...\n...\n```\n\n## Request report updates\n\nThe [**Battery**](https://msdn.microsoft.com/library/windows/apps/Dn895004) object triggers the [**ReportUpdated**](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.battery.reportupdated) event when charge, capacity, or status of the battery changes. This typically happens immediately for status changes and periodically for all other changes. This example shows how to register for battery report updates.\n\n```csharp\n...\nBattery.AggregateBattery.ReportUpdated += AggregateBattery_ReportUpdated;\n...\n```\n\n## Handle report updates\n\nWhen a battery update occurs, the [**ReportUpdated**](https://msdn.microsoft.com/library/windows/apps/windows.devices.power.battery.reportupdated) event passes the corresponding [**Battery**](https://msdn.microsoft.com/library/windows/apps/Dn895004) object to the event handler method. However, this event handler is not called from the UI thread. You'll need to use the [**Dispatcher**](https://msdn.microsoft.com/library/windows/apps/BR208211) object to invoke any UI changes, as shown in this example.\n\n```csharp\nasync private void AggregateBattery_ReportUpdated(Battery sender, object args)\n{\n    if (reportRequested)\n    {\n\n        await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n        {\n            // Clear UI\n            BatteryReportPanel.Children.Clear();\n\n\n            if (AggregateButton.IsChecked == true)\n            {\n                // Request aggregate battery report\n                RequestAggregateBatteryReport();\n            }\n            else\n            {\n                // Request individual battery report\n                RequestIndividualBatteryReports();\n            }\n        });\n    }\n}\n```\n\n## Example: basic battery app\n\nTest out these APIs by building the following basic battery app in Microsoft Visual Studio. From the Visual Studio start page, click **New Project**, and then under the **Visual C# &gt; Windows &gt; Universal** templates, create a new app using the **Blank App** template.\n\nNext, open the file **MainPage.xaml** and copy the following XML into this file (replacing its original contents).\n\n```xml\n<Page\n    x:Class=\"App1.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:App1\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\">\n\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\" >\n        <StackPanel VerticalAlignment=\"Center\" Margin=\"15,30,0,0\" >\n            <RadioButton x:Name=\"AggregateButton\" Content=\"Aggregate results\" GroupName=\"Type\" IsChecked=\"True\" />\n            <RadioButton x:Name=\"IndividualButton\" Content=\"Individual results\" GroupName=\"Type\" IsChecked=\"False\" />\n        </StackPanel>\n        <StackPanel Orientation=\"Horizontal\">\n        <Button x:Name=\"GetBatteryReportButton\" \n                Content=\"Get battery report\" \n                Margin=\"15,15,0,0\" \n                Click=\"GetBatteryReport\"/>\n        </StackPanel>\n        <StackPanel x:Name=\"BatteryReportPanel\" Margin=\"15,15,0,0\"/>\n    </StackPanel>\n</Page>\n```\n\nIf your app isn't named **App1**, you'll need to replace the first part of the class name in the previous snippet with the namespace of your app. For example, if you created a project named **BasicBatteryApp**, you'd replace `x:Class=\"App1.MainPage\"` with `x:Class=\"BasicBatteryApp.MainPage\"`. You should also replace `xmlns:local=\"using:App1\"` with `xmlns:local=\"using:BasicBatteryApp\"`.\n\nNext, open your project's **MainPage.xaml.cs** file and replace the existing code with the following.\n\n```csharp\nusing System;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Media;\nusing Windows.Devices.Enumeration;\nusing Windows.Devices.Power;\nusing Windows.UI.Core;\n\nnamespace App1\n{\n    public sealed partial class MainPage : Page\n    {\n        bool reportRequested = false;\n        public MainPage()\n        {\n            this.InitializeComponent();\n            Battery.AggregateBattery.ReportUpdated += AggregateBattery_ReportUpdated;\n        }\n\n\n        private void GetBatteryReport(object sender, RoutedEventArgs e)\n        {\n            // Clear UI\n            BatteryReportPanel.Children.Clear();\n\n\n            if (AggregateButton.IsChecked == true)\n            {\n                // Request aggregate battery report\n                RequestAggregateBatteryReport();\n            }\n            else\n            {\n                // Request individual battery report\n                RequestIndividualBatteryReports();\n            }\n\n            // Note request\n            reportRequested = true;\n        }\n\n        private void RequestAggregateBatteryReport()\n        {\n            // Create aggregate battery object\n            var aggBattery = Battery.AggregateBattery;\n\n            // Get report\n            var report = aggBattery.GetReport();\n\n            // Update UI\n            AddReportUI(BatteryReportPanel, report, aggBattery.DeviceId);\n        }\n\n        async private void RequestIndividualBatteryReports()\n        {\n            // Find batteries \n            var deviceInfo = await DeviceInformation.FindAllAsync(Battery.GetDeviceSelector());\n            foreach(DeviceInformation device in deviceInfo)\n            {\n                try\n                {\n                // Create battery object\n                var battery = await Battery.FromIdAsync(device.Id);\n\n                // Get report\n                var report = battery.GetReport();\n\n                // Update UI\n                AddReportUI(BatteryReportPanel, report, battery.DeviceId);\n                }\n                catch { /* Add error handling, as applicable */ }\n            }\n        }\n\n\n        private void AddReportUI(StackPanel sp, BatteryReport report, string DeviceID)\n        {\n            // Create battery report UI\n            TextBlock txt1 = new TextBlock { Text = \"Device ID: \" + DeviceID };\n            txt1.FontSize = 15;\n            txt1.Margin = new Thickness(0, 15, 0, 0);\n            txt1.TextWrapping = TextWrapping.WrapWholeWords;\n\n            TextBlock txt2 = new TextBlock { Text = \"Battery status: \" + report.Status.ToString() };\n            txt2.FontStyle = Windows.UI.Text.FontStyle.Italic;\n            txt2.Margin = new Thickness(0, 0, 0, 15);\n\n            TextBlock txt3 = new TextBlock { Text = \"Charge rate (mW): \" + report.ChargeRateInMilliwatts.ToString() };\n            TextBlock txt4 = new TextBlock { Text = \"Design energy capacity (mWh): \" + report.DesignCapacityInMilliwattHours.ToString() };\n            TextBlock txt5 = new TextBlock { Text = \"Fully-charged energy capacity (mWh): \" + report.FullChargeCapacityInMilliwattHours.ToString() };\n            TextBlock txt6 = new TextBlock { Text = \"Remaining energy capacity (mWh): \" + report.RemainingCapacityInMilliwattHours.ToString() };\n\n            // Create energy capacity progress bar & labels\n            TextBlock pbLabel = new TextBlock { Text = \"Percent remaining energy capacity\" };\n            pbLabel.Margin = new Thickness(0,10, 0, 5);\n            pbLabel.FontFamily = new FontFamily(\"Segoe UI\");\n            pbLabel.FontSize = 11;\n\n            ProgressBar pb = new ProgressBar();\n            pb.Margin = new Thickness(0, 5, 0, 0);\n            pb.Width = 200;\n            pb.Height = 10;\n            pb.IsIndeterminate = false;\n            pb.HorizontalAlignment = HorizontalAlignment.Left;\n\n            TextBlock pbPercent = new TextBlock();\n            pbPercent.Margin = new Thickness(0, 5, 0, 10);\n            pbPercent.FontFamily = new FontFamily(\"Segoe UI\");\n            pbLabel.FontSize = 11;\n\n            // Disable progress bar if values are null\n            if ((report.FullChargeCapacityInMilliwattHours == null)||\n                (report.RemainingCapacityInMilliwattHours == null))\n            {\n                pb.IsEnabled = false;\n                pbPercent.Text = \"N/A\";\n            }\n            else\n            {\n                pb.IsEnabled = true;\n                pb.Maximum = Convert.ToDouble(report.FullChargeCapacityInMilliwattHours);\n                pb.Value = Convert.ToDouble(report.RemainingCapacityInMilliwattHours);\n                pbPercent.Text = ((pb.Value / pb.Maximum) * 100).ToString(\"F2\") + \"%\";\n            }\n\n            // Add controls to stackpanel\n            sp.Children.Add(txt1);\n            sp.Children.Add(txt2);\n            sp.Children.Add(txt3);\n            sp.Children.Add(txt4);\n            sp.Children.Add(txt5);\n            sp.Children.Add(txt6);\n            sp.Children.Add(pbLabel);\n            sp.Children.Add(pb);\n            sp.Children.Add(pbPercent);\n        }\n\n        async private void AggregateBattery_ReportUpdated(Battery sender, object args)\n        {\n            if (reportRequested)\n            {\n\n                await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n                {\n                    // Clear UI\n                    BatteryReportPanel.Children.Clear();\n\n\n                    if (AggregateButton.IsChecked == true)\n                    {\n                        // Request aggregate battery report\n                        RequestAggregateBatteryReport();\n                    }\n                    else\n                    {\n                        // Request individual battery report\n                        RequestIndividualBatteryReports();\n                    }\n                });\n            }\n        }\n    }\n}\n```\n\nIf your app isn't named **App1**, you'll need to rename the namespace in the previous example with the name you gave your project. For example, if you created a project named **BasicBatteryApp**, you'd replace namespace `App1` with namespace `BasicBatteryApp`.\n\nFinally, to run this basic battery app: on the **Debug** menu, click **Start Debugging** to test the solution.\n\n**Tip**  To receive numeric values from the [**BatteryReport**](https://msdn.microsoft.com/library/windows/apps/Dn895005) object, debug your app on the **Local Machine** or an external **Device** (such as a Windows Phone). When debugging on a device emulator, the **BatteryReport** object returns **null** to the capacity and rate properties.\n\n \n\n"}