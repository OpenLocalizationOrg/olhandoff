{"nodes":[{"content":"You can use the PropertyPath class and the string syntax to instantiate a PropertyPath value either in XAML or in code.","pos":[32,151]},{"content":"Property-path syntax'","pos":[159,180]},{"content":"Property-path syntax","pos":[237,257]},{"content":"Updated for UWP apps on Windows 10.","pos":[262,297]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[298,390]},{"content":"You can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PropertyPath<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244259)</ept> class and the string syntax to instantiate a <bpt id=\"p3\">**</bpt>PropertyPath<ept id=\"p3\">**</ept> value either in XAML or in code.","pos":[395,582]},{"content":"<bpt id=\"p1\">**</bpt>PropertyPath<ept id=\"p1\">**</ept> values are used by data binding.","pos":[583,632]},{"content":"A similar syntax is used for targeting storyboarded animations.","pos":[633,696]},{"content":"But animation targeting doesn't create underlying Property-path syntax values, it keeps the info as a string.","pos":[697,806]},{"content":"For both scenarios, a property path describes a traversal of one or more object-property relationships that eventually resolve to a single property.","pos":[807,955]},{"content":"You can set a property path string directly to an attribute in XAML.","pos":[957,1025]},{"content":"You can use the same string syntax to construct a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PropertyPath<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244259)</ept> that sets a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Binding<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> in code, or to set an animation target in code using <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>SetTargetProperty<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br210503)</ept>.","pos":[1026,1372]},{"content":"There are two distinct feature areas in the Windows Runtime that use a property path: data binding, and animation targeting.","pos":[1373,1497]},{"content":"Animation targeting doesn't create underlying Property-path syntax values in the Windows Runtime implementation, it keeps the info as a string, but the concepts of object-property traversal are very similar.","pos":[1498,1705]},{"content":"Data binding and animation targeting each evaluate a property path slightly differently, so we describe property path syntax separately for each.","pos":[1706,1851]},{"content":"Property path for objects in data binding","pos":[1856,1897]},{"content":"In Windows Runtime, you can bind to the target value of any dependency property.","pos":[1899,1979]},{"content":"The source property value for a data binding doesn't have to be a dependency property; it can be a property on a business object (for example a class written in a Microsoft .NET language or C++).","pos":[1980,2175]},{"content":"Or, the source object for the binding value can be an existing dependency object already defined by the app.","pos":[2176,2284]},{"content":"The source can be referenced either by a simple property name, or by a traversal of the object-property relationships in the object graph of the business object.","pos":[2285,2446]},{"content":"You can bind to an individual property value, or you can bind to a target property that holds lists or collections.","pos":[2448,2563]},{"content":"If your source is a collection, or if the path specifies a collection property, the data-binding engine matches the collection items of the source to the binding target, resulting in behavior such as populating a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242868)</ept> with a list of items from a data source collection without needing to anticipate the specific items in that collection.","pos":[2564,2968]},{"content":"Traversing an object graph","pos":[2974,3000]},{"content":"The element of the syntax that denotes the traversal of an object-property relationship in an object graph is the dot (<bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>) character.","pos":[3002,3138]},{"content":"Each dot in a property path string indicates a division between an object (left side of the dot) and a property of that object (right side of the dot).","pos":[3139,3290]},{"content":"The string is evaluated left-to-right, which enables stepping through multiple object-property relationships.","pos":[3291,3400]},{"content":"Let's look at an example:","pos":[3401,3426]},{"content":"Here's how this path is evaluated:","pos":[3492,3526]},{"pos":[3532,3772],"content":"The data context object (or a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Source<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209832)</ept> specified by the same <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Binding<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept>) is searched for a property named \"Customer\"."},{"content":"The object that is the value of the \"Customer\" property is searched for a property named \"Address\".","pos":[3777,3876]},{"content":"The object that is the value of the \"Address\" property is searched for a property named \"StreetAddress1\".","pos":[3881,3986]},{"content":"At each of these steps, the value is treated as an object.","pos":[3988,4046]},{"content":"The type of the result is checked only when the binding is applied to a specific property.","pos":[4047,4137]},{"content":"This example would fail if \"Address\" were just a string value that didn't expose what part of the string was the street address.","pos":[4138,4266]},{"content":"Typically, the binding is pointing to the specific nested property values of a business object that has a known and deliberate information structure.","pos":[4267,4416]},{"content":"Rules for the properties in a data-binding property path","pos":[4422,4478]},{"content":"All properties referenced by a property path must be public in the source business object.","pos":[4484,4574]},{"content":"The end property (the property that is the last named property in the path) must be public and must be mutable â€“ you can't bind to static values.","pos":[4579,4724]},{"pos":[4729,4896],"content":"The end property must be read/write if this path is used as the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Path<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209830)</ept> information for a two-way binding."},{"content":"Indexers","pos":[4902,4910]},{"content":"A property path for data-binding can include references to indexed properties.","pos":[4912,4990]},{"content":"This enables binding to ordered lists/vectors, or to dictionaries/maps.","pos":[4991,5062]},{"content":"Use square brackets \"<ph id=\"ph1\">\\[\\]</ph>\" characters to indicate an indexed property.","pos":[5063,5133]},{"content":"The contents of these brackets can be either an integer (for ordered list) or an unquoted string (for dictionaries).","pos":[5134,5250]},{"content":"You can also bind to a dictionary where the key is an integer.","pos":[5251,5313]},{"content":"You can use different indexed properties in the same path with a dot separating the object-property.","pos":[5314,5414]},{"content":"For example, consider a business object where there is a list of \"Teams\" (ordered list), each of which has a dictionary of \"Players\" where each player is keyed by last name.","pos":[5416,5589]},{"content":"An example property path to a specific player on the second team is: \"Teams<ph id=\"ph1\">\\[</ph>1<ph id=\"ph2\">\\]</ph>.Players<ph id=\"ph3\">\\[</ph>Smith<ph id=\"ph4\">\\]</ph>\".","pos":[5590,5689]},{"content":"(You use 1 to indicate the second item in \"Teams\" because the list is zero-indexed.)","pos":[5690,5774]},{"pos":[5776,5922],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Indexing support for C++ data sources is limited; see <bpt id=\"p2\">[</bpt>Data binding in depth<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>."},{"content":"Attached properties","pos":[5928,5947]},{"content":"Property paths can include references to attached properties.","pos":[5949,6010]},{"content":"Because the identifying name of an attached property already includes a dot, you must enclose any attached property name within parentheses so that the dot isn't treated as an object-property step.","pos":[6011,6208]},{"content":"For example, the string to specify that you want to use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas.ZIndex<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759773)</ept> as a binding path is \"(Canvas.ZIndex)\".","pos":[6209,6382]},{"content":"For more info on attached properties see <bpt id=\"p1\">[</bpt>Attached properties overview<ept id=\"p1\">](attached-properties-overview.md)</ept>.","pos":[6383,6488]},{"content":"Combining property path syntax","pos":[6494,6524]},{"content":"You can combine various elements of property path syntax in a single string.","pos":[6526,6602]},{"content":"For example, you can define a property path that references an indexed attached property, if your data source had such a property.","pos":[6603,6733]},{"content":"Debugging a binding property path","pos":[6739,6772]},{"content":"Because a property path is interpreted by a binding engine and relies on info that may be present only at run-time, you must often debug a property path for binding without being able to rely on conventional design-time or compile-time support in the development tools.","pos":[6774,7043]},{"content":"In many cases the run-time result of failing to resolve a property path is a blank value with no error, because that is the by-design fallback behavior of binding resolution.","pos":[7044,7218]},{"content":"Fortunately, Microsoft Visual Studio provides a debug output mode that can isolate which part of a property path that's specifying a binding source failed to resolve.","pos":[7219,7385]},{"content":"For more info on using this development tool feature, see <bpt id=\"p1\">[</bpt>\"Debugging\" section of Data binding in depth<ept id=\"p1\">](../data-binding/data-binding-in-depth.md#debugging)</ept>.","pos":[7386,7543]},{"content":"Property path for animation targeting","pos":[7548,7585]},{"content":"Animations rely on targeting a dependency property where storyboarded values are applied when the animation runs.","pos":[7587,7700]},{"content":"To identify the object where the property to be animated exists, the animation targets an element by name (<bpt id=\"p1\">[</bpt>x:Name attribute<ept id=\"p1\">](x-name-attribute.md)</ept>).","pos":[7701,7849]},{"content":"It is often necessary to define a property path that starts with the object identified as the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Storyboard.TargetName<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759823)</ept>, and ends with the particular dependency property value where the animation should apply.","pos":[7850,8119]},{"content":"That property path is used as the value for <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Storyboard.TargetProperty<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759824)</ept>.","pos":[8120,8254]},{"pos":[8256,8399],"content":"For more info on the how to define animations in XAML, see <bpt id=\"p1\">[</bpt>Storyboarded animations<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187354)</ept>."},{"content":"Simple targeting","pos":[8404,8420]},{"content":"If you are animating a property that exists on the targeted object itself, and that property's type can have an animation applied directly to it (rather than to a sub-property of a property's value) then you can simply name the property being animated without any further qualification.","pos":[8422,8708]},{"content":"For example, if you are targeting a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Shape<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br243377)</ept> subclass such as <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Rectangle<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br243371)</ept>, and you are applying an animated <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Color<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept> to the <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>Fill<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/br243378)</ept> property, your property path can be \"Fill\".","pos":[8709,9129]},{"content":"Indirect property targeting","pos":[9134,9161]},{"content":"You can animate a property that is a sub-property of the target object.","pos":[9163,9234]},{"content":"In other words, if there's a property of the target object that's an object itself, and that object has properties, you must define a property path that explains how to step through that object-property relationship.","pos":[9235,9451]},{"content":"Whenever you are specifying an object where you want to animate a sub-property, you enclose the property name in parentheses, and you specify the property in <bpt id=\"p1\">*</bpt>typename<ept id=\"p1\">*</ept>.<bpt id=\"p2\">*</bpt>propertyname<ept id=\"p2\">*</ept> format.","pos":[9452,9643]},{"content":"For example, to specify that you want the object value of a target object's <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RenderTransform<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208980)</ept> property, you specify \"(UIElement.RenderTransform)\" as the first step in the property path.","pos":[9644,9891]},{"content":"This isn't yet a complete path, because there are no animations that can apply to a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Transform<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br243006)</ept> value directly.","pos":[9892,10065]},{"content":"So for this example, you now complete the property path so that the end property is a property of a <bpt id=\"p1\">**</bpt>Transform<ept id=\"p1\">**</ept> subclass that can be animated by a <bpt id=\"p2\">**</bpt>Double<ept id=\"p2\">**</ept> value: \"(UIElement.RenderTransform).(CompositeTransform.TranslateX)\"","pos":[10066,10294]},{"content":"Specifying a particular child in a collection","pos":[10299,10344]},{"content":"To specify a child item in a collection property, you can use a numeric indexer.","pos":[10346,10426]},{"content":"Use square brackets \"<ph id=\"ph1\">\\[\\]</ph>\" characters around the integer index value.","pos":[10427,10496]},{"content":"You can reference only ordered lists, not dictionaries.","pos":[10497,10552]},{"content":"Because a collection isn't a value that can be animated, an indexer usage can never be the end property in a property path.","pos":[10553,10676]},{"content":"For example, to specify that you want to animate the first color stop color in a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LinearGradientBrush<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br210108)</ept> that is applied to a control's <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Background<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209395)</ept> property, this is the property path: \"(Control.Background).(GradientBrush.GradientStops)<ph id=\"ph1\">\\[</ph>0<ph id=\"ph2\">\\]</ph>.(GradientStop.Color)\".","pos":[10678,11065]},{"content":"Note how the indexer is not the last step in the path, and that the last step particularly must reference the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GradientStop.Color<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br210094)</ept> property of item 0 in the collection to apply a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Color<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept> animated value to it.","pos":[11066,11398]},{"content":"Animating an attached property","pos":[11403,11433]},{"content":"It isn't a common scenario, but it is possible to animate an attached property, so long as that attached property has a property value that matches an animation type.","pos":[11435,11601]},{"content":"Because the identifying name of an attached property already includes a dot, you must enclose any attached property name within parentheses so that the dot isn't treated as an object-property step.","pos":[11602,11799]},{"content":"For example, the string to specify that you want to animate the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Grid.Row<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759795)</ept> attached property on an object, use the property path \"(Grid.Row)\".","pos":[11800,12004]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  For this example, the value of <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Grid.Row<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh759795)</ept> is an <bpt id=\"p4\">**</bpt>Int32<ept id=\"p4\">**</ept> property type.","pos":[12006,12150]},{"content":"so you can't animate it with a <bpt id=\"p1\">**</bpt>Double<ept id=\"p1\">**</ept> animation.","pos":[12151,12203]},{"content":"Instead, you'd define an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ObjectAnimationUsingKeyFrames<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br210320)</ept> that has <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DiscreteObjectKeyFrame<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br243132)</ept> components, where the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>ObjectKeyFrame.Value<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br210344)</ept> is set to an integer such as \"0\" or \"1\".","pos":[12204,12566]},{"content":"Rules for the properties in an animation targeting property path","pos":[12571,12635]},{"pos":[12641,12805],"content":"The assumed starting point of the property path is the object identified by a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Storyboard.TargetName<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759823)</ept>."},{"content":"All objects and properties referenced along the property path must be public.","pos":[12810,12887]},{"content":"The end property (the property that is the last named property in the path) must be public, be read-write, and be a dependency property.","pos":[12892,13028]},{"pos":[13033,13434],"content":"The end property must have a property type that is able to be animated by one of the broad classes of animation types (<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Color<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept> animations, <bpt id=\"p3\">**</bpt>Double<ept id=\"p3\">**</ept> animations, <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Point<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> animations, <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>ObjectAnimationUsingKeyFrames<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br210320)</ept>)."},{"content":"The PropertyPath class","pos":[13439,13461]},{"pos":[13463,13687],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PropertyPath<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244259)</ept> class is the underlying property type of <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Binding.Path<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209830)</ept> for the binding scenario."},{"content":"Most of the time, you can apply a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PropertyPath<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244259)</ept> in XAML without using any code at all.","pos":[13689,13838]},{"content":"But in some cases you may want to define a <bpt id=\"p1\">**</bpt>PropertyPath<ept id=\"p1\">**</ept> object using code and assign it to a property at run-time.","pos":[13839,13957]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PropertyPath<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244259)</ept> has a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>PropertyPath(String)<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br244261)</ept> constructor, and doesn't have a default constructor.","pos":[13959,14179]},{"content":"The string you pass to this constructor is a string that's defined using the property path syntax as we explained earlier.","pos":[14180,14302]},{"content":"This is also the same string you'd use to assign <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Path<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209830)</ept> as a XAML attribute.","pos":[14303,14441]},{"content":"The only other API of the <bpt id=\"p1\">**</bpt>PropertyPath<ept id=\"p1\">**</ept> class is the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Path<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br244260)</ept> property, which is read-only.","pos":[14442,14596]},{"content":"You could use this property as the construction string for another <bpt id=\"p1\">**</bpt>PropertyPath<ept id=\"p1\">**</ept> instance.","pos":[14597,14690]},{"content":"Related topics","pos":[14695,14709]},{"content":"Data binding in depth","pos":[14714,14735]},{"content":"Storyboarded animations","pos":[14798,14821]},{"content":"{Binding} markup extension","pos":[14884,14910]},{"content":"PropertyPath","pos":[14946,14958]},{"content":"Binding","pos":[15025,15032]},{"content":"Binding constructor","pos":[15099,15118]},{"content":"DataContext","pos":[15185,15196]}],"content":"---\nauthor: jwmsft\ndescription: You can use the PropertyPath class and the string syntax to instantiate a PropertyPath value either in XAML or in code.\ntitle: Property-path syntax'\nms.assetid: FF3ECF47-D81F-46E3-BE01-C839E0398025\n---\n\n# Property-path syntax\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nYou can use the [**PropertyPath**](https://msdn.microsoft.com/library/windows/apps/br244259) class and the string syntax to instantiate a **PropertyPath** value either in XAML or in code. **PropertyPath** values are used by data binding. A similar syntax is used for targeting storyboarded animations. But animation targeting doesn't create underlying Property-path syntax values, it keeps the info as a string. For both scenarios, a property path describes a traversal of one or more object-property relationships that eventually resolve to a single property.\n\nYou can set a property path string directly to an attribute in XAML. You can use the same string syntax to construct a [**PropertyPath**](https://msdn.microsoft.com/library/windows/apps/br244259) that sets a [**Binding**](https://msdn.microsoft.com/library/windows/apps/br209820) in code, or to set an animation target in code using [**SetTargetProperty**](https://msdn.microsoft.com/library/windows/apps/br210503). There are two distinct feature areas in the Windows Runtime that use a property path: data binding, and animation targeting. Animation targeting doesn't create underlying Property-path syntax values in the Windows Runtime implementation, it keeps the info as a string, but the concepts of object-property traversal are very similar. Data binding and animation targeting each evaluate a property path slightly differently, so we describe property path syntax separately for each.\n\n## Property path for objects in data binding\n\nIn Windows Runtime, you can bind to the target value of any dependency property. The source property value for a data binding doesn't have to be a dependency property; it can be a property on a business object (for example a class written in a Microsoft .NET language or C++). Or, the source object for the binding value can be an existing dependency object already defined by the app. The source can be referenced either by a simple property name, or by a traversal of the object-property relationships in the object graph of the business object.\n\nYou can bind to an individual property value, or you can bind to a target property that holds lists or collections. If your source is a collection, or if the path specifies a collection property, the data-binding engine matches the collection items of the source to the binding target, resulting in behavior such as populating a [**ListBox**](https://msdn.microsoft.com/library/windows/apps/br242868) with a list of items from a data source collection without needing to anticipate the specific items in that collection.\n\n### Traversing an object graph\n\nThe element of the syntax that denotes the traversal of an object-property relationship in an object graph is the dot (**.**) character. Each dot in a property path string indicates a division between an object (left side of the dot) and a property of that object (right side of the dot). The string is evaluated left-to-right, which enables stepping through multiple object-property relationships. Let's look at an example:\n\n``` syntax\n<Binding Path=\"Customer.Address.StreetAddress1\"\n```\n\nHere's how this path is evaluated:\n\n1.  The data context object (or a [**Source**](https://msdn.microsoft.com/library/windows/apps/br209832) specified by the same [**Binding**](https://msdn.microsoft.com/library/windows/apps/br209820)) is searched for a property named \"Customer\".\n2.  The object that is the value of the \"Customer\" property is searched for a property named \"Address\".\n3.  The object that is the value of the \"Address\" property is searched for a property named \"StreetAddress1\".\n\nAt each of these steps, the value is treated as an object. The type of the result is checked only when the binding is applied to a specific property. This example would fail if \"Address\" were just a string value that didn't expose what part of the string was the street address. Typically, the binding is pointing to the specific nested property values of a business object that has a known and deliberate information structure.\n\n### Rules for the properties in a data-binding property path\n\n-   All properties referenced by a property path must be public in the source business object.\n-   The end property (the property that is the last named property in the path) must be public and must be mutable â€“ you can't bind to static values.\n-   The end property must be read/write if this path is used as the [**Path**](https://msdn.microsoft.com/library/windows/apps/br209830) information for a two-way binding.\n\n### Indexers\n\nA property path for data-binding can include references to indexed properties. This enables binding to ordered lists/vectors, or to dictionaries/maps. Use square brackets \"\\[\\]\" characters to indicate an indexed property. The contents of these brackets can be either an integer (for ordered list) or an unquoted string (for dictionaries). You can also bind to a dictionary where the key is an integer. You can use different indexed properties in the same path with a dot separating the object-property.\n\nFor example, consider a business object where there is a list of \"Teams\" (ordered list), each of which has a dictionary of \"Players\" where each player is keyed by last name. An example property path to a specific player on the second team is: \"Teams\\[1\\].Players\\[Smith\\]\". (You use 1 to indicate the second item in \"Teams\" because the list is zero-indexed.)\n\n**Note**  Indexing support for C++ data sources is limited; see [Data binding in depth](https://msdn.microsoft.com/library/windows/apps/mt210946).\n\n### Attached properties\n\nProperty paths can include references to attached properties. Because the identifying name of an attached property already includes a dot, you must enclose any attached property name within parentheses so that the dot isn't treated as an object-property step. For example, the string to specify that you want to use [**Canvas.ZIndex**](https://msdn.microsoft.com/library/windows/apps/hh759773) as a binding path is \"(Canvas.ZIndex)\". For more info on attached properties see [Attached properties overview](attached-properties-overview.md).\n\n### Combining property path syntax\n\nYou can combine various elements of property path syntax in a single string. For example, you can define a property path that references an indexed attached property, if your data source had such a property.\n\n### Debugging a binding property path\n\nBecause a property path is interpreted by a binding engine and relies on info that may be present only at run-time, you must often debug a property path for binding without being able to rely on conventional design-time or compile-time support in the development tools. In many cases the run-time result of failing to resolve a property path is a blank value with no error, because that is the by-design fallback behavior of binding resolution. Fortunately, Microsoft Visual Studio provides a debug output mode that can isolate which part of a property path that's specifying a binding source failed to resolve. For more info on using this development tool feature, see [\"Debugging\" section of Data binding in depth](../data-binding/data-binding-in-depth.md#debugging).\n\n## Property path for animation targeting\n\nAnimations rely on targeting a dependency property where storyboarded values are applied when the animation runs. To identify the object where the property to be animated exists, the animation targets an element by name ([x:Name attribute](x-name-attribute.md)). It is often necessary to define a property path that starts with the object identified as the [**Storyboard.TargetName**](https://msdn.microsoft.com/library/windows/apps/hh759823), and ends with the particular dependency property value where the animation should apply. That property path is used as the value for [**Storyboard.TargetProperty**](https://msdn.microsoft.com/library/windows/apps/hh759824).\n\nFor more info on the how to define animations in XAML, see [Storyboarded animations](https://msdn.microsoft.com/library/windows/apps/mt187354).\n\n## Simple targeting\n\nIf you are animating a property that exists on the targeted object itself, and that property's type can have an animation applied directly to it (rather than to a sub-property of a property's value) then you can simply name the property being animated without any further qualification. For example, if you are targeting a [**Shape**](https://msdn.microsoft.com/library/windows/apps/br243377) subclass such as [**Rectangle**](https://msdn.microsoft.com/library/windows/apps/br243371), and you are applying an animated [**Color**](https://msdn.microsoft.com/library/windows/apps/hh673723) to the [**Fill**](https://msdn.microsoft.com/library/windows/apps/br243378) property, your property path can be \"Fill\".\n\n## Indirect property targeting\n\nYou can animate a property that is a sub-property of the target object. In other words, if there's a property of the target object that's an object itself, and that object has properties, you must define a property path that explains how to step through that object-property relationship. Whenever you are specifying an object where you want to animate a sub-property, you enclose the property name in parentheses, and you specify the property in *typename*.*propertyname* format. For example, to specify that you want the object value of a target object's [**RenderTransform**](https://msdn.microsoft.com/library/windows/apps/br208980) property, you specify \"(UIElement.RenderTransform)\" as the first step in the property path. This isn't yet a complete path, because there are no animations that can apply to a [**Transform**](https://msdn.microsoft.com/library/windows/apps/br243006) value directly. So for this example, you now complete the property path so that the end property is a property of a **Transform** subclass that can be animated by a **Double** value: \"(UIElement.RenderTransform).(CompositeTransform.TranslateX)\"\n\n## Specifying a particular child in a collection\n\nTo specify a child item in a collection property, you can use a numeric indexer. Use square brackets \"\\[\\]\" characters around the integer index value. You can reference only ordered lists, not dictionaries. Because a collection isn't a value that can be animated, an indexer usage can never be the end property in a property path.\n\nFor example, to specify that you want to animate the first color stop color in a [**LinearGradientBrush**](https://msdn.microsoft.com/library/windows/apps/br210108) that is applied to a control's [**Background**](https://msdn.microsoft.com/library/windows/apps/br209395) property, this is the property path: \"(Control.Background).(GradientBrush.GradientStops)\\[0\\].(GradientStop.Color)\". Note how the indexer is not the last step in the path, and that the last step particularly must reference the [**GradientStop.Color**](https://msdn.microsoft.com/library/windows/apps/br210094) property of item 0 in the collection to apply a [**Color**](https://msdn.microsoft.com/library/windows/apps/hh673723) animated value to it.\n\n## Animating an attached property\n\nIt isn't a common scenario, but it is possible to animate an attached property, so long as that attached property has a property value that matches an animation type. Because the identifying name of an attached property already includes a dot, you must enclose any attached property name within parentheses so that the dot isn't treated as an object-property step. For example, the string to specify that you want to animate the [**Grid.Row**](https://msdn.microsoft.com/library/windows/apps/hh759795) attached property on an object, use the property path \"(Grid.Row)\".\n\n**Note**  For this example, the value of [**Grid.Row**](https://msdn.microsoft.com/library/windows/apps/hh759795) is an **Int32** property type. so you can't animate it with a **Double** animation. Instead, you'd define an [**ObjectAnimationUsingKeyFrames**](https://msdn.microsoft.com/library/windows/apps/br210320) that has [**DiscreteObjectKeyFrame**](https://msdn.microsoft.com/library/windows/apps/br243132) components, where the [**ObjectKeyFrame.Value**](https://msdn.microsoft.com/library/windows/apps/br210344) is set to an integer such as \"0\" or \"1\".\n\n## Rules for the properties in an animation targeting property path\n\n-   The assumed starting point of the property path is the object identified by a [**Storyboard.TargetName**](https://msdn.microsoft.com/library/windows/apps/hh759823).\n-   All objects and properties referenced along the property path must be public.\n-   The end property (the property that is the last named property in the path) must be public, be read-write, and be a dependency property.\n-   The end property must have a property type that is able to be animated by one of the broad classes of animation types ([**Color**](https://msdn.microsoft.com/library/windows/apps/hh673723) animations, **Double** animations, [**Point**](https://msdn.microsoft.com/library/windows/apps/br225870) animations, [**ObjectAnimationUsingKeyFrames**](https://msdn.microsoft.com/library/windows/apps/br210320)).\n\n## The PropertyPath class\n\nThe [**PropertyPath**](https://msdn.microsoft.com/library/windows/apps/br244259) class is the underlying property type of [**Binding.Path**](https://msdn.microsoft.com/library/windows/apps/br209830) for the binding scenario.\n\nMost of the time, you can apply a [**PropertyPath**](https://msdn.microsoft.com/library/windows/apps/br244259) in XAML without using any code at all. But in some cases you may want to define a **PropertyPath** object using code and assign it to a property at run-time.\n\n[**PropertyPath**](https://msdn.microsoft.com/library/windows/apps/br244259) has a [**PropertyPath(String)**](https://msdn.microsoft.com/library/windows/apps/br244261) constructor, and doesn't have a default constructor. The string you pass to this constructor is a string that's defined using the property path syntax as we explained earlier. This is also the same string you'd use to assign [**Path**](https://msdn.microsoft.com/library/windows/apps/br209830) as a XAML attribute. The only other API of the **PropertyPath** class is the [**Path**](https://msdn.microsoft.com/library/windows/apps/br244260) property, which is read-only. You could use this property as the construction string for another **PropertyPath** instance.\n\n## Related topics\n\n* [Data binding in depth](https://msdn.microsoft.com/library/windows/apps/mt210946)\n* [Storyboarded animations](https://msdn.microsoft.com/library/windows/apps/mt187354)\n* [{Binding} markup extension](binding-markup-extension.md)\n* [**PropertyPath**](https://msdn.microsoft.com/library/windows/apps/br244259)\n* [**Binding**](https://msdn.microsoft.com/library/windows/apps/br209820)\n* [**Binding constructor**](https://msdn.microsoft.com/library/windows/apps/br209825)\n* [**DataContext**](https://msdn.microsoft.com/library/windows/apps/br208713)\n\n"}