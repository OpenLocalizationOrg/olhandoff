{"nodes":[{"content":"The Windows Push Notification Services (WNS) enables third-party developers to send toast, tile, badge, and raw updates from their own cloud service.","pos":[34,183]},{"content":"This provides a mechanism to deliver new updates to your users in a power-efficient and dependable way.","pos":[184,287]},{"content":"Windows Push Notification Services (WNS) overview","pos":[295,344]},{"content":"Windows Push Notification Services (WNS) overview","pos":[433,482]},{"content":"The Windows Push Notification Services (WNS) enables third-party developers to send toast, tile, badge, and raw updates from their own cloud service.","pos":[488,637]},{"content":"This provides a mechanism to deliver new updates to your users in a power-efficient and dependable way.","pos":[638,741]},{"pos":[839,851],"content":"How it works"},{"content":"The following diagram shows the complete data flow for sending a push notification.","pos":[854,937]},{"content":"It involves these steps:","pos":[938,962]},{"content":"Your app requests a push notification channel from the Universal Windows Platform.","pos":[968,1050]},{"content":"Windows asks WNS to create a notification channel.","pos":[1055,1105]},{"content":"This channel is returned to the calling device in the form of a Uniform Resource Identifier (URI).","pos":[1106,1204]},{"content":"The notification channel URI is returned by Windows to your app.","pos":[1209,1273]},{"content":"Your app sends the URI to your own cloud service.","pos":[1278,1327]},{"content":"You then store the URI on your own cloud service so that you can access the URI when you send notifications.","pos":[1328,1436]},{"content":"The URI is an interface between your own app and your own service; it's your responsibility to implement this interface with safe and secure web standards.","pos":[1437,1592]},{"content":"When your cloud service has an update to send, it notifies WNS using the channel URI.","pos":[1597,1682]},{"content":"This is done by issuing an HTTP POST request, including the notification payload, over Secure Sockets Layer (SSL).","pos":[1683,1797]},{"content":"This step requires authentication.","pos":[1798,1832]},{"content":"WNS receives the request and routes the notification to the appropriate device.","pos":[1837,1916]},{"content":"wns data flow diagram for push notification","pos":[1920,1963]},{"pos":[2076,2149],"content":"Registering your app and receiving the credentials for your cloud service"},{"content":"Before you can send notifications using WNS, your app must be registered with the Store Dashboard.","pos":[2152,2250]},{"content":"This will provide you with credentials for your app that your cloud service will use in authenticating with WNS.","pos":[2251,2363]},{"content":"These credentials consist of a Package Security Identifier (SID) and a secret key.","pos":[2364,2446]},{"content":"To perform this registration, go to the <bpt id=\"p1\">[</bpt>Windows Dev Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=511146)</ept> and select <bpt id=\"p2\">**</bpt>Dashboard<ept id=\"p2\">**</ept>.","pos":[2447,2582]},{"content":"Each app has its own set of credentials for its cloud service.","pos":[2584,2646]},{"content":"These credentials cannot be used to send notifications to any other app.","pos":[2647,2719]},{"pos":[2721,2902],"content":"For more details on how to register your app, please see <bpt id=\"p1\">[</bpt>How to authenticate with the Windows Notification Service (WNS)<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465407)</ept>."},{"pos":[3063,3096],"content":"Requesting a notification channel"},{"content":"When an app that is capable of receiving push notifications runs, it must first request a notification channel through the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CreatePushNotificationChannelForApplicationAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241285)</ept>.","pos":[3099,3335]},{"content":"For a full discussion and example code, see <bpt id=\"p1\">[</bpt>How to request, create, and save a notification channel<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465412)</ept>.","pos":[3336,3496]},{"content":"This API returns a channel URI that is uniquely linked to the calling application and its tile, and through which all notification types can be sent.","pos":[3497,3646]},{"content":"After the app has successfully created a channel URI, it sends it to its cloud service, together with any app-specific metadata that should be associated with this URI.","pos":[3648,3816]},{"pos":[3892,3907],"content":"Important notes"},{"content":"We do not guarantee that the notification channel URI for an app will always remain the same.","pos":[3913,4006]},{"content":"We advise that the app requests a new channel every time it runs and updates its service when the URI changes.","pos":[4007,4117]},{"content":"The developer should never modify the channel URI and should consider it as a black-box string.","pos":[4118,4213]},{"content":"At this time, channel URIs expire after 30 days.","pos":[4214,4262]},{"content":"If your Windows 10 app will periodically renew its channel in the background then you can download the <bpt id=\"p1\">[</bpt>Push and periodic notifications sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=231476)</ept> for Windows 8.1 and re-use its source code and/or the pattern it demonstrates.","pos":[4263,4534]},{"content":"The interface between the cloud service and the client app is implemented by you, the developer.","pos":[4539,4635]},{"content":"We recommend that the app go through an authentication process with its own service and transmit data over a secure protocol such as HTTPS.","pos":[4636,4775]},{"content":"It is important that the cloud service always ensures that the channel URI uses the domain \"notify.windows.com\".","pos":[4780,4892]},{"content":"The service should never push notifications to a channel on any other domain.","pos":[4893,4970]},{"content":"If the callback for your app is ever compromised, a malicious attacker could submit a channel URI to spoof WNS.","pos":[4971,5082]},{"content":"Without inspecting the domain, your cloud service could be potentially disclose information to this attacker unknowingly.","pos":[5083,5204]},{"content":"If your cloud service attempts to deliver a notification to an expired channel, WNS will return <bpt id=\"p1\">[</bpt>response code 410<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#WNSResponseCodes)</ept>.","pos":[5209,5405]},{"content":"In response to that code, your service should no longer attempt to send notifications to that URI.","pos":[5406,5504]},{"pos":[5665,5698],"content":"Authenticating your cloud service"},{"content":"To send a notification, the cloud service must be authenticated through WNS.","pos":[5701,5777]},{"content":"The first step in this process occurs when you register your app with the Windows Store Dashboard.","pos":[5778,5876]},{"content":"During the registration process, your app is given a Package security identifier (SID) and a secret key.","pos":[5877,5981]},{"content":"This information is used by your cloud service to authenticate with WNS.","pos":[5982,6054]},{"content":"The WNS authentication scheme is implemented using the client credentials profile from the <bpt id=\"p1\">[</bpt>OAuth 2.0<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=226787)</ept> protocol.","pos":[6056,6217]},{"content":"The cloud service authenticates with WNS by providing its credentials (Package SID and secret key).","pos":[6218,6317]},{"content":"In return, it receives an access token.","pos":[6318,6357]},{"content":"This access token allows a cloud service to send a notification.","pos":[6358,6422]},{"content":"The token is required with every notification request sent to the WNS.","pos":[6423,6493]},{"content":"At a high level, the information chain is as follows:","pos":[6495,6548]},{"content":"The cloud service sends its credentials to WNS over HTTPS following the OAuth 2.0 protocol.","pos":[6554,6645]},{"content":"This authenticates the service with WNS.","pos":[6646,6686]},{"content":"WNS returns an access token if the authentication was successful.","pos":[6691,6756]},{"content":"This access token is used in all subsequent notification requests until it expires.","pos":[6757,6840]},{"content":"wns diagram for cloud service authentication","pos":[6844,6888]},{"content":"In the authentication with WNS, the cloud service submits an HTTP request over Secure Sockets Layer (SSL).","pos":[6918,7024]},{"content":"The parameters are supplied in the \"application/x-www-for-urlencoded\" format.","pos":[7025,7102]},{"content":"Supply your Package SID in the \"client<ph id=\"ph1\">\\_</ph>id\" field and your secret key in the \"client<ph id=\"ph2\">\\_</ph>secret\" field.","pos":[7103,7203]},{"content":"For syntax details, see the <bpt id=\"p1\">[</bpt>access token request<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#access_token_request)</ept> reference.","pos":[7204,7349]},{"pos":[7351,7456],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  This is just an example, not cut-and-paste code that you can successfully use in your own code."},{"content":"The WNS authenticates the cloud service and, if successful, sends a response of \"200 OK\".","pos":[7824,7913]},{"content":"The access token is returned in the parameters included in the body of the HTTP response, using the \"application/json\" media type.","pos":[7914,8044]},{"content":"After your service has received the access token, you are ready to send notifications.","pos":[8045,8131]},{"content":"The following example shows a successful authentication response, including the access token.","pos":[8133,8226]},{"content":"For syntax details, see <bpt id=\"p1\">[</bpt>Push notification service request and response headers<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465435)</ept>.","pos":[8227,8366]},{"pos":[8666,8681],"content":"Important notes"},{"content":"The OAuth 2.0 protocol supported in this procedure follows draft version V16.","pos":[8687,8764]},{"content":"The OAuth Request for Comments (RFC) uses the term \"client\" to refer to the cloud service.","pos":[8769,8859]},{"content":"There might be changes to this procedure when the OAuth draft is finalized.","pos":[8864,8939]},{"content":"The access token can be reused for multiple notification requests.","pos":[8944,9010]},{"content":"This allows the cloud service to authenticate just once to send many notifications.","pos":[9011,9094]},{"content":"However, when the access token expires, the cloud service must authenticate again to receive a new access token.","pos":[9095,9207]},{"pos":[9335,9357],"content":"Sending a notification"},{"content":"Using the channel URI, the cloud service can send a notification whenever it has an update for the user.","pos":[9360,9464]},{"content":"The access token described above can be reused for multiple notification requests; the cloud server is not required to request a new access token for every notification.","pos":[9466,9635]},{"content":"If the access token has expired, the notification request will return an error.","pos":[9636,9715]},{"content":"We recommended that you do not try to re-send your notification more than once if the access token is rejected.","pos":[9716,9827]},{"content":"If you encounter this error, you will need to request a new access token and resend the notification.","pos":[9828,9929]},{"content":"For the exact error code, see <bpt id=\"p1\">[</bpt>Push notification response codes<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465435)</ept>.","pos":[9930,10053]},{"content":"The cloud service makes an HTTP POST to the channel URI.","pos":[10059,10115]},{"content":"This request must be made over SSL and contains the necessary headers and the notification payload.","pos":[10116,10215]},{"content":"The authorization header must include the acquired access token for authorization.","pos":[10216,10298]},{"content":"An example request is shown here.","pos":[10304,10337]},{"content":"For syntax details, see <bpt id=\"p1\">[</bpt>Push notification response codes<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465435)</ept>.","pos":[10338,10455]},{"content":"For details on composing the notification payload, see <bpt id=\"p1\">[</bpt>Quickstart: Sending a push notification<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868252)</ept>.","pos":[10461,10621]},{"content":"The payload of a tile, toast, or badge push notification is supplied as XML content that adheres to their respective defined <bpt id=\"p1\">[</bpt>Adaptive tiles schema<ept id=\"p1\">](tiles-and-notifications-adaptive-tiles-schema.md)</ept> or <bpt id=\"p2\">[</bpt>Legacy tiles schema<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br212853)</ept>.","pos":[10622,10904]},{"content":"The payload of a raw notification does not have a specified structure.","pos":[10905,10975]},{"content":"It is strictly app-defined.","pos":[10976,11003]},{"content":"WNS responds to indicate that the notification has been received and will be delivered at the next available opportunity.","pos":[11337,11458]},{"content":"However, WNS does not provide end-to-end confirmation that your notification has been received by the device or application.","pos":[11459,11583]},{"content":"This diagram illustrates the data flow:","pos":[11585,11624]},{"content":"wns diagram for sending a notification","pos":[11628,11666]},{"pos":[11770,11785],"content":"Important notes"},{"content":"WNS does not guarantee the reliability or latency of a notification.","pos":[11791,11859]},{"content":"Notifications should never include confidential or sensitive data.","pos":[11864,11930]},{"content":"To send a notification, the cloud service must first authenticate with WNS and receive an access token.","pos":[11935,12038]},{"content":"An access token only allows a cloud service to send notifications to the single app for which the token was created.","pos":[12043,12159]},{"content":"One access token cannot be used to send notifications across multiple apps.","pos":[12160,12235]},{"content":"Therefore, if your cloud service supports multiple apps, it must provide the correct access token for the app when pushing a notification to each channel URI.","pos":[12236,12394]},{"content":"When the device is offline, by default WNS will store up to five tile notifications (if queuing is enabled; otherwise, one tile notification) and one badge notification for each channel URI, and no raw notifications.","pos":[12399,12615]},{"content":"This default caching behavior can be changed through the <bpt id=\"p1\">[</bpt>X-WNS-Cache-Policy header<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_cache)</ept>.","pos":[12616,12784]},{"content":"Note that toast notifications are never stored when the device is offline.","pos":[12785,12859]},{"content":"In scenarios where the notification content is personalized to the user, WNS recommends that the cloud service immediately send those updates when those are received.","pos":[12864,13030]},{"content":"Examples of this scenario include social media feed updates, instant communication invitations, new message notifications, or alerts.","pos":[13031,13164]},{"content":"As an alternative, you can have scenarios in which the same generic update is frequently delivered to a large subset of your users; for example, weather, stock, and news updates.","pos":[13165,13343]},{"content":"WNS guidelines specify that the frequency of these updates should be at most one every 30 minutes.","pos":[13344,13442]},{"content":"The end user or WNS may determine more frequent routine updates to be abusive.","pos":[13443,13521]},{"pos":[13576,13618],"content":"Expiration of tile and badge notifications"},{"content":"By default, tile and badge notifications expire three days after being downloaded.","pos":[13621,13703]},{"content":"When a notification expires, the content is removed from the tile or queue and is no longer shown to the user.","pos":[13704,13814]},{"content":"It's a best practice to set an expiration (using a time that makes sense for your app) on all tile and badge notifications so that your tile's content doesn't persist longer than it is relevant.","pos":[13815,14009]},{"content":"An explicit expiration time is essential for content with a defined lifespan.","pos":[14010,14087]},{"content":"This also assures the removal of stale content if your cloud service stops sending notifications, or if the user disconnects from the network for an extended period.","pos":[14088,14253]},{"content":"Your cloud service can set an expiration for each notification by setting the X-WNS-Expires HTTP header to specify the time (in seconds) that your notification will remain valid after it is sent.","pos":[14255,14450]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Push notification service request and response headers<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_ttl)</ept>.","pos":[14451,14615]},{"content":"For example, during a stock market's active trading day, you can set the expiration for a stock price update to twice that of your sending interval (such as one hour after receipt if you are sending notifications every half-hour).","pos":[14617,14847]},{"content":"As another example, a news app might determine that one day is an appropriate expiration time for a daily news tile update.","pos":[14848,14971]},{"pos":[15141,15177],"content":"Push notifications and battery saver"},{"content":"Battery saver extends battery life by limiting background activity on the device.","pos":[15180,15261]},{"content":"Windows 10 lets the user set battery saver to turn on automatically when the battery drops below a specified threshold.","pos":[15262,15381]},{"content":"When battery saver is on, the receipt of push notifications is disabled to save energy.","pos":[15382,15469]},{"content":"But there are a couple exceptions to this.","pos":[15470,15512]},{"content":"The following Windows 10 battery saver settings (found in the <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> app) allow your app to receive push notifications even when battery saver is on.","pos":[15513,15668]},{"content":"<bpt id=\"p1\">**</bpt>Allow push notifications from any app while in battery saver<ept id=\"p1\">**</ept>: This setting lets all apps receive push notifications while battery saver is on.","pos":[15674,15820]},{"content":"Note that this setting applies only to Windows 10 for desktop editions (Home, Pro, Enterprise, and Education).","pos":[15821,15931]},{"content":"<bpt id=\"p1\">**</bpt>Always allowed<ept id=\"p1\">**</ept>: This setting lets specific apps run in the background while battery saver is on - including receiving push notifications.","pos":[15936,16077]},{"content":"This list is maintained manually by the user.","pos":[16078,16123]},{"content":"There is no way to check the state of these two settings, but you can check the state of battery saver.","pos":[16125,16228]},{"content":"In Windows 10, use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>EnergySaverStatus<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn966190)</ept> property to check battery saver state.","pos":[16229,16372]},{"content":"Your app can also use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>EnergySaverStatusChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn966191)</ept> event to listen for changes to battery saver.","pos":[16373,16533]},{"content":"If your app depends heavily on push notifications, we recommend notifying users that they may not receive notifications while battery saver is on and to make it easy for them to adjust <bpt id=\"p1\">**</bpt>battery saver settings<ept id=\"p1\">**</ept>.","pos":[16535,16747]},{"content":"Using the battery saver settings URI scheme in Windows 10, <ph id=\"ph1\">`ms-settings:batterysaver-settings`</ph>, you can provide a convenient link to the Settings app.","pos":[16748,16898]},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>   When notifying the user about battery saver settings, we recommend providing a way to suppress the message in the future.","pos":[16900,17031]},{"content":"For example, the <ph id=\"ph1\">`dontAskMeAgainBox`</ph> checkbox in the following example persists the user's preference in <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LocalSettings<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241622)</ept>.","pos":[17032,17215]},{"content":"Here's an example of how to check if battery saver is turned on in Windows 10.","pos":[17220,17298]},{"content":"This example notifies the user and launches the Settings app to <bpt id=\"p1\">**</bpt>battery saver settings<ept id=\"p1\">**</ept>.","pos":[17299,17390]},{"content":"The <ph id=\"ph1\">`dontAskAgainSetting`</ph> lets the user suppress the message if they don't want to be notified again.","pos":[17391,17492]},{"pos":[18883,19011],"content":"This is the XAML for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ContentDialog<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn633972)</ept> featured in this example."},{"content":"Note","pos":[19700,19704]},{"content":"This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.","pos":[19709,19797]},{"content":"If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id=\"p1\">[</bpt>archived documentation<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.","pos":[19798,19939]},{"pos":[19980,19994],"content":"Related topics"},{"content":"Send a local tile notification","pos":[20000,20030]},{"content":"Quickstart: Sending a push notification","pos":[20097,20136]},{"content":"How to update a badge through push notifications","pos":[20204,20252]},{"content":"How to request, create, and save a notification channel","pos":[20315,20370]},{"content":"How to intercept notifications for running applications","pos":[20433,20488]},{"content":"How to authenticate with the Windows Push Notification Service (WNS)","pos":[20551,20619]},{"content":"Push notification service request and response headers","pos":[20682,20736]},{"content":"Guidelines and checklist for push notifications","pos":[20799,20846]},{"content":"Raw notifications","pos":[20909,20926]}],"content":"---\nauthor: mijacobs\nDescription: The Windows Push Notification Services (WNS) enables third-party developers to send toast, tile, badge, and raw updates from their own cloud service. This provides a mechanism to deliver new updates to your users in a power-efficient and dependable way.\ntitle: Windows Push Notification Services (WNS) overview\nms.assetid: 2125B09F-DB90-4515-9AA6-516C7E9ACCCD\nlabel: TBD\ntemplate: detail.hbs\n---\n\n# Windows Push Notification Services (WNS) overview\n\n\n\n\n\nThe Windows Push Notification Services (WNS) enables third-party developers to send toast, tile, badge, and raw updates from their own cloud service. This provides a mechanism to deliver new updates to your users in a power-efficient and dependable way.\n\n## <span id=\"How_it_works\"></span><span id=\"how_it_works\"></span><span id=\"HOW_IT_WORKS\"></span>How it works\n\n\nThe following diagram shows the complete data flow for sending a push notification. It involves these steps:\n\n1.  Your app requests a push notification channel from the Universal Windows Platform.\n2.  Windows asks WNS to create a notification channel. This channel is returned to the calling device in the form of a Uniform Resource Identifier (URI).\n3.  The notification channel URI is returned by Windows to your app.\n4.  Your app sends the URI to your own cloud service. You then store the URI on your own cloud service so that you can access the URI when you send notifications. The URI is an interface between your own app and your own service; it's your responsibility to implement this interface with safe and secure web standards.\n5.  When your cloud service has an update to send, it notifies WNS using the channel URI. This is done by issuing an HTTP POST request, including the notification payload, over Secure Sockets Layer (SSL). This step requires authentication.\n6.  WNS receives the request and routes the notification to the appropriate device.\n\n![wns data flow diagram for push notification](images/wns-diagram-01.png)\n\n## <span id=\"registering_wit_store\"></span><span id=\"REGISTERING_WIT_STORE\"></span>Registering your app and receiving the credentials for your cloud service\n\n\nBefore you can send notifications using WNS, your app must be registered with the Store Dashboard. This will provide you with credentials for your app that your cloud service will use in authenticating with WNS. These credentials consist of a Package Security Identifier (SID) and a secret key. To perform this registration, go to the [Windows Dev Center](http://go.microsoft.com/fwlink/p/?linkid=511146) and select **Dashboard**.\n\nEach app has its own set of credentials for its cloud service. These credentials cannot be used to send notifications to any other app.\n\nFor more details on how to register your app, please see [How to authenticate with the Windows Notification Service (WNS)](https://msdn.microsoft.com/library/windows/apps/hh465407).\n\n## <span id=\"Requesting_a_notification_channel\"></span><span id=\"requesting_a_notification_channel\"></span><span id=\"REQUESTING_A_NOTIFICATION_CHANNEL\"></span>Requesting a notification channel\n\n\nWhen an app that is capable of receiving push notifications runs, it must first request a notification channel through the [**CreatePushNotificationChannelForApplicationAsync**](https://msdn.microsoft.com/library/windows/apps/br241285). For a full discussion and example code, see [How to request, create, and save a notification channel](https://msdn.microsoft.com/library/windows/apps/hh465412). This API returns a channel URI that is uniquely linked to the calling application and its tile, and through which all notification types can be sent.\n\nAfter the app has successfully created a channel URI, it sends it to its cloud service, together with any app-specific metadata that should be associated with this URI.\n\n### <span id=\"important_notes1\"></span><span id=\"IMPORTANT_NOTES1\"></span>Important notes\n\n-   We do not guarantee that the notification channel URI for an app will always remain the same. We advise that the app requests a new channel every time it runs and updates its service when the URI changes. The developer should never modify the channel URI and should consider it as a black-box string. At this time, channel URIs expire after 30 days. If your Windows 10 app will periodically renew its channel in the background then you can download the [Push and periodic notifications sample](http://go.microsoft.com/fwlink/p/?linkid=231476) for Windows 8.1 and re-use its source code and/or the pattern it demonstrates.\n-   The interface between the cloud service and the client app is implemented by you, the developer. We recommend that the app go through an authentication process with its own service and transmit data over a secure protocol such as HTTPS.\n-   It is important that the cloud service always ensures that the channel URI uses the domain \"notify.windows.com\". The service should never push notifications to a channel on any other domain. If the callback for your app is ever compromised, a malicious attacker could submit a channel URI to spoof WNS. Without inspecting the domain, your cloud service could be potentially disclose information to this attacker unknowingly.\n-   If your cloud service attempts to deliver a notification to an expired channel, WNS will return [response code 410](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#WNSResponseCodes). In response to that code, your service should no longer attempt to send notifications to that URI.\n\n## <span id=\"Authenticating_your_cloud_service\"></span><span id=\"authenticating_your_cloud_service\"></span><span id=\"AUTHENTICATING_YOUR_CLOUD_SERVICE\"></span>Authenticating your cloud service\n\n\nTo send a notification, the cloud service must be authenticated through WNS. The first step in this process occurs when you register your app with the Windows Store Dashboard. During the registration process, your app is given a Package security identifier (SID) and a secret key. This information is used by your cloud service to authenticate with WNS.\n\nThe WNS authentication scheme is implemented using the client credentials profile from the [OAuth 2.0](http://go.microsoft.com/fwlink/p/?linkid=226787) protocol. The cloud service authenticates with WNS by providing its credentials (Package SID and secret key). In return, it receives an access token. This access token allows a cloud service to send a notification. The token is required with every notification request sent to the WNS.\n\nAt a high level, the information chain is as follows:\n\n1.  The cloud service sends its credentials to WNS over HTTPS following the OAuth 2.0 protocol. This authenticates the service with WNS.\n2.  WNS returns an access token if the authentication was successful. This access token is used in all subsequent notification requests until it expires.\n\n![wns diagram for cloud service authentication](images/wns-diagram-02.png)\n\nIn the authentication with WNS, the cloud service submits an HTTP request over Secure Sockets Layer (SSL). The parameters are supplied in the \"application/x-www-for-urlencoded\" format. Supply your Package SID in the \"client\\_id\" field and your secret key in the \"client\\_secret\" field. For syntax details, see the [access token request](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#access_token_request) reference.\n\n**Note**  This is just an example, not cut-and-paste code that you can successfully use in your own code.\n\n \n\n``` syntax\n POST /accesstoken.srf HTTP/1.1\n Content-Type: application/x-www-form-urlencoded\n Host: https://login.live.com\n Content-Length: 211\n \n grant_type=client_credentials&client_id=ms-app%3a%2f%2fS-1-15-2-2972962901-2322836549-3722629029-1345238579-3987825745-2155616079-650196962&client_secret=Vex8L9WOFZuj95euaLrvSH7XyoDhLJc7&scope=notify.windows.com\n```\n\nThe WNS authenticates the cloud service and, if successful, sends a response of \"200 OK\". The access token is returned in the parameters included in the body of the HTTP response, using the \"application/json\" media type. After your service has received the access token, you are ready to send notifications.\n\nThe following example shows a successful authentication response, including the access token. For syntax details, see [Push notification service request and response headers](https://msdn.microsoft.com/library/windows/apps/hh465435).\n\n``` syntax\n HTTP/1.1 200 OK   \n Cache-Control: no-store\n Content-Length: 422\n Content-Type: application/json\n \n {\n     \"access_token\":\"EgAcAQMAAAAALYAAY/c+Huwi3Fv4Ck10UrKNmtxRO6Njk2MgA=\", \n     \"token_type\":\"bearer\"\n }\n```\n\n### <span id=\"important_notes2\"></span><span id=\"IMPORTANT_NOTES2\"></span>Important notes\n\n-   The OAuth 2.0 protocol supported in this procedure follows draft version V16.\n-   The OAuth Request for Comments (RFC) uses the term \"client\" to refer to the cloud service.\n-   There might be changes to this procedure when the OAuth draft is finalized.\n-   The access token can be reused for multiple notification requests. This allows the cloud service to authenticate just once to send many notifications. However, when the access token expires, the cloud service must authenticate again to receive a new access token.\n\n## <span id=\"Sending_a_notification\"></span><span id=\"sending_a_notification\"></span><span id=\"SENDING_A_NOTIFICATION\"></span>Sending a notification\n\n\nUsing the channel URI, the cloud service can send a notification whenever it has an update for the user.\n\nThe access token described above can be reused for multiple notification requests; the cloud server is not required to request a new access token for every notification. If the access token has expired, the notification request will return an error. We recommended that you do not try to re-send your notification more than once if the access token is rejected. If you encounter this error, you will need to request a new access token and resend the notification. For the exact error code, see [Push notification response codes](https://msdn.microsoft.com/library/windows/apps/hh465435).\n\n1.  The cloud service makes an HTTP POST to the channel URI. This request must be made over SSL and contains the necessary headers and the notification payload. The authorization header must include the acquired access token for authorization.\n\n    An example request is shown here. For syntax details, see [Push notification response codes](https://msdn.microsoft.com/library/windows/apps/hh465435).\n\n    For details on composing the notification payload, see [Quickstart: Sending a push notification](https://msdn.microsoft.com/library/windows/apps/xaml/hh868252). The payload of a tile, toast, or badge push notification is supplied as XML content that adheres to their respective defined [Adaptive tiles schema](tiles-and-notifications-adaptive-tiles-schema.md) or [Legacy tiles schema](https://msdn.microsoft.com/library/windows/apps/br212853). The payload of a raw notification does not have a specified structure. It is strictly app-defined.\n\n    ``` syntax\n     POST https://cloud.notify.windows.com/?token=AQE%bU%2fSjZOCvRjjpILow%3d%3d HTTP/1.1\n     Content-Type: text/xml\n     X-WNS-Type: wns/tile\n     Authorization: Bearer EgAcAQMAAAAALYAAY/c+Huwi3Fv4Ck10UrKNmtxRO6Njk2MgA=\n     Host: cloud.notify.windows.com\n     Content-Length: 24\n\n     <body>\n     ....\n    ```\n\n2.  WNS responds to indicate that the notification has been received and will be delivered at the next available opportunity. However, WNS does not provide end-to-end confirmation that your notification has been received by the device or application.\n\nThis diagram illustrates the data flow:\n\n![wns diagram for sending a notification](images/wns-diagram-03.png)\n\n### <span id=\"important_notes3\"></span><span id=\"IMPORTANT_NOTES3\"></span>Important notes\n\n-   WNS does not guarantee the reliability or latency of a notification.\n-   Notifications should never include confidential or sensitive data.\n-   To send a notification, the cloud service must first authenticate with WNS and receive an access token.\n-   An access token only allows a cloud service to send notifications to the single app for which the token was created. One access token cannot be used to send notifications across multiple apps. Therefore, if your cloud service supports multiple apps, it must provide the correct access token for the app when pushing a notification to each channel URI.\n-   When the device is offline, by default WNS will store up to five tile notifications (if queuing is enabled; otherwise, one tile notification) and one badge notification for each channel URI, and no raw notifications. This default caching behavior can be changed through the [X-WNS-Cache-Policy header](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_cache). Note that toast notifications are never stored when the device is offline.\n-   In scenarios where the notification content is personalized to the user, WNS recommends that the cloud service immediately send those updates when those are received. Examples of this scenario include social media feed updates, instant communication invitations, new message notifications, or alerts. As an alternative, you can have scenarios in which the same generic update is frequently delivered to a large subset of your users; for example, weather, stock, and news updates. WNS guidelines specify that the frequency of these updates should be at most one every 30 minutes. The end user or WNS may determine more frequent routine updates to be abusive.\n\n## <span id=\"expiry\"></span><span id=\"EXPIRY\"></span>Expiration of tile and badge notifications\n\n\nBy default, tile and badge notifications expire three days after being downloaded. When a notification expires, the content is removed from the tile or queue and is no longer shown to the user. It's a best practice to set an expiration (using a time that makes sense for your app) on all tile and badge notifications so that your tile's content doesn't persist longer than it is relevant. An explicit expiration time is essential for content with a defined lifespan. This also assures the removal of stale content if your cloud service stops sending notifications, or if the user disconnects from the network for an extended period.\n\nYour cloud service can set an expiration for each notification by setting the X-WNS-Expires HTTP header to specify the time (in seconds) that your notification will remain valid after it is sent. For more information, see [Push notification service request and response headers](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_ttl).\n\nFor example, during a stock market's active trading day, you can set the expiration for a stock price update to twice that of your sending interval (such as one hour after receipt if you are sending notifications every half-hour). As another example, a news app might determine that one day is an appropriate expiration time for a daily news tile update.\n\n## <span id=\"Push_notifications_and_battery_saver\"></span><span id=\"push_notifications_and_battery_saver\"></span><span id=\"PUSH_NOTIFICATIONS_AND_BATTERY_SAVER\"></span>Push notifications and battery saver\n\n\nBattery saver extends battery life by limiting background activity on the device. Windows 10 lets the user set battery saver to turn on automatically when the battery drops below a specified threshold. When battery saver is on, the receipt of push notifications is disabled to save energy. But there are a couple exceptions to this. The following Windows 10 battery saver settings (found in the **Settings** app) allow your app to receive push notifications even when battery saver is on.\n\n-   **Allow push notifications from any app while in battery saver**: This setting lets all apps receive push notifications while battery saver is on. Note that this setting applies only to Windows 10 for desktop editions (Home, Pro, Enterprise, and Education).\n-   **Always allowed**: This setting lets specific apps run in the background while battery saver is on - including receiving push notifications. This list is maintained manually by the user.\n\nThere is no way to check the state of these two settings, but you can check the state of battery saver. In Windows 10, use the [**EnergySaverStatus**](https://msdn.microsoft.com/library/windows/apps/dn966190) property to check battery saver state. Your app can also use the [**EnergySaverStatusChanged**](https://msdn.microsoft.com/library/windows/apps/dn966191) event to listen for changes to battery saver.\n\nIf your app depends heavily on push notifications, we recommend notifying users that they may not receive notifications while battery saver is on and to make it easy for them to adjust **battery saver settings**. Using the battery saver settings URI scheme in Windows 10, `ms-settings:batterysaver-settings`, you can provide a convenient link to the Settings app.\n\n**Tip**   When notifying the user about battery saver settings, we recommend providing a way to suppress the message in the future. For example, the `dontAskMeAgainBox` checkbox in the following example persists the user's preference in [**LocalSettings**](https://msdn.microsoft.com/library/windows/apps/br241622).\n\n \n\nHere's an example of how to check if battery saver is turned on in Windows 10. This example notifies the user and launches the Settings app to **battery saver settings**. The `dontAskAgainSetting` lets the user suppress the message if they don't want to be notified again.\n\n```CSharp\nusing System;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Navigation;\nusing Windows.System;\nusing Windows.System.Power;\n...\n...\nasync public void CheckForEnergySaving()\n{\n   //Get reminder preference from LocalSettings\n   bool dontAskAgain;\n   var localSettings = Windows.Storage.ApplicationData.Current.LocalSettings;\n   object dontAskSetting = localSettings.Values[\"dontAskAgainSetting\"];\n   if (dontAskSetting == null)\n   {  // Setting does not exist\n      dontAskAgain = false;\n   }\n   else\n   {  // Retrieve setting value\n      dontAskAgain = Convert.ToBoolean(dontAskSetting);\n   }\n   \n   // Check if battery saver is on and that it&#39;s okay to raise dialog\n   if ((PowerManager.EnergySaverStatus == EnergySaverStatus.On)\n         &amp;&amp; (dontAskAgain == false))\n   {\n      // Check dialog results\n      ContentDialogResult dialogResult = await saveEnergyDialog.ShowAsync();\n      if (dialogResult == ContentDialogResult.Primary)\n      {\n         // Launch battery saver settings (settings are available only when a battery is present)\n         await Launcher.LaunchUriAsync(new Uri(\"ms-settings:batterysaver-settings\"));\n      }\n\n      // Save reminder preference\n      if (dontAskAgainBox.IsChecked == true)\n      {  // Don&#39;t raise dialog again\n         localSettings.Values[\"dontAskAgainSetting\"] = \"true\";\n      }\n   }\n}\n```\n\nThis is the XAML for the [**ContentDialog**](https://msdn.microsoft.com/library/windows/apps/dn633972) featured in this example.\n\n```XAML\n<ContentDialog x:Name=\"saveEnergyDialog\"\n               PrimaryButtonText=\"Open battery saver settings\"\n               SecondaryButtonText=\"Ignore\"\n               Title=\"Battery saver is on.\"> \n   <StackPanel>\n      <TextBlock TextWrapping=\"WrapWholeWords\">\n         <LineBreak/><Run>Battery saver is on and you may \n          not receive push notifications.</Run><LineBreak/>\n         <LineBreak/><Run>You can choose to allow this app to work normally\n         while in battery saver, including receiving push notifications.</Run>\n         <LineBreak/>\n      </TextBlock>\n      <CheckBox x:Name=\"dontAskAgainBox\" Content=\"OK, got it.\"/>\n   </StackPanel>\n</ContentDialog>\n```\n\n**Note**  \nThis article is for Windows 10 developers writing Universal Windows Platform (UWP) apps. If you’re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132).\n\n \n\n## <span id=\"related_topics\"></span>Related topics\n\n\n* [Send a local tile notification](tiles-and-notifications-sending-a-local-tile-notification.md)\n* [Quickstart: Sending a push notification](https://msdn.microsoft.com/library/windows/apps/xaml/hh868252)\n* [How to update a badge through push notifications](https://msdn.microsoft.com/library/windows/apps/hh465450)\n* [How to request, create, and save a notification channel](https://msdn.microsoft.com/library/windows/apps/hh465412)\n* [How to intercept notifications for running applications](https://msdn.microsoft.com/library/windows/apps/hh465450)\n* [How to authenticate with the Windows Push Notification Service (WNS)](https://msdn.microsoft.com/library/windows/apps/hh465407)\n* [Push notification service request and response headers](https://msdn.microsoft.com/library/windows/apps/hh465435)\n* [Guidelines and checklist for push notifications](https://msdn.microsoft.com/library/windows/apps/hh761462)\n* [Raw notifications](https://msdn.microsoft.com/library/windows/apps/hh761488)\n \n\n \n\n\n\n\n"}