<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="markdown" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>testmdarticle</source>
            <target state="new">testmdarticle</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>ms.ContentId: 4981828d-1a08-4d8c-a99d-874a926a153f
title: PowerShell to Docker Comparison</source>
            <target state="new">ms.ContentId: 4981828d-1a08-4d8c-a99d-874a926a153f
title: PowerShell to Docker Comparison</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>PowerShell to Docker comparison for managing Windows Server Containers</source>
            <target state="new">PowerShell to Docker comparison for managing Windows Server Containers</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>There are many ways to manage Windows Server Containers using both in-box Windows tools (PowerShell, in this preview) and Open Source management tools such as Docker.</source>
            <target state="new">There are many ways to manage Windows Server Containers using both in-box Windows tools (PowerShell, in this preview) and Open Source management tools such as Docker.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Guides outlining both individually available here:</source>
            <target state="new">Guides outlining both individually available here:</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>Manage Windows Server Containers with Docker</source>
            <target state="new">Manage Windows Server Containers with Docker</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Manage Windows Server Containers with PowerShell</source>
            <target state="new">Manage Windows Server Containers with PowerShell</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>This page is a more in depth reference comparing the Docker tools and PowerShell management tools.</source>
            <target state="new">This page is a more in depth reference comparing the Docker tools and PowerShell management tools.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>PowerShell for containers versus Hyper-V VMs</source>
            <target state="new">PowerShell for containers versus Hyper-V VMs</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>You can create, run, and interact with Windows Server Containers using PowerShell cmdlets.</source>
            <target state="new">You can create, run, and interact with Windows Server Containers using PowerShell cmdlets.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>Everything you need to get going is available in-box.</source>
            <target state="new">Everything you need to get going is available in-box.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>If you’ve used Hyper-V PowerShell, the design of the cmdlets should be pretty familiar to you.</source>
            <target state="new">If you’ve used Hyper-V PowerShell, the design of the cmdlets should be pretty familiar to you.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>A lot of the workflow is similar to how you’d manage a virtual machine using the Hyper-V module.</source>
            <target state="new">A lot of the workflow is similar to how you’d manage a virtual machine using the Hyper-V module.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>Instead of </source>
            <target state="new">Instead of </target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>, </source>
            <target state="new">, </target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>, </source>
            <target state="new">, </target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>, </source>
            <target state="new">, </target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>, you have </source>
            <target state="new">, you have </target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>, </source>
            <target state="new">, </target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>, </source>
            <target state="new">, </target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>, </source>
            <target state="new">, </target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>.</source>
            <target state="new">.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>There are quite a few container-specific cmdlets and parameters, but the general lifecycle and management of a Windows container looks roughly like that of a Hyper-V VM.</source>
            <target state="new">There are quite a few container-specific cmdlets and parameters, but the general lifecycle and management of a Windows container looks roughly like that of a Hyper-V VM.</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>How does PowerShell management compare to Docker?</source>
            <target state="new">How does PowerShell management compare to Docker?</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>The Containers PowerShell cmdlets expose an API that isn’t quite the same as Docker's; as a general rule, the cmdlets are more granular in operation.</source>
            <target state="new">The Containers PowerShell cmdlets expose an API that isn’t quite the same as Docker's; as a general rule, the cmdlets are more granular in operation.</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Some Docker commands have pretty straightforward parallels in PowerShell:</source>
            <target state="new">Some Docker commands have pretty straightforward parallels in PowerShell:</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>Docker command</source>
            <target state="new">Docker command</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>PowerShell Cmdlet</source>
            <target state="new">PowerShell Cmdlet</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>The PowerShell cmdlets are not an exact perfect parity, and there are a fair number of commands that we’re not providing PowerShell replacements for* (notably </source>
            <target state="new">The PowerShell cmdlets are not an exact perfect parity, and there are a fair number of commands that we’re not providing PowerShell replacements for* (notably </target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source> and </source>
            <target state="new"> and </target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>).</source>
            <target state="new">).</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>But what might leap out at you is that there’s no single one-line replacement for </source>
            <target state="new">But what might leap out at you is that there’s no single one-line replacement for </target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>.</source>
            <target state="new">.</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>\* Subject to change.</source>
            <target state="new">\* Subject to change.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>But I need docker run!</source>
            <target state="new">But I need docker run!</target>
          </trans-unit>
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>What’s going on?</source>
            <target state="new">What’s going on?</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>We’re doing a couple things here to provide a slightly more familiar interaction model for users who know their way around PowerShell already.</source>
            <target state="new">We’re doing a couple things here to provide a slightly more familiar interaction model for users who know their way around PowerShell already.</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Of course, if you’re used to the way docker operates, this will be a bit of a mental shift.</source>
            <target state="new">Of course, if you’re used to the way docker operates, this will be a bit of a mental shift.</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>The lifecycle of a container in the PowerShell model is slightly different.</source>
            <target state="new">The lifecycle of a container in the PowerShell model is slightly different.</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>In the Containers PowerShell module, we expose the more granular operations of </source>
            <target state="new">In the Containers PowerShell module, we expose the more granular operations of </target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source> (which creates a new container that’s stopped) and </source>
            <target state="new"> (which creates a new container that’s stopped) and </target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>.</source>
            <target state="new">.</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>In between creating and starting the container, you can also configure the container’s settings; for TP3, the only other configuration we’re planning to expose is the ability to set the network connection for the container.</source>
            <target state="new">In between creating and starting the container, you can also configure the container’s settings; for TP3, the only other configuration we’re planning to expose is the ability to set the network connection for the container.</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>using the (Add/Remove/Connect/Disconnect/Get/Set)-ContainerNetworkAdapter cmdlets.</source>
            <target state="new">using the (Add/Remove/Connect/Disconnect/Get/Set)-ContainerNetworkAdapter cmdlets.</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>You can’t currently pass a command to be run inside the container on start.</source>
            <target state="new">You can’t currently pass a command to be run inside the container on start.</target>
          </trans-unit>
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>However, you can still get an interactive PowerShell session to a running container using</source>
            <target state="new">However, you can still get an interactive PowerShell session to a running container using</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>, and you can execute a command inside a running container using </source>
            <target state="new">, and you can execute a command inside a running container using </target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source> or </source>
            <target state="new"> or </target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>.</source>
            <target state="new">.</target>
          </trans-unit>
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>Both of these commands allow the optional</source>
            <target state="new">Both of these commands allow the optional</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>flag for high privilige actions.</source>
            <target state="new">flag for high privilige actions.</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>Caveats and known issues</source>
            <target state="new">Caveats and known issues</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>Right now, the Containers cmdlets have no knowledge about any containers or images created through Docker, and Docker does not know anything about containers and images created through the PowerShell.</source>
            <target state="new">Right now, the Containers cmdlets have no knowledge about any containers or images created through Docker, and Docker does not know anything about containers and images created through the PowerShell.</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>If you created it in Docker, manage it with Docker; if you created it through PowerShell, manage it through PowerShell.</source>
            <target state="new">If you created it in Docker, manage it with Docker; if you created it through PowerShell, manage it through PowerShell.</target>
          </trans-unit>
        </group>
        <group id="52">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>We have quite a bit of work we'd like to do to improve the end user experience -- better error messages, better progress reporting, invalid event strings, and so forth.</source>
            <target state="new">We have quite a bit of work we'd like to do to improve the end user experience -- better error messages, better progress reporting, invalid event strings, and so forth.</target>
          </trans-unit>
        </group>
        <group id="53">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>If you happen to run into a situation where you wish you were getting more or better info, please feel free to send suggestions to the forums.</source>
            <target state="new">If you happen to run into a situation where you wish you were getting more or better info, please feel free to send suggestions to the forums.</target>
          </trans-unit>
        </group>
        <group id="54">
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>A quick runthrough</source>
            <target state="new">A quick runthrough</target>
          </trans-unit>
        </group>
        <group id="55">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>Here is a walk through of some common workflows.</source>
            <target state="new">Here is a walk through of some common workflows.</target>
          </trans-unit>
        </group>
        <group id="56">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>This assumes you've installed an OS container image named "ServerDatacenterCore" and created a virtual switch named "Virtual Switch" (using New-VMSwitch).</source>
            <target state="new">This assumes you've installed an OS container image named "ServerDatacenterCore" and created a virtual switch named "Virtual Switch" (using New-VMSwitch).</target>
          </trans-unit>
        </group>
        <group id="57">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>``` PowerShell</source>
            <target state="new">``` PowerShell</target>
          </trans-unit>
        </group>
        <group id="58">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>1. Enumerating images</source>
            <target state="new">1. Enumerating images</target>
          </trans-unit>
        </group>
        <group id="59">
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>At this point, you can enumerate the images on the system:</source>
            <target state="new">At this point, you can enumerate the images on the system:</target>
          </trans-unit>
        </group>
        <group id="60">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>Get-ContainerImage</source>
            <target state="new">Get-ContainerImage</target>
          </trans-unit>
        </group>
        <group id="61">
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>Get-ContainerImage also accepts filters.</source>
            <target state="new">Get-ContainerImage also accepts filters.</target>
          </trans-unit>
        </group>
        <group id="62">
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>For example, this will return all container images whose Name starts with S (case-insensitive):</source>
            <target state="new">For example, this will return all container images whose Name starts with S (case-insensitive):</target>
          </trans-unit>
        </group>
        <group id="63">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>Get-ContainerImage -Name S*</source>
            <target state="new">Get-ContainerImage -Name S*</target>
          </trans-unit>
        </group>
        <group id="64">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>You can save the results of this to a variable.</source>
            <target state="new">You can save the results of this to a variable.</target>
          </trans-unit>
        </group>
        <group id="65">
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>(If you're not familiar with PowerShell, the "$" denotes a variable.)</source>
            <target state="new">(If you're not familiar with PowerShell, the "$" denotes a variable.)</target>
          </trans-unit>
        </group>
        <group id="66">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>$baseImage = Get-ContainerImage -Name ServerDatacenterCore
$baseImage</source>
            <target state="new">$baseImage = Get-ContainerImage -Name ServerDatacenterCore
$baseImage</target>
          </trans-unit>
        </group>
        <group id="67">
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>2. Creating and enumerating containers</source>
            <target state="new">2. Creating and enumerating containers</target>
          </trans-unit>
        </group>
        <group id="68">
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>Now, we can create a new container using this image:</source>
            <target state="new">Now, we can create a new container using this image:</target>
          </trans-unit>
        </group>
        <group id="69">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>New-Container -Name "MyContainer" -ContainerImage $baseImage -SwitchName "Virtual Switch"</source>
            <target state="new">New-Container -Name "MyContainer" -ContainerImage $baseImage -SwitchName "Virtual Switch"</target>
          </trans-unit>
        </group>
        <group id="70">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>Now we can enumerate all containers.</source>
            <target state="new">Now we can enumerate all containers.</target>
          </trans-unit>
        </group>
        <group id="71">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>Get-Container</source>
            <target state="new">Get-Container</target>
          </trans-unit>
        </group>
        <group id="72">
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Similarly, we can save this container to a variable:</source>
            <target state="new">Similarly, we can save this container to a variable:</target>
          </trans-unit>
        </group>
        <group id="73">
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>$container1 = Get-Container -Name "MyContainer"</source>
            <target state="new">$container1 = Get-Container -Name "MyContainer"</target>
          </trans-unit>
        </group>
        <group id="74">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>3. Starting containers, interacting with running containers, and stopping containers</source>
            <target state="new">3. Starting containers, interacting with running containers, and stopping containers</target>
          </trans-unit>
        </group>
        <group id="75">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>Now let's go ahead and start the container.</source>
            <target state="new">Now let's go ahead and start the container.</target>
          </trans-unit>
        </group>
        <group id="76">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>Start-Container -Name "MyContainer"</source>
            <target state="new">Start-Container -Name "MyContainer"</target>
          </trans-unit>
        </group>
        <group id="77">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>(We could've also started this container using "Start-Container -Container $container1".)</source>
            <target state="new">(We could've also started this container using "Start-Container -Container $container1".)</target>
          </trans-unit>
        </group>
        <group id="78">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>With the container now running, let's go ahead and enter an interactive PowerShell session:</source>
            <target state="new">With the container now running, let's go ahead and enter an interactive PowerShell session:</target>
          </trans-unit>
        </group>
        <group id="79">
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>Enter-PSSession -ContainerId $container1.Id</source>
            <target state="new">Enter-PSSession -ContainerId $container1.Id</target>
          </trans-unit>
        </group>
        <group id="80">
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>This should eventually bring up a PowerShell prompt from inside the container.</source>
            <target state="new">This should eventually bring up a PowerShell prompt from inside the container.</target>
          </trans-unit>
        </group>
        <group id="81">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>You can try all the things that you did in the interactive cmd prompt given by "docker run -it".</source>
            <target state="new">You can try all the things that you did in the interactive cmd prompt given by "docker run -it".</target>
          </trans-unit>
        </group>
        <group id="82">
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>For now, just to prove we've been here, we can create a new file:</source>
            <target state="new">For now, just to prove we've been here, we can create a new file:</target>
          </trans-unit>
        </group>
        <group id="83">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>cd \
mkdir Test
cd Test
echo "hello world" &gt; hello.txt
exit</source>
            <target state="new">cd \
mkdir Test
cd Test
echo "hello world" &gt; hello.txt
exit</target>
          </trans-unit>
        </group>
        <group id="84">
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>Now we should be back in the outside world.</source>
            <target state="new">Now we should be back in the outside world.</target>
          </trans-unit>
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>Even though we've exited the PowerShell session,</source>
            <target state="new">Even though we've exited the PowerShell session,</target>
          </trans-unit>
        </group>
        <group id="85">
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>the container itself is still running, as you can see by printing out the container again:</source>
            <target state="new">the container itself is still running, as you can see by printing out the container again:</target>
          </trans-unit>
        </group>
        <group id="86">
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>$container1</source>
            <target state="new">$container1</target>
          </trans-unit>
        </group>
        <group id="87">
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>Before we can commit this container to a new image, we need to stop the container.</source>
            <target state="new">Before we can commit this container to a new image, we need to stop the container.</target>
          </trans-unit>
        </group>
        <group id="88">
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>Let's do that now.</source>
            <target state="new">Let's do that now.</target>
          </trans-unit>
        </group>
        <group id="89">
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>Stop-Container -Container $container1</source>
            <target state="new">Stop-Container -Container $container1</target>
          </trans-unit>
        </group>
        <group id="90">
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>4. Creating a new container image</source>
            <target state="new">4. Creating a new container image</target>
          </trans-unit>
        </group>
        <group id="91">
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>And now let's commit it to a new image.</source>
            <target state="new">And now let's commit it to a new image.</target>
          </trans-unit>
        </group>
        <group id="92">
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source>$image1 = New-ContainerImage -Container $container1 -Publisher Test -Name Image1 -Version 1.0</source>
            <target state="new">$image1 = New-ContainerImage -Container $container1 -Publisher Test -Name Image1 -Version 1.0</target>
          </trans-unit>
        </group>
        <group id="93">
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>Enumerate all the images again, for sanity's sake:</source>
            <target state="new">Enumerate all the images again, for sanity's sake:</target>
          </trans-unit>
        </group>
        <group id="94">
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source>Get-ContainerImage</source>
            <target state="new">Get-ContainerImage</target>
          </trans-unit>
        </group>
        <group id="95">
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source>Rinse and repeat!</source>
            <target state="new">Rinse and repeat!</target>
          </trans-unit>
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source>Make another container based on the new image.</source>
            <target state="new">Make another container based on the new image.</target>
          </trans-unit>
        </group>
        <group id="96">
          <trans-unit id="101" translate="yes" xml:space="preserve">
            <source>$container2 = New-Container -Name "MySecondContainer" -ContainerImage $image1 -SwitchName "Virtual Switch"</source>
            <target state="new">$container2 = New-Container -Name "MySecondContainer" -ContainerImage $image1 -SwitchName "Virtual Switch"</target>
          </trans-unit>
        </group>
        <group id="97">
          <trans-unit id="102" translate="yes" xml:space="preserve">
            <source>(If you like, you can start the second container and verify that the new file</source>
            <target state="new">(If you like, you can start the second container and verify that the new file</target>
          </trans-unit>
        </group>
        <group id="98">
          <trans-unit id="103" translate="yes" xml:space="preserve">
            <source>"\Test\hello.txt" is there as expected.)</source>
            <target state="new">"\Test\hello.txt" is there as expected.)</target>
          </trans-unit>
        </group>
        <group id="99">
          <trans-unit id="104" translate="yes" xml:space="preserve">
            <source>5. Removing a container</source>
            <target state="new">5. Removing a container</target>
          </trans-unit>
        </group>
        <group id="100">
          <trans-unit id="105" translate="yes" xml:space="preserve">
            <source>The first container we created is now stopped.</source>
            <target state="new">The first container we created is now stopped.</target>
          </trans-unit>
          <trans-unit id="106" translate="yes" xml:space="preserve">
            <source>Let's get rid of it:</source>
            <target state="new">Let's get rid of it:</target>
          </trans-unit>
        </group>
        <group id="101">
          <trans-unit id="107" translate="yes" xml:space="preserve">
            <source>Remove-Container -Container $container1</source>
            <target state="new">Remove-Container -Container $container1</target>
          </trans-unit>
        </group>
        <group id="102">
          <trans-unit id="108" translate="yes" xml:space="preserve">
            <source>And confirm that it's gone:</source>
            <target state="new">And confirm that it's gone:</target>
          </trans-unit>
        </group>
        <group id="103">
          <trans-unit id="109" translate="yes" xml:space="preserve">
            <source>Get-Container</source>
            <target state="new">Get-Container</target>
          </trans-unit>
        </group>
        <group id="104">
          <trans-unit id="110" translate="yes" xml:space="preserve">
            <source>6. Exporting, removing, and importing images</source>
            <target state="new">6. Exporting, removing, and importing images</target>
          </trans-unit>
        </group>
        <group id="105">
          <trans-unit id="111" translate="yes" xml:space="preserve">
            <source>For images that aren't the base OS image, we can export them into an .appx package file.</source>
            <target state="new">For images that aren't the base OS image, we can export them into an .appx package file.</target>
          </trans-unit>
        </group>
        <group id="106">
          <trans-unit id="112" translate="yes" xml:space="preserve">
            <source>Export-ContainerImage -Image $image1 -Path "C:\exports"</source>
            <target state="new">Export-ContainerImage -Image $image1 -Path "C:\exports"</target>
          </trans-unit>
        </group>
        <group id="107">
          <trans-unit id="113" translate="yes" xml:space="preserve">
            <source>This should create a .appx file in the C:\exports folder.</source>
            <target state="new">This should create a .appx file in the C:\exports folder.</target>
          </trans-unit>
        </group>
        <group id="108">
          <trans-unit id="114" translate="yes" xml:space="preserve">
            <source>If you've given your image the same publisher, name, and version we used earlier,</source>
            <target state="new">If you've given your image the same publisher, name, and version we used earlier,</target>
          </trans-unit>
        </group>
        <group id="109">
          <trans-unit id="115" translate="yes" xml:space="preserve">
            <source>you'd expect the resulting .appx to be named "CN=Test_Image1_1.0.0.0.appx".</source>
            <target state="new">you'd expect the resulting .appx to be named "CN=Test_Image1_1.0.0.0.appx".</target>
          </trans-unit>
        </group>
        <group id="110">
          <trans-unit id="116" translate="yes" xml:space="preserve">
            <source>Before we can try importing the image again, we need to remove the image.</source>
            <target state="new">Before we can try importing the image again, we need to remove the image.</target>
          </trans-unit>
        </group>
        <group id="111">
          <trans-unit id="117" translate="yes" xml:space="preserve">
            <source>(If you have any running containers that depend on this image, you'll want to stop them first.)</source>
            <target state="new">(If you have any running containers that depend on this image, you'll want to stop them first.)</target>
          </trans-unit>
        </group>
        <group id="112">
          <trans-unit id="118" translate="yes" xml:space="preserve">
            <source>Remove-ContainerImage -Image $image1</source>
            <target state="new">Remove-ContainerImage -Image $image1</target>
          </trans-unit>
        </group>
        <group id="113">
          <trans-unit id="119" translate="yes" xml:space="preserve">
            <source>Now let's import the image again:</source>
            <target state="new">Now let's import the image again:</target>
          </trans-unit>
        </group>
        <group id="114">
          <trans-unit id="120" translate="yes" xml:space="preserve">
            <source>Import-ContainerImage -Path C:\exports\CN=Test</source>
            <target state="new">Import-ContainerImage -Path C:\exports\CN=Test</target>
          </trans-unit>
        </group>
        <group id="115">
          <trans-unit id="121" translate="yes" xml:space="preserve">
            <source>Image1</source>
            <target state="new">Image1</target>
          </trans-unit>
        </group>
        <group id="116">
          <trans-unit id="122" translate="yes" xml:space="preserve">
            <source>1.0.0.0.appx</source>
            <target state="new">1.0.0.0.appx</target>
          </trans-unit>
        </group>
        <group id="117">
          <trans-unit id="123" translate="yes" xml:space="preserve">
            <source>We'd previously created a container dependent on this image.</source>
            <target state="new">We'd previously created a container dependent on this image.</target>
          </trans-unit>
          <trans-unit id="124" translate="yes" xml:space="preserve">
            <source>You should be able to start it:</source>
            <target state="new">You should be able to start it:</target>
          </trans-unit>
        </group>
        <group id="118">
          <trans-unit id="125" translate="yes" xml:space="preserve">
            <source>Start-Container -Container $container2 </source>
            <target state="new">Start-Container -Container $container2 </target>
          </trans-unit>
        </group>
        <group id="119">
          <trans-unit id="126" translate="yes" xml:space="preserve">
            <source>Docker</source>
            <target state="new">Docker</target>
          </trans-unit>
        </group>
        <group id="120">
          <trans-unit id="127" translate="yes" xml:space="preserve">
            <source>Windows Server Containers can be managed with Docker commands.</source>
            <target state="new">Windows Server Containers can be managed with Docker commands.</target>
          </trans-unit>
        </group>
        <group id="121">
          <trans-unit id="128" translate="yes" xml:space="preserve">
            <source>While Windows containers should be comparable to their Linux counterparts and have the same management experience through Docker, there are some Docker commands that simply don't make sense with a Windows container.</source>
            <target state="new">While Windows containers should be comparable to their Linux counterparts and have the same management experience through Docker, there are some Docker commands that simply don't make sense with a Windows container.</target>
          </trans-unit>
        </group>
        <group id="122">
          <trans-unit id="129" translate="yes" xml:space="preserve">
            <source>Others simply haven't been tested (we're getting there).</source>
            <target state="new">Others simply haven't been tested (we're getting there).</target>
          </trans-unit>
        </group>
        <group id="123">
          <trans-unit id="130" translate="yes" xml:space="preserve">
            <source>In an effort to not duplicate the API documentation available in Docker, here is a link to their management APIs.</source>
            <target state="new">In an effort to not duplicate the API documentation available in Docker, here is a link to their management APIs.</target>
          </trans-unit>
        </group>
        <group id="124">
          <trans-unit id="131" translate="yes" xml:space="preserve">
            <source>Their walkthroughs are fantastic.</source>
            <target state="new">Their walkthroughs are fantastic.</target>
          </trans-unit>
        </group>
        <group id="125">
          <trans-unit id="132" translate="yes" xml:space="preserve">
            <source>We're tracking things that do and don't work in the Docker APIs in our Work in Progress document.</source>
            <target state="new">We're tracking things that do and don't work in the Docker APIs in our Work in Progress document.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>