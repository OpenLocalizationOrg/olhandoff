<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\xaml-platform\custom-dependency-properties.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9be158bcfd777c2285ff8865063220fc13ae42c</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Explains how to define and implement custom dependency properties for a Windows Runtime app using C++, C#, or Visual Basic.</source>
          <target state="new">Explains how to define and implement custom dependency properties for a Windows Runtime app using C++, C#, or Visual Basic.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom dependency properties</source>
          <target state="new">Custom dependency properties</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom dependency properties</source>
          <target state="new">Custom dependency properties</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here we explain how to define and implement your own dependency properties for a Windows Runtime app using C++, C#, or Visual Basic.</source>
          <target state="new">Here we explain how to define and implement your own dependency properties for a Windows Runtime app using C++, C#, or Visual Basic.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We list reasons why app developers and component authors might want to create custom dependency properties.</source>
          <target state="new">We list reasons why app developers and component authors might want to create custom dependency properties.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We describe the implementation steps for a custom dependency property, as well as some best practices that can improve performance, usability, or versatility of the dependency property.</source>
          <target state="new">We describe the implementation steps for a custom dependency property, as well as some best practices that can improve performance, usability, or versatility of the dependency property.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>We assume that you have read the <bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](dependency-properties-overview.md)</ept> and that you understand dependency properties from the perspective of a consumer of existing dependency properties.</source>
          <target state="new">We assume that you have read the <bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](dependency-properties-overview.md)</ept> and that you understand dependency properties from the perspective of a consumer of existing dependency properties.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To follow the examples in this topic, you should also understand XAML and know how to write a basic Windows Runtime app using C++, C#, or Visual Basic.</source>
          <target state="new">To follow the examples in this topic, you should also understand XAML and know how to write a basic Windows Runtime app using C++, C#, or Visual Basic.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>What is a dependency property?</source>
          <target state="new">What is a dependency property?</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Dependency properties are properties that are registered with the Windows Runtime property system by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> method, and that are identified by a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> identifier member on the defining class.</source>
          <target state="new">Dependency properties are properties that are registered with the Windows Runtime property system by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> method, and that are identified by a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> identifier member on the defining class.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can enable what would otherwise be a common language runtime (CLR) or C++ property to support styling, data binding, animations, and default values by implementing it as a dependency property.</source>
          <target state="new">You can enable what would otherwise be a common language runtime (CLR) or C++ property to support styling, data binding, animations, and default values by implementing it as a dependency property.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Dependency properties can be used only by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> types.</source>
          <target state="new">Dependency properties can be used only by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> types.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>But <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> is quite high in the class hierarchy, so the majority of classes that are intended for UI and presentation support can support dependency properties.</source>
          <target state="new">But <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> is quite high in the class hierarchy, so the majority of classes that are intended for UI and presentation support can support dependency properties.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about dependency properties and some of the terminology and conventions used for describing them in this documentation, see <bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](dependency-properties-overview.md)</ept>.</source>
          <target state="new">For more information about dependency properties and some of the terminology and conventions used for describing them in this documentation, see <bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](dependency-properties-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Examples of dependency properties in the Windows Runtime are: <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control.Background<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209395)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.Width<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TextBox.Text<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209702)</ept>, among many others.</source>
          <target state="new">Examples of dependency properties in the Windows Runtime are: <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control.Background<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209395)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.Width<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208751)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TextBox.Text<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209702)</ept>, among many others.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each dependency property exposed by a class has a corresponding <bpt id="p1">**</bpt>public<ept id="p1">**</ept> <bpt id="p2">**</bpt>static<ept id="p2">**</ept> <bpt id="p3">**</bpt>readonly<ept id="p3">**</ept> property of type <bpt id="p4">[</bpt><bpt id="p5">**</bpt>DependencyProperty<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> that is exposed on that same class and that is the identifier for the dependency property.</source>
          <target state="new">Each dependency property exposed by a class has a corresponding <bpt id="p1">**</bpt>public<ept id="p1">**</ept> <bpt id="p2">**</bpt>static<ept id="p2">**</ept> <bpt id="p3">**</bpt>readonly<ept id="p3">**</ept> property of type <bpt id="p4">[</bpt><bpt id="p5">**</bpt>DependencyProperty<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> that is exposed on that same class and that is the identifier for the dependency property.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The identifier's name follows this convention: the name of the dependency property, with the string "Property" added to the end of the name.</source>
          <target state="new">The identifier's name follows this convention: the name of the dependency property, with the string "Property" added to the end of the name.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the corresponding <bpt id="p1">**</bpt>DependencyProperty<ept id="p1">**</ept> identifier for the <bpt id="p2">**</bpt>Control.Background<ept id="p2">**</ept> property is <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Control.BackgroundProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209396)</ept>.</source>
          <target state="new">For example, the corresponding <bpt id="p1">**</bpt>DependencyProperty<ept id="p1">**</ept> identifier for the <bpt id="p2">**</bpt>Control.Background<ept id="p2">**</ept> property is <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Control.BackgroundProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209396)</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The identifier stores the information about the dependency property as it was registered, and the identifier can then be used later for other operations involving the dependency property, such as calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept>.</source>
          <target state="new">The identifier stores the information about the dependency property as it was registered, and the identifier can then be used later for other operations involving the dependency property, such as calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Property wrappers</source>
          <target state="new">Property wrappers</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Dependency properties typically have a wrapper implementation.</source>
          <target state="new">Dependency properties typically have a wrapper implementation.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Without the wrapper, the only way to get or set the properties would be to use the dependency property utility methods <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> and to pass the identifier to them as a parameter.</source>
          <target state="new">Without the wrapper, the only way to get or set the properties would be to use the dependency property utility methods <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> and to pass the identifier to them as a parameter.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is a rather unnatural usage for something that is ostensibly a property.</source>
          <target state="new">This is a rather unnatural usage for something that is ostensibly a property.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>But with the wrapper, your code and any other code that references the dependency property can use a straightforward object-property syntax that is natural for the language you're using.</source>
          <target state="new">But with the wrapper, your code and any other code that references the dependency property can use a straightforward object-property syntax that is natural for the language you're using.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you implement a custom dependency property yourself and want it to be public and easy to call, define the property wrappers too.</source>
          <target state="new">If you implement a custom dependency property yourself and want it to be public and easy to call, define the property wrappers too.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The property wrappers are also useful for reporting basic information about the dependency property to reflection or static analysis processes.</source>
          <target state="new">The property wrappers are also useful for reporting basic information about the dependency property to reflection or static analysis processes.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specifically, the wrapper is where you place attributes such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentPropertyAttribute<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228011)</ept>.</source>
          <target state="new">Specifically, the wrapper is where you place attributes such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentPropertyAttribute<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228011)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When to implement a property as a dependency property</source>
          <target state="new">When to implement a property as a dependency property</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Whenever you implement a public read/write property on a class, as long as your class derives from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>, you have the option to make your property work as a dependency property.</source>
          <target state="new">Whenever you implement a public read/write property on a class, as long as your class derives from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>, you have the option to make your property work as a dependency property.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Sometimes the typical technique of backing your property with a private field is adequate.</source>
          <target state="new">Sometimes the typical technique of backing your property with a private field is adequate.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Defining your custom property as a dependency property is not always necessary or appropriate.</source>
          <target state="new">Defining your custom property as a dependency property is not always necessary or appropriate.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The choice will depend on the scenarios that you intend your property to support.</source>
          <target state="new">The choice will depend on the scenarios that you intend your property to support.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You might consider implementing your property as a dependency property when you want it to support one or more of these features of the Windows Runtime or of Windows Runtime apps:</source>
          <target state="new">You might consider implementing your property as a dependency property when you want it to support one or more of these features of the Windows Runtime or of Windows Runtime apps:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Setting the property through a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept></source>
          <target state="new">Setting the property through a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept></target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Acting as valid target property for data binding</source>
          <target state="new">Acting as valid target property for data binding</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Supporting animated values through a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Storyboard<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept></source>
          <target state="new">Supporting animated values through a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Storyboard<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept></target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Reporting when the previous value of the property has been changed by:</source>
          <target state="new">Reporting when the previous value of the property has been changed by:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Actions taken by the property system itself</source>
          <target state="new">Actions taken by the property system itself</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The environment</source>
          <target state="new">The environment</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>User actions</source>
          <target state="new">User actions</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Reading and writing styles</source>
          <target state="new">Reading and writing styles</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Checklist for defining a dependency property</source>
          <target state="new">Checklist for defining a dependency property</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Defining a dependency property can be thought of as a set of concepts.</source>
          <target state="new">Defining a dependency property can be thought of as a set of concepts.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These concepts are not necessarily procedural steps, because several concepts can be addressed in a single line of code in the implementation.</source>
          <target state="new">These concepts are not necessarily procedural steps, because several concepts can be addressed in a single line of code in the implementation.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This list gives just a quick overview.</source>
          <target state="new">This list gives just a quick overview.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>We'll explain each concept in more detail later in this topic, and we'll show you example code in several languages.</source>
          <target state="new">We'll explain each concept in more detail later in this topic, and we'll show you example code in several languages.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>(Optional) Create property metadata for the dependency property.</source>
          <target state="new">(Optional) Create property metadata for the dependency property.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You need property metadata only if you want property-changed behavior, or a metadata-based default value that can be restored by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ClearValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept>.</source>
          <target state="new">You need property metadata only if you want property-changed behavior, or a metadata-based default value that can be restored by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ClearValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Register the property name with the property system (call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>), specifying an owner type and the type of the property value.</source>
          <target state="new">Register the property name with the property system (call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>), specifying an owner type and the type of the property value.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There's a required parameter for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> that expects property metadata.</source>
          <target state="new">There's a required parameter for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> that expects property metadata.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Specify <bpt id="p1">**</bpt>null<ept id="p1">**</ept> for this, or specify the actual property metadata if you have declared any.</source>
          <target state="new">Specify <bpt id="p1">**</bpt>null<ept id="p1">**</ept> for this, or specify the actual property metadata if you have declared any.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Define a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> identifier as a <bpt id="p3">**</bpt>public<ept id="p3">**</ept> <bpt id="p4">**</bpt>static<ept id="p4">**</ept> <bpt id="p5">**</bpt>readonly<ept id="p5">**</ept> property member on the owner type.</source>
          <target state="new">Define a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> identifier as a <bpt id="p3">**</bpt>public<ept id="p3">**</ept> <bpt id="p4">**</bpt>static<ept id="p4">**</ept> <bpt id="p5">**</bpt>readonly<ept id="p5">**</ept> property member on the owner type.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Define a wrapper property, following the property accessor model that's used in the language you are implementing.</source>
          <target state="new">Define a wrapper property, following the property accessor model that's used in the language you are implementing.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The wrapper property name should match the <bpt id="p1">*</bpt>name<ept id="p1">*</ept> string that you used in <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Register<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>.</source>
          <target state="new">The wrapper property name should match the <bpt id="p1">*</bpt>name<ept id="p1">*</ept> string that you used in <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Register<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>set<ept id="p2">**</ept> accessors to connect the wrapper with the dependency property that it wraps, by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SetValue<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> and passing your own property's identifier as a parameter.</source>
          <target state="new">Implement the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>set<ept id="p2">**</ept> accessors to connect the wrapper with the dependency property that it wraps, by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SetValue<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> and passing your own property's identifier as a parameter.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(Optional) Place attributes such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentPropertyAttribute<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228011)</ept> on the wrapper.</source>
          <target state="new">(Optional) Place attributes such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentPropertyAttribute<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228011)</ept> on the wrapper.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you are defining a custom attached property, you generally omit the wrapper.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you are defining a custom attached property, you generally omit the wrapper.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead, you write a different style of accessor that a XAML processor can use.</source>
          <target state="new">Instead, you write a different style of accessor that a XAML processor can use.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Custom attached properties<ept id="p1">](custom-attached-properties.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Custom attached properties<ept id="p1">](custom-attached-properties.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Registering the property</source>
          <target state="new">Registering the property</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For your property to be a dependency property, you must register the property into a property store maintained by the Windows Runtime property system.</source>
          <target state="new">For your property to be a dependency property, you must register the property into a property store maintained by the Windows Runtime property system.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You must give the property a unique identifier to be used as the qualifier for later property-system operations.</source>
          <target state="new">You must give the property a unique identifier to be used as the qualifier for later property-system operations.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>These operations might be internal operations, or your own code calling property-system APIs.</source>
          <target state="new">These operations might be internal operations, or your own code calling property-system APIs.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To register the property, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> method.</source>
          <target state="new">To register the property, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> method.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For Microsoft .NET languages (C# and Microsoft Visual Basic) you call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> within the body of your class (inside the class, but outside any member definitions).</source>
          <target state="new">For Microsoft .NET languages (C# and Microsoft Visual Basic) you call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> within the body of your class (inside the class, but outside any member definitions).</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The identifier is also provided by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> method call, as the return value.</source>
          <target state="new">The identifier is also provided by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> method call, as the return value.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> call is typically made outside of other member definitions because you use the return value to assign and create a <bpt id="p3">**</bpt>public<ept id="p3">**</ept> <bpt id="p4">**</bpt>static<ept id="p4">**</ept> <bpt id="p5">**</bpt>readonly<ept id="p5">**</ept> property of type <bpt id="p6">[</bpt><bpt id="p7">**</bpt>DependencyProperty<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> as part of your class.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> call is typically made outside of other member definitions because you use the return value to assign and create a <bpt id="p3">**</bpt>public<ept id="p3">**</ept> <bpt id="p4">**</bpt>static<ept id="p4">**</ept> <bpt id="p5">**</bpt>readonly<ept id="p5">**</ept> property of type <bpt id="p6">[</bpt><bpt id="p7">**</bpt>DependencyProperty<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> as part of your class.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This property becomes the identifier for your dependency property.</source>
          <target state="new">This property becomes the identifier for your dependency property.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Here are examples of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> call.</source>
          <target state="new">Here are examples of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> call.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Registering the dependency property in a class body is the typical implementation, but you can also register a dependency property in the class static constructor.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Registering the dependency property in a class body is the typical implementation, but you can also register a dependency property in the class static constructor.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This approach may make sense if you need more than one line of code to initialize the dependency property.</source>
          <target state="new">This approach may make sense if you need more than one line of code to initialize the dependency property.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For C++, you have options for how you split the implementation between the header and the code file.</source>
          <target state="new">For C++, you have options for how you split the implementation between the header and the code file.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The typical split is to declare the identifier itself as <bpt id="p1">**</bpt>public<ept id="p1">**</ept> <bpt id="p2">**</bpt>static<ept id="p2">**</ept> property in the header, with a <bpt id="p3">**</bpt>get<ept id="p3">**</ept> implementation but no <bpt id="p4">**</bpt>set<ept id="p4">**</ept>.</source>
          <target state="new">The typical split is to declare the identifier itself as <bpt id="p1">**</bpt>public<ept id="p1">**</ept> <bpt id="p2">**</bpt>static<ept id="p2">**</ept> property in the header, with a <bpt id="p3">**</bpt>get<ept id="p3">**</ept> implementation but no <bpt id="p4">**</bpt>set<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>get<ept id="p1">**</ept> implementation refers to a private field, which is an uninitialized <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DependencyProperty<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> instance.</source>
          <target state="new">The <bpt id="p1">**</bpt>get<ept id="p1">**</ept> implementation refers to a private field, which is an uninitialized <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DependencyProperty<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> instance.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can also declare the wrappers and the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>set<ept id="p2">**</ept> implementations of the wrapper.</source>
          <target state="new">You can also declare the wrappers and the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>set<ept id="p2">**</ept> implementations of the wrapper.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In this case the header includes some minimal implementation.</source>
          <target state="new">In this case the header includes some minimal implementation.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the wrapper needs Windows Runtime attribution, attribute in the header too.</source>
          <target state="new">If the wrapper needs Windows Runtime attribution, attribute in the header too.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Put the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> call in the code file, within a helper function that only gets run when the app initializes the first time.</source>
          <target state="new">Put the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> call in the code file, within a helper function that only gets run when the app initializes the first time.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use the return value of <bpt id="p1">**</bpt>Register<ept id="p1">**</ept> to fill the static but uninitialized identifiers that you declared in the header, which you initially set to <bpt id="p2">**</bpt>nullptr<ept id="p2">**</ept> at the root scope of the implementation file.</source>
          <target state="new">Use the return value of <bpt id="p1">**</bpt>Register<ept id="p1">**</ept> to fill the static but uninitialized identifiers that you declared in the header, which you initially set to <bpt id="p2">**</bpt>nullptr<ept id="p2">**</ept> at the root scope of the implementation file.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For the C++ code, the reason why you have a private field and a public read-only property that surfaces the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DependencyProperty<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> is so that other callers who use your dependency property can also use property-system utility APIs that require the identifier to be public.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For the C++ code, the reason why you have a private field and a public read-only property that surfaces the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DependencyProperty<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> is so that other callers who use your dependency property can also use property-system utility APIs that require the identifier to be public.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you keep the identifier private, people can't use these utility APIs.</source>
          <target state="new">If you keep the identifier private, people can't use these utility APIs.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Examples of such API and scenarios include <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> by choice, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ClearValue<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>GetAnimationBaseValue<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br242358)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>SetBinding<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/br244257)</ept>, and <bpt id="p11">[</bpt><bpt id="p12">**</bpt>Setter.Property<ept id="p12">**</ept><ept id="p11">](https://msdn.microsoft.com/library/windows/apps/br208836)</ept>.</source>
          <target state="new">Examples of such API and scenarios include <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> by choice, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ClearValue<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>GetAnimationBaseValue<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br242358)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>SetBinding<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/br244257)</ept>, and <bpt id="p11">[</bpt><bpt id="p12">**</bpt>Setter.Property<ept id="p12">**</ept><ept id="p11">](https://msdn.microsoft.com/library/windows/apps/br208836)</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can't use a public field for this, because Windows Runtime compile rules don't allow public data members that use reference types like <bpt id="p1">**</bpt>DependencyProperty<ept id="p1">**</ept>.</source>
          <target state="new">You can't use a public field for this, because Windows Runtime compile rules don't allow public data members that use reference types like <bpt id="p1">**</bpt>DependencyProperty<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Dependency property name conventions</source>
          <target state="new">Dependency property name conventions</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>There are naming conventions for dependency properties; follow them in all but exceptional circumstances.</source>
          <target state="new">There are naming conventions for dependency properties; follow them in all but exceptional circumstances.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The dependency property itself has a basic name ("Label" in the preceding example) that is given as the first parameter of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>.</source>
          <target state="new">The dependency property itself has a basic name ("Label" in the preceding example) that is given as the first parameter of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The name must be unique within each registering type, and the uniqueness requirement also applies to any inherited members.</source>
          <target state="new">The name must be unique within each registering type, and the uniqueness requirement also applies to any inherited members.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Dependency properties inherited through base types are considered to be part of the registering type already; names of inherited properties cannot be registered again.</source>
          <target state="new">Dependency properties inherited through base types are considered to be part of the registering type already; names of inherited properties cannot be registered again.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  Although the name you provide here can be any string identifier that is valid in programming for your language of choice, you usually want to be able to set your dependency property in XAML too.</source>
          <target state="new"><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  Although the name you provide here can be any string identifier that is valid in programming for your language of choice, you usually want to be able to set your dependency property in XAML too.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To be set in XAML, the property name you choose must be a valid XAML name.</source>
          <target state="new">To be set in XAML, the property name you choose must be a valid XAML name.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>XAML overview<ept id="p1">](xaml-overview.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>XAML overview<ept id="p1">](xaml-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you create the identifier property, combine the name of the property as you registered it with the suffix "Property" ("LabelProperty", for example).</source>
          <target state="new">When you create the identifier property, combine the name of the property as you registered it with the suffix "Property" ("LabelProperty", for example).</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This property is your identifier for the dependency property, and it is used as an input for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> calls you make in your own property wrappers.</source>
          <target state="new">This property is your identifier for the dependency property, and it is used as an input for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> calls you make in your own property wrappers.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It is also used by the property system and potentially by XAML processors.</source>
          <target state="new">It is also used by the property system and potentially by XAML processors.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Implementing the wrapper</source>
          <target state="new">Implementing the wrapper</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Your property wrapper should call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> in the <bpt id="p3">**</bpt>get<ept id="p3">**</ept> implementation, and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SetValue<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> in the <bpt id="p6">**</bpt>set<ept id="p6">**</ept> implementation.</source>
          <target state="new">Your property wrapper should call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> in the <bpt id="p3">**</bpt>get<ept id="p3">**</ept> implementation, and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SetValue<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> in the <bpt id="p6">**</bpt>set<ept id="p6">**</ept> implementation.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  In all but exceptional circumstances, your wrapper implementations should perform only the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>GetValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SetValue<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> operations.</source>
          <target state="new"><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  In all but exceptional circumstances, your wrapper implementations should perform only the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>GetValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SetValue<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> operations.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Otherwise, you'll get different behavior when your property is set via XAML versus when it is set via code.</source>
          <target state="new">Otherwise, you'll get different behavior when your property is set via XAML versus when it is set via code.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For efficiency, the XAML parser bypasses wrappers when setting dependency properties; whenever possible, it uses the registry of dependency properties.</source>
          <target state="new">For efficiency, the XAML parser bypasses wrappers when setting dependency properties; whenever possible, it uses the registry of dependency properties.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Property metadata for a custom dependency property</source>
          <target state="new">Property metadata for a custom dependency property</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When property metadata is assigned to a dependency property, the same metadata is applied to that property for any instance of the property-owner type or its subclasses.</source>
          <target state="new">When property metadata is assigned to a dependency property, the same metadata is applied to that property for any instance of the property-owner type or its subclasses.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In property metadata, you can specify two behaviors:</source>
          <target state="new">In property metadata, you can specify two behaviors:</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A default value that the property system assigns to all cases of the property.</source>
          <target state="new">A default value that the property system assigns to all cases of the property.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A static callback method that is automatically invoked within the property system whenever a property value is detected.</source>
          <target state="new">A static callback method that is automatically invoked within the property system whenever a property value is detected.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Calling Register with property metadata</source>
          <target state="new">Calling Register with property metadata</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In the previous examples of calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>, we passed a null value for the <bpt id="p3">*</bpt>propertyMetadata<ept id="p3">*</ept> parameter.</source>
          <target state="new">In the previous examples of calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>, we passed a null value for the <bpt id="p3">*</bpt>propertyMetadata<ept id="p3">*</ept> parameter.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To enable a dependency property to provide a default value or use a property-changed callback, you must define a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyMetadata<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> instance that provides one or both of these capabilities.</source>
          <target state="new">To enable a dependency property to provide a default value or use a property-changed callback, you must define a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyMetadata<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> instance that provides one or both of these capabilities.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Typically you provide a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyMetadata<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> as an inline-created instance, within the parameters for <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty.Register<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>.</source>
          <target state="new">Typically you provide a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyMetadata<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> as an inline-created instance, within the parameters for <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty.Register<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept>.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you are defining a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CreateDefaultValueCallback<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept> implementation, you must use the utility method <bpt id="p4">[</bpt><bpt id="p5">**</bpt>PropertyMetadata.Create<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/hh702099)</ept> rather than calling a <bpt id="p6">[</bpt><bpt id="p7">**</bpt>PropertyMetadata<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> constructor to define the <bpt id="p8">**</bpt>PropertyMetadata<ept id="p8">**</ept> instance.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you are defining a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CreateDefaultValueCallback<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept> implementation, you must use the utility method <bpt id="p4">[</bpt><bpt id="p5">**</bpt>PropertyMetadata.Create<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/hh702099)</ept> rather than calling a <bpt id="p6">[</bpt><bpt id="p7">**</bpt>PropertyMetadata<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> constructor to define the <bpt id="p8">**</bpt>PropertyMetadata<ept id="p8">**</ept> instance.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This next example modifies the previously shown <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> examples by referencing a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PropertyMetadata<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> instance with a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>PropertyChangedCallback<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208770)</ept> value.</source>
          <target state="new">This next example modifies the previously shown <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> examples by referencing a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PropertyMetadata<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> instance with a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>PropertyChangedCallback<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208770)</ept> value.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The implementation of the "OnLabelChanged" callback will be shown later in this section.</source>
          <target state="new">The implementation of the "OnLabelChanged" callback will be shown later in this section.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Default value</source>
          <target state="new">Default value</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can specify a default value for a dependency property such that the property always returns a particular default value when it is unset.</source>
          <target state="new">You can specify a default value for a dependency property such that the property always returns a particular default value when it is unset.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This value can be different than the inherent default value for the type of that property.</source>
          <target state="new">This value can be different than the inherent default value for the type of that property.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If a default value is not specified, the default value for a dependency property is null for a reference type, or the default of the type for a value type or language primitive (for example, 0 for an integer or an empty string for a string).</source>
          <target state="new">If a default value is not specified, the default value for a dependency property is null for a reference type, or the default of the type for a value type or language primitive (for example, 0 for an integer or an empty string for a string).</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The main reason for establishing a default value is that this value is restored when you call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ClearValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept> on the property.</source>
          <target state="new">The main reason for establishing a default value is that this value is restored when you call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ClearValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242357)</ept> on the property.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Establishing a default value on a per-property basis might be more convenient than establishing default values in constructors, particularly for value types.</source>
          <target state="new">Establishing a default value on a per-property basis might be more convenient than establishing default values in constructors, particularly for value types.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>However, for reference types, make sure that establishing a default value does not create an unintentional singleton pattern.</source>
          <target state="new">However, for reference types, make sure that establishing a default value does not create an unintentional singleton pattern.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Best practices<ept id="p1">](#best-practices)</ept> later in this topic</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Best practices<ept id="p1">](#best-practices)</ept> later in this topic</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Do not register with a default value of <bpt id="p2">[</bpt><bpt id="p3">**</bpt>UnsetValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242371)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Do not register with a default value of <bpt id="p2">[</bpt><bpt id="p3">**</bpt>UnsetValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242371)</ept>.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If you do, it will confuse property consumers and will have unintended consequences within the property system.</source>
          <target state="new">If you do, it will confuse property consumers and will have unintended consequences within the property system.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CreateDefaultValueCallback</source>
          <target state="new">CreateDefaultValueCallback</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In some scenarios, you are defining dependency properties for objects that are used on more than one UI thread.</source>
          <target state="new">In some scenarios, you are defining dependency properties for objects that are used on more than one UI thread.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This might be the case if you are defining a data object that is used by multiple apps, or a control that you use in more than one app.</source>
          <target state="new">This might be the case if you are defining a data object that is used by multiple apps, or a control that you use in more than one app.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>You can enable the exchange of the object between different UI threads by providing a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept> implementation rather than a default value instance, which is tied to the thread that registered the property.</source>
          <target state="new">You can enable the exchange of the object between different UI threads by providing a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept> implementation rather than a default value instance, which is tied to the thread that registered the property.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Basically a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept> defines a factory for default values.</source>
          <target state="new">Basically a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept> defines a factory for default values.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The value returned by <bpt id="p1">**</bpt>CreateDefaultValueCallback<ept id="p1">**</ept> is always associated with the current UI <bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept> thread that is using the object.</source>
          <target state="new">The value returned by <bpt id="p1">**</bpt>CreateDefaultValueCallback<ept id="p1">**</ept> is always associated with the current UI <bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept> thread that is using the object.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To define metadata that specifies a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept>, you must call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PropertyMetadata.Create<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702115)</ept> to return a metadata instance; the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>PropertyMetadata<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> constructors do not have a signature that includes a <bpt id="p7">**</bpt>CreateDefaultValueCallback<ept id="p7">**</ept> parameter.</source>
          <target state="new">To define metadata that specifies a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept>, you must call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PropertyMetadata.Create<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702115)</ept> to return a metadata instance; the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>PropertyMetadata<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept> constructors do not have a signature that includes a <bpt id="p7">**</bpt>CreateDefaultValueCallback<ept id="p7">**</ept> parameter.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The typical implementation pattern for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept> is to create a new <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyObject<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> class, set the specific property value of each property of the <bpt id="p5">**</bpt>DependencyObject<ept id="p5">**</ept> to the intended default, and then return the new class as an <bpt id="p6">**</bpt>Object<ept id="p6">**</ept> reference via the return value of the <bpt id="p7">**</bpt>CreateDefaultValueCallback<ept id="p7">**</ept> method.</source>
          <target state="new">The typical implementation pattern for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateDefaultValueCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701812)</ept> is to create a new <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyObject<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> class, set the specific property value of each property of the <bpt id="p5">**</bpt>DependencyObject<ept id="p5">**</ept> to the intended default, and then return the new class as an <bpt id="p6">**</bpt>Object<ept id="p6">**</ept> reference via the return value of the <bpt id="p7">**</bpt>CreateDefaultValueCallback<ept id="p7">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Property-changed callback method</source>
          <target state="new">Property-changed callback method</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You can define a property-changed callback method to define your property's interactions with other dependency properties, or to set an internal property or state of your object whenever the property changes.</source>
          <target state="new">You can define a property-changed callback method to define your property's interactions with other dependency properties, or to set an internal property or state of your object whenever the property changes.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If your callback is invoked, the property system has determined that there is an effective property value change.</source>
          <target state="new">If your callback is invoked, the property system has determined that there is an effective property value change.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Because the callback method is static, the <bpt id="p1">*</bpt>d<ept id="p1">*</ept> parameter of the callback is important because it tells you which instance of the class has reported a change.</source>
          <target state="new">Because the callback method is static, the <bpt id="p1">*</bpt>d<ept id="p1">*</ept> parameter of the callback is important because it tells you which instance of the class has reported a change.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A typical implementation uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>NewValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242364)</ept> property of the event data and processes that value in some manner, usually by performing some other change on the object passed as <bpt id="p3">*</bpt>d<ept id="p3">*</ept>.</source>
          <target state="new">A typical implementation uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>NewValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242364)</ept> property of the event data and processes that value in some manner, usually by performing some other change on the object passed as <bpt id="p3">*</bpt>d<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Additional responses to a property change are to reject the value reported by <bpt id="p1">**</bpt>NewValue<ept id="p1">**</ept>, to restore <bpt id="p2">[</bpt><bpt id="p3">**</bpt>OldValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242365)</ept>, or to set the value to a programmatic constraint applied to the <bpt id="p4">**</bpt>NewValue<ept id="p4">**</ept>.</source>
          <target state="new">Additional responses to a property change are to reject the value reported by <bpt id="p1">**</bpt>NewValue<ept id="p1">**</ept>, to restore <bpt id="p2">[</bpt><bpt id="p3">**</bpt>OldValue<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242365)</ept>, or to set the value to a programmatic constraint applied to the <bpt id="p4">**</bpt>NewValue<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This next example shows a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyChangedCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208770)</ept> implementation.</source>
          <target state="new">This next example shows a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyChangedCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208770)</ept> implementation.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It implements the method you saw referenced in the previous <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> examples, as part of the construction arguments for the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PropertyMetadata<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept>.</source>
          <target state="new">It implements the method you saw referenced in the previous <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> examples, as part of the construction arguments for the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PropertyMetadata<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept>.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The scenario addressed by this callback is that the class also has a calculated read-only property named "HasLabelValue" (implementation not shown).</source>
          <target state="new">The scenario addressed by this callback is that the class also has a calculated read-only property named "HasLabelValue" (implementation not shown).</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Whenever the "Label" property gets reevaluated, this callback method is invoked, and the callback enables the dependent calculated value to remain in synchronization with changes to the dependency property.</source>
          <target state="new">Whenever the "Label" property gets reevaluated, this callback method is invoked, and the callback enables the dependent calculated value to remain in synchronization with changes to the dependency property.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Property changed behavior for structures and enumerations</source>
          <target state="new">Property changed behavior for structures and enumerations</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If the type of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> is an enumeration or a structure, the callback may be invoked even if the internal values of the structure or the enumeration value did not change.</source>
          <target state="new">If the type of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> is an enumeration or a structure, the callback may be invoked even if the internal values of the structure or the enumeration value did not change.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This is different from a system primitive such as a string where it only is invoked if the value changed.</source>
          <target state="new">This is different from a system primitive such as a string where it only is invoked if the value changed.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This is a side effect of box and unbox operations on these values that is done internally.</source>
          <target state="new">This is a side effect of box and unbox operations on these values that is done internally.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If you have a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyChangedCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208770)</ept> method for a property where your value is an enumeration or structure, you need to compare the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OldValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242365)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>NewValue<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242364)</ept> by casting the values yourself and using the overloaded comparison operators that are available to the now-cast values.</source>
          <target state="new">If you have a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyChangedCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208770)</ept> method for a property where your value is an enumeration or structure, you need to compare the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OldValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242365)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>NewValue<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242364)</ept> by casting the values yourself and using the overloaded comparison operators that are available to the now-cast values.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Or, if no such operator is available (which might be the case for a custom structure), you may need to compare the individual values.</source>
          <target state="new">Or, if no such operator is available (which might be the case for a custom structure), you may need to compare the individual values.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You would typically choose to do nothing if the result is that the values have not changed.</source>
          <target state="new">You would typically choose to do nothing if the result is that the values have not changed.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="new">Best practices</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Keep the following considerations in mind as best practices when as you define your custom dependency property.</source>
          <target state="new">Keep the following considerations in mind as best practices when as you define your custom dependency property.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>DependencyObject and threading</source>
          <target state="new">DependencyObject and threading</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> instances must be created on the UI thread which is associated with the current <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Window<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209041)</ept> that is shown by a Windows Runtime app.</source>
          <target state="new">All <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> instances must be created on the UI thread which is associated with the current <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Window<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209041)</ept> that is shown by a Windows Runtime app.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Although each <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> must be created on the main UI thread, the objects can be accessed using a dispatcher reference from other threads, by calling <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Dispatcher<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br230616)</ept>.</source>
          <target state="new">Although each <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept> must be created on the main UI thread, the objects can be accessed using a dispatcher reference from other threads, by calling <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Dispatcher<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br230616)</ept>.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The threading aspects of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> are relevant because it generally means that only code that runs on the UI thread can change or even read the value of a dependency property.</source>
          <target state="new">The threading aspects of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> are relevant because it generally means that only code that runs on the UI thread can change or even read the value of a dependency property.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Threading issues can usually be avoided in typical UI code that makes correct use of <bpt id="p1">**</bpt>async<ept id="p1">**</ept> patterns and background worker threads.</source>
          <target state="new">Threading issues can usually be avoided in typical UI code that makes correct use of <bpt id="p1">**</bpt>async<ept id="p1">**</ept> patterns and background worker threads.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>You typically only run into <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept>-related threading issues if you are defining your own <bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept> types and you attempt to use them for data sources or other scenarios where a <bpt id="p3">**</bpt>DependencyObject<ept id="p3">**</ept> isn't necessarily appropriate.</source>
          <target state="new">You typically only run into <bpt id="p1">**</bpt>DependencyObject<ept id="p1">**</ept>-related threading issues if you are defining your own <bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept> types and you attempt to use them for data sources or other scenarios where a <bpt id="p3">**</bpt>DependencyObject<ept id="p3">**</ept> isn't necessarily appropriate.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Avoiding unintentional singletons</source>
          <target state="new">Avoiding unintentional singletons</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>An unintentional singleton can happen if you are declaring a dependency property that takes a reference type, and you call a constructor for that reference type as part of the code that establishes your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyMetadata<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept>.</source>
          <target state="new">An unintentional singleton can happen if you are declaring a dependency property that takes a reference type, and you call a constructor for that reference type as part of the code that establishes your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PropertyMetadata<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208771)</ept>.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>What happens is that all usages of the dependency property share just one instance of <bpt id="p1">**</bpt>PropertyMetadata<ept id="p1">**</ept> and thus try to share the single reference type you constructed.</source>
          <target state="new">What happens is that all usages of the dependency property share just one instance of <bpt id="p1">**</bpt>PropertyMetadata<ept id="p1">**</ept> and thus try to share the single reference type you constructed.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Any subproperties of that value type that you set through your dependency property then propagate to other objects in ways you probably don't intend.</source>
          <target state="new">Any subproperties of that value type that you set through your dependency property then propagate to other objects in ways you probably don't intend.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You can use class constructors to set initial values for a reference-type dependency property if you want a non-null value, but be aware that this would be considered a local value for purposes of <bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](dependency-properties-overview.md)</ept>.</source>
          <target state="new">You can use class constructors to set initial values for a reference-type dependency property if you want a non-null value, but be aware that this would be considered a local value for purposes of <bpt id="p1">[</bpt>Dependency properties overview<ept id="p1">](dependency-properties-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>It might be more appropriate to use a template for this purpose, if your class supports templates.</source>
          <target state="new">It might be more appropriate to use a template for this purpose, if your class supports templates.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Another way to avoid a singleton pattern, but still provide a useful default, is to expose a static property on the reference type that provides a suitable default for the values of that class.</source>
          <target state="new">Another way to avoid a singleton pattern, but still provide a useful default, is to expose a static property on the reference type that provides a suitable default for the values of that class.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Collection-type dependency properties</source>
          <target state="new">Collection-type dependency properties</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Collection-type dependency properties have some additional implementation issues to consider.</source>
          <target state="new">Collection-type dependency properties have some additional implementation issues to consider.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Collection-type dependency properties are relatively rare in the Windows Runtime API.</source>
          <target state="new">Collection-type dependency properties are relatively rare in the Windows Runtime API.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In most cases, you can use collections where the items are a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> subclass, but the collection property itself is implemented as a conventional CLR or C++ property.</source>
          <target state="new">In most cases, you can use collections where the items are a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept> subclass, but the collection property itself is implemented as a conventional CLR or C++ property.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This is because collections do not necessarily suit some typical scenarios where dependency properties are involved.</source>
          <target state="new">This is because collections do not necessarily suit some typical scenarios where dependency properties are involved.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You do not typically animate a collection.</source>
          <target state="new">You do not typically animate a collection.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You do not typically prepopulate the items in a collection with styles or a template.</source>
          <target state="new">You do not typically prepopulate the items in a collection with styles or a template.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Although binding to collections is a major scenario, a collection does not need to be a dependency property to be a binding source.</source>
          <target state="new">Although binding to collections is a major scenario, a collection does not need to be a dependency property to be a binding source.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For binding targets, it is more typical to use subclasses of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242803)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DataTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242348)</ept> to support collection items, or to use view-model patterns.</source>
          <target state="new">For binding targets, it is more typical to use subclasses of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242803)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DataTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242348)</ept> to support collection items, or to use view-model patterns.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For more info about binding to and from collections, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</source>
          <target state="new">For more info about binding to and from collections, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Notifications for collection changes are better addressed through interfaces such as <bpt id="p1">**</bpt>INotifyPropertyChanged<ept id="p1">**</ept> or <bpt id="p2">**</bpt>INotifyCollectionChanged<ept id="p2">**</ept>, or by deriving the collection type from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ObservableCollection<ept id="p4">**</ept><ept id="p3">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept>.</source>
          <target state="new">Notifications for collection changes are better addressed through interfaces such as <bpt id="p1">**</bpt>INotifyPropertyChanged<ept id="p1">**</ept> or <bpt id="p2">**</bpt>INotifyCollectionChanged<ept id="p2">**</ept>, or by deriving the collection type from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ObservableCollection<ept id="p4">**</ept><ept id="p3">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept>.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Nevertheless, scenarios for collection-type dependency properties do exist.</source>
          <target state="new">Nevertheless, scenarios for collection-type dependency properties do exist.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The next three sections provide some guidance on how to implement a collection-type dependency property.</source>
          <target state="new">The next three sections provide some guidance on how to implement a collection-type dependency property.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Initializing the collection</source>
          <target state="new">Initializing the collection</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When you create a dependency property, you can establish a default value by means of dependency property metadata.</source>
          <target state="new">When you create a dependency property, you can establish a default value by means of dependency property metadata.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>But be careful to not use a singleton static collection as the default value.</source>
          <target state="new">But be careful to not use a singleton static collection as the default value.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Instead, you must deliberately set the collection value to a unique (instance) collection as part of class-constructor logic for the owner class of the collection property.</source>
          <target state="new">Instead, you must deliberately set the collection value to a unique (instance) collection as part of class-constructor logic for the owner class of the collection property.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Change notifications</source>
          <target state="new">Change notifications</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Defining the collection as a dependency property does not automatically provide change notification for the items in the collection by virtue of the property system invoking the "PropertyChanged" callback method.</source>
          <target state="new">Defining the collection as a dependency property does not automatically provide change notification for the items in the collection by virtue of the property system invoking the "PropertyChanged" callback method.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If you want notifications for collections or collection items—for example, for a data-binding scenario— implement the <bpt id="p1">**</bpt>INotifyPropertyChanged<ept id="p1">**</ept> or <bpt id="p2">**</bpt>INotifyCollectionChanged<ept id="p2">**</ept> interface.</source>
          <target state="new">If you want notifications for collections or collection items—for example, for a data-binding scenario— implement the <bpt id="p1">**</bpt>INotifyPropertyChanged<ept id="p1">**</ept> or <bpt id="p2">**</bpt>INotifyCollectionChanged<ept id="p2">**</ept> interface.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Dependency property security considerations</source>
          <target state="new">Dependency property security considerations</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Declare dependency properties as public properties.</source>
          <target state="new">Declare dependency properties as public properties.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Declare dependency property identifiers as public static read-only members.</source>
          <target state="new">Declare dependency property identifiers as public static read-only members.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Even if you attempt to declare other access levels permitted by a language (such as <bpt id="p1">**</bpt>protected<ept id="p1">**</ept>), a dependency property can always be accessed through the identifier in combination with the property-system APIs.</source>
          <target state="new">Even if you attempt to declare other access levels permitted by a language (such as <bpt id="p1">**</bpt>protected<ept id="p1">**</ept>), a dependency property can always be accessed through the identifier in combination with the property-system APIs.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Declaring the dependency property identifier as internal or private will not work, because then the property system cannot operate properly.</source>
          <target state="new">Declaring the dependency property identifier as internal or private will not work, because then the property system cannot operate properly.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Wrapper properties are really just for convenience, Security mechanisms applied to the wrappers can be bypassed by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> instead.</source>
          <target state="new">Wrapper properties are really just for convenience, Security mechanisms applied to the wrappers can be bypassed by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> instead.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>So keep wrapper properties public; otherwise you just make your property harder for legitimate callers to use without providing any real security benefit.</source>
          <target state="new">So keep wrapper properties public; otherwise you just make your property harder for legitimate callers to use without providing any real security benefit.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The Windows Runtime does not provide a way to register a custom dependency property as read-only.</source>
          <target state="new">The Windows Runtime does not provide a way to register a custom dependency property as read-only.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Dependency properties and class constructors</source>
          <target state="new">Dependency properties and class constructors</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>There is a general principle that class constructors should not call virtual methods.</source>
          <target state="new">There is a general principle that class constructors should not call virtual methods.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This is because constructors can be called to accomplish base initialization of a derived class constructor, and entering the virtual method through the constructor might occur when the object instance being constructed is not yet completely initialized.</source>
          <target state="new">This is because constructors can be called to accomplish base initialization of a derived class constructor, and entering the virtual method through the constructor might occur when the object instance being constructed is not yet completely initialized.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>When you derive from any class that already derives from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>, remember that the property system itself calls and exposes virtual methods internally as part of its services.</source>
          <target state="new">When you derive from any class that already derives from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>, remember that the property system itself calls and exposes virtual methods internally as part of its services.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To avoid potential problems with run-time initialization, don't set dependency property values within constructors of classes.</source>
          <target state="new">To avoid potential problems with run-time initialization, don't set dependency property values within constructors of classes.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Registering the dependency properties for C++/CX apps</source>
          <target state="new">Registering the dependency properties for C++/CX apps</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The implementation for registering a property in C++/CX is trickier than C#C#, both because of the separation into header and implementation file and also because initialization at the root scope of the implementation file is a bad practice.</source>
          <target state="new">The implementation for registering a property in C++/CX is trickier than C#C#, both because of the separation into header and implementation file and also because initialization at the root scope of the implementation file is a bad practice.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>(Visual C++ component extensions (C++/CX) puts static initializer code from the root scope directly into <bpt id="p1">**</bpt>DllMain<ept id="p1">**</ept>, whereas C# compilers assign the static initializers to classes and thus avoid <bpt id="p2">**</bpt>DllMain<ept id="p2">**</ept> load lock issues.).</source>
          <target state="new">(Visual C++ component extensions (C++/CX) puts static initializer code from the root scope directly into <bpt id="p1">**</bpt>DllMain<ept id="p1">**</ept>, whereas C# compilers assign the static initializers to classes and thus avoid <bpt id="p2">**</bpt>DllMain<ept id="p2">**</ept> load lock issues.).</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The best practice here is to declare a helper function that does all your dependency property registration for a class, one function per class.</source>
          <target state="new">The best practice here is to declare a helper function that does all your dependency property registration for a class, one function per class.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Then for each custom class your app consumes, you'll have to reference the helper registration function that's exposed by each custom class you want to use.</source>
          <target state="new">Then for each custom class your app consumes, you'll have to reference the helper registration function that's exposed by each custom class you want to use.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Call each helper registration function once as part of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application constructor<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242325)</ept> (<ph id="ph1">`App::App()`</ph>), prior to <ph id="ph2">`InitializeComponent`</ph>.</source>
          <target state="new">Call each helper registration function once as part of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application constructor<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242325)</ept> (<ph id="ph1">`App::App()`</ph>), prior to <ph id="ph2">`InitializeComponent`</ph>.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>That constructor only runs when the app is really referenced for the first time, it won't run again if a suspended app resumes, for example.</source>
          <target state="new">That constructor only runs when the app is really referenced for the first time, it won't run again if a suspended app resumes, for example.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Also, as seen in the previous C++ registration example, the <bpt id="p1">**</bpt>nullptr<ept id="p1">**</ept> check around each <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Register<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> call is important: it's insurance that no caller of the function can register the property twice.</source>
          <target state="new">Also, as seen in the previous C++ registration example, the <bpt id="p1">**</bpt>nullptr<ept id="p1">**</ept> check around each <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Register<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh701829)</ept> call is important: it's insurance that no caller of the function can register the property twice.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A second registration call would probably crash your app without such a check because the property name would be a duplicate.</source>
          <target state="new">A second registration call would probably crash your app without such a check because the property name would be a duplicate.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>You can see this implementation pattern in the <bpt id="p1">[</bpt>XAML user and custom controls sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=238581)</ept> if you look at the code for the C++/CX version of the sample.</source>
          <target state="new">You can see this implementation pattern in the <bpt id="p1">[</bpt>XAML user and custom controls sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=238581)</ept> if you look at the code for the C++/CX version of the sample.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>DependencyObject</source>
          <target state="new">DependencyObject</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>DependencyProperty.Register</source>
          <target state="new">DependencyProperty.Register</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Dependency properties overview</source>
          <target state="new">Dependency properties overview</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>XAML user and custom controls sample</source>
          <target state="new">XAML user and custom controls sample</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>