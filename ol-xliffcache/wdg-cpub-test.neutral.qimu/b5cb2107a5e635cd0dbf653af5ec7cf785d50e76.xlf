<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\usability\accessibility\custom-automation-peers.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5cb2107a5e635cd0dbf653af5ec7cf785d50e76</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Describes the concept of automation peers for Microsoft UI Automation, and how you can provide automation support for your own custom UI class.</source>
          <target state="new">Describes the concept of automation peers for Microsoft UI Automation, and how you can provide automation support for your own custom UI class.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom automation peers</source>
          <target state="new">Custom automation peers</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom automation peers</source>
          <target state="new">Custom automation peers</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Describes the concept of automation peers for Microsoft UI Automation, and how you can provide automation support for your own custom UI class.</source>
          <target state="new">Describes the concept of automation peers for Microsoft UI Automation, and how you can provide automation support for your own custom UI class.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>UI Automation provides a framework that automation clients can use to examine or operate the user interfaces of a variety of UI platforms and frameworks.</source>
          <target state="new">UI Automation provides a framework that automation clients can use to examine or operate the user interfaces of a variety of UI platforms and frameworks.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are writing a Universal Windows Platform (UWP) app, the classes that you use for your UI already provide UI Automation support.</source>
          <target state="new">If you are writing a Universal Windows Platform (UWP) app, the classes that you use for your UI already provide UI Automation support.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can derive from existing, non-sealed classes to define a new kind of UI control or support class.</source>
          <target state="new">You can derive from existing, non-sealed classes to define a new kind of UI control or support class.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the process of doing so, your class might add behavior that should have accessibility support but that the default UI Automation support does not cover.</source>
          <target state="new">In the process of doing so, your class might add behavior that should have accessibility support but that the default UI Automation support does not cover.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this case, you should extend the existing UI Automation support by deriving from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> class that the base implementation used, adding any necessary support to your peer implementation, and informing the Universal Windows Platform (UWP) control infrastructure that it should create your new peer.</source>
          <target state="new">In this case, you should extend the existing UI Automation support by deriving from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> class that the base implementation used, adding any necessary support to your peer implementation, and informing the Universal Windows Platform (UWP) control infrastructure that it should create your new peer.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>UI Automation enables not only accessibility applications and assistive technologies, such as screen readers, but also quality-assurance (test) code.</source>
          <target state="new">UI Automation enables not only accessibility applications and assistive technologies, such as screen readers, but also quality-assurance (test) code.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In either scenario, UI Automation clients can examine user-interface elements and simulate user interaction with your app from other code outside your app.</source>
          <target state="new">In either scenario, UI Automation clients can examine user-interface elements and simulate user interaction with your app from other code outside your app.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For info about UI Automation across all platforms and in its wider meaning, see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee684076)</ept>.</source>
          <target state="new">For info about UI Automation across all platforms and in its wider meaning, see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee684076)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are two distinct audiences who use the UI Automation framework.</source>
          <target state="new">There are two distinct audiences who use the UI Automation framework.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>UI Automation <bpt id="p1">*</bpt>clients<ept id="p1">*</ept> call UI Automation APIs to learn about all of the UI that is currently displayed to the user.</source>
          <target state="new">UI Automation <bpt id="p1">*</bpt>clients<ept id="p1">*</ept> call UI Automation APIs to learn about all of the UI that is currently displayed to the user.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, an assistive technology such as a screen reader acts as a UI Automation client.</source>
          <target state="new">For example, an assistive technology such as a screen reader acts as a UI Automation client.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The UI is presented as a tree of automation elements that are related.</source>
          <target state="new">The UI is presented as a tree of automation elements that are related.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The UI Automation client might be interested in just one app at a time, or in the entire tree.</source>
          <target state="new">The UI Automation client might be interested in just one app at a time, or in the entire tree.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The UI Automation client can use UI Automation APIs to navigate the tree and to read or change information in the automation elements.</source>
          <target state="new">The UI Automation client can use UI Automation APIs to navigate the tree and to read or change information in the automation elements.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>UI Automation <bpt id="p1">*</bpt>providers<ept id="p1">*</ept> contribute information to the UI Automation tree, by implementing APIs that expose the elements in the UI that they introduced as part of their app.</source>
          <target state="new">UI Automation <bpt id="p1">*</bpt>providers<ept id="p1">*</ept> contribute information to the UI Automation tree, by implementing APIs that expose the elements in the UI that they introduced as part of their app.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When you create a new control, you should now act as a participant in the UI Automation provider scenario.</source>
          <target state="new">When you create a new control, you should now act as a participant in the UI Automation provider scenario.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>As a provider, you should ensure that all UI Automation clients can use the UI Automation framework to interact with your control for both accessibility and testing purposes.</source>
          <target state="new">As a provider, you should ensure that all UI Automation clients can use the UI Automation framework to interact with your control for both accessibility and testing purposes.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Typically there are parallel APIs in the UI Automation framework: one API for UI Automation clients and another, similarly named API for UI Automation providers.</source>
          <target state="new">Typically there are parallel APIs in the UI Automation framework: one API for UI Automation clients and another, similarly named API for UI Automation providers.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For the most part, this topic covers the APIs for the UI Automation provider, and specifically the classes and interfaces that enable provider extensibility in that UI framework.</source>
          <target state="new">For the most part, this topic covers the APIs for the UI Automation provider, and specifically the classes and interfaces that enable provider extensibility in that UI framework.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Occasionally we mention UI Automation APIs that the UI Automation clients use, to provide some perspective, or provide a lookup table that correlates the client and provider APIs.</source>
          <target state="new">Occasionally we mention UI Automation APIs that the UI Automation clients use, to provide some perspective, or provide a lookup table that correlates the client and provider APIs.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more info about the client perspective, see <bpt id="p1">[</bpt>UI Automation Client Programmer's Guide<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee684021)</ept>.</source>
          <target state="new">For more info about the client perspective, see <bpt id="p1">[</bpt>UI Automation Client Programmer's Guide<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee684021)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>UI Automation clients don't typically use managed code and aren't typically implemented as a UWP app (they are usually desktop apps).</source>
          <target state="new">UI Automation clients don't typically use managed code and aren't typically implemented as a UWP app (they are usually desktop apps).</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>UI Automation is based on a standard and not a specific implementation or framework.</source>
          <target state="new">UI Automation is based on a standard and not a specific implementation or framework.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Many existing UI Automation clients, including assistive technology products such as screen readers, use Component Object Model (COM) interfaces to interact with UI Automation, the system, and the apps that run in child windows.</source>
          <target state="new">Many existing UI Automation clients, including assistive technology products such as screen readers, use Component Object Model (COM) interfaces to interact with UI Automation, the system, and the apps that run in child windows.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more info on the COM interfaces and how to write a UI Automation client using COM, see <bpt id="p1">[</bpt>UI Automation Fundamentals<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee684007)</ept>.</source>
          <target state="new">For more info on the COM interfaces and how to write a UI Automation client using COM, see <bpt id="p1">[</bpt>UI Automation Fundamentals<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee684007)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Determining the existing state of UI Automation support for your custom UI class</source>
          <target state="new">Determining the existing state of UI Automation support for your custom UI class</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Before you attempt to implement an automation peer for a custom control, you should test whether the base class and its automation peer already provides the accessibility or automation support that you need.</source>
          <target state="new">Before you attempt to implement an automation peer for a custom control, you should test whether the base class and its automation peer already provides the accessibility or automation support that you need.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In many cases, the combination of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElementAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> implementations, specific peers, and the patterns they implement can provide a basic but satisfactory accessibility experience.</source>
          <target state="new">In many cases, the combination of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElementAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> implementations, specific peers, and the patterns they implement can provide a basic but satisfactory accessibility experience.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Whether this is true depends on how many changes you made to the object model exposure to your control versus its base class.</source>
          <target state="new">Whether this is true depends on how many changes you made to the object model exposure to your control versus its base class.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Also, this depends on whether your additions to base class functionality correlate to new UI elements in the template contract or to the visual appearance of the control.</source>
          <target state="new">Also, this depends on whether your additions to base class functionality correlate to new UI elements in the template contract or to the visual appearance of the control.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In some cases your changes might introduce new aspects of user experience that require additional accessibility support.</source>
          <target state="new">In some cases your changes might introduce new aspects of user experience that require additional accessibility support.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Even if using the existing base peer class provides the basic accessibility support, it is still a best practice to define a peer so that you can report precise <bpt id="p1">**</bpt>ClassName<ept id="p1">**</ept> information to UI Automation for automated testing scenarios.</source>
          <target state="new">Even if using the existing base peer class provides the basic accessibility support, it is still a best practice to define a peer so that you can report precise <bpt id="p1">**</bpt>ClassName<ept id="p1">**</ept> information to UI Automation for automated testing scenarios.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This consideration is especially important if you are writing a control that is intended for third-party consumption.</source>
          <target state="new">This consideration is especially important if you are writing a control that is intended for third-party consumption.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Automation peer classes</source>
          <target state="new">Automation peer classes</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The UWP builds on existing UI Automation techniques and conventions used by previous managed-code UI frameworks such as Windows Forms, Windows Presentation Foundation (WPF) and Microsoft Silverlight.</source>
          <target state="new">The UWP builds on existing UI Automation techniques and conventions used by previous managed-code UI frameworks such as Windows Forms, Windows Presentation Foundation (WPF) and Microsoft Silverlight.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Many of the control classes and their function and purpose also have their origin in a previous UI framework.</source>
          <target state="new">Many of the control classes and their function and purpose also have their origin in a previous UI framework.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>By convention, peer class names begin with the control class name and end with "AutomationPeer".</source>
          <target state="new">By convention, peer class names begin with the control class name and end with "AutomationPeer".</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ButtonAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242458)</ept> is the peer class for the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Button<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> control class.</source>
          <target state="new">For example, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ButtonAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242458)</ept> is the peer class for the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Button<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> control class.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For purposes of this topic, we treat the properties that are related to accessibility as being more important when you implement a control peer.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For purposes of this topic, we treat the properties that are related to accessibility as being more important when you implement a control peer.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>But for a more general concept of UI Automation support, you should implement a peer in accordance with recommendations as documented by the <bpt id="p1">[</bpt>UI Automation Provider Programmer's Guide<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671596)</ept> and <bpt id="p2">[</bpt>UI Automation Fundamentals<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/Ee684007)</ept>.</source>
          <target state="new">But for a more general concept of UI Automation support, you should implement a peer in accordance with recommendations as documented by the <bpt id="p1">[</bpt>UI Automation Provider Programmer's Guide<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671596)</ept> and <bpt id="p2">[</bpt>UI Automation Fundamentals<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/Ee684007)</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Those topics don't cover the specific <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> APIs that you would use to provide the information in the UWP framework for UI Automation, but they do describe the properties that identify your class or provide other information or interaction.</source>
          <target state="new">Those topics don't cover the specific <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> APIs that you would use to provide the information in the UWP framework for UI Automation, but they do describe the properties that identify your class or provide other information or interaction.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Peers, patterns and control types</source>
          <target state="new">Peers, patterns and control types</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>control pattern<ept id="p1">*</ept> is an interface implementation that exposes a particular aspect of a control's functionality to a UI Automation client.</source>
          <target state="new">A <bpt id="p1">*</bpt>control pattern<ept id="p1">*</ept> is an interface implementation that exposes a particular aspect of a control's functionality to a UI Automation client.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>UI Automation clients use the properties and methods exposed through a control pattern to retrieve information about capabilities of the control, or to manipulate the control's behavior at run time.</source>
          <target state="new">UI Automation clients use the properties and methods exposed through a control pattern to retrieve information about capabilities of the control, or to manipulate the control's behavior at run time.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Control patterns provide a way to categorize and expose a control's functionality independent of the control type or the appearance of the control.</source>
          <target state="new">Control patterns provide a way to categorize and expose a control's functionality independent of the control type or the appearance of the control.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, a control that presents a tabular interface uses the <bpt id="p1">**</bpt>Grid<ept id="p1">**</ept> control pattern to expose the number of rows and columns in the table, and to enable a UI Automation client to retrieve items from the table.</source>
          <target state="new">For example, a control that presents a tabular interface uses the <bpt id="p1">**</bpt>Grid<ept id="p1">**</ept> control pattern to expose the number of rows and columns in the table, and to enable a UI Automation client to retrieve items from the table.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>As other examples, the UI Automation client can use the <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> control pattern for controls that can be invoked, such as buttons, and the <bpt id="p2">**</bpt>Scroll<ept id="p2">**</ept> control pattern for controls that have scroll bars, such as list boxes, list views, or combo boxes.</source>
          <target state="new">As other examples, the UI Automation client can use the <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> control pattern for controls that can be invoked, such as buttons, and the <bpt id="p2">**</bpt>Scroll<ept id="p2">**</ept> control pattern for controls that have scroll bars, such as list boxes, list views, or combo boxes.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Each control pattern represents a separate type of functionality, and control patterns can be combined to describe the full set of functionality supported by a particular control.</source>
          <target state="new">Each control pattern represents a separate type of functionality, and control patterns can be combined to describe the full set of functionality supported by a particular control.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Control patterns relate to UI as interfaces relate to COM objects.</source>
          <target state="new">Control patterns relate to UI as interfaces relate to COM objects.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In COM, you can query an object to ask what interfaces it supports and then use those interfaces to access functionality.</source>
          <target state="new">In COM, you can query an object to ask what interfaces it supports and then use those interfaces to access functionality.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In UI Automation, UI Automation clients can query a UI Automation element to find out which control patterns it supports, and then interact with the element and its peered control through the properties, methods, events, and structures exposed by the supported control patterns.</source>
          <target state="new">In UI Automation, UI Automation clients can query a UI Automation element to find out which control patterns it supports, and then interact with the element and its peered control through the properties, methods, events, and structures exposed by the supported control patterns.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>One of the main purposes of an automation peer is to report to a UI Automation client which control patterns the UI element can support through its peer.</source>
          <target state="new">One of the main purposes of an automation peer is to report to a UI Automation client which control patterns the UI element can support through its peer.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To do this, UI Automation providers implement new peers that change the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPattern<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> method behavior by overriding the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetPatternCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> method.</source>
          <target state="new">To do this, UI Automation providers implement new peers that change the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPattern<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> method behavior by overriding the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetPatternCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> method.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>UI Automation clients make calls that the UI Automation provider maps to calling <bpt id="p1">**</bpt>GetPattern<ept id="p1">**</ept>.</source>
          <target state="new">UI Automation clients make calls that the UI Automation provider maps to calling <bpt id="p1">**</bpt>GetPattern<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>UI Automation clients query for each specific pattern that they want to interact with.</source>
          <target state="new">UI Automation clients query for each specific pattern that they want to interact with.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the peer supports the pattern, it returns an object reference to itself; otherwise it returns <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</source>
          <target state="new">If the peer supports the pattern, it returns an object reference to itself; otherwise it returns <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the return is not <bpt id="p1">**</bpt>null<ept id="p1">**</ept>, the UI Automation client expects that it can call APIs of the pattern interface as a client, in order to interact with that control pattern.</source>
          <target state="new">If the return is not <bpt id="p1">**</bpt>null<ept id="p1">**</ept>, the UI Automation client expects that it can call APIs of the pattern interface as a client, in order to interact with that control pattern.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>control type<ept id="p1">*</ept> is a way to broadly define the functionality of a control that the peer represents.</source>
          <target state="new">A <bpt id="p1">*</bpt>control type<ept id="p1">*</ept> is a way to broadly define the functionality of a control that the peer represents.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This is a different concept than a control pattern because while a pattern informs UI Automation what info it can get or what actions it can perform through a particular interface, the control type exists one level above that.</source>
          <target state="new">This is a different concept than a control pattern because while a pattern informs UI Automation what info it can get or what actions it can perform through a particular interface, the control type exists one level above that.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Each control type has guidance about these aspects of UI Automation:</source>
          <target state="new">Each control type has guidance about these aspects of UI Automation:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>UI Automation control patterns: A control type might support more than one pattern, each of which represents a different classification of info or interaction.</source>
          <target state="new">UI Automation control patterns: A control type might support more than one pattern, each of which represents a different classification of info or interaction.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Each control type has a set of control patterns that the control must support, a set that is optional, and a set that the control must not support.</source>
          <target state="new">Each control type has a set of control patterns that the control must support, a set that is optional, and a set that the control must not support.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>UI Automation property values: Each control type has a set of properties that the control must support.</source>
          <target state="new">UI Automation property values: Each control type has a set of properties that the control must support.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These are the general properties, as described in <bpt id="p1">[</bpt>UI Automation Properties Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671594)</ept>, not the ones that are pattern-specific.</source>
          <target state="new">These are the general properties, as described in <bpt id="p1">[</bpt>UI Automation Properties Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671594)</ept>, not the ones that are pattern-specific.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>UI Automation events: Each control type has a set of events that the control must support.</source>
          <target state="new">UI Automation events: Each control type has a set of events that the control must support.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Again these are general, not pattern-specific, as described in <bpt id="p1">[</bpt>UI Automation Events Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671221)</ept>.</source>
          <target state="new">Again these are general, not pattern-specific, as described in <bpt id="p1">[</bpt>UI Automation Events Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671221)</ept>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>UI Automation tree structure: Each control type defines how the control must appear in the UI Automation tree structure.</source>
          <target state="new">UI Automation tree structure: Each control type defines how the control must appear in the UI Automation tree structure.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Regardless of how automation peers for the framework are implemented, UI Automation client functionality isn't tied to the UWP, and in fact it's likely that existing UI Automation clients such as assistive technologies will use other programming models, such as COM.</source>
          <target state="new">Regardless of how automation peers for the framework are implemented, UI Automation client functionality isn't tied to the UWP, and in fact it's likely that existing UI Automation clients such as assistive technologies will use other programming models, such as COM.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In COM, clients can <bpt id="p1">**</bpt>QueryInterface<ept id="p1">**</ept> for the COM control pattern interface that implements the requested pattern or the general UI Automation framework for properties, events or tree examination.</source>
          <target state="new">In COM, clients can <bpt id="p1">**</bpt>QueryInterface<ept id="p1">**</ept> for the COM control pattern interface that implements the requested pattern or the general UI Automation framework for properties, events or tree examination.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For the patterns, the UI Automation framework marshals that interface code across into UWP code running against the app's UI Automation provider and the relevant peer.</source>
          <target state="new">For the patterns, the UI Automation framework marshals that interface code across into UWP code running against the app's UI Automation provider and the relevant peer.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When you implement control patterns for a managed-code framework such as a Windows Store app using C<ph id="ph1">\#</ph> or Microsoft Visual Basic, you can use .NET Framework interfaces to represent these patterns instead of using the COM interface representation.</source>
          <target state="new">When you implement control patterns for a managed-code framework such as a Windows Store app using C<ph id="ph1">\#</ph> or Microsoft Visual Basic, you can use .NET Framework interfaces to represent these patterns instead of using the COM interface representation.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, the UI Automation pattern interface for a Microsoft .NET provider implementation of the <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> pattern is <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IInvokeProvider<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242582)</ept>.</source>
          <target state="new">For example, the UI Automation pattern interface for a Microsoft .NET provider implementation of the <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> pattern is <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IInvokeProvider<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242582)</ept>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For a list of control patterns, provider interfaces, and their purpose, see <bpt id="p1">[</bpt>Control patterns and interfaces<ept id="p1">](control-patterns-and-interfaces.md)</ept>.</source>
          <target state="new">For a list of control patterns, provider interfaces, and their purpose, see <bpt id="p1">[</bpt>Control patterns and interfaces<ept id="p1">](control-patterns-and-interfaces.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For the list of the control types, see <bpt id="p1">[</bpt>UI Automation Control Types Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671197)</ept>.</source>
          <target state="new">For the list of the control types, see <bpt id="p1">[</bpt>UI Automation Control Types Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671197)</ept>.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Guidance for how to implement control patterns</source>
          <target state="new">Guidance for how to implement control patterns</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The control patterns and what they're intended for are part of a larger definition of the UI Automation framework, and don't just apply to the accessibility support for a Windows Store app.</source>
          <target state="new">The control patterns and what they're intended for are part of a larger definition of the UI Automation framework, and don't just apply to the accessibility support for a Windows Store app.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When you implement a control pattern you should make sure you're implementing it in a way that matches the guidance as documented on MSDN and also in the UI Automation specification.</source>
          <target state="new">When you implement a control pattern you should make sure you're implementing it in a way that matches the guidance as documented on MSDN and also in the UI Automation specification.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you're looking for guidance, you can generally use the MSDN topics and won't need to refer to the specification.</source>
          <target state="new">If you're looking for guidance, you can generally use the MSDN topics and won't need to refer to the specification.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Guidance for each pattern is documented here: <bpt id="p1">[</bpt>Implementing UI Automation Control Patterns<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671292)</ept>.</source>
          <target state="new">Guidance for each pattern is documented here: <bpt id="p1">[</bpt>Implementing UI Automation Control Patterns<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671292)</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You'll notice that each topic under this area has an "Implementation Guidelines and Conventions" section and "Required Members" section.</source>
          <target state="new">You'll notice that each topic under this area has an "Implementation Guidelines and Conventions" section and "Required Members" section.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The guidance usually refers to specific APIs of the relevant control pattern interface in the <bpt id="p1">[</bpt>Control Pattern Interfaces for Providers<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671201)</ept> reference.</source>
          <target state="new">The guidance usually refers to specific APIs of the relevant control pattern interface in the <bpt id="p1">[</bpt>Control Pattern Interfaces for Providers<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671201)</ept> reference.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Those interfaces are the native/COM interfaces (and their APIs use COM-style syntax).</source>
          <target state="new">Those interfaces are the native/COM interfaces (and their APIs use COM-style syntax).</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>But everything you see there has an equivalent in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Automation.Provider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209225)</ept> namespace.</source>
          <target state="new">But everything you see there has an equivalent in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Automation.Provider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209225)</ept> namespace.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you're using the default automation peers and expanding on their behavior, those peers have already been written in conformance to UI Automation guidelines.</source>
          <target state="new">If you're using the default automation peers and expanding on their behavior, those peers have already been written in conformance to UI Automation guidelines.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If they support control patterns, you can rely on that pattern support conforming with guidance at <bpt id="p1">[</bpt>Implementing UI Automation Control Patterns<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671292)</ept>.</source>
          <target state="new">If they support control patterns, you can rely on that pattern support conforming with guidance at <bpt id="p1">[</bpt>Implementing UI Automation Control Patterns<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671292)</ept>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If a control peer reports that it's representative of a control type defined by UI Automation, then the guidance documented at <bpt id="p1">[</bpt>Supporting UI Automation Control Types<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671633)</ept> has been followed by that peer.</source>
          <target state="new">If a control peer reports that it's representative of a control type defined by UI Automation, then the guidance documented at <bpt id="p1">[</bpt>Supporting UI Automation Control Types<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671633)</ept> has been followed by that peer.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Nevertheless you might need additional guidance for control patterns or control types in order to follow the UI Automation recommendations in your peer implementation.</source>
          <target state="new">Nevertheless you might need additional guidance for control patterns or control types in order to follow the UI Automation recommendations in your peer implementation.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>That would be particularly true if you're implementing pattern or control type support that doesn't yet exist as a default implementation in a UWP control.</source>
          <target state="new">That would be particularly true if you're implementing pattern or control type support that doesn't yet exist as a default implementation in a UWP control.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, the pattern for annotations isn't implemented in any of the default XAML controls.</source>
          <target state="new">For example, the pattern for annotations isn't implemented in any of the default XAML controls.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>But you might have an app that uses annotations extensively and therefore you want to surface that functionality to be accessible.</source>
          <target state="new">But you might have an app that uses annotations extensively and therefore you want to surface that functionality to be accessible.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For this scenario, your peer should implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IAnnotationProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh738493)</ept> and should probably report itself as the <bpt id="p3">**</bpt>Document<ept id="p3">**</ept> control type with appropriate properties to indicate that your documents support annotation.</source>
          <target state="new">For this scenario, your peer should implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IAnnotationProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh738493)</ept> and should probably report itself as the <bpt id="p3">**</bpt>Document<ept id="p3">**</ept> control type with appropriate properties to indicate that your documents support annotation.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>We recommend that you use the guidance that you see for the patterns under <bpt id="p1">[</bpt>Implementing UI Automation Control Patterns<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671292)</ept> or control types under <bpt id="p2">[</bpt>Supporting UI Automation Control Types<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/Ee671633)</ept> as orientation and general guidance.</source>
          <target state="new">We recommend that you use the guidance that you see for the patterns under <bpt id="p1">[</bpt>Implementing UI Automation Control Patterns<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671292)</ept> or control types under <bpt id="p2">[</bpt>Supporting UI Automation Control Types<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/Ee671633)</ept> as orientation and general guidance.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You might even try following some of the API links for descriptions and remarks as to the purpose of the APIs.</source>
          <target state="new">You might even try following some of the API links for descriptions and remarks as to the purpose of the APIs.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>But for syntax specifics that are needed for UWP app programming, find the equivalent API within the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Automation.Provider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209225)</ept> namespace and use those reference pages for more info.</source>
          <target state="new">But for syntax specifics that are needed for UWP app programming, find the equivalent API within the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Automation.Provider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209225)</ept> namespace and use those reference pages for more info.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Built-in automation peer classes</source>
          <target state="new">Built-in automation peer classes</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In general, elements implement an automation peer class if they accept UI activity from the user, or if they contain information needed by users of assistive technologies that represent the interactive or meaningful UI of apps.</source>
          <target state="new">In general, elements implement an automation peer class if they accept UI activity from the user, or if they contain information needed by users of assistive technologies that represent the interactive or meaningful UI of apps.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Not all UWP visual elements have automation peers.</source>
          <target state="new">Not all UWP visual elements have automation peers.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Examples of classes that implement automation peers are <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TextBox<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept>.</source>
          <target state="new">Examples of classes that implement automation peers are <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TextBox<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Examples of classes that do not implement automation peers are <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Border<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209250)</ept> and classes based on <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Panel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227511)</ept>, such as <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Grid<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Canvas<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR209267)</ept>.</source>
          <target state="new">Examples of classes that do not implement automation peers are <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Border<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209250)</ept> and classes based on <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Panel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227511)</ept>, such as <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Grid<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Canvas<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR209267)</ept>.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept> has no peer because it is providing a layout behavior that is visual only.</source>
          <target state="new">A <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept> has no peer because it is providing a layout behavior that is visual only.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>There is no accessibility-relevant way for the user to interact with a <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept>.</source>
          <target state="new">There is no accessibility-relevant way for the user to interact with a <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Whatever child elements a <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept> contains are instead reported to UI Automation trees as child elements of the next available parent in the tree that has a peer or element representation.</source>
          <target state="new">Whatever child elements a <bpt id="p1">**</bpt>Panel<ept id="p1">**</ept> contains are instead reported to UI Automation trees as child elements of the next available parent in the tree that has a peer or element representation.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>UI Automation and UWP process boundaries</source>
          <target state="new">UI Automation and UWP process boundaries</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Typically, UI Automation client code that accesses a UWP app runs out-of-process.</source>
          <target state="new">Typically, UI Automation client code that accesses a UWP app runs out-of-process.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The UI Automation framework infrastructure enables information to get across the process boundary.</source>
          <target state="new">The UI Automation framework infrastructure enables information to get across the process boundary.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This concept is explained in more detail in <bpt id="p1">[</bpt>UI Automation Fundamentals<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee684007)</ept>.</source>
          <target state="new">This concept is explained in more detail in <bpt id="p1">[</bpt>UI Automation Fundamentals<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee684007)</ept>.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>OnCreateAutomationPeer</source>
          <target state="new">OnCreateAutomationPeer</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>All classes that derive from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911)</ept> contain the protected virtual method <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnCreateAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept>.</source>
          <target state="new">All classes that derive from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911)</ept> contain the protected virtual method <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnCreateAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The object initialization sequence for automation peers calls <bpt id="p1">**</bpt>OnCreateAutomationPeer<ept id="p1">**</ept> to get the automation peer object for each control and thus to construct a UI Automation tree for run-time use.</source>
          <target state="new">The object initialization sequence for automation peers calls <bpt id="p1">**</bpt>OnCreateAutomationPeer<ept id="p1">**</ept> to get the automation peer object for each control and thus to construct a UI Automation tree for run-time use.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>UI Automation code can use the peer to get information about a control’s characteristics and features and to simulate interactive use by means of its control patterns.</source>
          <target state="new">UI Automation code can use the peer to get information about a control’s characteristics and features and to simulate interactive use by means of its control patterns.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A custom control that supports automation must override <bpt id="p1">**</bpt>OnCreateAutomationPeer<ept id="p1">**</ept> and return an instance of a class that derives from <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept>.</source>
          <target state="new">A custom control that supports automation must override <bpt id="p1">**</bpt>OnCreateAutomationPeer<ept id="p1">**</ept> and return an instance of a class that derives from <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For example, if a custom control derives from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ButtonBase<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227736)</ept> class, the object returned by <bpt id="p3">**</bpt>OnCreateAutomationPeer<ept id="p3">**</ept> should derive from <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ButtonBaseAutomationPeer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR242460)</ept>.</source>
          <target state="new">For example, if a custom control derives from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ButtonBase<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227736)</ept> class, the object returned by <bpt id="p3">**</bpt>OnCreateAutomationPeer<ept id="p3">**</ept> should derive from <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ButtonBaseAutomationPeer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR242460)</ept>.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If you're writing a custom control class and intend to also supply a new automation peer, you should override the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnCreateAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept> method for your custom control so that it returns a new instance of your peer.</source>
          <target state="new">If you're writing a custom control class and intend to also supply a new automation peer, you should override the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnCreateAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept> method for your custom control so that it returns a new instance of your peer.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Your peer class must derive directly or indirectly from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept>.</source>
          <target state="new">Your peer class must derive directly or indirectly from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept>.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, the following code declares that the custom control 'NumericUpDown' should use the peer 'NumericUpDownPeer' for UI Automation purposes.</source>
          <target state="new">For example, the following code declares that the custom control 'NumericUpDown' should use the peer 'NumericUpDownPeer' for UI Automation purposes.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The <bpt id="p2">[</bpt><bpt id="p3">**</bpt>OnCreateAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept> implementation should do nothing more than initialize a new instance of your custom automation peer, passing the calling control as owner, and return that instance.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The <bpt id="p2">[</bpt><bpt id="p3">**</bpt>OnCreateAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept> implementation should do nothing more than initialize a new instance of your custom automation peer, passing the calling control as owner, and return that instance.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Do not attempt additional logic in this method.</source>
          <target state="new">Do not attempt additional logic in this method.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In particular, any logic that could potentially lead to destruction of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> within the same call may result in unexpected runtime behavior.</source>
          <target state="new">In particular, any logic that could potentially lead to destruction of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> within the same call may result in unexpected runtime behavior.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In typical implementations of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnCreateAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept>, the <bpt id="p3">*</bpt>owner<ept id="p3">*</ept> is specified as <bpt id="p4">**</bpt>this<ept id="p4">**</ept> or <bpt id="p5">**</bpt>Me<ept id="p5">**</ept> because the method override is in the same scope as the rest of the control class definition.</source>
          <target state="new">In typical implementations of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnCreateAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept>, the <bpt id="p3">*</bpt>owner<ept id="p3">*</ept> is specified as <bpt id="p4">**</bpt>this<ept id="p4">**</ept> or <bpt id="p5">**</bpt>Me<ept id="p5">**</ept> because the method override is in the same scope as the rest of the control class definition.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The actual peer class definition can be done in the same code file as the control or in a separate code file.</source>
          <target state="new">The actual peer class definition can be done in the same code file as the control or in a separate code file.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The peer definitions all exist in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Automation.Peers<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242563)</ept> namespace that is a separate namespace from the controls that they provide peers for.</source>
          <target state="new">The peer definitions all exist in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Automation.Peers<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242563)</ept> namespace that is a separate namespace from the controls that they provide peers for.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You can choose to declare your peers in separate namespaces also, as long as you reference the necessary namespaces for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnCreateAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept> method call.</source>
          <target state="new">You can choose to declare your peers in separate namespaces also, as long as you reference the necessary namespaces for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnCreateAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept> method call.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Choosing the correct peer base class</source>
          <target state="new">Choosing the correct peer base class</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Make sure that your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> is derived from a base class that gives you the best match for the existing peer logic of the control class you are deriving from.</source>
          <target state="new">Make sure that your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> is derived from a base class that gives you the best match for the existing peer logic of the control class you are deriving from.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In the case of the previous example, because <ph id="ph1">`NumericUpDown`</ph> derives from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RangeBase<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227863)</ept>, there is a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RangeBaseAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242506)</ept> class available that you should base your peer on.</source>
          <target state="new">In the case of the previous example, because <ph id="ph1">`NumericUpDown`</ph> derives from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RangeBase<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227863)</ept>, there is a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RangeBaseAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242506)</ept> class available that you should base your peer on.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>By using the closest matching peer class in parallel to how you derive the control itself, you can avoid overriding at least some of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IRangeValueProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242590)</ept> functionality because the base peer class already implements it.</source>
          <target state="new">By using the closest matching peer class in parallel to how you derive the control itself, you can avoid overriding at least some of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IRangeValueProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242590)</ept> functionality because the base peer class already implements it.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The base <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept> class does not have a corresponding peer class.</source>
          <target state="new">The base <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept> class does not have a corresponding peer class.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If you need a peer class to correspond to a custom control that derives from <bpt id="p1">**</bpt>Control<ept id="p1">**</ept>, derive the custom peer class from <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElementAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept>.</source>
          <target state="new">If you need a peer class to correspond to a custom control that derives from <bpt id="p1">**</bpt>Control<ept id="p1">**</ept>, derive the custom peer class from <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElementAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept>.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If you derive from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept> directly, that class has no default automation peer behavior because there is no <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnCreateAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept> implementation that references a peer class.</source>
          <target state="new">If you derive from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept> directly, that class has no default automation peer behavior because there is no <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnCreateAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911_oncreateautomationpeer)</ept> implementation that references a peer class.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>So make sure either to implement <bpt id="p1">**</bpt>OnCreateAutomationPeer<ept id="p1">**</ept> to use your own peer, or to use <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElementAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> as the peer if that level of accessibility support is adequate for your control.</source>
          <target state="new">So make sure either to implement <bpt id="p1">**</bpt>OnCreateAutomationPeer<ept id="p1">**</ept> to use your own peer, or to use <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElementAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> as the peer if that level of accessibility support is adequate for your control.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You don't typically derive from <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> rather than <bpt id="p4">[</bpt><bpt id="p5">**</bpt>FrameworkElementAutomationPeer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You don't typically derive from <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> rather than <bpt id="p4">[</bpt><bpt id="p5">**</bpt>FrameworkElementAutomationPeer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept>.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If you did derive directly from <bpt id="p1">**</bpt>AutomationPeer<ept id="p1">**</ept> you'll need to duplicate a lot of basic accessibility support that would otherwise come from <bpt id="p2">**</bpt>FrameworkElementAutomationPeer<ept id="p2">**</ept>.</source>
          <target state="new">If you did derive directly from <bpt id="p1">**</bpt>AutomationPeer<ept id="p1">**</ept> you'll need to duplicate a lot of basic accessibility support that would otherwise come from <bpt id="p2">**</bpt>FrameworkElementAutomationPeer<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Initialization of a custom peer class</source>
          <target state="new">Initialization of a custom peer class</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The automation peer should define a type-safe constructor that uses an instance of the owner control for base initialization.</source>
          <target state="new">The automation peer should define a type-safe constructor that uses an instance of the owner control for base initialization.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In the next example, the implementation passes the <bpt id="p1">*</bpt>owner<ept id="p1">*</ept> value on to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>RangeBaseAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242506)</ept> base, and ultimately it is the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>FrameworkElementAutomationPeer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> that actually uses <bpt id="p6">*</bpt>owner<ept id="p6">*</ept> to set <bpt id="p7">[</bpt><bpt id="p8">**</bpt>FrameworkElementAutomationPeer.Owner<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242472_owner)</ept>.</source>
          <target state="new">In the next example, the implementation passes the <bpt id="p1">*</bpt>owner<ept id="p1">*</ept> value on to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>RangeBaseAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242506)</ept> base, and ultimately it is the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>FrameworkElementAutomationPeer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> that actually uses <bpt id="p6">*</bpt>owner<ept id="p6">*</ept> to set <bpt id="p7">[</bpt><bpt id="p8">**</bpt>FrameworkElementAutomationPeer.Owner<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242472_owner)</ept>.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Core methods of AutomationPeer</source>
          <target state="new">Core methods of AutomationPeer</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For UWP infrastructure reasons, the overridable methods of an automation peer are part of a pair of methods: the public access method that the UI Automation provider uses as a forwarding point for UI Automation clients, and the protected "Core" customization method that a UWP class can override to influence the behavior.</source>
          <target state="new">For UWP infrastructure reasons, the overridable methods of an automation peer are part of a pair of methods: the public access method that the UI Automation provider uses as a forwarding point for UI Automation clients, and the protected "Core" customization method that a UWP class can override to influence the behavior.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The method pair is wired together by default in such a way that the call to the access method always invokes the parallel "Core" method that has the provider implementation, or as a fallback, invokes a default implementation from the base classes.</source>
          <target state="new">The method pair is wired together by default in such a way that the call to the access method always invokes the parallel "Core" method that has the provider implementation, or as a fallback, invokes a default implementation from the base classes.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When implementing a peer for a custom control, override any of the "Core" methods from the base automation peer class where you want to expose behavior that is unique to your custom control.</source>
          <target state="new">When implementing a peer for a custom control, override any of the "Core" methods from the base automation peer class where you want to expose behavior that is unique to your custom control.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>UI Automation code gets information about your control by calling public methods of the peer class.</source>
          <target state="new">UI Automation code gets information about your control by calling public methods of the peer class.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To provide information about your control, override each method with a name that ends with "Core" when your control implementation and design creates accessibility scenarios or other UI Automation scenarios that differ from what's supported by the base automation peer class.</source>
          <target state="new">To provide information about your control, override each method with a name that ends with "Core" when your control implementation and design creates accessibility scenarios or other UI Automation scenarios that differ from what's supported by the base automation peer class.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>At a minimum, whenever you define a new peer class, implement the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetClassNameCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getclassnamecore)</ept> method, as shown in the next example.</source>
          <target state="new">At a minimum, whenever you define a new peer class, implement the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetClassNameCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getclassnamecore)</ept> method, as shown in the next example.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You might want to store the strings as constants rather than directly in the method body, but that is up to you.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You might want to store the strings as constants rather than directly in the method body, but that is up to you.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetClassNameCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getclassnamecore)</ept>, you won't need to localize this string.</source>
          <target state="new">For <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetClassNameCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getclassnamecore)</ept>, you won't need to localize this string.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>LocalizedControlType<ept id="p1">**</ept> property is used any time a localized string is needed by a UI Automation client, not <bpt id="p2">**</bpt>ClassName<ept id="p2">**</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>LocalizedControlType<ept id="p1">**</ept> property is used any time a localized string is needed by a UI Automation client, not <bpt id="p2">**</bpt>ClassName<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>GetAutomationControlType</source>
          <target state="new">GetAutomationControlType</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Some assistive technologies use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetAutomationControlType<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getautomationcontroltype)</ept> value directly when reporting characteristics of the items in a UI Automation tree, as additional information beyond the UI Automation <bpt id="p3">**</bpt>Name<ept id="p3">**</ept>.</source>
          <target state="new">Some assistive technologies use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetAutomationControlType<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getautomationcontroltype)</ept> value directly when reporting characteristics of the items in a UI Automation tree, as additional information beyond the UI Automation <bpt id="p3">**</bpt>Name<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If your control is significantly different from the control you are deriving from and you want to report a different control type from what is reported by the base peer class used by the control, you must implement a peer and override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetAutomationControlTypeCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getautomationcontroltypecore)</ept> in your peer implementation.</source>
          <target state="new">If your control is significantly different from the control you are deriving from and you want to report a different control type from what is reported by the base peer class used by the control, you must implement a peer and override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetAutomationControlTypeCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getautomationcontroltypecore)</ept> in your peer implementation.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This is particularly important if you derive from a generalized base class such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ContentControl<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept>, where the base peer doesn't provide precise information about control type.</source>
          <target state="new">This is particularly important if you derive from a generalized base class such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ContentControl<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept>, where the base peer doesn't provide precise information about control type.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Your implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetAutomationControlTypeCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getautomationcontroltypecore)</ept> describes your control by returning an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AutomationControlType<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209182)</ept> value.</source>
          <target state="new">Your implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetAutomationControlTypeCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getautomationcontroltypecore)</ept> describes your control by returning an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AutomationControlType<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209182)</ept> value.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Although you can return <bpt id="p1">**</bpt>AutomationControlType.Custom<ept id="p1">**</ept>, you should return one of the more specific control types if it accurately describes your control's main scenarios.</source>
          <target state="new">Although you can return <bpt id="p1">**</bpt>AutomationControlType.Custom<ept id="p1">**</ept>, you should return one of the more specific control types if it accurately describes your control's main scenarios.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Here's an example.</source>
          <target state="new">Here's an example.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Unless you specify <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationControlType.Custom<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209182)</ept>, you don't have to implement <bpt id="p4">[</bpt><bpt id="p5">**</bpt>GetLocalizedControlTypeCore<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209185_getlocalizedcontroltypecore)</ept> to provide a <bpt id="p6">**</bpt>LocalizedControlType<ept id="p6">**</ept> property value to clients.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Unless you specify <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationControlType.Custom<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209182)</ept>, you don't have to implement <bpt id="p4">[</bpt><bpt id="p5">**</bpt>GetLocalizedControlTypeCore<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209185_getlocalizedcontroltypecore)</ept> to provide a <bpt id="p6">**</bpt>LocalizedControlType<ept id="p6">**</ept> property value to clients.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>UI Automation common infrastructure provides translated strings for every possible <bpt id="p1">**</bpt>AutomationControlType<ept id="p1">**</ept> value other than <bpt id="p2">**</bpt>AutomationControlType.Custom<ept id="p2">**</ept>.</source>
          <target state="new">UI Automation common infrastructure provides translated strings for every possible <bpt id="p1">**</bpt>AutomationControlType<ept id="p1">**</ept> value other than <bpt id="p2">**</bpt>AutomationControlType.Custom<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>GetPattern and GetPatternCore</source>
          <target state="new">GetPattern and GetPatternCore</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A peer's implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> returns the object that supports the pattern that is requested in the input parameter.</source>
          <target state="new">A peer's implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> returns the object that supports the pattern that is requested in the input parameter.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Specifically, a UI Automation client calls a method that is forwarded to the provider's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPattern<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> method, and specifies a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PatternInterface<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept> enumeration value that names the requested pattern.</source>
          <target state="new">Specifically, a UI Automation client calls a method that is forwarded to the provider's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPattern<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> method, and specifies a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PatternInterface<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept> enumeration value that names the requested pattern.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Your override of <bpt id="p1">**</bpt>GetPatternCore<ept id="p1">**</ept> should return the object that implements the specified pattern.</source>
          <target state="new">Your override of <bpt id="p1">**</bpt>GetPatternCore<ept id="p1">**</ept> should return the object that implements the specified pattern.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>That object is the peer itself, because the peer should implement the corresponding pattern interface any time that it reports that it supports a pattern.</source>
          <target state="new">That object is the peer itself, because the peer should implement the corresponding pattern interface any time that it reports that it supports a pattern.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If your peer does not have a custom implementation of a pattern, but you know that the peer's base does implement the pattern, you can call the base type's implementation of <bpt id="p1">**</bpt>GetPatternCore<ept id="p1">**</ept> from your <bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept>.</source>
          <target state="new">If your peer does not have a custom implementation of a pattern, but you know that the peer's base does implement the pattern, you can call the base type's implementation of <bpt id="p1">**</bpt>GetPatternCore<ept id="p1">**</ept> from your <bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A peer's <bpt id="p1">**</bpt>GetPatternCore<ept id="p1">**</ept> should return <bpt id="p2">**</bpt>null<ept id="p2">**</ept> if a pattern is not supported by the peer.</source>
          <target state="new">A peer's <bpt id="p1">**</bpt>GetPatternCore<ept id="p1">**</ept> should return <bpt id="p2">**</bpt>null<ept id="p2">**</ept> if a pattern is not supported by the peer.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>However, instead of returning <bpt id="p1">**</bpt>null<ept id="p1">**</ept> directly from your implementation, you would usually rely on the call to the base implementation to return <bpt id="p2">**</bpt>null<ept id="p2">**</ept> for any unsupported pattern.</source>
          <target state="new">However, instead of returning <bpt id="p1">**</bpt>null<ept id="p1">**</ept> directly from your implementation, you would usually rely on the call to the base implementation to return <bpt id="p2">**</bpt>null<ept id="p2">**</ept> for any unsupported pattern.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>When a pattern is supported, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> implementation can return <bpt id="p3">**</bpt>this<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Me<ept id="p4">**</ept>.</source>
          <target state="new">When a pattern is supported, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> implementation can return <bpt id="p3">**</bpt>this<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Me<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The expectation is that the UI Automation client will cast the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPattern<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> return value to the requested pattern interface whenever it is not <bpt id="p3">**</bpt>null<ept id="p3">**</ept>.</source>
          <target state="new">The expectation is that the UI Automation client will cast the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPattern<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> return value to the requested pattern interface whenever it is not <bpt id="p3">**</bpt>null<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If a peer class inherits from another peer, and all necessary support and pattern reporting is already handled by the base class, implementing <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> isn't necessary.</source>
          <target state="new">If a peer class inherits from another peer, and all necessary support and pattern reporting is already handled by the base class, implementing <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> isn't necessary.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For example, if you are implementing a range control that derives from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RangeBase<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227863)</ept>, and your peer derives from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RangeBaseAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242506)</ept>, that peer returns itself for <bpt id="p5">[</bpt><bpt id="p6">**</bpt>PatternInterface.RangeValue<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept> and has working implementations of the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>IRangeValueProvider<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242590)</ept> interface that supports the pattern.</source>
          <target state="new">For example, if you are implementing a range control that derives from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RangeBase<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227863)</ept>, and your peer derives from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RangeBaseAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242506)</ept>, that peer returns itself for <bpt id="p5">[</bpt><bpt id="p6">**</bpt>PatternInterface.RangeValue<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept> and has working implementations of the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>IRangeValueProvider<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242590)</ept> interface that supports the pattern.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Although it is not the literal code, this example approximates the implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> already present in <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RangeBaseAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242506)</ept>.</source>
          <target state="new">Although it is not the literal code, this example approximates the implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> already present in <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RangeBaseAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242506)</ept>.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If you are implementing a peer where you don't have all the support you need from a base peer class, or you want to change or add to the set of base-inherited patterns that your peer can support, then you should override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> to enable UI Automation clients to use the patterns.</source>
          <target state="new">If you are implementing a peer where you don't have all the support you need from a base peer class, or you want to change or add to the set of base-inherited patterns that your peer can support, then you should override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> to enable UI Automation clients to use the patterns.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>For a list of the provider patterns that are available in the UWP implementation of UI Automation support, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Automation.Provider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209225)</ept>.</source>
          <target state="new">For a list of the provider patterns that are available in the UWP implementation of UI Automation support, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Automation.Provider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209225)</ept>.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Each such pattern has a corresponding value of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PatternInterface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept> enumeration, which is how UI Automation clients request the pattern in a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetPattern<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> call.</source>
          <target state="new">Each such pattern has a corresponding value of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PatternInterface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept> enumeration, which is how UI Automation clients request the pattern in a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetPattern<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> call.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A peer can report that it supports more than one pattern.</source>
          <target state="new">A peer can report that it supports more than one pattern.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If so, the override should include return path logic for each supported <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PatternInterface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept> value and return the peer in each matching case.</source>
          <target state="new">If so, the override should include return path logic for each supported <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PatternInterface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept> value and return the peer in each matching case.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>It is expected that the caller will request only one interface at a time, and it is up to the caller to cast to the expected interface.</source>
          <target state="new">It is expected that the caller will request only one interface at a time, and it is up to the caller to cast to the expected interface.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Here's an example of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> override for a custom peer.</source>
          <target state="new">Here's an example of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> override for a custom peer.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>It reports the support for two patterns, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IRangeValueProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242590)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IToggleProvider<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242653)</ept>.</source>
          <target state="new">It reports the support for two patterns, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IRangeValueProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242590)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IToggleProvider<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242653)</ept>.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The control here is a media display control that can display as full-screen (the toggle mode) and that has a progress bar within which users can select a position (the range control).</source>
          <target state="new">The control here is a media display control that can display as full-screen (the toggle mode) and that has a progress bar within which users can select a position (the range control).</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This code came from the <bpt id="p1">[</bpt>XAML accessibility sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=238570)</ept>.</source>
          <target state="new">This code came from the <bpt id="p1">[</bpt>XAML accessibility sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=238570)</ept>.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Forwarding patterns from subelements</source>
          <target state="new">Forwarding patterns from subelements</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> method implementation can also specify a subelement or part as a pattern provider for its host.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> method implementation can also specify a subelement or part as a pattern provider for its host.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>This example mimics how <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept> transfers scroll-pattern handling to the peer of its internal <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ScrollViewer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209527)</ept> control.</source>
          <target state="new">This example mimics how <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept> transfers scroll-pattern handling to the peer of its internal <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ScrollViewer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209527)</ept> control.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>To specify a subelement for pattern handling, this code gets the subelement object, creates a peer for the subelement by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement.CreatePeerForElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242472_createpeerforelement)</ept> method, and returns the new peer.</source>
          <target state="new">To specify a subelement for pattern handling, this code gets the subelement object, creates a peer for the subelement by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement.CreatePeerForElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242472_createpeerforelement)</ept> method, and returns the new peer.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Other Core methods</source>
          <target state="new">Other Core methods</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Your control may need to support keyboard equivalents for primary scenarios; for more info about why this might be necessary, see <bpt id="p1">[</bpt>Keyboard accessibility<ept id="p1">](keyboard-accessibility.md)</ept>.</source>
          <target state="new">Your control may need to support keyboard equivalents for primary scenarios; for more info about why this might be necessary, see <bpt id="p1">[</bpt>Keyboard accessibility<ept id="p1">](keyboard-accessibility.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Implementing the key support is necessarily part of the control code and not the peer code because that is part of a control's logic, but your peer class should override the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetAcceleratorKeyCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getacceleratorkeycore)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetAccessKeyCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getaccesskeycore)</ept> methods to report to UI Automation clients which keys are used.</source>
          <target state="new">Implementing the key support is necessarily part of the control code and not the peer code because that is part of a control's logic, but your peer class should override the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetAcceleratorKeyCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getacceleratorkeycore)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetAccessKeyCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getaccesskeycore)</ept> methods to report to UI Automation clients which keys are used.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Consider that the strings that report key information might need to be localized, and should therefore come from resources, not hard-coded strings.</source>
          <target state="new">Consider that the strings that report key information might need to be localized, and should therefore come from resources, not hard-coded strings.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>If you are providing a peer for a class that supports a collection, it's best to derive from both functional classes and peer classes that already have that kind of collection support.</source>
          <target state="new">If you are providing a peer for a class that supports a collection, it's best to derive from both functional classes and peer classes that already have that kind of collection support.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>If you can't do so, peers for controls that maintain child collections may have to override the collection-related peer method <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetChildrenCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getchildrencore)</ept> to properly report the parent-child relationships to the UI Automation tree.</source>
          <target state="new">If you can't do so, peers for controls that maintain child collections may have to override the collection-related peer method <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetChildrenCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getchildrencore)</ept> to properly report the parent-child relationships to the UI Automation tree.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsContentElementCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_iscontentelementcore)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsControlElementCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_iscontrolelementcore)</ept> methods to indicate whether your control contains data content or fulfills an interactive role in the user interface (or both).</source>
          <target state="new">Implement the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsContentElementCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_iscontentelementcore)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsControlElementCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_iscontrolelementcore)</ept> methods to indicate whether your control contains data content or fulfills an interactive role in the user interface (or both).</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>By default, both methods return <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
          <target state="new">By default, both methods return <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>These settings improve the usability of assistive technologies such as screen readers, which may use these methods to filter the automation tree.</source>
          <target state="new">These settings improve the usability of assistive technologies such as screen readers, which may use these methods to filter the automation tree.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> method transfers pattern handling to a subelement peer, the subelement peer's <bpt id="p3">**</bpt>IsControlElementCore<ept id="p3">**</ept> method can return <bpt id="p4">**</bpt>false<ept id="p4">**</ept> to hide the subelement peer from the automation tree.</source>
          <target state="new">If your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPatternCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpatterncore)</ept> method transfers pattern handling to a subelement peer, the subelement peer's <bpt id="p3">**</bpt>IsControlElementCore<ept id="p3">**</ept> method can return <bpt id="p4">**</bpt>false<ept id="p4">**</ept> to hide the subelement peer from the automation tree.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Some controls may support labeling scenarios, where a text label part supplies information for a non-text part, or a control is intended to be in a known labeling relationship with another control in the UI.</source>
          <target state="new">Some controls may support labeling scenarios, where a text label part supplies information for a non-text part, or a control is intended to be in a known labeling relationship with another control in the UI.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If it's possible to provide a useful class-based behavior, you can override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetLabeledByCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getlabeledbycore)</ept> to provide this behavior.</source>
          <target state="new">If it's possible to provide a useful class-based behavior, you can override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetLabeledByCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getlabeledbycore)</ept> to provide this behavior.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetBoundingRectangleCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getboundingrectanglecore)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetClickablePointCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getclickablepointcore)</ept> are used mainly for automated testing scenarios.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetBoundingRectangleCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getboundingrectanglecore)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetClickablePointCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getclickablepointcore)</ept> are used mainly for automated testing scenarios.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If you want to support automated testing for your control, you might want to override these methods.</source>
          <target state="new">If you want to support automated testing for your control, you might want to override these methods.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This might be desired for range-type controls, where you can't suggest just a single point because where the user clicks in coordinate space has a different effect on a range.</source>
          <target state="new">This might be desired for range-type controls, where you can't suggest just a single point because where the user clicks in coordinate space has a different effect on a range.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For example, the default <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollBar<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209745)</ept> automation peer overrides <bpt id="p3">**</bpt>GetClickablePointCore<ept id="p3">**</ept> to return a "not a number" <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Point<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR225870)</ept> value.</source>
          <target state="new">For example, the default <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollBar<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209745)</ept> automation peer overrides <bpt id="p3">**</bpt>GetClickablePointCore<ept id="p3">**</ept> to return a "not a number" <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Point<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR225870)</ept> value.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetLiveSettingCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getlivesettingcore)</ept> influences the control default for the <bpt id="p3">**</bpt>LiveSetting<ept id="p3">**</ept> value for UI Automation.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetLiveSettingCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getlivesettingcore)</ept> influences the control default for the <bpt id="p3">**</bpt>LiveSetting<ept id="p3">**</ept> value for UI Automation.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>You might want to override this if you want your control to return a value other than <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationLiveSetting.Off<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/JJ191519)</ept>.</source>
          <target state="new">You might want to override this if you want your control to return a value other than <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationLiveSetting.Off<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/JJ191519)</ept>.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>For more info on what <bpt id="p1">**</bpt>LiveSetting<ept id="p1">**</ept> represents, see <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationProperties.LiveSetting<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/JJ191516)</ept>.</source>
          <target state="new">For more info on what <bpt id="p1">**</bpt>LiveSetting<ept id="p1">**</ept> represents, see <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationProperties.LiveSetting<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/JJ191516)</ept>.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>You might override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetOrientationCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getorientationcore)</ept> if your control has a settable orientation property that can map to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AutomationOrientation<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209184)</ept>.</source>
          <target state="new">You might override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetOrientationCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getorientationcore)</ept> if your control has a settable orientation property that can map to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AutomationOrientation<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209184)</ept>.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollBarAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242522)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SliderAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242546)</ept> classes do this.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollBarAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242522)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SliderAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242546)</ept> classes do this.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Base implementation in FrameworkElementAutomationPeer</source>
          <target state="new">Base implementation in FrameworkElementAutomationPeer</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The base implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElementAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> provides some UI Automation information that can be interpreted from various layout and behavior properties that are defined at the framework level.</source>
          <target state="new">The base implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElementAutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> provides some UI Automation information that can be interpreted from various layout and behavior properties that are defined at the framework level.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetBoundingRectangleCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getboundingrectanglecore)</ept>: Returns a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Rect<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR225994)</ept> structure based on the known layout characteristics.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetBoundingRectangleCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getboundingrectanglecore)</ept>: Returns a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Rect<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR225994)</ept> structure based on the known layout characteristics.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Returns a 0-value <bpt id="p1">**</bpt>Rect<ept id="p1">**</ept> if <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IsOffscreen<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209185_isoffscreen)</ept> is <bpt id="p4">**</bpt>true<ept id="p4">**</ept>.</source>
          <target state="new">Returns a 0-value <bpt id="p1">**</bpt>Rect<ept id="p1">**</ept> if <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IsOffscreen<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209185_isoffscreen)</ept> is <bpt id="p4">**</bpt>true<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetClickablePointCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getclickablepointcore)</ept>: Returns a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Point<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR225870)</ept> structure based on the known layout characteristics, as long as there is a nonzero <bpt id="p5">**</bpt>BoundingRectangle<ept id="p5">**</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetClickablePointCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getclickablepointcore)</ept>: Returns a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Point<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR225870)</ept> structure based on the known layout characteristics, as long as there is a nonzero <bpt id="p5">**</bpt>BoundingRectangle<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetNameCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getnamecore)</ept>: More extensive behavior than can be summarized here; see <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetNameCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getnamecore)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetNameCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getnamecore)</ept>: More extensive behavior than can be summarized here; see <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetNameCore<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getnamecore)</ept>.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Basically, it attempts a string conversion on any known content of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept> or related classes that have content.</source>
          <target state="new">Basically, it attempts a string conversion on any known content of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept> or related classes that have content.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Also, if there is a value for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LabeledBy<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759769)</ept>, that item's <bpt id="p3">**</bpt>Name<ept id="p3">**</ept> value is used as the <bpt id="p4">**</bpt>Name<ept id="p4">**</ept>.</source>
          <target state="new">Also, if there is a value for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LabeledBy<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759769)</ept>, that item's <bpt id="p3">**</bpt>Name<ept id="p3">**</ept> value is used as the <bpt id="p4">**</bpt>Name<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>HasKeyboardFocusCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_haskeyboardfocuscore)</ept>: Evaluated based on the owner's <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FocusState<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_focusstate)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IsEnabled<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209390_isenabled)</ept> properties.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>HasKeyboardFocusCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_haskeyboardfocuscore)</ept>: Evaluated based on the owner's <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FocusState<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_focusstate)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IsEnabled<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209390_isenabled)</ept> properties.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Elements that aren't controls always return <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
          <target state="new">Elements that aren't controls always return <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsEnabledCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_isenabledcore)</ept>: Evaluated based on the owner's <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsEnabled<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_isenabled)</ept> property if it is a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Control<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsEnabledCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_isenabledcore)</ept>: Evaluated based on the owner's <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsEnabled<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_isenabled)</ept> property if it is a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Control<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept>.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Elements that aren't controls always return <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
          <target state="new">Elements that aren't controls always return <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This doesn't mean that the owner is enabled in the conventional interaction sense; it means that the peer is enabled despite the owner not having an <bpt id="p1">**</bpt>IsEnabled<ept id="p1">**</ept> property.</source>
          <target state="new">This doesn't mean that the owner is enabled in the conventional interaction sense; it means that the peer is enabled despite the owner not having an <bpt id="p1">**</bpt>IsEnabled<ept id="p1">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsKeyboardFocusableCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_iskeyboardfocusablecore)</ept>: Returns <bpt id="p3">**</bpt>true<ept id="p3">**</ept> if owner is a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Control<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept>; otherwise it is <bpt id="p6">**</bpt>false<ept id="p6">**</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsKeyboardFocusableCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_iskeyboardfocusablecore)</ept>: Returns <bpt id="p3">**</bpt>true<ept id="p3">**</ept> if owner is a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Control<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept>; otherwise it is <bpt id="p6">**</bpt>false<ept id="p6">**</ept>.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsOffscreenCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_isoffscreencore)</ept>: A <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visibility<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911_visibility)</ept> of <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Hidden<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209006)</ept> on the owner element or any of its parents equates to a <bpt id="p7">**</bpt>true<ept id="p7">**</ept> value for <bpt id="p8">[</bpt><bpt id="p9">**</bpt>IsOffscreen<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/BR209185_isoffscreen)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsOffscreenCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_isoffscreencore)</ept>: A <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visibility<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911_visibility)</ept> of <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Hidden<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209006)</ept> on the owner element or any of its parents equates to a <bpt id="p7">**</bpt>true<ept id="p7">**</ept> value for <bpt id="p8">[</bpt><bpt id="p9">**</bpt>IsOffscreen<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/BR209185_isoffscreen)</ept>.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Exception: a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Popup<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227842)</ept> object can be visible even if its owner's parents are not.</source>
          <target state="new">Exception: a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Popup<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227842)</ept> object can be visible even if its owner's parents are not.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetFocusCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_setfocuscore)</ept>: Calls <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Focus<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_focus)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetFocusCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_setfocuscore)</ept>: Calls <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Focus<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_focus)</ept>.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetParent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getparent)</ept>: Calls <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.Parent<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208739)</ept> from the owner, and looks up the appropriate peer.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetParent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getparent)</ept>: Calls <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.Parent<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208739)</ept> from the owner, and looks up the appropriate peer.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This isn't an override pair with a "Core" method, so you can't change this behavior.</source>
          <target state="new">This isn't an override pair with a "Core" method, so you can't change this behavior.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Default UWP peers implement a behavior by using internal native code that implements the UWP, not necessarily by using actual UWP code.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Default UWP peers implement a behavior by using internal native code that implements the UWP, not necessarily by using actual UWP code.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>You won't be able to see the code or logic of the implementation through common language runtime (CLR) reflection or other techniques.</source>
          <target state="new">You won't be able to see the code or logic of the implementation through common language runtime (CLR) reflection or other techniques.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>You also won't see distinct reference pages for subclass-specific overrides of base peer behavior.</source>
          <target state="new">You also won't see distinct reference pages for subclass-specific overrides of base peer behavior.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>For example, there might be additional behavior for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetNameCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getnamecore)</ept> of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TextBoxAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242550)</ept>, which won't be described on the <bpt id="p5">**</bpt>AutomationPeer.GetNameCore<ept id="p5">**</ept> reference page, and there is no reference page for <bpt id="p6">**</bpt>TextBoxAutomationPeer.GetNameCore<ept id="p6">**</ept>.</source>
          <target state="new">For example, there might be additional behavior for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetNameCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getnamecore)</ept> of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TextBoxAutomationPeer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242550)</ept>, which won't be described on the <bpt id="p5">**</bpt>AutomationPeer.GetNameCore<ept id="p5">**</ept> reference page, and there is no reference page for <bpt id="p6">**</bpt>TextBoxAutomationPeer.GetNameCore<ept id="p6">**</ept>.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>There isn't even a <bpt id="p1">**</bpt>TextBoxAutomationPeer.GetNameCore<ept id="p1">**</ept> reference page.</source>
          <target state="new">There isn't even a <bpt id="p1">**</bpt>TextBoxAutomationPeer.GetNameCore<ept id="p1">**</ept> reference page.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Instead, read the reference topic for the most immediate peer class, and look for implementation notes in the Remarks section.</source>
          <target state="new">Instead, read the reference topic for the most immediate peer class, and look for implementation notes in the Remarks section.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Peers and AutomationProperties</source>
          <target state="new">Peers and AutomationProperties</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Your automation peer should provide appropriate default values for your control's accessibility-related information.</source>
          <target state="new">Your automation peer should provide appropriate default values for your control's accessibility-related information.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Note that any app code that uses the control can override some of that behavior by including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081)</ept> attached-property values on control instances.</source>
          <target state="new">Note that any app code that uses the control can override some of that behavior by including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081)</ept> attached-property values on control instances.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Callers can do this either for the default controls or for custom controls.</source>
          <target state="new">Callers can do this either for the default controls or for custom controls.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>For example, the following XAML creates a button that has two customized UI Automation properties:</source>
          <target state="new">For example, the following XAML creates a button that has two customized UI Automation properties:</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>For more info about <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081)</ept> attached properties, see <bpt id="p3">[</bpt>Basic accessibility information<ept id="p3">](basic-accessibility-information.md)</ept>.</source>
          <target state="new">For more info about <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081)</ept> attached properties, see <bpt id="p3">[</bpt>Basic accessibility information<ept id="p3">](basic-accessibility-information.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Some of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> methods exist because of the general contract of how UI Automation providers are expected to report information, but these methods are not typically implemented in control peers.</source>
          <target state="new">Some of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> methods exist because of the general contract of how UI Automation providers are expected to report information, but these methods are not typically implemented in control peers.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This is because that info is expected to be provided by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081)</ept> values applied to the app code that uses the controls in a specific UI.</source>
          <target state="new">This is because that info is expected to be provided by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081)</ept> values applied to the app code that uses the controls in a specific UI.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>For example, most apps would define the labeling relationship between two different controls in the UI by applying a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.LabeledBy<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759769)</ept> value.</source>
          <target state="new">For example, most apps would define the labeling relationship between two different controls in the UI by applying a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.LabeledBy<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759769)</ept> value.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>However, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LabeledByCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getlabeledbycore)</ept> is implemented in certain peers that represent data or item relationships in a control, such as using a header part to label a data-field part, labeling items with their containers, or similar scenarios.</source>
          <target state="new">However, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>LabeledByCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getlabeledbycore)</ept> is implemented in certain peers that represent data or item relationships in a control, such as using a header part to label a data-field part, labeling items with their containers, or similar scenarios.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Implementing patterns</source>
          <target state="new">Implementing patterns</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Let's look at how to write a peer for a control that implements an expand-collapse behavior by implementing the control pattern interface for expand-collapse.</source>
          <target state="new">Let's look at how to write a peer for a control that implements an expand-collapse behavior by implementing the control pattern interface for expand-collapse.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The peer should enable the accessibility for the expand-collapse behavior by returning itself whenever <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPattern<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> is called with a value of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PatternInterface.ExpandCollapse<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept>.</source>
          <target state="new">The peer should enable the accessibility for the expand-collapse behavior by returning itself whenever <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetPattern<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getpattern)</ept> is called with a value of <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PatternInterface.ExpandCollapse<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept>.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The peer should then inherit the provider interface for that pattern (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>IExpandCollapseProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671242)</ept>) and provide implementations for each of the members of that provider interface.</source>
          <target state="new">The peer should then inherit the provider interface for that pattern (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>IExpandCollapseProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671242)</ept>) and provide implementations for each of the members of that provider interface.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>In this case the interface has three members to override: <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Expand<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242570)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Collapse<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242569)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ExpandCollapseState<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242570collapsestate)</ept>.</source>
          <target state="new">In this case the interface has three members to override: <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Expand<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242570)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Collapse<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242569)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ExpandCollapseState<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242570collapsestate)</ept>.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>It's helpful to plan ahead for accessibility in the API design of the class itself.</source>
          <target state="new">It's helpful to plan ahead for accessibility in the API design of the class itself.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Whenever you have a behavior that is potentially requested either as a result of typical interactions with a user who is working in the UI or through an automation provider pattern, provide a single method that either the UI response or the automation pattern can call.</source>
          <target state="new">Whenever you have a behavior that is potentially requested either as a result of typical interactions with a user who is working in the UI or through an automation provider pattern, provide a single method that either the UI response or the automation pattern can call.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For example, if your control has button parts that have wired event handlers that can expand or collapse the control, and has keyboard equivalents for those actions, have these event handlers call the same method that you call from within the body of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Expand<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242570)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Collapse<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242569)</ept> implementations for <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IExpandCollapseProvider<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/Ee671242)</ept> in the peer.</source>
          <target state="new">For example, if your control has button parts that have wired event handlers that can expand or collapse the control, and has keyboard equivalents for those actions, have these event handlers call the same method that you call from within the body of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Expand<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242570)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Collapse<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242569)</ept> implementations for <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IExpandCollapseProvider<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/Ee671242)</ept> in the peer.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Using a common logic method can also be a useful way to make sure that your control's visual states are updated to show logical state in a uniform way, regardless of how the behavior was invoked.</source>
          <target state="new">Using a common logic method can also be a useful way to make sure that your control's visual states are updated to show logical state in a uniform way, regardless of how the behavior was invoked.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A typical implementation is that the provider APIs first call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Owner<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242472_owner)</ept> for access to the control instance at run time.</source>
          <target state="new">A typical implementation is that the provider APIs first call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Owner<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242472_owner)</ept> for access to the control instance at run time.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Then the necessary behavior methods can be called on that object.</source>
          <target state="new">Then the necessary behavior methods can be called on that object.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>An alternate implementation is that the control itself can reference its peer.</source>
          <target state="new">An alternate implementation is that the control itself can reference its peer.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This is a common pattern if you are raising automation events from the control, because the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RaiseAutomationEvent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_raiseautomationevent)</ept> method is a peer method.</source>
          <target state="new">This is a common pattern if you are raising automation events from the control, because the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RaiseAutomationEvent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_raiseautomationevent)</ept> method is a peer method.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>UI Automation events</source>
          <target state="new">UI Automation events</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>UI Automation events fall into the following categories.</source>
          <target state="new">UI Automation events fall into the following categories.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Event</source>
          <target state="new">Event</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Property change</source>
          <target state="new">Property change</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Fires when a property on a UI Automation element or control pattern changes.</source>
          <target state="new">Fires when a property on a UI Automation element or control pattern changes.</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>For example, if a client needs to monitor an app's check box control, it can register to listen for a property change event on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ToggleState<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242653_togglestate)</ept> property.</source>
          <target state="new">For example, if a client needs to monitor an app's check box control, it can register to listen for a property change event on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ToggleState<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242653_togglestate)</ept> property.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>When the check box control is checked or unchecked, the provider fires the event and the client can act as necessary.</source>
          <target state="new">When the check box control is checked or unchecked, the provider fires the event and the client can act as necessary.</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Element action</source>
          <target state="new">Element action</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Fires when a change in the UI results from user or programmatic activity; for example, when a button is clicked or invoked through the <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> pattern.</source>
          <target state="new">Fires when a change in the UI results from user or programmatic activity; for example, when a button is clicked or invoked through the <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> pattern.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Structure change</source>
          <target state="new">Structure change</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Fires when the structure of the UI Automation tree changes.</source>
          <target state="new">Fires when the structure of the UI Automation tree changes.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The structure changes when new UI items become visible, hidden, or removed on the desktop.</source>
          <target state="new">The structure changes when new UI items become visible, hidden, or removed on the desktop.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Global change</source>
          <target state="new">Global change</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Fires when actions of global interest to the client occur, such as when the focus shifts from one element to another, or when a child window closes.</source>
          <target state="new">Fires when actions of global interest to the client occur, such as when the focus shifts from one element to another, or when a child window closes.</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Some events do not necessarily mean that the state of the UI has changed.</source>
          <target state="new">Some events do not necessarily mean that the state of the UI has changed.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>For example, if the user tabs to a text-entry field and then clicks a button to update the field, a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683_textchanged)</ept> event fires even if the user did not actually change the text.</source>
          <target state="new">For example, if the user tabs to a text-entry field and then clicks a button to update the field, a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683_textchanged)</ept> event fires even if the user did not actually change the text.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>When processing an event, it may be necessary for a client application to check whether anything has actually changed before taking action.</source>
          <target state="new">When processing an event, it may be necessary for a client application to check whether anything has actually changed before taking action.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>AutomationEvents identifiers</source>
          <target state="new">AutomationEvents identifiers</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>UI Automation events are identified by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209183)</ept> values.</source>
          <target state="new">UI Automation events are identified by <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209183)</ept> values.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The values of the enumeration uniquely identify the kind of event.</source>
          <target state="new">The values of the enumeration uniquely identify the kind of event.</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Raising events</source>
          <target state="new">Raising events</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>UI Automation clients can subscribe to automation events.</source>
          <target state="new">UI Automation clients can subscribe to automation events.</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>In the automation peer model, peers for custom controls must report changes to control state that are relevant to accessibility by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RaiseAutomationEvent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_raiseautomationevent)</ept> method.</source>
          <target state="new">In the automation peer model, peers for custom controls must report changes to control state that are relevant to accessibility by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RaiseAutomationEvent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_raiseautomationevent)</ept> method.</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Similarly, when a key UI Automation property value changes, custom control peers should call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RaisePropertyChangedEvent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_raisepropertychangedevent)</ept> method.</source>
          <target state="new">Similarly, when a key UI Automation property value changes, custom control peers should call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RaisePropertyChangedEvent<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_raisepropertychangedevent)</ept> method.</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The next code example shows how to get the peer object from within the control definition code and call a method to fire an event from that peer.</source>
          <target state="new">The next code example shows how to get the peer object from within the control definition code and call a method to fire an event from that peer.</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>As an optimization, the code determines whether there are any listeners for this event type.</source>
          <target state="new">As an optimization, the code determines whether there are any listeners for this event type.</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Firing the event and creating the peer object only when there are listeners avoids unnecessary overhead and helps the control remain responsive.</source>
          <target state="new">Firing the event and creating the peer object only when there are listeners avoids unnecessary overhead and helps the control remain responsive.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Peer navigation</source>
          <target state="new">Peer navigation</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>After locating an automation peer, a UI Automation client can navigate the peer structure of an app by calling the peer object's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetChildren<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getchildren)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetParent<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getparent)</ept> methods.</source>
          <target state="new">After locating an automation peer, a UI Automation client can navigate the peer structure of an app by calling the peer object's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetChildren<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getchildren)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetParent<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209185_getparent)</ept> methods.</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Navigation among UI elements within a control is supported by the peer's implementation of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetChildrenCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getchildrencore)</ept> method.</source>
          <target state="new">Navigation among UI elements within a control is supported by the peer's implementation of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetChildrenCore<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185_getchildrencore)</ept> method.</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The UI Automation system calls this method to build up a tree of subelements contained within a control; for example, list items in a list box.</source>
          <target state="new">The UI Automation system calls this method to build up a tree of subelements contained within a control; for example, list items in a list box.</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The default <bpt id="p1">**</bpt>GetChildrenCore<ept id="p1">**</ept> method in <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElementAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> traverses the visual tree of elements to build the tree of automation peers.</source>
          <target state="new">The default <bpt id="p1">**</bpt>GetChildrenCore<ept id="p1">**</ept> method in <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElementAutomationPeer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242472)</ept> traverses the visual tree of elements to build the tree of automation peers.</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Custom controls can override this method to expose a different representation of child elements to automation clients, returning the automation peers of elements that convey information or allow user interaction.</source>
          <target state="new">Custom controls can override this method to expose a different representation of child elements to automation clients, returning the automation peers of elements that convey information or allow user interaction.</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Native automation support for text patterns</source>
          <target state="new">Native automation support for text patterns</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Some of the default UWP app automation peers provide control pattern support for the text pattern (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>PatternInterface.Text<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept>).</source>
          <target state="new">Some of the default UWP app automation peers provide control pattern support for the text pattern (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>PatternInterface.Text<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242496)</ept>).</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>But they provide this support through native methods, and the peers involved won't note the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ITextProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242627)</ept> interface in the (managed) inheritance.</source>
          <target state="new">But they provide this support through native methods, and the peers involved won't note the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ITextProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242627)</ept> interface in the (managed) inheritance.</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Still, if a managed or non-managed UI Automation client queries the peer for patterns, it will report support for the text pattern, and provide behavior for parts of the pattern when client APIs are called.</source>
          <target state="new">Still, if a managed or non-managed UI Automation client queries the peer for patterns, it will report support for the text pattern, and provide behavior for parts of the pattern when client APIs are called.</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>If you intend to derive from one of the UWP app text controls and also create a custom peer that derives from one of the text-related peers, check the Remarks sections for the peer to learn more about any native-level support for patterns.</source>
          <target state="new">If you intend to derive from one of the UWP app text controls and also create a custom peer that derives from one of the text-related peers, check the Remarks sections for the peer to learn more about any native-level support for patterns.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>You can access the native base behavior in your custom peer if you call the base implementation from your managed provider interface implementations, but it's difficult to modify what the base implementation does because the native interfaces on both the peer and its owner control aren't exposed.</source>
          <target state="new">You can access the native base behavior in your custom peer if you call the base implementation from your managed provider interface implementations, but it's difficult to modify what the base implementation does because the native interfaces on both the peer and its owner control aren't exposed.</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Generally you should either use the base implementations as-is (call base only) or completely replace the functionality with your own managed code and don't call the base implementation.</source>
          <target state="new">Generally you should either use the base implementations as-is (call base only) or completely replace the functionality with your own managed code and don't call the base implementation.</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The latter is an advanced scenario, you'll need good familiarity with the text services framework being used by your control in order to support the accessibility requirements when using that framework.</source>
          <target state="new">The latter is an advanced scenario, you'll need good familiarity with the text services framework being used by your control in order to support the accessibility requirements when using that framework.</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>AutomationProperties.AccessibilityView</source>
          <target state="new">AutomationProperties.AccessibilityView</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>In addition to providing a custom peer, you can also adjust the tree view representation for any control instance, by setting <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessibilityView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081_accessibilityview)</ept> in XAML.</source>
          <target state="new">In addition to providing a custom peer, you can also adjust the tree view representation for any control instance, by setting <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessibilityView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081_accessibilityview)</ept> in XAML.</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>This isn't implemented as part of a peer class, but we'll mention it here because it's germane to overall accessibility support either for custom controls or for templates you customize.</source>
          <target state="new">This isn't implemented as part of a peer class, but we'll mention it here because it's germane to overall accessibility support either for custom controls or for templates you customize.</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The main scenario for using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessibilityView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081_accessibilityview)</ept> is to deliberately omit certain controls in a template from the UI Automation views, because they don't meaningfully contribute to the accessibility view of the entire control.</source>
          <target state="new">The main scenario for using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessibilityView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081_accessibilityview)</ept> is to deliberately omit certain controls in a template from the UI Automation views, because they don't meaningfully contribute to the accessibility view of the entire control.</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>To prevent this, set <bpt id="p1">**</bpt>AutomationProperties.AccessibilityView<ept id="p1">**</ept> to "Raw".</source>
          <target state="new">To prevent this, set <bpt id="p1">**</bpt>AutomationProperties.AccessibilityView<ept id="p1">**</ept> to "Raw".</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessibilityView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081_accessibilityview)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessibilityView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081_accessibilityview)</ept>.</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Throwing exceptions from automation peers</source>
          <target state="new">Throwing exceptions from automation peers</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The APIs that you are implementing for your automation peer support are permitted to throw exceptions.</source>
          <target state="new">The APIs that you are implementing for your automation peer support are permitted to throw exceptions.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>It's expected any UI Automation clients that are listening are robust enough to continue on after most exceptions are thrown.</source>
          <target state="new">It's expected any UI Automation clients that are listening are robust enough to continue on after most exceptions are thrown.</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>In all likelihood that listener is looking at an all-up automation tree that includes apps other than your own, and it's an unacceptable client design to bring down the entire client just because one area of the tree threw a peer-based exception when the client called its APIs.</source>
          <target state="new">In all likelihood that listener is looking at an all-up automation tree that includes apps other than your own, and it's an unacceptable client design to bring down the entire client just because one area of the tree threw a peer-based exception when the client called its APIs.</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>For parameters that are passed in to your peer, it's acceptable to validate the input, and for example throw <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArgumentNullException<ept id="p2">**</ept><ept id="p1">](T:System.ArgumentNullException)</ept> if it was passed <bpt id="p3">**</bpt>null<ept id="p3">**</ept> and that's not a valid value for your implementation.</source>
          <target state="new">For parameters that are passed in to your peer, it's acceptable to validate the input, and for example throw <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ArgumentNullException<ept id="p2">**</ept><ept id="p1">](T:System.ArgumentNullException)</ept> if it was passed <bpt id="p3">**</bpt>null<ept id="p3">**</ept> and that's not a valid value for your implementation.</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>However, if there are subsequent operations performed by your peer, remember that the peer's interactions with the hosting control have something of an asynchronous character to them.</source>
          <target state="new">However, if there are subsequent operations performed by your peer, remember that the peer's interactions with the hosting control have something of an asynchronous character to them.</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Anything a peer does won't necessarily block the UI thread in the control (and it probably shouldn't).</source>
          <target state="new">Anything a peer does won't necessarily block the UI thread in the control (and it probably shouldn't).</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>So you could have situations where an object was available or had certain properties when the peer was created or when an automation peer method was first called, but in the meantime the control state has changed.</source>
          <target state="new">So you could have situations where an object was available or had certain properties when the peer was created or when an automation peer method was first called, but in the meantime the control state has changed.</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>For these cases, there are two dedicated exceptions that a provider can throw:</source>
          <target state="new">For these cases, there are two dedicated exceptions that a provider can throw:</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Throw <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ElementNotAvailableException<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh673741)</ept> if you're unable to access either the peer's owner or a related peer element based on the original info your API was passed.</source>
          <target state="new">Throw <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ElementNotAvailableException<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh673741)</ept> if you're unable to access either the peer's owner or a related peer element based on the original info your API was passed.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>For example, you might have a peer that's trying to run its methods but the owner has since been removed from the UI, such as a modal dialog that's been closed.</source>
          <target state="new">For example, you might have a peer that's trying to run its methods but the owner has since been removed from the UI, such as a modal dialog that's been closed.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>For a non-.NET client, this maps to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIA<ph id="ph1">\_</ph>E<ph id="ph2">\_</ph>ELEMENTNOTAVAILABLE<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671218)</ept>.</source>
          <target state="new">For a non-.NET client, this maps to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIA<ph id="ph1">\_</ph>E<ph id="ph2">\_</ph>ELEMENTNOTAVAILABLE<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671218)</ept>.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Throw <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ElementNotEnabledException<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh673748)</ept> if there still is an owner, but that owner is in a mode such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsEnabled<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_isenabled)</ept><ph id="ph1">`=`</ph><bpt id="p5">**</bpt>false<ept id="p5">**</ept> that's blocking some of the specific programmatic changes that your peer is trying to accomplish.</source>
          <target state="new">Throw <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ElementNotEnabledException<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh673748)</ept> if there still is an owner, but that owner is in a mode such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsEnabled<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209390_isenabled)</ept><ph id="ph1">`=`</ph><bpt id="p5">**</bpt>false<ept id="p5">**</ept> that's blocking some of the specific programmatic changes that your peer is trying to accomplish.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>For a non-.NET client, this maps to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIA<ph id="ph1">\_</ph>E<ph id="ph2">\_</ph>ELEMENTNOTENABLED<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671218)</ept>.</source>
          <target state="new">For a non-.NET client, this maps to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIA<ph id="ph1">\_</ph>E<ph id="ph2">\_</ph>ELEMENTNOTENABLED<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Ee671218)</ept>.</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Beyond this, peers should be relatively conservative regarding exceptions that they throw from their peer support.</source>
          <target state="new">Beyond this, peers should be relatively conservative regarding exceptions that they throw from their peer support.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Most clients won't be able to handle exceptions from peers and turn these into actionable choices that their users can make when interacting with the client.</source>
          <target state="new">Most clients won't be able to handle exceptions from peers and turn these into actionable choices that their users can make when interacting with the client.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>So sometimes a no-op, and catching exceptions without rethrowing within your peer implementations, is a better strategy than is throwing exceptions every time something the peer tries to do doesn't work.</source>
          <target state="new">So sometimes a no-op, and catching exceptions without rethrowing within your peer implementations, is a better strategy than is throwing exceptions every time something the peer tries to do doesn't work.</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Consider also that most UI Automation clients aren't written in managed code.</source>
          <target state="new">Consider also that most UI Automation clients aren't written in managed code.</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Most are written in COM and are just checking for <bpt id="p1">**</bpt>S<ph id="ph1">\_</ph>OK<ept id="p1">**</ept> in an <bpt id="p2">**</bpt>HRESULT<ept id="p2">**</ept> whenever they call a UI Automation client method that ends up accessing your peer.</source>
          <target state="new">Most are written in COM and are just checking for <bpt id="p1">**</bpt>S<ph id="ph1">\_</ph>OK<ept id="p1">**</ept> in an <bpt id="p2">**</bpt>HRESULT<ept id="p2">**</ept> whenever they call a UI Automation client method that ends up accessing your peer.</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="new">Accessibility</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>XAML accessibility sample</source>
          <target state="new">XAML accessibility sample</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>FrameworkElementAutomationPeer</source>
          <target state="new">FrameworkElementAutomationPeer</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>AutomationPeer</source>
          <target state="new">AutomationPeer</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>OnCreateAutomationPeer</source>
          <target state="new">OnCreateAutomationPeer</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Control patterns and interfaces</source>
          <target state="new">Control patterns and interfaces</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>