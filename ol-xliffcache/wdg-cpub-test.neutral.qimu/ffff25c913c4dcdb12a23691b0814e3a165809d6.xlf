<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\controls-and-patterns\scroll-controls.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffff25c913c4dcdb12a23691b0814e3a165809d6</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Panning and scrolling allows users to reach content that extends beyond the bounds of the screen.</source>
          <target state="new">Panning and scrolling allows users to reach content that extends beyond the bounds of the screen.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Guidelines for scroll bars</source>
          <target state="new">Guidelines for scroll bars</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Scroll bars</source>
          <target state="new">Scroll bars</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>ScrollViewer class</source>
          <target state="new">ScrollViewer class</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>ZoomMode property</source>
          <target state="new">ZoomMode property</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Panning and scrolling allows users to reach content that extends beyond the bounds of the screen.</source>
          <target state="new">Panning and scrolling allows users to reach content that extends beyond the bounds of the screen.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A scroll viewer control is composed of as much content as will fit in the viewport, and either one or two scroll bars.</source>
          <target state="new">A scroll viewer control is composed of as much content as will fit in the viewport, and either one or two scroll bars.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Touch gestures can be used to pan and zoom (the scroll bars fade in only during manipulation), and the pointer can be used to scroll.</source>
          <target state="new">Touch gestures can be used to pan and zoom (the scroll bars fade in only during manipulation), and the pointer can be used to scroll.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The flick gesture pans with inertia.</source>
          <target state="new">The flick gesture pans with inertia.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Windows: There are two panning display modes based on the input device detected: panning indicators for touch; and scroll bars for other input devices including mouse, touchpad, keyboard, and stylus.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Windows: There are two panning display modes based on the input device detected: panning indicators for touch; and scroll bars for other input devices including mouse, touchpad, keyboard, and stylus.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A sample of what standard scroll bar and panning indicator controls look like</source>
          <target state="new">A sample of what standard scroll bar and panning indicator controls look like</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="new">Examples</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollViewer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.aspx)</ept> enables content to be displayed in a smaller area than its actual size.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollViewer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.aspx)</ept> enables content to be displayed in a smaller area than its actual size.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When the content of the scroll viewer is not entirely visible, the scroll viewer displays scrollbars that the user can use to move the content area that is visible.</source>
          <target state="new">When the content of the scroll viewer is not entirely visible, the scroll viewer displays scrollbars that the user can use to move the content area that is visible.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The area that includes all of the content of the scroll viewer is the <bpt id="p1">*</bpt>extent<ept id="p1">*</ept>.</source>
          <target state="new">The area that includes all of the content of the scroll viewer is the <bpt id="p1">*</bpt>extent<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The visible area of the content is the <bpt id="p1">*</bpt>viewport<ept id="p1">*</ept>.</source>
          <target state="new">The visible area of the content is the <bpt id="p1">*</bpt>viewport<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A screenshot that illustrates the standard scrollbar control</source>
          <target state="new">A screenshot that illustrates the standard scrollbar control</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a scroll viewer</source>
          <target state="new">Create a scroll viewer</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This XAML shows how to place an image in a scroll viewer and enable zooming.</source>
          <target state="new">This XAML shows how to place an image in a scroll viewer and enable zooming.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ScrollViewer in a control template</source>
          <target state="new">ScrollViewer in a control template</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It's typical for a ScrollViewer control to exist as a composite part of other controls.</source>
          <target state="new">It's typical for a ScrollViewer control to exist as a composite part of other controls.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A ScrollViewer part, along with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollContentPresenter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollcontentpresenter.aspx)</ept> class for support, will display a viewport along with scrollbars only when the host control's layout space is being constrained smaller than the expanded content size.</source>
          <target state="new">A ScrollViewer part, along with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollContentPresenter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollcontentpresenter.aspx)</ept> class for support, will display a viewport along with scrollbars only when the host control's layout space is being constrained smaller than the expanded content size.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is often the case for lists, so <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.listview.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.gridview.aspx)</ept> templates always include a ScrollViewer.</source>
          <target state="new">This is often the case for lists, so <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.listview.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.gridview.aspx)</ept> templates always include a ScrollViewer.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RichEditBox<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richeditbox.aspx)</ept> also include a ScrollViewer in their templates.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RichEditBox<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richeditbox.aspx)</ept> also include a ScrollViewer in their templates.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When a <bpt id="p1">**</bpt>ScrollViewer<ept id="p1">**</ept> part exists in a control, the host control often has built-in event handling for certain input events and manipulations that enable the content to scroll.</source>
          <target state="new">When a <bpt id="p1">**</bpt>ScrollViewer<ept id="p1">**</ept> part exists in a control, the host control often has built-in event handling for certain input events and manipulations that enable the content to scroll.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, a GridView interprets a swipe gesture and this causes the content to scroll horizontally.</source>
          <target state="new">For example, a GridView interprets a swipe gesture and this causes the content to scroll horizontally.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The input events and raw manipulations that the host control receives are considered handled by the control, and lower-level events such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.pointerpressed.aspx)</ept> won't be raised and won't bubble to any parent containers either.</source>
          <target state="new">The input events and raw manipulations that the host control receives are considered handled by the control, and lower-level events such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.pointerpressed.aspx)</ept> won't be raised and won't bubble to any parent containers either.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can change some of the built-in control handling by overriding a control class and the <bpt id="p1">**</bpt>On<ept id="p1">**</ept>* virtual methods for events, or by retemplating the control.</source>
          <target state="new">You can change some of the built-in control handling by overriding a control class and the <bpt id="p1">**</bpt>On<ept id="p1">**</ept>* virtual methods for events, or by retemplating the control.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>But in either case it's not trivial to reproduce the original default behavior, which is typically there so that the control reacts in expected ways to events and to a user's input actions and gestures.</source>
          <target state="new">But in either case it's not trivial to reproduce the original default behavior, which is typically there so that the control reacts in expected ways to events and to a user's input actions and gestures.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>So you should consider whether you really need that input event to fire.</source>
          <target state="new">So you should consider whether you really need that input event to fire.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You might want to investigate whether there are other input events or gestures that are not being handled by the control, and use those in your app or control interaction design.</source>
          <target state="new">You might want to investigate whether there are other input events or gestures that are not being handled by the control, and use those in your app or control interaction design.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To make it possible for controls that include a ScrollViewer to influence some of the behavior and properties that are from within the ScrollViewer part, ScrollViewer defines a number of XAML attached properties that can be set in styles and used in template bindings.</source>
          <target state="new">To make it possible for controls that include a ScrollViewer to influence some of the behavior and properties that are from within the ScrollViewer part, ScrollViewer defines a number of XAML attached properties that can be set in styles and used in template bindings.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more info about attached properties, see <bpt id="p1">[</bpt>Attached properties overview<ept id="p1">](../xaml-platform/attached-properties-overview.md)</ept>.</source>
          <target state="new">For more info about attached properties, see <bpt id="p1">[</bpt>Attached properties overview<ept id="p1">](../xaml-platform/attached-properties-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>ScrollViewer XAML attached properties</source>
          <target state="new">ScrollViewer XAML attached properties</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>ScrollViewer defines the following XAML attached properties:</source>
          <target state="new">ScrollViewer defines the following XAML attached properties:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>ScrollViewer.BringIntoViewOnFocusChange</source>
          <target state="new">ScrollViewer.BringIntoViewOnFocusChange</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>ScrollViewer.HorizontalScrollBarVisibility</source>
          <target state="new">ScrollViewer.HorizontalScrollBarVisibility</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>ScrollViewer.HorizontalScrollMode</source>
          <target state="new">ScrollViewer.HorizontalScrollMode</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>ScrollViewer.IsDeferredScrollingEnabled</source>
          <target state="new">ScrollViewer.IsDeferredScrollingEnabled</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>ScrollViewer.IsHorizontalRailEnabled</source>
          <target state="new">ScrollViewer.IsHorizontalRailEnabled</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ScrollViewer.IsHorizontalScrollChainingEnabled</source>
          <target state="new">ScrollViewer.IsHorizontalScrollChainingEnabled</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>ScrollViewer.IsScrollInertiaEnabled</source>
          <target state="new">ScrollViewer.IsScrollInertiaEnabled</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ScrollViewer.IsVerticalRailEnabled</source>
          <target state="new">ScrollViewer.IsVerticalRailEnabled</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ScrollViewer.IsVerticalScrollChainingEnabled</source>
          <target state="new">ScrollViewer.IsVerticalScrollChainingEnabled</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ScrollViewer.IsZoomChainingEnabled</source>
          <target state="new">ScrollViewer.IsZoomChainingEnabled</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>ScrollViewer.IsZoomInertiaEnabled</source>
          <target state="new">ScrollViewer.IsZoomInertiaEnabled</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>ScrollViewer.VerticalScrollBarVisibility</source>
          <target state="new">ScrollViewer.VerticalScrollBarVisibility</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>ScrollViewer.VerticalScrollMode</source>
          <target state="new">ScrollViewer.VerticalScrollMode</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>ScrollViewer.ZoomMode</source>
          <target state="new">ScrollViewer.ZoomMode</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These XAML attached properties are intended for cases where the ScrollViewer is implicit, such as when the ScrollViewer exists in the default template for a ListView or GridView, and you want to be able to influence the scrolling behavior of the control without accessing template parts.</source>
          <target state="new">These XAML attached properties are intended for cases where the ScrollViewer is implicit, such as when the ScrollViewer exists in the default template for a ListView or GridView, and you want to be able to influence the scrolling behavior of the control without accessing template parts.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, here's how to make the vertical scroll bars always visible for a ListView's built in scroll viewer.</source>
          <target state="new">For example, here's how to make the vertical scroll bars always visible for a ListView's built in scroll viewer.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For cases where a ScrollViewer is explicit in your XAML, as is shown in the example code, you don't need to use attached property syntax.</source>
          <target state="new">For cases where a ScrollViewer is explicit in your XAML, as is shown in the example code, you don't need to use attached property syntax.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Just use attribute syntax, for example <ph id="ph1">`&lt;ScrollViewer VerticalScrollBarVisibility="Visible"/&gt;`</ph>.</source>
          <target state="new">Just use attribute syntax, for example <ph id="ph1">`&lt;ScrollViewer VerticalScrollBarVisibility="Visible"/&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Recommendations</source>
          <target state="new">Recommendations</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use one-axis panning for content regions that extend beyond one viewport boundary (vertical or horizontal).</source>
          <target state="new">Use one-axis panning for content regions that extend beyond one viewport boundary (vertical or horizontal).</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Use two-axis panning for content regions that extend beyond both viewport boundaries (vertical and horizontal).</source>
          <target state="new">Use two-axis panning for content regions that extend beyond both viewport boundaries (vertical and horizontal).</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Use the built-in scroll functionality in the list box, drop-down list, text input box, grid view, list view, and hub controls.</source>
          <target state="new">Use the built-in scroll functionality in the list box, drop-down list, text input box, grid view, list view, and hub controls.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>With those controls, if there are too many items to show all at once, the user is able to scroll either horizontally or vertically over the list of items.</source>
          <target state="new">With those controls, if there are too many items to show all at once, the user is able to scroll either horizontally or vertically over the list of items.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you want the user to pan in both directions around a larger area, and possibly to zoom, too, for example, if you want to allow the user to pan and zoom over a full-sized image (rather than an image sized to fit the screen) then place the image inside a scroll viewer.</source>
          <target state="new">If you want the user to pan in both directions around a larger area, and possibly to zoom, too, for example, if you want to allow the user to pan and zoom over a full-sized image (rather than an image sized to fit the screen) then place the image inside a scroll viewer.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the user will scroll through a long passage of text, configure the scroll viewer to scroll vertically only.</source>
          <target state="new">If the user will scroll through a long passage of text, configure the scroll viewer to scroll vertically only.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use a scroll viewer to contain one object only.</source>
          <target state="new">Use a scroll viewer to contain one object only.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that the one object can be a layout panel, in turn containing any number of objects of its own.</source>
          <target state="new">Note that the one object can be a layout panel, in turn containing any number of objects of its own.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For developers (XAML)</source>
          <target state="new">For developers (XAML)</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>ScrollViewer class</source>
          <target state="new">ScrollViewer class</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>