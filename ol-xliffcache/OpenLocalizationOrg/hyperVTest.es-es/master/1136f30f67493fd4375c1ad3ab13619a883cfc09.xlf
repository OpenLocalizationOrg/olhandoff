<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="es-es">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Troubleshoot the Mobile Services .NET Backend | Microsoft Azure</source>
          <target state="new">Troubleshoot the Mobile Services .NET Backend | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to diagnose and fix issues with your mobile services using the .NET backend</source>
          <target state="new">Learn how to diagnose and fix issues with your mobile services using the .NET backend</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Troubleshoot the Mobile Services .NET Backend</source>
          <target state="new">Troubleshoot the Mobile Services .NET Backend</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Developing with Mobile Services is usually easy and painless, but even then things can sometimes go wrong.</source>
          <target state="new">Developing with Mobile Services is usually easy and painless, but even then things can sometimes go wrong.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This tutorial covers some techniques that let you troubleshoot common problems that can arise with the Mobile Services .NET backend.</source>
          <target state="new">This tutorial covers some techniques that let you troubleshoot common problems that can arise with the Mobile Services .NET backend.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>HTTP Debugging<ept id="p1">](#HttpDebugging)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>HTTP Debugging<ept id="p1">](#HttpDebugging)</ept></target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p2">[</bpt>Runtime Debugging<ept id="p2">](#RuntimeDebugging)</ept></source>
          <target state="new"><bpt id="p2">[</bpt>Runtime Debugging<ept id="p2">](#RuntimeDebugging)</ept></target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p3">[</bpt>Analyzing Diagnostic Logs<ept id="p3">](#Logs)</ept></source>
          <target state="new"><bpt id="p3">[</bpt>Analyzing Diagnostic Logs<ept id="p3">](#Logs)</ept></target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p4">[</bpt>Debugging Cloud Assembly Resolution<ept id="p4">](#AssemblyResolution)</ept></source>
          <target state="new"><bpt id="p4">[</bpt>Debugging Cloud Assembly Resolution<ept id="p4">](#AssemblyResolution)</ept></target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p5">[</bpt>Troubleshooting Entity Framework Migrations<ept id="p5">](#EFMigrations)</ept></source>
          <target state="new"><bpt id="p5">[</bpt>Troubleshooting Entity Framework Migrations<ept id="p5">](#EFMigrations)</ept></target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>HTTP Debugging</source>
          <target state="new">HTTP Debugging</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When developing apps with Mobile Services, you usually take advantage of the Mobile Services client SDK for the platform you are using (Windows Store, iOS, Android, etc).</source>
          <target state="new">When developing apps with Mobile Services, you usually take advantage of the Mobile Services client SDK for the platform you are using (Windows Store, iOS, Android, etc).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However some times it is helpful to drop down to the HTTP level and observe the raw calls as they happen on the network.</source>
          <target state="new">However some times it is helpful to drop down to the HTTP level and observe the raw calls as they happen on the network.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This approach is particularly useful when debugging connectivity and serialization issues.</source>
          <target state="new">This approach is particularly useful when debugging connectivity and serialization issues.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>With the Mobile Services .NET backend you can use this approach in combination with Visual Studio local and remote debugging (more on that in the next section) to get a complete idea of the the path a HTTP call makes before it invokes your service code.</source>
          <target state="new">With the Mobile Services .NET backend you can use this approach in combination with Visual Studio local and remote debugging (more on that in the next section) to get a complete idea of the the path a HTTP call makes before it invokes your service code.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use any HTTP debugger to send and inspect HTTP traffic.</source>
          <target state="new">You can use any HTTP debugger to send and inspect HTTP traffic.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p6">[</bpt>Fiddler<ept id="p6">](http://www.telerik.com/fiddler)</ept><ph id="ph5" /> is a popular tool commonly used by developers for this purpose.</source>
          <target state="new"><bpt id="p6">[</bpt>Fiddler<ept id="p6">](http://www.telerik.com/fiddler)</ept><ph id="ph5" /> is a popular tool commonly used by developers for this purpose.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To make developers' lives easier, Mobile Services bundles a web-based HTTP debugger (also referred to as the "test client) right with your mobile service, reducing the need for external tooling.</source>
          <target state="new">To make developers' lives easier, Mobile Services bundles a web-based HTTP debugger (also referred to as the "test client) right with your mobile service, reducing the need for external tooling.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When hosting your mobile service locally, it will be available at a URI similar to <bpt id="p7">[</bpt>http://localhost:59233<ept id="p7">](http://localhost:59233)</ept><ph id="ph6" /> and when hosting in the cloud, the URI will be of the form <bpt id="p8">[</bpt>http://todo-list.azure-mobile.net<ept id="p8">](http://todo-list.azure-mobile.net)</ept>.</source>
          <target state="new">When hosting your mobile service locally, it will be available at a URI similar to <bpt id="p7">[</bpt>http://localhost:59233<ept id="p7">](http://localhost:59233)</ept><ph id="ph6" /> and when hosting in the cloud, the URI will be of the form <bpt id="p8">[</bpt>http://todo-list.azure-mobile.net<ept id="p8">](http://todo-list.azure-mobile.net)</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following steps work the same way regardless of where the service is hosted:</source>
          <target state="new">The following steps work the same way regardless of where the service is hosted:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Start with a Mobile Services server project open in <bpt id="p9">**</bpt>Visual Studio 2013 Update 2<ept id="p9">**</ept><ph id="ph7" /> or later.</source>
          <target state="new">Start with a Mobile Services server project open in <bpt id="p9">**</bpt>Visual Studio 2013 Update 2<ept id="p9">**</ept><ph id="ph7" /> or later.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you don't have one handy, you can create one by selecting <bpt id="p10">**</bpt>File<ept id="p10">**</ept>, <bpt id="p11">**</bpt>New<ept id="p11">**</ept>, <bpt id="p12">**</bpt>Project<ept id="p12">**</ept>, then selecting the <bpt id="p13">**</bpt>Cloud<ept id="p13">**</ept><ph id="ph8" /> node and then the <bpt id="p14">**</bpt>Microsoft Azure Mobile Services<ept id="p14">**</ept><ph id="ph9" /> template.</source>
          <target state="new">If you don't have one handy, you can create one by selecting <bpt id="p10">**</bpt>File<ept id="p10">**</ept>, <bpt id="p11">**</bpt>New<ept id="p11">**</ept>, <bpt id="p12">**</bpt>Project<ept id="p12">**</ept>, then selecting the <bpt id="p13">**</bpt>Cloud<ept id="p13">**</ept><ph id="ph8" /> node and then the <bpt id="p14">**</bpt>Microsoft Azure Mobile Services<ept id="p14">**</ept><ph id="ph9" /> template.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Hit <bpt id="p15">**</bpt>F5<ept id="p15">**</ept>, which will build and run the project.</source>
          <target state="new">Hit <bpt id="p15">**</bpt>F5<ept id="p15">**</ept>, which will build and run the project.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>On the start page, select <bpt id="p16">**</bpt>try it out<ept id="p16">**</ept>.</source>
          <target state="new">On the start page, select <bpt id="p16">**</bpt>try it out<ept id="p16">**</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph10">[AZURE.NOTE]</ph>
If the service is hosted locally, clicking the link will direct you to the next page.</source>
          <target state="new"><ph id="ph10">[AZURE.NOTE]</ph>
If the service is hosted locally, clicking the link will direct you to the next page.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, if hosting in the cloud, you will be prompted for a set of credentials.</source>
          <target state="new">However, if hosting in the cloud, you will be prompted for a set of credentials.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is to ensure that unauthenticated users don't have access to information about your API and payloads.</source>
          <target state="new">This is to ensure that unauthenticated users don't have access to information about your API and payloads.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In order to see the page, you need to log in with a <bpt id="p17">**</bpt>blank username<ept id="p17">**</ept><ph id="ph11" /> and your <bpt id="p18">**</bpt>application key<ept id="p18">**</ept><ph id="ph12" /> as the password.</source>
          <target state="new">In order to see the page, you need to log in with a <bpt id="p17">**</bpt>blank username<ept id="p17">**</ept><ph id="ph11" /> and your <bpt id="p18">**</bpt>application key<ept id="p18">**</ept><ph id="ph12" /> as the password.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Your application key is available in the Azure classic portal by navigating to the <bpt id="p19">**</bpt>Dashboard<ept id="p19">**</ept><ph id="ph13" /> tab for your mobile service and selecting <bpt id="p20">**</bpt>Manage keys<ept id="p20">**</ept>.</source>
          <target state="new">Your application key is available in the Azure classic portal by navigating to the <bpt id="p19">**</bpt>Dashboard<ept id="p19">**</ept><ph id="ph13" /> tab for your mobile service and selecting <bpt id="p20">**</bpt>Manage keys<ept id="p20">**</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph14">![</ph>Authentication prompt to access help page<ph id="ph15">][HelpPageAuth]</ph></source>
          <target state="new"><ph id="ph14">![</ph>Authentication prompt to access help page<ph id="ph15">][HelpPageAuth]</ph></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The page you see (referred to as the "help page") shows a list of all HTTP APIs that your mobile service is making available.</source>
          <target state="new">The page you see (referred to as the "help page") shows a list of all HTTP APIs that your mobile service is making available.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Select one of the APIs (if you started using the Mobile Services project template in Visual Studio, you should see <bpt id="p21">**</bpt>GET tables/TodoItem<ept id="p21">**</ept>).</source>
          <target state="new">Select one of the APIs (if you started using the Mobile Services project template in Visual Studio, you should see <bpt id="p21">**</bpt>GET tables/TodoItem<ept id="p21">**</ept>).</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph16">![</ph>Help page<ph id="ph17">][HelpPage]</ph></source>
          <target state="new"><ph id="ph16">![</ph>Help page<ph id="ph17">][HelpPage]</ph></target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The  resulting page shows any documentation and JSON examples of the request and response that the API expects.</source>
          <target state="new">The  resulting page shows any documentation and JSON examples of the request and response that the API expects.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p22">**</bpt>try this out<ept id="p22">**</ept><ph id="ph18" /> button.</source>
          <target state="new">Select the <bpt id="p22">**</bpt>try this out<ept id="p22">**</ept><ph id="ph18" /> button.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph19">![</ph>Test page for an API<ph id="ph20">][HelpPageApi]</ph></source>
          <target state="new"><ph id="ph19">![</ph>Test page for an API<ph id="ph20">][HelpPageApi]</ph></target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is the "test client", which lets you send a HTTP request to try out your API.</source>
          <target state="new">This is the "test client", which lets you send a HTTP request to try out your API.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p23">**</bpt>send<ept id="p23">**</ept>.</source>
          <target state="new">Select <bpt id="p23">**</bpt>send<ept id="p23">**</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph21">![</ph>Test client<ph id="ph22">][TestClient]</ph></source>
          <target state="new"><ph id="ph21">![</ph>Test client<ph id="ph22">][TestClient]</ph></target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You will see the HTTP response coming back from your mobile service right in the browser window.</source>
          <target state="new">You will see the HTTP response coming back from your mobile service right in the browser window.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph23">![</ph>Test client with HTTP response<ph id="ph24">][TestClientResponse]</ph></source>
          <target state="new"><ph id="ph23">![</ph>Test client with HTTP response<ph id="ph24">][TestClientResponse]</ph></target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Now you are ready to explore the different HTTP APIs exposed by your mobile service in the convenience of your web browser.</source>
          <target state="new">Now you are ready to explore the different HTTP APIs exposed by your mobile service in the convenience of your web browser.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Runtime Debugging</source>
          <target state="new">Runtime Debugging</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>One of the key features of the .NET backend is the ability to debug the service code locally, but also to debug the code running live in the cloud environment.</source>
          <target state="new">One of the key features of the .NET backend is the ability to debug the service code locally, but also to debug the code running live in the cloud environment.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Follow these steps:</source>
          <target state="new">Follow these steps:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Open the mobile service project you would like to debug in <bpt id="p24">**</bpt>Visual Studio 2013 Update 2<ept id="p24">**</ept><ph id="ph27" /> or later.</source>
          <target state="new">Open the mobile service project you would like to debug in <bpt id="p24">**</bpt>Visual Studio 2013 Update 2<ept id="p24">**</ept><ph id="ph27" /> or later.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Configure symbol loading.</source>
          <target state="new">Configure symbol loading.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Navigate to the <bpt id="p25">**</bpt>Debug<ept id="p25">**</ept><ph id="ph28" /> menu and select <bpt id="p26">**</bpt>Options and Settings<ept id="p26">**</ept>.</source>
          <target state="new">Navigate to the <bpt id="p25">**</bpt>Debug<ept id="p25">**</ept><ph id="ph28" /> menu and select <bpt id="p26">**</bpt>Options and Settings<ept id="p26">**</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Ensure that <bpt id="p27">**</bpt>Enable Just My Code<ept id="p27">**</ept><ph id="ph29" /> is unchecked and that <bpt id="p28">**</bpt>Enable source server support<ept id="p28">**</ept><ph id="ph30" /> is checked.</source>
          <target state="new">Ensure that <bpt id="p27">**</bpt>Enable Just My Code<ept id="p27">**</ept><ph id="ph29" /> is unchecked and that <bpt id="p28">**</bpt>Enable source server support<ept id="p28">**</ept><ph id="ph30" /> is checked.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph31">![</ph>Configure symbol loading<ph id="ph32">][SymbolLoading]</ph></source>
          <target state="new"><ph id="ph31">![</ph>Configure symbol loading<ph id="ph32">][SymbolLoading]</ph></target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p29">**</bpt>Symbols<ept id="p29">**</ept><ph id="ph33" /> node on the left and add a reference to the [SymbolSource] server using the URI <bpt id="p30">[</bpt>http://srv.symbolsource.org/pdb/Public<ept id="p30">](http://srv.symbolsource.org/pdb/Public)</ept>.</source>
          <target state="new">Select the <bpt id="p29">**</bpt>Symbols<ept id="p29">**</ept><ph id="ph33" /> node on the left and add a reference to the [SymbolSource] server using the URI <bpt id="p30">[</bpt>http://srv.symbolsource.org/pdb/Public<ept id="p30">](http://srv.symbolsource.org/pdb/Public)</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Symbols for the Mobile Services .NET backend are made available there with every new release.</source>
          <target state="new">Symbols for the Mobile Services .NET backend are made available there with every new release.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph34">![</ph>Configure symbol server<ph id="ph35">][SymbolServer]</ph></source>
          <target state="new"><ph id="ph34">![</ph>Configure symbol server<ph id="ph35">][SymbolServer]</ph></target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in the piece of code you would like to debug.</source>
          <target state="new">Set a breakpoint in the piece of code you would like to debug.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example set a breakpoint in the <bpt id="p31">**</bpt>GetAllTodoItems()<ept id="p31">**</ept><ph id="ph36" /> method of the <bpt id="p32">**</bpt>TodoItemController<ept id="p32">**</ept><ph id="ph37" /> that comes with the Mobile Services project template in Visual Studio.</source>
          <target state="new">For example set a breakpoint in the <bpt id="p31">**</bpt>GetAllTodoItems()<ept id="p31">**</ept><ph id="ph36" /> method of the <bpt id="p32">**</bpt>TodoItemController<ept id="p32">**</ept><ph id="ph37" /> that comes with the Mobile Services project template in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Debug the service locally by pressing <bpt id="p33">**</bpt>F5<ept id="p33">**</ept>.</source>
          <target state="new">Debug the service locally by pressing <bpt id="p33">**</bpt>F5<ept id="p33">**</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The first load may be slow as Visual Studio is downloading symbols for the Mobile Services .NET backend.</source>
          <target state="new">The first load may be slow as Visual Studio is downloading symbols for the Mobile Services .NET backend.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>As described in the previous section on HTTP debugging, use the test client to send a HTTP request to the method where you set the breakpoint.</source>
          <target state="new">As described in the previous section on HTTP debugging, use the test client to send a HTTP request to the method where you set the breakpoint.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example you can send a request to the <bpt id="p34">**</bpt>GetAllTodoItems()<ept id="p34">**</ept><ph id="ph38" /> method by selecting <bpt id="p35">**</bpt>GET tables/TodoItem<ept id="p35">**</ept><ph id="ph39" /> on the help page, then selecting <bpt id="p36">**</bpt>try this out<ept id="p36">**</ept><ph id="ph40" /> and then <bpt id="p37">**</bpt>send<ept id="p37">**</ept>.</source>
          <target state="new">For example you can send a request to the <bpt id="p34">**</bpt>GetAllTodoItems()<ept id="p34">**</ept><ph id="ph38" /> method by selecting <bpt id="p35">**</bpt>GET tables/TodoItem<ept id="p35">**</ept><ph id="ph39" /> on the help page, then selecting <bpt id="p36">**</bpt>try this out<ept id="p36">**</ept><ph id="ph40" /> and then <bpt id="p37">**</bpt>send<ept id="p37">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Visual Studio should break at the breakpoint you set, and a full stack trace with source code should be available in the <bpt id="p38">**</bpt>Call Stack<ept id="p38">**</ept><ph id="ph41" /> window in Visual Studio.</source>
          <target state="new">Visual Studio should break at the breakpoint you set, and a full stack trace with source code should be available in the <bpt id="p38">**</bpt>Call Stack<ept id="p38">**</ept><ph id="ph41" /> window in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph42">![</ph>Hitting a breakpoint<ph id="ph43">][Breakpoint]</ph></source>
          <target state="new"><ph id="ph42">![</ph>Hitting a breakpoint<ph id="ph43">][Breakpoint]</ph></target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can now publish the service to Azure, and we will be able to use debugging just like we did above.</source>
          <target state="new">You can now publish the service to Azure, and we will be able to use debugging just like we did above.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Publish the project by right-clicking it in <bpt id="p39">**</bpt>Solution Explorer<ept id="p39">**</ept><ph id="ph44" /> and selecting <bpt id="p40">**</bpt>Publish<ept id="p40">**</ept>.</source>
          <target state="new">Publish the project by right-clicking it in <bpt id="p39">**</bpt>Solution Explorer<ept id="p39">**</ept><ph id="ph44" /> and selecting <bpt id="p40">**</bpt>Publish<ept id="p40">**</ept>.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p41">**</bpt>Settings<ept id="p41">**</ept><ph id="ph45" /> tab of the Publish wizard, select the <bpt id="p42">**</bpt>Debug<ept id="p42">**</ept><ph id="ph46" /> configuration.</source>
          <target state="new">On the <bpt id="p41">**</bpt>Settings<ept id="p41">**</ept><ph id="ph45" /> tab of the Publish wizard, select the <bpt id="p42">**</bpt>Debug<ept id="p42">**</ept><ph id="ph46" /> configuration.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This ensures that the relevant debugging symbols are published with your code.</source>
          <target state="new">This ensures that the relevant debugging symbols are published with your code.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph47">![</ph>Publish debug<ph id="ph48">][PublishDebug]</ph></source>
          <target state="new"><ph id="ph47">![</ph>Publish debug<ph id="ph48">][PublishDebug]</ph></target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Once the service has published successfully, open <bpt id="p43">**</bpt>Server Explorer<ept id="p43">**</ept><ph id="ph49" /> and expand the <bpt id="p44">**</bpt>Azure<ept id="p44">**</ept><ph id="ph50" /> and <bpt id="p45">**</bpt>Mobile Services<ept id="p45">**</ept><ph id="ph51" /> nodes.</source>
          <target state="new">Once the service has published successfully, open <bpt id="p43">**</bpt>Server Explorer<ept id="p43">**</ept><ph id="ph49" /> and expand the <bpt id="p44">**</bpt>Azure<ept id="p44">**</ept><ph id="ph50" /> and <bpt id="p45">**</bpt>Mobile Services<ept id="p45">**</ept><ph id="ph51" /> nodes.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Sign in if necessary.</source>
          <target state="new">Sign in if necessary.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Right click the mobile service you just published to and select <bpt id="p46">**</bpt>Attach Debugger<ept id="p46">**</ept>.</source>
          <target state="new">Right click the mobile service you just published to and select <bpt id="p46">**</bpt>Attach Debugger<ept id="p46">**</ept>.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph52">![</ph>Attach debugger<ph id="ph53">][AttachDebugger]</ph></source>
          <target state="new"><ph id="ph52">![</ph>Attach debugger<ph id="ph53">][AttachDebugger]</ph></target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Just as you did in step 6, send a HTTP request to invoke the method where you set the breakpoint.</source>
          <target state="new">Just as you did in step 6, send a HTTP request to invoke the method where you set the breakpoint.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This time use the help page and test client for the Azure-hosted mobile service.</source>
          <target state="new">This time use the help page and test client for the Azure-hosted mobile service.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Visual Studio will break at the breakpoint.</source>
          <target state="new">Visual Studio will break at the breakpoint.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You now have access the the full power of the Visual Studio debugger when developing locally and against your live mobile service in Azure.</source>
          <target state="new">You now have access the the full power of the Visual Studio debugger when developing locally and against your live mobile service in Azure.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Analyzing Diagnostic Logs</source>
          <target state="new">Analyzing Diagnostic Logs</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>As your mobile service handles requests from your customers, it generates a variety of useful diagnostic information, and also captures any exceptions encountered.</source>
          <target state="new">As your mobile service handles requests from your customers, it generates a variety of useful diagnostic information, and also captures any exceptions encountered.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In addition to that, you can instrument your controller code with additional logs by taking advantage of the <bpt id="p47">[</bpt><bpt id="p48">**</bpt>Log<ept id="p48">**</ept><ept id="p47">](http://msdn.microsoft.com/library/microsoft.windowsazure.mobile.service.apiservices.log.aspx)</ept><ph id="ph56" /> property available on the <bpt id="p49">[</bpt><bpt id="p50">**</bpt>Services<ept id="p50">**</ept><ept id="p49">](http://msdn.microsoft.com/library/microsoft.windowsazure.mobile.service.tables.tablecontroller.services.aspx)</ept><ph id="ph57" /> property of every <bpt id="p51">[</bpt><bpt id="p52">**</bpt>TableController<ept id="p52">**</ept><ept id="p51">](http://msdn.microsoft.com/library/microsoft.windowsazure.mobile.service.tables.tablecontroller.aspx)</ept>.</source>
          <target state="new">In addition to that, you can instrument your controller code with additional logs by taking advantage of the <bpt id="p47">[</bpt><bpt id="p48">**</bpt>Log<ept id="p48">**</ept><ept id="p47">](http://msdn.microsoft.com/library/microsoft.windowsazure.mobile.service.apiservices.log.aspx)</ept><ph id="ph56" /> property available on the <bpt id="p49">[</bpt><bpt id="p50">**</bpt>Services<ept id="p50">**</ept><ept id="p49">](http://msdn.microsoft.com/library/microsoft.windowsazure.mobile.service.tables.tablecontroller.services.aspx)</ept><ph id="ph57" /> property of every <bpt id="p51">[</bpt><bpt id="p52">**</bpt>TableController<ept id="p52">**</ept><ept id="p51">](http://msdn.microsoft.com/library/microsoft.windowsazure.mobile.service.tables.tablecontroller.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When debugging locally, the logs will appear in the Visual Studio <bpt id="p53">**</bpt>Output<ept id="p53">**</ept><ph id="ph58" /> window.</source>
          <target state="new">When debugging locally, the logs will appear in the Visual Studio <bpt id="p53">**</bpt>Output<ept id="p53">**</ept><ph id="ph58" /> window.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph59">![</ph>Logs in Visual Studio Output window<ph id="ph60">][LogsOutputWindow]</ph></source>
          <target state="new"><ph id="ph59">![</ph>Logs in Visual Studio Output window<ph id="ph60">][LogsOutputWindow]</ph></target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>After you publish your service to Azure, the logs for the service instance running in the cloud are available by right-clicking the mobile service in Visual Studio's <bpt id="p54">**</bpt>Server Explorer<ept id="p54">**</ept><ph id="ph61" /> and then selecting <bpt id="p55">**</bpt>View Logs<ept id="p55">**</ept>.</source>
          <target state="new">After you publish your service to Azure, the logs for the service instance running in the cloud are available by right-clicking the mobile service in Visual Studio's <bpt id="p54">**</bpt>Server Explorer<ept id="p54">**</ept><ph id="ph61" /> and then selecting <bpt id="p55">**</bpt>View Logs<ept id="p55">**</ept>.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph62">![</ph>Logs in Visual Studio Server Explorer<ph id="ph63">][LogsServerExplorer]</ph></source>
          <target state="new"><ph id="ph62">![</ph>Logs in Visual Studio Server Explorer<ph id="ph63">][LogsServerExplorer]</ph></target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The same logs are also available in the Azure classic portal on the <bpt id="p56">**</bpt>Logs<ept id="p56">**</ept><ph id="ph64" /> tab for your mobile service.</source>
          <target state="new">The same logs are also available in the Azure classic portal on the <bpt id="p56">**</bpt>Logs<ept id="p56">**</ept><ph id="ph64" /> tab for your mobile service.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph65">![</ph>Logs in Azure classic portal<ph id="ph66">][LogsPortal]</ph></source>
          <target state="new"><ph id="ph65">![</ph>Logs in Azure classic portal<ph id="ph66">][LogsPortal]</ph></target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Debugging Cloud Assembly Resolution</source>
          <target state="new">Debugging Cloud Assembly Resolution</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you publish your mobile service to Azure, it gets loaded by the Mobile Services hosting environment, which ensures seamless upgrades and patches to the HTTP pipeline hosting your controller code.</source>
          <target state="new">When you publish your mobile service to Azure, it gets loaded by the Mobile Services hosting environment, which ensures seamless upgrades and patches to the HTTP pipeline hosting your controller code.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This includes all assemblies referenced by the <bpt id="p57">[</bpt>.NET backend NuGet packages<ept id="p57">](http://www.nuget.org/packages?q=%22mobile+services+.net+backend%22)</ept>: the team constantly updates the service to use the latest versions of those assemblies.</source>
          <target state="new">This includes all assemblies referenced by the <bpt id="p57">[</bpt>.NET backend NuGet packages<ept id="p57">](http://www.nuget.org/packages?q=%22mobile+services+.net+backend%22)</ept>: the team constantly updates the service to use the latest versions of those assemblies.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>It is sometimes possible to introduce versioning conflicts by referencing <bpt id="p58">*</bpt>different major versions<ept id="p58">*</ept><ph id="ph69" /> of required assemblies (different <bpt id="p59">*</bpt>minor<ept id="p59">*</ept><ph id="ph70" /> versions are allowed).</source>
          <target state="new">It is sometimes possible to introduce versioning conflicts by referencing <bpt id="p58">*</bpt>different major versions<ept id="p58">*</ept><ph id="ph69" /> of required assemblies (different <bpt id="p59">*</bpt>minor<ept id="p59">*</ept><ph id="ph70" /> versions are allowed).</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Frequently this happens when NuGet prompts you to upgrade to the latest version of one of the packages used by the Mobile Services .NET backend.</source>
          <target state="new">Frequently this happens when NuGet prompts you to upgrade to the latest version of one of the packages used by the Mobile Services .NET backend.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph71">[AZURE.NOTE]</ph><ph id="ph72" /> Mobile Services is currently compatible only with ASP.NET 5.1; ASP.NET 5.2 is not presently supported.</source>
          <target state="new"><ph id="ph71">[AZURE.NOTE]</ph><ph id="ph72" /> Mobile Services is currently compatible only with ASP.NET 5.1; ASP.NET 5.2 is not presently supported.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Upgrading your ASP.NET NuGet packages to 5.2.* may result in an error after deployment.</source>
          <target state="new">Upgrading your ASP.NET NuGet packages to 5.2.* may result in an error after deployment.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you do upgrade any such packages, when you publish the updated service to Azure, you will see a warning page indicating the conflict:</source>
          <target state="new">If you do upgrade any such packages, when you publish the updated service to Azure, you will see a warning page indicating the conflict:</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph73">![</ph>Help page indicating assembly loading conflict<ph id="ph74">][HelpConflict]</ph></source>
          <target state="new"><ph id="ph73">![</ph>Help page indicating assembly loading conflict<ph id="ph74">][HelpConflict]</ph></target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This will be accompanied by an exception message similar to the following being recored in your service logs:</source>
          <target state="new">This will be accompanied by an exception message similar to the following being recored in your service logs:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This problem is easy to correct: simply revert to a supported version of the required assembly and republish your service.</source>
          <target state="new">This problem is easy to correct: simply revert to a supported version of the required assembly and republish your service.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Troubleshooting Entity Framework Migrations</source>
          <target state="new">Troubleshooting Entity Framework Migrations</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When using the Mobile Services .NET backend with a SQL Database, Entity Framework (EF) is used as the data access technology that enables you to query the database and persist objects into it.</source>
          <target state="new">When using the Mobile Services .NET backend with a SQL Database, Entity Framework (EF) is used as the data access technology that enables you to query the database and persist objects into it.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>One important aspect that EF handles on behalf of the developer is how the database columns (also known as <bpt id="p60">*</bpt>schema<ept id="p60">*</ept>) change as the model classes specified in code change.</source>
          <target state="new">One important aspect that EF handles on behalf of the developer is how the database columns (also known as <bpt id="p60">*</bpt>schema<ept id="p60">*</ept>) change as the model classes specified in code change.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This process is known as <bpt id="p61">[</bpt>Code First Migrations<ept id="p61">](http://msdn.microsoft.com/data/jj591621)</ept>.</source>
          <target state="new">This process is known as <bpt id="p61">[</bpt>Code First Migrations<ept id="p61">](http://msdn.microsoft.com/data/jj591621)</ept>.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Migrations can be complex and require that the database state be kept in sync with the EF model in order to succeed.</source>
          <target state="new">Migrations can be complex and require that the database state be kept in sync with the EF model in order to succeed.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For instructions on how to handle migrations with you mobile service and errors that can arise, see <bpt id="p62">[</bpt>How to make data model changes to a .NET backend mobile service<ept id="p62">](mobile-services-dotnet-backend-how-to-use-code-first-migrations.md)</ept>.</source>
          <target state="new">For instructions on how to handle migrations with you mobile service and errors that can arise, see <bpt id="p62">[</bpt>How to make data model changes to a .NET backend mobile service<ept id="p62">](mobile-services-dotnet-backend-how-to-use-code-first-migrations.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>[SymbolSource]:http://symbolsource.org</source>
          <target state="new">[SymbolSource]:http://symbolsource.org</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1136f30f67493fd4375c1ad3ab13619a883cfc09</xliffext:olfilehash>
  </header>
</xliff>