<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">3a2875a75f0af3ae843206c5c4fa3982ec8dc006</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Description: Offer consumable in-app products&amp;\#8212;items that can be purchased, used, and purchased again&amp;\#8212;through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.</source>
          <target xml:space="preserve">Description: Offer consumable in-app products&amp;\#8212;items that can be purchased, used, and purchased again&amp;\#8212;through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Enable consumable in-app product purchases</source>
          <target xml:space="preserve">title: Enable consumable in-app product purchases</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: F79EE369-ACFC-4156-AF6A-72D1C7D3BDA4</source>
          <target xml:space="preserve">ms.assetid: F79EE369-ACFC-4156-AF6A-72D1C7D3BDA4</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">keywords: in-app offer</source>
          <target xml:space="preserve">keywords: in-app offer</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">keywords: consumable</source>
          <target xml:space="preserve">keywords: consumable</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">keywords: in-app purchase</source>
          <target xml:space="preserve">keywords: in-app purchase</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">keywords: in-app product</source>
          <target xml:space="preserve">keywords: in-app product</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">keywords: how to support in-app</source>
          <target xml:space="preserve">keywords: how to support in-app</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">keywords: in-app purchase code sample</source>
          <target xml:space="preserve">keywords: in-app purchase code sample</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">keywords: in-app offer code sample</source>
          <target xml:space="preserve">keywords: in-app offer code sample</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Enable consumable in-app product purchases</source>
          <target xml:space="preserve">Enable consumable in-app product purchases</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Offer consumable in-app products—items that can be purchased, used, and purchased again—through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.</source>
          <target xml:space="preserve">Offer consumable in-app products—items that can be purchased, used, and purchased again—through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">This is especially useful for things like in-game currency (gold, coins, etc.) that can be purchased and then used to purchase specific power-ups.</source>
          <target xml:space="preserve">This is especially useful for things like in-game currency (gold, coins, etc.) that can be purchased and then used to purchase specific power-ups.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Prerequisites</source>
          <target xml:space="preserve">Prerequisites</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">This topic covers the purchase and fulfillment reporting of consumable in-app products.</source>
          <target xml:space="preserve">This topic covers the purchase and fulfillment reporting of consumable in-app products.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](enable-in-app-product-purchases.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you are unfamiliar with in-app products, please review <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable in-app product purchases</pc> to learn about license information, and how to properly list in-app products in the Store.</source>
          <target xml:space="preserve">If you are unfamiliar with in-app products, please review <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable in-app product purchases</pc> to learn about license information, and how to properly list in-app products in the Store.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh779766)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh779765)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When you code and test new in-app products for the first time, you must use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CurrentAppSimulator</pc></pc> object instead of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CurrentApp</pc></pc> object.</source>
          <target xml:space="preserve">When you code and test new in-app products for the first time, you must use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CurrentAppSimulator</pc></pc> object instead of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CurrentApp</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">This way you can verify your license logic using simulated calls to the license server instead of calling the live server.</source>
          <target xml:space="preserve">This way you can verify your license logic using simulated calls to the license server instead of calling the live server.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">To do this, you need to customize the file named "WindowsStoreProxy.xml" in %userprofile%\\AppData\\local\\packages\\&amp;lt;package name&amp;gt;\\LocalState\\Microsoft\\Windows Store\\ApiData.</source>
          <target xml:space="preserve">To do this, you need to customize the file named "WindowsStoreProxy.xml" in %userprofile%\\AppData\\local\\packages\\&amp;lt;package name&amp;gt;\\LocalState\\Microsoft\\Windows Store\\ApiData.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">The Microsoft Visual Studio simulator creates this file when you run your app for the first time—or you can also load a custom one at runtime.</source>
          <target xml:space="preserve">The Microsoft Visual Studio simulator creates this file when you run your app for the first time—or you can also load a custom one at runtime.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentAppSimulator</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentAppSimulator</pc>.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkID=627610)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This topic also references code examples provided in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store sample</pc>.</source>
          <target xml:space="preserve">This topic also references code examples provided in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store sample</pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">This sample is a great way to get hands-on experience with the different monetization options provided for Universal Windows Platform (UWP) apps.</source>
          <target xml:space="preserve">This sample is a great way to get hands-on experience with the different monetization options provided for Universal Windows Platform (UWP) apps.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Step 1: Making the purchase request</source>
          <target xml:space="preserve">Step 1: Making the purchase request</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263381)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The initial purchase request is made with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> like any other purchase made through the Store.</source>
          <target xml:space="preserve">The initial purchase request is made with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> like any other purchase made through the Store.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">The difference for consumable in-app products is that after a successful purchase, a customer cannot purchase the same product again until the app has notified the Store that the previous purchase was successfully fulfilled.</source>
          <target xml:space="preserve">The difference for consumable in-app products is that after a successful purchase, a customer cannot purchase the same product again until the app has notified the Store that the previous purchase was successfully fulfilled.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">It's your app's responsibility to fulfill purchased consumables and notify the Store of the fulfillment.</source>
          <target xml:space="preserve">It's your app's responsibility to fulfill purchased consumables and notify the Store of the fulfillment.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">The following example shows a consumable in-app product purchase request.</source>
          <target xml:space="preserve">The following example shows a consumable in-app product purchase request.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">You'll notice code comments indicating when your app should conduct its local fulfillment of the consumable in-app product for two different scenarios—when the request is successful, and when the request is not successful because of an unfulfilled purchase of that same product.</source>
          <target xml:space="preserve">You'll notice code comments indicating when your app should conduct its local fulfillment of the consumable in-app product for two different scenarios—when the request is successful, and when the request is not successful because of an unfulfilled purchase of that same product.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Step 2: Tracking local fulfillment of the consumable</source>
          <target xml:space="preserve">Step 2: Tracking local fulfillment of the consumable</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When granting your customer access to the consumable in-app product, it's important to keep track of which product is fulfilled (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">productId</pc>), and which transaction that fulfillment is associated with (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">transactionId</pc>).</source>
          <target xml:space="preserve">When granting your customer access to the consumable in-app product, it's important to keep track of which product is fulfilled (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">productId</pc>), and which transaction that fulfillment is associated with (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">transactionId</pc>).</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Your app is responsible for the accurately reporting fulfillment to the Store.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Your app is responsible for the accurately reporting fulfillment to the Store.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">This step is essential to maintaining a fair and reliable purchase experience for your customers.</source>
          <target xml:space="preserve">This step is essential to maintaining a fair and reliable purchase experience for your customers.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263392)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn263381)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The following example demonstrates use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PurchaseResults</pc></pc> properties from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RequestProductPurchaseAsync</pc></pc> call in the previous step to identify the purchased product for fulfillment.</source>
          <target xml:space="preserve">The following example demonstrates use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PurchaseResults</pc></pc> properties from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RequestProductPurchaseAsync</pc></pc> call in the previous step to identify the purchased product for fulfillment.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">An array is used to store the product information in a location that can later be referenced to confirm that local fulfillment was successful.</source>
          <target xml:space="preserve">An array is used to store the product information in a location that can later be referenced to confirm that local fulfillment was successful.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">This next example shows how to use the array from the previous example to access product ID/transaction ID pairs that are later used when reporting fulfillment to the Store.</source>
          <target xml:space="preserve">This next example shows how to use the array from the previous example to access product ID/transaction ID pairs that are later used when reporting fulfillment to the Store.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Whatever methodology your app uses to track and confirm fulfillment, your app must demonstrate due diligence to ensure that your customers are not charged for items they haven't received.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Whatever methodology your app uses to track and confirm fulfillment, your app must demonstrate due diligence to ensure that your customers are not charged for items they haven't received.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Step 3: Reporting product fulfillment to the Store</source>
          <target xml:space="preserve">Step 3: Reporting product fulfillment to the Store</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263380)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">After local fulfillment is completed, your app must make a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReportConsumableFulfillmentAsync</pc></pc> call that includes the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">productId</pc> and the transaction the product purchase is included in.</source>
          <target xml:space="preserve">After local fulfillment is completed, your app must make a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReportConsumableFulfillmentAsync</pc></pc> call that includes the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">productId</pc> and the transaction the product purchase is included in.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Failure to report fulfilled consumable in-app products to the Store will result in the user being unable to purchase that product again until fulfillment for the previous purchase is reported.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Failure to report fulfilled consumable in-app products to the Store will result in the user being unable to purchase that product again until fulfillment for the previous purchase is reported.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Step 4: Identifying unfulfilled purchases</source>
          <target xml:space="preserve">Step 4: Identifying unfulfilled purchases</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263379)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Your app can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetUnfulfilledConsumablesAsync</pc></pc> method to check for unfulfilled consumable in-app products at any time.</source>
          <target xml:space="preserve">Your app can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetUnfulfilledConsumablesAsync</pc></pc> method to check for unfulfilled consumable in-app products at any time.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">This method should be called on a regular basis to check for unfulfilled consumables that exist due to unanticipated app events like an interruption in network connectivity or app termination.</source>
          <target xml:space="preserve">This method should be called on a regular basis to check for unfulfilled consumables that exist due to unanticipated app events like an interruption in network connectivity or app termination.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263379)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The following example demonstrates how <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetUnfulfilledConsumablesAsync</pc></pc> can be used to enumerate unfulfilled consumables, and how your app can iterate through this list to complete local fulfillment.</source>
          <target xml:space="preserve">The following example demonstrates how <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetUnfulfilledConsumablesAsync</pc></pc> can be used to enumerate unfulfilled consumables, and how your app can iterate through this list to complete local fulfillment.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">Enable in-app product purchases</source>
          <target xml:space="preserve">Enable in-app product purchases</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Store sample (demonstrates trials and in-app purchases)</source>
          <target xml:space="preserve">Store sample (demonstrates trials and in-app purchases)</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Windows.ApplicationModel.Store</source>
          <target xml:space="preserve">Windows.ApplicationModel.Store</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>