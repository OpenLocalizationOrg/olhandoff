<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">f971a8891a41542db8e6fb9b943db052849e8913</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">description: Learn about the move and draw commands (a mini-language) that you can use to specify path geometries as a XAML attribute value.</source>
          <target xml:space="preserve">description: Learn about the move and draw commands (a mini-language) that you can use to specify path geometries as a XAML attribute value.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Move and draw commands syntax</source>
          <target xml:space="preserve">title: Move and draw commands syntax</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 7772BC3E-A631-46FF-9940-3DD5B9D0E0D9</source>
          <target xml:space="preserve">ms.assetid: 7772BC3E-A631-46FF-9940-3DD5B9D0E0D9</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Move and draw commands syntax</source>
          <target xml:space="preserve">Move and draw commands syntax</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Learn about the move and draw commands (a mini-language) that you can use to specify path geometries as a XAML attribute value.</source>
          <target xml:space="preserve">Learn about the move and draw commands (a mini-language) that you can use to specify path geometries as a XAML attribute value.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Move and draw commands are used by many design and graphics tools that can output a vector graphic or shape, as a serialization and interchange format.</source>
          <target xml:space="preserve">Move and draw commands are used by many design and graphics tools that can output a vector graphic or shape, as a serialization and interchange format.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Properties that use move and draw command strings</source>
          <target xml:space="preserve">Properties that use move and draw command strings</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">The move and draw command syntax is supported by an internal type converter for XAML, which parses the commands and produces a run-time graphics representation.</source>
          <target xml:space="preserve">The move and draw command syntax is supported by an internal type converter for XAML, which parses the commands and produces a run-time graphics representation.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">This representation is basically a finished set of vectors that is ready for presentation.</source>
          <target xml:space="preserve">This representation is basically a finished set of vectors that is ready for presentation.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">The vectors themselves don't complete the presentation details; you'll still need to set other values on the elements.</source>
          <target xml:space="preserve">The vectors themselves don't complete the presentation details; you'll still need to set other values on the elements.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243355)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br243378)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/br243383)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc></pc> object you also need values for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Fill</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Stroke</pc></pc>, and other properties, and then that <pc dataRefEnd="id14" dataRefStart="id13" id="p7">Path</pc> must be connected to the visual tree somehow.</source>
          <target xml:space="preserve">For a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc></pc> object you also need values for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Fill</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Stroke</pc></pc>, and other properties, and then that <pc dataRefEnd="id14" dataRefStart="id13" id="p7">Path</pc> must be connected to the visual tree somehow.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn252722)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn251974)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathIcon</pc></pc> object, set the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Foreground</pc></pc> property.</source>
          <target xml:space="preserve">For a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathIcon</pc></pc> object, set the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Foreground</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243356)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn252723)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There are two properties in the Windows Runtime that can use a string representing move and draw commands: <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path.Data</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PathIcon.Data</pc></pc>.</source>
          <target xml:space="preserve">There are two properties in the Windows Runtime that can use a string representing move and draw commands: <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path.Data</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PathIcon.Data</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">If you set one of these properties by specifying move and draw commands, you typically set it as a XAML attribute value along with other required attributes of that element.</source>
          <target xml:space="preserve">If you set one of these properties by specifying move and draw commands, you typically set it as a XAML attribute value along with other required attributes of that element.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Without getting into the specifics, here's what that looks like:</source>
          <target xml:space="preserve">Without getting into the specifics, here's what that looks like:</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210169)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry.Figures</pc>
						</pc> can also use move and draw commands.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry.Figures</pc>
						</pc> can also use move and draw commands.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210168)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br210041)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/br210057)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/br243356)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You might combine a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> object that uses move and draw commands with other <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Geometry</pc></pc> types in a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GeometryGroup</pc></pc> object, which you'd then use as the value for <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Path.Data</pc></pc>.</source>
          <target xml:space="preserve">You might combine a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> object that uses move and draw commands with other <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Geometry</pc></pc> types in a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GeometryGroup</pc></pc> object, which you'd then use as the value for <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Path.Data</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">But that isn't nearly as common as using move and draw commands for attribute-defined data.</source>
          <target xml:space="preserve">But that isn't nearly as common as using move and draw commands for attribute-defined data.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Using move and draw commands versus using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PathGeometry</pc></source>
          <target xml:space="preserve">Using move and draw commands versus using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PathGeometry</pc></target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210168)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br210143)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/br210169)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows Runtime XAML, the move and draw commands produce a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with a single <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PathFigure</pc></pc> object with a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Figures</pc></pc> property value.</source>
          <target xml:space="preserve">For Windows Runtime XAML, the move and draw commands produce a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with a single <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PathFigure</pc></pc> object with a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Figures</pc></pc> property value.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210174)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/br210164)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/br210166)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">[</data>
          <data id="id16">](https://msdn.microsoft.com/library/windows/apps/br210159)</data>
          <data id="id17">**</data>
          <data id="id18">**</data>
          <data id="id19">**</data>
          <data id="id20">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Each draw command produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathSegment</pc></pc> derived class in that single <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PathFigure</pc>'s <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Segments</pc></pc> collection, the move command changes the <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">StartPoint</pc></pc>, and existence of a close command sets <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">IsClosed</pc></pc> to <pc dataRefEnd="id20" dataRefStart="id19" id="p10">true</pc>.</source>
          <target xml:space="preserve">Each draw command produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathSegment</pc></pc> derived class in that single <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PathFigure</pc>'s <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Segments</pc></pc> collection, the move command changes the <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">StartPoint</pc></pc>, and existence of a close command sets <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">IsClosed</pc></pc> to <pc dataRefEnd="id20" dataRefStart="id19" id="p10">true</pc>.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can navigate this structure as an object model if you examine the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data</pc> values at run time.</source>
          <target xml:space="preserve">You can navigate this structure as an object model if you examine the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data</pc> values at run time.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">The basic syntax</source>
          <target xml:space="preserve">The basic syntax</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">The syntax for move and draw commands can be summarized like this:</source>
          <target xml:space="preserve">The syntax for move and draw commands can be summarized like this:</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Start with an optional fill rule.</source>
          <target xml:space="preserve">Start with an optional fill rule.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Typically you specify this only if you don't want the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EvenOdd</pc> default.</source>
          <target xml:space="preserve">Typically you specify this only if you don't want the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EvenOdd</pc> default.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(More about <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EvenOdd</pc> later.)</source>
          <target xml:space="preserve">(More about <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EvenOdd</pc> later.)</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">Specify exactly one move command.</source>
          <target xml:space="preserve">Specify exactly one move command.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Specify one or more draw commands.</source>
          <target xml:space="preserve">Specify one or more draw commands.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Specify a close command.</source>
          <target xml:space="preserve">Specify a close command.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">You can omit a close command , but that would leave your figure open (that's uncommon).</source>
          <target xml:space="preserve">You can omit a close command , but that would leave your figure open (that's uncommon).</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">General rules of this syntax are:</source>
          <target xml:space="preserve">General rules of this syntax are:</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">Each command is represented by exactly one letter.</source>
          <target xml:space="preserve">Each command is represented by exactly one letter.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">That letter can be upper-case or lower-case.</source>
          <target xml:space="preserve">That letter can be upper-case or lower-case.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Case matters, as we'll describe.</source>
          <target xml:space="preserve">Case matters, as we'll describe.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">Each command except the close command is typically followed by one or more numbers.</source>
          <target xml:space="preserve">Each command except the close command is typically followed by one or more numbers.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">If more than one number for a command, separate with a comma or space.</source>
          <target xml:space="preserve">If more than one number for a command, separate with a comma or space.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">_</data>
          <data id="id4">_</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">_</data>
          <data id="id8">_</data>
          <data id="id9">_</data>
          <data id="id10">_</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">_</data>
          <data id="id14">_</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">**</data>
          <data id="id18">**</data>
          <data id="id19">_</data>
          <data id="id20">_</data>
          <data id="id21">**</data>
          <data id="id22">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">\[</pc>
						<pc dataRefEnd="id4" dataRefStart="id3" id="p2">fillRule</pc>
						<pc dataRefEnd="id6" dataRefStart="id5" id="p3">\]</pc> <pc dataRefEnd="id8" dataRefStart="id7" id="p4">moveCommand</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="p5">drawCommand</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="p6">\[</pc><pc dataRefEnd="id14" dataRefStart="id13" id="p7">drawCommand</pc><pc dataRefEnd="id16" dataRefStart="id15" id="p8">\*\]</pc> <pc dataRefEnd="id18" dataRefStart="id17" id="p9">\[</pc><pc dataRefEnd="id20" dataRefStart="id19" id="p10">closeCommand</pc><pc dataRefEnd="id22" dataRefStart="id21" id="p11">\]</pc></source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">\[</pc>
						<pc dataRefEnd="id4" dataRefStart="id3" id="p2">fillRule</pc>
						<pc dataRefEnd="id6" dataRefStart="id5" id="p3">\]</pc> <pc dataRefEnd="id8" dataRefStart="id7" id="p4">moveCommand</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="p5">drawCommand</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="p6">\[</pc><pc dataRefEnd="id14" dataRefStart="id13" id="p7">drawCommand</pc><pc dataRefEnd="id16" dataRefStart="id15" id="p8">\*\]</pc> <pc dataRefEnd="id18" dataRefStart="id17" id="p9">\[</pc><pc dataRefEnd="id20" dataRefStart="id19" id="p10">closeCommand</pc><pc dataRefEnd="id22" dataRefStart="id21" id="p11">\]</pc></target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">_</data>
          <data id="id2">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Many of the draw commands use points, where you provide an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x,y</pc> value.</source>
          <target xml:space="preserve">Many of the draw commands use points, where you provide an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x,y</pc> value.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">_</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
          <data id="id4">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Whenever you see a \*<pc dataRefEnd="id2" dataRefStart="id1" id="p1">points</pc> placeholder you can assume you're giving two decimal values for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x,y</pc> value of a point.</source>
          <target xml:space="preserve">Whenever you see a \*<pc dataRefEnd="id2" dataRefStart="id1" id="p1">points</pc> placeholder you can assume you're giving two decimal values for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x,y</pc> value of a point.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">White space can often be omitted when the result is not ambiguous.</source>
          <target xml:space="preserve">White space can often be omitted when the result is not ambiguous.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">You can in fact omit all white space if you use commas as your separator for all number sets (points and size).</source>
          <target xml:space="preserve">You can in fact omit all white space if you use commas as your separator for all number sets (points and size).</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">`F1M0,58L2,56L6,60L13,51L15,53L6,64z`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, this usage is legal: <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">For example, this usage is legal: <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">But it's more typical to include white space between commands for clarity.</source>
          <target xml:space="preserve">But it's more typical to include white space between commands for clarity.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Don't use commas as the decimal point for decimal numbers; the command string is interpreted by XAML and doesn't account for culture-specific number-formatting conventions that differ from those used in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">en-us</pc> locale.</source>
          <target xml:space="preserve">Don't use commas as the decimal point for decimal numbers; the command string is interpreted by XAML and doesn't account for culture-specific number-formatting conventions that differ from those used in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">en-us</pc> locale.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">Syntax specifics</source>
          <target xml:space="preserve">Syntax specifics</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Fill rule</source>
          <target xml:space="preserve">Fill rule</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There are two possible values for the optional fill rule: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">F0</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">F1</pc>.</source>
          <target xml:space="preserve">There are two possible values for the optional fill rule: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">F0</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">F1</pc>.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">F</pc> is always uppercase.) <pc dataRefEnd="id4" dataRefStart="id3" id="p2">F0</pc> is the default value; it produces <pc dataRefEnd="id6" dataRefStart="id5" id="p3">EvenOdd</pc> fill behavior, so you don't typically specify it.</source>
          <target xml:space="preserve">(The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">F</pc> is always uppercase.) <pc dataRefEnd="id4" dataRefStart="id3" id="p2">F0</pc> is the default value; it produces <pc dataRefEnd="id6" dataRefStart="id5" id="p3">EvenOdd</pc> fill behavior, so you don't typically specify it.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">F1</pc> to get the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Nonzero</pc> fill behavior.</source>
          <target xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">F1</pc> to get the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Nonzero</pc> fill behavior.</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210030)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">These fill values align with the values of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FillRule</pc></pc> enumeration.</source>
          <target xml:space="preserve">These fill values align with the values of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FillRule</pc></pc> enumeration.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Move command</source>
          <target xml:space="preserve">Move command</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">Specifies the start point of a new figure.</source>
          <target xml:space="preserve">Specifies the start point of a new figure.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">`M `</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">startPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">startPoint</pc></target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">`m`</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">startPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">startPoint</pc></target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">startPoint</source>
          <target xml:space="preserve">startPoint</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">The start point of a new figure.</source>
          <target xml:space="preserve">The start point of a new figure.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">An uppercase <pc dataRefEnd="id2" dataRefStart="id1" id="p1">M</pc> indicates that <pc dataRefEnd="id4" dataRefStart="id3" id="p2">startPoint</pc> is an absolute coordinate; a lowercase <pc dataRefEnd="id6" dataRefStart="id5" id="p3">m</pc> indicates that <pc dataRefEnd="id8" dataRefStart="id7" id="p4">startPoint</pc> is an offset to the previous point, or (0,0) if there was no previous point.</source>
          <target xml:space="preserve">An uppercase <pc dataRefEnd="id2" dataRefStart="id1" id="p1">M</pc> indicates that <pc dataRefEnd="id4" dataRefStart="id3" id="p2">startPoint</pc> is an absolute coordinate; a lowercase <pc dataRefEnd="id6" dataRefStart="id5" id="p3">m</pc> indicates that <pc dataRefEnd="id8" dataRefStart="id7" id="p4">startPoint</pc> is an offset to the previous point, or (0,0) if there was no previous point.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  It's legal to specify multiple points after the move command.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  It's legal to specify multiple points after the move command.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">A line is drawn to those points as if you specified the line command.</source>
          <target xml:space="preserve">A line is drawn to those points as if you specified the line command.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">However that's not a recommended style; use the dedicated line command instead.</source>
          <target xml:space="preserve">However that's not a recommended style; use the dedicated line command instead.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">Draw commands</source>
          <target xml:space="preserve">Draw commands</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">A draw command can consist of several shape commands: line, horizontal line, vertical line, cubic Bezier curve, quadratic Bezier curve, smooth cubic Bezier curve, smooth quadratic Bezier curve, and elliptical arc.</source>
          <target xml:space="preserve">A draw command can consist of several shape commands: line, horizontal line, vertical line, cubic Bezier curve, quadratic Bezier curve, smooth cubic Bezier curve, smooth quadratic Bezier curve, and elliptical arc.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">For all draw commands, case matters.</source>
          <target xml:space="preserve">For all draw commands, case matters.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">Uppercase letters denote absolute coordinates and lowercase letters denote coordinates relative to the previous command.</source>
          <target xml:space="preserve">Uppercase letters denote absolute coordinates and lowercase letters denote coordinates relative to the previous command.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">The control points for a segment are relative to the end point of the preceding segment.</source>
          <target xml:space="preserve">The control points for a segment are relative to the end point of the preceding segment.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">When sequentially entering more than one command of the same type, you can omit the duplicate command entry.</source>
          <target xml:space="preserve">When sequentially entering more than one command of the same type, you can omit the duplicate command entry.</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">`L 100,200 300,400`</data>
          <data id="id2">`L 100,200 L 300,400`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, <ph dataRef="id1" id="ph1" /> is equivalent to <ph dataRef="id2" id="ph2" />.</source>
          <target xml:space="preserve">For example, <ph dataRef="id1" id="ph1" /> is equivalent to <ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">Line command</source>
          <target xml:space="preserve">Line command</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">Creates a straight line between the current point and the specified end point.</source>
          <target xml:space="preserve">Creates a straight line between the current point and the specified end point.</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">`l 20 30`</data>
          <data id="id2">`L 20,30`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> are examples of valid line commands.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> are examples of valid line commands.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210117)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LineGeometry</pc></pc> object.</source>
          <target xml:space="preserve">Defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LineGeometry</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">`L`</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">endPoint</pc></target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">`l`</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">endPoint</pc></target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">endPoint</source>
          <target xml:space="preserve">endPoint</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">The end point of the line.</source>
          <target xml:space="preserve">The end point of the line.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">Horizontal line command</source>
          <target xml:space="preserve">Horizontal line command</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">Creates a horizontal line between the current point and the specified x-coordinate.</source>
          <target xml:space="preserve">Creates a horizontal line between the current point and the specified x-coordinate.</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">`H 90`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> is an example of a valid horizontal line command.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> is an example of a valid horizontal line command.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">`H `</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">x</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">x</pc></target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">`h `</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">x</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">x</pc></target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">x</source>
          <target xml:space="preserve">x</target>
        </segment>
      </unit>
      <unit id="199">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Double)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">The x-coordinate of the end point of the line.</source>
          <target xml:space="preserve">The x-coordinate of the end point of the line.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source xml:space="preserve">Vertical line command</source>
          <target xml:space="preserve">Vertical line command</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">Creates a vertical line between the current point and the specified y-coordinate.</source>
          <target xml:space="preserve">Creates a vertical line between the current point and the specified y-coordinate.</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">`v 90`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> is an example of a valid vertical line command.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> is an example of a valid vertical line command.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">`V `</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">y</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">y</pc></target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">`v `</data>
          <data id="id2">_</data>
          <data id="id3">_</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">y</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">y</pc></target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">y</source>
          <target xml:space="preserve">y</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Double)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">The y-coordinate of the end point of the line.</source>
          <target xml:space="preserve">The y-coordinate of the end point of the line.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source xml:space="preserve">Cubic Bézier curve command</source>
          <target xml:space="preserve">Cubic Bézier curve command</target>
        </segment>
      </unit>
      <unit id="214">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Creates a cubic Bézier curve between the current point and the specified end point by using the two specified control points (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">controlPoint1</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">controlPoint2</pc>).</source>
          <target xml:space="preserve">Creates a cubic Bézier curve between the current point and the specified end point by using the two specified control points (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">controlPoint1</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">controlPoint2</pc>).</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">`C 100,200 200,400 300,200`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> is an example of a valid curve command.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> is an example of a valid curve command.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210168)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br228068)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> object with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BezierSegment</pc></pc> object.</source>
          <target xml:space="preserve">Defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> object with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BezierSegment</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="218">
        <originalData>
          <data id="id1">`C `</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint1</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">controlPoint2</pc> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint1</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">controlPoint2</pc> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">endPoint</pc></target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="220">
        <originalData>
          <data id="id1">`c `</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint1</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">controlPoint2</pc> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint1</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">controlPoint2</pc> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">endPoint</pc></target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source xml:space="preserve">controlPoint1</source>
          <target xml:space="preserve">controlPoint1</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source xml:space="preserve">The first control point of the curve, which determines the starting tangent of the curve.</source>
          <target xml:space="preserve">The first control point of the curve, which determines the starting tangent of the curve.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source xml:space="preserve">controlPoint2</source>
          <target xml:space="preserve">controlPoint2</target>
        </segment>
      </unit>
      <unit id="227">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source xml:space="preserve">The second control point of the curve, which determines the ending tangent of the curve.</source>
          <target xml:space="preserve">The second control point of the curve, which determines the ending tangent of the curve.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source xml:space="preserve">endPoint</source>
          <target xml:space="preserve">endPoint</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source xml:space="preserve">The point to which the curve is drawn.</source>
          <target xml:space="preserve">The point to which the curve is drawn.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source xml:space="preserve">Quadratic Bézier curve command</source>
          <target xml:space="preserve">Quadratic Bézier curve command</target>
        </segment>
      </unit>
      <unit id="233">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Creates a quadratic Bézier curve between the current point and the specified end point by using the specified control point (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">controlPoint</pc>).</source>
          <target xml:space="preserve">Creates a quadratic Bézier curve between the current point and the specified end point by using the specified control point (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">controlPoint</pc>).</target>
        </segment>
      </unit>
      <unit id="234">
        <originalData>
          <data id="id1">`q 100,200 300,200`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> is an example of a valid quadratic Bézier curve command.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> is an example of a valid quadratic Bézier curve command.</target>
        </segment>
      </unit>
      <unit id="235">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210168)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br210249)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">QuadraticBezierSegment</pc></pc>.</source>
          <target xml:space="preserve">Defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">QuadraticBezierSegment</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="237">
        <originalData>
          <data id="id1">`Q `</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint endPoint</pc></target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="239">
        <originalData>
          <data id="id1">`q `</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint endPoint</pc></target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source xml:space="preserve">controlPoint</source>
          <target xml:space="preserve">controlPoint</target>
        </segment>
      </unit>
      <unit id="243">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source xml:space="preserve">The control point of the curve, which determines the starting and ending tangents of the curve.</source>
          <target xml:space="preserve">The control point of the curve, which determines the starting and ending tangents of the curve.</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source xml:space="preserve">endPoint</source>
          <target xml:space="preserve">endPoint</target>
        </segment>
      </unit>
      <unit id="246">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source xml:space="preserve">The point to which the curve is drawn.</source>
          <target xml:space="preserve">The point to which the curve is drawn.</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source xml:space="preserve">Smooth cubic Bézier curve command</source>
          <target xml:space="preserve">Smooth cubic Bézier curve command</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source xml:space="preserve">Creates a cubic Bézier curve between the current point and the specified end point.</source>
          <target xml:space="preserve">Creates a cubic Bézier curve between the current point and the specified end point.</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source xml:space="preserve">The first control point is assumed to be the reflection of the second control point of the previous command relative to the current point.</source>
          <target xml:space="preserve">The first control point is assumed to be the reflection of the second control point of the previous command relative to the current point.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source xml:space="preserve">If there is no previous command or if the previous command was not a cubic Bézier curve command or a smooth cubic Bézier curve command, assume the first control point is coincident with the current point.</source>
          <target xml:space="preserve">If there is no previous command or if the previous command was not a cubic Bézier curve command or a smooth cubic Bézier curve command, assume the first control point is coincident with the current point.</target>
        </segment>
      </unit>
      <unit id="252">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The second control point—the control point for the end of the curve—is specified by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">controlPoint2</pc>.</source>
          <target xml:space="preserve">The second control point—the control point for the end of the curve—is specified by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">controlPoint2</pc>.</target>
        </segment>
      </unit>
      <unit id="253">
        <originalData>
          <data id="id1">`S 100,200 200,300`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, <ph dataRef="id1" id="ph1" /> is a valid smooth cubic Bézier curve command.</source>
          <target xml:space="preserve">For example, <ph dataRef="id1" id="ph1" /> is a valid smooth cubic Bézier curve command.</target>
        </segment>
      </unit>
      <unit id="254">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210168)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br228068)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This command defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BezierSegment</pc></pc> where there was preceding curve segment.</source>
          <target xml:space="preserve">This command defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BezierSegment</pc></pc> where there was preceding curve segment.</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="256">
        <originalData>
          <data id="id1">`S`</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint2</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint2</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">endPoint</pc></target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="258">
        <originalData>
          <data id="id1">`s`</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint2 endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint2 endPoint</pc></target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source xml:space="preserve">controlPoint2</source>
          <target xml:space="preserve">controlPoint2</target>
        </segment>
      </unit>
      <unit id="262">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source xml:space="preserve">The control point of the curve, which determines the ending tangent of the curve.</source>
          <target xml:space="preserve">The control point of the curve, which determines the ending tangent of the curve.</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source xml:space="preserve">endPoint</source>
          <target xml:space="preserve">endPoint</target>
        </segment>
      </unit>
      <unit id="265">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source xml:space="preserve">The point to which the curve is drawn.</source>
          <target xml:space="preserve">The point to which the curve is drawn.</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source xml:space="preserve">Smooth quadratic Bézier curve command</source>
          <target xml:space="preserve">Smooth quadratic Bézier curve command</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source xml:space="preserve">Creates a quadratic Bézier curve between the current point and the specified end point.</source>
          <target xml:space="preserve">Creates a quadratic Bézier curve between the current point and the specified end point.</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source xml:space="preserve">The control point is assumed to be the reflection of the control point of the previous command relative to the current point.</source>
          <target xml:space="preserve">The control point is assumed to be the reflection of the control point of the previous command relative to the current point.</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source xml:space="preserve">If there is no previous command or if the previous command was not a quadratic Bézier curve command or a smooth quadratic Bézier curve command, the control point is coincident with the current point.</source>
          <target xml:space="preserve">If there is no previous command or if the previous command was not a quadratic Bézier curve command or a smooth quadratic Bézier curve command, the control point is coincident with the current point.</target>
        </segment>
      </unit>
      <unit id="271">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210168)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br210249)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This command defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">QuadraticBezierSegment</pc></pc> where there was preceding curve segment.</source>
          <target xml:space="preserve">This command defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">QuadraticBezierSegment</pc></pc> where there was preceding curve segment.</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="273">
        <originalData>
          <data id="id1">`T`</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">endPoint</pc></target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="275">
        <originalData>
          <data id="id1">`t`</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">controlPoint</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">endPoint</pc></target>
        </segment>
      </unit>
      <unit id="276">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source xml:space="preserve">controlPoint</source>
          <target xml:space="preserve">controlPoint</target>
        </segment>
      </unit>
      <unit id="279">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="280">
        <segment state="initial">
          <source xml:space="preserve">The control point of the curve, which determines the starting and tangent of the curve.</source>
          <target xml:space="preserve">The control point of the curve, which determines the starting and tangent of the curve.</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source xml:space="preserve">endPoint</source>
          <target xml:space="preserve">endPoint</target>
        </segment>
      </unit>
      <unit id="282">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source xml:space="preserve">The point to which the curve is drawn.</source>
          <target xml:space="preserve">The point to which the curve is drawn.</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source xml:space="preserve">Elliptical arc command</source>
          <target xml:space="preserve">Elliptical arc command</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source xml:space="preserve">Creates an elliptical arc between the current point and the specified end point.</source>
          <target xml:space="preserve">Creates an elliptical arc between the current point and the specified end point.</target>
        </segment>
      </unit>
      <unit id="286">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br210168)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br228054)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ArcSegment</pc></pc>.</source>
          <target xml:space="preserve">Defines the equivalent of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathGeometry</pc></pc> with an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ArcSegment</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="288">
        <originalData>
          <data id="id1">`A `</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
          <data id="id9">*</data>
          <data id="id10">*</data>
          <data id="id11">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">size</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">rotationAngle</pc> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">isLargeArcFlag</pc> <pc dataRefEnd="id9" dataRefStart="id8" id="p4">sweepDirectionFlag</pc> <pc dataRefEnd="id11" dataRefStart="id10" id="p5">endPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">size</pc> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">rotationAngle</pc> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">isLargeArcFlag</pc> <pc dataRefEnd="id9" dataRefStart="id8" id="p4">sweepDirectionFlag</pc> <pc dataRefEnd="id11" dataRefStart="id10" id="p5">endPoint</pc></target>
        </segment>
      </unit>
      <unit id="289">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="290">
        <originalData>
          <data id="id1">`a `</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">sizerotationAngleisLargeArcFlagsweepDirectionFlagendPoint</pc></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1">sizerotationAngleisLargeArcFlagsweepDirectionFlagendPoint</pc></target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="293">
        <segment state="initial">
          <source xml:space="preserve">size</source>
          <target xml:space="preserve">size</target>
        </segment>
      </unit>
      <unit id="294">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225995)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Size</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Size</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="295">
        <segment state="initial">
          <source xml:space="preserve">The x-radius and y-radius of the arc.</source>
          <target xml:space="preserve">The x-radius and y-radius of the arc.</target>
        </segment>
      </unit>
      <unit id="296">
        <segment state="initial">
          <source xml:space="preserve">rotationAngle</source>
          <target xml:space="preserve">rotationAngle</target>
        </segment>
      </unit>
      <unit id="297">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Double)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source xml:space="preserve">The rotation of the ellipse, in degrees.</source>
          <target xml:space="preserve">The rotation of the ellipse, in degrees.</target>
        </segment>
      </unit>
      <unit id="299">
        <segment state="initial">
          <source xml:space="preserve">isLargeArcFlag</source>
          <target xml:space="preserve">isLargeArcFlag</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source xml:space="preserve">Set to 1 if the angle of the arc should be 180 degrees or greater; otherwise, set to 0.</source>
          <target xml:space="preserve">Set to 1 if the angle of the arc should be 180 degrees or greater; otherwise, set to 0.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source xml:space="preserve">sweepDirectionFlag</source>
          <target xml:space="preserve">sweepDirectionFlag</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source xml:space="preserve">Set to 1 if the arc is drawn in a positive-angle direction; otherwise, set to 0.</source>
          <target xml:space="preserve">Set to 1 if the arc is drawn in a positive-angle direction; otherwise, set to 0.</target>
        </segment>
      </unit>
      <unit id="303">
        <segment state="initial">
          <source xml:space="preserve">endPoint</source>
          <target xml:space="preserve">endPoint</target>
        </segment>
      </unit>
      <unit id="304">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="305">
        <segment state="initial">
          <source xml:space="preserve">The point to which the arc is drawn.</source>
          <target xml:space="preserve">The point to which the arc is drawn.</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source xml:space="preserve">Close command</source>
          <target xml:space="preserve">Close command</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source xml:space="preserve">Ends the current figure and creates a line that connects the current point to the starting point of the figure.</source>
          <target xml:space="preserve">Ends the current figure and creates a line that connects the current point to the starting point of the figure.</target>
        </segment>
      </unit>
      <unit id="308">
        <segment state="initial">
          <source xml:space="preserve">This command creates a line-join (corner) between the last segment and the first segment of the figure.</source>
          <target xml:space="preserve">This command creates a line-join (corner) between the last segment and the first segment of the figure.</target>
        </segment>
      </unit>
      <unit id="309">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="310">
        <originalData>
          <data id="id1">`Z`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="311">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="312">
        <originalData>
          <data id="id1">`z `</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="313">
        <segment state="initial">
          <source xml:space="preserve">Point syntax</source>
          <target xml:space="preserve">Point syntax</target>
        </segment>
      </unit>
      <unit id="314">
        <segment state="initial">
          <source xml:space="preserve">Describes the x-coordinate and y-coordinate of a point.</source>
          <target xml:space="preserve">Describes the x-coordinate and y-coordinate of a point.</target>
        </segment>
      </unit>
      <unit id="315">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225870)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See also <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc></pc>.</source>
          <target xml:space="preserve">See also <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Point</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="316">
        <segment state="initial">
          <source xml:space="preserve">Syntax</source>
          <target xml:space="preserve">Syntax</target>
        </segment>
      </unit>
      <unit id="317">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">y</pc></source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">y</pc></target>
        </segment>
      </unit>
      <unit id="318">
        <segment state="initial">
          <source xml:space="preserve">- or -</source>
          <target xml:space="preserve">- or -</target>
        </segment>
      </unit>
      <unit id="319">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="p2">y</pc></source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="p2">y</pc></target>
        </segment>
      </unit>
      <unit id="320">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="321">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="322">
        <segment state="initial">
          <source xml:space="preserve">x</source>
          <target xml:space="preserve">x</target>
        </segment>
      </unit>
      <unit id="323">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Double)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source xml:space="preserve">The x-coordinate of the point.</source>
          <target xml:space="preserve">The x-coordinate of the point.</target>
        </segment>
      </unit>
      <unit id="325">
        <segment state="initial">
          <source xml:space="preserve">y</source>
          <target xml:space="preserve">y</target>
        </segment>
      </unit>
      <unit id="326">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Double)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc>
						</pc>
					</target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source xml:space="preserve">The y-coordinate of the point.</source>
          <target xml:space="preserve">The y-coordinate of the point.</target>
        </segment>
      </unit>
      <unit id="328">
        <segment state="initial">
          <source xml:space="preserve">Additional notes</source>
          <target xml:space="preserve">Additional notes</target>
        </segment>
      </unit>
      <unit id="329">
        <segment state="initial">
          <source xml:space="preserve">Instead of a standard numerical value, you can also use the following special values.</source>
          <target xml:space="preserve">Instead of a standard numerical value, you can also use the following special values.</target>
        </segment>
      </unit>
      <unit id="330">
        <segment state="initial">
          <source xml:space="preserve">These values are case sensitive.</source>
          <target xml:space="preserve">These values are case sensitive.</target>
        </segment>
      </unit>
      <unit id="331">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Infinity</pc>: Represents <pc dataRefEnd="id4" dataRefStart="id3" id="p2">PositiveInfinity</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Infinity</pc>: Represents <pc dataRefEnd="id4" dataRefStart="id3" id="p2">PositiveInfinity</pc>.</target>
        </segment>
      </unit>
      <unit id="332">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">\-Infinity</pc>: Represents <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NegativeInfinity</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">\-Infinity</pc>: Represents <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NegativeInfinity</pc>.</target>
        </segment>
      </unit>
      <unit id="333">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">NaN</pc>: Represents <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NaN</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">NaN</pc>: Represents <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NaN</pc>.</target>
        </segment>
      </unit>
      <unit id="334">
        <segment state="initial">
          <source xml:space="preserve">Instead of using decimals or integers, you can use scientific notation.</source>
          <target xml:space="preserve">Instead of using decimals or integers, you can use scientific notation.</target>
        </segment>
      </unit>
      <unit id="335">
        <originalData>
          <data id="id1">`+1.e17`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, <ph dataRef="id1" id="ph1" /> is a valid value.</source>
          <target xml:space="preserve">For example, <ph dataRef="id1" id="ph1" /> is a valid value.</target>
        </segment>
      </unit>
      <unit id="336">
        <segment state="initial">
          <source xml:space="preserve">Design tools that produce move and draw commands</source>
          <target xml:space="preserve">Design tools that produce move and draw commands</target>
        </segment>
      </unit>
      <unit id="337">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br243355)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pen</pc> tool and other drawing tools in Blend for Microsoft Visual Studio 2013 will usually produce a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Path</pc></pc> object, with move and draw commands.</source>
          <target xml:space="preserve">Using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pen</pc> tool and other drawing tools in Blend for Microsoft Visual Studio 2013 will usually produce a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Path</pc></pc> object, with move and draw commands.</target>
        </segment>
      </unit>
      <unit id="338">
        <segment state="initial">
          <source xml:space="preserve">You might see existing move and draw command data in some of the control parts defined in the Windows Runtime XAML default templates for controls.</source>
          <target xml:space="preserve">You might see existing move and draw command data in some of the control parts defined in the Windows Runtime XAML default templates for controls.</target>
        </segment>
      </unit>
      <unit id="339">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn252722)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, some controls use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathIcon</pc></pc> that has the data defined as move and draw commands.</source>
          <target xml:space="preserve">For example, some controls use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathIcon</pc></pc> that has the data defined as move and draw commands.</target>
        </segment>
      </unit>
      <unit id="340">
        <segment state="initial">
          <source xml:space="preserve">There are exporters or plug-ins available for other commonly used vector-graphics design tools that can output the vector in XAML form.</source>
          <target xml:space="preserve">There are exporters or plug-ins available for other commonly used vector-graphics design tools that can output the vector in XAML form.</target>
        </segment>
      </unit>
      <unit id="341">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243355)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br243356)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">These usually create <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc></pc> objects in a layout container, with move and draw commands for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Path.Data</pc></pc>.</source>
          <target xml:space="preserve">These usually create <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc></pc> objects in a layout container, with move and draw commands for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Path.Data</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="342">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There may be multiple <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> elements in the XAML so that different brushes can be applied.</source>
          <target xml:space="preserve">There may be multiple <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> elements in the XAML so that different brushes can be applied.</target>
        </segment>
      </unit>
      <unit id="343">
        <segment state="initial">
          <source xml:space="preserve">These exporters or plug-ins were originally written for Windows Presentation Foundation (WPF)  XAML, but that aspect of XAML syntax is identical with Windows Runtime XAML.</source>
          <target xml:space="preserve">These exporters or plug-ins were originally written for Windows Presentation Foundation (WPF)  XAML, but that aspect of XAML syntax is identical with Windows Runtime XAML.</target>
        </segment>
      </unit>
      <unit id="344">
        <segment state="initial">
          <source xml:space="preserve">You can probably use chunks of XAML from an exporter and paste them right into a Windows Runtime XAML page.</source>
          <target xml:space="preserve">You can probably use chunks of XAML from an exporter and paste them right into a Windows Runtime XAML page.</target>
        </segment>
      </unit>
      <unit id="345">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(However, you won't be able to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RadialGradientBrush</pc>, if that was part of the converted XAML, because Windows Runtime XAML doesn't support that brush.)</source>
          <target xml:space="preserve">(However, you won't be able to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RadialGradientBrush</pc>, if that was part of the converted XAML, because Windows Runtime XAML doesn't support that brush.)</target>
        </segment>
      </unit>
      <unit id="346">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="347">
        <segment state="initial">
          <source xml:space="preserve">Draw shapes</source>
          <target xml:space="preserve">Draw shapes</target>
        </segment>
      </unit>
      <unit id="348">
        <segment state="initial">
          <source xml:space="preserve">Use brushes</source>
          <target xml:space="preserve">Use brushes</target>
        </segment>
      </unit>
      <unit id="349">
        <segment state="initial">
          <source xml:space="preserve">Path.Data</source>
          <target xml:space="preserve">Path.Data</target>
        </segment>
      </unit>
      <unit id="350">
        <segment state="initial">
          <source xml:space="preserve">PathIcon</source>
          <target xml:space="preserve">PathIcon</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>