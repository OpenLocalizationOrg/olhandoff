<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">be88c0d132c573bfc8958ccbc8fc9b95718b0321</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Best practices for your app's startup performance</source>
          <target xml:space="preserve">Best practices for your app's startup performance</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="103">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</source>
          <target xml:space="preserve">Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">Best practices for your app's startup performance</source>
          <target xml:space="preserve">Best practices for your app's startup performance</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">In part, users perceive whether your app is fast or slow based on how long it takes to start up.</source>
          <target xml:space="preserve">In part, users perceive whether your app is fast or slow based on how long it takes to start up.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">For the purposes of this topic, an app's startup time begins when the user starts the app, and ends when the user can interact with the app in some meaningful way.</source>
          <target xml:space="preserve">For the purposes of this topic, an app's startup time begins when the user starts the app, and ends when the user can interact with the app in some meaningful way.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">This section provides suggestions on how to get better performance out of your app when it starts.</source>
          <target xml:space="preserve">This section provides suggestions on how to get better performance out of your app when it starts.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Measuring your app's startup time</source>
          <target xml:space="preserve">Measuring your app's startup time</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Be sure to start your app a few times before you actually measure its startup time.</source>
          <target xml:space="preserve">Be sure to start your app a few times before you actually measure its startup time.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">This gives you a baseline for your measurement and ensures that you're measuring as reasonably short a startup time as possible.</source>
          <target xml:space="preserve">This gives you a baseline for your measurement and ensures that you're measuring as reasonably short a startup time as possible.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">By the time your UWP app arrives on your customers' computers, your app has been compiled with the .NET Native toolchain.</source>
          <target xml:space="preserve">By the time your UWP app arrives on your customers' computers, your app has been compiled with the .NET Native toolchain.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">.NET Native is an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</source>
          <target xml:space="preserve">.NET Native is an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</source>
          <target xml:space="preserve">.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Applications built with .NET Native statically link in a custom runtime and the new converged .NET Core that can run on all devices, so they don’t depend on the in-box .NET implementation.</source>
          <target xml:space="preserve">Applications built with .NET Native statically link in a custom runtime and the new converged .NET Core that can run on all devices, so they don’t depend on the in-box .NET implementation.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">On your development machine, by default your app uses .NET Native if you’re building it in “Release” mode, and it uses CoreCLR if you’re building it in “Debug” mode.</source>
          <target xml:space="preserve">On your development machine, by default your app uses .NET Native if you’re building it in “Release” mode, and it uses CoreCLR if you’re building it in “Debug” mode.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">You can configure this in Visual Studio from the Build page in “Properties” (C\#) or Compile-&gt;Advanced in "My Project" (VB).</source>
          <target xml:space="preserve">You can configure this in Visual Studio from the Build page in “Properties” (C\#) or Compile-&gt;Advanced in "My Project" (VB).</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Look for a checkbox that says “Compile with .NET Native Toolchain”.</source>
          <target xml:space="preserve">Look for a checkbox that says “Compile with .NET Native Toolchain”.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Of course, you should take measurements that are representative of what the end user will experience.</source>
          <target xml:space="preserve">Of course, you should take measurements that are representative of what the end user will experience.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">So, if you're not sure you're compiling your app to native code on your development machine, you could run the Native Image Generator (Ngen.exe) tool to precompile your app before you measure its startup time.</source>
          <target xml:space="preserve">So, if you're not sure you're compiling your app to native code on your development machine, you could run the Native Image Generator (Ngen.exe) tool to precompile your app before you measure its startup time.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">The following procedure describes how to run Ngen.exe to precompile your app.</source>
          <target xml:space="preserve">The following procedure describes how to run Ngen.exe to precompile your app.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">To run Ngen.exe</source>
          <target xml:space="preserve">To run Ngen.exe</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Run your app at least one time to ensure that Ngen.exe detects it.</source>
          <target xml:space="preserve">Run your app at least one time to ensure that Ngen.exe detects it.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Scheduler</pc> by doing one of the following:</source>
          <target xml:space="preserve">Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Scheduler</pc> by doing one of the following:</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Search for "Task Scheduler" from the start screen.</source>
          <target xml:space="preserve">Search for "Task Scheduler" from the start screen.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Run "taskschd.msc."</source>
          <target xml:space="preserve">Run "taskschd.msc."</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the left-hand pane of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Scheduler</pc>, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task Scheduler Library</pc>.</source>
          <target xml:space="preserve">In the left-hand pane of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Scheduler</pc>, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task Scheduler Library</pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.</pc></source>
          <target xml:space="preserve">Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.</pc></target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.</pc></source>
          <target xml:space="preserve">Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.</pc></target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework</pc>.</source>
          <target xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework</pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework NGEN 4.x</pc> from the task list.</source>
          <target xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework NGEN 4.x</pc> from the task list.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you are using a 64-bit computer, there is also a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework NGEN v4.x 64</pc>.</source>
          <target xml:space="preserve">If you are using a 64-bit computer, there is also a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework NGEN v4.x 64</pc>.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you are building a 64-bit app, select .<pc dataRefEnd="id2" dataRefStart="id1" id="p1">NET Framework NGEN v4.x 64</pc>.</source>
          <target xml:space="preserve">If you are building a 64-bit app, select .<pc dataRefEnd="id2" dataRefStart="id1" id="p1">NET Framework NGEN v4.x 64</pc>.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Action</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc>.</source>
          <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Action</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc>.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">Ngen.exe precompiles all the apps on the machine that have been used and do not have native images.</source>
          <target xml:space="preserve">Ngen.exe precompiles all the apps on the machine that have been used and do not have native images.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">If there are a lot of apps that need to be precompiled, this can take a long time, but subsequent runs are much faster.</source>
          <target xml:space="preserve">If there are a lot of apps that need to be precompiled, this can take a long time, but subsequent runs are much faster.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">When you recompile your app, the native image is no longer used.</source>
          <target xml:space="preserve">When you recompile your app, the native image is no longer used.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">Instead, the app is just-in-time compiled, which means that it is compiled as the app runs.</source>
          <target xml:space="preserve">Instead, the app is just-in-time compiled, which means that it is compiled as the app runs.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">You must rerun Ngen.exe to get a new native image.</source>
          <target xml:space="preserve">You must rerun Ngen.exe to get a new native image.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Defer work as long as possible</source>
          <target xml:space="preserve">Defer work as long as possible</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">To increase your app's startup time, do only the work that absolutely needs to be done to let the user start interacting with the app.</source>
          <target xml:space="preserve">To increase your app's startup time, do only the work that absolutely needs to be done to let the user start interacting with the app.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">This can be especially beneficial if you can delay loading additional assemblies.</source>
          <target xml:space="preserve">This can be especially beneficial if you can delay loading additional assemblies.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">The common language runtime loads an assembly the first time it is used.</source>
          <target xml:space="preserve">The common language runtime loads an assembly the first time it is used.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">If you can minimize the number of assemblies that are loaded, you might be able to improve your app's startup time and its memory consumption.</source>
          <target xml:space="preserve">If you can minimize the number of assemblies that are loaded, you might be able to improve your app's startup time and its memory consumption.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">Do long-running work independently</source>
          <target xml:space="preserve">Do long-running work independently</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">Your app can be interactive even though there are parts of the app that aren't fully functional.</source>
          <target xml:space="preserve">Your app can be interactive even though there are parts of the app that aren't fully functional.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">For example, if your app displays data that takes a while to retrieve, you can make that code execute independently of the app's startup code by retrieving the data asynchronously.</source>
          <target xml:space="preserve">For example, if your app displays data that takes a while to retrieve, you can make that code execute independently of the app's startup code by retrieving the data asynchronously.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">When the data is available, populate the app's user interface with the data.</source>
          <target xml:space="preserve">When the data is available, populate the app's user interface with the data.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Many of the Universal Windows Platform (UWP) APIs that retrieve data are asynchronous, so you will probably be retrieving data asynchronously anyway.</source>
          <target xml:space="preserve">Many of the Universal Windows Platform (UWP) APIs that retrieve data are asynchronous, so you will probably be retrieving data asynchronously anyway.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt187337)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info about asynchronous APIs, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call asynchronous APIs in C\# or Visual Basic</pc>.</source>
          <target xml:space="preserve">For more info about asynchronous APIs, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call asynchronous APIs in C\# or Visual Basic</pc>.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">If you do work that doesn't use asynchronous APIs, you can use the Task class to do long running work so that you don't block the user from interacting with the app.</source>
          <target xml:space="preserve">If you do work that doesn't use asynchronous APIs, you can use the Task class to do long running work so that you don't block the user from interacting with the app.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">This will keep your app responsive to the user while the data loads.</source>
          <target xml:space="preserve">This will keep your app responsive to the user while the data loads.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">If your app takes an especially long time to load part of its UI, consider adding a string in that area that says something like, "Getting latest data," so that your users know that the app is still processing.</source>
          <target xml:space="preserve">If your app takes an especially long time to load part of its UI, consider adding a string in that area that says something like, "Getting latest data," so that your users know that the app is still processing.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Minimize startup time</source>
          <target xml:space="preserve">Minimize startup time</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">All but the simplest apps require a perceivable amount of time to load resources, parse XAML, set up data structures, and run logic at activation.</source>
          <target xml:space="preserve">All but the simplest apps require a perceivable amount of time to load resources, parse XAML, set up data structures, and run logic at activation.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Here, we analyze the process of activation by breaking it into three phases.</source>
          <target xml:space="preserve">Here, we analyze the process of activation by breaking it into three phases.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">We also provide tips for reducing the time spent in each phase, and techniques for making each phase of your app's startup more palatable to the user.</source>
          <target xml:space="preserve">We also provide tips for reducing the time spent in each phase, and techniques for making each phase of your app's startup more palatable to the user.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">The activation period is the time between the moment a user starts the app and the moment the app is functional.</source>
          <target xml:space="preserve">The activation period is the time between the moment a user starts the app and the moment the app is functional.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">This is a critical time because it’s a user’s first impression of your app.</source>
          <target xml:space="preserve">This is a critical time because it’s a user’s first impression of your app.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">They expect instant and continuous feedback from the system and apps.</source>
          <target xml:space="preserve">They expect instant and continuous feedback from the system and apps.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">The system and the app are perceived to be broken or poorly designed when apps don't start quickly.</source>
          <target xml:space="preserve">The system and the app are perceived to be broken or poorly designed when apps don't start quickly.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">Even worse, if an app takes too long to activate, the Process Lifetime Manager (PLM) might kill it, or the user might uninstall it.</source>
          <target xml:space="preserve">Even worse, if an app takes too long to activate, the Process Lifetime Manager (PLM) might kill it, or the user might uninstall it.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">Introduction to the stages of startup</source>
          <target xml:space="preserve">Introduction to the stages of startup</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">Startup involves a number of moving pieces, and all of them need to be correctly coordinated for the best user experience.</source>
          <target xml:space="preserve">Startup involves a number of moving pieces, and all of them need to be correctly coordinated for the best user experience.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">The following steps occur between your user clicking on your app tile and the application content being shown.</source>
          <target xml:space="preserve">The following steps occur between your user clicking on your app tile and the application content being shown.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">The Windows shell starts the process and Main is called.</source>
          <target xml:space="preserve">The Windows shell starts the process and Main is called.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">The Application object is created.</source>
          <target xml:space="preserve">The Application object is created.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">(Project template) Constructor calls InitializeComponent, which causes App.xaml to be parsed and objects created.</source>
          <target xml:space="preserve">(Project template) Constructor calls InitializeComponent, which causes App.xaml to be parsed and objects created.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">Application.OnLaunched event is raised.</source>
          <target xml:space="preserve">Application.OnLaunched event is raised.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">(ProjectTemplate) App code creates a Frame and navigates to MainPage.</source>
          <target xml:space="preserve">(ProjectTemplate) App code creates a Frame and navigates to MainPage.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">(ProjectTemplate) Mainpage constructor calls InitializeComponent which causes MainPage.xaml to be parsed and objects created.</source>
          <target xml:space="preserve">(ProjectTemplate) Mainpage constructor calls InitializeComponent which causes MainPage.xaml to be parsed and objects created.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">ProjectTemplate) Window.Current.Activate() is called.</source>
          <target xml:space="preserve">ProjectTemplate) Window.Current.Activate() is called.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">XAML Platform runs the Layout pass including Measure &amp; Arrange.</source>
          <target xml:space="preserve">XAML Platform runs the Layout pass including Measure &amp; Arrange.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">ApplyTemplate will cause control template content to be created for each control, which is typically the bulk of Layout time for startup.</source>
          <target xml:space="preserve">ApplyTemplate will cause control template content to be created for each control, which is typically the bulk of Layout time for startup.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">Render is called to create visuals for all the window contents.</source>
          <target xml:space="preserve">Render is called to create visuals for all the window contents.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">Frame is presented to the Desktop Windows Manager (DWM).</source>
          <target xml:space="preserve">Frame is presented to the Desktop Windows Manager (DWM).</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">Do less in your Startup path</source>
          <target xml:space="preserve">Do less in your Startup path</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">Keep your startup code path free from anything that is not needed for your first frame.</source>
          <target xml:space="preserve">Keep your startup code path free from anything that is not needed for your first frame.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">If you have user dlls containing controls that are not needed during first frame, consider delay loading them.</source>
          <target xml:space="preserve">If you have user dlls containing controls that are not needed during first frame, consider delay loading them.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">If you have a portion of your UI dependent on data from the cloud, then split that UI.</source>
          <target xml:space="preserve">If you have a portion of your UI dependent on data from the cloud, then split that UI.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">First, bring up the UI that is not dependent on cloud data and asynchronously bring up the cloud-dependent UI.</source>
          <target xml:space="preserve">First, bring up the UI that is not dependent on cloud data and asynchronously bring up the cloud-dependent UI.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">You should also consider caching data locally so that the application will work offline or not be affected by slow network connectivity.</source>
          <target xml:space="preserve">You should also consider caching data locally so that the application will work offline or not be affected by slow network connectivity.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">Show progress UI if your UI is waiting for data.</source>
          <target xml:space="preserve">Show progress UI if your UI is waiting for data.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">Be cautious of app designs that involve a lot of parsing of configuration files, or UI that is dynamically generated by code.</source>
          <target xml:space="preserve">Be cautious of app designs that involve a lot of parsing of configuration files, or UI that is dynamically generated by code.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">Reduce element count</source>
          <target xml:space="preserve">Reduce element count</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">Startup performance in a XAML app is directly correlated to the number of elements you create during startup.</source>
          <target xml:space="preserve">Startup performance in a XAML app is directly correlated to the number of elements you create during startup.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">The fewer elements you create, the less time your app will take to start up.</source>
          <target xml:space="preserve">The fewer elements you create, the less time your app will take to start up.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">As a rough benchmark, consider each element to take 1ms to create.</source>
          <target xml:space="preserve">As a rough benchmark, consider each element to take 1ms to create.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">Templates used in items controls can have the biggest impact, as they are repeated multiple times.</source>
          <target xml:space="preserve">Templates used in items controls can have the biggest impact, as they are repeated multiple times.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](optimize-gridview-and-listview.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView and GridView UI optimization</pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView and GridView UI optimization</pc>.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">UserControls and control templates will be expanded, so those should also be taken into account.</source>
          <target xml:space="preserve">UserControls and control templates will be expanded, so those should also be taken into account.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">If you create any XAML that does not appear on the screen, then you should justify whether those pieces of XAML should be created during your startup.</source>
          <target xml:space="preserve">If you create any XAML that does not appear on the screen, then you should justify whether those pieces of XAML should be created during your startup.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://blogs.msdn.com/b/visualstudio/archive/2015/02/24/introducing-the-ui-debugging-tools-for-xaml.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Live Visual Tree</pc> window shows the child element counts for each node in the tree.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Live Visual Tree</pc> window shows the child element counts for each node in the tree.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">Live visual tree.</source>
          <target xml:space="preserve">Live visual tree.</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use x:DeferLoadStrategy</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use x:DeferLoadStrategy</pc>.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">Collapsing an element, or setting its opacity to 0, will not prevent the element from being created.</source>
          <target xml:space="preserve">Collapsing an element, or setting its opacity to 0, will not prevent the element from being created.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Using x:DeferLoadStrategy, you can delay the loading of a piece of UI, and load it when needed.</source>
          <target xml:space="preserve">Using x:DeferLoadStrategy, you can delay the loading of a piece of UI, and load it when needed.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">This is good way to delay processing UI that is not visible during the startup screen, so that you can load it when needed, or as part of a set of delayed logic.</source>
          <target xml:space="preserve">This is good way to delay processing UI that is not visible during the startup screen, so that you can load it when needed, or as part of a set of delayed logic.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">To trigger the loading, you need only call FindName for the element.</source>
          <target xml:space="preserve">To trigger the loading, you need only call FindName for the element.</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204785)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For an example and more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy attribute</pc>.</source>
          <target xml:space="preserve">For an example and more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy attribute</pc>.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Virtualization</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Virtualization</pc>.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">If you have list or repeater content in your UI then it’s highly advised that you use UI virtualization.</source>
          <target xml:space="preserve">If you have list or repeater content in your UI then it’s highly advised that you use UI virtualization.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">If list UI is not virtualized then you are paying the cost of creating all the elements up front, and that can slow down your startup.</source>
          <target xml:space="preserve">If list UI is not virtualized then you are paying the cost of creating all the elements up front, and that can slow down your startup.</target>
        </segment>
      </unit>
      <unit id="204">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](optimize-gridview-and-listview.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView and GridView UI optimization</pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView and GridView UI optimization</pc>.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">Application performance is not only about raw performance, it’s also about perception.</source>
          <target xml:space="preserve">Application performance is not only about raw performance, it’s also about perception.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Changing the order of operations so that visual aspects occur first will commonly make the user feel like the application is faster.</source>
          <target xml:space="preserve">Changing the order of operations so that visual aspects occur first will commonly make the user feel like the application is faster.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">Users will consider the application loaded when the content is on the screen.</source>
          <target xml:space="preserve">Users will consider the application loaded when the content is on the screen.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">Commonly, applications need to do multiple things as part of the startup, and not all of that is required to bring up the UI, so those should be delayed or prioritized lower than the UI.</source>
          <target xml:space="preserve">Commonly, applications need to do multiple things as part of the startup, and not all of that is required to bring up the UI, so those should be delayed or prioritized lower than the UI.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">This topic talks about the “first frame” which comes from animation/TV, and is a measure of how long until content is seen by the end user.</source>
          <target xml:space="preserve">This topic talks about the “first frame” which comes from animation/TV, and is a measure of how long until content is seen by the end user.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">Improve startup perception</source>
          <target xml:space="preserve">Improve startup perception</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source xml:space="preserve">Let’s use the example of a simple online game to identify each phase of startup and different techniques to give the user feedback throughout the process.</source>
          <target xml:space="preserve">Let’s use the example of a simple online game to identify each phase of startup and different techniques to give the user feedback throughout the process.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">For this example, the first phase of activation is the time between the user tapping the game’s tile and the game starting to run its code.</source>
          <target xml:space="preserve">For this example, the first phase of activation is the time between the user tapping the game’s tile and the game starting to run its code.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source xml:space="preserve">During this time, the system doesn’t have any content to display to the user to even indicate that the correct game has started.</source>
          <target xml:space="preserve">During this time, the system doesn’t have any content to display to the user to even indicate that the correct game has started.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">But providing a splash screen gives that content to the system.</source>
          <target xml:space="preserve">But providing a splash screen gives that content to the system.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source xml:space="preserve">The game then informs the user that the first phase of activation has completed by replacing the static splash screen with its own UI when it begins running code.</source>
          <target xml:space="preserve">The game then informs the user that the first phase of activation has completed by replacing the static splash screen with its own UI when it begins running code.</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source xml:space="preserve">The second phase of activation encompasses creating and initializing structures critical for the game.</source>
          <target xml:space="preserve">The second phase of activation encompasses creating and initializing structures critical for the game.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source xml:space="preserve">If an app can quickly create its initial UI with the data available after the first phase of activation, then the second phase is trivial and you can display the UI immediately.</source>
          <target xml:space="preserve">If an app can quickly create its initial UI with the data available after the first phase of activation, then the second phase is trivial and you can display the UI immediately.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source xml:space="preserve">Otherwise we recommend that the app display a loading page while it is initialized.</source>
          <target xml:space="preserve">Otherwise we recommend that the app display a loading page while it is initialized.</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source xml:space="preserve">What the loading page looks like is up to you and it can be as simple as displaying a progress bar or a progress ring.</source>
          <target xml:space="preserve">What the loading page looks like is up to you and it can be as simple as displaying a progress bar or a progress ring.</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source xml:space="preserve">The key point is that the app indicates that it is performing tasks before becoming responsive.</source>
          <target xml:space="preserve">The key point is that the app indicates that it is performing tasks before becoming responsive.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source xml:space="preserve">In the case of the game, it would like to display its initial screen but that UI requires that some images and sounds be loaded from disk into memory.</source>
          <target xml:space="preserve">In the case of the game, it would like to display its initial screen but that UI requires that some images and sounds be loaded from disk into memory.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source xml:space="preserve">These tasks take a couple of seconds, so the app keeps the user informed by replacing the splash screen with a loading page, which shows a simple animation related to the theme of the game.</source>
          <target xml:space="preserve">These tasks take a couple of seconds, so the app keeps the user informed by replacing the splash screen with a loading page, which shows a simple animation related to the theme of the game.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source xml:space="preserve">The third stage begins after the game has a minimal set of info to create an interactive UI, which replaces the loading page.</source>
          <target xml:space="preserve">The third stage begins after the game has a minimal set of info to create an interactive UI, which replaces the loading page.</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source xml:space="preserve">At this point the only info available to the online game is the content that the app loaded from disk.</source>
          <target xml:space="preserve">At this point the only info available to the online game is the content that the app loaded from disk.</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source xml:space="preserve">The game can ship with enough content to create an interactive UI; but because it’s an online game it won’t be functional until it connects to the internet and downloads some additional info.</source>
          <target xml:space="preserve">The game can ship with enough content to create an interactive UI; but because it’s an online game it won’t be functional until it connects to the internet and downloads some additional info.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source xml:space="preserve">Until it has all the info it needs to be functional, the user can interact with the UI, but features that need additional data from the web should give feedback that content is still loading.</source>
          <target xml:space="preserve">Until it has all the info it needs to be functional, the user can interact with the UI, but features that need additional data from the web should give feedback that content is still loading.</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source xml:space="preserve">It may take some time for an app to become fully functional, so it’s important that functionality be made available as soon as possible.</source>
          <target xml:space="preserve">It may take some time for an app to become fully functional, so it’s important that functionality be made available as soon as possible.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source xml:space="preserve">Now that we identified the three stages of activation in the online game, let’s tie them to actual code.</source>
          <target xml:space="preserve">Now that we identified the three stages of activation in the online game, let’s tie them to actual code.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source xml:space="preserve">Phase 1</source>
          <target xml:space="preserve">Phase 1</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source xml:space="preserve">Before an app starts, it needs to tell the system what it wants to display as the splash screen.</source>
          <target xml:space="preserve">Before an app starts, it needs to tell the system what it wants to display as the splash screen.</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source xml:space="preserve">It does so by providing an image and background color to the SplashScreen element in an app’s manifest, as in the example.</source>
          <target xml:space="preserve">It does so by providing an image and background color to the SplashScreen element in an app’s manifest, as in the example.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source xml:space="preserve">Windows displays this after the app begins activation.</source>
          <target xml:space="preserve">Windows displays this after the app begins activation.</target>
        </segment>
      </unit>
      <unit id="233">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt187306)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add a splash screen</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add a splash screen</pc>.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source xml:space="preserve">Use the app’s constructor only to initialize data structures that are critical to the app.</source>
          <target xml:space="preserve">Use the app’s constructor only to initialize data structures that are critical to the app.</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source xml:space="preserve">The constructor is called only the first time the app is run and not necessarily each time the app is activated.</source>
          <target xml:space="preserve">The constructor is called only the first time the app is run and not necessarily each time the app is activated.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source xml:space="preserve">For example, the constructor isn't called for an app that has been run, placed in the background, and then activated via the search contract.</source>
          <target xml:space="preserve">For example, the constructor isn't called for an app that has been run, placed in the background, and then activated via the search contract.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source xml:space="preserve">Phase 2</source>
          <target xml:space="preserve">Phase 2</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source xml:space="preserve">There are a number of reasons for an app to be activated, each of which you may want to handle differently.</source>
          <target xml:space="preserve">There are a number of reasons for an app to be activated, each of which you may want to handle differently.</target>
        </segment>
      </unit>
      <unit id="239">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242330)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh701797)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR242331)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/Hh701799)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">[</data>
          <data id="id18">](https://msdn.microsoft.com/library/windows/apps/Hh701801)</data>
          <data id="id19">**</data>
          <data id="id20">**</data>
          <data id="id21">[</data>
          <data id="id22">](https://msdn.microsoft.com/library/windows/apps/BR242335)</data>
          <data id="id23">**</data>
          <data id="id24">**</data>
          <data id="id25">[</data>
          <data id="id26">](https://msdn.microsoft.com/library/windows/apps/BR242336)</data>
          <data id="id27">**</data>
          <data id="id28">**</data>
          <data id="id29">[</data>
          <data id="id30">](https://msdn.microsoft.com/library/windows/apps/Hh701806)</data>
          <data id="id31">**</data>
          <data id="id32">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can override <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnActivated</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">OnCachedFileUpdaterActivated</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">OnFileActivated</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">OnFileOpenPickerActivated</pc></pc>, <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">OnFileSavePickerActivated</pc></pc>, <pc dataRefEnd="id22" dataRefStart="id21" id="p11"><pc dataRefEnd="id24" dataRefStart="id23" id="p12">OnLaunched</pc></pc>, <pc dataRefEnd="id26" dataRefStart="id25" id="p13"><pc dataRefEnd="id28" dataRefStart="id27" id="p14">OnSearchActivated</pc></pc>, and <pc dataRefEnd="id30" dataRefStart="id29" id="p15"><pc dataRefEnd="id32" dataRefStart="id31" id="p16">OnShareTargetActivated</pc></pc> methods to handle each reason of activation.</source>
          <target xml:space="preserve">You can override <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnActivated</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">OnCachedFileUpdaterActivated</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">OnFileActivated</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">OnFileOpenPickerActivated</pc></pc>, <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">OnFileSavePickerActivated</pc></pc>, <pc dataRefEnd="id22" dataRefStart="id21" id="p11"><pc dataRefEnd="id24" dataRefStart="id23" id="p12">OnLaunched</pc></pc>, <pc dataRefEnd="id26" dataRefStart="id25" id="p13"><pc dataRefEnd="id28" dataRefStart="id27" id="p14">OnSearchActivated</pc></pc>, and <pc dataRefEnd="id30" dataRefStart="id29" id="p15"><pc dataRefEnd="id32" dataRefStart="id31" id="p16">OnShareTargetActivated</pc></pc> methods to handle each reason of activation.</target>
        </segment>
      </unit>
      <unit id="240">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209051)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209046)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">One of the things that an app must do in these methods is create a UI, assign it to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.Content</pc></pc>, and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Window.Activate</pc></pc>.</source>
          <target xml:space="preserve">One of the things that an app must do in these methods is create a UI, assign it to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.Content</pc></pc>, and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Window.Activate</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source xml:space="preserve">At this point the splash screen is replaced by the UI that the app created.</source>
          <target xml:space="preserve">At this point the splash screen is replaced by the UI that the app created.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source xml:space="preserve">This visual could either be loading screen or the app's actual UI if enough info is available at activation to create it.</source>
          <target xml:space="preserve">This visual could either be loading screen or the app's actual UI if enough info is available at activation to create it.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
          <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source xml:space="preserve">Apps that display a loading page in the activation handler begin work to create the UI in the background.</source>
          <target xml:space="preserve">Apps that display a loading page in the activation handler begin work to create the UI in the background.</target>
        </segment>
      </unit>
      <unit id="245">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208723)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">After that element has been created, its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Loaded</pc></pc> event occurs.</source>
          <target xml:space="preserve">After that element has been created, its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Loaded</pc></pc> event occurs.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source xml:space="preserve">In the event handler you replace the window's content, which is currently the loading screen, with the newly created home page.</source>
          <target xml:space="preserve">In the event handler you replace the window's content, which is currently the loading screen, with the newly created home page.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source xml:space="preserve">It’s critical that an app with an extended initialization period show a loading page.</source>
          <target xml:space="preserve">It’s critical that an app with an extended initialization period show a loading page.</target>
        </segment>
      </unit>
      <unit id="248">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209046)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Aside from providing the sure feedback about the activation process, the process will be terminated if <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.Activate</pc></pc> is not called within 15 seconds of the start of the activation process.</source>
          <target xml:space="preserve">Aside from providing the sure feedback about the activation process, the process will be terminated if <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.Activate</pc></pc> is not called within 15 seconds of the start of the activation process.</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
          <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="250">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=234889)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For an example of using extended splash screens, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Splash screen sample</pc>.</source>
          <target xml:space="preserve">For an example of using extended splash screens, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Splash screen sample</pc>.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source xml:space="preserve">Phase 3</source>
          <target xml:space="preserve">Phase 3</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source xml:space="preserve">Just because the app displayed the UI doesn't mean it is completely ready for use.</source>
          <target xml:space="preserve">Just because the app displayed the UI doesn't mean it is completely ready for use.</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source xml:space="preserve">In the case of our game, the UI is displayed with placeholders for features that require data from the internet.</source>
          <target xml:space="preserve">In the case of our game, the UI is displayed with placeholders for features that require data from the internet.</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source xml:space="preserve">At this point the game downloads the additional data needed to make the app fully functional and progressively enables features as data is acquired.</source>
          <target xml:space="preserve">At this point the game downloads the additional data needed to make the app fully functional and progressively enables features as data is acquired.</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source xml:space="preserve">Sometimes much of the content needed for activation can be packaged with the app.</source>
          <target xml:space="preserve">Sometimes much of the content needed for activation can be packaged with the app.</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source xml:space="preserve">Such is the case with a simple game.</source>
          <target xml:space="preserve">Such is the case with a simple game.</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source xml:space="preserve">This makes the activation process quite simple.</source>
          <target xml:space="preserve">This makes the activation process quite simple.</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source xml:space="preserve">But many programs (such as news readers and photo viewers) must pull info from the web to become functional.</source>
          <target xml:space="preserve">But many programs (such as news readers and photo viewers) must pull info from the web to become functional.</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source xml:space="preserve">This data can be large and take a fair amount of time to download.</source>
          <target xml:space="preserve">This data can be large and take a fair amount of time to download.</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source xml:space="preserve">How the app gets this data during the activation process can have a huge impact on the perceived performance of an app.</source>
          <target xml:space="preserve">How the app gets this data during the activation process can have a huge impact on the perceived performance of an app.</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source xml:space="preserve">You could display a loading page, or worse, a splash screen, for minutes if an app tried to download an entire data set it needs for functionality in phase one or two of activation.</source>
          <target xml:space="preserve">You could display a loading page, or worse, a splash screen, for minutes if an app tried to download an entire data set it needs for functionality in phase one or two of activation.</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source xml:space="preserve">This makes an app look like it’s hung or cause it to be terminated by the system.</source>
          <target xml:space="preserve">This makes an app look like it’s hung or cause it to be terminated by the system.</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source xml:space="preserve">We recommend that an app download the minimal amount of data to show an interactive UI with placeholder elements in phase 2 and then progressively load data, which replaces the placeholder elements, in phase 3.</source>
          <target xml:space="preserve">We recommend that an app download the minimal amount of data to show an interactive UI with placeholder elements in phase 2 and then progressively load data, which replaces the placeholder elements, in phase 3.</target>
        </segment>
      </unit>
      <unit id="264">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](optimize-gridview-and-listview.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info on dealing with data, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optimize ListView and GridView</pc>.</source>
          <target xml:space="preserve">For more info on dealing with data, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optimize ListView and GridView</pc>.</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source xml:space="preserve">How exactly an app reacts to each phase of startup is completely up to you, but providing the user as much feedback as possible (splash screen, loading screen, UI while data loads) makes the user feel as though an app, and the system as a whole, are fast.</source>
          <target xml:space="preserve">How exactly an app reacts to each phase of startup is completely up to you, but providing the user as much feedback as possible (splash screen, loading screen, UI while data loads) makes the user feel as though an app, and the system as a whole, are fast.</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source xml:space="preserve">Minimize managed assemblies in the startup path</source>
          <target xml:space="preserve">Minimize managed assemblies in the startup path</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source xml:space="preserve">Reusable code often comes in the form of modules (DLLs) included in a project.</source>
          <target xml:space="preserve">Reusable code often comes in the form of modules (DLLs) included in a project.</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source xml:space="preserve">Loading these modules requires accessing the disk, and as you can imagine, the cost of doing so can add up.</source>
          <target xml:space="preserve">Loading these modules requires accessing the disk, and as you can imagine, the cost of doing so can add up.</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source xml:space="preserve">This has the greatest impact on cold startup, but it can have an impact on warm startup, too.</source>
          <target xml:space="preserve">This has the greatest impact on cold startup, but it can have an impact on warm startup, too.</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source xml:space="preserve">In the case of C\# and Visual Basic, the CLR tries to delay that cost as much as possible by loading assemblies on demand.</source>
          <target xml:space="preserve">In the case of C\# and Visual Basic, the CLR tries to delay that cost as much as possible by loading assemblies on demand.</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source xml:space="preserve">That is, the CLR doesn’t load a module until an executed method references it.</source>
          <target xml:space="preserve">That is, the CLR doesn’t load a module until an executed method references it.</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source xml:space="preserve">So, reference only assemblies that are necessary to the launch of your app in startup code so that the CLR doesn’t load unnecessary modules.</source>
          <target xml:space="preserve">So, reference only assemblies that are necessary to the launch of your app in startup code so that the CLR doesn’t load unnecessary modules.</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source xml:space="preserve">If you have unused code paths in your startup path that have unnecessary references, you can move these code paths to other methods to avoid the unnecessary loads.</source>
          <target xml:space="preserve">If you have unused code paths in your startup path that have unnecessary references, you can move these code paths to other methods to avoid the unnecessary loads.</target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source xml:space="preserve">Another way to reduce module loads is to combine your app modules.</source>
          <target xml:space="preserve">Another way to reduce module loads is to combine your app modules.</target>
        </segment>
      </unit>
      <unit id="275">
        <segment state="initial">
          <source xml:space="preserve">Loading one large assembly typically takes less time than loading two small ones.</source>
          <target xml:space="preserve">Loading one large assembly typically takes less time than loading two small ones.</target>
        </segment>
      </unit>
      <unit id="276">
        <segment state="initial">
          <source xml:space="preserve">This is not always possible, and you should combine modules only if it doesn't make a material difference to developer productivity or code reusability.</source>
          <target xml:space="preserve">This is not always possible, and you should combine modules only if it doesn't make a material difference to developer productivity or code reusability.</target>
        </segment>
      </unit>
      <unit id="277">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=251609)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/ff191077.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can use tools such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PerfView</pc> or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Performance Analyzer (WPA)</pc> to find out what modules are loaded on startup.</source>
          <target xml:space="preserve">You can use tools such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PerfView</pc> or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Performance Analyzer (WPA)</pc> to find out what modules are loaded on startup.</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source xml:space="preserve">Make smart web requests</source>
          <target xml:space="preserve">Make smart web requests</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source xml:space="preserve">You can dramatically improve the loading time of an app by packaging its contents locally, including XAML, images, and any other files important to the app.</source>
          <target xml:space="preserve">You can dramatically improve the loading time of an app by packaging its contents locally, including XAML, images, and any other files important to the app.</target>
        </segment>
      </unit>
      <unit id="280">
        <segment state="initial">
          <source xml:space="preserve">Disk operations are faster than network operations.</source>
          <target xml:space="preserve">Disk operations are faster than network operations.</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source xml:space="preserve">If an app needs a particular file at initialization, you can reduce the overall startup time by loading it from disk instead of retrieving it from a remote server.</source>
          <target xml:space="preserve">If an app needs a particular file at initialization, you can reduce the overall startup time by loading it from disk instead of retrieving it from a remote server.</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source xml:space="preserve">Journal and Cache Pages Efficiently</source>
          <target xml:space="preserve">Journal and Cache Pages Efficiently</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source xml:space="preserve">The Frame control provides navigation features.</source>
          <target xml:space="preserve">The Frame control provides navigation features.</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source xml:space="preserve">It offers navigation to a Page (Navigate method), navigation journaling (BackStack/ForwardStack properties, GoForward/GoBack method), Page caching (Page.NavigationCacheMode), and serialization support (GetNavigationState method).</source>
          <target xml:space="preserve">It offers navigation to a Page (Navigate method), navigation journaling (BackStack/ForwardStack properties, GoForward/GoBack method), Page caching (Page.NavigationCacheMode), and serialization support (GetNavigationState method).</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source xml:space="preserve">The performance to be aware of with Frame is primarily around the journaling and page caching.</source>
          <target xml:space="preserve">The performance to be aware of with Frame is primarily around the journaling and page caching.</target>
        </segment>
      </unit>
      <unit id="286">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame journaling</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame journaling</pc>.</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source xml:space="preserve">When you navigate to a page with Frame.Navigate(), a PageStackEntry for the current page is added to Frame.BackStack collection.</source>
          <target xml:space="preserve">When you navigate to a page with Frame.Navigate(), a PageStackEntry for the current page is added to Frame.BackStack collection.</target>
        </segment>
      </unit>
      <unit id="288">
        <segment state="initial">
          <source xml:space="preserve">PageStackEntry is relatively small, but there’s no built-in limit to the size of the BackStack collection.</source>
          <target xml:space="preserve">PageStackEntry is relatively small, but there’s no built-in limit to the size of the BackStack collection.</target>
        </segment>
      </unit>
      <unit id="289">
        <segment state="initial">
          <source xml:space="preserve">Potentially, a user could navigate in a loop and grow this collection indefinitely.</source>
          <target xml:space="preserve">Potentially, a user could navigate in a loop and grow this collection indefinitely.</target>
        </segment>
      </unit>
      <unit id="290">
        <segment state="initial">
          <source xml:space="preserve">The PageStackEntry also includes the parameter that was passed to the Frame.Navigate() method.</source>
          <target xml:space="preserve">The PageStackEntry also includes the parameter that was passed to the Frame.Navigate() method.</target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source xml:space="preserve">It’s recommended that that parameter be a primitive serializable type (such as an int or string), in order to allow the Frame.GetNavigationState() method to work.</source>
          <target xml:space="preserve">It’s recommended that that parameter be a primitive serializable type (such as an int or string), in order to allow the Frame.GetNavigationState() method to work.</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source xml:space="preserve">But that parameter could potentially reference an object that accounts for more significant amounts of working set or other resources, making each entry in the BackStack that much more expensive.</source>
          <target xml:space="preserve">But that parameter could potentially reference an object that accounts for more significant amounts of working set or other resources, making each entry in the BackStack that much more expensive.</target>
        </segment>
      </unit>
      <unit id="293">
        <segment state="initial">
          <source xml:space="preserve">For example, you could potentially use a StorageFile as a parameter, and consequently the BackStack is keeping an indefinite number of files open.</source>
          <target xml:space="preserve">For example, you could potentially use a StorageFile as a parameter, and consequently the BackStack is keeping an indefinite number of files open.</target>
        </segment>
      </unit>
      <unit id="294">
        <segment state="initial">
          <source xml:space="preserve">Therefore it’s recommended to keep the navigation parameters small, and to limit the size of the BackStack.</source>
          <target xml:space="preserve">Therefore it’s recommended to keep the navigation parameters small, and to limit the size of the BackStack.</target>
        </segment>
      </unit>
      <unit id="295">
        <segment state="initial">
          <source xml:space="preserve">The BackStack is a standard vector (IList in C\#, Platform::Vector in C++/CX), and so can be trimmed simply by removing entries.</source>
          <target xml:space="preserve">The BackStack is a standard vector (IList in C\#, Platform::Vector in C++/CX), and so can be trimmed simply by removing entries.</target>
        </segment>
      </unit>
      <unit id="296">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page caching</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page caching</pc>.</target>
        </segment>
      </unit>
      <unit id="297">
        <segment state="initial">
          <source xml:space="preserve">By default, when you navigate to a page with the Frame.Navigate method, a new instance of the page is instantiated.</source>
          <target xml:space="preserve">By default, when you navigate to a page with the Frame.Navigate method, a new instance of the page is instantiated.</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source xml:space="preserve">Similarly, if you then navigate back to the previous page with Frame.GoBack, a new instance of the previous page is allocated.</source>
          <target xml:space="preserve">Similarly, if you then navigate back to the previous page with Frame.GoBack, a new instance of the previous page is allocated.</target>
        </segment>
      </unit>
      <unit id="299">
        <segment state="initial">
          <source xml:space="preserve">Frame, though, offers an optional page cache that can avoid these instantiations.</source>
          <target xml:space="preserve">Frame, though, offers an optional page cache that can avoid these instantiations.</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source xml:space="preserve">To get a page put into the cache, use the Page.NavigationCacheMode property.</source>
          <target xml:space="preserve">To get a page put into the cache, use the Page.NavigationCacheMode property.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source xml:space="preserve">Setting that mode to Required will force the page to be cached, setting it to Enabled will allow it to be cached.</source>
          <target xml:space="preserve">Setting that mode to Required will force the page to be cached, setting it to Enabled will allow it to be cached.</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source xml:space="preserve">By default the cache size is 10 pages, but this can be overridden with the Frame.CacheSize property.</source>
          <target xml:space="preserve">By default the cache size is 10 pages, but this can be overridden with the Frame.CacheSize property.</target>
        </segment>
      </unit>
      <unit id="303">
        <segment state="initial">
          <source xml:space="preserve">All Required pages will be cached, and if there are fewer than CacheSize Required pages, Enabled pages can be cached as well.</source>
          <target xml:space="preserve">All Required pages will be cached, and if there are fewer than CacheSize Required pages, Enabled pages can be cached as well.</target>
        </segment>
      </unit>
      <unit id="304">
        <segment state="initial">
          <source xml:space="preserve">Page caching can help performance by avoiding instantiations, and therefore improving navigation performance.</source>
          <target xml:space="preserve">Page caching can help performance by avoiding instantiations, and therefore improving navigation performance.</target>
        </segment>
      </unit>
      <unit id="305">
        <segment state="initial">
          <source xml:space="preserve">Page caching can hurt performance by over-caching and therefore impacting working set.</source>
          <target xml:space="preserve">Page caching can hurt performance by over-caching and therefore impacting working set.</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source xml:space="preserve">Therefore it’s recommend to use page caching as appropriate for your application.</source>
          <target xml:space="preserve">Therefore it’s recommend to use page caching as appropriate for your application.</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source xml:space="preserve">For example, say you have an app that shows a list of items in a Frame, and when you tap on an item, it navigates the frame to a detail page for that item.</source>
          <target xml:space="preserve">For example, say you have an app that shows a list of items in a Frame, and when you tap on an item, it navigates the frame to a detail page for that item.</target>
        </segment>
      </unit>
      <unit id="308">
        <segment state="initial">
          <source xml:space="preserve">The list page should probably be set to cache.</source>
          <target xml:space="preserve">The list page should probably be set to cache.</target>
        </segment>
      </unit>
      <unit id="309">
        <segment state="initial">
          <source xml:space="preserve">If the detail page is the same for all items, it should probably be cached as well.</source>
          <target xml:space="preserve">If the detail page is the same for all items, it should probably be cached as well.</target>
        </segment>
      </unit>
      <unit id="310">
        <segment state="initial">
          <source xml:space="preserve">But if the detail page is more heterogeneous, it might be better to leave caching off.</source>
          <target xml:space="preserve">But if the detail page is more heterogeneous, it might be better to leave caching off.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>