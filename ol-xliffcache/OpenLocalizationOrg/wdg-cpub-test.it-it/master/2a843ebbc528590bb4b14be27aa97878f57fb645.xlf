<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">2a843ebbc528590bb4b14be27aa97878f57fb645</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: A9D54DEC-CD1B-4043-ADE4-32CD4977D1BF</source>
          <target xml:space="preserve">ms.assetid: A9D54DEC-CD1B-4043-ADE4-32CD4977D1BF</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Data binding overview</source>
          <target xml:space="preserve">title: Data binding overview</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.</source>
          <target xml:space="preserve">description: This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Data binding overview</source>
          <target xml:space="preserve">Data binding overview</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.</source>
          <target xml:space="preserve">This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">In addition, we show how to control the rendering of items, implement a details view based on a selection, and convert data for display.</source>
          <target xml:space="preserve">In addition, we show how to control the rendering of items, implement a details view based on a selection, and convert data for display.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](data-binding-in-depth.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more detailed info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</source>
          <target xml:space="preserve">For more detailed info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Prerequisites</source>
          <target xml:space="preserve">Prerequisites</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">This topic assumes that you know how to create a basic UWP app.</source>
          <target xml:space="preserve">This topic assumes that you know how to create a basic UWP app.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh974581)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For instructions on creating your first UWP app, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create your first UWP app using C# or Visual Basic</pc>.</source>
          <target xml:space="preserve">For instructions on creating your first UWP app, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create your first UWP app using C# or Visual Basic</pc>.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Create the project</source>
          <target xml:space="preserve">Create the project</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Application (Windows Universal)</pc> project.</source>
          <target xml:space="preserve">Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Application (Windows Universal)</pc> project.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Name it "Quickstart".</source>
          <target xml:space="preserve">Name it "Quickstart".</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Binding to a single item</source>
          <target xml:space="preserve">Binding to a single item</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Every binding consists of a binding target and a binding source.</source>
          <target xml:space="preserve">Every binding consists of a binding target and a binding source.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Typically, the target is a property of a control or other UI element, and the source is a property of a class instance (a data model, or a view model).</source>
          <target xml:space="preserve">Typically, the target is a property of a control or other UI element, and the source is a property of a class instance (a data model, or a view model).</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">This example shows how to bind a control to a single item.</source>
          <target xml:space="preserve">This example shows how to bind a control to a single item.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The target is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property of a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc>.</source>
          <target xml:space="preserve">The target is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property of a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The source is an instance of a simple class named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> that represents an audio recording.</source>
          <target xml:space="preserve">The source is an instance of a simple class named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> that represents an audio recording.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Let's look at the class first.</source>
          <target xml:space="preserve">Let's look at the class first.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Add a new class to your project, name it Recording.cs (if you're using C#), and add this code to it.</source>
          <target xml:space="preserve">Add a new class to your project, name it Recording.cs (if you're using C#), and add this code to it.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">Next, expose the binding source class from the class that represents your page of markup.</source>
          <target xml:space="preserve">Next, expose the binding source class from the class that represents your page of markup.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We do that by adding a property of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RecordingViewModel</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage</pc>.</source>
          <target xml:space="preserve">We do that by adding a property of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RecordingViewModel</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage</pc>.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The last piece is to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ViewModel.DefaultRecording.OneLiner</pc> property.</source>
          <target xml:space="preserve">The last piece is to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ViewModel.DefaultRecording.OneLiner</pc> property.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Here's the result.</source>
          <target xml:space="preserve">Here's the result.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Binding a textblock</source>
          <target xml:space="preserve">Binding a textblock</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">Binding to a collection of items</source>
          <target xml:space="preserve">Binding to a collection of items</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">A common scenario is to bind to a collection of business objects.</source>
          <target xml:space="preserve">A common scenario is to bind to a collection of business objects.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Collections.ObjectModel.ObservableCollection%601)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](T:System.ComponentModel.INotifyPropertyChanged)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](T:System.Collections.Specialized.INotifyCollectionChanged)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In C# and Visual Basic, the generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection&amp;lt;T&amp;gt;</pc></pc> class is a good collection choice for data binding, because it implements the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">INotifyPropertyChanged</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">INotifyCollectionChanged</pc></pc> interfaces.</source>
          <target xml:space="preserve">In C# and Visual Basic, the generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection&amp;lt;T&amp;gt;</pc></pc> class is a good collection choice for data binding, because it implements the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">INotifyPropertyChanged</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">INotifyCollectionChanged</pc></pc> interfaces.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">These interfaces provide change notification to bindings when items are added or removed or a property of the list itself changes.</source>
          <target xml:space="preserve">These interfaces provide change notification to bindings when items are added or removed or a property of the list itself changes.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you want your bound controls to update with changes to properties of objects in the collection, the business object should also implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1">INotifyPropertyChanged</pc>.</source>
          <target xml:space="preserve">If you want your bound controls to update with changes to properties of objects in the collection, the business object should also implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1">INotifyPropertyChanged</pc>.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](data-binding-in-depth.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">`Recording`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This next example binds a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> to a collection of <ph dataRef="id5" id="ph1" /> objects.</source>
          <target xml:space="preserve">This next example binds a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> to a collection of <ph dataRef="id5" id="ph1" /> objects.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Let's start by adding the collection to our view model.</source>
          <target xml:space="preserve">Let's start by adding the collection to our view model.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Just add these new members to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RecordingViewModel</pc> class.</source>
          <target xml:space="preserve">Just add these new members to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RecordingViewModel</pc> class.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](M:System.Object.ToString)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We haven't yet provided a data template for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> class, so the best the UI framework can do is to call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ToString</pc></pc> for each item in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ListView</pc></pc>.</source>
          <target xml:space="preserve">We haven't yet provided a data template for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> class, so the best the UI framework can do is to call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ToString</pc></pc> for each item in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ListView</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The default implementation of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ToString</pc> is to return the type name.</source>
          <target xml:space="preserve">The default implementation of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ToString</pc> is to return the type name.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Binding a list view</source>
          <target xml:space="preserve">Binding a list view</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](M:System.Object.ToString)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To remedy this we can either override <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ToString</pc></pc> to return the value of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">OneLineSummary</pc>, or we can provide a data template.</source>
          <target xml:space="preserve">To remedy this we can either override <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ToString</pc></pc> to return the value of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">OneLineSummary</pc>, or we can provide a data template.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">The data template option is more common and arguably more flexible.</source>
          <target xml:space="preserve">The data template option is more common and arguably more flexible.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209369)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR242830)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You specify a data template by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentTemplate</pc></pc> property of a content control or the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemTemplate</pc></pc> property of an items control.</source>
          <target xml:space="preserve">You specify a data template by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentTemplate</pc></pc> property of a content control or the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemTemplate</pc></pc> property of an items control.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Here are two ways we could design a data template for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> together with an illustration of the result.</source>
          <target xml:space="preserve">Here are two ways we could design a data template for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> together with an illustration of the result.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">Binding a list view</source>
          <target xml:space="preserve">Binding a list view</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt228349)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information about XAML syntax, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a UI with XAML</pc>.</source>
          <target xml:space="preserve">For more information about XAML syntax, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a UI with XAML</pc>.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt228350)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information about control layout, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Define layouts with XAML</pc>.</source>
          <target xml:space="preserve">For more information about control layout, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Define layouts with XAML</pc>.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">Adding a details view</source>
          <target xml:space="preserve">Adding a details view</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can choose to display all the details of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> objects in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc></pc> items.</source>
          <target xml:space="preserve">You can choose to display all the details of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> objects in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc></pc> items.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">But that takes up a lot of space.</source>
          <target xml:space="preserve">But that takes up a lot of space.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">Instead, you can show just enough data in the item to identify it and then, when the user makes a selection, you can display all the details of the selected item in a separate piece of UI known as the details view.</source>
          <target xml:space="preserve">Instead, you can show just enough data in the item to identify it and then, when the user makes a selection, you can display all the details of the selected item in a separate piece of UI known as the details view.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">This arrangement is also known as a master/details view, or a list/details view.</source>
          <target xml:space="preserve">This arrangement is also known as a master/details view, or a list/details view.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">There are two ways to go about this.</source>
          <target xml:space="preserve">There are two ways to go about this.</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209770)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can bind the details view to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc></pc> property of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc>.</source>
          <target xml:space="preserve">You can bind the details view to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc></pc> property of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Or you can use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>: bind both the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc> and the details view to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource</pc> (which will take care of the currently-selected item for you).</source>
          <target xml:space="preserve">Or you can use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>: bind both the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc> and the details view to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource</pc> (which will take care of the currently-selected item for you).</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Both techniques are shown below, and they both give the same results shown in the illustration.</source>
          <target xml:space="preserve">Both techniques are shown below, and they both give the same results shown in the illustration.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  So far in this topic we've only used the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind} markup extension</pc>, but both of the techniques we'll show below require the more flexible (but less performant) <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding} markup extension</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  So far in this topic we've only used the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind} markup extension</pc>, but both of the techniques we'll show below require the more flexible (but less performant) <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding} markup extension</pc>.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209770)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">First, here's the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc></pc> technique.</source>
          <target xml:space="preserve">First, here's the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc></pc> technique.</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you're using Visual C++ component extensions (C++/CX) then, because we'll be using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>, you'll need to add the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">BindableAttribute</pc></pc> attribute to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Recording</pc> class.</source>
          <target xml:space="preserve">If you're using Visual C++ component extensions (C++/CX) then, because we'll be using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>, you'll need to add the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">BindableAttribute</pc></pc> attribute to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Recording</pc> class.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">The only other change necessary is to the markup.</source>
          <target xml:space="preserve">The only other change necessary is to the markup.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> technique, first add a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CollectionViewSource</pc> as a page resource.</source>
          <target xml:space="preserve">For the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> technique, first add a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CollectionViewSource</pc> as a page resource.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">And then adjust the bindings on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> (which no longer needs to be named) and on the details view to use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource</pc></pc>.</source>
          <target xml:space="preserve">And then adjust the bindings on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> (which no longer needs to be named) and on the details view to use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note that by binding the details view directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.</source>
          <target xml:space="preserve">Note that by binding the details view directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There's no need to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentItem</pc> property as the path for the binding, although you can do that if there's any ambiguity).</source>
          <target xml:space="preserve">There's no need to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentItem</pc> property as the path for the binding, although you can do that if there's any ambiguity).</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">And here's the identical result in each case.</source>
          <target xml:space="preserve">And here's the identical result in each case.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">Binding a list view</source>
          <target xml:space="preserve">Binding a list view</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">Formatting or converting data values for display</source>
          <target xml:space="preserve">Formatting or converting data values for display</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">There is one small issue with the rendering above.</source>
          <target xml:space="preserve">There is one small issue with the rendering above.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](T:System.DateTime)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDateTime</pc> property is not just a date, it's a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DateTime</pc></pc>, so it's being displayed with more precision than we need.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDateTime</pc> property is not just a date, it's a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DateTime</pc></pc>, so it's being displayed with more precision than we need.</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`this.ReleaseDateTime.ToString("d")`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">One solution is to add a string property to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> class that returns <ph dataRef="id3" id="ph1" />.</source>
          <target xml:space="preserve">One solution is to add a string property to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> class that returns <ph dataRef="id3" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Naming that property <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDate</pc> would indicate that it returns a date, not a date-and-time.</source>
          <target xml:space="preserve">Naming that property <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDate</pc> would indicate that it returns a date, not a date-and-time.</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Naming it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDateAsString</pc> would further indicate that it returns a string.</source>
          <target xml:space="preserve">Naming it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDateAsString</pc> would further indicate that it returns a string.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">A more flexible solution is to use something known as a value converter.</source>
          <target xml:space="preserve">A more flexible solution is to use something known as a value converter.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">Here's an example of how to author your own value converter.</source>
          <target xml:space="preserve">Here's an example of how to author your own value converter.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">Add this code to your Recording.cs source code file.</source>
          <target xml:space="preserve">Add this code to your Recording.cs source code file.</target>
        </segment>
      </unit>
      <unit id="176">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Now we can add an instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StringFormatter</pc> as a page resource and use it in our binding.</source>
          <target xml:space="preserve">Now we can add an instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StringFormatter</pc> as a page resource and use it in our binding.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">We pass the format string into the converter from markup for ultimate formatting flexibility.</source>
          <target xml:space="preserve">We pass the format string into the converter from markup for ultimate formatting flexibility.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">Here's the result.</source>
          <target xml:space="preserve">Here's the result.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">displaying a date with custom formatting</source>
          <target xml:space="preserve">displaying a date with custom formatting</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>