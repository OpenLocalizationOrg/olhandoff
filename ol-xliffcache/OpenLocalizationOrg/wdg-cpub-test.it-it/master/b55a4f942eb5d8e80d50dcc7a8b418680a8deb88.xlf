<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">b55a4f942eb5d8e80d50dcc7a8b418680a8deb88</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">description: If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</source>
          <target xml:space="preserve">description: If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Move from Windows Phone Silverlight to UWP</source>
          <target xml:space="preserve">title: Move from Windows Phone Silverlight to UWP</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 9E0C0315-6097-488B-A3AF-7120CCED651A</source>
          <target xml:space="preserve">ms.assetid: 9E0C0315-6097-488B-A3AF-7120CCED651A</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Move from Windows Phone Silverlight to UWP</source>
          <target xml:space="preserve">Move from Windows Phone Silverlight to UWP</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</source>
          <target xml:space="preserve">If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</source>
          <target xml:space="preserve">With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to Universal Windows Platform (UWP) apps</pc>.</source>
          <target xml:space="preserve">For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to Universal Windows Platform (UWP) apps</pc>.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn632424)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When you port your Windows Phone Silverlight app to a Windows 10 app, you'll be able to catch up on the mobile features that were <pc dataRefEnd="id2" dataRefStart="id1" id="p1">introduced in Windows Phone 8.1</pc>, and go far beyond them to use the Universal Windows Platform (UWP) whose app model and UI framework are universal across all Windows 10 devices.</source>
          <target xml:space="preserve">When you port your Windows Phone Silverlight app to a Windows 10 app, you'll be able to catch up on the mobile features that were <pc dataRefEnd="id2" dataRefStart="id1" id="p1">introduced in Windows Phone 8.1</pc>, and go far beyond them to use the Universal Windows Platform (UWP) whose app model and UI framework are universal across all Windows 10 devices.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">That makes it possible to support PCs, tablets, phones, and a large number of other kinds of devices, from one code base and with one app package.</source>
          <target xml:space="preserve">That makes it possible to support PCs, tablets, phones, and a large number of other kinds of devices, from one code base and with one app package.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">And that will multiply your app's potential audience and create new possibilities with shared data, purchased consumables, and so on.</source>
          <target xml:space="preserve">And that will multiply your app's potential audience and create new possibilities with shared data, purchased consumables, and so on.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://dev.windows.com/getstarted/whats-new-windows-10)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info on new features, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's new for developers in Windows 10</pc>.</source>
          <target xml:space="preserve">For more info on new features, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's new for developers in Windows 10</pc>.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">If you choose to, the Windows Phone Silverlight version of your app and the Windows 10 version of it can both be available to customers at the same time.</source>
          <target xml:space="preserve">If you choose to, the Windows Phone Silverlight version of your app and the Windows 10 version of it can both be available to customers at the same time.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This guide is designed to help you port your Windows Phone Silverlight app to Windows 10 manually.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This guide is designed to help you port your Windows Phone Silverlight app to Windows 10 manually.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In addition to using the information in this guide to port your app, you can try the developer preview of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Mobilize.NET's Silverlight Bridge</pc> to help automate the porting process.</source>
          <target xml:space="preserve">In addition to using the information in this guide to port your app, you can try the developer preview of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Mobilize.NET's Silverlight Bridge</pc> to help automate the porting process.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">This tool analyzes your app's source code and converts references to Windows Phone Silverlight controls and APIs to their UWP counterparts.</source>
          <target xml:space="preserve">This tool analyzes your app's source code and converts references to Windows Phone Silverlight controls and APIs to their UWP counterparts.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Because this tool is still in developer preview, it does not yet handle all conversion scenarios.</source>
          <target xml:space="preserve">Because this tool is still in developer preview, it does not yet handle all conversion scenarios.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">However, most developers should be able to save some time and effort by starting with this tool.</source>
          <target xml:space="preserve">However, most developers should be able to save some time and effort by starting with this tool.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=624546)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To try the developer preview, visit <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Mobilize.NET's website</pc>.</source>
          <target xml:space="preserve">To try the developer preview, visit <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Mobilize.NET's website</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">XAML and .NET, or HTML?</source>
          <target xml:space="preserve">XAML and .NET, or HTML?</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Windows Phone Silverlight has a XAML UI framework based on Silverlight 4.0, and you program against a version of the .NET Framework and a small subset of UWP APIs.</source>
          <target xml:space="preserve">Windows Phone Silverlight has a XAML UI framework based on Silverlight 4.0, and you program against a version of the .NET Framework and a small subset of UWP APIs.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Since you used Extensible Application Markup Language (XAML) in your Windows Phone Silverlight app, it's likely that XAML will be your choice for your Windows 10 version because most of your knowledge and experience will transfer, as will much of your source code and the software patterns you use.</source>
          <target xml:space="preserve">Since you used Extensible Application Markup Language (XAML) in your Windows Phone Silverlight app, it's likely that XAML will be your choice for your Windows 10 version because most of your knowledge and experience will transfer, as will much of your source code and the software patterns you use.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">Even your UI markup and design can port over readily.</source>
          <target xml:space="preserve">Even your UI markup and design can port over readily.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">You will find the managed APIs, the XAML markup, the UI framework, and the tooling all reassuringly familiar, and you can use C++, C#, or Visual Basic along with XAML in a UWP app.</source>
          <target xml:space="preserve">You will find the managed APIs, the XAML markup, the UI framework, and the tooling all reassuringly familiar, and you can use C++, C#, or Visual Basic along with XAML in a UWP app.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">You may be surprised at how relatively easy the process is, even if there is a challenge or two along the way.</source>
          <target xml:space="preserve">You may be surprised at how relatively easy the process is, even if there is a challenge or two along the way.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br229583)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Windows 10 supports much more of the .NET Framework than a Windows Phone Store app does.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Windows 10 supports much more of the .NET Framework than a Windows Phone Store app does.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">For example, Windows 10 has several System.ServiceModel.\* namespaces as well as System.Net, System.Net.NetworkInformation, and System.Net.Sockets.</source>
          <target xml:space="preserve">For example, Windows 10 has several System.ServiceModel.\* namespaces as well as System.Net, System.Net.NetworkInformation, and System.Net.Sockets.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">So, now is a great time to port your Windows Phone Silverlight and have your .NET code just compile and work on the new platform.</source>
          <target xml:space="preserve">So, now is a great time to port your Windows Phone Silverlight and have your .NET code just compile and work on the new platform.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wpsl-to-uwp-namespace-and-class-mappings.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Another great reason to recompile your existing .NET source code into a Windows 10 app is that you will benefit from .NET Native, which an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</source>
          <target xml:space="preserve">Another great reason to recompile your existing .NET source code into a Windows 10 app is that you will benefit from .NET Native, which an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</source>
          <target xml:space="preserve">.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">This porting guide will focus on XAML but, alternatively, you can build a functionally equivalent app—calling many of the same UWP APIs—using JavaScript, Cascading Style Sheets (CSS), and HTML5 along with the Windows Library for JavaScript.</source>
          <target xml:space="preserve">This porting guide will focus on XAML but, alternatively, you can build a functionally equivalent app—calling many of the same UWP APIs—using JavaScript, Cascading Style Sheets (CSS), and HTML5 along with the Windows Library for JavaScript.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">Although the Windows Runtime UI frameworks of XAML and HTML are different from one another, whichever one you choose will work universally across the full range of Windows devices.</source>
          <target xml:space="preserve">Although the Windows Runtime UI frameworks of XAML and HTML are different from one another, whichever one you choose will work universally across the full range of Windows devices.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Targeting the universal or the mobile device family</source>
          <target xml:space="preserve">Targeting the universal or the mobile device family</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">One option you have is to port your app to an app that targets the universal device family.</source>
          <target xml:space="preserve">One option you have is to port your app to an app that targets the universal device family.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">In this case, the app can be installed onto the widest range of devices.</source>
          <target xml:space="preserve">In this case, the app can be installed onto the widest range of devices.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">If your app calls APIs that are implemented only in the mobile device family, then you can guard those calls with adaptive code.</source>
          <target xml:space="preserve">If your app calls APIs that are implemented only in the mobile device family, then you can guard those calls with adaptive code.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Alternatively, you can choose to port your app to an app that targets the mobile device family in which case you don't need to write adaptive code.</source>
          <target xml:space="preserve">Alternatively, you can choose to port your app to an app that targets the mobile device family in which case you don't need to write adaptive code.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">Adapting your app to multiple form factors</source>
          <target xml:space="preserve">Adapting your app to multiple form factors</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">The option you choose from the previous section will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</source>
          <target xml:space="preserve">The option you choose from the previous section will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Even limiting your app to the mobile device family still leaves you with a wide range of screen sizes to support.</source>
          <target xml:space="preserve">Even limiting your app to the mobile device family still leaves you with a wide range of screen sizes to support.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">So, since your app will be running on form factors that it didn't formerly support, test your UI on those form factors and make any change necessary so that your UI adapts appropriately on each.</source>
          <target xml:space="preserve">So, since your app will be running on form factors that it didn't formerly support, test your UI on those form factors and make any change necessary so that your UI adapts appropriately on each.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wpsl-to-uwp-case-study-bookstore2.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can think of this is a post-porting task, or a porting stretch-goal, and there is an example of it in practice in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> case study.</source>
          <target xml:space="preserve">You can think of this is a post-porting task, or a porting stretch-goal, and there is an example of it in practice in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> case study.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">Approaching porting layer-by-layer</source>
          <target xml:space="preserve">Approaching porting layer-by-layer</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">View</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">View</pc>.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">The view (together with the view model) makes up your app's UI.</source>
          <target xml:space="preserve">The view (together with the view model) makes up your app's UI.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Ideally, the view consists of markup bound to observable properties of a view model.</source>
          <target xml:space="preserve">Ideally, the view consists of markup bound to observable properties of a view model.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</source>
          <target xml:space="preserve">Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">In either case, much of your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</source>
          <target xml:space="preserve">In either case, much of your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">View models and data models</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">View models and data models</pc>.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</source>
          <target xml:space="preserve">Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">View model code makes use of types in the UI framework namespaces.</source>
          <target xml:space="preserve">View model code makes use of types in the UI framework namespaces.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">Both view model and data model code also use non-visual operating system and .NET APIs (including APIs for data-access).</source>
          <target xml:space="preserve">Both view model and data model code also use non-visual operating system and .NET APIs (including APIs for data-access).</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211369)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">And the vast majority of those are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available to a UWP app</pc>, so you can expect to be able to port much of this code without change.</source>
          <target xml:space="preserve">And the vast majority of those are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available to a UWP app</pc>, so you can expect to be able to port much of this code without change.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Remember, though: a view model is a model, or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">abstraction</pc>, of a view.</source>
          <target xml:space="preserve">Remember, though: a view model is a model, or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">abstraction</pc>, of a view.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">A view model provides the state and behavior of UI, while the view itself provides the visuals.</source>
          <target xml:space="preserve">A view model provides the state and behavior of UI, while the view itself provides the visuals.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">For this reason, any UI you adapt to the different form factors that the UWP allows you to run on will likely need corresponding view model changes.</source>
          <target xml:space="preserve">For this reason, any UI you adapt to the different form factors that the UWP allows you to run on will likely need corresponding view model changes.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">For networking and calling cloud services, you typically have the option between using .NET or UWP APIs.</source>
          <target xml:space="preserve">For networking and calling cloud services, you typically have the option between using .NET or UWP APIs.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wpsl-to-uwp-business-and-data.md#networking-cloud)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For the factors involved in making that decision, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services, networking, and databases</pc>.</source>
          <target xml:space="preserve">For the factors involved in making that decision, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services, networking, and databases</pc>.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services</pc>.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</source>
          <target xml:space="preserve">It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">The part of the app running on the client device connects to those.</source>
          <target xml:space="preserve">The part of the app running on the client device connects to those.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">This is the part of a distributed app most likely to remain unchanged when porting the client part.</source>
          <target xml:space="preserve">This is the part of a distributed app most likely to remain unchanged when porting the client part.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://azure.microsoft.com/services/mobile-services/)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you don't already have one, a good cloud services option for your UWP app is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Azure Mobile Services</pc>, which provides powerful back-end components that Universal Windows apps can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</source>
          <target xml:space="preserve">If you don't already have one, a good cloud services option for your UWP app is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Azure Mobile Services</pc>, which provides powerful back-end components that Universal Windows apps can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</source>
          <target xml:space="preserve">Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">Factoring your UWP app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</source>
          <target xml:space="preserve">Factoring your UWP app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://msdn.microsoft.com/magazine/dd419663.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can make functionality more reusable—and avoid some issues of UI API differences between platforms—by following the Model-View-ViewModel (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MVVM</pc>) pattern.</source>
          <target xml:space="preserve">You can make functionality more reusable—and avoid some issues of UI API differences between platforms—by following the Model-View-ViewModel (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MVVM</pc>) pattern.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">This pattern keeps the data, business, and UI parts of your app separate from one another.</source>
          <target xml:space="preserve">This pattern keeps the data, business, and UI parts of your app separate from one another.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</source>
          <target xml:space="preserve">Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</source>
          <target xml:space="preserve">With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</source>
          <target xml:space="preserve">It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">One or two exceptions to the rule</source>
          <target xml:space="preserve">One or two exceptions to the rule</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wpsl-to-uwp-namespace-and-class-mappings.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">As you read this porting guide, you can refer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</source>
          <target xml:space="preserve">As you read this porting guide, you can refer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">Fairly straightforward mapping is the general rule, and the namespace and class mappings table describes any exceptions.</source>
          <target xml:space="preserve">Fairly straightforward mapping is the general rule, and the namespace and class mappings table describes any exceptions.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">At the feature level, the good news is that there's very little that's not supported in the UWP.</source>
          <target xml:space="preserve">At the feature level, the good news is that there's very little that's not supported in the UWP.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">Most of your skill set and source code translates very well over to UWP apps, as you'll read in the rest of this porting guide.</source>
          <target xml:space="preserve">Most of your skill set and source code translates very well over to UWP apps, as you'll read in the rest of this porting guide.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">But, here are the few Windows Phone Silverlight features that you may have used for which there is no UWP equivalent.</source>
          <target xml:space="preserve">But, here are the few Windows Phone Silverlight features that you may have used for which there is no UWP equivalent.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Feature for which there is no UWP equivalent</source>
          <target xml:space="preserve">Feature for which there is no UWP equivalent</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Windows Phone Silverlight documentation for the feature</source>
          <target xml:space="preserve">Windows Phone Silverlight documentation for the feature</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">Microsoft XNA.</source>
          <target xml:space="preserve">Microsoft XNA.</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In general, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft DirectX</pc> using C++ is the replacement.</source>
          <target xml:space="preserve">In general, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft DirectX</pc> using C++ is the replacement.</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh452744)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh825871)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Developing games</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DirectX and XAML interop</pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Developing games</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DirectX and XAML interop</pc>.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">XNA Framework Class Library</source>
          <target xml:space="preserve">XNA Framework Class Library</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">Lens apps</source>
          <target xml:space="preserve">Lens apps</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">Lenses for Windows Phone 8</source>
          <target xml:space="preserve">Lenses for Windows Phone 8</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">&amp;nbsp;</source>
          <target xml:space="preserve">&amp;nbsp;</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">Topic</source>
          <target xml:space="preserve">Topic</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">Namespace and class mappings</source>
          <target xml:space="preserve">Namespace and class mappings</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">This topic provides a comprehensive mapping of Windows Phone Silverlight APIs to their UWP equivalents.</source>
          <target xml:space="preserve">This topic provides a comprehensive mapping of Windows Phone Silverlight APIs to their UWP equivalents.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source xml:space="preserve">Porting the project</source>
          <target xml:space="preserve">Porting the project</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</source>
          <target xml:space="preserve">You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">Troubleshooting</source>
          <target xml:space="preserve">Troubleshooting</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</source>
          <target xml:space="preserve">We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</source>
          <target xml:space="preserve">To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</source>
          <target xml:space="preserve">The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">You can always refer back to the table as you progress through the later topics.</source>
          <target xml:space="preserve">You can always refer back to the table as you progress through the later topics.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">Porting XAML and UI</source>
          <target xml:space="preserve">Porting XAML and UI</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source xml:space="preserve">The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to UWP apps.</source>
          <target xml:space="preserve">The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to UWP apps.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</source>
          <target xml:space="preserve">You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">Porting for I/O, device, and app model</source>
          <target xml:space="preserve">Porting for I/O, device, and app model</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">Code that integrates with the device itself and its sensors involves input from, and output to, the user.</source>
          <target xml:space="preserve">Code that integrates with the device itself and its sensors involves input from, and output to, the user.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">It can also involve processing data.</source>
          <target xml:space="preserve">It can also involve processing data.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">But, this code is not generally thought of as either the UI layer or the data layer.</source>
          <target xml:space="preserve">But, this code is not generally thought of as either the UI layer or the data layer.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</source>
          <target xml:space="preserve">This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">Porting business and data layers</source>
          <target xml:space="preserve">Porting business and data layers</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">Behind your UI are your business and data layers.</source>
          <target xml:space="preserve">Behind your UI are your business and data layers.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">The code in these layers calls operating system and .NET Framework APIs (for example, background processing, location, the camera, the file system, network, and other data access).</source>
          <target xml:space="preserve">The code in these layers calls operating system and .NET Framework APIs (for example, background processing, location, the camera, the file system, network, and other data access).</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211369)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The vast majority of those are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available to a UWP app</pc>, so you can expect to be able to port much of this code without change.</source>
          <target xml:space="preserve">The vast majority of those are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available to a UWP app</pc>, so you can expect to be able to port much of this code without change.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">Porting for form factor and UX</source>
          <target xml:space="preserve">Porting for form factor and UX</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source xml:space="preserve">Windows apps share a common look-and-feel across PCs, mobile devices, and many other kinds of devices.</source>
          <target xml:space="preserve">Windows apps share a common look-and-feel across PCs, mobile devices, and many other kinds of devices.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">The user interface, input, and interaction patterns are very similar, and a user moving between devices will welcome the familiar experience.</source>
          <target xml:space="preserve">The user interface, input, and interaction patterns are very similar, and a user moving between devices will welcome the familiar experience.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source xml:space="preserve">Case study: Bookstore1</source>
          <target xml:space="preserve">Case study: Bookstore1</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source xml:space="preserve">This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 UWP app.</source>
          <target xml:space="preserve">This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 UWP app.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source xml:space="preserve">With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
          <target xml:space="preserve">With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source xml:space="preserve">Case study: Bookstore2</source>
          <target xml:space="preserve">Case study: Bookstore2</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wpsl-to-uwp-case-study-bookstore1.md)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>—begins with a Windows Phone Silverlight app that displays grouped data in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>.</source>
          <target xml:space="preserve">This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>—begins with a Windows Phone Silverlight app that displays grouped data in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>.</target>
        </segment>
      </unit>
      <unit id="220">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
          <target xml:space="preserve">In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source xml:space="preserve">Documentation</source>
          <target xml:space="preserve">Documentation</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source xml:space="preserve">What's new for developers in Windows 10</source>
          <target xml:space="preserve">What's new for developers in Windows 10</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source xml:space="preserve">Guide to Universal Windows Platform (UWP) apps</source>
          <target xml:space="preserve">Guide to Universal Windows Platform (UWP) apps</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source xml:space="preserve">Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</source>
          <target xml:space="preserve">Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</target>
        </segment>
      </unit>
      <unit id="226">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/dn655121.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's next for Windows Phone 8 developers</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's next for Windows Phone 8 developers</pc>
					</target>
        </segment>
      </unit>
      <unit id="227">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Magazine articles</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Magazine articles</pc>
					</target>
        </segment>
      </unit>
      <unit id="228">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkID=398541)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Magazine: Windows Phone 8.1: A Giant Leap Forward for Convergence</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Magazine: Windows Phone 8.1: A Giant Leap Forward for Convergence</pc>
					</target>
        </segment>
      </unit>
      <unit id="229">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Presentations</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Presentations</pc>
					</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source xml:space="preserve">The Story of Bringing Nokia Music from Windows Phone to Windows 8</source>
          <target xml:space="preserve">The Story of Bringing Nokia Music from Windows Phone to Windows 8</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>