<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">335d74c9cfda98c9d3b979870a36dbe6c37c06a4</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Description: Use the Windows.Globalization.DateTimeFormatting API with custom patterns to display dates and times in exactly the format you wish.</source>
          <target xml:space="preserve">Description: Use the Windows.Globalization.DateTimeFormatting API with custom patterns to display dates and times in exactly the format you wish.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Use patterns to format dates and times</source>
          <target xml:space="preserve">title: Use patterns to format dates and times</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 012028B3-9DA2-4E72-8C0E-3E06BEC3B3FE</source>
          <target xml:space="preserve">ms.assetid: 012028B3-9DA2-4E72-8C0E-3E06BEC3B3FE</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">label: Use patterns to format dates and times</source>
          <target xml:space="preserve">label: Use patterns to format dates and times</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">template: detail.hbs</source>
          <target xml:space="preserve">template: detail.hbs</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">Use patterns to format dates and times</source>
          <target xml:space="preserve">Use patterns to format dates and times</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Important APIs</source>
          <target xml:space="preserve">Important APIs</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Windows.Globalization.DateTimeFormatting</source>
          <target xml:space="preserve">Windows.Globalization.DateTimeFormatting</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">DateTimeFormatter</source>
          <target xml:space="preserve">DateTimeFormatter</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">DateTime</source>
          <target xml:space="preserve">DateTime</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206859)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Globalization.DateTimeFormatting</pc></pc> API with custom patterns to display dates and times in exactly the format you wish.</source>
          <target xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Globalization.DateTimeFormatting</pc></pc> API with custom patterns to display dates and times in exactly the format you wish.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Introduction</source>
          <target xml:space="preserve">Introduction</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206859)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Globalization.DateTimeFormatting</pc>
						</pc> provides various ways to properly format dates and times for languages and regions around the world.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Globalization.DateTimeFormatting</pc>
						</pc> provides various ways to properly format dates and times for languages and regions around the world.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">You can use standard formats for year, month, day, and so on, or you can use standard string templates, such as "longdate" or "month day".</source>
          <target xml:space="preserve">You can use standard formats for year, month, day, and so on, or you can use standard string templates, such as "longdate" or "month day".</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206576)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But when you want more control over the order and format of the constituents of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTime</pc></pc> string you wish to display, you can use a special syntax for the string template parameter, called a "pattern".</source>
          <target xml:space="preserve">But when you want more control over the order and format of the constituents of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTime</pc></pc> string you wish to display, you can use a special syntax for the string template parameter, called a "pattern".</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The pattern syntax allows you to obtain individual constituents of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DateTime</pc> object—just the month name, or just the year value, for example—in order to display them in whatever custom format you choose.</source>
          <target xml:space="preserve">The pattern syntax allows you to obtain individual constituents of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DateTime</pc> object—just the month name, or just the year value, for example—in order to display them in whatever custom format you choose.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Furthermore, the pattern can be localized to adapt to other languages and regions.</source>
          <target xml:space="preserve">Furthermore, the pattern can be localized to adapt to other languages and regions.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This is an overview of format patterns.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This is an overview of format patterns.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206828)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For a more complete discussion of format templates and format patterns see the Remarks section of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTimeFormatter</pc></pc> class.</source>
          <target xml:space="preserve">For a more complete discussion of format templates and format patterns see the Remarks section of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTimeFormatter</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">What you need to know</source>
          <target xml:space="preserve">What you need to know</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">It's important to note that when you use patterns, you are building a custom format that is not guaranteed to be valid across cultures.</source>
          <target xml:space="preserve">It's important to note that when you use patterns, you are building a custom format that is not guaranteed to be valid across cultures.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">For example, consider the "month day" template:</source>
          <target xml:space="preserve">For example, consider the "month day" template:</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">JavaScript</source>
          <target xml:space="preserve">JavaScript</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">This creates a formatter based on the language and region value of the current context.</source>
          <target xml:space="preserve">This creates a formatter based on the language and region value of the current context.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Therefore, it always displays the month and day together in an appropriate global format.</source>
          <target xml:space="preserve">Therefore, it always displays the month and day together in an appropriate global format.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">For example, it displays "January 1" for English (US), but "1 janvier" for French (France) and "1月1日" for Japanese.</source>
          <target xml:space="preserve">For example, it displays "January 1" for English (US), but "1 janvier" for French (France) and "1月1日" for Japanese.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">That is because the template is based on a culture-specific pattern string, which can be accessed via the pattern property:</source>
          <target xml:space="preserve">That is because the template is based on a culture-specific pattern string, which can be accessed via the pattern property:</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">JavaScript</source>
          <target xml:space="preserve">JavaScript</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">This yields different results depending on the language and region of the formatter.</source>
          <target xml:space="preserve">This yields different results depending on the language and region of the formatter.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">Note that different regions may use different constituents, in different orders, with or without additional characters and spacing:</source>
          <target xml:space="preserve">Note that different regions may use different constituents, in different orders, with or without additional characters and spacing:</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206828)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can use patterns to construct a custom <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTimeFormatter</pc></pc>, for instance this one based on the US English pattern:</source>
          <target xml:space="preserve">You can use patterns to construct a custom <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTimeFormatter</pc></pc>, for instance this one based on the US English pattern:</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">JavaScript</source>
          <target xml:space="preserve">JavaScript</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">Windows returns culture-specific values for the individual constituents inside the brackets {}.</source>
          <target xml:space="preserve">Windows returns culture-specific values for the individual constituents inside the brackets {}.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">But with the pattern syntax, the constituent order is invariant.</source>
          <target xml:space="preserve">But with the pattern syntax, the constituent order is invariant.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">You get precisely what you ask for, which may not be culturally appropriate:</source>
          <target xml:space="preserve">You get precisely what you ask for, which may not be culturally appropriate:</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">Furthermore, patterns are not guaranteed to remain consistent over time.</source>
          <target xml:space="preserve">Furthermore, patterns are not guaranteed to remain consistent over time.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">Countries or regions may change their calendar systems, which alters a format template.</source>
          <target xml:space="preserve">Countries or regions may change their calendar systems, which alters a format template.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Windows updates the output of the formatters to accommodate such changes.</source>
          <target xml:space="preserve">Windows updates the output of the formatters to accommodate such changes.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206576)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Therefore, you should only use the pattern syntax for formatting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTime</pc></pc>s when:</source>
          <target xml:space="preserve">Therefore, you should only use the pattern syntax for formatting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTime</pc></pc>s when:</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">You are not dependent on a particular output for a format.</source>
          <target xml:space="preserve">You are not dependent on a particular output for a format.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">You do not need the format to follow some culture-specific standard.</source>
          <target xml:space="preserve">You do not need the format to follow some culture-specific standard.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">You specifically intend the pattern to be invariant across cultures.</source>
          <target xml:space="preserve">You specifically intend the pattern to be invariant across cultures.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">You intend to localize the pattern.</source>
          <target xml:space="preserve">You intend to localize the pattern.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">To summarize the differences between the standard string templates and non-standard string patterns:</source>
          <target xml:space="preserve">To summarize the differences between the standard string templates and non-standard string patterns:</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">String templates, such as "month day":</source>
          <target xml:space="preserve">String templates, such as "month day":</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206576)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Abstracted representation of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTime</pc></pc> format that includes values for the month and the day, in some order.</source>
          <target xml:space="preserve">Abstracted representation of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DateTime</pc></pc> format that includes values for the month and the day, in some order.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">Guaranteed to return a valid standard format across all language-region values supported by Windows.</source>
          <target xml:space="preserve">Guaranteed to return a valid standard format across all language-region values supported by Windows.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">Guaranteed to give you a culturally-appropriate formatted string for the given language-region.</source>
          <target xml:space="preserve">Guaranteed to give you a culturally-appropriate formatted string for the given language-region.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Not all combinations of constituents are valid.</source>
          <target xml:space="preserve">Not all combinations of constituents are valid.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">For example, there is no string template for "dayofweek day".</source>
          <target xml:space="preserve">For example, there is no string template for "dayofweek day".</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">String patterns, such as "{month.full} {day.integer}":</source>
          <target xml:space="preserve">String patterns, such as "{month.full} {day.integer}":</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">Explicitly ordered string that expresses the full month name, followed by a space, followed by the day integer, in that order.</source>
          <target xml:space="preserve">Explicitly ordered string that expresses the full month name, followed by a space, followed by the day integer, in that order.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">May not correspond to a valid standard format for any language-region pair.</source>
          <target xml:space="preserve">May not correspond to a valid standard format for any language-region pair.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">Not guaranteed to be culturally appropriate.</source>
          <target xml:space="preserve">Not guaranteed to be culturally appropriate.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">Any combination of constituents may be specified, in any order.</source>
          <target xml:space="preserve">Any combination of constituents may be specified, in any order.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">Tasks</source>
          <target xml:space="preserve">Tasks</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">Suppose you wish to display the current month and day together with the current time, in a specific format.</source>
          <target xml:space="preserve">Suppose you wish to display the current month and day together with the current time, in a specific format.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">For example, you would like US English users to see something like this:</source>
          <target xml:space="preserve">For example, you would like US English users to see something like this:</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">The date part corresponds to the "month day" template, and the time part corresponds to the "hour minute" template.</source>
          <target xml:space="preserve">The date part corresponds to the "month day" template, and the time part corresponds to the "hour minute" template.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">So, you can create a custom format that concatenates the patterns which make up those templates.</source>
          <target xml:space="preserve">So, you can create a custom format that concatenates the patterns which make up those templates.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">First, get the formatters for the relevant date and time templates, and then get the patterns of those templates:</source>
          <target xml:space="preserve">First, get the formatters for the relevant date and time templates, and then get the patterns of those templates:</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">JavaScript</source>
          <target xml:space="preserve">JavaScript</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">You should store your custom format as a localizable resource string.</source>
          <target xml:space="preserve">You should store your custom format as a localizable resource string.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">For example, the string for English (United States) would be "{date} | {time}".</source>
          <target xml:space="preserve">For example, the string for English (United States) would be "{date} | {time}".</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">Localizers can adjust this string as needed.</source>
          <target xml:space="preserve">Localizers can adjust this string as needed.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">For example, they can change the order of the constituents, if it seems more natural in some language or region to have the time precede the date.</source>
          <target xml:space="preserve">For example, they can change the order of the constituents, if it seems more natural in some language or region to have the time precede the date.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">Or, they can replace "|" with some other separator character.</source>
          <target xml:space="preserve">Or, they can replace "|" with some other separator character.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">At runtime you replace the {date} and {time} portions of the string with the relevant pattern:</source>
          <target xml:space="preserve">At runtime you replace the {date} and {time} portions of the string with the relevant pattern:</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">JavaScript</source>
          <target xml:space="preserve">JavaScript</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">Then you can construct a new formatter based on the custom pattern:</source>
          <target xml:space="preserve">Then you can construct a new formatter based on the custom pattern:</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">JavaScript</source>
          <target xml:space="preserve">JavaScript</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Date and time formatting sample</source>
          <target xml:space="preserve">Date and time formatting sample</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">Windows.Globalization.DateTimeFormatting</source>
          <target xml:space="preserve">Windows.Globalization.DateTimeFormatting</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">Windows.Foundation.DateTime</source>
          <target xml:space="preserve">Windows.Foundation.DateTime</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>