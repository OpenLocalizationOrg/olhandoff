<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">c9abe8937b77fc9bd9d9c3b426c7adec7816fb75</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 386faf59-8f22-2e7c-abc9-d04216e78894</source>
          <target xml:space="preserve">ms.assetid: 386faf59-8f22-2e7c-abc9-d04216e78894</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Composition animations</source>
          <target xml:space="preserve">title: Composition animations</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: Many composition object and effect properties can be animated using key frame and expression animations allowing properties of a UI element to change over time or based on a calculation.</source>
          <target xml:space="preserve">description: Many composition object and effect properties can be animated using key frame and expression animations allowing properties of a UI element to change over time or based on a calculation.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Composition animations</source>
          <target xml:space="preserve">Composition animations</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Many composition object and effect properties can be animated using key frame and expression animations allowing properties of a UI element to change over time or based on a calculation.</source>
          <target xml:space="preserve">Many composition object and effect properties can be animated using key frame and expression animations allowing properties of a UI element to change over time or based on a calculation.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn706830)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Dn706817)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There are two types of animations, keyframe animations, represented by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeyFrameAnimation</pc></pc> class, and expression animations represented by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ExpressionAnimation</pc></pc> class.</source>
          <target xml:space="preserve">There are two types of animations, keyframe animations, represented by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeyFrameAnimation</pc></pc> class, and expression animations represented by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ExpressionAnimation</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Animatable Properties</source>
          <target xml:space="preserve">Animatable Properties</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">KeyFrame Animations</source>
          <target xml:space="preserve">KeyFrame Animations</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Creating your animation and KeyFrames</source>
          <target xml:space="preserve">Creating your animation and KeyFrames</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">KeyFrame Properties</source>
          <target xml:space="preserve">KeyFrame Properties</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Easing Functions</source>
          <target xml:space="preserve">Easing Functions</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Starting and Stopping KeyFrame Animations</source>
          <target xml:space="preserve">Starting and Stopping KeyFrame Animations</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Animation Completion Events</source>
          <target xml:space="preserve">Animation Completion Events</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Expression Animations</source>
          <target xml:space="preserve">Expression Animations</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Creating your Expression</source>
          <target xml:space="preserve">Creating your Expression</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Property Sets</source>
          <target xml:space="preserve">Property Sets</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Expression KeyFrames</source>
          <target xml:space="preserve">Expression KeyFrames</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">Animatable Properties</source>
          <target xml:space="preserve">Animatable Properties</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">The following properties are animatable by associating them with a KeyFrame or Expression Animation:</source>
          <target xml:space="preserve">The following properties are animatable by associating them with a KeyFrame or Expression Animation:</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">CompositionColorBrush.Color</source>
          <target xml:space="preserve">CompositionColorBrush.Color</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">InsetClip.BottomInset</source>
          <target xml:space="preserve">InsetClip.BottomInset</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">InsetClip.LeftInset</source>
          <target xml:space="preserve">InsetClip.LeftInset</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">InsetClip.RightInset</source>
          <target xml:space="preserve">InsetClip.RightInset</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">InsetClip.TopInset</source>
          <target xml:space="preserve">InsetClip.TopInset</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Visual.AnchorPoint</source>
          <target xml:space="preserve">Visual.AnchorPoint</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Visual.CenterPoint</source>
          <target xml:space="preserve">Visual.CenterPoint</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">Visual.Offset</source>
          <target xml:space="preserve">Visual.Offset</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">Visual.Opacity</source>
          <target xml:space="preserve">Visual.Opacity</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Visual.Orientation</source>
          <target xml:space="preserve">Visual.Orientation</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Visual.RotationAngle</source>
          <target xml:space="preserve">Visual.RotationAngle</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">Visual.RotationAxis</source>
          <target xml:space="preserve">Visual.RotationAxis</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">Visual.Size</source>
          <target xml:space="preserve">Visual.Size</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">Visual.TransformMatrix</source>
          <target xml:space="preserve">Visual.TransformMatrix</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">CompositionPropertySet</source>
          <target xml:space="preserve">CompositionPropertySet</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">KeyFrame Animations</source>
          <target xml:space="preserve">KeyFrame Animations</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">KeyFrame Animations are time-based animations that use one or more key frames to specify how the animated value should change over time.</source>
          <target xml:space="preserve">KeyFrame Animations are time-based animations that use one or more key frames to specify how the animated value should change over time.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">The frames represent markers, allowing you to define what the animated value should be at a specific time.</source>
          <target xml:space="preserve">The frames represent markers, allowing you to define what the animated value should be at a specific time.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Creating your animation and KeyFrames</source>
          <target xml:space="preserve">Creating your animation and KeyFrames</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">To construct a KeyFrame Animation, use one of the constructor methods of the Compositor class that correlates to the structure type of the property you wish to animate.</source>
          <target xml:space="preserve">To construct a KeyFrame Animation, use one of the constructor methods of the Compositor class that correlates to the structure type of the property you wish to animate.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">CreateColorKeyFrameAnimation</source>
          <target xml:space="preserve">CreateColorKeyFrameAnimation</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">CreateQuaternionKeyFrameAnimation</source>
          <target xml:space="preserve">CreateQuaternionKeyFrameAnimation</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">CreateScalarKeyFrameAnimation</source>
          <target xml:space="preserve">CreateScalarKeyFrameAnimation</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">CreateVector2KeyFrameAnimation</source>
          <target xml:space="preserve">CreateVector2KeyFrameAnimation</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">CreateVector3KeyFrameAnimation</source>
          <target xml:space="preserve">CreateVector3KeyFrameAnimation</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">CreateVector4KeyFrameAnimation</source>
          <target xml:space="preserve">CreateVector4KeyFrameAnimation</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">For example, the following snippet creates a Vector3 keyframe animation:</source>
          <target xml:space="preserve">For example, the following snippet creates a Vector3 keyframe animation:</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Each KeyFrame is constructed by calling the InsertKeyFrame method of a KeyFrameAnimation and specifying two components and optionally a third component:</source>
          <target xml:space="preserve">Each KeyFrame is constructed by calling the InsertKeyFrame method of a KeyFrameAnimation and specifying two components and optionally a third component:</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Time: normalized progress state of the KeyFrame between 0.0 – 1.0</source>
          <target xml:space="preserve">Time: normalized progress state of the KeyFrame between 0.0 – 1.0</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">Value: specific value of the animating value at the time state</source>
          <target xml:space="preserve">Value: specific value of the animating value at the time state</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">(Optional) Easing function: function to describe interpolation between previous and current KeyFrame (discussed later on)</source>
          <target xml:space="preserve">(Optional) Easing function: function to describe interpolation between previous and current KeyFrame (discussed later on)</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">For example, the following snippet inserts a keyframe in a Vector3KeyFrameAnimation that will triggered half way through the animation:</source>
          <target xml:space="preserve">For example, the following snippet inserts a keyframe in a Vector3KeyFrameAnimation that will triggered half way through the animation:</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">KeyFrame Properties</source>
          <target xml:space="preserve">KeyFrame Properties</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">Once you've defined your KeyFrame Animation and the individual KeyFrames, you are able to define multiple properties of your animation:</source>
          <target xml:space="preserve">Once you've defined your KeyFrame Animation and the individual KeyFrames, you are able to define multiple properties of your animation:</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">DelayTime – time before an animation starts after StartAnimation() is called</source>
          <target xml:space="preserve">DelayTime – time before an animation starts after StartAnimation() is called</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">Duration – duration of the animation</source>
          <target xml:space="preserve">Duration – duration of the animation</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">IterationBehavior – count or infinite repeat behavior for an animation</source>
          <target xml:space="preserve">IterationBehavior – count or infinite repeat behavior for an animation</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">IterationCount – number of finite times a KeyFrame Animation will repeat</source>
          <target xml:space="preserve">IterationCount – number of finite times a KeyFrame Animation will repeat</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">KeyFrame Count – number of KeyFrames in a particular KeyFrameAnimation</source>
          <target xml:space="preserve">KeyFrame Count – number of KeyFrames in a particular KeyFrameAnimation</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">StopBehavior – specifies the behavior of an animating property value when StopAnimation is called.</source>
          <target xml:space="preserve">StopBehavior – specifies the behavior of an animating property value when StopAnimation is called.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">For example, the following snippet sets the duration of the animation to five seconds:</source>
          <target xml:space="preserve">For example, the following snippet sets the duration of the animation to five seconds:</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">Easing Functions</source>
          <target xml:space="preserve">Easing Functions</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">A key frame easing function, a CompositionEasingFunction, indicates how intermediate values progress from the previous key frame value to the current key frame value.</source>
          <target xml:space="preserve">A key frame easing function, a CompositionEasingFunction, indicates how intermediate values progress from the previous key frame value to the current key frame value.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">If you do not provide an easing function for the KeyFrame, a default curve will be used.</source>
          <target xml:space="preserve">If you do not provide an easing function for the KeyFrame, a default curve will be used.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">There are two types of easing functions supported:</source>
          <target xml:space="preserve">There are two types of easing functions supported:</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn706839)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Linear (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LinearEasingFunction</pc></pc>)</source>
          <target xml:space="preserve">Linear (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LinearEasingFunction</pc></pc>)</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn706812)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Cubic Bezier (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicBezierEasingFunction</pc></pc>)</source>
          <target xml:space="preserve">Cubic Bezier (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicBezierEasingFunction</pc></pc>)</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn706801)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Dn706791)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/Dn706761)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create an easing function, use either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateLinearEasingFunction</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateCubicBezierEasingFunction</pc></pc> method of the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Compositor</pc></pc> class:</source>
          <target xml:space="preserve">To create an easing function, use either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateLinearEasingFunction</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateCubicBezierEasingFunction</pc></pc> method of the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Compositor</pc></pc> class:</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">Note: A useful tool for generating the points for your Cubic Bezier can be found here.</source>
          <target xml:space="preserve">Note: A useful tool for generating the points for your Cubic Bezier can be found here.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">To add your easing function into your KeyFrame, simply add in the third parameter to the KeyFrame when inserting it into the Animation:</source>
          <target xml:space="preserve">To add your easing function into your KeyFrame, simply add in the third parameter to the KeyFrame when inserting it into the Animation:</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">Starting and Stopping KeyFrame Animations</source>
          <target xml:space="preserve">Starting and Stopping KeyFrame Animations</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">After you have defined your animation, KeyFrames and properties, you are ready to connect the animation to the property you want to animate.</source>
          <target xml:space="preserve">After you have defined your animation, KeyFrames and properties, you are ready to connect the animation to the property you want to animate.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt590840)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Dn706858)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You connect your animation to the property you plan to animate by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartAnimation</pc></pc> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Visual</pc></pc> object the property belongs to.</source>
          <target xml:space="preserve">You connect your animation to the property you plan to animate by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartAnimation</pc></pc> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Visual</pc></pc> object the property belongs to.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">The general syntax and an example is as follows:</source>
          <target xml:space="preserve">The general syntax and an example is as follows:</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">After starting your animation, you also have the ability to stop and disconnect it as well.</source>
          <target xml:space="preserve">After starting your animation, you also have the ability to stop and disconnect it as well.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt590841)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This is done by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StopAnimation</pc></pc> method and specifying the property you want to stop animating.</source>
          <target xml:space="preserve">This is done by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StopAnimation</pc></pc> method and specifying the property you want to stop animating.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">For example:</source>
          <target xml:space="preserve">For example:</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">Animation Completion Events</source>
          <target xml:space="preserve">Animation Completion Events</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">KeyFrame animations have a defined end, unlike Expression Animations, which are conditional.</source>
          <target xml:space="preserve">KeyFrame animations have a defined end, unlike Expression Animations, which are conditional.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Developers can determine when groups or a single KeyFrame animation completes by using batches.</source>
          <target xml:space="preserve">Developers can determine when groups or a single KeyFrame animation completes by using batches.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">Batches can be created or retrieved, depending on the batch object type, and are used to aggregate the end state of animations.</source>
          <target xml:space="preserve">Batches can be created or retrieved, depending on the batch object type, and are used to aggregate the end state of animations.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">Scoped batches are created while Commit batches are retrieved, the use of these different batches are described later.</source>
          <target xml:space="preserve">Scoped batches are created while Commit batches are retrieved, the use of these different batches are described later.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">A batch completion event fires when all animations within the batch have completed.</source>
          <target xml:space="preserve">A batch completion event fires when all animations within the batch have completed.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">The time it takes for a batch's completion event to fire depends on the longest or most delayed animation in the batch.</source>
          <target xml:space="preserve">The time it takes for a batch's completion event to fire depends on the longest or most delayed animation in the batch.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">Aggregating end states is useful when you need to know when groups of select animations complete in order to schedule other work.</source>
          <target xml:space="preserve">Aggregating end states is useful when you need to know when groups of select animations complete in order to schedule other work.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">Scoped batches</source>
          <target xml:space="preserve">Scoped batches</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt589425)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To aggregate a specific group or a single animation, you first need to create a Scoped batch by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateScopedBatch</pc></pc>.</source>
          <target xml:space="preserve">To aggregate a specific group or a single animation, you first need to create a Scoped batch by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateScopedBatch</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt590848)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">After creating a Scoped batch, all started animations aggregate until the batch is explicitly suspended or ended using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Suspend</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">End</pc></pc>.</source>
          <target xml:space="preserve">After creating a Scoped batch, all started animations aggregate until the batch is explicitly suspended or ended using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Suspend</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">End</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt590848)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Mt590847)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Suspend</pc></pc> stops aggregating animation end states until <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Resume</pc></pc> is called.</source>
          <target xml:space="preserve">Calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Suspend</pc></pc> stops aggregating animation end states until <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Resume</pc></pc> is called.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">This allows you to explicitly exclude content from a given batch.</source>
          <target xml:space="preserve">This allows you to explicitly exclude content from a given batch.</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In order to complete your batch you must call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">End</pc></pc>.</source>
          <target xml:space="preserve">In order to complete your batch you must call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">End</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source xml:space="preserve">Without an End call, the batch will remain open forever-collecting objects.</source>
          <target xml:space="preserve">Without an End call, the batch will remain open forever-collecting objects.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">If you want to know when a single animation ends, you need to create a Scoped batch, start the animation and end the batch.</source>
          <target xml:space="preserve">If you want to know when a single animation ends, you need to create a Scoped batch, start the animation and end the batch.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">For example:</source>
          <target xml:space="preserve">For example:</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">Commit batches</source>
          <target xml:space="preserve">Commit batches</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">A commit batch is a batch that is implicitly created during the commit cycle.</source>
          <target xml:space="preserve">A commit batch is a batch that is implicitly created during the commit cycle.</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt589430)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The current Commit batch can be retrieved by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetCommitBatch</pc></pc> at any time during the commit cycle.</source>
          <target xml:space="preserve">The current Commit batch can be retrieved by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetCommitBatch</pc></pc> at any time during the commit cycle.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">The commit cycle is defined as the time between updates from the compositor.</source>
          <target xml:space="preserve">The commit cycle is defined as the time between updates from the compositor.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">Updates are queued until the system is ready to process the changes and draw bits to the screen.</source>
          <target xml:space="preserve">Updates are queued until the system is ready to process the changes and draw bits to the screen.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source xml:space="preserve">Titles do not control when commits happen.</source>
          <target xml:space="preserve">Titles do not control when commits happen.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">The Commit batch will aggregate all objects within the commit cycle, those before and after GetCommitBatch was called.</source>
          <target xml:space="preserve">The Commit batch will aggregate all objects within the commit cycle, those before and after GetCommitBatch was called.</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There is only one Commit batch per commit cycle and you do not need to explicitly call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">End</pc></pc> on the commit batch.</source>
          <target xml:space="preserve">There is only one Commit batch per commit cycle and you do not need to explicitly call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">End</pc></pc> on the commit batch.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">Batch states</source>
          <target xml:space="preserve">Batch states</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To determine if a batch is open to aggregating animations you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsActive</pc> property.</source>
          <target xml:space="preserve">To determine if a batch is open to aggregating animations you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsActive</pc> property.</target>
        </segment>
      </unit>
      <unit id="206">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsEnded</pc> property return true, you cannot add an animation to that specific batch.</source>
          <target xml:space="preserve">If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsEnded</pc> property return true, you cannot add an animation to that specific batch.</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Scoped batches are “ended” when they have been explicitly ended by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">End</pc></pc> method.</source>
          <target xml:space="preserve">Scoped batches are “ended” when they have been explicitly ended by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">End</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">Commit batches are ended when the current commit cycle has ended.</source>
          <target xml:space="preserve">Commit batches are ended when the current commit cycle has ended.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">Expression Animations</source>
          <target xml:space="preserve">Expression Animations</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">Expression Animations are animations that use a mathematical expression to specify how the animated value should be calculated for each frame.</source>
          <target xml:space="preserve">Expression Animations are animations that use a mathematical expression to specify how the animated value should be calculated for each frame.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source xml:space="preserve">The expression language itself can reference properties from other composition objects.</source>
          <target xml:space="preserve">The expression language itself can reference properties from other composition objects.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">Unlike KeyFrame Animations, Expressions are not time-based and are processed each frame (if necessary).</source>
          <target xml:space="preserve">Unlike KeyFrame Animations, Expressions are not time-based and are processed each frame (if necessary).</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source xml:space="preserve">Expressions can be useful to describe more complex user experiences that can be processed by the Composition engine, for example sticky headers and parallax.</source>
          <target xml:space="preserve">Expressions can be useful to describe more complex user experiences that can be processed by the Composition engine, for example sticky headers and parallax.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">Creating your Expression</source>
          <target xml:space="preserve">Creating your Expression</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt187002)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create your expression, you call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateExpressionAnimation</pc></pc> on your Compositor object and specifying the expression you want to use:</source>
          <target xml:space="preserve">To create your expression, you call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateExpressionAnimation</pc></pc> on your Compositor object and specifying the expression you want to use:</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source xml:space="preserve">Operators, Precedence and Associativity</source>
          <target xml:space="preserve">Operators, Precedence and Associativity</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source xml:space="preserve">The Expression language supports the following operators and adheres to operator precedence and associativity as defined in the C# Language Specification:</source>
          <target xml:space="preserve">The Expression language supports the following operators and adheres to operator precedence and associativity as defined in the C# Language Specification:</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source xml:space="preserve">Unary (-)</source>
          <target xml:space="preserve">Unary (-)</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source xml:space="preserve">Multiplicative (\* /)</source>
          <target xml:space="preserve">Multiplicative (\* /)</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source xml:space="preserve">Additive (- +)</source>
          <target xml:space="preserve">Additive (- +)</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source xml:space="preserve">The Expression language also supports the concept of per-component math operations.</source>
          <target xml:space="preserve">The Expression language also supports the concept of per-component math operations.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source xml:space="preserve">These member-access (x.y) operators are only supported on “primitive” types (Vector and Matrices).</source>
          <target xml:space="preserve">These member-access (x.y) operators are only supported on “primitive” types (Vector and Matrices).</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source xml:space="preserve">For example:</source>
          <target xml:space="preserve">For example:</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source xml:space="preserve">Property Parameters</source>
          <target xml:space="preserve">Property Parameters</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source xml:space="preserve">One of the powerful components of the Expression language is being able use parameters as variables in the expression.</source>
          <target xml:space="preserve">One of the powerful components of the Expression language is being able use parameters as variables in the expression.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source xml:space="preserve">The expression string can contain parameters which are replaced with either a constant value or are references to another object's property value when calculated.</source>
          <target xml:space="preserve">The expression string can contain parameters which are replaced with either a constant value or are references to another object's property value when calculated.</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source xml:space="preserve">For example:</source>
          <target xml:space="preserve">For example:</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source xml:space="preserve">In this example ChildOffset and ParentOffset are parameters that represent the offset property of two visuals.</source>
          <target xml:space="preserve">In this example ChildOffset and ParentOffset are parameters that represent the offset property of two visuals.</target>
        </segment>
      </unit>
      <unit id="229">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Dn706708)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You define parameters using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set\*Parameter</pc> methods of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CompositionAnimation</pc></pc> class:</source>
          <target xml:space="preserve">You define parameters using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set\*Parameter</pc> methods of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CompositionAnimation</pc></pc> class:</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setvector2parameter.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setvector3parameter.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setvector4parameter)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create a vector parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetVector2Parameter</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SetVector3Parameter</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">SetVector4Parameter</pc></pc>.</source>
          <target xml:space="preserve">To create a vector parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetVector2Parameter</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SetVector3Parameter</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">SetVector4Parameter</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="231">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setmatrix3x2parameter.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setmatrix4x4parameter)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create a matrix parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetMatrix3x2Parameter</pc></pc>, or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SetMatrix4x4Parameter</pc></pc>.</source>
          <target xml:space="preserve">To create a matrix parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetMatrix3x2Parameter</pc></pc>, or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SetMatrix4x4Parameter</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="232">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setscalarparameter)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">to create a scalar parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetScalarParameter</pc></pc>.</source>
          <target xml:space="preserve">to create a scalar parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetScalarParameter</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="233">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setcolorparameter)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create a color parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetColorParameter</pc></pc>.</source>
          <target xml:space="preserve">To create a color parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetColorParameter</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="234">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setquaternionparameter)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create a quaternion parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetQuaternionParameter</pc></pc>.</source>
          <target xml:space="preserve">To create a quaternion parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetQuaternionParameter</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="235">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setreferenceparameter)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create a reference parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetReferenceParameter</pc></pc>.</source>
          <target xml:space="preserve">To create a reference parameter you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetReferenceParameter</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source xml:space="preserve">In the Expression String above, we would need to create two parameters to define the two Visuals:</source>
          <target xml:space="preserve">In the Expression String above, we would need to create two parameters to define the two Visuals:</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source xml:space="preserve">Expression Helper Functions</source>
          <target xml:space="preserve">Expression Helper Functions</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source xml:space="preserve">In addition to having access to operators and property parameters, you also have access to the full helper function library of the expression language.</source>
          <target xml:space="preserve">In addition to having access to operators and property parameters, you also have access to the full helper function library of the expression language.</target>
        </segment>
      </unit>
      <unit id="239">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn706817)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can find the full list of helper functions in the remarks section of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ExpressionAnimation</pc></pc> class, but here are a few:</source>
          <target xml:space="preserve">You can find the full list of helper functions in the remarks section of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ExpressionAnimation</pc></pc> class, but here are a few:</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source xml:space="preserve">Max (Scalar value1, Scalar value2)</source>
          <target xml:space="preserve">Max (Scalar value1, Scalar value2)</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source xml:space="preserve">Scale (Vector3 value, Scalar factor)</source>
          <target xml:space="preserve">Scale (Vector3 value, Scalar factor)</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source xml:space="preserve">Transform(Vector2 value, Matrix 3x2 matrix)</source>
          <target xml:space="preserve">Transform(Vector2 value, Matrix 3x2 matrix)</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source xml:space="preserve">Here’s a more complex expression string example that uses the Clamp helper function:</source>
          <target xml:space="preserve">Here’s a more complex expression string example that uses the Clamp helper function:</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source xml:space="preserve">Starting and stopping your Expression Animation</source>
          <target xml:space="preserve">Starting and stopping your Expression Animation</target>
        </segment>
      </unit>
      <unit id="245">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt590840)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Mt590841)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To start and stop your Expression Animations, you use the same functions (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartAnimation</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StopAnimation</pc></pc>) as you do with KeyFrame Animations.</source>
          <target xml:space="preserve">To start and stop your Expression Animations, you use the same functions (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartAnimation</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StopAnimation</pc></pc>) as you do with KeyFrame Animations.</target>
        </segment>
      </unit>
      <unit id="246">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note: Expression Animations will continue to run until they are stopped using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StopAnimation</pc> – unlike KeyFrame Animations, they do not have a finite duration.</source>
          <target xml:space="preserve">Note: Expression Animations will continue to run until they are stopped using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StopAnimation</pc> – unlike KeyFrame Animations, they do not have a finite duration.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source xml:space="preserve">Property Sets</source>
          <target xml:space="preserve">Property Sets</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source xml:space="preserve">In addition to being able to reference properties of other Composition objects, you also have the ability to create and store property values of your own that can be used across multiple animations.</source>
          <target xml:space="preserve">In addition to being able to reference properties of other Composition objects, you also have the ability to create and store property values of your own that can be used across multiple animations.</target>
        </segment>
      </unit>
      <unit id="249">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn706772)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Property sets are represented by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CompositionPropertySet</pc></pc> class.</source>
          <target xml:space="preserve">Property sets are represented by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CompositionPropertySet</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source xml:space="preserve">Property sets allow you to create a property with a value and reference it later in an expression or even hook it up as the target of a KeyFrame Animation.</source>
          <target xml:space="preserve">Property sets allow you to create a property with a value and reference it later in an expression or even hook it up as the target of a KeyFrame Animation.</target>
        </segment>
      </unit>
      <unit id="251">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn706802)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create a property set, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreatePropertySet</pc></pc> method of the Compositor class.</source>
          <target xml:space="preserve">To create a property set, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreatePropertySet</pc></pc> method of the Compositor class.</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source xml:space="preserve">For example:</source>
          <target xml:space="preserve">For example:</target>
        </segment>
      </unit>
      <unit id="253">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Dn706772)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Once you’ve created your property set, you can add a property and value to it using one of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Insert\*</pc> methods of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CompositionPropertySet</pc></pc>.</source>
          <target xml:space="preserve">Once you’ve created your property set, you can add a property and value to it using one of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Insert\*</pc> methods of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CompositionPropertySet</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source xml:space="preserve">For example:</source>
          <target xml:space="preserve">For example:</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source xml:space="preserve">After you've created your expression animation, you can reference properties from the property set in the expression string with the use of a reference parameter.</source>
          <target xml:space="preserve">After you've created your expression animation, you can reference properties from the property set in the expression string with the use of a reference parameter.</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source xml:space="preserve">For example:</source>
          <target xml:space="preserve">For example:</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source xml:space="preserve">Expression KeyFrames</source>
          <target xml:space="preserve">Expression KeyFrames</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source xml:space="preserve">Earlier in this document, we described how you create KeyFrame Animations and their respective KeyFrames.</source>
          <target xml:space="preserve">Earlier in this document, we described how you create KeyFrame Animations and their respective KeyFrames.</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source xml:space="preserve">In addition to making the traditional KeyFrame with a normalized time and value component, you are also able to define expression KeyFrames.</source>
          <target xml:space="preserve">In addition to making the traditional KeyFrame with a normalized time and value component, you are also able to define expression KeyFrames.</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source xml:space="preserve">Instead of defining an explicit value for a particular time in the KeyFrame, we are able to use the expression syntax to describe how the value should be calculated at this particular point in the KeyFrame timeline.</source>
          <target xml:space="preserve">Instead of defining an explicit value for a particular time in the KeyFrame, we are able to use the expression syntax to describe how the value should be calculated at this particular point in the KeyFrame timeline.</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source xml:space="preserve">You are able to mix and match expression KeyFrames with basic KeyFrames in your KeyFrame Animation.</source>
          <target xml:space="preserve">You are able to mix and match expression KeyFrames with basic KeyFrames in your KeyFrame Animation.</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source xml:space="preserve">Constructing Expression KeyFrames</source>
          <target xml:space="preserve">Constructing Expression KeyFrames</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source xml:space="preserve">Similar to traditional KeyFrames, expression KeyFrames are constructed by specifying 2 components:</source>
          <target xml:space="preserve">Similar to traditional KeyFrames, expression KeyFrames are constructed by specifying 2 components:</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source xml:space="preserve">Time: normalized time state of the KeyFrame between 0.0 – 1.0</source>
          <target xml:space="preserve">Time: normalized time state of the KeyFrame between 0.0 – 1.0</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source xml:space="preserve">Value: The expression string used to describe how the value should be calculated</source>
          <target xml:space="preserve">Value: The expression string used to describe how the value should be calculated</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source xml:space="preserve">For example, the following snippet uses a combination of both regular and expression KeyFrames:</source>
          <target xml:space="preserve">For example, the following snippet uses a combination of both regular and expression KeyFrames:</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source xml:space="preserve">Using current and starting values</source>
          <target xml:space="preserve">Using current and starting values</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source xml:space="preserve">In the expression language, it is possible to reference both the current and the starting value of an animation.</source>
          <target xml:space="preserve">In the expression language, it is possible to reference both the current and the starting value of an animation.</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source xml:space="preserve">These values are pre-fixed in the expression language with “this”:</source>
          <target xml:space="preserve">These values are pre-fixed in the expression language with “this”:</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source xml:space="preserve">this.CurrentValue</source>
          <target xml:space="preserve">this.CurrentValue</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source xml:space="preserve">this.StartingValue</source>
          <target xml:space="preserve">this.StartingValue</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source xml:space="preserve">An example of using these in an Expression KeyFrame:</source>
          <target xml:space="preserve">An example of using these in an Expression KeyFrame:</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source xml:space="preserve">Conditional Expressions</source>
          <target xml:space="preserve">Conditional Expressions</target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source xml:space="preserve">In addition to supporting basic mathematical expressions, you can also define a conditional expression using a ternary operator:</source>
          <target xml:space="preserve">In addition to supporting basic mathematical expressions, you can also define a conditional expression using a ternary operator:</target>
        </segment>
      </unit>
      <unit id="275">
        <segment state="initial">
          <source xml:space="preserve">Within the expressions themselves, the following conditional operators are supported in the condition statement:</source>
          <target xml:space="preserve">Within the expressions themselves, the following conditional operators are supported in the condition statement:</target>
        </segment>
      </unit>
      <unit id="276">
        <segment state="initial">
          <source xml:space="preserve">Equals (==)</source>
          <target xml:space="preserve">Equals (==)</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source xml:space="preserve">Not Equals (!=)</source>
          <target xml:space="preserve">Not Equals (!=)</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source xml:space="preserve">Less than (&lt;)</source>
          <target xml:space="preserve">Less than (&lt;)</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source xml:space="preserve">Less than or equal to (&lt;=)</source>
          <target xml:space="preserve">Less than or equal to (&lt;=)</target>
        </segment>
      </unit>
      <unit id="280">
        <segment state="initial">
          <source xml:space="preserve">Great than (&gt;)</source>
          <target xml:space="preserve">Great than (&gt;)</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source xml:space="preserve">Great than or equal to (&gt;=)</source>
          <target xml:space="preserve">Great than or equal to (&gt;=)</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source xml:space="preserve">Finally, the following conjunctions are supported as operators or functions in the condition statement:</source>
          <target xml:space="preserve">Finally, the following conjunctions are supported as operators or functions in the condition statement:</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source xml:space="preserve">Not: !</source>
          <target xml:space="preserve">Not: !</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source xml:space="preserve">/ Not(bool1)</source>
          <target xml:space="preserve">/ Not(bool1)</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source xml:space="preserve">And: &amp;&amp; / And(bool1, bool2)</source>
          <target xml:space="preserve">And: &amp;&amp; / And(bool1, bool2)</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source xml:space="preserve">Or: || / Or(bool1, bool2)</source>
          <target xml:space="preserve">Or: || / Or(bool1, bool2)</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source xml:space="preserve">The following snippet shows an example of using conditionals in an expression:</source>
          <target xml:space="preserve">The following snippet shows an example of using conditionals in an expression:</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>