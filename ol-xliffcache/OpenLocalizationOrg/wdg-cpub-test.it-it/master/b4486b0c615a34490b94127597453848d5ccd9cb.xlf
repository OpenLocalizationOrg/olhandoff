<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">b4486b0c615a34490b94127597453848d5ccd9cb</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 0C69521B-47E0-421F-857B-851B0E9605F2</source>
          <target xml:space="preserve">ms.assetid: 0C69521B-47E0-421F-857B-851B0E9605F2</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Bind hierarchical data and create a master/details view</source>
          <target xml:space="preserve">title: Bind hierarchical data and create a master/details view</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to CollectionViewSource instances that are bound together in a chain.</source>
          <target xml:space="preserve">description: You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to CollectionViewSource instances that are bound together in a chain.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Bind hierarchical data and create a master/details view</source>
          <target xml:space="preserve">Bind hierarchical data and create a master/details view</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?linkid=619991)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Also see the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Master/detail sample</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Also see the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Master/detail sample</pc>.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> instances that are bound together in a chain.</source>
          <target xml:space="preserve">You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> instances that are bound together in a chain.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In this topic we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} markup extension</pc> where possible, and the more flexible (but less performant) <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc> where necessary.</source>
          <target xml:space="preserve">In this topic we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} markup extension</pc> where possible, and the more flexible (but less performant) <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc> where necessary.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">One common structure for Universal Windows Platform (UWP) apps is to navigate to different details pages when a user makes a selection in a master list.</source>
          <target xml:space="preserve">One common structure for Universal Windows Platform (UWP) apps is to navigate to different details pages when a user makes a selection in a master list.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">This is useful when you want to provide a rich visual representation of each item at every level in a hierarchy.</source>
          <target xml:space="preserve">This is useful when you want to provide a rich visual representation of each item at every level in a hierarchy.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Another option is to display multiple levels of data on a single page.</source>
          <target xml:space="preserve">Another option is to display multiple levels of data on a single page.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">This is useful when you want to display a few simple lists that let the user quickly drill down to an item of interest.</source>
          <target xml:space="preserve">This is useful when you want to display a few simple lists that let the user quickly drill down to an item of interest.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">This topic describes how to implement this interaction.</source>
          <target xml:space="preserve">This topic describes how to implement this interaction.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> instances keep track of the current selection at each hierarchical level.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> instances keep track of the current selection at each hierarchical level.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">We'll create a view of a sports team hierarchy that is organized into lists for leagues, divisions, and teams, and includes a team details view.</source>
          <target xml:space="preserve">We'll create a view of a sports team hierarchy that is organized into lists for leagues, divisions, and teams, and includes a team details view.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">When you select an item from any list, the subsequent views update automatically.</source>
          <target xml:space="preserve">When you select an item from any list, the subsequent views update automatically.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">master/details view of a sports hierarchy</source>
          <target xml:space="preserve">master/details view of a sports hierarchy</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Prerequisites</source>
          <target xml:space="preserve">Prerequisites</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">This topic assumes that you know how to create a basic UWP app.</source>
          <target xml:space="preserve">This topic assumes that you know how to create a basic UWP app.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh974581)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For instructions on creating your first UWP app, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create your first UWP app using C# or Visual Basic</pc>.</source>
          <target xml:space="preserve">For instructions on creating your first UWP app, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create your first UWP app using C# or Visual Basic</pc>.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Create the project</source>
          <target xml:space="preserve">Create the project</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Application (Windows Universal)</pc> project.</source>
          <target xml:space="preserve">Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Application (Windows Universal)</pc> project.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">Name it "MasterDetailsBinding".</source>
          <target xml:space="preserve">Name it "MasterDetailsBinding".</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Create the data model</source>
          <target xml:space="preserve">Create the data model</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Add a new class to your project, name it ViewModel.cs, and add this code to it.</source>
          <target xml:space="preserve">Add a new class to your project, name it ViewModel.cs, and add this code to it.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">This will be your binding source class.</source>
          <target xml:space="preserve">This will be your binding source class.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">namespace MasterDetailsBinding</source>
          <target xml:space="preserve">namespace MasterDetailsBinding</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">public class Team</source>
          <target xml:space="preserve">public class Team</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">public string Name { get; set; }</source>
          <target xml:space="preserve">public string Name { get; set; }</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">public int Wins { get; set; }</source>
          <target xml:space="preserve">public int Wins { get; set; }</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">public int Losses { get; set; }</source>
          <target xml:space="preserve">public int Losses { get; set; }</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">}</source>
          <target xml:space="preserve">}</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">}<ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">}<ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">Create the view</source>
          <target xml:space="preserve">Create the view</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">Next, expose the binding source class from the class that represents your page of markup.</source>
          <target xml:space="preserve">Next, expose the binding source class from the class that represents your page of markup.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We do that by adding a property of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LeagueList</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage</pc>.</source>
          <target xml:space="preserve">We do that by adding a property of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LeagueList</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage</pc>.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Finally, replace the contents of the MainPage.xaml file with the following markup, which declares three <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> instances and binds them together in a chain.</source>
          <target xml:space="preserve">Finally, replace the contents of the MainPage.xaml file with the following markup, which declares three <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> instances and binds them together in a chain.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The subsequent controls can then bind to the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>, depending on its level in the hierarchy.</source>
          <target xml:space="preserve">The subsequent controls can then bind to the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>, depending on its level in the hierarchy.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">XAML</source>
          <target xml:space="preserve">XAML</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">&amp;lt;/Page&amp;gt;<ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">&amp;lt;/Page&amp;gt;<ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note that by binding directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.</source>
          <target xml:space="preserve">Note that by binding directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There's no need to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentItem</pc> property as the path for the binding, although you can do that if there's any ambiguity).</source>
          <target xml:space="preserve">There's no need to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentItem</pc> property as the path for the binding, although you can do that if there's any ambiguity).</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209365)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209365-content)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">`Teams`</data>
          <data id="id10">**</data>
          <data id="id11">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentControl</pc></pc> representing the team view has its <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Content</pc></pc> property bound to the <ph dataRef="id9" id="ph1" /><pc dataRefEnd="id11" dataRefStart="id10" id="p5">CollectionViewSource</pc>.</source>
          <target xml:space="preserve">For example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentControl</pc></pc> representing the team view has its <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Content</pc></pc> property bound to the <ph dataRef="id9" id="ph1" /><pc dataRefEnd="id11" dataRefStart="id10" id="p5">CollectionViewSource</pc>.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242348)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">`Team`</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">However, the controls in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataTemplate</pc></pc> bind to properties of the <ph dataRef="id5" id="ph1" /> class because the <pc dataRefEnd="id7" dataRefStart="id6" id="p3">CollectionViewSource</pc> automatically supplies the currently selected team from the teams list when necessary.</source>
          <target xml:space="preserve">However, the controls in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataTemplate</pc></pc> bind to properties of the <ph dataRef="id5" id="ph1" /> class because the <pc dataRefEnd="id7" dataRefStart="id6" id="p3">CollectionViewSource</pc> automatically supplies the currently selected team from the teams list when necessary.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>