<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">81a0a429daa82224e548eaa50393d6be266b23f0</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Description: Basic accessibility info is often categorized into name, role, and value.</source>
          <target xml:space="preserve">Description: Basic accessibility info is often categorized into name, role, and value.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">This topic describes code to help your app expose the basic information that assistive technologies need.</source>
          <target xml:space="preserve">This topic describes code to help your app expose the basic information that assistive technologies need.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">title: Expose basic accessibility information</source>
          <target xml:space="preserve">title: Expose basic accessibility information</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 9641C926-68C9-4842-8B55-C38C39A9E5C5</source>
          <target xml:space="preserve">ms.assetid: 9641C926-68C9-4842-8B55-C38C39A9E5C5</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">label: Expose basic accessibility information</source>
          <target xml:space="preserve">label: Expose basic accessibility information</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">template: detail.hbs</source>
          <target xml:space="preserve">template: detail.hbs</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Expose basic accessibility information</source>
          <target xml:space="preserve">Expose basic accessibility information</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Basic accessibility info is often categorized into name, role, and value.</source>
          <target xml:space="preserve">Basic accessibility info is often categorized into name, role, and value.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">This topic describes code to help your app expose the basic information that assistive technologies need.</source>
          <target xml:space="preserve">This topic describes code to help your app expose the basic information that assistive technologies need.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Accessible name</source>
          <target xml:space="preserve">Accessible name</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">An accessible name is a short, descriptive text string that a screen reader uses to announce a UI element.</source>
          <target xml:space="preserve">An accessible name is a short, descriptive text string that a screen reader uses to announce a UI element.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Set the accessible name for UI elements so that have a meaning that is important for understanding the content or interacting with the UI.</source>
          <target xml:space="preserve">Set the accessible name for UI elements so that have a meaning that is important for understanding the content or interacting with the UI.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Such elements typically include images, input fields, buttons, controls, and regions.</source>
          <target xml:space="preserve">Such elements typically include images, input fields, buttons, controls, and regions.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">This table describes how to define or obtain an accessible name for various types of elements in a XAML UI.</source>
          <target xml:space="preserve">This table describes how to define or obtain an accessible name for various types of elements in a XAML UI.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Element type</source>
          <target xml:space="preserve">Element type</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Static text</source>
          <target xml:space="preserve">Static text</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR227565)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RichTextBlock</pc></pc> elements, an accessible name is automatically determined from the visible (inner) text.</source>
          <target xml:space="preserve">For <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RichTextBlock</pc></pc> elements, an accessible name is automatically determined from the visible (inner) text.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">All of the text in that element is used as the name.</source>
          <target xml:space="preserve">All of the text in that element is used as the name.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#name-from-inner-text)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name from inner text</pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name from inner text</pc>.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Images</source>
          <target xml:space="preserve">Images</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242752)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The XAML <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image</pc></pc> element does not have a direct analog to the HTML <pc dataRefEnd="id6" dataRefStart="id5" id="p3">alt</pc> attribute of <pc dataRefEnd="id8" dataRefStart="id7" id="p4">img</pc> and similar elements.</source>
          <target xml:space="preserve">The XAML <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image</pc></pc> element does not have a direct analog to the HTML <pc dataRefEnd="id6" dataRefStart="id5" id="p3">alt</pc> attribute of <pc dataRefEnd="id8" dataRefStart="id7" id="p4">img</pc> and similar elements.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Either use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> to provide a name, or use the captioning technique.</source>
          <target xml:space="preserve">Either use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> to provide a name, or use the captioning technique.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#images)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Accessible names for images</pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Accessible names for images</pc>.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Form elements</source>
          <target xml:space="preserve">Form elements</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">The accessible name for a form element should be the same as the label that is displayed for that element.</source>
          <target xml:space="preserve">The accessible name for a form element should be the same as the label that is displayed for that element.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#labels)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Labels and LabeledBy</pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Labels and LabeledBy</pc>.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">Buttons and links</source>
          <target xml:space="preserve">Buttons and links</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#name-from-inner-text)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">By default, the accessible name of a button or link is based on the visible text, using the same rules as described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name from inner text</pc>.</source>
          <target xml:space="preserve">By default, the accessible name of a button or link is based on the visible text, using the same rules as described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name from inner text</pc>.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In cases where a button contains only an image, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> to provide a text-only equivalent of the button's intended action.</source>
          <target xml:space="preserve">In cases where a button contains only an image, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> to provide a text-only equivalent of the button's intended action.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">Most container elements such as panels do not promote their content as accessible name.</source>
          <target xml:space="preserve">Most container elements such as panels do not promote their content as accessible name.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">This is because it is the item content that should report a name and corresponding role, not its container.</source>
          <target xml:space="preserve">This is because it is the item content that should report a name and corresponding role, not its container.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">The container element might report that it is an element that has children in a Microsoft UI Automation representation, such that the assistive technology logic can traverse it.</source>
          <target xml:space="preserve">The container element might report that it is an element that has children in a Microsoft UI Automation representation, such that the assistive technology logic can traverse it.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">But users of assistive technologies don't generally need to know about the containers and thus most containers aren't named.</source>
          <target xml:space="preserve">But users of assistive technologies don't generally need to know about the containers and thus most containers aren't named.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Role and value</source>
          <target xml:space="preserve">Role and value</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">The controls and other UI elements that are part of the XAML vocabulary implement UI Automation support for reporting role and value as part of their definitions.</source>
          <target xml:space="preserve">The controls and other UI elements that are part of the XAML vocabulary implement UI Automation support for reporting role and value as part of their definitions.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209185)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can use UI Automation tools to examine the role and value information for the controls, or you can read the documentation for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationPeer</pc></pc> implementations of each control.</source>
          <target xml:space="preserve">You can use UI Automation tools to examine the role and value information for the controls, or you can read the documentation for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationPeer</pc></pc> implementations of each control.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209182)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The available roles in a UI Automation framework are defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationControlType</pc></pc> enumeration.</source>
          <target xml:space="preserve">The available roles in a UI Automation framework are defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationControlType</pc></pc> enumeration.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">UI Automation clients such as assistive technologies can obtain role information by calling methods that the UI Automation framework exposes by using the control's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutomationPeer</pc>.</source>
          <target xml:space="preserve">UI Automation clients such as assistive technologies can obtain role information by calling methods that the UI Automation framework exposes by using the control's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutomationPeer</pc>.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">Not all controls have a value.</source>
          <target xml:space="preserve">Not all controls have a value.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Controls that do have a value report this information to UI Automation through the peers and patterns that are supported by that control.</source>
          <target xml:space="preserve">Controls that do have a value report this information to UI Automation through the peers and patterns that are supported by that control.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc></pc> form element does have a value.</source>
          <target xml:space="preserve">For example, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc></pc> form element does have a value.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">An assistive technology can be a UI Automation client and can discover both that a value exists and what the value is.</source>
          <target xml:space="preserve">An assistive technology can be a UI Automation client and can discover both that a value exists and what the value is.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR242663)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR242550)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In this specific case the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBox</pc> supports the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IValueProvider</pc></pc> pattern through the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">TextBoxAutomationPeer</pc></pc> definitions.</source>
          <target xml:space="preserve">In this specific case the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBox</pc> supports the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IValueProvider</pc></pc> pattern through the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">TextBoxAutomationPeer</pc></pc> definitions.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For cases where you use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AutomationProperties.Name</pc></pc> or other techniques to supply the accessible name explicitly, do not include the same text as is used by the control role or type information in the accessible name.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For cases where you use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AutomationProperties.Name</pc></pc> or other techniques to supply the accessible name explicitly, do not include the same text as is used by the control role or type information in the accessible name.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">For example do not include strings such as "button" or "list" in the name.</source>
          <target xml:space="preserve">For example do not include strings such as "button" or "list" in the name.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The role and type information comes from a different UI Automation property (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">LocalizedControlType</pc>) that is supplied by the default control support for UI Automation.</source>
          <target xml:space="preserve">The role and type information comes from a different UI Automation property (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">LocalizedControlType</pc>) that is supplied by the default control support for UI Automation.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Many assistive technologies append the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LocalizedControlType</pc> to the accessible name, so duplicating the role in the accessible name can result in unnecessarily repeated words.</source>
          <target xml:space="preserve">Many assistive technologies append the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LocalizedControlType</pc> to the accessible name, so duplicating the role in the accessible name can result in unnecessarily repeated words.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, if you give a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> control an accessible name of "button" or include "button" as the last part of the name, this might be read by screen readers as "button button".</source>
          <target xml:space="preserve">For example, if you give a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> control an accessible name of "button" or include "button" as the last part of the name, this might be read by screen readers as "button button".</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">You should test this aspect of your accessibility info using Narrator.</source>
          <target xml:space="preserve">You should test this aspect of your accessibility info using Narrator.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">Influencing the UI Automation tree views</source>
          <target xml:space="preserve">Influencing the UI Automation tree views</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">The UI Automation framework has a concept of tree views, where UI Automation clients can retrieve the relationships between elements in a UI using three possible views: raw, control, and content.</source>
          <target xml:space="preserve">The UI Automation framework has a concept of tree views, where UI Automation clients can retrieve the relationships between elements in a UI using three possible views: raw, control, and content.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">The control view is the view that's often used by UI Automation clients because it provides a good representation and organization of the elements in a UI that are interactive.</source>
          <target xml:space="preserve">The control view is the view that's often used by UI Automation clients because it provides a good representation and organization of the elements in a UI that are interactive.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Testing tools usually enable you to choose which tree view to use when the tool presents the organization of elements.</source>
          <target xml:space="preserve">Testing tools usually enable you to choose which tree view to use when the tool presents the organization of elements.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209390)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">By default, any <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Control</pc></pc> derived class and a few other elements will appear in the control view when the UI Automation framework represents the UI for a Universal Windows Platform (UWP) app.</source>
          <target xml:space="preserve">By default, any <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Control</pc></pc> derived class and a few other elements will appear in the control view when the UI Automation framework represents the UI for a Universal Windows Platform (UWP) app.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">But sometimes you don't want an element to appear in the control view because of UI composition, where that element is duplicating information or presenting information that's unimportant for accessibility scenarios.</source>
          <target xml:space="preserve">But sometimes you don't want an element to appear in the control view because of UI composition, where that element is duplicating information or presenting information that's unimportant for accessibility scenarios.</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn251788)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use the attached property <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.AccessibilityView</pc></pc> to change how elements are exposed to the tree views.</source>
          <target xml:space="preserve">Use the attached property <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.AccessibilityView</pc></pc> to change how elements are exposed to the tree views.</target>
        </segment>
      </unit>
      <unit id="160">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you put an element in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Raw</pc> tree, most assistive technologies won't report that element as part of their views.</source>
          <target xml:space="preserve">If you put an element in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Raw</pc> tree, most assistive technologies won't report that element as part of their views.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To see some examples of how this works in existing controls, open the generic.xaml design reference XAML file in a text editor, and search for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutomationProperties.AccessibilityView</pc> in the templates.</source>
          <target xml:space="preserve">To see some examples of how this works in existing controls, open the generic.xaml design reference XAML file in a text editor, and search for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutomationProperties.AccessibilityView</pc> in the templates.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">Name from inner text</source>
          <target xml:space="preserve">Name from inner text</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">To make it easier to use strings that already exist in the visible UI for accessible name values, many of the controls and other UI elements provide support for automatically determining a default accessible name based on inner text within the element, or from string values of content properties.</source>
          <target xml:space="preserve">To make it easier to use strings that already exist in the visible UI for accessible name values, many of the controls and other UI elements provide support for automatically determining a default accessible name based on inner text within the element, or from string values of content properties.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR227565)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc>
						</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RichTextBlock</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TextBox</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7">RichTextBlock</pc> each promote the value of the <pc dataRefEnd="id16" dataRefStart="id15" id="p8">Text</pc> property as the default accessible name.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc>
						</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RichTextBlock</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TextBox</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7">RichTextBlock</pc> each promote the value of the <pc dataRefEnd="id16" dataRefStart="id15" id="p8">Text</pc> property as the default accessible name.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209365)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209365_content)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Any <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentControl</pc></pc> subclass uses an iterative "ToString" technique to find strings in its <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Content</pc></pc> value, and promotes these strings as the default accessible name.</source>
          <target xml:space="preserve">Any <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentControl</pc></pc> subclass uses an iterative "ToString" technique to find strings in its <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Content</pc></pc> value, and promotes these strings as the default accessible name.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   As enforced by UI Automation, the accessible name length cannot be greater than 2048 characters.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   As enforced by UI Automation, the accessible name length cannot be greater than 2048 characters.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">If a string used for automatic accessible name determination exceeds that limit, the accessible name is truncated at that point.</source>
          <target xml:space="preserve">If a string used for automatic accessible name determination exceeds that limit, the accessible name is truncated at that point.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">Accessible names for images</source>
          <target xml:space="preserve">Accessible names for images</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">To support screen readers and to provide the basic identifying information for each element in the UI, you sometimes must provide text alternatives to non-textual information such as images and charts (excluding any purely decorative or structural elements).</source>
          <target xml:space="preserve">To support screen readers and to provide the basic identifying information for each element in the UI, you sometimes must provide text alternatives to non-textual information such as images and charts (excluding any purely decorative or structural elements).</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">These elements don't have inner text so the accessible name won't have a calculated value.</source>
          <target xml:space="preserve">These elements don't have inner text so the accessible name won't have a calculated value.</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can set the accessible name directly by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> attached property as shown in this example.</source>
          <target xml:space="preserve">You can set the accessible name directly by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> attached property as shown in this example.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">Alternatively, consider including a text caption that appears in the visible UI and that also serves as the label-associated accessibility information for the image content.</source>
          <target xml:space="preserve">Alternatively, consider including a text caption that appears in the visible UI and that also serves as the label-associated accessibility information for the image content.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">Here's an example:</source>
          <target xml:space="preserve">Here's an example:</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">Labels and LabeledBy</source>
          <target xml:space="preserve">Labels and LabeledBy</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/Hh759769)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The preferred way to associate a label with a form element is to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> with an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> for label text, and then to set the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">AutomationProperties.LabeledBy</pc></pc> attached property on the form element to reference the labeling <pc dataRefEnd="id12" dataRefStart="id11" id="p6">TextBlock</pc> by its XAML name.</source>
          <target xml:space="preserve">The preferred way to associate a label with a form element is to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> with an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> for label text, and then to set the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">AutomationProperties.LabeledBy</pc></pc> attached property on the form element to reference the labeling <pc dataRefEnd="id12" dataRefStart="id11" id="p6">TextBlock</pc> by its XAML name.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">If you use this pattern, when the user clicks the label, the focus moves to the associated control and assistive technologies can use the label text as the accessible name for the form field.</source>
          <target xml:space="preserve">If you use this pattern, when the user clicks the label, the focus moves to the associated control and assistive technologies can use the label text as the accessible name for the form field.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">Here's an example that shows this technique.</source>
          <target xml:space="preserve">Here's an example that shows this technique.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">Accessible description (optional)</source>
          <target xml:space="preserve">Accessible description (optional)</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">An accessible description provides additional accessibility information about a particular UI element.</source>
          <target xml:space="preserve">An accessible description provides additional accessibility information about a particular UI element.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">You typically provide an accessible description when an accessible name alone does not adequately convey an element's purpose.</source>
          <target xml:space="preserve">You typically provide an accessible description when an accessible name alone does not adequately convey an element's purpose.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">The Narrator screen reader reads an element's accessible description only when the user requests more information about the element by pressing Caps Lock+F.</source>
          <target xml:space="preserve">The Narrator screen reader reads an element's accessible description only when the user requests more information about the element by pressing Caps Lock+F.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">The accessible name is meant to identify the control rather than to fully document its behavior.</source>
          <target xml:space="preserve">The accessible name is meant to identify the control rather than to fully document its behavior.</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh759765)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If a brief description is not enough to explain the control, you can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.HelpText</pc></pc> attached property in addition to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AutomationProperties.Name</pc></pc>.</source>
          <target xml:space="preserve">If a brief description is not enough to explain the control, you can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.HelpText</pc></pc> attached property in addition to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AutomationProperties.Name</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">Testing accessibility early and often</source>
          <target xml:space="preserve">Testing accessibility early and often</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">Ultimately, the best approach for supporting screen readers is to test your app using a screen reader yourself.</source>
          <target xml:space="preserve">Ultimately, the best approach for supporting screen readers is to test your app using a screen reader yourself.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">That will show you how the screen reader behaves and what basic accessibility information might be missing from the app.</source>
          <target xml:space="preserve">That will show you how the screen reader behaves and what basic accessibility information might be missing from the app.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">Then you can adjust the UI or UI Automation property values accordingly.</source>
          <target xml:space="preserve">Then you can adjust the UI or UI Automation property values accordingly.</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](accessibility-testing.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Accessibility testing</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Accessibility testing</pc>.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">One of the tools you can use for testing accessibility is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AccScope</pc>.</source>
          <target xml:space="preserve">One of the tools you can use for testing accessibility is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AccScope</pc>.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AccScope</pc> tool is particularly useful because you can see visual representations of your UI that represent how assistive technologies might view your app as an automation tree.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AccScope</pc> tool is particularly useful because you can see visual representations of your UI that represent how assistive technologies might view your app as an automation tree.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">In particular, there's a Narrator mode that gives a view of how Narrator gets text from your app and how it organizes the elements in the UI.</source>
          <target xml:space="preserve">In particular, there's a Narrator mode that gives a view of how Narrator gets text from your app and how it organizes the elements in the UI.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">AccScope is designed so that it can be used and be useful throughout a development cycle for an app, even during the preliminary design phase.</source>
          <target xml:space="preserve">AccScope is designed so that it can be used and be useful throughout a development cycle for an app, even during the preliminary design phase.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/Dn433239)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AccScope</pc>.</source>
          <target xml:space="preserve">For more info see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AccScope</pc>.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">Accessible names from dynamic data</source>
          <target xml:space="preserve">Accessible names from dynamic data</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Windows supports many controls that can be used to display values that come from an associated data source, through a feature known as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">data binding</pc>.</source>
          <target xml:space="preserve">Windows supports many controls that can be used to display values that come from an associated data source, through a feature known as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">data binding</pc>.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">When you populate lists with data items, you may need to use a technique that sets accessible names for data-bound list items after the initial list is populated.</source>
          <target xml:space="preserve">When you populate lists with data items, you may need to use a technique that sets accessible names for data-bound list items after the initial list is populated.</target>
        </segment>
      </unit>
      <unit id="197">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=238570)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see "Scenario 4" in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML accessibility sample</pc>.</source>
          <target xml:space="preserve">For more info, see "Scenario 4" in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML accessibility sample</pc>.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">Accessible names and localization</source>
          <target xml:space="preserve">Accessible names and localization</target>
        </segment>
      </unit>
      <unit id="199">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204791)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To make sure that the accessible name is also an element that is localized, you should use correct techniques for storing localizable strings as resources and then referencing the resource connections with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid directive</pc> values.</source>
          <target xml:space="preserve">To make sure that the accessible name is also an element that is localized, you should use correct techniques for storing localizable strings as resources and then referencing the resource connections with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid directive</pc> values.</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If the accessible name is coming from an explicitly set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> usage, make sure that the string there is also localizable.</source>
          <target xml:space="preserve">If the accessible name is coming from an explicitly set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> usage, make sure that the string there is also localizable.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209081)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note that attached properties such as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties</pc></pc> properties use a special qualifying syntax for the resource name, so that the resource references the attached property as applied to a specific element.</source>
          <target xml:space="preserve">Note that attached properties such as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties</pc></pc> properties use a special qualifying syntax for the resource name, so that the resource references the attached property as applied to a specific element.</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">`MediumButton`</data>
          <data id="id6">`MediumButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, the resource name for <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> as applied to a UI element named <ph dataRef="id5" id="ph1" /> is: <ph dataRef="id6" id="ph2" />.</source>
          <target xml:space="preserve">For example, the resource name for <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationProperties.Name</pc></pc> as applied to a UI element named <ph dataRef="id5" id="ph1" /> is: <ph dataRef="id6" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">Accessibility</source>
          <target xml:space="preserve">Accessibility</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">AutomationProperties.Name</source>
          <target xml:space="preserve">AutomationProperties.Name</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">XAML accessibility sample</source>
          <target xml:space="preserve">XAML accessibility sample</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">Accessibility testing</source>
          <target xml:space="preserve">Accessibility testing</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>