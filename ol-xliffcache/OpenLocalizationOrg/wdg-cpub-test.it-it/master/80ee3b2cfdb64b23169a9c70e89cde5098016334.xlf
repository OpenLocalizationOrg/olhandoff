<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">80ee3b2cfdb64b23169a9c70e89cde5098016334</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: b632a6cc-3503-4ab8-bfd1-dde731bd89ab</source>
          <target xml:space="preserve">ms.assetid: b632a6cc-3503-4ab8-bfd1-dde731bd89ab</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">description: This section includes topics that explain programming concepts that are generally applicable to any app that you write.</source>
          <target xml:space="preserve">description: This section includes topics that explain programming concepts that are generally applicable to any app that you write.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">title: XAML platform</source>
          <target xml:space="preserve">title: XAML platform</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">XAML platform</source>
          <target xml:space="preserve">XAML platform</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">This section includes topics that explain programming concepts that are generally applicable to any app that you write, if you are using C#, Microsoft Visual Basic, or Visual C++ component extensions (C++/CX) as your programming language and XAML for your UI definition.</source>
          <target xml:space="preserve">This section includes topics that explain programming concepts that are generally applicable to any app that you write, if you are using C#, Microsoft Visual Basic, or Visual C++ component extensions (C++/CX) as your programming language and XAML for your UI definition.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">This includes basic programming concepts such as using properties and events, and how these apply to Universal Windows Platform (UWP) app programming.</source>
          <target xml:space="preserve">This includes basic programming concepts such as using properties and events, and how these apply to Universal Windows Platform (UWP) app programming.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">The Universal Windows Platform (UWP) extends C#, Visual Basic, or C++/CX concepts of properties and their values by adding the dependency property system.</source>
          <target xml:space="preserve">The Universal Windows Platform (UWP) extends C#, Visual Basic, or C++/CX concepts of properties and their values by adding the dependency property system.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Topics in this section also document the XAML language as it is used by the UWP, and cover basic scenarios and advanced topics explaining how to use XAML to define the UI for your UWP app.</source>
          <target xml:space="preserve">Topics in this section also document the XAML language as it is used by the UWP, and cover basic scenarios and advanced topics explaining how to use XAML to define the UI for your UWP app.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Topic</source>
          <target xml:space="preserve">Topic</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">XAML overview</source>
          <target xml:space="preserve">XAML overview</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">We introduce the XAML language and XAML concepts to the Windows Runtime app developer audience, and describe the different ways to declare objects and set attributes in XAML as it is used for creating a Windows Runtime app.</source>
          <target xml:space="preserve">We introduce the XAML language and XAML concepts to the Windows Runtime app developer audience, and describe the different ways to declare objects and set attributes in XAML as it is used for creating a Windows Runtime app.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Dependency properties overview</source>
          <target xml:space="preserve">Dependency properties overview</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">This topic explains the dependency property system that is available when you write a Windows Runtime app using C++, C#, or Visual Basic along with XAML definitions for UI.</source>
          <target xml:space="preserve">This topic explains the dependency property system that is available when you write a Windows Runtime app using C++, C#, or Visual Basic along with XAML definitions for UI.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Custom dependency properties</source>
          <target xml:space="preserve">Custom dependency properties</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Explains how to define and implement custom dependency properties for a Windows Runtime app using C++, C#, or Visual Basic.</source>
          <target xml:space="preserve">Explains how to define and implement custom dependency properties for a Windows Runtime app using C++, C#, or Visual Basic.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Attached properties overview</source>
          <target xml:space="preserve">Attached properties overview</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">Explains the concept of an attached property in XAML, and provides some examples.</source>
          <target xml:space="preserve">Explains the concept of an attached property in XAML, and provides some examples.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">Custom attached properties</source>
          <target xml:space="preserve">Custom attached properties</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Explains how to implement a XAML attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.</source>
          <target xml:space="preserve">Explains how to implement a XAML attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Events and routed events overview</source>
          <target xml:space="preserve">Events and routed events overview</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">We describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or C++/CX as your programming language, and XAML for your UI definition.</source>
          <target xml:space="preserve">We describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or C++/CX as your programming language, and XAML for your UI definition.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">You can assign handlers for events as part of the declarations for UI elements in XAML, or you can add the handlers in code.</source>
          <target xml:space="preserve">You can assign handlers for events as part of the declarations for UI elements in XAML, or you can add the handlers in code.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Windows Runtime supports <pc dataRefEnd="id2" dataRefStart="id1" id="p1">routed events</pc>: certain input events and data events can be handled by objects beyond the object that fired the event.</source>
          <target xml:space="preserve">Windows Runtime supports <pc dataRefEnd="id2" dataRefStart="id1" id="p1">routed events</pc>: certain input events and data events can be handled by objects beyond the object that fired the event.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Routed events are useful when you define control templates, or use pages or layout containers.</source>
          <target xml:space="preserve">Routed events are useful when you define control templates, or use pages or layout containers.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>