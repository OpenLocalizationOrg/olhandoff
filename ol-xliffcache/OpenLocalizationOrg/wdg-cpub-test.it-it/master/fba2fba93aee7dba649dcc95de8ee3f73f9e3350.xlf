<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">fba2fba93aee7dba649dcc95de8ee3f73f9e3350</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 9146212C-8480-4C16-B74C-D7F08C7086AF</source>
          <target xml:space="preserve">ms.assetid: 9146212C-8480-4C16-B74C-D7F08C7086AF</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">description: This article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.</source>
          <target xml:space="preserve">description: This article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">title: MIDI</source>
          <target xml:space="preserve">title: MIDI</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">MIDI</source>
          <target xml:space="preserve">MIDI</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">This article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.</source>
          <target xml:space="preserve">This article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Enumerate MIDI devices</source>
          <target xml:space="preserve">Enumerate MIDI devices</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Before enumerating and using MIDI devices, add the following namespaces to your project.</source>
          <target xml:space="preserve">Before enumerating and using MIDI devices, add the following namespaces to your project.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetUsing)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using</pc>]</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242868)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc></pc> control to your XAML page that will allow the user to select one of the MIDI input devices attached to the system.</source>
          <target xml:space="preserve">Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc></pc> control to your XAML page that will allow the user to select one of the MIDI input devices attached to the system.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Add another one to list the MIDI output devices.</source>
          <target xml:space="preserve">Add another one to list the MIDI output devices.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml#SnippetMidiListBoxes)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-xml<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MidiListBoxes</pc>]</source>
          <target xml:space="preserve">[!code-xml<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MidiListBoxes</pc>]</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225432)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br225393)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FindAllAsync</pc></pc> method <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DeviceInformation</pc></pc> class is used to enumerate many different types of devices that are recognized by Windows.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FindAllAsync</pc></pc> method <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DeviceInformation</pc></pc> class is used to enumerate many different types of devices that are recognized by Windows.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894779)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To specify that you only want the method to find MIDI input devices, use the selector string returned by <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MidiInPort.GetDeviceSelector</pc></pc>.</source>
          <target xml:space="preserve">To specify that you only want the method to find MIDI input devices, use the selector string returned by <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MidiInPort.GetDeviceSelector</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br225395)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">FindAllAsync</pc> returns a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DeviceInformationCollection</pc></pc> that contains a <pc dataRefEnd="id8" dataRefStart="id7" id="p4">DeviceInformation</pc> for each MIDI input device registered with the system.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">FindAllAsync</pc> returns a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DeviceInformationCollection</pc></pc> that contains a <pc dataRefEnd="id8" dataRefStart="id7" id="p4">DeviceInformation</pc> for each MIDI input device registered with the system.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">If the returned collection contains no items, then there are no available MIDI input devices.</source>
          <target xml:space="preserve">If the returned collection contains no items, then there are no available MIDI input devices.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If there are items in the collection, loop through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformation</pc> objects and add the name of each device to the MIDI input device <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc>.</source>
          <target xml:space="preserve">If there are items in the collection, loop through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformation</pc> objects and add the name of each device to the MIDI input device <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc>.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetEnumerateMidiInputDevices)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnumerateMidiInputDevices</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnumerateMidiInputDevices</pc>]</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894845)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Enumerating MIDI output devices works the exact same way as enumerating input devices, except that you should specify the selector string returned by <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MidiOutPort.GetDeviceSelector</pc></pc> when calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3">FindAllAsync</pc>.</source>
          <target xml:space="preserve">Enumerating MIDI output devices works the exact same way as enumerating input devices, except that you should specify the selector string returned by <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MidiOutPort.GetDeviceSelector</pc></pc> when calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3">FindAllAsync</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetEnumerateMidiOutputDevices)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnumerateMidiOutputDevices</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnumerateMidiOutputDevices</pc>]</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Create a device watcher helper class</source>
          <target xml:space="preserve">Create a device watcher helper class</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225459)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br225446)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Enumeration</pc></pc> namespace provides the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DeviceWatcher</pc></pc> which can notify your app if devices are added or removed from the system, or if the information for a device is updated.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Enumeration</pc></pc> namespace provides the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DeviceWatcher</pc></pc> which can notify your app if devices are added or removed from the system, or if the information for a device is updated.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Since MIDI-enabled apps typically are interested in both input and output devices, this example creates a helper class that implements the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> pattern, so that the same code can be used for both MIDI input and MIDI output devices, without the need for duplication.</source>
          <target xml:space="preserve">Since MIDI-enabled apps typically are interested in both input and output devices, this example creates a helper class that implements the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> pattern, so that the same code can be used for both MIDI input and MIDI output devices, without the need for duplication.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Add a new class to your project to serve as your device watcher.</source>
          <target xml:space="preserve">Add a new class to your project to serve as your device watcher.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In this example the class is named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MyMidiDeviceWatcher</pc>.</source>
          <target xml:space="preserve">In this example the class is named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MyMidiDeviceWatcher</pc>.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">The rest of the code in this section is used to implement the helper class.</source>
          <target xml:space="preserve">The rest of the code in this section is used to implement the helper class.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Add some member variables to the class:</source>
          <target xml:space="preserve">Add some member variables to the class:</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225446)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceWatcher</pc></pc> object that will monitor for device changes.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceWatcher</pc></pc> object that will monitor for device changes.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">A device selector string that will contain the MIDI in port selector string for one instance and the MIDI out port selector string for another instance.</source>
          <target xml:space="preserve">A device selector string that will contain the MIDI in port selector string for one instance and the MIDI out port selector string for another instance.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242868)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc></pc> control that will be populated with the names of the available devices.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc></pc> control that will be populated with the names of the available devices.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208211)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher</pc></pc> that is required to update the UI from a thread other than the UI thread.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher</pc></pc> that is required to update the UI from a thread other than the UI thread.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherVariables)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherVariables</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherVariables</pc>]</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225395)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceInformationCollection</pc></pc> property that is used to access the current list of devices from outside the helper class.</source>
          <target xml:space="preserve">Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceInformationCollection</pc></pc> property that is used to access the current list of devices from outside the helper class.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetDeclareDeviceInformationCollection)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeclareDeviceInformationCollection</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeclareDeviceInformationCollection</pc>]</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In class constructor, the caller passes in the MIDI device selector string, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> for listing the devices, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Dispatcher</pc> needed to update the UI.</source>
          <target xml:space="preserve">In class constructor, the caller passes in the MIDI device selector string, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> for listing the devices, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Dispatcher</pc> needed to update the UI.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225427)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceInformation.CreateWatcher</pc></pc> to create a new instance of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DeviceWatcher</pc> class, passing in the MIDI device selector string.</source>
          <target xml:space="preserve">Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceInformation.CreateWatcher</pc></pc> to create a new instance of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DeviceWatcher</pc> class, passing in the MIDI device selector string.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">Register handlers for the watcher's event handlers.</source>
          <target xml:space="preserve">Register handlers for the watcher's event handlers.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherConstructor)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherConstructor</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherConstructor</pc>]</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> has the following events:</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> has the following events:</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225450)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Added</pc>
						</pc> - Raised when a new device is added to the system.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Added</pc>
						</pc> - Raised when a new device is added to the system.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225453)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Removed</pc>
						</pc> - Raised when a device is removed from the system.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Removed</pc>
						</pc> - Raised when a device is removed from the system.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225458)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Updated</pc>
						</pc> - Raised when the information associated with an existing device is updated.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Updated</pc>
						</pc> - Raised when the information associated with an existing device is updated.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225451)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EnumerationCompleted</pc>
						</pc> - Raised when the watcher has completed its enumeration of the requested device type.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EnumerationCompleted</pc>
						</pc> - Raised when the watcher has completed its enumeration of the requested device type.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the event handler for each of these events, a helper method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UpdateDevices</pc>, is called to update the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc> with the current list of devices.</source>
          <target xml:space="preserve">In the event handler for each of these events, a helper method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UpdateDevices</pc>, is called to update the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc> with the current list of devices.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh750317)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Because <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UpdateDevices</pc> updates UI elements and these event handlers are not called on the UI thread, each call must be wrapped in a call to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">RunAsync</pc></pc>, which causes the specified code to be run on the UI thread.</source>
          <target xml:space="preserve">Because <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UpdateDevices</pc> updates UI elements and these event handlers are not called on the UI thread, each call must be wrapped in a call to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">RunAsync</pc></pc>, which causes the specified code to be run on the UI thread.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherEventHandlers)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherEventHandlers</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherEventHandlers</pc>]</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br225432)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UpdateDevices</pc> helper method calls <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DeviceInformation.FindAllAsync</pc></pc> and updates the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListBox</pc> with the names of the returned devices as described previously in this article.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UpdateDevices</pc> helper method calls <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DeviceInformation.FindAllAsync</pc></pc> and updates the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListBox</pc> with the names of the returned devices as described previously in this article.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherUpdateDevices)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherUpdateDevices</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherUpdateDevices</pc>]</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br225454)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/br225456)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Add methods to start the watcher, using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> object's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Start</pc></pc> method, and to stop the watcher, using the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Stop</pc></pc> method.</source>
          <target xml:space="preserve">Add methods to start the watcher, using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> object's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Start</pc></pc> method, and to stop the watcher, using the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Stop</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherStopStart)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherStopStart</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherStopStart</pc>]</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">Provide a destructor to unregister the watcher event handlers and set the device watcher to null.</source>
          <target xml:space="preserve">Provide a destructor to unregister the watcher event handlers and set the device watcher to null.</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherDestructor)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherDestructor</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WatcherDestructor</pc>]</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Create MIDI ports to send and receive messages</source>
          <target xml:space="preserve">Create MIDI ports to send and receive messages</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the code behind for your page, declare member variables to hold two instances of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MyMidiDeviceWatcher</pc> helper class, one for input devices and one for output devices.</source>
          <target xml:space="preserve">In the code behind for your page, declare member variables to hold two instances of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MyMidiDeviceWatcher</pc> helper class, one for input devices and one for output devices.</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetDeclareDeviceWatchers)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeclareDeviceWatchers</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeclareDeviceWatchers</pc>]</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Create a new instance of the watcher helper classes, passing in the device selector string, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> to be populated, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher</pc> object that can be accessed through the page's <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Dispatcher</pc> property.</source>
          <target xml:space="preserve">Create a new instance of the watcher helper classes, passing in the device selector string, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> to be populated, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher</pc> object that can be accessed through the page's <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Dispatcher</pc> property.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Then, call the method to start each object's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc>.</source>
          <target xml:space="preserve">Then, call the method to start each object's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc>.</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br225451)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Shortly after each <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> is started, it will finish enumerating the current devices connected to the system and raise its <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">EnumerationCompleted</pc></pc> event, which will cause each <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListBox</pc> to be updated with the current MIDI devices.</source>
          <target xml:space="preserve">Shortly after each <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> is started, it will finish enumerating the current devices connected to the system and raise its <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">EnumerationCompleted</pc></pc> event, which will cause each <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListBox</pc> to be updated with the current MIDI devices.</target>
        </segment>
      </unit>
      <unit id="160">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetStartWatchers)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">StartWatchers</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">StartWatchers</pc>]</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br225451)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Shortly after each <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> is started, it will finish enumerating the current devices connected to the system and raise its <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">EnumerationCompleted</pc></pc> event, which will cause each <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListBox</pc> to be updated with the current MIDI devices.</source>
          <target xml:space="preserve">Shortly after each <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceWatcher</pc> is started, it will finish enumerating the current devices connected to the system and raise its <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">EnumerationCompleted</pc></pc> event, which will cause each <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListBox</pc> to be updated with the current MIDI devices.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209776)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When the user selects an item in the MIDI input <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc>, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SelectionChanged</pc></pc> event is raised.</source>
          <target xml:space="preserve">When the user selects an item in the MIDI input <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc>, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SelectionChanged</pc></pc> event is raised.</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the handler for this event, access the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformationCollection</pc> property of the helper class to get the current list of devices.</source>
          <target xml:space="preserve">In the handler for this event, access the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformationCollection</pc> property of the helper class to get the current list of devices.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209768)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If there are entries in the list, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformation</pc> object with the index corresponding to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc> control's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SelectedIndex</pc></pc>.</source>
          <target xml:space="preserve">If there are entries in the list, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformation</pc> object with the index corresponding to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc> control's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SelectedIndex</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894770)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn894776)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/br225437)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Create the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MidiInPort</pc></pc> object representing the selected input device by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MidiInPort.FromIdAsync</pc></pc>, passing in the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Id</pc></pc> property of the selected device.</source>
          <target xml:space="preserve">Create the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MidiInPort</pc></pc> object representing the selected input device by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MidiInPort.FromIdAsync</pc></pc>, passing in the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Id</pc></pc> property of the selected device.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894781)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Register a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MessageReceived</pc></pc> event, which is raised whenever a MIDI message is received through the specified device.</source>
          <target xml:space="preserve">Register a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MessageReceived</pc></pc> event, which is raised whenever a MIDI message is received through the specified device.</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetInPortSelectionChanged)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">InPortSelectionChanged</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">InPortSelectionChanged</pc>]</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn894783)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MessageReceived</pc> handler is called, the message is contained in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Message</pc></pc> property of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">MidiMessageReceivedEventArgs</pc>.</source>
          <target xml:space="preserve">When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MessageReceived</pc> handler is called, the message is contained in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Message</pc></pc> property of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">MidiMessageReceivedEventArgs</pc>.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894726)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn894786)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Type</pc></pc> of the message object is a value from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MidiMessageType</pc></pc> enumeration indicating the type of message that was received.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Type</pc></pc> of the message object is a value from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MidiMessageType</pc></pc> enumeration indicating the type of message that was received.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">The data of the message depends on the type of the message.</source>
          <target xml:space="preserve">The data of the message depends on the type of the message.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">This example checks to see if the message is a note on message and, if so, outputs the midi channel, note, and velocity of the message.</source>
          <target xml:space="preserve">This example checks to see if the message is a note on message and, if so, outputs the midi channel, note, and velocity of the message.</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetMessageReceived)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MessageReceived</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MessageReceived</pc>]</target>
        </segment>
      </unit>
      <unit id="173">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209776)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChanged</pc></pc> handler for the output device <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListBox</pc> works the same as the handler for input devices, except no event handler is registered.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChanged</pc></pc> handler for the output device <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListBox</pc> works the same as the handler for input devices, except no event handler is registered.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetOutPortSelectionChanged)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OutPortSelectionChanged</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OutPortSelectionChanged</pc>]</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn911508)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Once the output device is created, you can send a message by creating a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IMidiMessage</pc></pc> for the type of message you want to send.</source>
          <target xml:space="preserve">Once the output device is created, you can send a message by creating a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IMidiMessage</pc></pc> for the type of message you want to send.</target>
        </segment>
      </unit>
      <unit id="176">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894817)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In this example, the message is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NoteOnMessage</pc></pc>.</source>
          <target xml:space="preserve">In this example, the message is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NoteOnMessage</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894730)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn894727)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendMessage</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IMidiOutPort</pc></pc> object is called to send the message.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendMessage</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IMidiOutPort</pc></pc> object is called to send the message.</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetSendMessage)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">SendMessage</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">SendMessage</pc>]</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">When your app is deactivated, be sure to clean up your apps resources.</source>
          <target xml:space="preserve">When your app is deactivated, be sure to clean up your apps resources.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Unregister your event handlers and set the MIDI in port and out port objects to null.</source>
          <target xml:space="preserve">Unregister your event handlers and set the MIDI in port and out port objects to null.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Stop the device watchers and set them to null.</source>
          <target xml:space="preserve">Stop the device watchers and set them to null.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetCleanUp)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">CleanUp</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">CleanUp</pc>]</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">Using the built-in Windows General MIDI synth</source>
          <target xml:space="preserve">Using the built-in Windows General MIDI synth</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">When you enumerate output MIDI devices using the technique described above, your app will discover a MIDI device called "Microsoft GS Wavetable Synth".</source>
          <target xml:space="preserve">When you enumerate output MIDI devices using the technique described above, your app will discover a MIDI device called "Microsoft GS Wavetable Synth".</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">This is a built-in General MIDI synthesizer that you can play from your app.</source>
          <target xml:space="preserve">This is a built-in General MIDI synthesizer that you can play from your app.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">However, attempting to create a MIDI outport to this device will fail unless you have included the SDK extension for the built-in synth in your project.</source>
          <target xml:space="preserve">However, attempting to create a MIDI outport to this device will fail unless you have included the SDK extension for the built-in synth in your project.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">To include the General MIDI Synth SDK extension in your app project</source>
          <target xml:space="preserve">To include the General MIDI Synth SDK extension in your app project</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, under your project, right-click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">References</pc> and select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add reference...</pc></source>
          <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, under your project, right-click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">References</pc> and select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add reference...</pc></target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Universal Windows</pc> node.</source>
          <target xml:space="preserve">Expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Universal Windows</pc> node.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Extensions</pc>.</source>
          <target xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Extensions</pc>.</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">From the list of extensions, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft General MIDI DLS for Universal Windows Apps</pc>.</source>
          <target xml:space="preserve">From the list of extensions, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft General MIDI DLS for Universal Windows Apps</pc>.</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If there are multiple versions of the extension, be sure to select the version that matches the target for your app.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If there are multiple versions of the extension, be sure to select the version that matches the target for your app.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can see which SDK version your app is targeting on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application</pc> tab of the project Properties.</source>
          <target xml:space="preserve">You can see which SDK version your app is targeting on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application</pc> tab of the project Properties.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>