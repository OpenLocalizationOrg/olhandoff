<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">f1c960042aeca4ef7c858c8b854aa0bf278fac0b</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Make your own integration services</source>
          <target xml:space="preserve">Make your own integration services</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">2-March update: Starting in Windows 10, anyone can make a service very similar to the in-box Hyper-V integration services using a new socket-based communication channel between the Hyper-V host and the virtual machines running on it.</source>
          <target xml:space="preserve">2-March update: Starting in Windows 10, anyone can make a service very similar to the in-box Hyper-V integration services using a new socket-based communication channel between the Hyper-V host and the virtual machines running on it.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">Using these Hyper-V sockets, services can run independently of the networking stack and all data stays on the same physical memory.</source>
          <target xml:space="preserve">Using these Hyper-V sockets, services can run independently of the networking stack and all data stays on the same physical memory.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">This document walks through creating a simple application built on Hyper-V sockets and how to get started using them.</source>
          <target xml:space="preserve">This document walks through creating a simple application built on Hyper-V sockets and how to get started using them.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../user_guide/vmsession.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">PowerShell Direct</pc> is an example of an application (in this case an in-box Windows service) which uses Hyper-V sockets to communicate.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">PowerShell Direct</pc> is an example of an application (in this case an in-box Windows service) which uses Hyper-V sockets to communicate.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">Supported Host OS</source>
          <target xml:space="preserve">Supported Host OS</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Windows 10</source>
          <target xml:space="preserve">Windows 10</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Windows Server Technical Preview 3 and later</source>
          <target xml:space="preserve">Windows Server Technical Preview 3 and later</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Future releases (Server 2016 +)</source>
          <target xml:space="preserve">Future releases (Server 2016 +)</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Supported Guest OS</source>
          <target xml:space="preserve">Supported Guest OS</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Windows 10</source>
          <target xml:space="preserve">Windows 10</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Windows Server Technical Preview 3 and later</source>
          <target xml:space="preserve">Windows Server Technical Preview 3 and later</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Future releases (Server 2016 +)</source>
          <target xml:space="preserve">Future releases (Server 2016 +)</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Capabilities and Limitations</source>
          <target xml:space="preserve">Capabilities and Limitations</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Supports kernel mode or user mode actions</source>
          <target xml:space="preserve">Supports kernel mode or user mode actions</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Data stream only</source>
          <target xml:space="preserve">Data stream only</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">No block memory (not the best for backup/video)</source>
          <target xml:space="preserve">No block memory (not the best for backup/video)</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Getting started</source>
          <target xml:space="preserve">Getting started</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Right now, Hyper-V sockets are available in native code (C/C++).</source>
          <target xml:space="preserve">Right now, Hyper-V sockets are available in native code (C/C++).</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">To write a simple application, you'll need:</source>
          <target xml:space="preserve">To write a simple application, you'll need:</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">C compiler.</source>
          <target xml:space="preserve">C compiler.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://aka.ms/vs)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you don't have one, checkout <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Code</pc></source>
          <target xml:space="preserve">If you don't have one, checkout <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Code</pc></target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">A computer running Hyper-V with and a virtual machine.</source>
          <target xml:space="preserve">A computer running Hyper-V with and a virtual machine.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">Host and guest (VM) OS must be Windows 10, Windows Server Technical Preview 3, or later.</source>
          <target xml:space="preserve">Host and guest (VM) OS must be Windows 10, Windows Server Technical Preview 3, or later.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Windows SDK -- We're in the process of publishing this.</source>
          <target xml:space="preserve">Windows SDK -- We're in the process of publishing this.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Register a new application</source>
          <target xml:space="preserve">Register a new application</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">In order to use Hyper-V sockets, the application must be registered with the Hyper-V Host's registry.</source>
          <target xml:space="preserve">In order to use Hyper-V sockets, the application must be registered with the Hyper-V Host's registry.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">By registering the service in the registry, you get:</source>
          <target xml:space="preserve">By registering the service in the registry, you get:</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">WMI management for enable, disable, and listing available services</source>
          <target xml:space="preserve">WMI management for enable, disable, and listing available services</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">Permission to communicate with virtual machines directly</source>
          <target xml:space="preserve">Permission to communicate with virtual machines directly</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">The following PowerShell will register a new application named "HV Socket Demo".</source>
          <target xml:space="preserve">The following PowerShell will register a new application named "HV Socket Demo".</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">This must be run as administrator.</source>
          <target xml:space="preserve">This must be run as administrator.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">Manual instructions below.</source>
          <target xml:space="preserve">Manual instructions below.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">** Registry location and information **</source>
          <target xml:space="preserve">** Registry location and information **</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">In this registry location, you'll see several GUIDs.</source>
          <target xml:space="preserve">In this registry location, you'll see several GUIDs.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Those are our in-box services.</source>
          <target xml:space="preserve">Those are our in-box services.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Information in the registry per service:</source>
          <target xml:space="preserve">Information in the registry per service:</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">`ElementName (REG_SZ)`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> -- this is the service's friendly name</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> -- this is the service's friendly name</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">To register your own service, create a new registry key using your own GUID and friendly name.</source>
          <target xml:space="preserve">To register your own service, create a new registry key using your own GUID and friendly name.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">The friendly name will be associated with your new application.</source>
          <target xml:space="preserve">The friendly name will be associated with your new application.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">It will appear in performance counters and other places where a GUID isn't appropriate.</source>
          <target xml:space="preserve">It will appear in performance counters and other places where a GUID isn't appropriate.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">The registry entry will look like this:</source>
          <target xml:space="preserve">The registry entry will look like this:</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">** Tip: **  To generate a GUID in PowerShell and copy it to the clipboard, run:</source>
          <target xml:space="preserve">** Tip: **  To generate a GUID in PowerShell and copy it to the clipboard, run:</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">Creating a Hyper-V socket</source>
          <target xml:space="preserve">Creating a Hyper-V socket</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">In the most basic case, defining a socket requires an address family, connection type, and protocol.</source>
          <target xml:space="preserve">In the most basic case, defining a socket requires an address family, connection type, and protocol.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](
https://msdn.microsoft.com/en-us/library/windows/desktop/ms740506(v=vs.85).aspx
)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Here is a simple <pc dataRefEnd="id2" dataRefStart="id1" id="p1">socket definition</pc></source>
          <target xml:space="preserve">Here is a simple <pc dataRefEnd="id2" dataRefStart="id1" id="p1">socket definition</pc></target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">For a Hyper-V socket:</source>
          <target xml:space="preserve">For a Hyper-V socket:</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">`AF_HYPERV`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Address family - <ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">Address family - <ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">`SOCK_STREAM`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">type - <ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">type - <ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">`HV_PROTOCOL_RAW`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">protocol - <ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">protocol - <ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">Here is an example declaration/instantiation:</source>
          <target xml:space="preserve">Here is an example declaration/instantiation:</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">Binding to a Hyper-V socket</source>
          <target xml:space="preserve">Binding to a Hyper-V socket</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">Bind associates a socket with connection information.</source>
          <target xml:space="preserve">Bind associates a socket with connection information.</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/desktop/ms737550.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The function definition is copied below for convinience, read more about bind <pc dataRefEnd="id2" dataRefStart="id1" id="p1">here</pc>.</source>
          <target xml:space="preserve">The function definition is copied below for convinience, read more about bind <pc dataRefEnd="id2" dataRefStart="id1" id="p1">here</pc>.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">`AF_INET`</data>
          <data id="id2">`AF_HYPERV`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In contrast to the socket address (sockaddr) for a standard Internet Protocol address family (<ph dataRef="id1" id="ph1" />) which consists of the host machine's IP address and a port number on that host, the socket address for <ph dataRef="id2" id="ph2" /> uses the virtual machine's ID and the application ID defined above to establish a connection.</source>
          <target xml:space="preserve">In contrast to the socket address (sockaddr) for a standard Internet Protocol address family (<ph dataRef="id1" id="ph1" />) which consists of the host machine's IP address and a port number on that host, the socket address for <ph dataRef="id2" id="ph2" /> uses the virtual machine's ID and the application ID defined above to establish a connection.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Since Hyper-V sockets do not depend on a networking stack, TCP/IP, DNS, etc. the socket endpoint needed a non-IP, not hostname, format that still unambiguously describes the connection.</source>
          <target xml:space="preserve">Since Hyper-V sockets do not depend on a networking stack, TCP/IP, DNS, etc. the socket endpoint needed a non-IP, not hostname, format that still unambiguously describes the connection.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">Here is the definition for a Hyper-V socket's socket address:</source>
          <target xml:space="preserve">Here is the definition for a Hyper-V socket's socket address:</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">In lieu of an IP or hostname, AF_HYPERV endpoints rely heavily on two GUIDs:</source>
          <target xml:space="preserve">In lieu of an IP or hostname, AF_HYPERV endpoints rely heavily on two GUIDs:</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">VM ID – this is the unique ID assigned per VM.</source>
          <target xml:space="preserve">VM ID – this is the unique ID assigned per VM.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">A VM’s ID can be found using the following PowerShell snippet.</source>
          <target xml:space="preserve">A VM’s ID can be found using the following PowerShell snippet.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#RegisterANewApplication)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Service ID – GUID, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">described above</pc>, with which the application is registered in the Hyper-V host registry.</source>
          <target xml:space="preserve">Service ID – GUID, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">described above</pc>, with which the application is registered in the Hyper-V host registry.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">There is also a set of VMID wildcards available when a connection isn't to a specific virtual machine.</source>
          <target xml:space="preserve">There is also a set of VMID wildcards available when a connection isn't to a specific virtual machine.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">VMID Wildcards</source>
          <target xml:space="preserve">VMID Wildcards</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">Name</source>
          <target xml:space="preserve">Name</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">GUID</source>
          <target xml:space="preserve">GUID</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">HV_GUID_ZERO</source>
          <target xml:space="preserve">HV_GUID_ZERO</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">00000000-0000-0000-0000-000000000000</source>
          <target xml:space="preserve">00000000-0000-0000-0000-000000000000</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">Listeners should bind to this VmId to accept connection from all partitions.</source>
          <target xml:space="preserve">Listeners should bind to this VmId to accept connection from all partitions.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">HV_GUID_WILDCARD</source>
          <target xml:space="preserve">HV_GUID_WILDCARD</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">00000000-0000-0000-0000-000000000000</source>
          <target xml:space="preserve">00000000-0000-0000-0000-000000000000</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">Listeners should bind to this VmId to accept connection from all partitions.</source>
          <target xml:space="preserve">Listeners should bind to this VmId to accept connection from all partitions.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">HV_GUID_BROADCAST</source>
          <target xml:space="preserve">HV_GUID_BROADCAST</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF</source>
          <target xml:space="preserve">FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">HV_GUID_CHILDREN</source>
          <target xml:space="preserve">HV_GUID_CHILDREN</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">90db8b89-0d35-4f79-8ce9-49ea0ac8b7cd</source>
          <target xml:space="preserve">90db8b89-0d35-4f79-8ce9-49ea0ac8b7cd</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">Wildcard address for children.</source>
          <target xml:space="preserve">Wildcard address for children.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">Listeners should bind to this VmId to accept connection from its children.</source>
          <target xml:space="preserve">Listeners should bind to this VmId to accept connection from its children.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">HV_GUID_LOOPBACK</source>
          <target xml:space="preserve">HV_GUID_LOOPBACK</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">e0e16197-dd56-4a10-9195-5ee7a155a838</source>
          <target xml:space="preserve">e0e16197-dd56-4a10-9195-5ee7a155a838</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Loopback address.</source>
          <target xml:space="preserve">Loopback address.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">Using this VmId connects to the same partition as the connector.</source>
          <target xml:space="preserve">Using this VmId connects to the same partition as the connector.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">HV_GUID_PARENT</source>
          <target xml:space="preserve">HV_GUID_PARENT</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">a42e7cda-d03f-480c-9cc2-a4de20abb878</source>
          <target xml:space="preserve">a42e7cda-d03f-480c-9cc2-a4de20abb878</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">Parent address.</source>
          <target xml:space="preserve">Parent address.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">Using this VmId connects to the parent partition of the connector.*</source>
          <target xml:space="preserve">Using this VmId connects to the parent partition of the connector.*</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">*<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HV_GUID_PARENT</pc></source>
          <target xml:space="preserve">*<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HV_GUID_PARENT</pc></target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">The parent of a virtual machine is its host.</source>
          <target xml:space="preserve">The parent of a virtual machine is its host.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">The parent of a container is the container's host.</source>
          <target xml:space="preserve">The parent of a container is the container's host.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">Connecting from a container running in a virtual machine will connect to the VM hosting the container.</source>
          <target xml:space="preserve">Connecting from a container running in a virtual machine will connect to the VM hosting the container.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">Listening on this VmId accepts connection from:</source>
          <target xml:space="preserve">Listening on this VmId accepts connection from:</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">(Inside containers): Container host.</source>
          <target xml:space="preserve">(Inside containers): Container host.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source xml:space="preserve">(Inside VM: Container host/ no container): VM host.</source>
          <target xml:space="preserve">(Inside VM: Container host/ no container): VM host.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">(Not inside VM: Container host/ no container): Not supported.</source>
          <target xml:space="preserve">(Not inside VM: Container host/ no container): Not supported.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">Supported socket commands</source>
          <target xml:space="preserve">Supported socket commands</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">Socket()</source>
          <target xml:space="preserve">Socket()</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Bind()</source>
          <target xml:space="preserve">Bind()</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">Connect()</source>
          <target xml:space="preserve">Connect()</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">Send()</source>
          <target xml:space="preserve">Send()</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">Listen()</source>
          <target xml:space="preserve">Listen()</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source xml:space="preserve">Accept()</source>
          <target xml:space="preserve">Accept()</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">Complete WinSock API</source>
          <target xml:space="preserve">Complete WinSock API</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">Work in progress</source>
          <target xml:space="preserve">Work in progress</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">Graceful disconnect</source>
          <target xml:space="preserve">Graceful disconnect</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">select</source>
          <target xml:space="preserve">select</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>