{
  "nodes": [
    {
      "pos": [
        27,
        109
      ],
      "content": "Creating a Windows Store leaderboard app with .NET Backend | Azure Mobile Services"
    },
    {
      "pos": [
        128,
        227
      ],
      "content": "Learn how to build a Windows Store leaderboard app using Azure Mobile Services with a .NET backend."
    },
    {
      "pos": [
        563,
        629
      ],
      "content": "Creating a Leaderboard App with Azure Mobile Services .NET Backend"
    },
    {
      "pos": [
        734,
        740
      ],
      "content": "&amp;nbsp;"
    },
    {
      "pos": [
        743,
        1204
      ],
      "content": "This tutorial shows how build a Windows Store app using Azure Mobile Services with a .NET backend. Azure Mobile Services provides a scalable and secure backend with built-in authentication, monitoring, push notifications, and other features, plus a cross-platform client library for building mobile apps. The .NET backend for Mobile Services is based on <bpt id=\"p1\">[</bpt>ASP.NET Web API<ept id=\"p1\">](http://asp.net/web-api)</ept>, and gives .NET developers a first-class way to create REST APIs.",
      "nodes": [
        {
          "content": "This tutorial shows how build a Windows Store app using Azure Mobile Services with a .NET backend.",
          "pos": [
            0,
            98
          ]
        },
        {
          "content": "Azure Mobile Services provides a scalable and secure backend with built-in authentication, monitoring, push notifications, and other features, plus a cross-platform client library for building mobile apps.",
          "pos": [
            99,
            304
          ]
        },
        {
          "content": "The .NET backend for Mobile Services is based on <bpt id=\"p1\">[</bpt>ASP.NET Web API<ept id=\"p1\">](http://asp.net/web-api)</ept>, and gives .NET developers a first-class way to create REST APIs.",
          "pos": [
            305,
            499
          ]
        }
      ]
    },
    {
      "pos": [
        1209,
        1217
      ],
      "content": "Overview"
    },
    {
      "pos": [
        1219,
        1664
      ],
      "content": "Web API is an open-source framework that gives .NET developers a first-class way to create REST APIs. You can host a Web API solution on Azure Websites, on Azure Mobile Services using the .NET backend, or even self-hosted in a custom process. Mobile Services is a hosting environment that is designed especially for mobile apps. When you host your Web API service on Mobile Services, you get the following advantages in addition to data storage:",
      "nodes": [
        {
          "content": "Web API is an open-source framework that gives .NET developers a first-class way to create REST APIs.",
          "pos": [
            0,
            101
          ]
        },
        {
          "content": "You can host a Web API solution on Azure Websites, on Azure Mobile Services using the .NET backend, or even self-hosted in a custom process.",
          "pos": [
            102,
            242
          ]
        },
        {
          "content": "Mobile Services is a hosting environment that is designed especially for mobile apps.",
          "pos": [
            243,
            328
          ]
        },
        {
          "content": "When you host your Web API service on Mobile Services, you get the following advantages in addition to data storage:",
          "pos": [
            329,
            445
          ]
        }
      ]
    },
    {
      "pos": [
        1668,
        1747
      ],
      "content": "Built-in authentication with social providers and Azure Active Directory (AAD)."
    },
    {
      "pos": [
        1750,
        1821
      ],
      "content": "Push notifications to apps using device-specific notification services."
    },
    {
      "pos": [
        1824,
        1909
      ],
      "content": "A full set of client libraries that make it easy to access your service from any app."
    },
    {
      "pos": [
        1912,
        1945
      ],
      "content": "Built-in logging and diagnostics."
    },
    {
      "pos": [
        1947,
        1973
      ],
      "content": "In this tutorial you will:"
    },
    {
      "pos": [
        1977,
        2023
      ],
      "content": "Create a REST API using Azure Mobile Services."
    },
    {
      "pos": [
        2026,
        2055
      ],
      "content": "Publish the service to Azure."
    },
    {
      "pos": [
        2058,
        2111
      ],
      "content": "Create a Windows Store app that consumes the service."
    },
    {
      "pos": [
        2114,
        2205
      ],
      "content": "Use Entity Framework (EF) to create foreign key relations and data transfer objects (DTOs)."
    },
    {
      "pos": [
        2208,
        2251
      ],
      "content": "Use ASP.NET Web API to define a custom API."
    },
    {
      "pos": [
        2253,
        2356
      ],
      "content": "This tutorial uses <bpt id=\"p2\">[</bpt>Visual Studio 2013 latest update<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?LinkID=390465)</ept>."
    },
    {
      "pos": [
        2362,
        2382
      ],
      "content": "About the sample app"
    },
    {
      "pos": [
        2384,
        2676
      ],
      "content": "A <bpt id=\"p3\">*</bpt>leaderboard<ept id=\"p3\">*</ept><ph id=\"ph3\"/> shows a list of players for a game, along with their scores and the rank of each player. A leaderboard might be part of a larger game, or could be a separate app. A leaderboard is a real-world application, but is simple enough for a tutorial. Here is a screen shot of the app:",
      "nodes": [
        {
          "content": "A <bpt id=\"p3\">*</bpt>leaderboard<ept id=\"p3\">*</ept><ph id=\"ph3\"/> shows a list of players for a game, along with their scores and the rank of each player.",
          "pos": [
            0,
            156
          ]
        },
        {
          "content": "A leaderboard might be part of a larger game, or could be a separate app.",
          "pos": [
            157,
            230
          ]
        },
        {
          "content": "A leaderboard is a real-world application, but is simple enough for a tutorial.",
          "pos": [
            231,
            310
          ]
        },
        {
          "content": "Here is a screen shot of the app:",
          "pos": [
            311,
            344
          ]
        }
      ]
    },
    {
      "pos": [
        2686,
        2944
      ],
      "content": "To keep the app simple, there is no actual game. Instead, you can add players and submit a score for each player. When you submit a score, the mobile service calculates the new rankings. On the back end, the mobile service creates a database with two tables:",
      "nodes": [
        {
          "content": "To keep the app simple, there is no actual game.",
          "pos": [
            0,
            48
          ]
        },
        {
          "content": "Instead, you can add players and submit a score for each player.",
          "pos": [
            49,
            113
          ]
        },
        {
          "content": "When you submit a score, the mobile service calculates the new rankings.",
          "pos": [
            114,
            186
          ]
        },
        {
          "content": "On the back end, the mobile service creates a database with two tables:",
          "pos": [
            187,
            258
          ]
        }
      ]
    },
    {
      "pos": [
        2948,
        2988
      ],
      "content": "Player. Contains the player ID and name.",
      "nodes": [
        {
          "content": "Player.",
          "pos": [
            0,
            7
          ]
        },
        {
          "content": "Contains the player ID and name.",
          "pos": [
            8,
            40
          ]
        }
      ]
    },
    {
      "pos": [
        2991,
        3038
      ],
      "content": "PlayerRank. Contains a player's score and rank.",
      "nodes": [
        {
          "content": "PlayerRank.",
          "pos": [
            0,
            11
          ]
        },
        {
          "content": "Contains a player's score and rank.",
          "pos": [
            12,
            47
          ]
        }
      ]
    },
    {
      "pos": [
        3040,
        3119
      ],
      "content": "PlayerRank has a foreign key to Player. Each player has zero or one PlayerRank.",
      "nodes": [
        {
          "content": "PlayerRank has a foreign key to Player.",
          "pos": [
            0,
            39
          ]
        },
        {
          "content": "Each player has zero or one PlayerRank.",
          "pos": [
            40,
            79
          ]
        }
      ]
    },
    {
      "pos": [
        3121,
        3246
      ],
      "content": "In a real leaderboard app, PlayerRank might also have a game ID, so that a player could submit scores for more than one game."
    },
    {
      "pos": [
        3256,
        3572
      ],
      "content": "The client app can perform the full set of CRUD operations on Players. It can read or delete existing PlayerRank entities, but it cannot create or update them directly. That's because the rank value is calculated by the service. Instead, the client submits a score, and the service updates the ranks for all players.",
      "nodes": [
        {
          "content": "The client app can perform the full set of CRUD operations on Players.",
          "pos": [
            0,
            70
          ]
        },
        {
          "content": "It can read or delete existing PlayerRank entities, but it cannot create or update them directly.",
          "pos": [
            71,
            168
          ]
        },
        {
          "content": "That's because the rank value is calculated by the service.",
          "pos": [
            169,
            228
          ]
        },
        {
          "content": "Instead, the client submits a score, and the service updates the ranks for all players.",
          "pos": [
            229,
            316
          ]
        }
      ]
    },
    {
      "pos": [
        3574,
        3680
      ],
      "content": "Download the completed project <bpt id=\"p4\">[</bpt>here<ept id=\"p4\">](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af)</ept>."
    },
    {
      "pos": [
        3686,
        3704
      ],
      "content": "Create the project"
    },
    {
      "pos": [
        3706,
        3806
      ],
      "content": "Launch Visual Studio and create a new ASP.NET Web Application project. Name the project Leaderboard.",
      "nodes": [
        {
          "content": "Launch Visual Studio and create a new ASP.NET Web Application project.",
          "pos": [
            0,
            70
          ]
        },
        {
          "content": "Name the project Leaderboard.",
          "pos": [
            71,
            100
          ]
        }
      ]
    },
    {
      "pos": [
        3816,
        3959
      ],
      "content": "In Visual Studio 2013, the ASP.NET Web Application project includes a template for Azure Mobile Service. Select this template and click <bpt id=\"p5\">**</bpt>OK<ept id=\"p5\">**</ept>.",
      "nodes": [
        {
          "content": "In Visual Studio 2013, the ASP.NET Web Application project includes a template for Azure Mobile Service.",
          "pos": [
            0,
            104
          ]
        },
        {
          "content": "Select this template and click <bpt id=\"p5\">**</bpt>OK<ept id=\"p5\">**</ept>.",
          "pos": [
            105,
            181
          ]
        }
      ]
    },
    {
      "pos": [
        3969,
        4037
      ],
      "content": "The project template includes an example controller and data object."
    },
    {
      "pos": [
        4047,
        4211
      ],
      "content": "These aren't needed for the tutorial, so you can delete them from the project. Also remove the references to TodoItem  in WebApiConfig.cs and LeaderboardContext.cs.",
      "nodes": [
        {
          "content": "These aren't needed for the tutorial, so you can delete them from the project.",
          "pos": [
            0,
            78
          ]
        },
        {
          "content": "Also remove the references to TodoItem  in WebApiConfig.cs and LeaderboardContext.cs.",
          "pos": [
            79,
            164
          ]
        }
      ]
    },
    {
      "pos": [
        4216,
        4231
      ],
      "content": "Add data models"
    },
    {
      "pos": [
        4233,
        4401
      ],
      "content": "You will use <bpt id=\"p6\">[</bpt>EF Code First<ept id=\"p6\">](http://msdn.microsoft.com/data/ee712907#codefirst)</ept><ph id=\"ph9\"/> to define the database tables. Under the DataObjects folder, add a class named <ph id=\"ph10\">`Player`</ph>.",
      "nodes": [
        {
          "content": "You will use <bpt id=\"p6\">[</bpt>EF Code First<ept id=\"p6\">](http://msdn.microsoft.com/data/ee712907#codefirst)</ept><ph id=\"ph9\"/> to define the database tables.",
          "pos": [
            0,
            162
          ]
        },
        {
          "content": "Under the DataObjects folder, add a class named <ph id=\"ph10\">`Player`</ph>.",
          "pos": [
            163,
            239
          ]
        }
      ]
    },
    {
      "pos": [
        4610,
        4647
      ],
      "content": "Add another class named <ph id=\"ph11\">`PlayerRank`</ph>."
    },
    {
      "pos": [
        5043,
        5398
      ],
      "content": "Notice that both classes inherit from the <bpt id=\"p7\">**</bpt>EntityData<ept id=\"p7\">**</ept><ph id=\"ph12\"/> class. Deriving from <bpt id=\"p8\">**</bpt>EntityData<ept id=\"p8\">**</ept><ph id=\"ph13\"/> makes it easy for the app consume the data, using the cross-platform client library for Azure Mobile Services. <bpt id=\"p9\">**</bpt>EntityData<ept id=\"p9\">**</ept><ph id=\"ph14\"/> also makes it easier for an app to <bpt id=\"p10\">[</bpt>handle database write conflicts<ept id=\"p10\">](mobile-services-windows-store-dotnet-handle-database-conflicts.md)</ept>.",
      "nodes": [
        {
          "content": "Notice that both classes inherit from the <bpt id=\"p7\">**</bpt>EntityData<ept id=\"p7\">**</ept><ph id=\"ph12\"/> class.",
          "pos": [
            0,
            116
          ]
        },
        {
          "content": "Deriving from <bpt id=\"p8\">**</bpt>EntityData<ept id=\"p8\">**</ept><ph id=\"ph13\"/> makes it easy for the app consume the data, using the cross-platform client library for Azure Mobile Services.",
          "pos": [
            117,
            309
          ]
        },
        {
          "content": "<bpt id=\"p9\">**</bpt>EntityData<ept id=\"p9\">**</ept><ph id=\"ph14\"/> also makes it easier for an app to <bpt id=\"p10\">[</bpt>handle database write conflicts<ept id=\"p10\">](mobile-services-windows-store-dotnet-handle-database-conflicts.md)</ept>.",
          "pos": [
            310,
            554
          ]
        }
      ]
    },
    {
      "pos": [
        5400,
        5633
      ],
      "content": "The <ph id=\"ph15\">`PlayerRank`</ph><ph id=\"ph16\"/> class has a <bpt id=\"p11\">[</bpt>navigation property<ept id=\"p11\">](http://msdn.microsoft.com/data/jj713564.aspx)</ept><ph id=\"ph17\"/> that points to the related <ph id=\"ph18\">`Player`</ph><ph id=\"ph19\"/> entity. The <bpt id=\"p12\">**</bpt>[ForeignKey]<ept id=\"p12\">**</ept><ph id=\"ph20\"/> attribute tells EF that the <ph id=\"ph21\">`Player`</ph><ph id=\"ph22\"/> property represents a foreign key.",
      "nodes": [
        {
          "content": "The <ph id=\"ph15\">`PlayerRank`</ph><ph id=\"ph16\"/> class has a <bpt id=\"p11\">[</bpt>navigation property<ept id=\"p11\">](http://msdn.microsoft.com/data/jj713564.aspx)</ept><ph id=\"ph17\"/> that points to the related <ph id=\"ph18\">`Player`</ph><ph id=\"ph19\"/> entity.",
          "pos": [
            0,
            263
          ]
        },
        {
          "content": "The <bpt id=\"p12\">**</bpt>[ForeignKey]<ept id=\"p12\">**</ept><ph id=\"ph20\"/> attribute tells EF that the <ph id=\"ph21\">`Player`</ph><ph id=\"ph22\"/> property represents a foreign key.",
          "pos": [
            264,
            445
          ]
        }
      ]
    },
    {
      "pos": [
        5638,
        5661
      ],
      "content": "Add Web API controllers"
    },
    {
      "pos": [
        5663,
        5890
      ],
      "content": "Next, you will add Web API controllers for <ph id=\"ph23\">`Player`</ph><ph id=\"ph24\"/> and <ph id=\"ph25\">`PlayerRank`</ph>. Instead of plain Web API controllers, you will add a special kind of controller called a <bpt id=\"p13\">*</bpt>table controller<ept id=\"p13\">*</ept>, designed specifically for Azure Mobile Services.",
      "nodes": [
        {
          "content": "Next, you will add Web API controllers for <ph id=\"ph23\">`Player`</ph><ph id=\"ph24\"/> and <ph id=\"ph25\">`PlayerRank`</ph>.",
          "pos": [
            0,
            122
          ]
        },
        {
          "content": "Instead of plain Web API controllers, you will add a special kind of controller called a <bpt id=\"p13\">*</bpt>table controller<ept id=\"p13\">*</ept>, designed specifically for Azure Mobile Services.",
          "pos": [
            123,
            320
          ]
        }
      ]
    },
    {
      "pos": [
        5892,
        5964
      ],
      "content": "Right click the Controllers folder &gt;  <bpt id=\"p14\">**</bpt>Add<ept id=\"p14\">**</ept><ph id=\"ph26\"/> &gt; <bpt id=\"p15\">**</bpt>New Scaffolded Item<ept id=\"p15\">**</ept>."
    },
    {
      "pos": [
        5974,
        6144
      ],
      "content": "In the <bpt id=\"p16\">**</bpt>Add Scaffold<ept id=\"p16\">**</ept><ph id=\"ph28\"/> dialog, expand <bpt id=\"p17\">**</bpt>Common<ept id=\"p17\">**</ept><ph id=\"ph29\"/> on the left and select <bpt id=\"p18\">**</bpt>Azure Mobile Services<ept id=\"p18\">**</ept>. Then select <bpt id=\"p19\">**</bpt>Azure Mobile Services Table Controller<ept id=\"p19\">**</ept>. Click <bpt id=\"p20\">**</bpt>Add<ept id=\"p20\">**</ept>.",
      "nodes": [
        {
          "content": "In the <bpt id=\"p16\">**</bpt>Add Scaffold<ept id=\"p16\">**</ept><ph id=\"ph28\"/> dialog, expand <bpt id=\"p17\">**</bpt>Common<ept id=\"p17\">**</ept><ph id=\"ph29\"/> on the left and select <bpt id=\"p18\">**</bpt>Azure Mobile Services<ept id=\"p18\">**</ept>.",
          "pos": [
            0,
            249
          ]
        },
        {
          "content": "Then select <bpt id=\"p19\">**</bpt>Azure Mobile Services Table Controller<ept id=\"p19\">**</ept>.",
          "pos": [
            250,
            345
          ]
        },
        {
          "content": "Click <bpt id=\"p20\">**</bpt>Add<ept id=\"p20\">**</ept>.",
          "pos": [
            346,
            400
          ]
        }
      ]
    },
    {
      "pos": [
        6154,
        6187
      ],
      "content": "In the <bpt id=\"p21\">**</bpt>Add Controller<ept id=\"p21\">**</ept><ph id=\"ph31\"/> dialog:"
    },
    {
      "pos": [
        6193,
        6230
      ],
      "content": "Under <bpt id=\"p22\">**</bpt>Model class<ept id=\"p22\">**</ept>, select Player."
    },
    {
      "pos": [
        6235,
        6293
      ],
      "content": "Under <bpt id=\"p23\">**</bpt>Data context class<ept id=\"p23\">**</ept>, select MobileServiceContext."
    },
    {
      "pos": [
        6298,
        6337
      ],
      "content": "Name the controller \"PlayerController\"."
    },
    {
      "pos": [
        6342,
        6356
      ],
      "content": "Click <bpt id=\"p24\">**</bpt>Add<ept id=\"p24\">**</ept>."
    },
    {
      "pos": [
        6359,
        6422
      ],
      "content": "This step adds a file named PlayerController.cs to the project."
    },
    {
      "pos": [
        6432,
        6568
      ],
      "content": "The controller derives from <bpt id=\"p25\">**</bpt>TableController<ph id=\"ph33\">&lt;T&gt;</ph><ept id=\"p25\">**</ept>. This class inherits <bpt id=\"p26\">**</bpt>ApiController<ept id=\"p26\">**</ept>, but is specialized for Azure Mobile Services.",
      "nodes": [
        {
          "content": "The controller derives from <bpt id=\"p25\">**</bpt>TableController<ph id=\"ph33\">&lt;T&gt;</ph><ept id=\"p25\">**</ept>.",
          "pos": [
            0,
            116
          ]
        },
        {
          "content": "This class inherits <bpt id=\"p26\">**</bpt>ApiController<ept id=\"p26\">**</ept>, but is specialized for Azure Mobile Services.",
          "pos": [
            117,
            241
          ]
        }
      ]
    },
    {
      "pos": [
        6572,
        6918
      ],
      "content": "Routing: The default route for a <bpt id=\"p27\">**</bpt>TableController<ept id=\"p27\">**</ept><ph id=\"ph34\"/> is <ph id=\"ph35\">`/tables/{table_name}/{id}`</ph>, where <bpt id=\"p28\">*</bpt>table_name<ept id=\"p28\">*</ept><ph id=\"ph36\"/> matches the entity name. So the route for the Player controller is <bpt id=\"p29\">*</bpt>/tables/player/{id}<ept id=\"p29\">*</ept>. This routing convention makes <bpt id=\"p30\">**</bpt>TableController<ept id=\"p30\">**</ept><ph id=\"ph37\"/> consistent with the Mobile Services <bpt id=\"p31\">[</bpt>REST API<ept id=\"p31\">](http://msdn.microsoft.com/library/azure/jj710104.aspx)</ept>.",
      "nodes": [
        {
          "content": "Routing: The default route for a <bpt id=\"p27\">**</bpt>TableController<ept id=\"p27\">**</ept><ph id=\"ph34\"/> is <ph id=\"ph35\">`/tables/{table_name}/{id}`</ph>, where <bpt id=\"p28\">*</bpt>table_name<ept id=\"p28\">*</ept><ph id=\"ph36\"/> matches the entity name.",
          "pos": [
            0,
            257
          ]
        },
        {
          "content": "So the route for the Player controller is <bpt id=\"p29\">*</bpt>/tables/player/{id}<ept id=\"p29\">*</ept>.",
          "pos": [
            258,
            362
          ]
        },
        {
          "content": "This routing convention makes <bpt id=\"p30\">**</bpt>TableController<ept id=\"p30\">**</ept><ph id=\"ph37\"/> consistent with the Mobile Services <bpt id=\"p31\">[</bpt>REST API<ept id=\"p31\">](http://msdn.microsoft.com/library/azure/jj710104.aspx)</ept>.",
          "pos": [
            363,
            610
          ]
        }
      ]
    },
    {
      "pos": [
        6921,
        7203
      ],
      "content": "Data access: For database operations, the <bpt id=\"p32\">**</bpt>TableController<ept id=\"p32\">**</ept><ph id=\"ph38\"/> class uses the <bpt id=\"p33\">**</bpt>IDomainManager<ept id=\"p33\">**</ept><ph id=\"ph39\"/> interface, which defines an abstraction for data access.  The scaffolding uses <bpt id=\"p34\">**</bpt>EntityDomainManager<ept id=\"p34\">**</ept>, which is a concrete implementation of <bpt id=\"p35\">**</bpt>IDomainManager<ept id=\"p35\">**</ept><ph id=\"ph40\"/> that wraps an EF context.",
      "nodes": [
        {
          "content": "Data access: For database operations, the <bpt id=\"p32\">**</bpt>TableController<ept id=\"p32\">**</ept><ph id=\"ph38\"/> class uses the <bpt id=\"p33\">**</bpt>IDomainManager<ept id=\"p33\">**</ept><ph id=\"ph39\"/> interface, which defines an abstraction for data access.",
          "pos": [
            0,
            262
          ]
        },
        {
          "content": "The scaffolding uses <bpt id=\"p34\">**</bpt>EntityDomainManager<ept id=\"p34\">**</ept>, which is a concrete implementation of <bpt id=\"p35\">**</bpt>IDomainManager<ept id=\"p35\">**</ept><ph id=\"ph40\"/> that wraps an EF context.",
          "pos": [
            264,
            487
          ]
        }
      ]
    },
    {
      "pos": [
        7205,
        7424
      ],
      "content": "Now add a second controller for PlayerRank entities. Follow the same steps, but choose PlayerRank for the model class. Use the same data context class; don't create a new one. Name the controller \"PlayerRankController\".",
      "nodes": [
        {
          "content": "Now add a second controller for PlayerRank entities.",
          "pos": [
            0,
            52
          ]
        },
        {
          "content": "Follow the same steps, but choose PlayerRank for the model class.",
          "pos": [
            53,
            118
          ]
        },
        {
          "content": "Use the same data context class; don't create a new one.",
          "pos": [
            119,
            175
          ]
        },
        {
          "content": "Name the controller \"PlayerRankController\".",
          "pos": [
            176,
            219
          ]
        }
      ]
    },
    {
      "pos": [
        7429,
        7465
      ],
      "content": "Use a DTO to return related entities"
    },
    {
      "pos": [
        7467,
        7522
      ],
      "content": "Recall that <ph id=\"ph41\">`PlayerRank`</ph><ph id=\"ph42\"/> has a related <ph id=\"ph43\">`Player`</ph><ph id=\"ph44\"/> entity:"
    },
    {
      "pos": [
        7734,
        7913
      ],
      "content": "The Mobile Service client library does not support navigation properties, and they will not be serialized. For example, here is the raw HTTP response for GET <ph id=\"ph45\">`/tables/PlayerRank`</ph>:",
      "nodes": [
        {
          "content": "The Mobile Service client library does not support navigation properties, and they will not be serialized.",
          "pos": [
            0,
            106
          ]
        },
        {
          "content": "For example, here is the raw HTTP response for GET <ph id=\"ph45\">`/tables/PlayerRank`</ph>:",
          "pos": [
            107,
            198
          ]
        }
      ]
    },
    {
      "pos": [
        8246,
        8402
      ],
      "content": "Notice that <ph id=\"ph46\">`Player`</ph><ph id=\"ph47\"/> is not included in the object graph. To include the player, we can flatten the object graph by defining a <bpt id=\"p36\">*</bpt>data transfer object<ept id=\"p36\">*</ept><ph id=\"ph48\"/> (DTO).",
      "nodes": [
        {
          "content": "Notice that <ph id=\"ph46\">`Player`</ph><ph id=\"ph47\"/> is not included in the object graph.",
          "pos": [
            0,
            91
          ]
        },
        {
          "content": "To include the player, we can flatten the object graph by defining a <bpt id=\"p36\">*</bpt>data transfer object<ept id=\"p36\">*</ept><ph id=\"ph48\"/> (DTO).",
          "pos": [
            92,
            245
          ]
        }
      ]
    },
    {
      "pos": [
        8404,
        8663
      ],
      "content": "A DTO is an object that defines how data is sent over the network. DTOs are useful whenever you want the wire format to look different than your database model. To create a DTO for <ph id=\"ph49\">`PlayerRank`</ph>, add a new class named <ph id=\"ph50\">`PlayerRankDto`</ph><ph id=\"ph51\"/> in the DataObjects folder.",
      "nodes": [
        {
          "content": "A DTO is an object that defines how data is sent over the network.",
          "pos": [
            0,
            66
          ]
        },
        {
          "content": "DTOs are useful whenever you want the wire format to look different than your database model.",
          "pos": [
            67,
            160
          ]
        },
        {
          "content": "To create a DTO for <ph id=\"ph49\">`PlayerRank`</ph>, add a new class named <ph id=\"ph50\">`PlayerRankDto`</ph><ph id=\"ph51\"/> in the DataObjects folder.",
          "pos": [
            161,
            312
          ]
        }
      ]
    },
    {
      "pos": [
        8950,
        9168
      ],
      "content": "In the <ph id=\"ph52\">`PlayerRankController`</ph><ph id=\"ph53\"/> class, we'll use the LINQ <bpt id=\"p37\">**</bpt>Select<ept id=\"p37\">**</ept><ph id=\"ph54\"/> method to convert <ph id=\"ph55\">`PlayerRank`</ph><ph id=\"ph56\"/> instances to <ph id=\"ph57\">`PlayerRankDto`</ph><ph id=\"ph58\"/> instances. Update the <ph id=\"ph59\">`GetAllPlayerRank`</ph><ph id=\"ph60\"/> and <ph id=\"ph61\">`GetPlayerRank`</ph><ph id=\"ph62\"/> controller methods as follows:",
      "nodes": [
        {
          "content": "In the <ph id=\"ph52\">`PlayerRankController`</ph><ph id=\"ph53\"/> class, we'll use the LINQ <bpt id=\"p37\">**</bpt>Select<ept id=\"p37\">**</ept><ph id=\"ph54\"/> method to convert <ph id=\"ph55\">`PlayerRank`</ph><ph id=\"ph56\"/> instances to <ph id=\"ph57\">`PlayerRankDto`</ph><ph id=\"ph58\"/> instances.",
          "pos": [
            0,
            294
          ]
        },
        {
          "content": "Update the <ph id=\"ph59\">`GetAllPlayerRank`</ph><ph id=\"ph60\"/> and <ph id=\"ph61\">`GetPlayerRank`</ph><ph id=\"ph62\"/> controller methods as follows:",
          "pos": [
            295,
            443
          ]
        }
      ]
    },
    {
      "pos": [
        9880,
        10086
      ],
      "content": "With these changes, the two GET methods return <ph id=\"ph63\">`PlayerRankDto`</ph><ph id=\"ph64\"/> objects to the client. The <ph id=\"ph65\">`PlayerRankDto.PlayerName`</ph><ph id=\"ph66\"/> property is set to the player name. Here is an example response after making this change:",
      "nodes": [
        {
          "content": "With these changes, the two GET methods return <ph id=\"ph63\">`PlayerRankDto`</ph><ph id=\"ph64\"/> objects to the client.",
          "pos": [
            0,
            119
          ]
        },
        {
          "content": "The <ph id=\"ph65\">`PlayerRankDto.PlayerName`</ph><ph id=\"ph66\"/> property is set to the player name.",
          "pos": [
            120,
            220
          ]
        },
        {
          "content": "Here is an example response after making this change:",
          "pos": [
            221,
            274
          ]
        }
      ]
    },
    {
      "pos": [
        10483,
        10542
      ],
      "content": "Notice that the JSON payload now includes the player names."
    },
    {
      "pos": [
        10544,
        10988
      ],
      "content": "Instead of using LINQ Select statements, another option is to use AutoMapper. This option requires some additional setup code, but enables automatic mapping from domain entities to DTOs. For more information, see <bpt id=\"p38\">[</bpt>Mapping between Database Types and Client Types in the .NET Backend using AutoMapper<ept id=\"p38\">](http://blogs.msdn.com/b/azuremobile/archive/2014/05/19/mapping-between-database-types-and-client-type-in-the-net-backend-using-automapper.aspx)</ept>.",
      "nodes": [
        {
          "content": "Instead of using LINQ Select statements, another option is to use AutoMapper.",
          "pos": [
            0,
            77
          ]
        },
        {
          "content": "This option requires some additional setup code, but enables automatic mapping from domain entities to DTOs.",
          "pos": [
            78,
            186
          ]
        },
        {
          "content": "For more information, see <bpt id=\"p38\">[</bpt>Mapping between Database Types and Client Types in the .NET Backend using AutoMapper<ept id=\"p38\">](http://blogs.msdn.com/b/azuremobile/archive/2014/05/19/mapping-between-database-types-and-client-type-in-the-net-backend-using-automapper.aspx)</ept>.",
          "pos": [
            187,
            484
          ]
        }
      ]
    },
    {
      "pos": [
        10993,
        11029
      ],
      "content": "Define a custom API to submit scores"
    },
    {
      "pos": [
        11031,
        11302
      ],
      "content": "The <ph id=\"ph67\">`PlayerRank`</ph><ph id=\"ph68\"/> entity includes a <ph id=\"ph69\">`Rank`</ph><ph id=\"ph70\"/> property. This value is calculated by the server, and we don't want clients setting it. Instead, clients will use a custom API to submit a player's score.  When the server gets a new score, it will update all of the player ranks.",
      "nodes": [
        {
          "content": "The <ph id=\"ph67\">`PlayerRank`</ph><ph id=\"ph68\"/> entity includes a <ph id=\"ph69\">`Rank`</ph><ph id=\"ph70\"/> property.",
          "pos": [
            0,
            119
          ]
        },
        {
          "content": "This value is calculated by the server, and we don't want clients setting it.",
          "pos": [
            120,
            197
          ]
        },
        {
          "content": "Instead, clients will use a custom API to submit a player's score.",
          "pos": [
            198,
            264
          ]
        },
        {
          "content": "When the server gets a new score, it will update all of the player ranks.",
          "pos": [
            266,
            339
          ]
        }
      ]
    },
    {
      "pos": [
        11304,
        11369
      ],
      "content": "First, add a class named <ph id=\"ph71\">`PlayerScore`</ph><ph id=\"ph72\"/> to the DataObjects folder."
    },
    {
      "pos": [
        11567,
        11686
      ],
      "content": "In the <ph id=\"ph73\">`PlayerRankController`</ph><ph id=\"ph74\"/> class, move the <ph id=\"ph75\">`MobileServiceContext`</ph><ph id=\"ph76\"/> variable from the constructor to a class variable:"
    },
    {
      "pos": [
        12201,
        12258
      ],
      "content": "Delete the following methods from <ph id=\"ph77\">`PlayerRankController`</ph>:"
    },
    {
      "pos": [
        12321,
        12375
      ],
      "content": "Then add the following code to <ph id=\"ph81\">`PlayerRankController`</ph>:"
    },
    {
      "pos": [
        13658,
        13824
      ],
      "content": "The <ph id=\"ph82\">`PostPlayerScore`</ph><ph id=\"ph83\"/> method takes a <ph id=\"ph84\">`PlayerScore`</ph><ph id=\"ph85\"/> instance as input. (The client will send the <ph id=\"ph86\">`PlayerScore`</ph><ph id=\"ph87\"/> in an HTTP POST request.) The method does the following:",
      "nodes": [
        {
          "content": "The <ph id=\"ph82\">`PostPlayerScore`</ph><ph id=\"ph83\"/> method takes a <ph id=\"ph84\">`PlayerScore`</ph><ph id=\"ph85\"/> instance as input.",
          "pos": [
            0,
            137
          ]
        },
        {
          "content": "(The client will send the <ph id=\"ph86\">`PlayerScore`</ph><ph id=\"ph87\"/> in an HTTP POST request.) The method does the following:",
          "pos": [
            138,
            268
          ]
        }
      ]
    },
    {
      "pos": [
        13830,
        13913
      ],
      "content": "Adds a new <ph id=\"ph88\">`PlayerRank`</ph><ph id=\"ph89\"/> for the player, if there isn't one in the database already."
    },
    {
      "pos": [
        13918,
        13945
      ],
      "content": "Updates the player's score."
    },
    {
      "pos": [
        13950,
        14009
      ],
      "content": "Run a SQL query that batch updates all of the player ranks."
    },
    {
      "pos": [
        14011,
        14076
      ],
      "content": "The <bpt id=\"p39\">**</bpt>[Route]<ept id=\"p39\">**</ept><ph id=\"ph90\"/> attribute defines a custom route for this method:"
    },
    {
      "pos": [
        14104,
        14437
      ],
      "content": "You could also put the method into a separate controller. There is no particular advantage either way, it just depends how you want to organize your code.\nTo learn more about the <bpt id=\"p40\">**</bpt>[Route]<ept id=\"p40\">**</ept><ph id=\"ph91\"/> attribute, see <bpt id=\"p41\">[</bpt>Attribute Routing in Web API<ept id=\"p41\">](http://www.asp.net/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2)</ept>.",
      "nodes": [
        {
          "content": "You could also put the method into a separate controller.",
          "pos": [
            0,
            57
          ]
        },
        {
          "content": "There is no particular advantage either way, it just depends how you want to organize your code.",
          "pos": [
            58,
            154
          ]
        },
        {
          "content": "To learn more about the <bpt id=\"p40\">**</bpt>[Route]<ept id=\"p40\">**</ept><ph id=\"ph91\"/> attribute, see <bpt id=\"p41\">[</bpt>Attribute Routing in Web API<ept id=\"p41\">](http://www.asp.net/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2)</ept>.",
          "pos": [
            155,
            428
          ]
        }
      ]
    },
    {
      "pos": [
        14442,
        14470
      ],
      "content": "Create the Windows Store app"
    },
    {
      "pos": [
        14472,
        14774
      ],
      "content": "In this section, I'll describe the Windows Store app that consumes the mobile service. However, I won't focus much on the XAML or the UI. Instead, I want to focus on the application logic. You can download the complete project <bpt id=\"p42\">[</bpt>here<ept id=\"p42\">](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af)</ept>.",
      "nodes": [
        {
          "content": "In this section, I'll describe the Windows Store app that consumes the mobile service.",
          "pos": [
            0,
            86
          ]
        },
        {
          "content": "However, I won't focus much on the XAML or the UI.",
          "pos": [
            87,
            137
          ]
        },
        {
          "content": "Instead, I want to focus on the application logic.",
          "pos": [
            138,
            188
          ]
        },
        {
          "content": "You can download the complete project <bpt id=\"p42\">[</bpt>here<ept id=\"p42\">](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af)</ept>.",
          "pos": [
            189,
            342
          ]
        }
      ]
    },
    {
      "pos": [
        14776,
        14869
      ],
      "content": "Add a new Windows Store App project to the solution. I used the Blank App (Windows) template.",
      "nodes": [
        {
          "content": "Add a new Windows Store App project to the solution.",
          "pos": [
            0,
            52
          ]
        },
        {
          "content": "I used the Blank App (Windows) template.",
          "pos": [
            53,
            93
          ]
        }
      ]
    },
    {
      "pos": [
        14880,
        15133
      ],
      "content": "Use NuGet Package Manager to add the Mobile Services client library. In Visual Studio, from the <bpt id=\"p43\">**</bpt>Tools<ept id=\"p43\">**</ept><ph id=\"ph93\"/> menu, select <bpt id=\"p44\">**</bpt>NuGet Package Manager<ept id=\"p44\">**</ept>. Then select <bpt id=\"p45\">**</bpt>Package Manager Console<ept id=\"p45\">**</ept>. In the Package Manager Console window, type the following command.",
      "nodes": [
        {
          "content": "Use NuGet Package Manager to add the Mobile Services client library.",
          "pos": [
            0,
            68
          ]
        },
        {
          "content": "In Visual Studio, from the <bpt id=\"p43\">**</bpt>Tools<ept id=\"p43\">**</ept><ph id=\"ph93\"/> menu, select <bpt id=\"p44\">**</bpt>NuGet Package Manager<ept id=\"p44\">**</ept>.",
          "pos": [
            69,
            240
          ]
        },
        {
          "content": "Then select <bpt id=\"p45\">**</bpt>Package Manager Console<ept id=\"p45\">**</ept>.",
          "pos": [
            241,
            321
          ]
        },
        {
          "content": "In the Package Manager Console window, type the following command.",
          "pos": [
            322,
            388
          ]
        }
      ]
    },
    {
      "pos": [
        15208,
        15278
      ],
      "content": "The -Project switch specifies which project to install the package to."
    },
    {
      "pos": [
        15283,
        15300
      ],
      "content": "Add model classes"
    },
    {
      "pos": [
        15302,
        15361
      ],
      "content": "Create a folder named Models and add the following classes:"
    },
    {
      "pos": [
        15926,
        16003
      ],
      "content": "These classes correspond directly to the data entities in the mobile service."
    },
    {
      "pos": [
        16008,
        16027
      ],
      "content": "Create a view model"
    },
    {
      "pos": [
        16029,
        16170
      ],
      "content": "Model-View-ViewModel (MVVM) is a variant of Model-View-Controller (MVC). The MVVM pattern helps separate application logic from presentation.",
      "nodes": [
        {
          "content": "Model-View-ViewModel (MVVM) is a variant of Model-View-Controller (MVC).",
          "pos": [
            0,
            72
          ]
        },
        {
          "content": "The MVVM pattern helps separate application logic from presentation.",
          "pos": [
            73,
            141
          ]
        }
      ]
    },
    {
      "pos": [
        16174,
        16251
      ],
      "content": "The model represents the domain data (player, player rank, and player score)."
    },
    {
      "pos": [
        16254,
        16311
      ],
      "content": "The view model is an abstract representation of the view."
    },
    {
      "pos": [
        16314,
        16440
      ],
      "content": "The view displays the view model and sends user input to the view model. For a Windows Store app, the view is defined in XAML.",
      "nodes": [
        {
          "content": "The view displays the view model and sends user input to the view model.",
          "pos": [
            0,
            72
          ]
        },
        {
          "content": "For a Windows Store app, the view is defined in XAML.",
          "pos": [
            73,
            126
          ]
        }
      ]
    },
    {
      "pos": [
        16451,
        16492
      ],
      "content": "Add a class named <ph id=\"ph95\">`LeaderboardViewModel`</ph>."
    },
    {
      "pos": [
        16975,
        17081
      ],
      "content": "Implement <bpt id=\"p46\">**</bpt>INotifyPropertyChanged<ept id=\"p46\">**</ept><ph id=\"ph96\"/> on the view model, so the view model can participate in data binding."
    },
    {
      "pos": [
        17697,
        17774
      ],
      "content": "Next, add observable properties. The XAML will data bind to these properties.",
      "nodes": [
        {
          "content": "Next, add observable properties.",
          "pos": [
            0,
            32
          ]
        },
        {
          "content": "The XAML will data bind to these properties.",
          "pos": [
            33,
            77
          ]
        }
      ]
    },
    {
      "pos": [
        19086,
        19240
      ],
      "content": "The <ph id=\"ph97\">`IsPending`</ph><ph id=\"ph98\"/> property is true while an async operation is pending on the service. The <ph id=\"ph99\">`ErrorMessage`</ph><ph id=\"ph100\"/> property holds any error message from the service.",
      "nodes": [
        {
          "content": "The <ph id=\"ph97\">`IsPending`</ph><ph id=\"ph98\"/> property is true while an async operation is pending on the service.",
          "pos": [
            0,
            118
          ]
        },
        {
          "content": "The <ph id=\"ph99\">`ErrorMessage`</ph><ph id=\"ph100\"/> property holds any error message from the service.",
          "pos": [
            119,
            223
          ]
        }
      ]
    },
    {
      "pos": [
        19242,
        19302
      ],
      "content": "Finally, add methods that call through to the service layer."
    },
    {
      "pos": [
        22277,
        22311
      ],
      "content": "Add a MobileServiceClient instance"
    },
    {
      "pos": [
        22313,
        22402
      ],
      "content": "Open the <bpt id=\"p47\">*</bpt>App.xaml.cs<ept id=\"p47\">*</ept>file and add a <bpt id=\"p48\">**</bpt>MobileServiceClient<ept id=\"p48\">**</ept><ph id=\"ph101\"/> instance to the <ph id=\"ph102\">`App`</ph><ph id=\"ph103\"/> class."
    },
    {
      "pos": [
        22854,
        23267
      ],
      "content": "When you debug locally, the mobile service runs on IIS express. Visual Studio assigns a random port number, so the local URL is http://localhost:<bpt id=\"p49\">*</bpt>port<ept id=\"p49\">*</ept>, where <bpt id=\"p50\">*</bpt>port<ept id=\"p50\">*</ept><ph id=\"ph104\"/> is the port number. To get the port number, start the service in Visual Studio by pressing F5 to debug. Visual Studio will launch a browser and navigate to the service URL.  You can also find the local URL in the project properties, under <bpt id=\"p51\">**</bpt>Web<ept id=\"p51\">**</ept>.",
      "nodes": [
        {
          "content": "When you debug locally, the mobile service runs on IIS express.",
          "pos": [
            0,
            63
          ]
        },
        {
          "content": "Visual Studio assigns a random port number, so the local URL is http://localhost:<bpt id=\"p49\">*</bpt>port<ept id=\"p49\">*</ept>, where <bpt id=\"p50\">*</bpt>port<ept id=\"p50\">*</ept><ph id=\"ph104\"/> is the port number.",
          "pos": [
            64,
            281
          ]
        },
        {
          "content": "To get the port number, start the service in Visual Studio by pressing F5 to debug.",
          "pos": [
            282,
            365
          ]
        },
        {
          "content": "Visual Studio will launch a browser and navigate to the service URL.",
          "pos": [
            366,
            434
          ]
        },
        {
          "content": "You can also find the local URL in the project properties, under <bpt id=\"p51\">**</bpt>Web<ept id=\"p51\">**</ept>.",
          "pos": [
            436,
            549
          ]
        }
      ]
    },
    {
      "pos": [
        23272,
        23292
      ],
      "content": "Create the main page"
    },
    {
      "pos": [
        23294,
        23407
      ],
      "content": "In the main page, add an instance of the view model. Then set the view model as the <bpt id=\"p52\">**</bpt>DataContext<ept id=\"p52\">**</ept><ph id=\"ph105\"/> for the page.",
      "nodes": [
        {
          "content": "In the main page, add an instance of the view model.",
          "pos": [
            0,
            52
          ]
        },
        {
          "content": "Then set the view model as the <bpt id=\"p52\">**</bpt>DataContext<ept id=\"p52\">**</ept><ph id=\"ph105\"/> for the page.",
          "pos": [
            53,
            169
          ]
        }
      ]
    },
    {
      "pos": [
        23741,
        23947
      ],
      "content": "As I mentioned earlier, I won't show all of the XAML for the app. One benefit of the MVVM pattern is to separate presentation from app logic, so it's easy to change the UI, if you don't like the sample app.",
      "nodes": [
        {
          "content": "As I mentioned earlier, I won't show all of the XAML for the app.",
          "pos": [
            0,
            65
          ]
        },
        {
          "content": "One benefit of the MVVM pattern is to separate presentation from app logic, so it's easy to change the UI, if you don't like the sample app.",
          "pos": [
            66,
            206
          ]
        }
      ]
    },
    {
      "pos": [
        23949,
        23999
      ],
      "content": "The list of players is displayed in a <bpt id=\"p53\">**</bpt>ListBox<ept id=\"p53\">**</ept>:"
    },
    {
      "pos": [
        24130,
        24171
      ],
      "content": "Rankings are displayed in a <bpt id=\"p54\">**</bpt>ListView<ept id=\"p54\">**</ept>:"
    },
    {
      "pos": [
        24967,
        25015
      ],
      "content": "All data binding happens through the view model."
    },
    {
      "pos": [
        25020,
        25047
      ],
      "content": "Publish your mobile service"
    },
    {
      "pos": [
        25049,
        25162
      ],
      "content": "In this step, you will publish your mobile service to Microsoft Azure and modify the app to use the live service."
    },
    {
      "pos": [
        25164,
        25245
      ],
      "content": "In Solution Explorer, right-click the Leaderboard project and select <bpt id=\"p55\">**</bpt>Publish<ept id=\"p55\">**</ept>."
    },
    {
      "pos": [
        25256,
        25315
      ],
      "content": "In the <bpt id=\"p56\">**</bpt>Publish<ept id=\"p56\">**</ept><ph id=\"ph107\"/> dialog, click <bpt id=\"p57\">**</bpt>Azure Mobile Services<ept id=\"p57\">**</ept>."
    },
    {
      "pos": [
        25326,
        25399
      ],
      "content": "If you are not signed into your Azure account already, click <bpt id=\"p58\">**</bpt>Sign In<ept id=\"p58\">**</ept>."
    },
    {
      "pos": [
        25411,
        25513
      ],
      "content": "Select an existing Mobile Service, or click <bpt id=\"p59\">**</bpt>New<ept id=\"p59\">**</ept><ph id=\"ph110\"/> to create a new one. Then click <bpt id=\"p60\">**</bpt>OK<ept id=\"p60\">**</ept><ph id=\"ph111\"/> to publish.",
      "nodes": [
        {
          "content": "Select an existing Mobile Service, or click <bpt id=\"p59\">**</bpt>New<ept id=\"p59\">**</ept><ph id=\"ph110\"/> to create a new one.",
          "pos": [
            0,
            128
          ]
        },
        {
          "content": "Then click <bpt id=\"p60\">**</bpt>OK<ept id=\"p60\">**</ept><ph id=\"ph111\"/> to publish.",
          "pos": [
            129,
            214
          ]
        }
      ]
    },
    {
      "pos": [
        25524,
        25631
      ],
      "content": "The publishing process automatically creates the database. You don't need to configure a connection string.",
      "nodes": [
        {
          "content": "The publishing process automatically creates the database.",
          "pos": [
            0,
            58
          ]
        },
        {
          "content": "You don't need to configure a connection string.",
          "pos": [
            59,
            107
          ]
        }
      ]
    },
    {
      "pos": [
        25633,
        25723
      ],
      "content": "Now you are ready to connect the leaderboard app to the live service. You need two things:",
      "nodes": [
        {
          "content": "Now you are ready to connect the leaderboard app to the live service.",
          "pos": [
            0,
            69
          ]
        },
        {
          "content": "You need two things:",
          "pos": [
            70,
            90
          ]
        }
      ]
    },
    {
      "pos": [
        25727,
        25749
      ],
      "content": "The URL of the service"
    },
    {
      "pos": [
        25752,
        25771
      ],
      "content": "The application key"
    },
    {
      "pos": [
        25773,
        25996
      ],
      "content": "You can get both from the Azure classic portal. In the portal, click <bpt id=\"p61\">**</bpt>Mobile Services<ept id=\"p61\">**</ept>, and then click the mobile service. The service URL is listed on the dashboard tab. To get the application key, click <bpt id=\"p62\">**</bpt>Manage Keys<ept id=\"p62\">**</ept>.",
      "nodes": [
        {
          "content": "You can get both from the Azure classic portal.",
          "pos": [
            0,
            47
          ]
        },
        {
          "content": "In the portal, click <bpt id=\"p61\">**</bpt>Mobile Services<ept id=\"p61\">**</ept>, and then click the mobile service.",
          "pos": [
            48,
            164
          ]
        },
        {
          "content": "The service URL is listed on the dashboard tab.",
          "pos": [
            165,
            212
          ]
        },
        {
          "content": "To get the application key, click <bpt id=\"p62\">**</bpt>Manage Keys<ept id=\"p62\">**</ept>.",
          "pos": [
            213,
            303
          ]
        }
      ]
    },
    {
      "pos": [
        26007,
        26084
      ],
      "content": "In the <bpt id=\"p63\">**</bpt>Manage Access Keys<ept id=\"p63\">**</ept><ph id=\"ph114\"/> dialog, copy the value for the application key."
    },
    {
      "pos": [
        26096,
        26184
      ],
      "content": "Pass the service URL and the application key to the <bpt id=\"p64\">**</bpt>MobileServiceClient<ept id=\"p64\">**</ept><ph id=\"ph116\"/> constructor."
    },
    {
      "pos": [
        26542,
        26606
      ],
      "content": "Now when you run the app, it communicates with the real service."
    },
    {
      "pos": [
        26611,
        26621
      ],
      "content": "Next Steps"
    },
    {
      "pos": [
        26733,
        26822
      ],
      "content": "<bpt id=\"p68\">[</bpt><ept id=\"p68\">Add push notifications]</ept>; for example, when someone adds a new player or updates a score."
    },
    {
      "pos": [
        26878,
        27583
      ],
      "content": "[Overview]: #overview\n[About the sample app]: #about-the-sample-app\n[Create the project]: #create-the-project\n[Add data models]: #add-data-models\n[Add Web API controllers]: #add-web-api-controllers\n[Use a DTO to return related entities]: #use-a-dto-to-return-related-entities\n[Define a custom API to submit scores]: #define-a-custom-api-to-submit-scores\n[Create the Windows Store app]: #create-the-windows-store-app\n[Add model classes]: #add-model-classes\n[Create a view model]: #create-a-view-model\n[Add a MobileServiceClient instance]: #add-a-mobileserviceclient-instance\n[Create the main page]: #create-the-main-page\n[Publish your mobile service]: #publish-your-mobile-service\n[Next Steps]: #next-steps"
    }
  ],
  "content": "<properties\n    pageTitle=\"Creating a Windows Store leaderboard app with .NET Backend | Azure Mobile Services\"\n    description=\"Learn how to build a Windows Store leaderboard app using Azure Mobile Services with a .NET backend.\"\n    documentationCenter=\"windows\"\n    authors=\"rmcmurray\"\n    manager=\"wpickett\"\n    editor=\"\"\n    services=\"mobile-services\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-windows-store\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.date=\"01/09/2016\"\n    ms.author=\"glenga\"/>\n\n# Creating a Leaderboard App with Azure Mobile Services .NET Backend\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n\n\nThis tutorial shows how build a Windows Store app using Azure Mobile Services with a .NET backend. Azure Mobile Services provides a scalable and secure backend with built-in authentication, monitoring, push notifications, and other features, plus a cross-platform client library for building mobile apps. The .NET backend for Mobile Services is based on [ASP.NET Web API](http://asp.net/web-api), and gives .NET developers a first-class way to create REST APIs.\n\n## Overview\n\nWeb API is an open-source framework that gives .NET developers a first-class way to create REST APIs. You can host a Web API solution on Azure Websites, on Azure Mobile Services using the .NET backend, or even self-hosted in a custom process. Mobile Services is a hosting environment that is designed especially for mobile apps. When you host your Web API service on Mobile Services, you get the following advantages in addition to data storage:\n\n- Built-in authentication with social providers and Azure Active Directory (AAD).\n- Push notifications to apps using device-specific notification services.\n- A full set of client libraries that make it easy to access your service from any app.\n- Built-in logging and diagnostics.\n\nIn this tutorial you will:\n\n- Create a REST API using Azure Mobile Services.\n- Publish the service to Azure.\n- Create a Windows Store app that consumes the service.\n- Use Entity Framework (EF) to create foreign key relations and data transfer objects (DTOs).\n- Use ASP.NET Web API to define a custom API.\n\nThis tutorial uses [Visual Studio 2013 latest update](http://go.microsoft.com/fwlink/p/?LinkID=390465).\n\n\n## About the sample app\n\nA *leaderboard* shows a list of players for a game, along with their scores and the rank of each player. A leaderboard might be part of a larger game, or could be a separate app. A leaderboard is a real-world application, but is simple enough for a tutorial. Here is a screen shot of the app:\n\n![][1]\n\nTo keep the app simple, there is no actual game. Instead, you can add players and submit a score for each player. When you submit a score, the mobile service calculates the new rankings. On the back end, the mobile service creates a database with two tables:\n\n- Player. Contains the player ID and name.\n- PlayerRank. Contains a player's score and rank.\n\nPlayerRank has a foreign key to Player. Each player has zero or one PlayerRank.\n\nIn a real leaderboard app, PlayerRank might also have a game ID, so that a player could submit scores for more than one game.\n\n![][2]\n\nThe client app can perform the full set of CRUD operations on Players. It can read or delete existing PlayerRank entities, but it cannot create or update them directly. That's because the rank value is calculated by the service. Instead, the client submits a score, and the service updates the ranks for all players.\n\nDownload the completed project [here](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af).\n\n\n## Create the project\n\nLaunch Visual Studio and create a new ASP.NET Web Application project. Name the project Leaderboard.\n\n![][3]\n\nIn Visual Studio 2013, the ASP.NET Web Application project includes a template for Azure Mobile Service. Select this template and click **OK**.\n\n![][4]\n\nThe project template includes an example controller and data object.\n\n![][5]\n\nThese aren't needed for the tutorial, so you can delete them from the project. Also remove the references to TodoItem  in WebApiConfig.cs and LeaderboardContext.cs.\n\n## Add data models\n\nYou will use [EF Code First](http://msdn.microsoft.com/data/ee712907#codefirst) to define the database tables. Under the DataObjects folder, add a class named `Player`.\n\n    using Microsoft.WindowsAzure.Mobile.Service;\n\n    namespace Leaderboard.DataObjects\n    {\n        public class Player : EntityData\n        {\n            public string Name { get; set; }\n        }\n    }\n\nAdd another class named `PlayerRank`.\n\n    using Microsoft.WindowsAzure.Mobile.Service;\n    using System.ComponentModel.DataAnnotations.Schema;\n\n    namespace Leaderboard.DataObjects\n    {\n        public class PlayerRank : EntityData\n        {\n            public int Score { get; set; }\n            public int Rank { get; set; }\n\n            [ForeignKey(\"Id\")]\n            public virtual Player Player { get; set; }\n        }\n    }\n\nNotice that both classes inherit from the **EntityData** class. Deriving from **EntityData** makes it easy for the app consume the data, using the cross-platform client library for Azure Mobile Services. **EntityData** also makes it easier for an app to [handle database write conflicts](mobile-services-windows-store-dotnet-handle-database-conflicts.md).\n\nThe `PlayerRank` class has a [navigation property](http://msdn.microsoft.com/data/jj713564.aspx) that points to the related `Player` entity. The **[ForeignKey]** attribute tells EF that the `Player` property represents a foreign key.\n\n## Add Web API controllers\n\nNext, you will add Web API controllers for `Player` and `PlayerRank`. Instead of plain Web API controllers, you will add a special kind of controller called a *table controller*, designed specifically for Azure Mobile Services.\n\nRight click the Controllers folder >  **Add** > **New Scaffolded Item**.\n\n![][6]\n\nIn the **Add Scaffold** dialog, expand **Common** on the left and select **Azure Mobile Services**. Then select **Azure Mobile Services Table Controller**. Click **Add**.\n\n![][7]\n\nIn the **Add Controller** dialog:\n\n1.  Under **Model class**, select Player.\n2.  Under **Data context class**, select MobileServiceContext.\n3.  Name the controller \"PlayerController\".\n4.  Click **Add**.\n\n\nThis step adds a file named PlayerController.cs to the project.\n\n![][8]\n\nThe controller derives from **TableController<T>**. This class inherits **ApiController**, but is specialized for Azure Mobile Services.\n\n- Routing: The default route for a **TableController** is `/tables/{table_name}/{id}`, where *table_name* matches the entity name. So the route for the Player controller is */tables/player/{id}*. This routing convention makes **TableController** consistent with the Mobile Services [REST API](http://msdn.microsoft.com/library/azure/jj710104.aspx).\n- Data access: For database operations, the **TableController** class uses the **IDomainManager** interface, which defines an abstraction for data access.  The scaffolding uses **EntityDomainManager**, which is a concrete implementation of **IDomainManager** that wraps an EF context.\n\nNow add a second controller for PlayerRank entities. Follow the same steps, but choose PlayerRank for the model class. Use the same data context class; don't create a new one. Name the controller \"PlayerRankController\".\n\n## Use a DTO to return related entities\n\nRecall that `PlayerRank` has a related `Player` entity:\n\n    public class PlayerRank : EntityData\n    {\n        public int Score { get; set; }\n        public int Rank { get; set; }\n\n        [ForeignKey(\"Id\")]\n        public virtual Player Player { get; set; }\n    }\n\nThe Mobile Service client library does not support navigation properties, and they will not be serialized. For example, here is the raw HTTP response for GET `/tables/PlayerRank`:\n\n    HTTP/1.1 200 OK\n    Cache-Control: no-cache\n    Pragma: no-cache\n    Content-Length: 97\n    Content-Type: application/json; charset=utf-8\n    Expires: 0\n    Server: Microsoft-IIS/8.0\n    Date: Mon, 21 Apr 2014 17:58:43 GMT\n\n    [{\"id\":\"1\",\"rank\":1,\"score\":150},{\"id\":\"2\",\"rank\":3,\"score\":100},{\"id\":\"3\",\"rank\":1,\"score\":150}]\n\nNotice that `Player` is not included in the object graph. To include the player, we can flatten the object graph by defining a *data transfer object* (DTO).\n\nA DTO is an object that defines how data is sent over the network. DTOs are useful whenever you want the wire format to look different than your database model. To create a DTO for `PlayerRank`, add a new class named `PlayerRankDto` in the DataObjects folder.\n\n    namespace Leaderboard.DataObjects\n    {\n        public class PlayerRankDto\n        {\n            public string Id { get; set; }\n            public string PlayerName { get; set; }\n            public int Score { get; set; }\n            public int Rank { get; set; }\n        }\n    }\n\nIn the `PlayerRankController` class, we'll use the LINQ **Select** method to convert `PlayerRank` instances to `PlayerRankDto` instances. Update the `GetAllPlayerRank` and `GetPlayerRank` controller methods as follows:\n\n    // GET tables/PlayerRank\n    public IQueryable<PlayerRankDto> GetAllPlayerRank()\n    {\n        return Query().Select(x => new PlayerRankDto()\n        {\n            Id = x.Id,\n            PlayerName = x.Player.Name,\n            Score = x.Score,\n            Rank = x.Rank\n        });\n    }\n\n    // GET tables/PlayerRank/48D68C86-6EA6-4C25-AA33-223FC9A27959\n    public SingleResult<PlayerRankDto> GetPlayerRank(string id)\n    {\n        var result = Lookup(id).Queryable.Select(x => new PlayerRankDto()\n        {\n            Id = x.Id,\n            PlayerName = x.Player.Name,\n            Score = x.Score,\n            Rank = x.Rank\n        });\n\n        return SingleResult<PlayerRankDto>.Create(result);\n    }\n\nWith these changes, the two GET methods return `PlayerRankDto` objects to the client. The `PlayerRankDto.PlayerName` property is set to the player name. Here is an example response after making this change:\n\n    HTTP/1.1 200 OK\n    Cache-Control: no-cache\n    Pragma: no-cache\n    Content-Length: 160\n    Content-Type: application/json; charset=utf-8\n    Expires: 0\n    Server: Microsoft-IIS/8.0\n    Date: Mon, 21 Apr 2014 19:57:08 GMT\n\n    [{\"id\":\"1\",\"playerName\":\"Alice\",\"score\":150,\"rank\":1},{\"id\":\"2\",\"playerName\":\"Bob\",\"score\":100,\"rank\":3},{\"id\":\"3\",\"playerName\":\"Charles\",\"score\":150,\"rank\":1}]\n\nNotice that the JSON payload now includes the player names.\n\nInstead of using LINQ Select statements, another option is to use AutoMapper. This option requires some additional setup code, but enables automatic mapping from domain entities to DTOs. For more information, see [Mapping between Database Types and Client Types in the .NET Backend using AutoMapper](http://blogs.msdn.com/b/azuremobile/archive/2014/05/19/mapping-between-database-types-and-client-type-in-the-net-backend-using-automapper.aspx).\n\n## Define a custom API to submit scores\n\nThe `PlayerRank` entity includes a `Rank` property. This value is calculated by the server, and we don't want clients setting it. Instead, clients will use a custom API to submit a player's score.  When the server gets a new score, it will update all of the player ranks.\n\nFirst, add a class named `PlayerScore` to the DataObjects folder.\n\n    namespace Leaderboard.DataObjects\n    {\n        public class PlayerScore\n        {\n            public string PlayerId { get; set; }\n            public int Score { get; set; }\n        }\n    }\n\nIn the `PlayerRankController` class, move the `MobileServiceContext` variable from the constructor to a class variable:\n\n    public class PlayerRankController : TableController<PlayerRank>\n    {\n        // Add this:\n        MobileServiceContext context = new MobileServiceContext();\n\n        protected override void Initialize(HttpControllerContext controllerContext)\n        {\n            base.Initialize(controllerContext);\n\n            // Delete this:\n            // MobileServiceContext context = new MobileServiceContext();\n            DomainManager = new EntityDomainManager<PlayerRank>(context, Request, Services);\n        }\n\n\nDelete the following methods from `PlayerRankController`:\n\n- `PatchPlayerRank`\n- `PostPlayerRank`\n- `DeletePlayerRank`\n\nThen add the following code to `PlayerRankController`:\n\n    [Route(\"api/score\")]\n    public async Task<IHttpActionResult> PostPlayerScore(PlayerScore score)\n    {\n        // Does this player exist?\n        var count = context.Players.Where(x => x.Id == score.PlayerId).Count();\n        if (count < 1)\n        {\n            return BadRequest();\n        }\n\n        // Try to find the PlayerRank entity for this player. If not found, create a new one.\n        PlayerRank rank = await context.PlayerRanks.FindAsync(score.PlayerId);\n        if (rank == null)\n        {\n            rank = new PlayerRank { Id = score.PlayerId };\n            rank.Score = score.Score;\n            context.PlayerRanks.Add(rank);\n        }\n        else\n        {\n            rank.Score = score.Score;\n        }\n\n        await context.SaveChangesAsync();\n\n        // Update rankings\n        // See http://stackoverflow.com/a/575799\n        const string updateCommand =\n            \"UPDATE r SET Rank = ((SELECT COUNT(*)+1 from {0}.PlayerRanks \" +\n            \"where Score > (select score from {0}.PlayerRanks where Id = r.Id)))\" +\n            \"FROM {0}.PlayerRanks as r\";\n\n        string command = String.Format(updateCommand, ServiceSettingsDictionary.GetSchemaName());\n        await context.Database.ExecuteSqlCommandAsync(command);\n\n        return Ok();\n    }\n\nThe `PostPlayerScore` method takes a `PlayerScore` instance as input. (The client will send the `PlayerScore` in an HTTP POST request.) The method does the following:\n\n1.  Adds a new `PlayerRank` for the player, if there isn't one in the database already.\n2.  Updates the player's score.\n3.  Run a SQL query that batch updates all of the player ranks.\n\nThe **[Route]** attribute defines a custom route for this method:\n\n    [Route(\"api/score\")]\n\nYou could also put the method into a separate controller. There is no particular advantage either way, it just depends how you want to organize your code.\nTo learn more about the **[Route]** attribute, see [Attribute Routing in Web API](http://www.asp.net/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2).\n\n## Create the Windows Store app\n\nIn this section, I'll describe the Windows Store app that consumes the mobile service. However, I won't focus much on the XAML or the UI. Instead, I want to focus on the application logic. You can download the complete project [here](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af).\n\nAdd a new Windows Store App project to the solution. I used the Blank App (Windows) template.\n\n![][10]\n\nUse NuGet Package Manager to add the Mobile Services client library. In Visual Studio, from the **Tools** menu, select **NuGet Package Manager**. Then select **Package Manager Console**. In the Package Manager Console window, type the following command.\n\n    Install-Package WindowsAzure.MobileServices -Project LeaderboardApp\n\nThe -Project switch specifies which project to install the package to.\n\n## Add model classes\n\nCreate a folder named Models and add the following classes:\n\n    namespace LeaderboardApp.Models\n    {\n        public class Player\n        {\n            public string Id { get; set; }\n            public string Name { get; set; }\n        }\n\n        public class PlayerRank\n        {\n            public string Id { get; set; }\n            public string PlayerName { get; set; }\n            public int Score { get; set; }\n            public int Rank { get; set; }\n        }\n\n        public class PlayerScore\n        {\n            public string PlayerId { get; set; }\n            public int Score { get; set; }\n        }\n    }\n\nThese classes correspond directly to the data entities in the mobile service.\n\n## Create a view model\n\nModel-View-ViewModel (MVVM) is a variant of Model-View-Controller (MVC). The MVVM pattern helps separate application logic from presentation.\n\n- The model represents the domain data (player, player rank, and player score).\n- The view model is an abstract representation of the view.\n- The view displays the view model and sends user input to the view model. For a Windows Store app, the view is defined in XAML.\n\n![][11]\n\nAdd a class named `LeaderboardViewModel`.\n\n    using LeaderboardApp.Models;\n    using Microsoft.WindowsAzure.MobileServices;\n    using System.ComponentModel;\n    using System.Net.Http;\n    using System.Threading.Tasks;\n\n    namespace LeaderboardApp.ViewModel\n    {\n        class LeaderboardViewModel : INotifyPropertyChanged\n        {\n            MobileServiceClient _client;\n\n            public LeaderboardViewModel(MobileServiceClient client)\n            {\n                _client = client;\n            }\n        }\n    }\n\nImplement **INotifyPropertyChanged** on the view model, so the view model can participate in data binding.\n\n    class LeaderboardViewModel : INotifyPropertyChanged\n    {\n        MobileServiceClient _client;\n\n        public LeaderboardViewModel(MobileServiceClient client)\n        {\n            _client = client;\n        }\n\n        // New code:\n        // INotifyPropertyChanged implementation\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public void NotifyPropertyChanged(string propertyName)\n        {\n            if (PropertyChanged != null)\n            {\n                PropertyChanged(this,\n                    new PropertyChangedEventArgs(propertyName));\n            }\n        }\n    }\n\nNext, add observable properties. The XAML will data bind to these properties.\n\n    class LeaderboardViewModel : INotifyPropertyChanged\n    {\n        // ...\n\n        // New code:\n        // View model properties\n        private MobileServiceCollection<Player, Player> _Players;\n        public MobileServiceCollection<Player, Player> Players\n        {\n            get { return _Players; }\n            set\n            {\n                _Players = value;\n                NotifyPropertyChanged(\"Players\");\n            }\n        }\n\n        private MobileServiceCollection<PlayerRank, PlayerRank> _Ranks;\n        public MobileServiceCollection<PlayerRank, PlayerRank> Ranks\n        {\n            get { return _Ranks; }\n            set\n            {\n                _Ranks = value;\n                NotifyPropertyChanged(\"Ranks\");\n            }\n        }\n\n        private bool _IsPending;\n        public bool IsPending\n        {\n            get { return _IsPending; }\n            set\n            {\n                _IsPending = value;\n                NotifyPropertyChanged(\"IsPending\");\n            }\n        }\n\n        private string _ErrorMessage = null;\n        public string ErrorMessage\n        {\n            get { return _ErrorMessage; }\n            set\n            {\n                _ErrorMessage = value;\n                NotifyPropertyChanged(\"ErrorMessage\");\n            }\n        }\n    }\n\nThe `IsPending` property is true while an async operation is pending on the service. The `ErrorMessage` property holds any error message from the service.\n\nFinally, add methods that call through to the service layer.\n\n    class LeaderboardViewModel : INotifyPropertyChanged\n    {\n        // ...\n\n        // New code:\n        // Service operations\n        public async Task GetAllPlayersAsync()\n        {\n            IsPending = true;\n            ErrorMessage = null;\n\n            try\n            {\n                IMobileServiceTable<Player> table = _client.GetTable<Player>();\n                Players = await table.OrderBy(x => x.Name).ToCollectionAsync();\n            }\n            catch (MobileServiceInvalidOperationException ex)\n            {\n                ErrorMessage = ex.Message;\n            }\n            catch (HttpRequestException ex2)\n            {\n                ErrorMessage = ex2.Message;\n            }\n            finally\n            {\n                IsPending = false;\n            }\n        }\n\n        public async Task AddPlayerAsync(Player player)\n        {\n            IsPending = true;\n            ErrorMessage = null;\n\n            try\n            {\n                IMobileServiceTable<Player> table = _client.GetTable<Player>();\n                await table.InsertAsync(player);\n                Players.Add(player);\n            }\n            catch (MobileServiceInvalidOperationException ex)\n            {\n                ErrorMessage = ex.Message;\n            }\n            catch (HttpRequestException ex2)\n            {\n                ErrorMessage = ex2.Message;\n            }\n            finally\n            {\n                IsPending = false;\n            }\n        }\n\n        public async Task SubmitScoreAsync(Player player, int score)\n        {\n            IsPending = true;\n            ErrorMessage = null;\n\n            var playerScore = new PlayerScore()\n            {\n                PlayerId = player.Id,\n                Score = score\n            };\n\n            try\n            {\n                await _client.InvokeApiAsync<PlayerScore, object>(\"score\", playerScore);\n                await GetAllRanksAsync();\n            }\n            catch (MobileServiceInvalidOperationException ex)\n            {\n                ErrorMessage = ex.Message;\n            }\n            catch (HttpRequestException ex2)\n            {\n                ErrorMessage = ex2.Message;\n            }\n            finally\n            {\n                IsPending = false;\n            }\n        }\n\n        public async Task GetAllRanksAsync()\n        {\n            IsPending = true;\n            ErrorMessage = null;\n\n            try\n            {\n                IMobileServiceTable<PlayerRank> table = _client.GetTable<PlayerRank>();\n                Ranks = await table.OrderBy(x => x.Rank).ToCollectionAsync();\n            }\n            catch (MobileServiceInvalidOperationException ex)\n            {\n                ErrorMessage = ex.Message;\n            }\n            catch (HttpRequestException ex2)\n            {\n                ErrorMessage = ex2.Message;\n            }\n            finally\n            {\n                IsPending = false;\n            }\n         }\n    }\n\n## Add a MobileServiceClient instance\n\nOpen the *App.xaml.cs*file and add a **MobileServiceClient** instance to the `App` class.\n\n    // New code:\n    using Microsoft.WindowsAzure.MobileServices;\n\n    namespace LeaderboardApp\n    {\n        sealed partial class App : Application\n        {\n            // New code.\n            // TODO: Replace 'port' with the actual port number.\n            const string serviceUrl = \"http://localhost:port/\";\n            public static MobileServiceClient MobileService = new MobileServiceClient(serviceUrl);\n\n\n            // ...\n        }\n    }\n\nWhen you debug locally, the mobile service runs on IIS express. Visual Studio assigns a random port number, so the local URL is http://localhost:*port*, where *port* is the port number. To get the port number, start the service in Visual Studio by pressing F5 to debug. Visual Studio will launch a browser and navigate to the service URL.  You can also find the local URL in the project properties, under **Web**.\n\n## Create the main page\n\nIn the main page, add an instance of the view model. Then set the view model as the **DataContext** for the page.\n\n    public sealed partial class MainPage : Page\n    {\n        // New code:\n        LeaderboardViewModel viewModel = new LeaderboardViewModel(App.MobileService);\n\n        public MainPage()\n        {\n            this.InitializeComponent();\n            // New code:\n            this.DataContext = viewModel;\n        }\n\n       // ...\n\n\nAs I mentioned earlier, I won't show all of the XAML for the app. One benefit of the MVVM pattern is to separate presentation from app logic, so it's easy to change the UI, if you don't like the sample app.\n\nThe list of players is displayed in a **ListBox**:\n\n    <ListBox Width=\"200\" Height=\"400\" x:Name=\"PlayerListBox\"\n        ItemsSource=\"{Binding Players}\" DisplayMemberPath=\"Name\"/>\n\nRankings are displayed in a **ListView**:\n\n    <ListView x:Name=\"RankingsListView\" ItemsSource=\"{Binding Ranks}\" SelectionMode=\"None\">\n        <!-- Header and styles not shown -->\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <Grid>\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"*\"/>\n                        <ColumnDefinition Width=\"2*\"/>\n                        <ColumnDefinition Width=\"*\"/>\n                    </Grid.ColumnDefinitions>\n                    <TextBlock Text=\"{Binding Path=Rank}\"/>\n                    <TextBlock Text=\"{Binding Path=PlayerName}\" Grid.Column=\"1\"/>\n                    <TextBlock Text=\"{Binding Path=Score}\" Grid.Column=\"2\"/>\n                </Grid>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n\nAll data binding happens through the view model.\n\n## Publish your mobile service\n\nIn this step, you will publish your mobile service to Microsoft Azure and modify the app to use the live service.\n\nIn Solution Explorer, right-click the Leaderboard project and select **Publish**.\n\n![][12]\n\nIn the **Publish** dialog, click **Azure Mobile Services**.\n\n![][13]\n\nIf you are not signed into your Azure account already, click **Sign In**.\n\n![][14]\n\n\nSelect an existing Mobile Service, or click **New** to create a new one. Then click **OK** to publish.\n\n![][15]\n\nThe publishing process automatically creates the database. You don't need to configure a connection string.\n\nNow you are ready to connect the leaderboard app to the live service. You need two things:\n\n- The URL of the service\n- The application key\n\nYou can get both from the Azure classic portal. In the portal, click **Mobile Services**, and then click the mobile service. The service URL is listed on the dashboard tab. To get the application key, click **Manage Keys**.\n\n![][16]\n\nIn the **Manage Access Keys** dialog, copy the value for the application key.\n\n![][17]\n\n\nPass the service URL and the application key to the **MobileServiceClient** constructor.\n\n    sealed partial class App : Application\n    {\n        // TODO: Replace these strings with the real URL and key.\n        const string serviceUrl = \"https://yourapp.azure-mobile.net/\";\n        const string appKey = \"YOUR ACCESSS KEY\";\n\n        public static MobileServiceClient MobileService = new MobileServiceClient(serviceUrl, appKey);\n\n       // ...\n\nNow when you run the app, it communicates with the real service.\n\n## Next Steps\n\n* [Learn more about Azure Mobile Services]\n* [Learn more about Web API]\n* [Handle database write conflicts]\n* [Add push notifications]; for example, when someone adds a new player or updates a score.\n* [Get started with authentication]\n\n<!-- Anchors. -->\n[Overview]: #overview\n[About the sample app]: #about-the-sample-app\n[Create the project]: #create-the-project\n[Add data models]: #add-data-models\n[Add Web API controllers]: #add-web-api-controllers\n[Use a DTO to return related entities]: #use-a-dto-to-return-related-entities\n[Define a custom API to submit scores]: #define-a-custom-api-to-submit-scores\n[Create the Windows Store app]: #create-the-windows-store-app\n[Add model classes]: #add-model-classes\n[Create a view model]: #create-a-view-model\n[Add a MobileServiceClient instance]: #add-a-mobileserviceclient-instance\n[Create the main page]: #create-the-main-page\n[Publish your mobile service]: #publish-your-mobile-service\n[Next Steps]: #next-steps\n\n<!-- Images. -->\n\n[1]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/01leaderboard.png\n[2]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/02leaderboard.png\n[3]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/03leaderboard.png\n[4]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/04leaderboard.png\n[5]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/05leaderboard.png\n[6]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/06leaderboard.png\n[7]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/07leaderboard.png\n[8]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/08leaderboard.png\n[9]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/09leaderboard.png\n[10]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/10leaderboard.png\n[11]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/11leaderboard.png\n[12]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/12leaderboard.png\n[13]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/13leaderboard.png\n[14]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/14leaderboard.png\n[15]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/15leaderboard.png\n[16]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/16leaderboard.png\n[17]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-leaderboard/17leaderboard.png\n\n<!-- URLs. -->\n\n[Learn more about Azure Mobile Services]: /develop/mobile/resources/\n[Learn more about Web API]: http://asp.net/web-api\n[Handle database write conflicts]: mobile-services-windows-store-dotnet-handle-database-conflicts.md\n[Add push notifications]: ../notification-hubs-windows-store-dotnet-get-started.md\n[Get started with authentication]: /develop/mobile/tutorials/get-started-with-users-dotnet\n\n"
}