{
  "nodes": [
    {
      "pos": [
        26,
        94
      ],
      "content": "Apache Storm topologies with Visual Studio and C#  | Microsoft Azure"
    },
    {
      "pos": [
        112,
        257
      ],
      "content": "Learn how to create Storm topologies in C# by creating a simple word count topology in Visual Studio using the HDInsight Tools for Visual Studio."
    },
    {
      "pos": [
        577,
        665
      ],
      "content": "Develop C# topologies for Apache Storm on HDInsight using Hadoop tools for Visual Studio"
    },
    {
      "pos": [
        667,
        922
      ],
      "content": "Learn how to create a C# Storm topology by using the HDInsight tools for Visual Studio. This tutorial walks through the process of creating a new Storm project in Visual Studio, testing it locally, and deploying it to an Apache Storm on HDInsight cluster.",
      "nodes": [
        {
          "content": "Learn how to create a C# Storm topology by using the HDInsight tools for Visual Studio.",
          "pos": [
            0,
            87
          ]
        },
        {
          "content": "This tutorial walks through the process of creating a new Storm project in Visual Studio, testing it locally, and deploying it to an Apache Storm on HDInsight cluster.",
          "pos": [
            88,
            255
          ]
        }
      ]
    },
    {
      "pos": [
        924,
        1008
      ],
      "content": "You will also learn how to create hybrid topologies that use C# and Java components."
    },
    {
      "pos": [
        1086,
        1099
      ],
      "content": "Prerequisites"
    },
    {
      "pos": [
        1105,
        1151
      ],
      "content": "One of the following versions of Visual Studio"
    },
    {
      "pos": [
        1161,
        1252
      ],
      "content": "Visual Studio 2012 with <bpt id=\"p1\">[</bpt>Update 4<ept id=\"p1\">](http://www.microsoft.com/download/details.aspx?id=39305)</ept>"
    },
    {
      "pos": [
        1262,
        1434
      ],
      "content": "Visual Studio 2013 with <bpt id=\"p2\">[</bpt>Update 4<ept id=\"p2\">](http://www.microsoft.com/download/details.aspx?id=44921)</ept><ph id=\"ph3\"/> or <bpt id=\"p3\">[</bpt>Visual Studio 2013 Community<ept id=\"p3\">](http://go.microsoft.com/fwlink/?LinkId=517284)</ept>"
    },
    {
      "pos": [
        1444,
        1544
      ],
      "content": "Visual Studio 2015 or <bpt id=\"p4\">[</bpt>Visual Studio 2015 Community<ept id=\"p4\">](https://go.microsoft.com/fwlink/?LinkId=532606)</ept>"
    },
    {
      "pos": [
        1550,
        1574
      ],
      "content": "Azure SDK 2.5.1 or later"
    },
    {
      "pos": [
        1580,
        1789
      ],
      "content": "HDInsight Tools for Visual Studio: See <bpt id=\"p5\">[</bpt>Get started using HDInsight Tools for Visual Studio<ept id=\"p5\">](hdinsight-hadoop-visual-studio-tools-get-started.md)</ept><ph id=\"ph4\"/> to install and configure the HDInsight tools for Visual Studio."
    },
    {
      "pos": [
        1797,
        1886
      ],
      "content": "<ph id=\"ph5\">[AZURE.NOTE]</ph><ph id=\"ph6\"/> HDInsight Tools for Visual Studio are not supported on Visual Studio Express"
    },
    {
      "pos": [
        1892,
        2058
      ],
      "content": "Apache Storm on HDInsight cluster: See <bpt id=\"p6\">[</bpt>Getting started with Apache Storm on HDInsight<ept id=\"p6\">](hdinsight-apache-storm-tutorial-get-started.md)</ept><ph id=\"ph7\"/> for steps to create a cluster."
    },
    {
      "pos": [
        2066,
        2182
      ],
      "content": "<ph id=\"ph8\">[AZURE.NOTE]</ph><ph id=\"ph9\"/> Currently, the HDInsight Tools for Visual Studio only support Storm on HDInsight versions 3.2 clusters."
    },
    {
      "pos": [
        2186,
        2195
      ],
      "content": "Templates"
    },
    {
      "pos": [
        2197,
        2268
      ],
      "content": "The HDInsight Tools for Visual Studio provide the following templates::"
    },
    {
      "pos": [
        2272,
        2284
      ],
      "content": "Project type"
    },
    {
      "pos": [
        2287,
        2299
      ],
      "content": "Demonstrates"
    },
    {
      "pos": [
        2337,
        2354
      ],
      "content": "Storm Application"
    },
    {
      "pos": [
        2357,
        2388
      ],
      "content": "An empty Storm topology project"
    },
    {
      "pos": [
        2393,
        2422
      ],
      "content": "Storm Azure SQL Writer Sample"
    },
    {
      "pos": [
        2425,
        2459
      ],
      "content": "How to write to Azure SQL Database"
    },
    {
      "pos": [
        2464,
        2494
      ],
      "content": "Storm DocumentDB Reader Sample"
    },
    {
      "pos": [
        2497,
        2530
      ],
      "content": "How to read from Azure DocumentDB"
    },
    {
      "pos": [
        2535,
        2565
      ],
      "content": "Storm DocumentDB Writer Sample"
    },
    {
      "pos": [
        2568,
        2600
      ],
      "content": "How to write to Azure DocumentDB"
    },
    {
      "pos": [
        2605,
        2633
      ],
      "content": "Storm EventHub Reader Sample"
    },
    {
      "pos": [
        2636,
        2669
      ],
      "content": "How to read from Azure Event Hubs"
    },
    {
      "pos": [
        2674,
        2702
      ],
      "content": "Storm EventHub Writer Sample"
    },
    {
      "pos": [
        2705,
        2737
      ],
      "content": "How to write to Azure Event Hubs"
    },
    {
      "pos": [
        2742,
        2767
      ],
      "content": "Storm HBase Reader Sample"
    },
    {
      "pos": [
        2770,
        2814
      ],
      "content": "How to read from HBase on HDInsight clusters"
    },
    {
      "pos": [
        2819,
        2844
      ],
      "content": "Storm HBase Writer Sample"
    },
    {
      "pos": [
        2847,
        2890
      ],
      "content": "How to write to HBase on HDInsight clusters"
    },
    {
      "pos": [
        2895,
        2914
      ],
      "content": "Storm Hybrid Sample"
    },
    {
      "pos": [
        2917,
        2944
      ],
      "content": "How to use a Java component"
    },
    {
      "pos": [
        2949,
        2961
      ],
      "content": "Storm Sample"
    },
    {
      "pos": [
        2964,
        2991
      ],
      "content": "A basic word count topology"
    },
    {
      "pos": [
        2997,
        3143
      ],
      "content": "<ph id=\"ph10\">[AZURE.NOTE]</ph><ph id=\"ph11\"/> The HBase reader and writer samples use the HBase REST API to communicate with an HBase on HDInsight cluster, not the HBase Java API."
    },
    {
      "pos": [
        3145,
        3255
      ],
      "content": "In the steps in this document, you will use the basic Storm Application project type to create a new topology."
    },
    {
      "pos": [
        3259,
        3279
      ],
      "content": "Create a C# topology"
    },
    {
      "pos": [
        3285,
        3491
      ],
      "content": "If you have not already installed the latest version of the HDInsight Tools for Visual Studio, see <bpt id=\"p7\">[</bpt>Get started using HDInsight Tools for Visual Studio<ept id=\"p7\">](hdinsight-hadoop-visual-studio-tools-get-started.md)</ept>."
    },
    {
      "pos": [
        3497,
        3565
      ],
      "content": "Open Visual Studio, select <bpt id=\"p8\">**</bpt>File<ept id=\"p8\">**</ept><ph id=\"ph12\"/> &gt; <bpt id=\"p9\">**</bpt>New<ept id=\"p9\">**</ept>, and then <bpt id=\"p10\">**</bpt>Project<ept id=\"p10\">**</ept>."
    },
    {
      "pos": [
        3571,
        3806
      ],
      "content": "From the <bpt id=\"p11\">**</bpt>New Project<ept id=\"p11\">**</ept><ph id=\"ph13\"/> screen, expand <bpt id=\"p12\">**</bpt>Installed<ept id=\"p12\">**</ept><ph id=\"ph14\"/> &gt; <bpt id=\"p13\">**</bpt>Templates<ept id=\"p13\">**</ept>, and select <bpt id=\"p14\">**</bpt>HDInsight<ept id=\"p14\">**</ept>. From the list of templates, select <bpt id=\"p15\">**</bpt>Storm Application<ept id=\"p15\">**</ept>. At the bottom of the screen, enter <bpt id=\"p16\">**</bpt>WordCount<ept id=\"p16\">**</ept><ph id=\"ph15\"/> as the name of the application.",
      "nodes": [
        {
          "content": "From the <bpt id=\"p11\">**</bpt>New Project<ept id=\"p11\">**</ept><ph id=\"ph13\"/> screen, expand <bpt id=\"p12\">**</bpt>Installed<ept id=\"p12\">**</ept><ph id=\"ph14\"/> &gt; <bpt id=\"p13\">**</bpt>Templates<ept id=\"p13\">**</ept>, and select <bpt id=\"p14\">**</bpt>HDInsight<ept id=\"p14\">**</ept>.",
          "pos": [
            0,
            289
          ]
        },
        {
          "content": "From the list of templates, select <bpt id=\"p15\">**</bpt>Storm Application<ept id=\"p15\">**</ept>.",
          "pos": [
            290,
            387
          ]
        },
        {
          "content": "At the bottom of the screen, enter <bpt id=\"p16\">**</bpt>WordCount<ept id=\"p16\">**</ept><ph id=\"ph15\"/> as the name of the application.",
          "pos": [
            388,
            523
          ]
        }
      ]
    },
    {
      "pos": [
        3812,
        3899
      ],
      "content": "<ph id=\"ph16\">![</ph>image<ph id=\"ph17\">](./media/hdinsight-storm-develop-csharp-visual-studio-topology/new-project.png)</ph>"
    },
    {
      "pos": [
        3905,
        3977
      ],
      "content": "After the project has been created, you should have the following files:"
    },
    {
      "pos": [
        3987,
        4138
      ],
      "content": "<bpt id=\"p17\">**</bpt>Program.cs<ept id=\"p17\">**</ept>: This defines the topology for your project. Note that a default topology that consists of one spout and one bolt is created by default.",
      "nodes": [
        {
          "content": "<bpt id=\"p17\">**</bpt>Program.cs<ept id=\"p17\">**</ept>: This defines the topology for your project.",
          "pos": [
            0,
            99
          ]
        },
        {
          "content": "Note that a default topology that consists of one spout and one bolt is created by default.",
          "pos": [
            100,
            191
          ]
        }
      ]
    },
    {
      "pos": [
        4148,
        4205
      ],
      "content": "<bpt id=\"p18\">**</bpt>Spout.cs<ept id=\"p18\">**</ept>: An example spout that emits random numbers."
    },
    {
      "pos": [
        4215,
        4295
      ],
      "content": "<bpt id=\"p19\">**</bpt>Bolt.cs<ept id=\"p19\">**</ept>: An example bolt that keeps a count of numbers emitted by the spout."
    },
    {
      "pos": [
        4301,
        4445
      ],
      "content": "As part of project creation, the latest <bpt id=\"p20\">[</bpt>SCP.NET packages<ept id=\"p20\">](https://www.nuget.org/packages/Microsoft.SCP.Net.SDK/)</ept><ph id=\"ph18\"/> will be downloaded from NuGet."
    },
    {
      "pos": [
        4447,
        4533
      ],
      "content": "In the next sections, you will modify this project into a basic WordCount application."
    },
    {
      "pos": [
        4538,
        4557
      ],
      "content": "Implement the spout"
    },
    {
      "pos": [
        4563,
        4686
      ],
      "content": "Open <bpt id=\"p21\">**</bpt>Spout.cs<ept id=\"p21\">**</ept>. Spouts are used to read data in a topology from an external source. The main components for a spout are:",
      "nodes": [
        {
          "content": "Open <bpt id=\"p21\">**</bpt>Spout.cs<ept id=\"p21\">**</ept>.",
          "pos": [
            0,
            58
          ]
        },
        {
          "content": "Spouts are used to read data in a topology from an external source.",
          "pos": [
            59,
            126
          ]
        },
        {
          "content": "The main components for a spout are:",
          "pos": [
            127,
            163
          ]
        }
      ]
    },
    {
      "pos": [
        4696,
        4772
      ],
      "content": "<bpt id=\"p22\">**</bpt>NextTuple<ept id=\"p22\">**</ept>: Called by Storm when the spout is allowed to emit new tuples."
    },
    {
      "pos": [
        4782,
        5027
      ],
      "content": "<bpt id=\"p23\">**</bpt>Ack<ept id=\"p23\">**</ept><ph id=\"ph19\"/> (transactional topology only): Handles acknowledgements initiated by other components in the topology for tuples sent from this spout. Acknowledging a tuple lets the spout know that it was processed successfully by downstream components.",
      "nodes": [
        {
          "content": "<bpt id=\"p23\">**</bpt>Ack<ept id=\"p23\">**</ept><ph id=\"ph19\"/> (transactional topology only): Handles acknowledgements initiated by other components in the topology for tuples sent from this spout.",
          "pos": [
            0,
            197
          ]
        },
        {
          "content": "Acknowledging a tuple lets the spout know that it was processed successfully by downstream components.",
          "pos": [
            198,
            300
          ]
        }
      ]
    },
    {
      "pos": [
        5037,
        5236
      ],
      "content": "<bpt id=\"p24\">**</bpt>Fail<ept id=\"p24\">**</ept><ph id=\"ph20\"/> (transactional topology only): Handles tuples that are fail-processing other components in the topology. This provides the opportunity to re-emit the tuple so that it can be processed again.",
      "nodes": [
        {
          "content": "<bpt id=\"p24\">**</bpt>Fail<ept id=\"p24\">**</ept><ph id=\"ph20\"/> (transactional topology only): Handles tuples that are fail-processing other components in the topology.",
          "pos": [
            0,
            168
          ]
        },
        {
          "content": "This provides the opportunity to re-emit the tuple so that it can be processed again.",
          "pos": [
            169,
            254
          ]
        }
      ]
    },
    {
      "pos": [
        5242,
        5376
      ],
      "content": "Replace the contents of the <bpt id=\"p25\">**</bpt>Spout<ept id=\"p25\">**</ept><ph id=\"ph21\"/> class with the following. This creates a spout that randomly emits a sentence into the topology.",
      "nodes": [
        {
          "content": "Replace the contents of the <bpt id=\"p25\">**</bpt>Spout<ept id=\"p25\">**</ept><ph id=\"ph21\"/> class with the following.",
          "pos": [
            0,
            118
          ]
        },
        {
          "content": "This creates a spout that randomly emits a sentence into the topology.",
          "pos": [
            119,
            189
          ]
        }
      ]
    },
    {
      "pos": [
        7139,
        7216
      ],
      "content": "Take a moment to read through the comments to understand what this code does."
    },
    {
      "pos": [
        7221,
        7240
      ],
      "content": "Implement the bolts"
    },
    {
      "pos": [
        7246,
        7300
      ],
      "content": "Delete the existing <bpt id=\"p26\">**</bpt>Bolt.cs<ept id=\"p26\">**</ept><ph id=\"ph22\"/> file from the project."
    },
    {
      "pos": [
        7306,
        7525
      ],
      "content": "In <bpt id=\"p27\">**</bpt>Solution Explorer<ept id=\"p27\">**</ept>, right-click the project and select <bpt id=\"p28\">**</bpt>Add<ept id=\"p28\">**</ept><ph id=\"ph23\"/> &gt; <bpt id=\"p29\">**</bpt>New item<ept id=\"p29\">**</ept>. From the list, select <bpt id=\"p30\">**</bpt>Storm Bolt<ept id=\"p30\">**</ept>, and enter <bpt id=\"p31\">**</bpt>Splitter.cs<ept id=\"p31\">**</ept><ph id=\"ph24\"/> as the name. Repeat this to create a second bolt named <bpt id=\"p32\">**</bpt>Counter.cs<ept id=\"p32\">**</ept>.",
      "nodes": [
        {
          "content": "In <bpt id=\"p27\">**</bpt>Solution Explorer<ept id=\"p27\">**</ept>, right-click the project and select <bpt id=\"p28\">**</bpt>Add<ept id=\"p28\">**</ept><ph id=\"ph23\"/> &gt; <bpt id=\"p29\">**</bpt>New item<ept id=\"p29\">**</ept>.",
          "pos": [
            0,
            222
          ]
        },
        {
          "content": "From the list, select <bpt id=\"p30\">**</bpt>Storm Bolt<ept id=\"p30\">**</ept>, and enter <bpt id=\"p31\">**</bpt>Splitter.cs<ept id=\"p31\">**</ept><ph id=\"ph24\"/> as the name.",
          "pos": [
            223,
            394
          ]
        },
        {
          "content": "Repeat this to create a second bolt named <bpt id=\"p32\">**</bpt>Counter.cs<ept id=\"p32\">**</ept>.",
          "pos": [
            395,
            492
          ]
        }
      ]
    },
    {
      "pos": [
        7535,
        7646
      ],
      "content": "<bpt id=\"p33\">**</bpt>Splitter.cs<ept id=\"p33\">**</ept>: Implements a bolt that splits sentences into individual words and emits a new stream of words."
    },
    {
      "pos": [
        7656,
        7772
      ],
      "content": "<bpt id=\"p34\">**</bpt>Counter.cs<ept id=\"p34\">**</ept>: Implements a bolt that counts each word and emits a new stream of words and the count for each word."
    },
    {
      "pos": [
        7780,
        7925
      ],
      "content": "<ph id=\"ph25\">[AZURE.NOTE]</ph><ph id=\"ph26\"/> These bolts simply read and write to streams, but you can also use a bolt to communicate with sources such as a database or service."
    },
    {
      "pos": [
        7931,
        8146
      ],
      "content": "Open <bpt id=\"p35\">**</bpt>Splitter.cs<ept id=\"p35\">**</ept>. Note that it has only one method by default: <bpt id=\"p36\">**</bpt>Execute<ept id=\"p36\">**</ept>. This is called when the bolt receives a tuple for processing. Here, you can read and process incoming tuples, and emit outbound tuples.",
      "nodes": [
        {
          "content": "Open <bpt id=\"p35\">**</bpt>Splitter.cs<ept id=\"p35\">**</ept>.",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "Note that it has only one method by default: <bpt id=\"p36\">**</bpt>Execute<ept id=\"p36\">**</ept>.",
          "pos": [
            62,
            159
          ]
        },
        {
          "content": "This is called when the bolt receives a tuple for processing.",
          "pos": [
            160,
            221
          ]
        },
        {
          "content": "Here, you can read and process incoming tuples, and emit outbound tuples.",
          "pos": [
            222,
            295
          ]
        }
      ]
    },
    {
      "pos": [
        8152,
        8223
      ],
      "content": "Replace the contents of the <bpt id=\"p37\">**</bpt>Splitter<ept id=\"p37\">**</ept><ph id=\"ph27\"/> class with the following code:"
    },
    {
      "pos": [
        9711,
        9788
      ],
      "content": "Take a moment to read through the comments to understand what this code does."
    },
    {
      "pos": [
        9794,
        9864
      ],
      "content": "Open <bpt id=\"p38\">**</bpt>Counter.cs<ept id=\"p38\">**</ept><ph id=\"ph28\"/> and replace the class contents with the following:"
    },
    {
      "pos": [
        11800,
        11877
      ],
      "content": "Take a moment to read through the comments to understand what this code does."
    },
    {
      "pos": [
        11882,
        11901
      ],
      "content": "Define the topology"
    },
    {
      "pos": [
        11903,
        12041
      ],
      "content": "Spouts and bolts are arranged in a graph, which defines how the data flows between components. For this topology, the graph is as follows:",
      "nodes": [
        {
          "content": "Spouts and bolts are arranged in a graph, which defines how the data flows between components.",
          "pos": [
            0,
            94
          ]
        },
        {
          "content": "For this topology, the graph is as follows:",
          "pos": [
            95,
            138
          ]
        }
      ]
    },
    {
      "pos": [
        12043,
        12168
      ],
      "content": "<ph id=\"ph29\">![</ph>image of how components are arranged<ph id=\"ph30\">](./media/hdinsight-storm-develop-csharp-visual-studio-topology/wordcount-topology.png)</ph>"
    },
    {
      "pos": [
        12170,
        12358
      ],
      "content": "Sentences are emitted from the spout, which are distributed to instances of the Splitter bolt. The Splitter bolt breaks the sentences into words, which are distributed to the Counter bolt.",
      "nodes": [
        {
          "content": "Sentences are emitted from the spout, which are distributed to instances of the Splitter bolt.",
          "pos": [
            0,
            94
          ]
        },
        {
          "content": "The Splitter bolt breaks the sentences into words, which are distributed to the Counter bolt.",
          "pos": [
            95,
            188
          ]
        }
      ]
    },
    {
      "pos": [
        12360,
        12719
      ],
      "content": "Because word count is held locally in the Counter instance, we want to make sure that specific words flow to the same Counter bolt instance, so we have only one instance keeping track of a specific word. But for the Splitter bolt, it really doesn't matter which bolt receives which sentence, so we simply want to load balance sentences across those instances.",
      "nodes": [
        {
          "content": "Because word count is held locally in the Counter instance, we want to make sure that specific words flow to the same Counter bolt instance, so we have only one instance keeping track of a specific word.",
          "pos": [
            0,
            203
          ]
        },
        {
          "content": "But for the Splitter bolt, it really doesn't matter which bolt receives which sentence, so we simply want to load balance sentences across those instances.",
          "pos": [
            204,
            359
          ]
        }
      ]
    },
    {
      "pos": [
        12721,
        12969
      ],
      "content": "Open <bpt id=\"p39\">**</bpt>Program.cs<ept id=\"p39\">**</ept>. The important method is <bpt id=\"p40\">**</bpt>ITopologyBuilder<ept id=\"p40\">**</ept>, which is used to define the topology that is submitted to Storm. Replace the contents of <bpt id=\"p41\">**</bpt>ITopologyBuilder<ept id=\"p41\">**</ept><ph id=\"ph31\"/> with the following code to implement the topology described previously:",
      "nodes": [
        {
          "content": "Open <bpt id=\"p39\">**</bpt>Program.cs<ept id=\"p39\">**</ept>.",
          "pos": [
            0,
            60
          ]
        },
        {
          "content": "The important method is <bpt id=\"p40\">**</bpt>ITopologyBuilder<ept id=\"p40\">**</ept>, which is used to define the topology that is submitted to Storm.",
          "pos": [
            61,
            211
          ]
        },
        {
          "content": "Replace the contents of <bpt id=\"p41\">**</bpt>ITopologyBuilder<ept id=\"p41\">**</ept><ph id=\"ph31\"/> with the following code to implement the topology described previously:",
          "pos": [
            212,
            383
          ]
        }
      ]
    },
    {
      "pos": [
        14886,
        14963
      ],
      "content": "Take a moment to read through the comments to understand what this code does."
    },
    {
      "pos": [
        14967,
        14986
      ],
      "content": "Submit the topology"
    },
    {
      "pos": [
        14992,
        15087
      ],
      "content": "In <bpt id=\"p42\">**</bpt>Solution Explorer<ept id=\"p42\">**</ept>, right-click the project, and select <bpt id=\"p43\">**</bpt>Submit to Storm on HDInsight<ept id=\"p43\">**</ept>."
    },
    {
      "pos": [
        15095,
        15282
      ],
      "content": "<ph id=\"ph32\">[AZURE.NOTE]</ph><ph id=\"ph33\"/> If prompted, enter the login credentials for your Azure subscription. If you have more than one subscription, log in to the one that contains your Storm on HDInsight cluster.",
      "nodes": [
        {
          "content": "<ph id=\"ph32\">[AZURE.NOTE]</ph><ph id=\"ph33\"/> If prompted, enter the login credentials for your Azure subscription.",
          "pos": [
            0,
            116
          ]
        },
        {
          "content": "If you have more than one subscription, log in to the one that contains your Storm on HDInsight cluster.",
          "pos": [
            117,
            221
          ]
        }
      ]
    },
    {
      "pos": [
        15288,
        15477
      ],
      "content": "Select your Storm on HDInsight cluster from the <bpt id=\"p44\">**</bpt>Storm Cluster<ept id=\"p44\">**</ept><ph id=\"ph34\"/> drop-down list, and then select <bpt id=\"p45\">**</bpt>Submit<ept id=\"p45\">**</ept>. You can monitor if the submission is successful by using the <bpt id=\"p46\">**</bpt>Output<ept id=\"p46\">**</ept><ph id=\"ph35\"/> window.",
      "nodes": [
        {
          "content": "Select your Storm on HDInsight cluster from the <bpt id=\"p44\">**</bpt>Storm Cluster<ept id=\"p44\">**</ept><ph id=\"ph34\"/> drop-down list, and then select <bpt id=\"p45\">**</bpt>Submit<ept id=\"p45\">**</ept>.",
          "pos": [
            0,
            204
          ]
        },
        {
          "content": "You can monitor if the submission is successful by using the <bpt id=\"p46\">**</bpt>Output<ept id=\"p46\">**</ept><ph id=\"ph35\"/> window.",
          "pos": [
            205,
            339
          ]
        }
      ]
    },
    {
      "pos": [
        15483,
        15685
      ],
      "content": "When the topology has been successfully submitted, the <bpt id=\"p47\">**</bpt>Storm Topologies<ept id=\"p47\">**</ept><ph id=\"ph36\"/> for the cluster should appear. Select the <bpt id=\"p48\">**</bpt>WordCount<ept id=\"p48\">**</ept><ph id=\"ph37\"/> topology from the list to view information about the running topology.",
      "nodes": [
        {
          "content": "When the topology has been successfully submitted, the <bpt id=\"p47\">**</bpt>Storm Topologies<ept id=\"p47\">**</ept><ph id=\"ph36\"/> for the cluster should appear.",
          "pos": [
            0,
            161
          ]
        },
        {
          "content": "Select the <bpt id=\"p48\">**</bpt>WordCount<ept id=\"p48\">**</ept><ph id=\"ph37\"/> topology from the list to view information about the running topology.",
          "pos": [
            162,
            312
          ]
        }
      ]
    },
    {
      "pos": [
        15693,
        15889
      ],
      "content": "<ph id=\"ph38\">[AZURE.NOTE]</ph><ph id=\"ph39\"/> You can also view <bpt id=\"p49\">**</bpt>Storm Topologies<ept id=\"p49\">**</ept><ph id=\"ph40\"/> from <bpt id=\"p50\">**</bpt>Server Explorer<ept id=\"p50\">**</ept>: Expand <bpt id=\"p51\">**</bpt>Azure<ept id=\"p51\">**</ept><ph id=\"ph41\"/> &gt; <bpt id=\"p52\">**</bpt>HDInsight<ept id=\"p52\">**</ept>, right-click a Storm on HDInsight cluster, and then select <bpt id=\"p53\">**</bpt>View Storm Topologies<ept id=\"p53\">**</ept>."
    },
    {
      "pos": [
        15895,
        16028
      ],
      "content": "Use the links for the spouts or bolts to view information about these components. A new window will be opened for each item selected.",
      "nodes": [
        {
          "content": "Use the links for the spouts or bolts to view information about these components.",
          "pos": [
            0,
            81
          ]
        },
        {
          "content": "A new window will be opened for each item selected.",
          "pos": [
            82,
            133
          ]
        }
      ]
    },
    {
      "pos": [
        16034,
        16106
      ],
      "content": "From the <bpt id=\"p54\">**</bpt>Topology Summary<ept id=\"p54\">**</ept><ph id=\"ph42\"/> view, click <bpt id=\"p55\">**</bpt>Kill<ept id=\"p55\">**</ept><ph id=\"ph43\"/> to stop the topology."
    },
    {
      "pos": [
        16114,
        16214
      ],
      "content": "<ph id=\"ph44\">[AZURE.NOTE]</ph><ph id=\"ph45\"/> Storm topologies continue to run until they are deactivated, or the cluster is deleted."
    },
    {
      "pos": [
        16218,
        16240
      ],
      "content": "Transactional topology"
    },
    {
      "pos": [
        16242,
        16539
      ],
      "content": "The previous topology is non-transactional. The components within the topology do not implement any functionality for replaying messages if processing fails by a component in the topology. For an example transactional topology, create a new project and select <bpt id=\"p56\">**</bpt>Storm Sample<ept id=\"p56\">**</ept><ph id=\"ph46\"/> as the project type.",
      "nodes": [
        {
          "content": "The previous topology is non-transactional.",
          "pos": [
            0,
            43
          ]
        },
        {
          "content": "The components within the topology do not implement any functionality for replaying messages if processing fails by a component in the topology.",
          "pos": [
            44,
            188
          ]
        },
        {
          "content": "For an example transactional topology, create a new project and select <bpt id=\"p56\">**</bpt>Storm Sample<ept id=\"p56\">**</ept><ph id=\"ph46\"/> as the project type.",
          "pos": [
            189,
            352
          ]
        }
      ]
    },
    {
      "pos": [
        16541,
        16616
      ],
      "content": "Transactional topologies implement the following to support replay of data:"
    },
    {
      "pos": [
        16622,
        16884
      ],
      "content": "<bpt id=\"p57\">**</bpt>Metadata caching<ept id=\"p57\">**</ept>: The spout must store metadata about the data emitted so that the data can be retrieved and emitted again if a failure occurs. Because the data emitted by the sample is small, the raw data for each tuple is stored in a dictionary for replay.",
      "nodes": [
        {
          "content": "<bpt id=\"p57\">**</bpt>Metadata caching<ept id=\"p57\">**</ept>: The spout must store metadata about the data emitted so that the data can be retrieved and emitted again if a failure occurs.",
          "pos": [
            0,
            187
          ]
        },
        {
          "content": "Because the data emitted by the sample is small, the raw data for each tuple is stored in a dictionary for replay.",
          "pos": [
            188,
            302
          ]
        }
      ]
    },
    {
      "pos": [
        16890,
        17183
      ],
      "content": "<bpt id=\"p58\">**</bpt>Ack<ept id=\"p58\">**</ept>: Each bolt in the topology can call <ph id=\"ph47\">`this.ctx.Ack(tuple)`</ph><ph id=\"ph48\"/> to ack that it has successfully processed a tuple. When all bolts have acked the tuple, the <ph id=\"ph49\">`Ack`</ph><ph id=\"ph50\"/> method of the spout is invoked. This allows the spout to remove cached data for replay because the data was completely processed.",
      "nodes": [
        {
          "content": "<bpt id=\"p58\">**</bpt>Ack<ept id=\"p58\">**</ept>: Each bolt in the topology can call <ph id=\"ph47\">`this.ctx.Ack(tuple)`</ph><ph id=\"ph48\"/> to ack that it has successfully processed a tuple.",
          "pos": [
            0,
            190
          ]
        },
        {
          "content": "When all bolts have acked the tuple, the <ph id=\"ph49\">`Ack`</ph><ph id=\"ph50\"/> method of the spout is invoked.",
          "pos": [
            191,
            303
          ]
        },
        {
          "content": "This allows the spout to remove cached data for replay because the data was completely processed.",
          "pos": [
            304,
            401
          ]
        }
      ]
    },
    {
      "pos": [
        17189,
        17408
      ],
      "content": "<bpt id=\"p59\">**</bpt>Fail<ept id=\"p59\">**</ept>: Each bolt can call <ph id=\"ph51\">`this.ctx.Fail(tuple)`</ph><ph id=\"ph52\"/> to indicate that processing has failed for a tuple. The failure propagates to the <ph id=\"ph53\">`Fail`</ph><ph id=\"ph54\"/> method of the spout, where the tuple can be replayed by using cached metadata.",
      "nodes": [
        {
          "content": "<bpt id=\"p59\">**</bpt>Fail<ept id=\"p59\">**</ept>: Each bolt can call <ph id=\"ph51\">`this.ctx.Fail(tuple)`</ph><ph id=\"ph52\"/> to indicate that processing has failed for a tuple.",
          "pos": [
            0,
            177
          ]
        },
        {
          "content": "The failure propagates to the <ph id=\"ph53\">`Fail`</ph><ph id=\"ph54\"/> method of the spout, where the tuple can be replayed by using cached metadata.",
          "pos": [
            178,
            327
          ]
        }
      ]
    },
    {
      "pos": [
        17414,
        17666
      ],
      "content": "<bpt id=\"p60\">**</bpt>Sequence ID<ept id=\"p60\">**</ept>: When emitting a tuple, a sequence ID can be specified. This should be a value that identifies the tuple for replay (Ack and Fail) processing. For example, the spout in the <bpt id=\"p61\">**</bpt>Storm Sample<ept id=\"p61\">**</ept><ph id=\"ph55\"/> project uses the following when emitting data:",
      "nodes": [
        {
          "content": "<bpt id=\"p60\">**</bpt>Sequence ID<ept id=\"p60\">**</ept>: When emitting a tuple, a sequence ID can be specified.",
          "pos": [
            0,
            111
          ]
        },
        {
          "content": "This should be a value that identifies the tuple for replay (Ack and Fail) processing.",
          "pos": [
            112,
            198
          ]
        },
        {
          "content": "For example, the spout in the <bpt id=\"p61\">**</bpt>Storm Sample<ept id=\"p61\">**</ept><ph id=\"ph55\"/> project uses the following when emitting data:",
          "pos": [
            199,
            347
          ]
        }
      ]
    },
    {
      "pos": [
        17770,
        17974
      ],
      "content": "This emits a new tuple that contains a sentence to the default stream, with the sequence ID value contained in <bpt id=\"p62\">**</bpt>lastSeqId<ept id=\"p62\">**</ept>. For this example, <bpt id=\"p63\">**</bpt>lastSeqId<ept id=\"p63\">**</ept><ph id=\"ph56\"/> is simply incremented for every tuple emitted.",
      "nodes": [
        {
          "content": "This emits a new tuple that contains a sentence to the default stream, with the sequence ID value contained in <bpt id=\"p62\">**</bpt>lastSeqId<ept id=\"p62\">**</ept>.",
          "pos": [
            0,
            165
          ]
        },
        {
          "content": "For this example, <bpt id=\"p63\">**</bpt>lastSeqId<ept id=\"p63\">**</ept><ph id=\"ph56\"/> is simply incremented for every tuple emitted.",
          "pos": [
            166,
            299
          ]
        }
      ]
    },
    {
      "pos": [
        17976,
        18109
      ],
      "content": "As demonstrated in the <bpt id=\"p64\">**</bpt>Storm Sample<ept id=\"p64\">**</ept><ph id=\"ph57\"/> project, whether a component is transactional can be set at run time, based on configuration."
    },
    {
      "pos": [
        18113,
        18128
      ],
      "content": "Hybrid topology"
    },
    {
      "pos": [
        18130,
        18259
      ],
      "content": "HDInsight tools for Visual Studio can also be used to create hybrid topologies, where some components are C# and others are Java."
    },
    {
      "pos": [
        18261,
        18453
      ],
      "content": "For an example hybrid topology, create a new project, and select <bpt id=\"p65\">**</bpt>Storm Hybrid Sample<ept id=\"p65\">**</ept>. This creates a fully commented sample that contains several topologies that demonstrate the following:",
      "nodes": [
        {
          "content": "For an example hybrid topology, create a new project, and select <bpt id=\"p65\">**</bpt>Storm Hybrid Sample<ept id=\"p65\">**</ept>.",
          "pos": [
            0,
            129
          ]
        },
        {
          "content": "This creates a fully commented sample that contains several topologies that demonstrate the following:",
          "pos": [
            130,
            232
          ]
        }
      ]
    },
    {
      "pos": [
        18459,
        18541
      ],
      "content": "<bpt id=\"p66\">**</bpt>Java spout<ept id=\"p66\">**</ept><ph id=\"ph58\"/> and <bpt id=\"p67\">**</bpt>C# bolt<ept id=\"p67\">**</ept>: Defined in <bpt id=\"p68\">**</bpt>HybridTopology_javaSpout_csharpBolt<ept id=\"p68\">**</ept>"
    },
    {
      "pos": [
        18551,
        18630
      ],
      "content": "A transactional version is defined in <bpt id=\"p69\">**</bpt>HybridTopologyTx_javaSpout_csharpBolt<ept id=\"p69\">**</ept>"
    },
    {
      "pos": [
        18636,
        18718
      ],
      "content": "<bpt id=\"p70\">**</bpt>C# spout<ept id=\"p70\">**</ept><ph id=\"ph59\"/> and <bpt id=\"p71\">**</bpt>Java bolt<ept id=\"p71\">**</ept>: Defined in <bpt id=\"p72\">**</bpt>HybridTopology_csharpSpout_javaBolt<ept id=\"p72\">**</ept>"
    },
    {
      "pos": [
        18728,
        18807
      ],
      "content": "A transactional version is defined in <bpt id=\"p73\">**</bpt>HybridTopologyTx_csharpSpout_javaBolt<ept id=\"p73\">**</ept>"
    },
    {
      "pos": [
        18819,
        18924
      ],
      "content": "<ph id=\"ph60\">[AZURE.NOTE]</ph><ph id=\"ph61\"/> This version also demonstrates how to use Clojure code from a text file as a Java component."
    },
    {
      "pos": [
        18926,
        19112
      ],
      "content": "To switch between the topology that is used when the project is submitted, simply move the <ph id=\"ph62\">`[Active(true)]`</ph><ph id=\"ph63\"/> statement to the topology you want to use before submitting it to the cluster."
    },
    {
      "pos": [
        19116,
        19236
      ],
      "content": "<ph id=\"ph64\">[AZURE.NOTE]</ph><ph id=\"ph65\"/> All the Java files that are required are provided as part of this project in the <bpt id=\"p74\">**</bpt>JavaDependency<ept id=\"p74\">**</ept><ph id=\"ph66\"/> folder."
    },
    {
      "pos": [
        19238,
        19308
      ],
      "content": "Consider the following when creating and submitting a hybrid topology:"
    },
    {
      "pos": [
        19314,
        19419
      ],
      "content": "<bpt id=\"p75\">**</bpt>JavaComponentConstructor<ept id=\"p75\">**</ept><ph id=\"ph67\"/> must be used to create a new instance of the Java class for a spout or bolt."
    },
    {
      "pos": [
        19425,
        19582
      ],
      "content": "<bpt id=\"p76\">**</bpt>microsoft.scp.storm.multilang.CustomizedInteropJSONSerializer<ept id=\"p76\">**</ept><ph id=\"ph68\"/> should be used to serialize data in to or out of Java components from Java objects to JSON."
    },
    {
      "pos": [
        19588,
        19824
      ],
      "content": "When submitting the topology to the server, you must use the <bpt id=\"p77\">**</bpt>Additional configurations<ept id=\"p77\">**</ept><ph id=\"ph69\"/> option to specify the <bpt id=\"p78\">**</bpt>Java File paths<ept id=\"p78\">**</ept>. The path specified should be the directory that contains the JAR files that contain your Java classes.",
      "nodes": [
        {
          "content": "When submitting the topology to the server, you must use the <bpt id=\"p77\">**</bpt>Additional configurations<ept id=\"p77\">**</ept><ph id=\"ph69\"/> option to specify the <bpt id=\"p78\">**</bpt>Java File paths<ept id=\"p78\">**</ept>.",
          "pos": [
            0,
            228
          ]
        },
        {
          "content": "The path specified should be the directory that contains the JAR files that contain your Java classes.",
          "pos": [
            229,
            331
          ]
        }
      ]
    },
    {
      "pos": [
        19829,
        19845
      ],
      "content": "Azure Event Hubs"
    },
    {
      "pos": [
        19847,
        20072
      ],
      "content": "SCP.Net version 0.9.4.203 introduces a new class and method specifically for working with the Event Hub Spout (a Java spout that reads from Event Hub.) When creating a topology that uses this spout, use the following methods:"
    },
    {
      "pos": [
        20078,
        20182
      ],
      "content": "<bpt id=\"p79\">**</bpt>EventHubSpoutConfig<ept id=\"p79\">**</ept><ph id=\"ph70\"/> class: creates an object that contains the configuration for the spout component"
    },
    {
      "pos": [
        20188,
        20283
      ],
      "content": "<bpt id=\"p80\">**</bpt>TopologyBuilder.SetEventHubSpout<ept id=\"p80\">**</ept><ph id=\"ph71\"/> method: adds the Event Hub Spout component to the topology"
    },
    {
      "pos": [
        20287,
        20483
      ],
      "content": "<ph id=\"ph72\">[AZURE.NOTE]</ph><ph id=\"ph73\"/> While these make it easier to work with the Event Hub Spout than other Java components, you must still use the CustomizedInteropJSONSerializer to serialize data produced by the spout."
    },
    {
      "pos": [
        20487,
        20508
      ],
      "content": "How to update SCP.NET"
    },
    {
      "pos": [
        20510,
        20704
      ],
      "content": "Recent releases of SCP.NET support package upgrade through NuGet. When a new update is available, you will receive an upgrade notification. To manually check for an upgrade, perform these steps:",
      "nodes": [
        {
          "content": "Recent releases of SCP.NET support package upgrade through NuGet.",
          "pos": [
            0,
            65
          ]
        },
        {
          "content": "When a new update is available, you will receive an upgrade notification.",
          "pos": [
            66,
            139
          ]
        },
        {
          "content": "To manually check for an upgrade, perform these steps:",
          "pos": [
            140,
            194
          ]
        }
      ]
    },
    {
      "pos": [
        20709,
        20796
      ],
      "content": "In <bpt id=\"p81\">**</bpt>Solution Explorer<ept id=\"p81\">**</ept>, right-click the project and select <bpt id=\"p82\">**</bpt>Manage NuGet Packages<ept id=\"p82\">**</ept>."
    },
    {
      "pos": [
        20801,
        20951
      ],
      "content": "From the package manager, select <bpt id=\"p83\">**</bpt>Updates<ept id=\"p83\">**</ept>. If an update is available, it will be listed. Click the <bpt id=\"p84\">**</bpt>Update<ept id=\"p84\">**</ept><ph id=\"ph74\"/> button for the package to install it.",
      "nodes": [
        {
          "content": "From the package manager, select <bpt id=\"p83\">**</bpt>Updates<ept id=\"p83\">**</ept>.",
          "pos": [
            0,
            85
          ]
        },
        {
          "content": "If an update is available, it will be listed.",
          "pos": [
            86,
            131
          ]
        },
        {
          "content": "Click the <bpt id=\"p84\">**</bpt>Update<ept id=\"p84\">**</ept><ph id=\"ph74\"/> button for the package to install it.",
          "pos": [
            132,
            245
          ]
        }
      ]
    },
    {
      "pos": [
        20955,
        21155
      ],
      "content": "<ph id=\"ph75\">[AZURE.IMPORTANT]</ph><ph id=\"ph76\"/> If your project was created with one of the earlier versions of SCP.NET that did not use NuGet for package updates, you must perform the following steps to update to the new version:"
    },
    {
      "pos": [
        21163,
        21250
      ],
      "content": "In <bpt id=\"p85\">**</bpt>Solution Explorer<ept id=\"p85\">**</ept>, right-click the project and select <bpt id=\"p86\">**</bpt>Manage NuGet Packages<ept id=\"p86\">**</ept>."
    },
    {
      "pos": [
        21256,
        21351
      ],
      "content": "Using the <bpt id=\"p87\">**</bpt>Search<ept id=\"p87\">**</ept><ph id=\"ph77\"/> field, search for, and then add, <bpt id=\"p88\">**</bpt>Microsoft.SCP.Net.SDK<ept id=\"p88\">**</ept><ph id=\"ph78\"/> to the project."
    },
    {
      "pos": [
        21355,
        21370
      ],
      "content": "Troubleshooting"
    },
    {
      "pos": [
        21375,
        21398
      ],
      "content": "Test a topology locally"
    },
    {
      "pos": [
        21400,
        21629
      ],
      "content": "Although it is easy to deploy a topology to a cluster, in some cases, you may need to test a topology locally. Use the following steps to run and test the example topology in this tutorial locally in your development environment.",
      "nodes": [
        {
          "content": "Although it is easy to deploy a topology to a cluster, in some cases, you may need to test a topology locally.",
          "pos": [
            0,
            110
          ]
        },
        {
          "content": "Use the following steps to run and test the example topology in this tutorial locally in your development environment.",
          "pos": [
            111,
            229
          ]
        }
      ]
    },
    {
      "pos": [
        21633,
        21828
      ],
      "content": "<ph id=\"ph79\">[AZURE.WARNING]</ph><ph id=\"ph80\"/> Local testing only works for basic, C# only topologies. You should not use local testing for hybrid topologies or topologies that use multiple streams, as you will receive errors.",
      "nodes": [
        {
          "content": "<ph id=\"ph79\">[AZURE.WARNING]</ph><ph id=\"ph80\"/> Local testing only works for basic, C# only topologies.",
          "pos": [
            0,
            105
          ]
        },
        {
          "content": "You should not use local testing for hybrid topologies or topologies that use multiple streams, as you will receive errors.",
          "pos": [
            106,
            229
          ]
        }
      ]
    },
    {
      "pos": [
        21834,
        21993
      ],
      "content": "In <bpt id=\"p89\">**</bpt>Solution Explorer<ept id=\"p89\">**</ept>, right-click the project, and select <bpt id=\"p90\">**</bpt>Properties<ept id=\"p90\">**</ept>. In the project properties, change the <bpt id=\"p91\">**</bpt>Output type<ept id=\"p91\">**</ept><ph id=\"ph81\"/> to <bpt id=\"p92\">**</bpt>Console Application<ept id=\"p92\">**</ept>.",
      "nodes": [
        {
          "content": "In <bpt id=\"p89\">**</bpt>Solution Explorer<ept id=\"p89\">**</ept>, right-click the project, and select <bpt id=\"p90\">**</bpt>Properties<ept id=\"p90\">**</ept>.",
          "pos": [
            0,
            157
          ]
        },
        {
          "content": "In the project properties, change the <bpt id=\"p91\">**</bpt>Output type<ept id=\"p91\">**</ept><ph id=\"ph81\"/> to <bpt id=\"p92\">**</bpt>Console Application<ept id=\"p92\">**</ept>.",
          "pos": [
            158,
            334
          ]
        }
      ]
    },
    {
      "pos": [
        21999,
        22091
      ],
      "content": "<ph id=\"ph82\">![</ph>output type<ph id=\"ph83\">](./media/hdinsight-storm-develop-csharp-visual-studio-topology/outputtype.png)</ph>"
    },
    {
      "pos": [
        22099,
        22221
      ],
      "content": "<ph id=\"ph84\">[AZURE.NOTE]</ph><ph id=\"ph85\"/> Remember to change the <bpt id=\"p93\">**</bpt>Output type<ept id=\"p93\">**</ept><ph id=\"ph86\"/> back to <bpt id=\"p94\">**</bpt>Class Library<ept id=\"p94\">**</ept><ph id=\"ph87\"/> before you deploy the topology to a cluster."
    },
    {
      "pos": [
        22227,
        22400
      ],
      "content": "In <bpt id=\"p95\">**</bpt>Solution Explorer<ept id=\"p95\">**</ept>, right-click the project, then select <bpt id=\"p96\">**</bpt>Add<ept id=\"p96\">**</ept><ph id=\"ph88\"/> &gt; <bpt id=\"p97\">**</bpt>New Item<ept id=\"p97\">**</ept>. Select <bpt id=\"p98\">**</bpt>Class<ept id=\"p98\">**</ept><ph id=\"ph89\"/> and enter <bpt id=\"p99\">**</bpt>LocalTest.cs<ept id=\"p99\">**</ept><ph id=\"ph90\"/> as the class name. Finally, click <bpt id=\"p100\">**</bpt>Add<ept id=\"p100\">**</ept>.",
      "nodes": [
        {
          "content": "In <bpt id=\"p95\">**</bpt>Solution Explorer<ept id=\"p95\">**</ept>, right-click the project, then select <bpt id=\"p96\">**</bpt>Add<ept id=\"p96\">**</ept><ph id=\"ph88\"/> &gt; <bpt id=\"p97\">**</bpt>New Item<ept id=\"p97\">**</ept>.",
          "pos": [
            0,
            224
          ]
        },
        {
          "content": "Select <bpt id=\"p98\">**</bpt>Class<ept id=\"p98\">**</ept><ph id=\"ph89\"/> and enter <bpt id=\"p99\">**</bpt>LocalTest.cs<ept id=\"p99\">**</ept><ph id=\"ph90\"/> as the class name.",
          "pos": [
            225,
            397
          ]
        },
        {
          "content": "Finally, click <bpt id=\"p100\">**</bpt>Add<ept id=\"p100\">**</ept>.",
          "pos": [
            398,
            463
          ]
        }
      ]
    },
    {
      "pos": [
        22406,
        22481
      ],
      "content": "Open <bpt id=\"p101\">**</bpt>LocalTest.cs<ept id=\"p101\">**</ept><ph id=\"ph91\"/> and add the following <bpt id=\"p102\">**</bpt>using<ept id=\"p102\">**</ept><ph id=\"ph92\"/> statement at the top:"
    },
    {
      "pos": [
        22529,
        22590
      ],
      "content": "Use the following as the contents of the <bpt id=\"p103\">**</bpt>LocalTest<ept id=\"p103\">**</ept><ph id=\"ph93\"/> class:"
    },
    {
      "pos": [
        25744,
        25963
      ],
      "content": "Take a moment to read through the code comments. This code uses <bpt id=\"p104\">**</bpt>LocalContext<ept id=\"p104\">**</ept><ph id=\"ph94\"/> to run the components in the development environment, and it persists the data stream between components to text files on the local drive.",
      "nodes": [
        {
          "content": "Take a moment to read through the code comments.",
          "pos": [
            0,
            48
          ]
        },
        {
          "content": "This code uses <bpt id=\"p104\">**</bpt>LocalContext<ept id=\"p104\">**</ept><ph id=\"ph94\"/> to run the components in the development environment, and it persists the data stream between components to text files on the local drive.",
          "pos": [
            49,
            276
          ]
        }
      ]
    },
    {
      "pos": [
        25969,
        26034
      ],
      "content": "Open <bpt id=\"p105\">**</bpt>Program.cs<ept id=\"p105\">**</ept><ph id=\"ph95\"/> and add the following to the <bpt id=\"p106\">**</bpt>Main<ept id=\"p106\">**</ept><ph id=\"ph96\"/> method:"
    },
    {
      "pos": [
        26662,
        26899
      ],
      "content": "Save the changes, then click <bpt id=\"p107\">**</bpt>F5<ept id=\"p107\">**</ept><ph id=\"ph97\"/> or select <bpt id=\"p108\">**</bpt>Debug<ept id=\"p108\">**</ept><ph id=\"ph98\"/> &gt; <bpt id=\"p109\">**</bpt>Start Debugging<ept id=\"p109\">**</ept><ph id=\"ph99\"/> to start the project. A console window should appear, and log status as the tests progress. When <bpt id=\"p110\">**</bpt>Tests finished<ept id=\"p110\">**</ept><ph id=\"ph100\"/> appears, press any key to close the window.",
      "nodes": [
        {
          "content": "Save the changes, then click <bpt id=\"p107\">**</bpt>F5<ept id=\"p107\">**</ept><ph id=\"ph97\"/> or select <bpt id=\"p108\">**</bpt>Debug<ept id=\"p108\">**</ept><ph id=\"ph98\"/> &gt; <bpt id=\"p109\">**</bpt>Start Debugging<ept id=\"p109\">**</ept><ph id=\"ph99\"/> to start the project.",
          "pos": [
            0,
            273
          ]
        },
        {
          "content": "A console window should appear, and log status as the tests progress.",
          "pos": [
            274,
            343
          ]
        },
        {
          "content": "When <bpt id=\"p110\">**</bpt>Tests finished<ept id=\"p110\">**</ept><ph id=\"ph100\"/> appears, press any key to close the window.",
          "pos": [
            344,
            469
          ]
        }
      ]
    },
    {
      "pos": [
        26905,
        27299
      ],
      "content": "Use <bpt id=\"p111\">**</bpt>Windows Explorer<ept id=\"p111\">**</ept><ph id=\"ph101\"/> to locate the directory that contains your project, for example, <bpt id=\"p112\">**</bpt>C:\\Users\\&lt;your_user_name&gt;\\Documents\\Visual Studio 2013\\Projects\\WordCount\\WordCount<ept id=\"p112\">**</ept>. In this directory, open <bpt id=\"p113\">**</bpt>Bin<ept id=\"p113\">**</ept>, and then click <bpt id=\"p114\">**</bpt>Debug<ept id=\"p114\">**</ept>. You should see the text files that were produced when the tests ran: sentences.txt, counter.txt, and splitter.txt. Open each text file and inspect the data.",
      "nodes": [
        {
          "content": "Use <bpt id=\"p111\">**</bpt>Windows Explorer<ept id=\"p111\">**</ept><ph id=\"ph101\"/> to locate the directory that contains your project, for example, <bpt id=\"p112\">**</bpt>C:\\Users\\&lt;your_user_name&gt;\\Documents\\Visual Studio 2013\\Projects\\WordCount\\WordCount<ept id=\"p112\">**</ept>.",
          "pos": [
            0,
            284
          ]
        },
        {
          "content": "In this directory, open <bpt id=\"p113\">**</bpt>Bin<ept id=\"p113\">**</ept>, and then click <bpt id=\"p114\">**</bpt>Debug<ept id=\"p114\">**</ept>.",
          "pos": [
            285,
            427
          ]
        },
        {
          "content": "You should see the text files that were produced when the tests ran: sentences.txt, counter.txt, and splitter.txt.",
          "pos": [
            428,
            542
          ]
        },
        {
          "content": "Open each text file and inspect the data.",
          "pos": [
            543,
            584
          ]
        }
      ]
    },
    {
      "pos": [
        27307,
        27467
      ],
      "content": "<ph id=\"ph102\">[AZURE.NOTE]</ph><ph id=\"ph103\"/> String data is persisted as an array of decimal values in these files. For example, \\[[97,103,111]] in the <bpt id=\"p115\">**</bpt>splitter.txt<ept id=\"p115\">**</ept><ph id=\"ph104\"/> file is the word 'and'.",
      "nodes": [
        {
          "content": "<ph id=\"ph102\">[AZURE.NOTE]</ph><ph id=\"ph103\"/> String data is persisted as an array of decimal values in these files.",
          "pos": [
            0,
            119
          ]
        },
        {
          "content": "For example, \\[[97,103,111]] in the <bpt id=\"p115\">**</bpt>splitter.txt<ept id=\"p115\">**</ept><ph id=\"ph104\"/> file is the word 'and'.",
          "pos": [
            120,
            254
          ]
        }
      ]
    },
    {
      "pos": [
        27469,
        27813
      ],
      "content": "Although testing a basic word count application locally is pretty trivial, the real value comes when you have a complex topology that communicates with external data sources or performs complex data analysis. When you are working on such a project, you may need to set breakpoints and step through the code in your components to isolate issues.",
      "nodes": [
        {
          "content": "Although testing a basic word count application locally is pretty trivial, the real value comes when you have a complex topology that communicates with external data sources or performs complex data analysis.",
          "pos": [
            0,
            208
          ]
        },
        {
          "content": "When you are working on such a project, you may need to set breakpoints and step through the code in your components to isolate issues.",
          "pos": [
            209,
            344
          ]
        }
      ]
    },
    {
      "pos": [
        27817,
        27941
      ],
      "content": "<ph id=\"ph105\">[AZURE.NOTE]</ph><ph id=\"ph106\"/> Be sure to set the <bpt id=\"p116\">**</bpt>Project type<ept id=\"p116\">**</ept><ph id=\"ph107\"/> back to <bpt id=\"p117\">**</bpt>Class Library<ept id=\"p117\">**</ept><ph id=\"ph108\"/> before deploying to a Storm on HDInsight cluster."
    },
    {
      "pos": [
        27946,
        27961
      ],
      "content": "Log information"
    },
    {
      "pos": [
        27963,
        28117
      ],
      "content": "You can easily log information from your topology components by using <ph id=\"ph109\">`Context.Logger`</ph>. For example, the following will create an informational log entry:",
      "nodes": [
        {
          "content": "You can easily log information from your topology components by using <ph id=\"ph109\">`Context.Logger`</ph>.",
          "pos": [
            0,
            107
          ]
        },
        {
          "content": "For example, the following will create an informational log entry:",
          "pos": [
            108,
            174
          ]
        }
      ]
    },
    {
      "pos": [
        28170,
        28402
      ],
      "content": "Logged information can be viewed from the <bpt id=\"p118\">**</bpt>Hadoop Service Log<ept id=\"p118\">**</ept>, which is found in <bpt id=\"p119\">**</bpt>Server Explorer<ept id=\"p119\">**</ept>. Expand the entry for your Storm on HDInsight cluster, then expand <bpt id=\"p120\">**</bpt>Hadoop Service Log<ept id=\"p120\">**</ept>. Finally, select the log file to view.",
      "nodes": [
        {
          "content": "Logged information can be viewed from the <bpt id=\"p118\">**</bpt>Hadoop Service Log<ept id=\"p118\">**</ept>, which is found in <bpt id=\"p119\">**</bpt>Server Explorer<ept id=\"p119\">**</ept>.",
          "pos": [
            0,
            188
          ]
        },
        {
          "content": "Expand the entry for your Storm on HDInsight cluster, then expand <bpt id=\"p120\">**</bpt>Hadoop Service Log<ept id=\"p120\">**</ept>.",
          "pos": [
            189,
            320
          ]
        },
        {
          "content": "Finally, select the log file to view.",
          "pos": [
            321,
            358
          ]
        }
      ]
    },
    {
      "pos": [
        28406,
        28686
      ],
      "content": "<ph id=\"ph110\">[AZURE.NOTE]</ph><ph id=\"ph111\"/> The logs are stored in the Azure Storage account that is used by your cluster. If this is a different subscription than the one you are logged in to with Visual Studio, you need to log in to the subscription that contains the storage account to view this information.",
      "nodes": [
        {
          "content": "<ph id=\"ph110\">[AZURE.NOTE]</ph><ph id=\"ph111\"/> The logs are stored in the Azure Storage account that is used by your cluster.",
          "pos": [
            0,
            127
          ]
        },
        {
          "content": "If this is a different subscription than the one you are logged in to with Visual Studio, you need to log in to the subscription that contains the storage account to view this information.",
          "pos": [
            128,
            316
          ]
        }
      ]
    },
    {
      "pos": [
        28691,
        28713
      ],
      "content": "View error information"
    },
    {
      "pos": [
        28715,
        28796
      ],
      "content": "To view errors that have occurred in a running topology, use the following steps:"
    },
    {
      "pos": [
        28802,
        28909
      ],
      "content": "From <bpt id=\"p121\">**</bpt>Server Explorer<ept id=\"p121\">**</ept>, right-click the Storm on HDInsight cluster, and select <bpt id=\"p122\">**</bpt>View Storm topologies<ept id=\"p122\">**</ept>."
    },
    {
      "pos": [
        28915,
        29032
      ],
      "content": "For the <bpt id=\"p123\">**</bpt>Spout<ept id=\"p123\">**</ept><ph id=\"ph112\"/> and <bpt id=\"p124\">**</bpt>Bolts<ept id=\"p124\">**</ept>, the <bpt id=\"p125\">**</bpt>Last Error<ept id=\"p125\">**</ept><ph id=\"ph113\"/> column will have information on the last error that has occurred."
    },
    {
      "pos": [
        29038,
        29256
      ],
      "content": "Select the <bpt id=\"p126\">**</bpt>Spout Id<ept id=\"p126\">**</ept><ph id=\"ph114\"/> or <bpt id=\"p127\">**</bpt>Bolt Id<ept id=\"p127\">**</ept><ph id=\"ph115\"/> for the component that has an error listed. On the details page that is displayed, additional error information will be listed in the <bpt id=\"p128\">**</bpt>Errors<ept id=\"p128\">**</ept><ph id=\"ph116\"/> section at the bottom of the page.",
      "nodes": [
        {
          "content": "Select the <bpt id=\"p126\">**</bpt>Spout Id<ept id=\"p126\">**</ept><ph id=\"ph114\"/> or <bpt id=\"p127\">**</bpt>Bolt Id<ept id=\"p127\">**</ept><ph id=\"ph115\"/> for the component that has an error listed.",
          "pos": [
            0,
            198
          ]
        },
        {
          "content": "On the details page that is displayed, additional error information will be listed in the <bpt id=\"p128\">**</bpt>Errors<ept id=\"p128\">**</ept><ph id=\"ph116\"/> section at the bottom of the page.",
          "pos": [
            199,
            392
          ]
        }
      ]
    },
    {
      "pos": [
        29262,
        29404
      ],
      "content": "To obtain more information, select a <bpt id=\"p129\">**</bpt>Port<ept id=\"p129\">**</ept><ph id=\"ph117\"/> from the <bpt id=\"p130\">**</bpt>Executors<ept id=\"p130\">**</ept><ph id=\"ph118\"/> section of the page to see the Storm worker log for the last few minutes."
    },
    {
      "pos": [
        29408,
        29418
      ],
      "content": "Next steps"
    },
    {
      "pos": [
        29420,
        29662
      ],
      "content": "Now that you have learned how to develop and deploy Storm topologies from the HDInsight tools for Visual Studio, learn how to <bpt id=\"p131\">[</bpt>Process events from Azure Event Hub with Storm on HDInsight<ept id=\"p131\">](hdinsight-storm-develop-csharp-event-hub-topology.md)</ept>."
    },
    {
      "pos": [
        29664,
        29817
      ],
      "content": "For an example of a C# topology that splits stream data into multiple streams, see <bpt id=\"p132\">[</bpt>C# Storm example<ept id=\"p132\">](https://github.com/Blackmist/csharp-storm-example)</ept>."
    },
    {
      "pos": [
        29819,
        30004
      ],
      "content": "To discover more information about creating C# topologies, visit <bpt id=\"p133\">[</bpt>SCP.NET GettingStarted.md<ept id=\"p133\">](https://github.com/hdinsight/hdinsight-storm-examples/blob/master/SCPNet-GettingStarted.md)</ept>."
    },
    {
      "pos": [
        30006,
        30098
      ],
      "content": "For more ways to work with HDInsight and more Storm on HDinsight samples, see the following:"
    },
    {
      "pos": [
        30100,
        30129
      ],
      "content": "<bpt id=\"p134\">**</bpt>Apache Storm on HDInsight<ept id=\"p134\">**</ept>"
    },
    {
      "pos": [
        30135,
        30241
      ],
      "content": "<bpt id=\"p135\">[</bpt>Deploy and monitor topologies with Apache Storm on HDInsight<ept id=\"p135\">](hdinsight-storm-deploy-monitor-topology.md)</ept>"
    },
    {
      "pos": [
        30247,
        30327
      ],
      "content": "<bpt id=\"p136\">[</bpt>Example topologies for Storm on HDInsight<ept id=\"p136\">](hdinsight-storm-example-topology.md)</ept>"
    },
    {
      "pos": [
        30329,
        30359
      ],
      "content": "<bpt id=\"p137\">**</bpt>Apache Hadoop on HDInsight<ept id=\"p137\">**</ept>"
    },
    {
      "pos": [
        30365,
        30423
      ],
      "content": "<bpt id=\"p138\">[</bpt>Use Hive with Hadoop on HDInsight<ept id=\"p138\">](hdinsight-use-hive.md)</ept>"
    },
    {
      "pos": [
        30429,
        30485
      ],
      "content": "<bpt id=\"p139\">[</bpt>Use Pig with Hadoop on HDInsight<ept id=\"p139\">](hdinsight-use-pig.md)</ept>"
    },
    {
      "pos": [
        30491,
        30559
      ],
      "content": "<bpt id=\"p140\">[</bpt>Use MapReduce with Hadoop on HDInsight<ept id=\"p140\">](hdinsight-use-mapreduce.md)</ept>"
    },
    {
      "pos": [
        30561,
        30590
      ],
      "content": "<bpt id=\"p141\">**</bpt>Apache HBase on HDInsight<ept id=\"p141\">**</ept>"
    },
    {
      "pos": [
        30596,
        30678
      ],
      "content": "<bpt id=\"p142\">[</bpt>Getting started with HBase on HDInsight<ept id=\"p142\">](hdinsight-hbase-tutorial-get-started.md)</ept>"
    }
  ],
  "content": "<properties\n   pageTitle=\"Apache Storm topologies with Visual Studio and C#  | Microsoft Azure\"\n   description=\"Learn how to create Storm topologies in C# by creating a simple word count topology in Visual Studio using the HDInsight Tools for Visual Studio.\"\n   services=\"hdinsight\"\n   documentationCenter=\"\"\n   authors=\"Blackmist\"\n   manager=\"paulettm\"\n   editor=\"cgronlun\"\n    tags=\"azure-portal\"/>\n\n<tags\n   ms.service=\"hdinsight\"\n   ms.devlang=\"java\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"big-data\"\n   ms.date=\"02/05/2016\"\n   ms.author=\"larryfr\"/>\n\n# Develop C# topologies for Apache Storm on HDInsight using Hadoop tools for Visual Studio\n\nLearn how to create a C# Storm topology by using the HDInsight tools for Visual Studio. This tutorial walks through the process of creating a new Storm project in Visual Studio, testing it locally, and deploying it to an Apache Storm on HDInsight cluster.\n\nYou will also learn how to create hybrid topologies that use C# and Java components.\n\n[AZURE.INCLUDE [windows-only](../../includes/hdinsight-windows-only.md)]\n\n##Prerequisites\n\n-   One of the following versions of Visual Studio\n\n    -   Visual Studio 2012 with [Update 4](http://www.microsoft.com/download/details.aspx?id=39305)\n\n    -   Visual Studio 2013 with [Update 4](http://www.microsoft.com/download/details.aspx?id=44921) or [Visual Studio 2013 Community](http://go.microsoft.com/fwlink/?LinkId=517284)\n\n    -   Visual Studio 2015 or [Visual Studio 2015 Community](https://go.microsoft.com/fwlink/?LinkId=532606)\n\n-   Azure SDK 2.5.1 or later\n\n-   HDInsight Tools for Visual Studio: See [Get started using HDInsight Tools for Visual Studio](hdinsight-hadoop-visual-studio-tools-get-started.md) to install and configure the HDInsight tools for Visual Studio.\n\n    > [AZURE.NOTE] HDInsight Tools for Visual Studio are not supported on Visual Studio Express\n\n-   Apache Storm on HDInsight cluster: See [Getting started with Apache Storm on HDInsight](hdinsight-apache-storm-tutorial-get-started.md) for steps to create a cluster.\n\n    > [AZURE.NOTE] Currently, the HDInsight Tools for Visual Studio only support Storm on HDInsight versions 3.2 clusters.\n\n##Templates\n\nThe HDInsight Tools for Visual Studio provide the following templates::\n\n| Project type | Demonstrates |\n| ------------ | ------------- |\n| Storm Application | An empty Storm topology project |\n| Storm Azure SQL Writer Sample | How to write to Azure SQL Database |\n| Storm DocumentDB Reader Sample | How to read from Azure DocumentDB |\n| Storm DocumentDB Writer Sample | How to write to Azure DocumentDB |\n| Storm EventHub Reader Sample | How to read from Azure Event Hubs |\n| Storm EventHub Writer Sample | How to write to Azure Event Hubs |\n| Storm HBase Reader Sample | How to read from HBase on HDInsight clusters |\n| Storm HBase Writer Sample | How to write to HBase on HDInsight clusters |\n| Storm Hybrid Sample | How to use a Java component |\n| Storm Sample | A basic word count topology |\n\n> [AZURE.NOTE] The HBase reader and writer samples use the HBase REST API to communicate with an HBase on HDInsight cluster, not the HBase Java API.\n\nIn the steps in this document, you will use the basic Storm Application project type to create a new topology.\n\n##Create a C# topology\n\n1.  If you have not already installed the latest version of the HDInsight Tools for Visual Studio, see [Get started using HDInsight Tools for Visual Studio](hdinsight-hadoop-visual-studio-tools-get-started.md).\n\n2.  Open Visual Studio, select **File** > **New**, and then **Project**.\n\n3.  From the **New Project** screen, expand **Installed** > **Templates**, and select **HDInsight**. From the list of templates, select **Storm Application**. At the bottom of the screen, enter **WordCount** as the name of the application.\n\n    ![image](./media/hdinsight-storm-develop-csharp-visual-studio-topology/new-project.png)\n\n4.  After the project has been created, you should have the following files:\n\n    -   **Program.cs**: This defines the topology for your project. Note that a default topology that consists of one spout and one bolt is created by default.\n\n    -   **Spout.cs**: An example spout that emits random numbers.\n\n    -   **Bolt.cs**: An example bolt that keeps a count of numbers emitted by the spout.\n\n    As part of project creation, the latest [SCP.NET packages](https://www.nuget.org/packages/Microsoft.SCP.Net.SDK/) will be downloaded from NuGet.\n\nIn the next sections, you will modify this project into a basic WordCount application.\n\n###Implement the spout\n\n1.  Open **Spout.cs**. Spouts are used to read data in a topology from an external source. The main components for a spout are:\n\n    -   **NextTuple**: Called by Storm when the spout is allowed to emit new tuples.\n\n    -   **Ack** (transactional topology only): Handles acknowledgements initiated by other components in the topology for tuples sent from this spout. Acknowledging a tuple lets the spout know that it was processed successfully by downstream components.\n\n    -   **Fail** (transactional topology only): Handles tuples that are fail-processing other components in the topology. This provides the opportunity to re-emit the tuple so that it can be processed again.\n\n2.  Replace the contents of the **Spout** class with the following. This creates a spout that randomly emits a sentence into the topology.\n\n    ```\n    private Context ctx;\n    private Random r = new Random();\n    string[] sentences = new string[] {\n        \"the cow jumped over the moon\",\n        \"an apple a day keeps the doctor away\",\n        \"four score and seven years ago\",\n        \"snow white and the seven dwarfs\",\n        \"i am at two with nature\"\n    };\n\n\n    public Spout(Context ctx)\n    {\n        // Set the instance context\n        this.ctx = ctx;\n\n\n        Context.Logger.Info(\"Generator constructor called\");\n\n\n        // Declare Output schema\n        Dictionary<string, List<Type>> outputSchema = new Dictionary<string, List<Type>>();\n        // The schema for the default output stream is\n        // a tuple that contains a string field\n        outputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n        this.ctx.DeclareComponentSchema(new ComponentStreamSchema(null, outputSchema));\n    }\n\n\n    // Get an instance of the spout\n    public static Spout Get(Context ctx, Dictionary<string, Object> parms)\n    {\n        return new Spout(ctx);\n    }\n\n\n    public void NextTuple(Dictionary<string, Object> parms)\n    {\n        Context.Logger.Info(\"NextTuple enter\");\n        // The sentence to be emitted\n        string sentence;\n\n\n        // Get a random sentence\n        sentence = sentences[r.Next(0, sentences.Length - 1)];\n        Context.Logger.Info(\"Emit: {0}\", sentence);\n        // Emit it\n        this.ctx.Emit(new Values(sentence));\n\n\n        Context.Logger.Info(\"NextTuple exit\");\n    }\n\n\n    public void Ack(long seqId, Dictionary<string, Object> parms)\n    {\n        // Only used for transactional topologies\n    }\n\n\n    public void Fail(long seqId, Dictionary<string, Object> parms)\n    {\n        // Only used for transactional topologies\n    }\n    ```\n\n    Take a moment to read through the comments to understand what this code does.\n\n###Implement the bolts\n\n1.  Delete the existing **Bolt.cs** file from the project.\n\n2.  In **Solution Explorer**, right-click the project and select **Add** > **New item**. From the list, select **Storm Bolt**, and enter **Splitter.cs** as the name. Repeat this to create a second bolt named **Counter.cs**.\n\n    -   **Splitter.cs**: Implements a bolt that splits sentences into individual words and emits a new stream of words.\n\n    -   **Counter.cs**: Implements a bolt that counts each word and emits a new stream of words and the count for each word.\n\n    > [AZURE.NOTE] These bolts simply read and write to streams, but you can also use a bolt to communicate with sources such as a database or service.\n\n3.  Open **Splitter.cs**. Note that it has only one method by default: **Execute**. This is called when the bolt receives a tuple for processing. Here, you can read and process incoming tuples, and emit outbound tuples.\n\n4.  Replace the contents of the **Splitter** class with the following code:\n\n    ```\n    private Context ctx;\n\n\n    // Constructor\n    public Splitter(Context ctx)\n    {\n        Context.Logger.Info(\"Splitter constructor called\");\n        this.ctx = ctx;\n\n\n        // Declare Input and Output schemas\n        Dictionary<string, List<Type>> inputSchema = new Dictionary<string, List<Type>>();\n        // Input contains a tuple with a string field (the sentence)\n        inputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n        Dictionary<string, List<Type>> outputSchema = new Dictionary<string, List<Type>>();\n        // Outbound contains a tuple with a string field (the word)\n        outputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n        this.ctx.DeclareComponentSchema(new ComponentStreamSchema(inputSchema, outputSchema));\n    }\n\n\n    // Get a new instance of the bolt\n    public static Splitter Get(Context ctx, Dictionary<string, Object> parms)\n    {\n        return new Splitter(ctx);\n    }\n\n\n    // Called when a new tuple is available\n    public void Execute(SCPTuple tuple)\n    {\n        Context.Logger.Info(\"Execute enter\");\n\n\n        // Get the sentence from the tuple\n        string sentence = tuple.GetString(0);\n        // Split at space characters\n        foreach (string word in sentence.Split(' '))\n        {\n            Context.Logger.Info(\"Emit: {0}\", word);\n            //Emit each word\n            this.ctx.Emit(new Values(word));\n        }\n\n\n        Context.Logger.Info(\"Execute exit\");\n    }\n    ```\n\n    Take a moment to read through the comments to understand what this code does.\n\n5.  Open **Counter.cs** and replace the class contents with the following:\n\n    ```\n    private Context ctx;\n\n\n    // Dictionary for holding words and counts\n    private Dictionary<string, int> counts = new Dictionary<string, int>();\n\n\n    // Constructor\n    public Counter(Context ctx)\n    {\n        Context.Logger.Info(\"Counter constructor called\");\n        // Set instance context\n        this.ctx = ctx;\n\n\n        // Declare Input and Output schemas\n        Dictionary<string, List<Type>> inputSchema = new Dictionary<string, List<Type>>();\n        // A tuple containing a string field - the word\n        inputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n\n\n        Dictionary<string, List<Type>> outputSchema = new Dictionary<string, List<Type>>();\n        // A tuple containing a string and integer field - the word and the word count\n        outputSchema.Add(\"default\", new List<Type>() { typeof(string), typeof(int) });\n        this.ctx.DeclareComponentSchema(new ComponentStreamSchema(inputSchema, outputSchema));\n    }\n\n\n    // Get a new instance\n    public static Counter Get(Context ctx, Dictionary<string, Object> parms)\n    {\n        return new Counter(ctx);\n    }\n\n\n    // Called when a new tuple is available\n    public void Execute(SCPTuple tuple)\n    {\n        Context.Logger.Info(\"Execute enter\");\n\n\n        // Get the word from the tuple\n        string word = tuple.GetString(0);\n        // Do we already have an entry for the word in the dictionary?\n        // If no, create one with a count of 0\n        int count = counts.ContainsKey(word) ? counts[word] : 0;\n        // Increment the count\n        count++;\n        // Update the count in the dictionary\n        counts[word] = count;\n\n\n        Context.Logger.Info(\"Emit: {0}, count: {1}\", word, count);\n        // Emit the word and count information\n        this.ctx.Emit(Constants.DEFAULT_STREAM_ID, new List<SCPTuple> { tuple }, new Values(word, count));\n\n\n        Context.Logger.Info(\"Execute exit\");\n    }\n    ```\n\n    Take a moment to read through the comments to understand what this code does.\n\n###Define the topology\n\nSpouts and bolts are arranged in a graph, which defines how the data flows between components. For this topology, the graph is as follows:\n\n![image of how components are arranged](./media/hdinsight-storm-develop-csharp-visual-studio-topology/wordcount-topology.png)\n\nSentences are emitted from the spout, which are distributed to instances of the Splitter bolt. The Splitter bolt breaks the sentences into words, which are distributed to the Counter bolt.\n\nBecause word count is held locally in the Counter instance, we want to make sure that specific words flow to the same Counter bolt instance, so we have only one instance keeping track of a specific word. But for the Splitter bolt, it really doesn't matter which bolt receives which sentence, so we simply want to load balance sentences across those instances.\n\nOpen **Program.cs**. The important method is **ITopologyBuilder**, which is used to define the topology that is submitted to Storm. Replace the contents of **ITopologyBuilder** with the following code to implement the topology described previously:\n\n```\n    // Create a new topology named 'WordCount'\n    TopologyBuilder topologyBuilder = new TopologyBuilder(\"WordCount\");\n\n    // Add the spout to the topology.\n    // Name the component 'sentences'\n    // Name the field that is emitted as 'sentence'\n    topologyBuilder.SetSpout(\n        \"sentences\",\n        Spout.Get,\n        new Dictionary<string, List<string>>()\n        {\n            {Constants.DEFAULT_STREAM_ID, new List<string>(){\"sentence\"}}\n        },\n        1);\n    // Add the splitter bolt to the topology.\n    // Name the component 'splitter'\n    // Name the field that is emitted 'word'\n    // Use suffleGrouping to distribute incoming tuples\n    //   from the 'sentences' spout across instances\n    //   of the splitter\n    topologyBuilder.SetBolt(\n        \"splitter\",\n        Splitter.Get,\n        new Dictionary<string, List<string>>()\n        {\n            {Constants.DEFAULT_STREAM_ID, new List<string>(){\"word\"}}\n        },\n        1).shuffleGrouping(\"sentences\");\n\n    // Add the counter bolt to the topology.\n    // Name the component 'counter'\n    // Name the fields that are emitted 'word' and 'count'\n    // Use fieldsGrouping to ensure that tuples are routed\n    //   to counter instances based on the contents of field\n    //   position 0 (the word). This could also have been\n    //   List<string>(){\"word\"}.\n    //   This ensures that the word 'jumped', for example, will always\n    //   go to the same instance\n    topologyBuilder.SetBolt(\n        \"counter\",\n        Counter.Get,\n        new Dictionary<string, List<string>>()\n        {\n            {Constants.DEFAULT_STREAM_ID, new List<string>(){\"word\", \"count\"}}\n        },\n        1).fieldsGrouping(\"splitter\", new List<int>() { 0 });\n\n    // Add topology config\n    topologyBuilder.SetTopologyConfig(new Dictionary<string, string>()\n    {\n        {\"topology.kryo.register\",\"[\\\"[B\\\"]\"}\n    });\n\n    return topologyBuilder;\n```\n\nTake a moment to read through the comments to understand what this code does.\n\n##Submit the topology\n\n1.  In **Solution Explorer**, right-click the project, and select **Submit to Storm on HDInsight**.\n\n    > [AZURE.NOTE] If prompted, enter the login credentials for your Azure subscription. If you have more than one subscription, log in to the one that contains your Storm on HDInsight cluster.\n\n2.  Select your Storm on HDInsight cluster from the **Storm Cluster** drop-down list, and then select **Submit**. You can monitor if the submission is successful by using the **Output** window.\n\n3.  When the topology has been successfully submitted, the **Storm Topologies** for the cluster should appear. Select the **WordCount** topology from the list to view information about the running topology.\n\n    > [AZURE.NOTE] You can also view **Storm Topologies** from **Server Explorer**: Expand **Azure** > **HDInsight**, right-click a Storm on HDInsight cluster, and then select **View Storm Topologies**.\n\n    Use the links for the spouts or bolts to view information about these components. A new window will be opened for each item selected.\n\n4.  From the **Topology Summary** view, click **Kill** to stop the topology.\n\n    > [AZURE.NOTE] Storm topologies continue to run until they are deactivated, or the cluster is deleted.\n\n##Transactional topology\n\nThe previous topology is non-transactional. The components within the topology do not implement any functionality for replaying messages if processing fails by a component in the topology. For an example transactional topology, create a new project and select **Storm Sample** as the project type.\n\nTransactional topologies implement the following to support replay of data:\n\n-   **Metadata caching**: The spout must store metadata about the data emitted so that the data can be retrieved and emitted again if a failure occurs. Because the data emitted by the sample is small, the raw data for each tuple is stored in a dictionary for replay.\n\n-   **Ack**: Each bolt in the topology can call `this.ctx.Ack(tuple)` to ack that it has successfully processed a tuple. When all bolts have acked the tuple, the `Ack` method of the spout is invoked. This allows the spout to remove cached data for replay because the data was completely processed.\n\n-   **Fail**: Each bolt can call `this.ctx.Fail(tuple)` to indicate that processing has failed for a tuple. The failure propagates to the `Fail` method of the spout, where the tuple can be replayed by using cached metadata.\n\n-   **Sequence ID**: When emitting a tuple, a sequence ID can be specified. This should be a value that identifies the tuple for replay (Ack and Fail) processing. For example, the spout in the **Storm Sample** project uses the following when emitting data:\n\n    ```\n    this.ctx.Emit(Constants.DEFAULT_STREAM_ID, new Values(sentence), lastSeqId);\n    ```\n\n    This emits a new tuple that contains a sentence to the default stream, with the sequence ID value contained in **lastSeqId**. For this example, **lastSeqId** is simply incremented for every tuple emitted.\n\nAs demonstrated in the **Storm Sample** project, whether a component is transactional can be set at run time, based on configuration.\n\n##Hybrid topology\n\nHDInsight tools for Visual Studio can also be used to create hybrid topologies, where some components are C# and others are Java.\n\nFor an example hybrid topology, create a new project, and select **Storm Hybrid Sample**. This creates a fully commented sample that contains several topologies that demonstrate the following:\n\n-   **Java spout** and **C# bolt**: Defined in **HybridTopology_javaSpout_csharpBolt**\n\n    -   A transactional version is defined in **HybridTopologyTx_javaSpout_csharpBolt**\n\n-   **C# spout** and **Java bolt**: Defined in **HybridTopology_csharpSpout_javaBolt**\n\n    -   A transactional version is defined in **HybridTopologyTx_csharpSpout_javaBolt**\n\n        > [AZURE.NOTE] This version also demonstrates how to use Clojure code from a text file as a Java component.\n\nTo switch between the topology that is used when the project is submitted, simply move the `[Active(true)]` statement to the topology you want to use before submitting it to the cluster.\n\n> [AZURE.NOTE] All the Java files that are required are provided as part of this project in the **JavaDependency** folder.\n\nConsider the following when creating and submitting a hybrid topology:\n\n-   **JavaComponentConstructor** must be used to create a new instance of the Java class for a spout or bolt.\n\n-   **microsoft.scp.storm.multilang.CustomizedInteropJSONSerializer** should be used to serialize data in to or out of Java components from Java objects to JSON.\n\n-   When submitting the topology to the server, you must use the **Additional configurations** option to specify the **Java File paths**. The path specified should be the directory that contains the JAR files that contain your Java classes.\n\n###Azure Event Hubs\n\nSCP.Net version 0.9.4.203 introduces a new class and method specifically for working with the Event Hub Spout (a Java spout that reads from Event Hub.) When creating a topology that uses this spout, use the following methods:\n\n-   **EventHubSpoutConfig** class: creates an object that contains the configuration for the spout component\n\n-   **TopologyBuilder.SetEventHubSpout** method: adds the Event Hub Spout component to the topology\n\n> [AZURE.NOTE] While these make it easier to work with the Event Hub Spout than other Java components, you must still use the CustomizedInteropJSONSerializer to serialize data produced by the spout.\n\n##How to update SCP.NET\n\nRecent releases of SCP.NET support package upgrade through NuGet. When a new update is available, you will receive an upgrade notification. To manually check for an upgrade, perform these steps:\n\n1. In **Solution Explorer**, right-click the project and select **Manage NuGet Packages**.\n\n2. From the package manager, select **Updates**. If an update is available, it will be listed. Click the **Update** button for the package to install it.\n\n> [AZURE.IMPORTANT] If your project was created with one of the earlier versions of SCP.NET that did not use NuGet for package updates, you must perform the following steps to update to the new version:\n>\n> 1. In **Solution Explorer**, right-click the project and select **Manage NuGet Packages**.\n> 2. Using the **Search** field, search for, and then add, **Microsoft.SCP.Net.SDK** to the project.\n\n##Troubleshooting\n\n###Test a topology locally\n\nAlthough it is easy to deploy a topology to a cluster, in some cases, you may need to test a topology locally. Use the following steps to run and test the example topology in this tutorial locally in your development environment.\n\n> [AZURE.WARNING] Local testing only works for basic, C# only topologies. You should not use local testing for hybrid topologies or topologies that use multiple streams, as you will receive errors.\n\n1.  In **Solution Explorer**, right-click the project, and select **Properties**. In the project properties, change the **Output type** to **Console Application**.\n\n    ![output type](./media/hdinsight-storm-develop-csharp-visual-studio-topology/outputtype.png)\n\n    > [AZURE.NOTE] Remember to change the **Output type** back to **Class Library** before you deploy the topology to a cluster.\n\n2.  In **Solution Explorer**, right-click the project, then select **Add** > **New Item**. Select **Class** and enter **LocalTest.cs** as the class name. Finally, click **Add**.\n\n3.  Open **LocalTest.cs** and add the following **using** statement at the top:\n\n    ```\n    using Microsoft.SCP;\n    ```\n\n4.  Use the following as the contents of the **LocalTest** class:\n\n    ```\n    // Drives the topology components\n    public void RunTestCase()\n    {\n        // An empty dictionary for use when creating components\n        Dictionary<string, Object> emptyDictionary = new Dictionary<string, object>();\n\n\n        #region Test the spout\n        {\n            Console.WriteLine(\"Starting spout\");\n            // LocalContext is a local-mode context that can be used to initialize\n            // components in the development environment.\n            LocalContext spoutCtx = LocalContext.Get();\n            // Get a new instance of the spout, using the local context\n            Spout sentences = Spout.Get(spoutCtx, emptyDictionary);\n\n\n            // Emit 10 tuples\n            for (int i = 0; i < 10; i++)\n            {\n                sentences.NextTuple(emptyDictionary);\n            }\n            // Use LocalContext to persist the data stream to file\n            spoutCtx.WriteMsgQueueToFile(\"sentences.txt\");\n            Console.WriteLine(\"Spout finished\");\n        }\n        #endregion\n\n\n        #region Test the splitter bolt\n        {\n            Console.WriteLine(\"Starting splitter bolt\");\n            // LocalContext is a local-mode context that can be used to initialize\n            // components in the development environment.\n            LocalContext splitterCtx = LocalContext.Get();\n            // Get a new instance of the bolt\n            Splitter splitter = Splitter.Get(splitterCtx, emptyDictionary);\n\n\n            // Set the data stream to the data created by the spout\n            splitterCtx.ReadFromFileToMsgQueue(\"sentences.txt\");\n            // Get a batch of tuples from the stream\n            List<SCPTuple> batch = splitterCtx.RecvFromMsgQueue();\n            // Process each tuple in the batch\n            foreach (SCPTuple tuple in batch)\n            {\n                splitter.Execute(tuple);\n            }\n            // Use LocalContext to persist the data stream to file\n            splitterCtx.WriteMsgQueueToFile(\"splitter.txt\");\n            Console.WriteLine(\"Splitter bolt finished\");\n        }\n        #endregion\n\n\n        #region Test the counter bolt\n        {\n            Console.WriteLine(\"Starting counter bolt\");\n            // LocalContext is a local-mode context that can be used to initialize\n            // components in the development environment.\n            LocalContext counterCtx = LocalContext.Get();\n            // Get a new instance of the bolt\n            Counter counter = Counter.Get(counterCtx, emptyDictionary);\n\n\n            // Set the data stream to the data created by splitter bolt\n            counterCtx.ReadFromFileToMsgQueue(\"splitter.txt\");\n            // Get a batch of tuples from the stream\n            List<SCPTuple> batch = counterCtx.RecvFromMsgQueue();\n            // Process each tuple in the batch\n            foreach (SCPTuple tuple in batch)\n            {\n                counter.Execute(tuple);\n            }\n            // Use LocalContext to persist the data stream to file\n            counterCtx.WriteMsgQueueToFile(\"counter.txt\");\n            Console.WriteLine(\"Counter bolt finished\");\n        }\n        #endregion\n    }\n    ```\n\n    Take a moment to read through the code comments. This code uses **LocalContext** to run the components in the development environment, and it persists the data stream between components to text files on the local drive.\n\n5.  Open **Program.cs** and add the following to the **Main** method:\n\n    ```\n    Console.WriteLine(\"Starting tests\");\n    System.Environment.SetEnvironmentVariable(\"microsoft.scp.logPrefix\", \"WordCount-LocalTest\");\n    // Initialize the runtime\n    SCPRuntime.Initialize();\n\n\n    //If we are not running under the local context, throw an error\n    if (Context.pluginType != SCPPluginType.SCP_NET_LOCAL)\n    {\n        throw new Exception(string.Format(\"unexpected pluginType: {0}\", Context.pluginType));\n    }\n    // Create test instance\n    LocalTest tests = new LocalTest();\n    // Run tests\n    tests.RunTestCase();\n    Console.WriteLine(\"Tests finished\");\n    Console.ReadKey();\n    ```\n\n6.  Save the changes, then click **F5** or select **Debug** > **Start Debugging** to start the project. A console window should appear, and log status as the tests progress. When **Tests finished** appears, press any key to close the window.\n\n7.  Use **Windows Explorer** to locate the directory that contains your project, for example, **C:\\Users\\<your_user_name>\\Documents\\Visual Studio 2013\\Projects\\WordCount\\WordCount**. In this directory, open **Bin**, and then click **Debug**. You should see the text files that were produced when the tests ran: sentences.txt, counter.txt, and splitter.txt. Open each text file and inspect the data.\n\n    > [AZURE.NOTE] String data is persisted as an array of decimal values in these files. For example, \\[[97,103,111]] in the **splitter.txt** file is the word 'and'.\n\nAlthough testing a basic word count application locally is pretty trivial, the real value comes when you have a complex topology that communicates with external data sources or performs complex data analysis. When you are working on such a project, you may need to set breakpoints and step through the code in your components to isolate issues.\n\n> [AZURE.NOTE] Be sure to set the **Project type** back to **Class Library** before deploying to a Storm on HDInsight cluster.\n\n###Log information\n\nYou can easily log information from your topology components by using `Context.Logger`. For example, the following will create an informational log entry:\n\n```\nContext.Logger.Info(\"Component started\");\n```\n\nLogged information can be viewed from the **Hadoop Service Log**, which is found in **Server Explorer**. Expand the entry for your Storm on HDInsight cluster, then expand **Hadoop Service Log**. Finally, select the log file to view.\n\n> [AZURE.NOTE] The logs are stored in the Azure Storage account that is used by your cluster. If this is a different subscription than the one you are logged in to with Visual Studio, you need to log in to the subscription that contains the storage account to view this information.\n\n###View error information\n\nTo view errors that have occurred in a running topology, use the following steps:\n\n1.  From **Server Explorer**, right-click the Storm on HDInsight cluster, and select **View Storm topologies**.\n\n2.  For the **Spout** and **Bolts**, the **Last Error** column will have information on the last error that has occurred.\n\n3.  Select the **Spout Id** or **Bolt Id** for the component that has an error listed. On the details page that is displayed, additional error information will be listed in the **Errors** section at the bottom of the page.\n\n4.  To obtain more information, select a **Port** from the **Executors** section of the page to see the Storm worker log for the last few minutes.\n\n##Next steps\n\nNow that you have learned how to develop and deploy Storm topologies from the HDInsight tools for Visual Studio, learn how to [Process events from Azure Event Hub with Storm on HDInsight](hdinsight-storm-develop-csharp-event-hub-topology.md).\n\nFor an example of a C# topology that splits stream data into multiple streams, see [C# Storm example](https://github.com/Blackmist/csharp-storm-example).\n\nTo discover more information about creating C# topologies, visit [SCP.NET GettingStarted.md](https://github.com/hdinsight/hdinsight-storm-examples/blob/master/SCPNet-GettingStarted.md).\n\nFor more ways to work with HDInsight and more Storm on HDinsight samples, see the following:\n\n**Apache Storm on HDInsight**\n\n-   [Deploy and monitor topologies with Apache Storm on HDInsight](hdinsight-storm-deploy-monitor-topology.md)\n\n-   [Example topologies for Storm on HDInsight](hdinsight-storm-example-topology.md)\n\n**Apache Hadoop on HDInsight**\n\n-   [Use Hive with Hadoop on HDInsight](hdinsight-use-hive.md)\n\n-   [Use Pig with Hadoop on HDInsight](hdinsight-use-pig.md)\n\n-   [Use MapReduce with Hadoop on HDInsight](hdinsight-use-mapreduce.md)\n\n**Apache HBase on HDInsight**\n\n-   [Getting started with HBase on HDInsight](hdinsight-hbase-tutorial-get-started.md)\n"
}