<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="ja-jp">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Get started with custom authentication | Microsoft Azure</source>
          <target state="new">Get started with custom authentication | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to authenticate users with a username and password.</source>
          <target state="new">Learn how to authenticate users with a username and password.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get started with custom authentication</source>
          <target state="new">Get started with custom authentication</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic shows you how to authenticate users in the Azure Mobile Services .NET backend by issuing your own Mobile Services authentication token.</source>
          <target state="new">This topic shows you how to authenticate users in the Azure Mobile Services .NET backend by issuing your own Mobile Services authentication token.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In this tutorial, you add authentication to the quickstart project using a custom username and password for your app.</source>
          <target state="new">In this tutorial, you add authentication to the quickstart project using a custom username and password for your app.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph3">[AZURE.NOTE]</ph><ph id="ph4" /> This tutorial demonstrates an advanced method of authenticating your Mobile Services with custom credentials.</source>
          <target state="new"><ph id="ph3">[AZURE.NOTE]</ph><ph id="ph4" /> This tutorial demonstrates an advanced method of authenticating your Mobile Services with custom credentials.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Many apps will be best suited to instead use the built-in social identity providers, allowing users to log in via Facebook, Twitter, Google, Microsoft Account, and Azure Active Directory.</source>
          <target state="new">Many apps will be best suited to instead use the built-in social identity providers, allowing users to log in via Facebook, Twitter, Google, Microsoft Account, and Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If this is your first experience with authentication in Mobile Services, please see the [Add authentication to your app] tutorial.</source>
          <target state="new">If this is your first experience with authentication in Mobile Services, please see the [Add authentication to your app] tutorial.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This tutorial is based on the Mobile Services quickstart.</source>
          <target state="new">This tutorial is based on the Mobile Services quickstart.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You must also first complete the tutorial [Get started with Mobile Services].</source>
          <target state="new">You must also first complete the tutorial [Get started with Mobile Services].</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph5">[AZURE.IMPORTANT]</ph><ph id="ph6" /> The purpose of this tutorial is to show you how to issue an authentication token for Mobile Services.</source>
          <target state="new"><ph id="ph5">[AZURE.IMPORTANT]</ph><ph id="ph6" /> The purpose of this tutorial is to show you how to issue an authentication token for Mobile Services.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is not to be taken as security guidance.</source>
          <target state="new">This is not to be taken as security guidance.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In developing your app, you need to be aware of the security implications of password storage, and you need to have a strategy for managing brute-force attacks.</source>
          <target state="new">In developing your app, you need to be aware of the security implications of password storage, and you need to have a strategy for managing brute-force attacks.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Set up the accounts table</source>
          <target state="new">Set up the accounts table</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because you are using custom authentication and not relying on another identity provider, you will need to store your users' sign-in information.</source>
          <target state="new">Because you are using custom authentication and not relying on another identity provider, you will need to store your users' sign-in information.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this section, you will create a table for your accounts and set up the basic security mechanisms.</source>
          <target state="new">In this section, you will create a table for your accounts and set up the basic security mechanisms.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The accounts table will contain the usernames and the salted and hashed passwords, and you can also include additional user information if needed.</source>
          <target state="new">The accounts table will contain the usernames and the salted and hashed passwords, and you can also include additional user information if needed.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>DataObjects<ept id="p1">**</ept><ph id="ph7" /> folder of your backend project, add a new entity called <ph id="ph8">`Account`</ph>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>DataObjects<ept id="p1">**</ept><ph id="ph7" /> folder of your backend project, add a new entity called <ph id="ph8">`Account`</ph>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph9">`using`</ph><ph id="ph10" /> statement:</source>
          <target state="new">Add the following <ph id="ph9">`using`</ph><ph id="ph10" /> statement:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Replace the class definition with the following code:</source>
          <target state="new">Replace the class definition with the following code:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This represents a row in a new Account table, which contains the username, that user's salt, and the securly stored password.</source>
          <target state="new">This represents a row in a new Account table, which contains the username, that user's salt, and the securly stored password.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Under the <bpt id="p2">**</bpt>Models<ept id="p2">**</ept><ph id="ph11" /> folder, you will find a <bpt id="p3">**</bpt>DbContext<ept id="p3">**</ept><ph id="ph12" /> derived class named after your mobile service.</source>
          <target state="new">Under the <bpt id="p2">**</bpt>Models<ept id="p2">**</ept><ph id="ph11" /> folder, you will find a <bpt id="p3">**</bpt>DbContext<ept id="p3">**</ept><ph id="ph12" /> derived class named after your mobile service.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Open your context and add the accounts table to your data model by including the following:</source>
          <target state="new">Open your context and add the accounts table to your data model by including the following:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph13">[AZURE.NOTE]</ph>The code snippets in this tutorial use <ph id="ph14">`todoContext`</ph><ph id="ph15" /> as the context name.</source>
          <target state="new"><ph id="ph13">[AZURE.NOTE]</ph>The code snippets in this tutorial use <ph id="ph14">`todoContext`</ph><ph id="ph15" /> as the context name.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You must update the code snippets for your project's context.</source>
          <target state="new">You must update the code snippets for your project's context.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph16" />&amp;nbsp;
    <ph id="ph17" />Next, you will set up the security functions for working with this data.</source>
          <target state="new"><ph id="ph16" />&amp;nbsp;
    <ph id="ph17" />Next, you will set up the security functions for working with this data.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create a class called <ph id="ph18">`CustomLoginProviderUtils`</ph><ph id="ph19" /> and add the following <ph id="ph20">`using`</ph><ph id="ph21" /> statement:</source>
          <target state="new">Create a class called <ph id="ph18">`CustomLoginProviderUtils`</ph><ph id="ph19" /> and add the following <ph id="ph20">`using`</ph><ph id="ph21" /> statement:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Add the following code methods to the new class:</source>
          <target state="new">Add the following code methods to the new class:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Create the registration endpoint</source>
          <target state="new">Create the registration endpoint</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>At this point, you have everything you need to begin creating user accounts.</source>
          <target state="new">At this point, you have everything you need to begin creating user accounts.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this section, you will set up a registration endpoint to handle new registration requests.</source>
          <target state="new">In this section, you will set up a registration endpoint to handle new registration requests.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is where you will enforce new username and password policies and ensure that the username is not taken.</source>
          <target state="new">This is where you will enforce new username and password policies and ensure that the username is not taken.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Then you will safely store the user information in your database.</source>
          <target state="new">Then you will safely store the user information in your database.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Create the following new class to represent an incoming registration attempt:</source>
          <target state="new">Create the following new class to represent an incoming registration attempt:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you need to collect and store other information during registration, you should do it here.</source>
          <target state="new">If you need to collect and store other information during registration, you should do it here.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In your mobile service backend project, right-click <bpt id="p4">**</bpt>Controllers<ept id="p4">**</ept>, click <bpt id="p5">**</bpt>Add<ept id="p5">**</ept><ph id="ph22" /> and <bpt id="p6">**</bpt>Controller<ept id="p6">**</ept>, create a new <bpt id="p7">**</bpt>Microsoft Azure Mobile Services Custom Controller<ept id="p7">**</ept><ph id="ph23" /> named <ph id="ph24">`CustomRegistrationController`</ph>, then add the following <ph id="ph25">`using`</ph><ph id="ph26" /> statements:</source>
          <target state="new">In your mobile service backend project, right-click <bpt id="p4">**</bpt>Controllers<ept id="p4">**</ept>, click <bpt id="p5">**</bpt>Add<ept id="p5">**</ept><ph id="ph22" /> and <bpt id="p6">**</bpt>Controller<ept id="p6">**</ept>, create a new <bpt id="p7">**</bpt>Microsoft Azure Mobile Services Custom Controller<ept id="p7">**</ept><ph id="ph23" /> named <ph id="ph24">`CustomRegistrationController`</ph>, then add the following <ph id="ph25">`using`</ph><ph id="ph26" /> statements:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the above code, replace the placeholder with your project's namespace.</source>
          <target state="new">In the above code, replace the placeholder with your project's namespace.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Replace the class definition with the following code:</source>
          <target state="new">Replace the class definition with the following code:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remember to replace the <bpt id="p8">*</bpt>todoContext<ept id="p8">*</ept><ph id="ph27" /> variable with the name of your project's <bpt id="p9">**</bpt>DbContext<ept id="p9">**</ept>.</source>
          <target state="new">Remember to replace the <bpt id="p8">*</bpt>todoContext<ept id="p8">*</ept><ph id="ph27" /> variable with the name of your project's <bpt id="p9">**</bpt>DbContext<ept id="p9">**</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Note that this controller uses the following attribute to allow all traffic to this endpoint:</source>
          <target state="new">Note that this controller uses the following attribute to allow all traffic to this endpoint:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph28">[AZURE.IMPORTANT]</ph>This registration endpoint can be accessed by any client via HTTP.</source>
          <target state="new"><ph id="ph28">[AZURE.IMPORTANT]</ph>This registration endpoint can be accessed by any client via HTTP.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Before you publish this service to a production environment, you should implement some sort of scheme to validate registrations, such as a SMS or email-based verification.</source>
          <target state="new">Before you publish this service to a production environment, you should implement some sort of scheme to validate registrations, such as a SMS or email-based verification.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This can help prevent a malicious user from creating fraudulent registrations.</source>
          <target state="new">This can help prevent a malicious user from creating fraudulent registrations.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Create the LoginProvider</source>
          <target state="new">Create the LoginProvider</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>One of the fundamental constructs in the Mobile Services authentication pipeline is the <bpt id="p10">**</bpt>LoginProvider<ept id="p10">**</ept>.</source>
          <target state="new">One of the fundamental constructs in the Mobile Services authentication pipeline is the <bpt id="p10">**</bpt>LoginProvider<ept id="p10">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this section, you will create your own <ph id="ph29">`CustomLoginProvider`</ph>.</source>
          <target state="new">In this section, you will create your own <ph id="ph29">`CustomLoginProvider`</ph>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It will not be plugged into the pipeline like the built-in providers, but it will provide you with some convenient functionality.</source>
          <target state="new">It will not be plugged into the pipeline like the built-in providers, but it will provide you with some convenient functionality.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you use the visual studio 2013, you maybe need to install the <ph id="ph30">`WindowsAzure.MobileServices.Backend.Security`</ph><ph id="ph31" /> nuget package to add the references to <ph id="ph32">`LoginProvider`</ph><ph id="ph33" /> class.</source>
          <target state="new">If you use the visual studio 2013, you maybe need to install the <ph id="ph30">`WindowsAzure.MobileServices.Backend.Security`</ph><ph id="ph31" /> nuget package to add the references to <ph id="ph32">`LoginProvider`</ph><ph id="ph33" /> class.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Create a new class, <ph id="ph34">`CustomLoginProvider`</ph>, which derives from <bpt id="p11">**</bpt>LoginProvider<ept id="p11">**</ept>, and add the following <ph id="ph35">`using`</ph><ph id="ph36" /> statements:</source>
          <target state="new">Create a new class, <ph id="ph34">`CustomLoginProvider`</ph>, which derives from <bpt id="p11">**</bpt>LoginProvider<ept id="p11">**</ept>, and add the following <ph id="ph35">`using`</ph><ph id="ph36" /> statements:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>replace the <bpt id="p12">**</bpt>CustomLoginProvider<ept id="p12">**</ept><ph id="ph37" /> class definition with the following code:</source>
          <target state="new">replace the <bpt id="p12">**</bpt>CustomLoginProvider<ept id="p12">**</ept><ph id="ph37" /> class definition with the following code:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Create a new class named <ph id="ph38">`CustomLoginProviderCredentials`</ph><ph id="ph39" /> in the same code file.</source>
          <target state="new">Create a new class named <ph id="ph38">`CustomLoginProviderCredentials`</ph><ph id="ph39" /> in the same code file.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This represents information about your user and will be made available to you on the backend via <bpt id="p13">[</bpt>GetIdentitiesAsync<ept id="p13">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.mobile.service.security.serviceuser.getidentitiesasync.aspx)</ept>.</source>
          <target state="new">This represents information about your user and will be made available to you on the backend via <bpt id="p13">[</bpt>GetIdentitiesAsync<ept id="p13">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.mobile.service.security.serviceuser.getidentitiesasync.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you are adding custom claims, make sure that they are captured in this object.</source>
          <target state="new">If you are adding custom claims, make sure that they are captured in this object.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add the following implementation of the abstract method <ph id="ph40">`ConfigureMiddleware`</ph><ph id="ph41" /> to <bpt id="p14">**</bpt>CustomLoginProvider<ept id="p14">**</ept>.</source>
          <target state="new">Add the following implementation of the abstract method <ph id="ph40">`ConfigureMiddleware`</ph><ph id="ph41" /> to <bpt id="p14">**</bpt>CustomLoginProvider<ept id="p14">**</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This method is not implemented because <bpt id="p15">**</bpt>CustomLoginProvider<ept id="p15">**</ept><ph id="ph42" /> is not integrating with the authentication pipeline.</source>
          <target state="new">This method is not implemented because <bpt id="p15">**</bpt>CustomLoginProvider<ept id="p15">**</ept><ph id="ph42" /> is not integrating with the authentication pipeline.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Add the following implementation of the abstract method <ph id="ph43">`ParseCredentials`</ph><ph id="ph44" /> to <bpt id="p16">**</bpt>CustomLoginProvider<ept id="p16">**</ept>.</source>
          <target state="new">Add the following implementation of the abstract method <ph id="ph43">`ParseCredentials`</ph><ph id="ph44" /> to <bpt id="p16">**</bpt>CustomLoginProvider<ept id="p16">**</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This method will allow the backend to deserialize user information from an incoming authentication token.</source>
          <target state="new">This method will allow the backend to deserialize user information from an incoming authentication token.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Add the following implementation of the abstract method <ph id="ph45">`CreateCredentials`</ph><ph id="ph46" /> to <bpt id="p17">**</bpt>CustomLoginProvider<ept id="p17">**</ept>.</source>
          <target state="new">Add the following implementation of the abstract method <ph id="ph45">`CreateCredentials`</ph><ph id="ph46" /> to <bpt id="p17">**</bpt>CustomLoginProvider<ept id="p17">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This method translates a <bpt id="p18">[</bpt><ept id="p18">ClaimsIdentity]</ept> into a <bpt id="p19">[</bpt><ept id="p19">ProviderCredentials]</ept> object that is used in the authentication token issuance phase.</source>
          <target state="new">This method translates a <bpt id="p18">[</bpt><ept id="p18">ClaimsIdentity]</ept> into a <bpt id="p19">[</bpt><ept id="p19">ProviderCredentials]</ept> object that is used in the authentication token issuance phase.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You will again want to capture any additional claims in this method.</source>
          <target state="new">You will again want to capture any additional claims in this method.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Open the WebApiConfig.cs project file in the App_Start folder and the following line of code after the <bpt id="p20">**</bpt>ConfigOptions<ept id="p20">**</ept><ph id="ph47" /> is created:</source>
          <target state="new">Open the WebApiConfig.cs project file in the App_Start folder and the following line of code after the <bpt id="p20">**</bpt>ConfigOptions<ept id="p20">**</ept><ph id="ph47" /> is created:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Create the sign-in endpoint</source>
          <target state="new">Create the sign-in endpoint</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Next, you create an endpoint for your users to sign-in.</source>
          <target state="new">Next, you create an endpoint for your users to sign-in.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The username and password that you receive is checked against the database by first applying the user's salt, hashing the password, and making sure that the incoming value matches that of the database.</source>
          <target state="new">The username and password that you receive is checked against the database by first applying the user's salt, hashing the password, and making sure that the incoming value matches that of the database.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If it does, then you can create a <bpt id="p21">[</bpt><ept id="p21">ClaimsIdentity]</ept> and pass it to the <bpt id="p22">**</bpt>CustomLoginProvider<ept id="p22">**</ept>.</source>
          <target state="new">If it does, then you can create a <bpt id="p21">[</bpt><ept id="p21">ClaimsIdentity]</ept> and pass it to the <bpt id="p22">**</bpt>CustomLoginProvider<ept id="p22">**</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The client app receives a user ID and an authentication token for further access to your mobile service.</source>
          <target state="new">The client app receives a user ID and an authentication token for further access to your mobile service.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In your mobile service backend project, create the following new <ph id="ph48">`LoginRequest`</ph><ph id="ph49" /> class:</source>
          <target state="new">In your mobile service backend project, create the following new <ph id="ph48">`LoginRequest`</ph><ph id="ph49" /> class:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This class represents an incoming sign-in attempt.</source>
          <target state="new">This class represents an incoming sign-in attempt.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Create the following new <ph id="ph50">`CustomLoginResult`</ph><ph id="ph51" /> class:</source>
          <target state="new">Create the following new <ph id="ph50">`CustomLoginResult`</ph><ph id="ph51" /> class:</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This class represents a successful login with the user ID and the authentication token.</source>
          <target state="new">This class represents a successful login with the user ID and the authentication token.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Note that this class has the same shape as the MobileServiceUser class on the client, which makes it easier to hand the login response on a strongly-typed client.</source>
          <target state="new">Note that this class has the same shape as the MobileServiceUser class on the client, which makes it easier to hand the login response on a strongly-typed client.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p23">**</bpt>Controllers<ept id="p23">**</ept>, click <bpt id="p24">**</bpt>Add<ept id="p24">**</ept><ph id="ph52" /> and <bpt id="p25">**</bpt>Controller<ept id="p25">**</ept>, create a new <bpt id="p26">**</bpt>Microsoft Azure Mobile Services Custom Controller<ept id="p26">**</ept><ph id="ph53" /> named <ph id="ph54">`CustomLoginController`</ph>, then add the following <ph id="ph55">`using`</ph><ph id="ph56" /> statements:</source>
          <target state="new">Right-click <bpt id="p23">**</bpt>Controllers<ept id="p23">**</ept>, click <bpt id="p24">**</bpt>Add<ept id="p24">**</ept><ph id="ph52" /> and <bpt id="p25">**</bpt>Controller<ept id="p25">**</ept>, create a new <bpt id="p26">**</bpt>Microsoft Azure Mobile Services Custom Controller<ept id="p26">**</ept><ph id="ph53" /> named <ph id="ph54">`CustomLoginController`</ph>, then add the following <ph id="ph55">`using`</ph><ph id="ph56" /> statements:</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Replace the <bpt id="p27">**</bpt>CustomLoginController<ept id="p27">**</ept><ph id="ph57" /> class definition with following code:</source>
          <target state="new">Replace the <bpt id="p27">**</bpt>CustomLoginController<ept id="p27">**</ept><ph id="ph57" /> class definition with following code:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph58">[AZURE.IMPORTANT]</ph><ph id="ph59" /> Your <ph id="ph60">`CustomLoginController`</ph><ph id="ph61" /> for production use should also contain a brute-force detection strategy.</source>
          <target state="new"><ph id="ph58">[AZURE.IMPORTANT]</ph><ph id="ph59" /> Your <ph id="ph60">`CustomLoginController`</ph><ph id="ph61" /> for production use should also contain a brute-force detection strategy.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Otherwise your sign-in solution may be vulnerable to attack.</source>
          <target state="new">Otherwise your sign-in solution may be vulnerable to attack.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Configure the mobile service to require authentication</source>
          <target state="new">Configure the mobile service to require authentication</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Test the sign-in flow using the test client</source>
          <target state="new">Test the sign-in flow using the test client</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In your client app, you must develop a custom sign-in screen which takes usernames and passwords and sends them as a JSON payload to your registration and sign-in endpoints.</source>
          <target state="new">In your client app, you must develop a custom sign-in screen which takes usernames and passwords and sends them as a JSON payload to your registration and sign-in endpoints.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To complete this tutorial, you will instead just use the built-in test client for the Mobile Services .NET backend.</source>
          <target state="new">To complete this tutorial, you will instead just use the built-in test client for the Mobile Services .NET backend.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In Visual Studio, right-click the mobile service project, then click <bpt id="p28">**</bpt>Debug<ept id="p28">**</ept><ph id="ph63" /> and <bpt id="p29">**</bpt>Start New Instance<ept id="p29">**</ept>.</source>
          <target state="new">In Visual Studio, right-click the mobile service project, then click <bpt id="p28">**</bpt>Debug<ept id="p28">**</ept><ph id="ph63" /> and <bpt id="p29">**</bpt>Start New Instance<ept id="p29">**</ept>.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This starts a new debugging instance of your mobile service backend project.</source>
          <target state="new">This starts a new debugging instance of your mobile service backend project.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>After the service starts successfully, you will see a start page that says <bpt id="p30">**</bpt>This mobile service is up and running<ept id="p30">**</ept>.</source>
          <target state="new">After the service starts successfully, you will see a start page that says <bpt id="p30">**</bpt>This mobile service is up and running<ept id="p30">**</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>On the service start page, click <bpt id="p31">**</bpt>Try it out<ept id="p31">**</ept>, then type the password that you set for the <bpt id="p32">**</bpt>MS_ApplicationKey<ept id="p32">**</ept><ph id="ph64" /> app setting in the web.config file with a blank username into the authentication dialog.</source>
          <target state="new">On the service start page, click <bpt id="p31">**</bpt>Try it out<ept id="p31">**</ept>, then type the password that you set for the <bpt id="p32">**</bpt>MS_ApplicationKey<ept id="p32">**</ept><ph id="ph64" /> app setting in the web.config file with a blank username into the authentication dialog.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In the help page, click the <bpt id="p33">**</bpt>CustomRegistration<ept id="p33">**</ept><ph id="ph65" /> endpoint, then click <bpt id="p34">**</bpt>Try this out<ept id="p34">**</ept>.</source>
          <target state="new">In the help page, click the <bpt id="p33">**</bpt>CustomRegistration<ept id="p33">**</ept><ph id="ph65" /> endpoint, then click <bpt id="p34">**</bpt>Try this out<ept id="p34">**</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>![][2]</source>
          <target state="new">![][2]</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the body, replace the sample strings with a username and password, which meet the criteria you specified before, then click <bpt id="p35">**</bpt>Send<ept id="p35">**</ept>.</source>
          <target state="new">In the body, replace the sample strings with a username and password, which meet the criteria you specified before, then click <bpt id="p35">**</bpt>Send<ept id="p35">**</ept>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>![][3]</source>
          <target state="new">![][3]</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The response should be <bpt id="p36">**</bpt>201/Created<ept id="p36">**</ept>.</source>
          <target state="new">The response should be <bpt id="p36">**</bpt>201/Created<ept id="p36">**</ept>.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Click the browser's back button and repeat steps 2 and 3 for the <bpt id="p37">**</bpt>CustomLogin<ept id="p37">**</ept><ph id="ph66" /> endpoint, using the same username and password that you registered in the previous step.</source>
          <target state="new">Click the browser's back button and repeat steps 2 and 3 for the <bpt id="p37">**</bpt>CustomLogin<ept id="p37">**</ept><ph id="ph66" /> endpoint, using the same username and password that you registered in the previous step.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>![][4]</source>
          <target state="new">![][4]</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You should receive response message with a body that contains a <bpt id="p38">**</bpt>user<ept id="p38">**</ept><ph id="ph67" /> JSON object that has both the <bpt id="p39">*</bpt>userId<ept id="p39">*</ept><ph id="ph68" /> and an <bpt id="p40">*</bpt>authenticationToken<ept id="p40">*</ept>, which is the Mobile Services authentication token generated by your custom authentication.</source>
          <target state="new">You should receive response message with a body that contains a <bpt id="p38">**</bpt>user<ept id="p38">**</ept><ph id="ph67" /> JSON object that has both the <bpt id="p39">*</bpt>userId<ept id="p39">*</ept><ph id="ph68" /> and an <bpt id="p40">*</bpt>authenticationToken<ept id="p40">*</ept>, which is the Mobile Services authentication token generated by your custom authentication.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This token is sufficient to grant the client app access to the TodoItem endpoint.</source>
          <target state="new">This token is sufficient to grant the client app access to the TodoItem endpoint.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Make a copy of the <bpt id="p41">*</bpt>authenticationToken<ept id="p41">*</ept><ph id="ph69" /> value.</source>
          <target state="new">Make a copy of the <bpt id="p41">*</bpt>authenticationToken<ept id="p41">*</ept><ph id="ph69" /> value.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You will use this to access the restricted TodoItem endpoint.</source>
          <target state="new">You will use this to access the restricted TodoItem endpoint.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Click the browser's back button, then in the API documentation page, click <bpt id="p42">**</bpt>GetTables<ept id="p42">**</ept>, click <bpt id="p43">**</bpt>Try this out<ept id="p43">**</ept>.</source>
          <target state="new">Click the browser's back button, then in the API documentation page, click <bpt id="p42">**</bpt>GetTables<ept id="p42">**</ept>, click <bpt id="p43">**</bpt>Try this out<ept id="p43">**</ept>.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the GET request dialog, click the plus sign next to <bpt id="p44">**</bpt>Headers<ept id="p44">**</ept>, type the value <ph id="ph70">`X-ZUMO-AUTH`</ph><ph id="ph71" /> in the left box, paste the copied <bpt id="p45">*</bpt>authenticationToken<ept id="p45">*</ept><ph id="ph72" /> value in the right box, then click <bpt id="p46">**</bpt>Send<ept id="p46">**</ept>.</source>
          <target state="new">In the GET request dialog, click the plus sign next to <bpt id="p44">**</bpt>Headers<ept id="p44">**</ept>, type the value <ph id="ph70">`X-ZUMO-AUTH`</ph><ph id="ph71" /> in the left box, paste the copied <bpt id="p45">*</bpt>authenticationToken<ept id="p45">*</ept><ph id="ph72" /> value in the right box, then click <bpt id="p46">**</bpt>Send<ept id="p46">**</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The mobile service should grant access to the endpoint and return a <bpt id="p47">**</bpt>200/OK<ept id="p47">**</ept><ph id="ph74" /> status along with a list of TodoItems in the table.</source>
          <target state="new">The mobile service should grant access to the endpoint and return a <bpt id="p47">**</bpt>200/OK<ept id="p47">**</ept><ph id="ph74" /> status along with a list of TodoItems in the table.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph76">[AZURE.IMPORTANT]</ph><ph id="ph77" /> If you choose to also publish this mobile service project to Azure for testing, remember that your sign-in and authentication providers will be vulnerable to attack.</source>
          <target state="new"><ph id="ph76">[AZURE.IMPORTANT]</ph><ph id="ph77" /> If you choose to also publish this mobile service project to Azure for testing, remember that your sign-in and authentication providers will be vulnerable to attack.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Make sure that they are either hardened appropriately or that the test data being protected is not important to you.</source>
          <target state="new">Make sure that they are either hardened appropriately or that the test data being protected is not important to you.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Take great caution before using a custom authentication scheme to secure a production service.</source>
          <target state="new">Take great caution before using a custom authentication scheme to secure a production service.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Sign in using custom authentication from the client</source>
          <target state="new">Sign in using custom authentication from the client</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This section describes the steps needed to access the custom authentication endpoints from the client to obtain the authentication token needed to access the mobile service.</source>
          <target state="new">This section describes the steps needed to access the custom authentication endpoints from the client to obtain the authentication token needed to access the mobile service.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Because the specific client code you need depends on your client, the guidance provided here is platform agnostic.</source>
          <target state="new">Because the specific client code you need depends on your client, the guidance provided here is platform agnostic.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph78">[AZURE.NOTE]</ph><ph id="ph79" /> The Mobile Services client libraries communicate with the service over HTTPS.</source>
          <target state="new"><ph id="ph78">[AZURE.NOTE]</ph><ph id="ph79" /> The Mobile Services client libraries communicate with the service over HTTPS.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Because this solution requires you to send passwords as plaintext, you must make sure that you use HTTPS when you call these endpoint using direct REST requests.</source>
          <target state="new">Because this solution requires you to send passwords as plaintext, you must make sure that you use HTTPS when you call these endpoint using direct REST requests.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Create the required UI elements in your client app to allow users to enter a username and password.</source>
          <target state="new">Create the required UI elements in your client app to allow users to enter a username and password.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Use the appropriate <bpt id="p48">**</bpt>invokeApi<ept id="p48">**</ept><ph id="ph80" /> method on the <bpt id="p49">**</bpt>MobileServiceClient<ept id="p49">**</ept><ph id="ph81" /> in the client library to call the <bpt id="p50">**</bpt>CustomRegistration<ept id="p50">**</ept><ph id="ph82" /> endpoint, passing the runtime-supplied username and password in the message body.</source>
          <target state="new">Use the appropriate <bpt id="p48">**</bpt>invokeApi<ept id="p48">**</ept><ph id="ph80" /> method on the <bpt id="p49">**</bpt>MobileServiceClient<ept id="p49">**</ept><ph id="ph81" /> in the client library to call the <bpt id="p50">**</bpt>CustomRegistration<ept id="p50">**</ept><ph id="ph82" /> endpoint, passing the runtime-supplied username and password in the message body.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You only need to call the <bpt id="p51">**</bpt>CustomRegistration<ept id="p51">**</ept><ph id="ph83" /> endpoint once to create an account for a given user, as long as you keep the user login information in the Accounts table.</source>
          <target state="new">You only need to call the <bpt id="p51">**</bpt>CustomRegistration<ept id="p51">**</ept><ph id="ph83" /> endpoint once to create an account for a given user, as long as you keep the user login information in the Accounts table.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For examples of how to call a custom API on the various supported client platforms, see the article <bpt id="p52">[</bpt>Custom API in Azure Mobile Services – client SDKs<ept id="p52">](http://blogs.msdn.com/b/carlosfigueira/archive/2013/06/19/custom-api-in-azure-mobile-services-client-sdks.aspx)</ept>.</source>
          <target state="new">For examples of how to call a custom API on the various supported client platforms, see the article <bpt id="p52">[</bpt>Custom API in Azure Mobile Services – client SDKs<ept id="p52">](http://blogs.msdn.com/b/carlosfigueira/archive/2013/06/19/custom-api-in-azure-mobile-services-client-sdks.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph84">[AZURE.IMPORTANT]</ph><ph id="ph85" /> Because this user provisioning step occurs only once, you should consider creating the user account in some out-of-band fashion.</source>
          <target state="new"><ph id="ph84">[AZURE.IMPORTANT]</ph><ph id="ph85" /> Because this user provisioning step occurs only once, you should consider creating the user account in some out-of-band fashion.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For a public registration endpoint, you should also consider implementing an SMS-based or email-based verification process, or some other safeguard to prevent the generation of fruadulent accounts.</source>
          <target state="new">For a public registration endpoint, you should also consider implementing an SMS-based or email-based verification process, or some other safeguard to prevent the generation of fruadulent accounts.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can use Twilio to send SMS messages from Mobile services.</source>
          <target state="new">You can use Twilio to send SMS messages from Mobile services.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can also use SendGrid to send emails from Mobile Services.</source>
          <target state="new">You can also use SendGrid to send emails from Mobile Services.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more inforation on using SendGrid, see <bpt id="p53">[</bpt>Send email from Mobile Services with SendGrid<ept id="p53">](store-sendgrid-mobile-services-send-email-scripts.md)</ept>.</source>
          <target state="new">For more inforation on using SendGrid, see <bpt id="p53">[</bpt>Send email from Mobile Services with SendGrid<ept id="p53">](store-sendgrid-mobile-services-send-email-scripts.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Use the appropriate <bpt id="p54">**</bpt>invokeApi<ept id="p54">**</ept><ph id="ph86" /> method again, this time to call the <bpt id="p55">**</bpt>CustomLogin<ept id="p55">**</ept><ph id="ph87" /> endpoint, passing the runtime-supplied username and password in the message body.</source>
          <target state="new">Use the appropriate <bpt id="p54">**</bpt>invokeApi<ept id="p54">**</ept><ph id="ph86" /> method again, this time to call the <bpt id="p55">**</bpt>CustomLogin<ept id="p55">**</ept><ph id="ph87" /> endpoint, passing the runtime-supplied username and password in the message body.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This time, you must capture the <bpt id="p56">*</bpt>userId<ept id="p56">*</ept><ph id="ph88" /> and <bpt id="p57">*</bpt>authenticationToken<ept id="p57">*</ept><ph id="ph89" /> values returned in the response object after a successful login.</source>
          <target state="new">This time, you must capture the <bpt id="p56">*</bpt>userId<ept id="p56">*</ept><ph id="ph88" /> and <bpt id="p57">*</bpt>authenticationToken<ept id="p57">*</ept><ph id="ph89" /> values returned in the response object after a successful login.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Use the returned <bpt id="p58">*</bpt>userId<ept id="p58">*</ept><ph id="ph90" /> and <bpt id="p59">*</bpt>authenticationToken<ept id="p59">*</ept><ph id="ph91" /> values to create a new <bpt id="p60">**</bpt>MobileServiceUser<ept id="p60">**</ept><ph id="ph92" /> object and set it as the current user for your <bpt id="p61">**</bpt>MobileServiceClient<ept id="p61">**</ept><ph id="ph93" /> instance, as shown in the topic <bpt id="p62">[</bpt>Add authentication to existing app<ept id="p62">](mobile-services-dotnet-backend-ios-get-started-users.md)</ept>.</source>
          <target state="new">Use the returned <bpt id="p58">*</bpt>userId<ept id="p58">*</ept><ph id="ph90" /> and <bpt id="p59">*</bpt>authenticationToken<ept id="p59">*</ept><ph id="ph91" /> values to create a new <bpt id="p60">**</bpt>MobileServiceUser<ept id="p60">**</ept><ph id="ph92" /> object and set it as the current user for your <bpt id="p61">**</bpt>MobileServiceClient<ept id="p61">**</ept><ph id="ph93" /> instance, as shown in the topic <bpt id="p62">[</bpt>Add authentication to existing app<ept id="p62">](mobile-services-dotnet-backend-ios-get-started-users.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Because the CustomLogin result is the same shape as the <bpt id="p63">**</bpt>MobileServiceUser<ept id="p63">**</ept><ph id="ph94" /> object, you should be able to make a direct cast of the result.</source>
          <target state="new">Because the CustomLogin result is the same shape as the <bpt id="p63">**</bpt>MobileServiceUser<ept id="p63">**</ept><ph id="ph94" /> object, you should be able to make a direct cast of the result.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This completes this tutorial.</source>
          <target state="new">This completes this tutorial.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>[0]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-debug-start.png
[1]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-try-out.png
[2]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-custom-auth-test-client.png
[3]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-custom-auth-send-register.png
[4]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-custom-auth-login-result.png</source>
          <target state="new">[0]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-debug-start.png
[1]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-try-out.png
[2]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-custom-auth-test-client.png
[3]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-custom-auth-send-register.png
[4]: ./media/mobile-services-dotnet-backend-get-started-custom-authentication/mobile-services-dotnet-backend-custom-auth-login-result.png</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>[Add authentication to your app]: ../mobile-services-dotnet-backend-windows-store-dotnet-get-started-users.md
[Get started with Mobile Services]: mobile-services-dotnet-backend-windows-store-dotnet-get-started.md</source>
          <target state="new">[Add authentication to your app]: ../mobile-services-dotnet-backend-windows-store-dotnet-get-started-users.md
[Get started with Mobile Services]: mobile-services-dotnet-backend-windows-store-dotnet-get-started.md</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b536a0fc610efe8d3785aca771c38bd2847f6d64</xliffext:olfilehash>
  </header>
</xliff>