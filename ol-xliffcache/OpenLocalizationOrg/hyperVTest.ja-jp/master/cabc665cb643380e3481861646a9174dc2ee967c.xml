{
  "nodes": [
    {
      "pos": [
        26,
        98
      ],
      "content": "Twitter trending topics with Apache Storm on HDInsight | Microsoft Azure"
    },
    {
      "pos": [
        116,
        237
      ],
      "content": "Learn how to use Trident to create an Apache Storm topology that determines trending topics on Twitter based on hashtags."
    },
    {
      "pos": [
        556,
        620
      ],
      "content": "Determine Twitter trending topics with Apache Storm on HDInsight"
    },
    {
      "pos": [
        622,
        729
      ],
      "content": "Learn how to use Trident to create a Storm topology that determines trending topics (hash tags) on Twitter."
    },
    {
      "pos": [
        731,
        1070
      ],
      "content": "Trident is a high-level abstraction that provides tools such as joins, aggregations, grouping, functions, and filters. Additionally, Trident adds primitives for doing stateful, incremental processing. This example demonstrates how you can build a topology using a custom spout, function, and several built-in functions provided by Trident.",
      "nodes": [
        {
          "content": "Trident is a high-level abstraction that provides tools such as joins, aggregations, grouping, functions, and filters.",
          "pos": [
            0,
            118
          ]
        },
        {
          "content": "Additionally, Trident adds primitives for doing stateful, incremental processing.",
          "pos": [
            119,
            200
          ]
        },
        {
          "content": "This example demonstrates how you can build a topology using a custom spout, function, and several built-in functions provided by Trident.",
          "pos": [
            201,
            339
          ]
        }
      ]
    },
    {
      "pos": [
        1074,
        1210
      ],
      "content": "<ph id=\"ph2\">[AZURE.NOTE]</ph><ph id=\"ph3\"/> This example is heavily based on the <bpt id=\"p1\">[</bpt>Trident Storm<ept id=\"p1\">](https://github.com/jalonsoramos/trident-storm)</ept><ph id=\"ph4\"/> example by Juan Alonso."
    },
    {
      "pos": [
        1214,
        1226
      ],
      "content": "Requirements"
    },
    {
      "pos": [
        1230,
        1347
      ],
      "content": "<ph id=\"ph5\">&lt;a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\"&gt;</ph>Java and the JDK 1.7<ph id=\"ph6\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        1351,
        1429
      ],
      "content": "<ph id=\"ph7\">&lt;a href=\"http://maven.apache.org/what-is-maven.html\" target=\"_blank\"&gt;</ph>Maven<ph id=\"ph8\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        1433,
        1486
      ],
      "content": "<ph id=\"ph9\">&lt;a href=\"http://git-scm.com/\" target=\"_blank\"&gt;</ph>Git<ph id=\"ph10\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        1490,
        1517
      ],
      "content": "A Twitter developer account"
    },
    {
      "pos": [
        1521,
        1541
      ],
      "content": "Download the project"
    },
    {
      "pos": [
        1543,
        1595
      ],
      "content": "Use the following code to clone the project locally."
    },
    {
      "pos": [
        1659,
        1667
      ],
      "content": "Topology"
    },
    {
      "pos": [
        1669,
        1713
      ],
      "content": "The topology for this example is as follows:"
    },
    {
      "pos": [
        1715,
        1780
      ],
      "content": "<ph id=\"ph11\">![</ph>topology<ph id=\"ph12\">](./media/hdinsight-storm-twitter-trending/trident.png)</ph>"
    },
    {
      "pos": [
        1784,
        1929
      ],
      "content": "<ph id=\"ph13\">[AZURE.NOTE]</ph><ph id=\"ph14\"/> This is a simplified view of the topology. Multiple instances of the components will be distributed across the nodes in the cluster.",
      "nodes": [
        {
          "content": "<ph id=\"ph13\">[AZURE.NOTE]</ph><ph id=\"ph14\"/> This is a simplified view of the topology.",
          "pos": [
            0,
            89
          ]
        },
        {
          "content": "Multiple instances of the components will be distributed across the nodes in the cluster.",
          "pos": [
            90,
            179
          ]
        }
      ]
    },
    {
      "pos": [
        1931,
        1991
      ],
      "content": "The Trident code that implements the topology is as follows:"
    },
    {
      "pos": [
        2383,
        2412
      ],
      "content": "This code does the following:"
    },
    {
      "pos": [
        2417,
        2576
      ],
      "content": "Creates a new stream from the spout. The spout retrieves tweets from Twitter, and filters them for specific keywords (love, music, and coffee in this example).",
      "nodes": [
        {
          "content": "Creates a new stream from the spout.",
          "pos": [
            0,
            36
          ]
        },
        {
          "content": "The spout retrieves tweets from Twitter, and filters them for specific keywords (love, music, and coffee in this example).",
          "pos": [
            37,
            159
          ]
        }
      ]
    },
    {
      "pos": [
        2581,
        2696
      ],
      "content": "HashtagExtractor, a custom function, is used to extract hash tags from each tweet. These are emitted to the stream.",
      "nodes": [
        {
          "content": "HashtagExtractor, a custom function, is used to extract hash tags from each tweet.",
          "pos": [
            0,
            82
          ]
        },
        {
          "content": "These are emitted to the stream.",
          "pos": [
            83,
            115
          ]
        }
      ]
    },
    {
      "pos": [
        2701,
        2951
      ],
      "content": "The stream is grouped by hash tag, and passed to an aggregator. This aggregator creates a count of how many times each hash tag has occurred. This data is persisted in memory. Finally, a new stream is emitted that contains the hash tag and the count.",
      "nodes": [
        {
          "content": "The stream is grouped by hash tag, and passed to an aggregator.",
          "pos": [
            0,
            63
          ]
        },
        {
          "content": "This aggregator creates a count of how many times each hash tag has occurred.",
          "pos": [
            64,
            141
          ]
        },
        {
          "content": "This data is persisted in memory.",
          "pos": [
            142,
            175
          ]
        },
        {
          "content": "Finally, a new stream is emitted that contains the hash tag and the count.",
          "pos": [
            176,
            250
          ]
        }
      ]
    },
    {
      "pos": [
        2956,
        3140
      ],
      "content": "Because we are only interested in the most popular hash tags for a given batch of tweets, the <bpt id=\"p2\">**</bpt>FirstN<ept id=\"p2\">**</ept><ph id=\"ph15\"/> assembly is applied to return only the top 10 values, based on the count field."
    },
    {
      "pos": [
        3144,
        3244
      ],
      "content": "<ph id=\"ph16\">[AZURE.NOTE]</ph><ph id=\"ph17\"/> Other than the spout and HashtagExtractor, we are using built-in Trident functionality."
    },
    {
      "pos": [
        3249,
        3452
      ],
      "content": "For information about built-in operations, see <ph id=\"ph18\">&lt;a href=\"https://storm.apache.org/apidocs/storm/trident/operation/builtin/package-summary.html\" target=\"_blank\"&gt;</ph>Package storm.trident.operation.builtin<ph id=\"ph19\">&lt;/a&gt;</ph>."
    },
    {
      "pos": [
        3457,
        3536
      ],
      "content": "For Trident-state implementations other than MemoryMapState, see the following:"
    },
    {
      "pos": [
        3543,
        3660
      ],
      "content": "<ph id=\"ph20\">&lt;a href=\"https://github.com/fhussonnois/storm-trident-elasticsearch\" target=\"_blank\"&gt;</ph>Storm Trident elastic search<ph id=\"ph21\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        3667,
        3750
      ],
      "content": "<ph id=\"ph22\">&lt;a href=\"https://github.com/kstyrc/trident-redis\" target=\"_blank\"&gt;</ph>trident-redis<ph id=\"ph23\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        3755,
        3764
      ],
      "content": "The spout"
    },
    {
      "pos": [
        3766,
        4295
      ],
      "content": "The spout, <bpt id=\"p3\">**</bpt>TwitterSpout<ept id=\"p3\">**</ept>, uses <ph id=\"ph24\">&lt;a href=\"http://twitter4j.org/en/\" target=\"_blank\"&gt;</ph>Twitter4j<ph id=\"ph25\">&lt;/a&gt;</ph><ph id=\"ph26\"/> to retrieve tweets from Twitter. A filter is created (love, music, and coffee in this example), and the incoming tweets (status) that match the filter are stored in a linked blocking queue. (For more information, see <ph id=\"ph27\">&lt;a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingQueue.html\" target=\"_blank\"&gt;</ph>Class LinkedBlockingQueue<ph id=\"ph28\">&lt;/a&gt;</ph>.) Finally, items are pulled off the queue and emitted to the topology.",
      "nodes": [
        {
          "content": "The spout, <bpt id=\"p3\">**</bpt>TwitterSpout<ept id=\"p3\">**</ept>, uses <ph id=\"ph24\">&lt;a href=\"http://twitter4j.org/en/\" target=\"_blank\"&gt;</ph>Twitter4j<ph id=\"ph25\">&lt;/a&gt;</ph><ph id=\"ph26\"/> to retrieve tweets from Twitter.",
          "pos": [
            0,
            234
          ]
        },
        {
          "content": "A filter is created (love, music, and coffee in this example), and the incoming tweets (status) that match the filter are stored in a linked blocking queue.",
          "pos": [
            235,
            391
          ]
        },
        {
          "content": "(For more information, see <ph id=\"ph27\">&lt;a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingQueue.html\" target=\"_blank\"&gt;</ph>Class LinkedBlockingQueue<ph id=\"ph28\">&lt;/a&gt;</ph>.) Finally, items are pulled off the queue and emitted to the topology.",
          "pos": [
            392,
            682
          ]
        }
      ]
    },
    {
      "pos": [
        4300,
        4320
      ],
      "content": "The HashtagExtractor"
    },
    {
      "pos": [
        4322,
        4343
      ],
      "content": "To extract hash tags,"
    },
    {
      "pos": [
        4449,
        4467
      ],
      "content": "getHashtagEntities"
    },
    {
      "pos": [
        4472,
        4576
      ],
      "content": "is used to retrieve all hash tags that are contained in the tweet. These are then emitted to the stream.",
      "nodes": [
        {
          "content": "is used to retrieve all hash tags that are contained in the tweet.",
          "pos": [
            0,
            66
          ]
        },
        {
          "content": "These are then emitted to the stream.",
          "pos": [
            67,
            104
          ]
        }
      ]
    },
    {
      "pos": [
        4580,
        4594
      ],
      "content": "Enable Twitter"
    },
    {
      "pos": [
        4596,
        4739
      ],
      "content": "Use the following steps to register a new Twitter application and obtain the consumer and access token information needed to read from Twitter:"
    },
    {
      "pos": [
        4744,
        4924
      ],
      "content": "Go to <ph id=\"ph29\">&lt;a href=\"https://apps.twitter.com\" target=\"_blank\"&gt;</ph>Twitter Apps<ph id=\"ph30\">&lt;/a&gt;</ph><ph id=\"ph31\"/> and click the <bpt id=\"p4\">**</bpt>Create new app<ept id=\"p4\">**</ept><ph id=\"ph32\"/> button. When filling in the form, leave the <bpt id=\"p5\">**</bpt>Callback URL<ept id=\"p5\">**</ept><ph id=\"ph33\"/> field empty.",
      "nodes": [
        {
          "content": "Go to <ph id=\"ph29\">&lt;a href=\"https://apps.twitter.com\" target=\"_blank\"&gt;</ph>Twitter Apps<ph id=\"ph30\">&lt;/a&gt;</ph><ph id=\"ph31\"/> and click the <bpt id=\"p4\">**</bpt>Create new app<ept id=\"p4\">**</ept><ph id=\"ph32\"/> button.",
          "pos": [
            0,
            232
          ]
        },
        {
          "content": "When filling in the form, leave the <bpt id=\"p5\">**</bpt>Callback URL<ept id=\"p5\">**</ept><ph id=\"ph33\"/> field empty.",
          "pos": [
            233,
            351
          ]
        }
      ]
    },
    {
      "pos": [
        4929,
        4995
      ],
      "content": "When the app is created, click the <bpt id=\"p6\">**</bpt>Keys and Access Tokens<ept id=\"p6\">**</ept><ph id=\"ph34\"/> tab."
    },
    {
      "pos": [
        5000,
        5062
      ],
      "content": "Copy the <bpt id=\"p7\">**</bpt>Consumer Key<ept id=\"p7\">**</ept><ph id=\"ph35\"/> and <bpt id=\"p8\">**</bpt>Consumer Secret<ept id=\"p8\">**</ept><ph id=\"ph36\"/> information."
    },
    {
      "pos": [
        5067,
        5249
      ],
      "content": "At the bottom of the page, select <bpt id=\"p9\">**</bpt>Create my access token<ept id=\"p9\">**</ept><ph id=\"ph37\"/> if no tokens exist. When the tokens have been created, copy the <bpt id=\"p10\">**</bpt>Access Token<ept id=\"p10\">**</ept><ph id=\"ph38\"/> and <bpt id=\"p11\">**</bpt>Access Token Secret<ept id=\"p11\">**</ept><ph id=\"ph39\"/> information.",
      "nodes": [
        {
          "content": "At the bottom of the page, select <bpt id=\"p9\">**</bpt>Create my access token<ept id=\"p9\">**</ept><ph id=\"ph37\"/> if no tokens exist.",
          "pos": [
            0,
            133
          ]
        },
        {
          "content": "When the tokens have been created, copy the <bpt id=\"p10\">**</bpt>Access Token<ept id=\"p10\">**</ept><ph id=\"ph38\"/> and <bpt id=\"p11\">**</bpt>Access Token Secret<ept id=\"p11\">**</ept><ph id=\"ph39\"/> information.",
          "pos": [
            134,
            345
          ]
        }
      ]
    },
    {
      "pos": [
        5254,
        5446
      ],
      "content": "In the <bpt id=\"p12\">**</bpt>TwitterSpoutTopology<ept id=\"p12\">**</ept><ph id=\"ph40\"/> project you previously cloned, open the <bpt id=\"p13\">**</bpt>resources/twitter4j.properties<ept id=\"p13\">**</ept><ph id=\"ph41\"/> file, add the information you gathered in the previous steps, and then save the file."
    },
    {
      "pos": [
        5450,
        5468
      ],
      "content": "Build the topology"
    },
    {
      "pos": [
        5470,
        5514
      ],
      "content": "Use the following code to build the project:"
    },
    {
      "pos": [
        5566,
        5583
      ],
      "content": "Test the topology"
    },
    {
      "pos": [
        5585,
        5640
      ],
      "content": "Use the following command to test the topology locally:"
    },
    {
      "pos": [
        5732,
        5906
      ],
      "content": "After the topology starts, you should see debug information that contains the hash tags and counts emitted by the topology. The output should appear similar to the following:",
      "nodes": [
        {
          "content": "After the topology starts, you should see debug information that contains the hash tags and counts emitted by the topology.",
          "pos": [
            0,
            123
          ]
        },
        {
          "content": "The output should appear similar to the following:",
          "pos": [
            124,
            174
          ]
        }
      ]
    },
    {
      "pos": [
        6141,
        6151
      ],
      "content": "Next steps"
    },
    {
      "pos": [
        6153,
        6338
      ],
      "content": "Now that you have tested the topology locally, discover how to deploy the topology: <bpt id=\"p14\">[</bpt>Deploy and manage Apache Storm topologies on HDInsight<ept id=\"p14\">](hdinsight-storm-deploy-monitor-topology.md)</ept>."
    },
    {
      "pos": [
        6340,
        6397
      ],
      "content": "You may also be interested in the following Storm topics:"
    },
    {
      "pos": [
        6401,
        6503
      ],
      "content": "<bpt id=\"p15\">[</bpt>Develop Java topologies for Storm on HDInsight using Maven<ept id=\"p15\">](hdinsight-storm-develop-java-topology.md)</ept>"
    },
    {
      "pos": [
        6507,
        6631
      ],
      "content": "<bpt id=\"p16\">[</bpt>Develop C# topologies for Storm on HDInsight using Visual Studio<ept id=\"p16\">](hdinsight-storm-develop-csharp-visual-studio-topology.md)</ept>"
    },
    {
      "pos": [
        6633,
        6671
      ],
      "content": "For more Storm examples for HDinsight:"
    },
    {
      "pos": [
        6675,
        6755
      ],
      "content": "<bpt id=\"p17\">[</bpt>Example topologies for Storm on HDInsight<ept id=\"p17\">](hdinsight-storm-example-topology.md)</ept>"
    }
  ],
  "content": "<properties\n   pageTitle=\"Twitter trending topics with Apache Storm on HDInsight | Microsoft Azure\"\n   description=\"Learn how to use Trident to create an Apache Storm topology that determines trending topics on Twitter based on hashtags.\"\n   services=\"hdinsight\"\n   documentationCenter=\"\"\n   authors=\"Blackmist\"\n   manager=\"paulettm\"\n   editor=\"cgronlun\"\n    tags=\"azure-portal\"/>\n\n<tags\n   ms.service=\"hdinsight\"\n   ms.devlang=\"java\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"big-data\"\n   ms.date=\"02/05/2016\"\n   ms.author=\"larryfr\"/>\n\n#Determine Twitter trending topics with Apache Storm on HDInsight\n\nLearn how to use Trident to create a Storm topology that determines trending topics (hash tags) on Twitter.\n\nTrident is a high-level abstraction that provides tools such as joins, aggregations, grouping, functions, and filters. Additionally, Trident adds primitives for doing stateful, incremental processing. This example demonstrates how you can build a topology using a custom spout, function, and several built-in functions provided by Trident.\n\n> [AZURE.NOTE] This example is heavily based on the [Trident Storm](https://github.com/jalonsoramos/trident-storm) example by Juan Alonso.\n\n##Requirements\n\n* <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\">Java and the JDK 1.7</a>\n\n* <a href=\"http://maven.apache.org/what-is-maven.html\" target=\"_blank\">Maven</a>\n\n* <a href=\"http://git-scm.com/\" target=\"_blank\">Git</a>\n\n* A Twitter developer account\n\n##Download the project\n\nUse the following code to clone the project locally.\n\n    git clone https://github.com/Blackmist/TwitterTrending\n\n##Topology\n\nThe topology for this example is as follows:\n\n![topology](./media/hdinsight-storm-twitter-trending/trident.png)\n\n> [AZURE.NOTE] This is a simplified view of the topology. Multiple instances of the components will be distributed across the nodes in the cluster.\n\nThe Trident code that implements the topology is as follows:\n\n    topology.newStream(\"spout\", spout)\n        .each(new Fields(\"tweet\"), new HashtagExtractor(), new Fields(\"hashtag\"))\n        .groupBy(new Fields(\"hashtag\"))\n        .persistentAggregate(new MemoryMapState.Factory(), new Count(), new Fields(\"count\"))\n        .newValuesStream()\n        .applyAssembly(new FirstN(10, \"count\"))\n        .each(new Fields(\"hashtag\", \"count\"), new Debug());\n\nThis code does the following:\n\n1. Creates a new stream from the spout. The spout retrieves tweets from Twitter, and filters them for specific keywords (love, music, and coffee in this example).\n\n2. HashtagExtractor, a custom function, is used to extract hash tags from each tweet. These are emitted to the stream.\n\n3. The stream is grouped by hash tag, and passed to an aggregator. This aggregator creates a count of how many times each hash tag has occurred. This data is persisted in memory. Finally, a new stream is emitted that contains the hash tag and the count.\n\n4. Because we are only interested in the most popular hash tags for a given batch of tweets, the **FirstN** assembly is applied to return only the top 10 values, based on the count field.\n\n> [AZURE.NOTE] Other than the spout and HashtagExtractor, we are using built-in Trident functionality.\n>\n> For information about built-in operations, see <a href=\"https://storm.apache.org/apidocs/storm/trident/operation/builtin/package-summary.html\" target=\"_blank\">Package storm.trident.operation.builtin</a>.\n>\n> For Trident-state implementations other than MemoryMapState, see the following:\n>\n> * <a href=\"https://github.com/fhussonnois/storm-trident-elasticsearch\" target=\"_blank\">Storm Trident elastic search</a>\n>\n> * <a href=\"https://github.com/kstyrc/trident-redis\" target=\"_blank\">trident-redis</a>\n\n###The spout\n\nThe spout, **TwitterSpout**, uses <a href=\"http://twitter4j.org/en/\" target=\"_blank\">Twitter4j</a> to retrieve tweets from Twitter. A filter is created (love, music, and coffee in this example), and the incoming tweets (status) that match the filter are stored in a linked blocking queue. (For more information, see <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingQueue.html\" target=\"_blank\">Class LinkedBlockingQueue</a>.) Finally, items are pulled off the queue and emitted to the topology.\n\n###The HashtagExtractor\n\nTo extract hash tags, <a href=\"http://twitter4j.org/javadoc/twitter4j/EntitySupport.html#getHashtagEntities--\" target=\"_blank\">getHashtagEntities</a> is used to retrieve all hash tags that are contained in the tweet. These are then emitted to the stream.\n\n##Enable Twitter\n\nUse the following steps to register a new Twitter application and obtain the consumer and access token information needed to read from Twitter:\n\n1. Go to <a href=\"https://apps.twitter.com\" target=\"_blank\">Twitter Apps</a> and click the **Create new app** button. When filling in the form, leave the **Callback URL** field empty.\n\n2. When the app is created, click the **Keys and Access Tokens** tab.\n\n3. Copy the **Consumer Key** and **Consumer Secret** information.\n\n4. At the bottom of the page, select **Create my access token** if no tokens exist. When the tokens have been created, copy the **Access Token** and **Access Token Secret** information.\n\n5. In the **TwitterSpoutTopology** project you previously cloned, open the **resources/twitter4j.properties** file, add the information you gathered in the previous steps, and then save the file.\n\n##Build the topology\n\nUse the following code to build the project:\n\n        cd [directoryname]\n        mvn compile\n\n##Test the topology\n\nUse the following command to test the topology locally:\n\n    mvn compile exec:java -Dstorm.topology=com.microsoft.example.TwitterTrendingTopology\n\nAfter the topology starts, you should see debug information that contains the hash tags and counts emitted by the topology. The output should appear similar to the following:\n\n    DEBUG: [Quicktellervalentine, 7]\n    DEBUG: [GRAMMYs, 7]\n    DEBUG: [AskSam, 7]\n    DEBUG: [poppunk, 1]\n    DEBUG: [rock, 1]\n    DEBUG: [punkrock, 1]\n    DEBUG: [band, 1]\n    DEBUG: [punk, 1]\n    DEBUG: [indonesiapunkrock, 1]\n\n##Next steps\n\nNow that you have tested the topology locally, discover how to deploy the topology: [Deploy and manage Apache Storm topologies on HDInsight](hdinsight-storm-deploy-monitor-topology.md).\n\nYou may also be interested in the following Storm topics:\n\n* [Develop Java topologies for Storm on HDInsight using Maven](hdinsight-storm-develop-java-topology.md)\n\n* [Develop C# topologies for Storm on HDInsight using Visual Studio](hdinsight-storm-develop-csharp-visual-studio-topology.md)\n\nFor more Storm examples for HDinsight:\n\n* [Example topologies for Storm on HDInsight](hdinsight-storm-example-topology.md)\n"
}