{
  "nodes": [
    {
      "pos": [
        26,
        90
      ],
      "content": "Develop Java-based topologies for Apache Storm | Microsoft Azure"
    },
    {
      "pos": [
        108,
        194
      ],
      "content": "Learn how to create Storm topologies in Java by creating a simple word count topology."
    },
    {
      "pos": [
        513,
        618
      ],
      "content": "Develop Java-based topologies for a basic word-count application with Apache Storm and Maven on HDInsight"
    },
    {
      "pos": [
        620,
        921
      ],
      "content": "Learn a basic process to create a Java-based topology for Apache Storm on HDInsight by using Maven. You will walk through the process of creating a basic word-count application using Maven and Java. Although instructions are provided for using Eclipse, you can also use the text editor of your choice.",
      "nodes": [
        {
          "content": "Learn a basic process to create a Java-based topology for Apache Storm on HDInsight by using Maven.",
          "pos": [
            0,
            99
          ]
        },
        {
          "content": "You will walk through the process of creating a basic word-count application using Maven and Java.",
          "pos": [
            100,
            198
          ]
        },
        {
          "content": "Although instructions are provided for using Eclipse, you can also use the text editor of your choice.",
          "pos": [
            199,
            301
          ]
        }
      ]
    },
    {
      "pos": [
        923,
        1048
      ],
      "content": "After completing the steps in this document, you will have a basic topology that you can deploy to Apache Storm on HDInsight."
    },
    {
      "pos": [
        1052,
        1250
      ],
      "content": "<ph id=\"ph2\">[AZURE.NOTE]</ph>: A completed version of this topology is available at <bpt id=\"p1\">[</bpt>https://github.com/Azure-Samples/hdinsight-java-storm-wordcount<ept id=\"p1\">](https://github.com/Azure-Samples/hdinsight-java-storm-wordcount)</ept>."
    },
    {
      "pos": [
        1254,
        1267
      ],
      "content": "Prerequisites"
    },
    {
      "pos": [
        1271,
        1420
      ],
      "content": "<ph id=\"ph3\">&lt;a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\"&gt;</ph>Java Developer Kit (JDK) version 7<ph id=\"ph4\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        1424,
        1549
      ],
      "content": "<ph id=\"ph5\">&lt;a href=\"https://maven.apache.org/download.cgi\" target=\"_blank\"&gt;</ph>Maven<ph id=\"ph6\">&lt;/a&gt;</ph>: Maven is a project build system for Java projects."
    },
    {
      "pos": [
        1553,
        1996
      ],
      "content": "A text editor such as Notepad, <ph id=\"ph7\">&lt;a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\"&gt;</ph>Emacs<ph id=\"ph8\">&lt;a&gt;</ph>, <ph id=\"ph9\">&lt;a href=\"http://www.sublimetext.com/\" target=\"_blank\"&gt;</ph>Sublime Text<ph id=\"ph10\">&lt;/a&gt;</ph>, <ph id=\"ph11\">&lt;a href=\"https://atom.io/\" target=\"_blank\"&gt;</ph>Atom.io<ph id=\"ph12\">&lt;/a&gt;</ph>, <ph id=\"ph13\">&lt;a href=\"http://brackets.io/\" target=\"_blank\"&gt;</ph>Brackets.io<ph id=\"ph14\">&lt;/a&gt;</ph>. Or you can use an integrated development environment (IDE) such as <ph id=\"ph15\">&lt;a href=\"https://eclipse.org/\" target=\"_blank\"&gt;</ph>Eclipse<ph id=\"ph16\">&lt;/a&gt;</ph><ph id=\"ph17\"/> (version Luna or later).",
      "nodes": [
        {
          "content": "A text editor such as Notepad, <ph id=\"ph7\">&lt;a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\"&gt;</ph>Emacs<ph id=\"ph8\">&lt;a&gt;</ph>, <ph id=\"ph9\">&lt;a href=\"http://www.sublimetext.com/\" target=\"_blank\"&gt;</ph>Sublime Text<ph id=\"ph10\">&lt;/a&gt;</ph>, <ph id=\"ph11\">&lt;a href=\"https://atom.io/\" target=\"_blank\"&gt;</ph>Atom.io<ph id=\"ph12\">&lt;/a&gt;</ph>, <ph id=\"ph13\">&lt;a href=\"http://brackets.io/\" target=\"_blank\"&gt;</ph>Brackets.io<ph id=\"ph14\">&lt;/a&gt;</ph>.",
          "pos": [
            0,
            489
          ]
        },
        {
          "content": "Or you can use an integrated development environment (IDE) such as <ph id=\"ph15\">&lt;a href=\"https://eclipse.org/\" target=\"_blank\"&gt;</ph>Eclipse<ph id=\"ph16\">&lt;/a&gt;</ph><ph id=\"ph17\"/> (version Luna or later).",
          "pos": [
            490,
            705
          ]
        }
      ]
    },
    {
      "pos": [
        2004,
        2251
      ],
      "content": "<ph id=\"ph18\">[AZURE.NOTE]</ph><ph id=\"ph19\"/> Your editor or IDE may have specific functionality for working with Maven that is not addressed in this document. For information about the capabilities of your editing environment, see the documentation for the product you are using.",
      "nodes": [
        {
          "content": "<ph id=\"ph18\">[AZURE.NOTE]</ph><ph id=\"ph19\"/> Your editor or IDE may have specific functionality for working with Maven that is not addressed in this document.",
          "pos": [
            0,
            160
          ]
        },
        {
          "content": "For information about the capabilities of your editing environment, see the documentation for the product you are using.",
          "pos": [
            161,
            281
          ]
        }
      ]
    },
    {
      "pos": [
        2255,
        2286
      ],
      "content": "Configure environment variables"
    },
    {
      "pos": [
        2288,
        2469
      ],
      "content": "The following environment variables may be set when you install Java and the JDK. However, you should check that they exist and that they contain the correct values for your system.",
      "nodes": [
        {
          "content": "The following environment variables may be set when you install Java and the JDK.",
          "pos": [
            0,
            81
          ]
        },
        {
          "content": "However, you should check that they exist and that they contain the correct values for your system.",
          "pos": [
            82,
            181
          ]
        }
      ]
    },
    {
      "pos": [
        2473,
        2765
      ],
      "content": "<bpt id=\"p2\">**</bpt>JAVA_HOME<ept id=\"p2\">**</ept><ph id=\"ph20\"/> - should point to the directory where the Java runtime environment (JRE) is installed. For example, in a Unix or Linux distribution, it should have a value similar to <ph id=\"ph21\">`/usr/lib/jvm/java-7-oracle`</ph>. In Windows, it would have a value similar to <ph id=\"ph22\">`c:\\Program Files (x86)\\Java\\jre1.7`</ph>",
      "nodes": [
        {
          "content": "<bpt id=\"p2\">**</bpt>JAVA_HOME<ept id=\"p2\">**</ept><ph id=\"ph20\"/> - should point to the directory where the Java runtime environment (JRE) is installed.",
          "pos": [
            0,
            153
          ]
        },
        {
          "content": "For example, in a Unix or Linux distribution, it should have a value similar to <ph id=\"ph21\">`/usr/lib/jvm/java-7-oracle`</ph>.",
          "pos": [
            154,
            282
          ]
        },
        {
          "content": "In Windows, it would have a value similar to <ph id=\"ph22\">`c:\\Program Files (x86)\\Java\\jre1.7`</ph>",
          "pos": [
            283,
            383
          ]
        }
      ]
    },
    {
      "pos": [
        2769,
        2815
      ],
      "content": "<bpt id=\"p3\">**</bpt>PATH<ept id=\"p3\">**</ept><ph id=\"ph23\"/> - should contain the following paths:"
    },
    {
      "pos": [
        2823,
        2861
      ],
      "content": "<bpt id=\"p4\">**</bpt>JAVA_HOME<ept id=\"p4\">**</ept><ph id=\"ph24\"/> (or the equivalent path)"
    },
    {
      "pos": [
        2869,
        2911
      ],
      "content": "<bpt id=\"p5\">**</bpt>JAVA_HOME\\bin<ept id=\"p5\">**</ept><ph id=\"ph25\"/> (or the equivalent path)"
    },
    {
      "pos": [
        2919,
        2957
      ],
      "content": "The directory where Maven is installed"
    },
    {
      "pos": [
        2961,
        2987
      ],
      "content": "Create a new Maven project"
    },
    {
      "pos": [
        2989,
        3085
      ],
      "content": "From the command line, use the following code to create a new Maven project named <bpt id=\"p6\">**</bpt>WordCount<ept id=\"p6\">**</ept>:"
    },
    {
      "pos": [
        3243,
        3358
      ],
      "content": "This will create a new directory named <bpt id=\"p7\">**</bpt>WordCount<ept id=\"p7\">**</ept><ph id=\"ph26\"/> at the current location, which contains a basic Maven project."
    },
    {
      "pos": [
        3360,
        3421
      ],
      "content": "The <bpt id=\"p8\">**</bpt>WordCount<ept id=\"p8\">**</ept><ph id=\"ph27\"/> directory will contain the following items:"
    },
    {
      "pos": [
        3425,
        3478
      ],
      "content": "<bpt id=\"p9\">**</bpt>pom.xml<ept id=\"p9\">**</ept>: Contains settings for the Maven project."
    },
    {
      "pos": [
        3482,
        3554
      ],
      "content": "<bpt id=\"p10\">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id=\"p10\">**</ept>: Contains your application code."
    },
    {
      "pos": [
        3558,
        3684
      ],
      "content": "<bpt id=\"p11\">**</bpt>src\\test\\java\\com\\microsoft\\example<ept id=\"p11\">**</ept>: Contains tests for your application. For this example, we will not be creating tests.",
      "nodes": [
        {
          "content": "<bpt id=\"p11\">**</bpt>src\\test\\java\\com\\microsoft\\example<ept id=\"p11\">**</ept>: Contains tests for your application.",
          "pos": [
            0,
            117
          ]
        },
        {
          "content": "For this example, we will not be creating tests.",
          "pos": [
            118,
            166
          ]
        }
      ]
    },
    {
      "pos": [
        3689,
        3712
      ],
      "content": "Remove the example code"
    },
    {
      "pos": [
        3714,
        3811
      ],
      "content": "Because we will be creating our application, delete the generated test and the application files:"
    },
    {
      "pos": [
        3816,
        3868
      ],
      "content": "<bpt id=\"p12\">**</bpt>src\\test\\java\\com\\microsoft\\example\\AppTest.java<ept id=\"p12\">**</ept>"
    },
    {
      "pos": [
        3873,
        3921
      ],
      "content": "<bpt id=\"p13\">**</bpt>src\\main\\java\\com\\microsoft\\example\\App.java<ept id=\"p13\">**</ept>"
    },
    {
      "pos": [
        3925,
        3941
      ],
      "content": "Add dependencies"
    },
    {
      "pos": [
        3943,
        4115
      ],
      "content": "Because this is a Storm topology, you must add a dependency for Storm components. Open the <bpt id=\"p14\">**</bpt>pom.xml<ept id=\"p14\">**</ept><ph id=\"ph28\"/> file and add the following code in the <bpt id=\"p15\">**</bpt>&amp;lt;dependencies&gt;<ept id=\"p15\">**</ept><ph id=\"ph29\"/> section:",
      "nodes": [
        {
          "content": "Because this is a Storm topology, you must add a dependency for Storm components.",
          "pos": [
            0,
            81
          ]
        },
        {
          "content": "Open the <bpt id=\"p14\">**</bpt>pom.xml<ept id=\"p14\">**</ept><ph id=\"ph28\"/> file and add the following code in the <bpt id=\"p15\">**</bpt>&amp;lt;dependencies&gt;<ept id=\"p15\">**</ept><ph id=\"ph29\"/> section:",
          "pos": [
            82,
            289
          ]
        }
      ]
    },
    {
      "pos": [
        4368,
        4642
      ],
      "content": "At compile time, Maven uses this information to look up <bpt id=\"p16\">**</bpt>storm-core<ept id=\"p16\">**</ept><ph id=\"ph30\"/> in the Maven repository. It first looks in the repository on your local computer. If the files aren't there, it will download them from the public Maven repository and store them in the local repository.",
      "nodes": [
        {
          "content": "At compile time, Maven uses this information to look up <bpt id=\"p16\">**</bpt>storm-core<ept id=\"p16\">**</ept><ph id=\"ph30\"/> in the Maven repository.",
          "pos": [
            0,
            150
          ]
        },
        {
          "content": "It first looks in the repository on your local computer.",
          "pos": [
            151,
            207
          ]
        },
        {
          "content": "If the files aren't there, it will download them from the public Maven repository and store them in the local repository.",
          "pos": [
            208,
            329
          ]
        }
      ]
    },
    {
      "pos": [
        4646,
        5012
      ],
      "content": "<ph id=\"ph31\">[AZURE.NOTE]</ph><ph id=\"ph32\"/> Notice the <ph id=\"ph33\">`&lt;scope&gt;provided&lt;/scope&gt;`</ph><ph id=\"ph34\"/> line in the section we added. This tells Maven to exclude <bpt id=\"p17\">**</bpt>storm-core<ept id=\"p17\">**</ept><ph id=\"ph35\"/> from any JAR files we create, because it will be provided by the system. This allows the packages you create to be a little smaller, and it ensures that they will use the <bpt id=\"p18\">**</bpt>storm-core<ept id=\"p18\">**</ept><ph id=\"ph36\"/> bits that are included in the Storm on HDInsight cluster.",
      "nodes": [
        {
          "content": "<ph id=\"ph31\">[AZURE.NOTE]</ph><ph id=\"ph32\"/> Notice the <ph id=\"ph33\">`&lt;scope&gt;provided&lt;/scope&gt;`</ph><ph id=\"ph34\"/> line in the section we added.",
          "pos": [
            0,
            159
          ]
        },
        {
          "content": "This tells Maven to exclude <bpt id=\"p17\">**</bpt>storm-core<ept id=\"p17\">**</ept><ph id=\"ph35\"/> from any JAR files we create, because it will be provided by the system.",
          "pos": [
            160,
            330
          ]
        },
        {
          "content": "This allows the packages you create to be a little smaller, and it ensures that they will use the <bpt id=\"p18\">**</bpt>storm-core<ept id=\"p18\">**</ept><ph id=\"ph36\"/> bits that are included in the Storm on HDInsight cluster.",
          "pos": [
            331,
            556
          ]
        }
      ]
    },
    {
      "pos": [
        5016,
        5035
      ],
      "content": "Build configuration"
    },
    {
      "pos": [
        5037,
        5272
      ],
      "content": "Maven plug-ins allow you to customize the build stages of the project, such as how the project is compiled or how to package it into a JAR file. Open the <bpt id=\"p19\">**</bpt>pom.xml<ept id=\"p19\">**</ept><ph id=\"ph37\"/> file and add the following code directly above the <ph id=\"ph38\">`&lt;/project&gt;`</ph><ph id=\"ph39\"/> line.",
      "nodes": [
        {
          "content": "Maven plug-ins allow you to customize the build stages of the project, such as how the project is compiled or how to package it into a JAR file.",
          "pos": [
            0,
            144
          ]
        },
        {
          "content": "Open the <bpt id=\"p19\">**</bpt>pom.xml<ept id=\"p19\">**</ept><ph id=\"ph37\"/> file and add the following code directly above the <ph id=\"ph38\">`&lt;/project&gt;`</ph><ph id=\"ph39\"/> line.",
          "pos": [
            145,
            330
          ]
        }
      ]
    },
    {
      "pos": [
        5333,
        5413
      ],
      "content": "This section will be used to add plug-ins and other build configuration options."
    },
    {
      "pos": [
        5418,
        5430
      ],
      "content": "Add plug-ins"
    },
    {
      "pos": [
        5432,
        5752
      ],
      "content": "For Storm topologies, the <ph id=\"ph40\">&lt;a href=\"http://mojo.codehaus.org/exec-maven-plugin/\" target=\"_blank\"&gt;</ph>Exec Maven Plugin<ph id=\"ph41\">&lt;/a&gt;</ph><ph id=\"ph42\"/> is useful because it allows you to easily run the topology locally in your development environment. Add the following to the <ph id=\"ph43\">`&lt;plugins&gt;`</ph><ph id=\"ph44\"/> section of the <bpt id=\"p20\">**</bpt>pom.xml<ept id=\"p20\">**</ept><ph id=\"ph45\"/> file to include the Exec Maven plugin:",
      "nodes": [
        {
          "content": "For Storm topologies, the <ph id=\"ph40\">&lt;a href=\"http://mojo.codehaus.org/exec-maven-plugin/\" target=\"_blank\"&gt;</ph>Exec Maven Plugin<ph id=\"ph41\">&lt;/a&gt;</ph><ph id=\"ph42\"/> is useful because it allows you to easily run the topology locally in your development environment.",
          "pos": [
            0,
            282
          ]
        },
        {
          "content": "Add the following to the <ph id=\"ph43\">`&lt;plugins&gt;`</ph><ph id=\"ph44\"/> section of the <bpt id=\"p20\">**</bpt>pom.xml<ept id=\"p20\">**</ept><ph id=\"ph45\"/> file to include the Exec Maven plugin:",
          "pos": [
            283,
            480
          ]
        }
      ]
    },
    {
      "pos": [
        6335,
        6364
      ],
      "content": "Another useful plug-in is the"
    },
    {
      "pos": [
        6446,
        6474
      ],
      "content": "Apache Maven Compiler Plugin"
    },
    {
      "pos": [
        6478,
        6671
      ],
      "content": ", which is used to change compilation options. The primary reason we need this is to change the Java version that Maven uses for the source and target for your application. We want version 1.7.",
      "nodes": [
        {
          "content": ", which is used to change compilation options.",
          "pos": [
            0,
            46
          ]
        },
        {
          "content": "The primary reason we need this is to change the Java version that Maven uses for the source and target for your application.",
          "pos": [
            47,
            172
          ]
        },
        {
          "content": "We want version 1.7.",
          "pos": [
            173,
            193
          ]
        }
      ]
    },
    {
      "pos": [
        6673,
        6832
      ],
      "content": "Add the following in the <ph id=\"ph46\">`&lt;plugins&gt;`</ph><ph id=\"ph47\"/> section of the <bpt id=\"p21\">**</bpt>pom.xml<ept id=\"p21\">**</ept><ph id=\"ph48\"/> file to include the Apache Maven Compiler plugin and set the source and target versions to 1.7."
    },
    {
      "pos": [
        7070,
        7089
      ],
      "content": "Create the topology"
    },
    {
      "pos": [
        7091,
        7200
      ],
      "content": "A Java-based Storm topology consists of three components that you must author (or reference) as a dependency."
    },
    {
      "pos": [
        7204,
        7293
      ],
      "content": "<bpt id=\"p22\">**</bpt>Spouts<ept id=\"p22\">**</ept>: Reads data from external sources and emits streams of data into the topology."
    },
    {
      "pos": [
        7297,
        7403
      ],
      "content": "<bpt id=\"p23\">**</bpt>Bolts<ept id=\"p23\">**</ept>: Performs processing on streams emitted by spouts or other bolts, and emits one or more streams."
    },
    {
      "pos": [
        7407,
        7514
      ],
      "content": "<bpt id=\"p24\">**</bpt>Topology<ept id=\"p24\">**</ept>: Defines how the spouts and bolts are arranged, and provides the entry point for the topology."
    },
    {
      "pos": [
        7519,
        7535
      ],
      "content": "Create the spout"
    },
    {
      "pos": [
        7537,
        7713
      ],
      "content": "To reduce requirements for setting up external data sources, the following spout simply emits random sentences. It is a modified version of a spout that is provided with the  (",
      "nodes": [
        {
          "content": "To reduce requirements for setting up external data sources, the following spout simply emits random sentences.",
          "pos": [
            0,
            111
          ]
        },
        {
          "content": "It is a modified version of a spout that is provided with the  (",
          "pos": [
            112,
            176
          ]
        }
      ]
    },
    {
      "pos": [
        7807,
        7829
      ],
      "content": "Storm-Starter examples"
    },
    {
      "pos": [
        7833,
        7835
      ],
      "content": ")."
    },
    {
      "pos": [
        7839,
        7953
      ],
      "content": "<ph id=\"ph49\">[AZURE.NOTE]</ph><ph id=\"ph50\"/> For an example of a spout that reads from an external data source, see one of the following examples:"
    },
    {
      "pos": [
        7960,
        8169
      ],
      "content": "<ph id=\"ph51\">&lt;a href=\"https://github.com/apache/storm/blob/master/examples/storm-starter/src/jvm/storm/starter/spout/TwitterSampleSpout.java\" target=\"_blank\"&gt;</ph>TwitterSampleSpout<ph id=\"ph52\">&lt;/a&gt;</ph>: An example spout that reads from Twitter"
    },
    {
      "pos": [
        8176,
        8313
      ],
      "content": "<ph id=\"ph53\">&lt;a href=\"https://github.com/apache/storm/tree/master/external/storm-kafka\" target=\"_blank\"&gt;</ph>Storm-Kafka<ph id=\"ph54\">&lt;/a&gt;</ph>: A spout that reads from Kafka"
    },
    {
      "pos": [
        8315,
        8478
      ],
      "content": "For the spout, create a new file named <bpt id=\"p25\">**</bpt>RandomSentenceSpout.java<ept id=\"p25\">**</ept><ph id=\"ph55\"/> in the <bpt id=\"p26\">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id=\"p26\">**</ept><ph id=\"ph56\"/> directory and use the following as the contents:"
    },
    {
      "pos": [
        11571,
        11654
      ],
      "content": "Take a moment to read through the code comments to understand how this spout works."
    },
    {
      "pos": [
        11658,
        11795
      ],
      "content": "<ph id=\"ph57\">[AZURE.NOTE]</ph><ph id=\"ph58\"/> Although this topology uses only one spout, others may have several that feed data from different sources into the topology."
    },
    {
      "pos": [
        11800,
        11816
      ],
      "content": "Create the bolts"
    },
    {
      "pos": [
        11818,
        11889
      ],
      "content": "Bolts handle the data processing. For this topology, we have two bolts:",
      "nodes": [
        {
          "content": "Bolts handle the data processing.",
          "pos": [
            0,
            33
          ]
        },
        {
          "content": "For this topology, we have two bolts:",
          "pos": [
            34,
            71
          ]
        }
      ]
    },
    {
      "pos": [
        11893,
        11990
      ],
      "content": "<bpt id=\"p27\">**</bpt>SplitSentence<ept id=\"p27\">**</ept>: Splits the sentences emitted by <bpt id=\"p28\">**</bpt>RandomSentenceSpout<ept id=\"p28\">**</ept><ph id=\"ph59\"/> into individual words."
    },
    {
      "pos": [
        11994,
        12054
      ],
      "content": "<bpt id=\"p29\">**</bpt>WordCount<ept id=\"p29\">**</ept>: Counts how many times each word has occurred."
    },
    {
      "pos": [
        12058,
        12177
      ],
      "content": "<ph id=\"ph60\">[AZURE.NOTE]</ph><ph id=\"ph61\"/> Bolts can do literally anything, for example, computation, persistence, or talking to external components."
    },
    {
      "pos": [
        12179,
        12353
      ],
      "content": "Create two new files, <bpt id=\"p30\">**</bpt>SplitSentence.java<ept id=\"p30\">**</ept><ph id=\"ph62\"/> and <bpt id=\"p31\">**</bpt>WordCount.Java<ept id=\"p31\">**</ept><ph id=\"ph63\"/> in the <bpt id=\"p32\">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id=\"p32\">**</ept><ph id=\"ph64\"/> directory. Use the following as the contents for the files:",
      "nodes": [
        {
          "content": "Create two new files, <bpt id=\"p30\">**</bpt>SplitSentence.java<ept id=\"p30\">**</ept><ph id=\"ph62\"/> and <bpt id=\"p31\">**</bpt>WordCount.Java<ept id=\"p31\">**</ept><ph id=\"ph63\"/> in the <bpt id=\"p32\">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id=\"p32\">**</ept><ph id=\"ph64\"/> directory.",
          "pos": [
            0,
            290
          ]
        },
        {
          "content": "Use the following as the contents for the files:",
          "pos": [
            291,
            339
          ]
        }
      ]
    },
    {
      "pos": [
        12355,
        12372
      ],
      "content": "<bpt id=\"p33\">**</bpt>SplitSentence<ept id=\"p33\">**</ept>"
    },
    {
      "pos": [
        14074,
        14087
      ],
      "content": "<bpt id=\"p34\">**</bpt>WordCount<ept id=\"p34\">**</ept>"
    },
    {
      "pos": [
        15533,
        15615
      ],
      "content": "Take a moment to read through the code comments to understand how each bolt works."
    },
    {
      "pos": [
        15620,
        15639
      ],
      "content": "Create the topology"
    },
    {
      "pos": [
        15641,
        15868
      ],
      "content": "The topology ties the spouts and bolts together into a graph, which defines how data flows between the components. It also provides parallelism hints that Storm uses when creating instances of the components within the cluster.",
      "nodes": [
        {
          "content": "The topology ties the spouts and bolts together into a graph, which defines how data flows between the components.",
          "pos": [
            0,
            114
          ]
        },
        {
          "content": "It also provides parallelism hints that Storm uses when creating instances of the components within the cluster.",
          "pos": [
            115,
            227
          ]
        }
      ]
    },
    {
      "pos": [
        15870,
        15948
      ],
      "content": "The following is a basic diagram of the graph of components for this topology."
    },
    {
      "pos": [
        15950,
        16071
      ],
      "content": "<ph id=\"ph65\">![</ph>diagram showing the spouts and bolts arrangement<ph id=\"ph66\">](./media/hdinsight-storm-develop-java-topology/wordcount-topology.png)</ph>"
    },
    {
      "pos": [
        16073,
        16256
      ],
      "content": "To implement the topology, create a new file named <bpt id=\"p35\">**</bpt>WordCountTopology.java<ept id=\"p35\">**</ept><ph id=\"ph67\"/> in the <bpt id=\"p36\">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id=\"p36\">**</ept><ph id=\"ph68\"/> directory. Use the following as the contents for the file:",
      "nodes": [
        {
          "content": "To implement the topology, create a new file named <bpt id=\"p35\">**</bpt>WordCountTopology.java<ept id=\"p35\">**</ept><ph id=\"ph67\"/> in the <bpt id=\"p36\">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id=\"p36\">**</ept><ph id=\"ph68\"/> directory.",
          "pos": [
            0,
            245
          ]
        },
        {
          "content": "Use the following as the contents for the file:",
          "pos": [
            246,
            293
          ]
        }
      ]
    },
    {
      "pos": [
        18601,
        18725
      ],
      "content": "Take a moment to read through the code comments to understand how the topology is defined and then submitted to the cluster."
    },
    {
      "pos": [
        18729,
        18754
      ],
      "content": "Test the topology locally"
    },
    {
      "pos": [
        18756,
        18837
      ],
      "content": "After you save the files, use the following command to test the topology locally."
    },
    {
      "pos": [
        18923,
        19106
      ],
      "content": "As it runs, the topology will display startup information. Then it begins to display lines similar to the following as sentences are emitted from the spout and processed by the bolts.",
      "nodes": [
        {
          "content": "As it runs, the topology will display startup information.",
          "pos": [
            0,
            58
          ]
        },
        {
          "content": "Then it begins to display lines similar to the following as sentences are emitted from the spout and processed by the bolts.",
          "pos": [
            59,
            183
          ]
        }
      ]
    },
    {
      "pos": [
        20611,
        20667
      ],
      "content": "As you can see from this output, the following occurred:"
    },
    {
      "pos": [
        20672,
        20723
      ],
      "content": "Spout emits \"an apple a day keeps the doctor away.\""
    },
    {
      "pos": [
        20728,
        20790
      ],
      "content": "Split bolt begins emitting individual words from the sentence."
    },
    {
      "pos": [
        20795,
        20871
      ],
      "content": "Count bolt begins emitting each word and how many times it has been emitted."
    },
    {
      "pos": [
        20873,
        21127
      ],
      "content": "By looking at the data emitted by the count bolt, we can see that 'apple' has been emitted 53 times. The count will continue to go up as long as the topology runs because the same sentences are randomly emitted over and over and the count is never reset.",
      "nodes": [
        {
          "content": "By looking at the data emitted by the count bolt, we can see that 'apple' has been emitted 53 times.",
          "pos": [
            0,
            100
          ]
        },
        {
          "content": "The count will continue to go up as long as the topology runs because the same sentences are randomly emitted over and over and the count is never reset.",
          "pos": [
            101,
            254
          ]
        }
      ]
    },
    {
      "pos": [
        21131,
        21138
      ],
      "content": "Trident"
    },
    {
      "pos": [
        21140,
        21697
      ],
      "content": "Trident is a high-level abstraction that is provided by Storm. It supports stateful processing. The primary advantage of Trident is that it can guarantee that every message that enters the topology is processed only once. This is difficult to achieve in a raw Java topology, which guarantee's that messages will be processed at least once. There are also other differences, such as built-in components that can be used instead of creating bolts. In fact, bolts are completely replaced by less-generic components, such as filters, projections, and functions.",
      "nodes": [
        {
          "content": "Trident is a high-level abstraction that is provided by Storm.",
          "pos": [
            0,
            62
          ]
        },
        {
          "content": "It supports stateful processing.",
          "pos": [
            63,
            95
          ]
        },
        {
          "content": "The primary advantage of Trident is that it can guarantee that every message that enters the topology is processed only once.",
          "pos": [
            96,
            221
          ]
        },
        {
          "content": "This is difficult to achieve in a raw Java topology, which guarantee's that messages will be processed at least once.",
          "pos": [
            222,
            339
          ]
        },
        {
          "content": "There are also other differences, such as built-in components that can be used instead of creating bolts.",
          "pos": [
            340,
            445
          ]
        },
        {
          "content": "In fact, bolts are completely replaced by less-generic components, such as filters, projections, and functions.",
          "pos": [
            446,
            557
          ]
        }
      ]
    },
    {
      "pos": [
        21699,
        21853
      ],
      "content": "Trident applications can be created by using Maven projects. You use the same basic steps as presented earlier in this article—only the code is different.",
      "nodes": [
        {
          "content": "Trident applications can be created by using Maven projects.",
          "pos": [
            0,
            60
          ]
        },
        {
          "content": "You use the same basic steps as presented earlier in this article—only the code is different.",
          "pos": [
            61,
            154
          ]
        }
      ]
    },
    {
      "pos": [
        21855,
        21898
      ],
      "content": "For more information about Trident, see the"
    },
    {
      "pos": [
        21989,
        22009
      ],
      "content": "Trident API Overview"
    },
    {
      "pos": [
        22013,
        22014
      ],
      "content": "."
    },
    {
      "pos": [
        22016,
        22155
      ],
      "content": "For an example of a Trident application, see <bpt id=\"p37\">[</bpt>Twitter trending topics with Apache Storm on HDInsight<ept id=\"p37\">](hdinsight-storm-twitter-trending.md)</ept>."
    },
    {
      "pos": [
        22159,
        22169
      ],
      "content": "Next Steps"
    },
    {
      "pos": [
        22171,
        22251
      ],
      "content": "You have learned how to create a Storm topology by using Java. Now learn how to:",
      "nodes": [
        {
          "content": "You have learned how to create a Storm topology by using Java.",
          "pos": [
            0,
            62
          ]
        },
        {
          "content": "Now learn how to:",
          "pos": [
            63,
            80
          ]
        }
      ]
    },
    {
      "pos": [
        22255,
        22355
      ],
      "content": "<bpt id=\"p38\">[</bpt>Deploy and manage Apache Storm topologies on HDInsight<ept id=\"p38\">](hdinsight-storm-deploy-monitor-topology.md)</ept>"
    },
    {
      "pos": [
        22359,
        22490
      ],
      "content": "<bpt id=\"p39\">[</bpt>Develop C# topologies for Apache Storm on HDInsight using Visual Studio<ept id=\"p39\">](hdinsight-storm-develop-csharp-visual-studio-topology.md)</ept>"
    },
    {
      "pos": [
        22492,
        22628
      ],
      "content": "You can find more example Storm topologies by visiting <bpt id=\"p40\">[</bpt>Example topologies for Storm on HDInsight<ept id=\"p40\">](hdinsight-storm-example-topology.md)</ept>."
    }
  ],
  "content": "<properties\n   pageTitle=\"Develop Java-based topologies for Apache Storm | Microsoft Azure\"\n   description=\"Learn how to create Storm topologies in Java by creating a simple word count topology.\"\n   services=\"hdinsight\"\n   documentationCenter=\"\"\n   authors=\"Blackmist\"\n   manager=\"paulettm\"\n   editor=\"cgronlun\"\n    tags=\"azure-portal\"/>\n\n<tags\n   ms.service=\"hdinsight\"\n   ms.devlang=\"java\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"big-data\"\n   ms.date=\"01/29/2016\"\n   ms.author=\"larryfr\"/>\n\n#Develop Java-based topologies for a basic word-count application with Apache Storm and Maven on HDInsight\n\nLearn a basic process to create a Java-based topology for Apache Storm on HDInsight by using Maven. You will walk through the process of creating a basic word-count application using Maven and Java. Although instructions are provided for using Eclipse, you can also use the text editor of your choice.\n\nAfter completing the steps in this document, you will have a basic topology that you can deploy to Apache Storm on HDInsight.\n\n> [AZURE.NOTE]: A completed version of this topology is available at [https://github.com/Azure-Samples/hdinsight-java-storm-wordcount](https://github.com/Azure-Samples/hdinsight-java-storm-wordcount).\n\n##Prerequisites\n\n* <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\">Java Developer Kit (JDK) version 7</a>\n\n* <a href=\"https://maven.apache.org/download.cgi\" target=\"_blank\">Maven</a>: Maven is a project build system for Java projects.\n\n* A text editor such as Notepad, <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\">Emacs<a>, <a href=\"http://www.sublimetext.com/\" target=\"_blank\">Sublime Text</a>, <a href=\"https://atom.io/\" target=\"_blank\">Atom.io</a>, <a href=\"http://brackets.io/\" target=\"_blank\">Brackets.io</a>. Or you can use an integrated development environment (IDE) such as <a href=\"https://eclipse.org/\" target=\"_blank\">Eclipse</a> (version Luna or later).\n\n    > [AZURE.NOTE] Your editor or IDE may have specific functionality for working with Maven that is not addressed in this document. For information about the capabilities of your editing environment, see the documentation for the product you are using.\n\n##Configure environment variables\n\nThe following environment variables may be set when you install Java and the JDK. However, you should check that they exist and that they contain the correct values for your system.\n\n* **JAVA_HOME** - should point to the directory where the Java runtime environment (JRE) is installed. For example, in a Unix or Linux distribution, it should have a value similar to `/usr/lib/jvm/java-7-oracle`. In Windows, it would have a value similar to `c:\\Program Files (x86)\\Java\\jre1.7`\n\n* **PATH** - should contain the following paths:\n\n    * **JAVA_HOME** (or the equivalent path)\n\n    * **JAVA_HOME\\bin** (or the equivalent path)\n\n    * The directory where Maven is installed\n\n##Create a new Maven project\n\nFrom the command line, use the following code to create a new Maven project named **WordCount**:\n\n    mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=com.microsoft.example -DartifactId=WordCount -DinteractiveMode=false\n\nThis will create a new directory named **WordCount** at the current location, which contains a basic Maven project.\n\nThe **WordCount** directory will contain the following items:\n\n* **pom.xml**: Contains settings for the Maven project.\n\n* **src\\main\\java\\com\\microsoft\\example**: Contains your application code.\n\n* **src\\test\\java\\com\\microsoft\\example**: Contains tests for your application. For this example, we will not be creating tests.\n\n###Remove the example code\n\nBecause we will be creating our application, delete the generated test and the application files:\n\n*  **src\\test\\java\\com\\microsoft\\example\\AppTest.java**\n\n*  **src\\main\\java\\com\\microsoft\\example\\App.java**\n\n##Add dependencies\n\nBecause this is a Storm topology, you must add a dependency for Storm components. Open the **pom.xml** file and add the following code in the **&lt;dependencies>** section:\n\n    <dependency>\n      <groupId>org.apache.storm</groupId>\n      <artifactId>storm-core</artifactId>\n      <version>0.9.2-incubating</version>\n      <!-- keep storm out of the jar-with-dependencies -->\n      <scope>provided</scope>\n    </dependency>\n\nAt compile time, Maven uses this information to look up **storm-core** in the Maven repository. It first looks in the repository on your local computer. If the files aren't there, it will download them from the public Maven repository and store them in the local repository.\n\n> [AZURE.NOTE] Notice the `<scope>provided</scope>` line in the section we added. This tells Maven to exclude **storm-core** from any JAR files we create, because it will be provided by the system. This allows the packages you create to be a little smaller, and it ensures that they will use the **storm-core** bits that are included in the Storm on HDInsight cluster.\n\n##Build configuration\n\nMaven plug-ins allow you to customize the build stages of the project, such as how the project is compiled or how to package it into a JAR file. Open the **pom.xml** file and add the following code directly above the `</project>` line.\n\n    <build>\n      <plugins>\n      </plugins>\n    </build>\n\nThis section will be used to add plug-ins and other build configuration options.\n\n###Add plug-ins\n\nFor Storm topologies, the <a href=\"http://mojo.codehaus.org/exec-maven-plugin/\" target=\"_blank\">Exec Maven Plugin</a> is useful because it allows you to easily run the topology locally in your development environment. Add the following to the `<plugins>` section of the **pom.xml** file to include the Exec Maven plugin:\n\n    <plugin>\n      <groupId>org.codehaus.mojo</groupId>\n      <artifactId>exec-maven-plugin</artifactId>\n      <executions>\n        <execution>\n        <goals>\n          <goal>exec</goal>\n        </goals>\n        </execution>\n      </executions>\n      <configuration>\n        <executable>java</executable>\n        <includeProjectDependencies>true</includeProjectDependencies>\n        <includePluginDependencies>false</includePluginDependencies>\n        <classpathScope>compile</classpathScope>\n        <mainClass>${storm.topology}</mainClass>\n      </configuration>\n    </plugin>\n\nAnother useful plug-in is the <a href=\"http://maven.apache.org/plugins/maven-compiler-plugin/\" target=\"_blank\">Apache Maven Compiler Plugin</a>, which is used to change compilation options. The primary reason we need this is to change the Java version that Maven uses for the source and target for your application. We want version 1.7.\n\nAdd the following in the `<plugins>` section of the **pom.xml** file to include the Apache Maven Compiler plugin and set the source and target versions to 1.7.\n\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <configuration>\n        <source>1.7</source>\n        <target>1.7</target>\n      </configuration>\n    </plugin>\n\n##Create the topology\n\nA Java-based Storm topology consists of three components that you must author (or reference) as a dependency.\n\n* **Spouts**: Reads data from external sources and emits streams of data into the topology.\n\n* **Bolts**: Performs processing on streams emitted by spouts or other bolts, and emits one or more streams.\n\n* **Topology**: Defines how the spouts and bolts are arranged, and provides the entry point for the topology.\n\n###Create the spout\n\nTo reduce requirements for setting up external data sources, the following spout simply emits random sentences. It is a modified version of a spout that is provided with the  (<a href=\"https://github.com/apache/storm/blob/master/examples/storm-starter/\" target=\"_blank\">Storm-Starter examples</a>).\n\n> [AZURE.NOTE] For an example of a spout that reads from an external data source, see one of the following examples:\n>\n> * <a href=\"https://github.com/apache/storm/blob/master/examples/storm-starter/src/jvm/storm/starter/spout/TwitterSampleSpout.java\" target=\"_blank\">TwitterSampleSpout</a>: An example spout that reads from Twitter\n>\n> * <a href=\"https://github.com/apache/storm/tree/master/external/storm-kafka\" target=\"_blank\">Storm-Kafka</a>: A spout that reads from Kafka\n\nFor the spout, create a new file named **RandomSentenceSpout.java** in the **src\\main\\java\\com\\microsoft\\example** directory and use the following as the contents:\n\n    /**\n     * Licensed to the Apache Software Foundation (ASF) under one\n     * or more contributor license agreements.  See the NOTICE file\n     * distributed with this work for additional information\n     * regarding copyright ownership.  The ASF licenses this file\n     * to you under the Apache License, Version 2.0 (the\n     * \"License\"); you may not use this file except in compliance\n     * with the License.  You may obtain a copy of the License at\n     *\n     * http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n     /**\n      * Original is available at https://github.com/apache/storm/blob/master/examples/storm-starter/src/jvm/storm/starter/spout/RandomSentenceSpout.java\n      */\n\n    package com.microsoft.example;\n\n    import backtype.storm.spout.SpoutOutputCollector;\n    import backtype.storm.task.TopologyContext;\n    import backtype.storm.topology.OutputFieldsDeclarer;\n    import backtype.storm.topology.base.BaseRichSpout;\n    import backtype.storm.tuple.Fields;\n    import backtype.storm.tuple.Values;\n    import backtype.storm.utils.Utils;\n\n    import java.util.Map;\n    import java.util.Random;\n\n    //This spout randomly emits sentences\n    public class RandomSentenceSpout extends BaseRichSpout {\n      //Collector used to emit output\n      SpoutOutputCollector _collector;\n      //Used to generate a random number\n      Random _rand;\n\n      //Open is called when an instance of the class is created\n      @Override\n      public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n      //Set the instance collector to the one passed in\n        _collector = collector;\n        //For randomness\n        _rand = new Random();\n      }\n\n      //Emit data to the stream\n      @Override\n      public void nextTuple() {\n      //Sleep for a bit\n        Utils.sleep(100);\n        //The sentences that will be randomly emitted\n        String[] sentences = new String[]{ \"the cow jumped over the moon\", \"an apple a day keeps the doctor away\",\n            \"four score and seven years ago\", \"snow white and the seven dwarfs\", \"i am at two with nature\" };\n        //Randomly pick a sentence\n        String sentence = sentences[_rand.nextInt(sentences.length)];\n        //Emit the sentence\n        _collector.emit(new Values(sentence));\n      }\n\n      //Ack is not implemented since this is a basic example\n      @Override\n      public void ack(Object id) {\n      }\n\n      //Fail is not implemented since this is a basic example\n      @Override\n      public void fail(Object id) {\n      }\n\n      //Declare the output fields. In this case, an sentence\n      @Override\n      public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        declarer.declare(new Fields(\"sentence\"));\n      }\n    }\n\nTake a moment to read through the code comments to understand how this spout works.\n\n> [AZURE.NOTE] Although this topology uses only one spout, others may have several that feed data from different sources into the topology.\n\n###Create the bolts\n\nBolts handle the data processing. For this topology, we have two bolts:\n\n* **SplitSentence**: Splits the sentences emitted by **RandomSentenceSpout** into individual words.\n\n* **WordCount**: Counts how many times each word has occurred.\n\n> [AZURE.NOTE] Bolts can do literally anything, for example, computation, persistence, or talking to external components.\n\nCreate two new files, **SplitSentence.java** and **WordCount.Java** in the **src\\main\\java\\com\\microsoft\\example** directory. Use the following as the contents for the files:\n\n**SplitSentence**\n\n    package com.microsoft.example;\n\n    import java.text.BreakIterator;\n\n    import backtype.storm.topology.BasicOutputCollector;\n    import backtype.storm.topology.OutputFieldsDeclarer;\n    import backtype.storm.topology.base.BaseBasicBolt;\n    import backtype.storm.tuple.Fields;\n    import backtype.storm.tuple.Tuple;\n    import backtype.storm.tuple.Values;\n\n    //There are a variety of bolt types. In this case, we use BaseBasicBolt\n    public class SplitSentence extends BaseBasicBolt {\n\n      //Execute is called to process tuples\n      @Override\n      public void execute(Tuple tuple, BasicOutputCollector collector) {\n        //Get the sentence content from the tuple\n        String sentence = tuple.getString(0);\n        //An iterator to get each word\n        BreakIterator boundary=BreakIterator.getWordInstance();\n        //Give the iterator the sentence\n        boundary.setText(sentence);\n        //Find the beginning first word\n        int start=boundary.first();\n        //Iterate over each word and emit it to the output stream\n        for (int end=boundary.next(); end != BreakIterator.DONE; start=end, end=boundary.next()) {\n          //get the word\n          String word=sentence.substring(start,end);\n          //If a word is whitespace characters, replace it with empty\n          word=word.replaceAll(\"\\\\s+\",\"\");\n          //if it's an actual word, emit it\n          if (!word.equals(\"\")) {\n            collector.emit(new Values(word));\n          }\n        }\n      }\n\n      //Declare that emitted tuples will contain a word field\n      @Override\n      public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        declarer.declare(new Fields(\"word\"));\n      }\n    }\n\n**WordCount**\n\n    package com.microsoft.example;\n\n    import java.util.HashMap;\n    import java.util.Map;\n\n    import backtype.storm.topology.BasicOutputCollector;\n    import backtype.storm.topology.OutputFieldsDeclarer;\n    import backtype.storm.topology.base.BaseBasicBolt;\n    import backtype.storm.tuple.Fields;\n    import backtype.storm.tuple.Tuple;\n    import backtype.storm.tuple.Values;\n\n    //There are a variety of bolt types. In this case, we use BaseBasicBolt\n    public class WordCount extends BaseBasicBolt {\n      //For holding words and counts\n        Map<String, Integer> counts = new HashMap<String, Integer>();\n\n        //execute is called to process tuples\n        @Override\n        public void execute(Tuple tuple, BasicOutputCollector collector) {\n          //Get the word contents from the tuple\n          String word = tuple.getString(0);\n          //Have we counted any already?\n          Integer count = counts.get(word);\n          if (count == null)\n            count = 0;\n          //Increment the count and store it\n          count++;\n          counts.put(word, count);\n          //Emit the word and the current count\n          collector.emit(new Values(word, count));\n        }\n\n        //Declare that we will emit a tuple containing two fields; word and count\n        @Override\n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n          declarer.declare(new Fields(\"word\", \"count\"));\n        }\n      }\n\nTake a moment to read through the code comments to understand how each bolt works.\n\n###Create the topology\n\nThe topology ties the spouts and bolts together into a graph, which defines how data flows between the components. It also provides parallelism hints that Storm uses when creating instances of the components within the cluster.\n\nThe following is a basic diagram of the graph of components for this topology.\n\n![diagram showing the spouts and bolts arrangement](./media/hdinsight-storm-develop-java-topology/wordcount-topology.png)\n\nTo implement the topology, create a new file named **WordCountTopology.java** in the **src\\main\\java\\com\\microsoft\\example** directory. Use the following as the contents for the file:\n\n    package com.microsoft.example;\n\n    import backtype.storm.Config;\n    import backtype.storm.LocalCluster;\n    import backtype.storm.StormSubmitter;\n    import backtype.storm.topology.TopologyBuilder;\n    import backtype.storm.tuple.Fields;\n\n    import com.microsoft.example.RandomSentenceSpout;\n\n    public class WordCountTopology {\n\n      //Entry point for the topology\n      public static void main(String[] args) throws Exception {\n      //Used to build the topology\n        TopologyBuilder builder = new TopologyBuilder();\n        //Add the spout, with a name of 'spout'\n        //and parallelism hint of 5 executors\n        builder.setSpout(\"spout\", new RandomSentenceSpout(), 5);\n        //Add the SplitSentence bolt, with a name of 'split'\n        //and parallelism hint of 8 executors\n        //shufflegrouping subscribes to the spout, and equally distributes\n        //tuples (sentences) across instances of the SplitSentence bolt\n        builder.setBolt(\"split\", new SplitSentence(), 8).shuffleGrouping(\"spout\");\n        //Add the counter, with a name of 'count'\n        //and parallelism hint of 12 executors\n        //fieldsgrouping subscribes to the split bolt, and\n        //ensures that the same word is sent to the same instance (group by field 'word')\n        builder.setBolt(\"count\", new WordCount(), 12).fieldsGrouping(\"split\", new Fields(\"word\"));\n\n        //new configuration\n        Config conf = new Config();\n        conf.setDebug(true);\n\n        //If there are arguments, we are running on a cluster\n        if (args != null && args.length > 0) {\n          //parallelism hint to set the number of workers\n          conf.setNumWorkers(3);\n          //submit the topology\n          StormSubmitter.submitTopology(args[0], conf, builder.createTopology());\n        }\n        //Otherwise, we are running locally\n        else {\n          //Cap the maximum number of executors that can be spawned\n          //for a component to 3\n          conf.setMaxTaskParallelism(3);\n          //LocalCluster is used to run locally\n          LocalCluster cluster = new LocalCluster();\n          //submit the topology\n          cluster.submitTopology(\"word-count\", conf, builder.createTopology());\n          //sleep\n          Thread.sleep(10000);\n          //shut down the cluster\n          cluster.shutdown();\n        }\n      }\n    }\n\nTake a moment to read through the code comments to understand how the topology is defined and then submitted to the cluster.\n\n##Test the topology locally\n\nAfter you save the files, use the following command to test the topology locally.\n\n    mvn compile exec:java -Dstorm.topology=com.microsoft.example.WordCountTopology\n\nAs it runs, the topology will display startup information. Then it begins to display lines similar to the following as sentences are emitted from the spout and processed by the bolts.\n\n    15398 [Thread-16-split] INFO  backtype.storm.daemon.executor - Processing received message source: spout:10, stream: default, id: {}, [an apple a day keeps thedoctor away]]\n    15398 [Thread-16-split] INFO  backtype.storm.daemon.task - Emitting: split default [an]\n    15399 [Thread-10-count] INFO  backtype.storm.daemon.executor - Processing received message source: split:6, stream: default, id: {}, [an]\n    15399 [Thread-16-split] INFO  backtype.storm.daemon.task - Emitting: split default [apple]\n    15400 [Thread-8-count] INFO  backtype.storm.daemon.executor - Processing received message source: split:6, stream: default, id: {}, [apple]\n    15400 [Thread-16-split] INFO  backtype.storm.daemon.task - Emitting: split default [a]\n    15399 [Thread-10-count] INFO  backtype.storm.daemon.task - Emitting: count default [an, 53]\n    15400 [Thread-12-count] INFO  backtype.storm.daemon.executor - Processing received message source: split:6, stream: default, id: {}, [a]\n    15400 [Thread-16-split] INFO  backtype.storm.daemon.task - Emitting: split default [day]\n    15400 [Thread-8-count] INFO  backtype.storm.daemon.task - Emitting: count default [apple, 53]\n    15401 [Thread-10-count] INFO  backtype.storm.daemon.executor - Processing received message source: split:6, stream: default, id: {}, [day]\n    15401 [Thread-16-split] INFO  backtype.storm.daemon.task - Emitting: split default [keeps]\n    15401 [Thread-12-count] INFO  backtype.storm.daemon.task - Emitting: count default [a, 53]\n\nAs you can see from this output, the following occurred:\n\n1. Spout emits \"an apple a day keeps the doctor away.\"\n\n2. Split bolt begins emitting individual words from the sentence.\n\n3. Count bolt begins emitting each word and how many times it has been emitted.\n\nBy looking at the data emitted by the count bolt, we can see that 'apple' has been emitted 53 times. The count will continue to go up as long as the topology runs because the same sentences are randomly emitted over and over and the count is never reset.\n\n##Trident\n\nTrident is a high-level abstraction that is provided by Storm. It supports stateful processing. The primary advantage of Trident is that it can guarantee that every message that enters the topology is processed only once. This is difficult to achieve in a raw Java topology, which guarantee's that messages will be processed at least once. There are also other differences, such as built-in components that can be used instead of creating bolts. In fact, bolts are completely replaced by less-generic components, such as filters, projections, and functions.\n\nTrident applications can be created by using Maven projects. You use the same basic steps as presented earlier in this article—only the code is different.\n\nFor more information about Trident, see the <a href=\"http://storm.apache.org/documentation/Trident-API-Overview.html\" target=\"_blank\">Trident API Overview</a>.\n\nFor an example of a Trident application, see [Twitter trending topics with Apache Storm on HDInsight](hdinsight-storm-twitter-trending.md).\n\n##Next Steps\n\nYou have learned how to create a Storm topology by using Java. Now learn how to:\n\n* [Deploy and manage Apache Storm topologies on HDInsight](hdinsight-storm-deploy-monitor-topology.md)\n\n* [Develop C# topologies for Apache Storm on HDInsight using Visual Studio](hdinsight-storm-develop-csharp-visual-studio-topology.md)\n\nYou can find more example Storm topologies by visiting [Example topologies for Storm on HDInsight](hdinsight-storm-example-topology.md).\n"
}