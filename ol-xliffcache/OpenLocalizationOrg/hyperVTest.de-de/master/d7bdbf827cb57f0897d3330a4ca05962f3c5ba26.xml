{
  "nodes": [
    {
      "pos": [
        27,
        106
      ],
      "content": "Schedule backend tasks in a JavaScript backend mobile service | Microsoft Azure"
    },
    {
      "pos": [
        125,
        225
      ],
      "content": "Use the scheduler in Azure Mobile Services to define JavaScript backend jobs that run on a schedule."
    },
    {
      "pos": [
        550,
        592
      ],
      "content": "Schedule recurring jobs in Mobile Services"
    },
    {
      "pos": [
        697,
        703
      ],
      "content": "&amp;nbsp;"
    },
    {
      "pos": [
        708,
        724
      ],
      "content": "[AZURE.SELECTOR]"
    },
    {
      "pos": [
        727,
        801
      ],
      "content": "<bpt id=\"p1\">[</bpt>.NET backend<ept id=\"p1\">](mobile-services-dotnet-backend-schedule-recurring-tasks.md)</ept>"
    },
    {
      "pos": [
        804,
        869
      ],
      "content": "<bpt id=\"p2\">[</bpt>Javascript backend<ept id=\"p2\">](mobile-services-schedule-recurring-tasks.md)</ept>"
    },
    {
      "pos": [
        871,
        1230
      ],
      "content": "This topic shows you how to use the job scheduler functionality in the Azure classic portal to define server script code that is executed based on a schedule that you define. In this case, the script periodically check with a remote service, in this case Twitter, and stores the results in a new table. Some other periodic tasks that can be scheduled include:",
      "nodes": [
        {
          "content": "This topic shows you how to use the job scheduler functionality in the Azure classic portal to define server script code that is executed based on a schedule that you define.",
          "pos": [
            0,
            174
          ]
        },
        {
          "content": "In this case, the script periodically check with a remote service, in this case Twitter, and stores the results in a new table.",
          "pos": [
            175,
            302
          ]
        },
        {
          "content": "Some other periodic tasks that can be scheduled include:",
          "pos": [
            303,
            359
          ]
        }
      ]
    },
    {
      "pos": [
        1234,
        1274
      ],
      "content": "Archiving old or duplicate data records."
    },
    {
      "pos": [
        1277,
        1369
      ],
      "content": "Requesting and storing external data, such as tweets, RSS entries, and location information."
    },
    {
      "pos": [
        1372,
        1409
      ],
      "content": "Processing or resizing stored images."
    },
    {
      "pos": [
        1411,
        1573
      ],
      "content": "This tutorial shows you how to use the job scheduler to create a scheduled job that requests tweet data from Twitter and stores the tweets in a new Updates table."
    },
    {
      "pos": [
        1575,
        1577
      ],
      "content": "##"
    },
    {
      "pos": [
        1613,
        1675
      ],
      "content": "Register for access to Twitter v1.1 APIs and store credentials"
    },
    {
      "pos": [
        1795,
        1797
      ],
      "content": "##"
    },
    {
      "pos": [
        1824,
        1852
      ],
      "content": "Create the new Updates table"
    },
    {
      "pos": [
        1854,
        1916
      ],
      "content": "Next, you need to create a new table in which to store tweets."
    },
    {
      "pos": [
        1921,
        2023
      ],
      "content": "In the [Azure classic portal], click the <bpt id=\"p3\">**</bpt>Data<ept id=\"p3\">**</ept><ph id=\"ph4\"/> tab for your mobile service, then click <bpt id=\"p4\">**</bpt>+Create<ept id=\"p4\">**</ept>."
    },
    {
      "pos": [
        2028,
        2090
      ],
      "content": "In <bpt id=\"p5\">**</bpt>Table name<ept id=\"p5\">**</ept><ph id=\"ph5\"/> type <bpt id=\"p6\">_</bpt>Updates<ept id=\"p6\">_</ept>, then click the check button."
    },
    {
      "pos": [
        2092,
        2094
      ],
      "content": "##"
    },
    {
      "pos": [
        2116,
        2142
      ],
      "content": "Create a new scheduled job"
    },
    {
      "pos": [
        2144,
        2251
      ],
      "content": "Now, you can create the scheduled job that accesses Twitter and stores tweet data in the new Updates table."
    },
    {
      "pos": [
        2256,
        2308
      ],
      "content": "Click the <bpt id=\"p7\">**</bpt>Scheduler<ept id=\"p7\">**</ept><ph id=\"ph6\"/> tab, then click <bpt id=\"p8\">**</bpt>+Create<ept id=\"p8\">**</ept>."
    },
    {
      "pos": [
        2315,
        2499
      ],
      "content": "<ph id=\"ph7\">[AZURE.NOTE]</ph>When you run your mobile service in <ph id=\"ph8\">&lt;em&gt;</ph>Free<ph id=\"ph9\">&lt;/em&gt;</ph><ph id=\"ph10\"/> tier, you are only able to run one scheduled job at a time. In paid tiers, you can run up to ten scheduled jobs at a time.",
      "nodes": [
        {
          "content": "<ph id=\"ph7\">[AZURE.NOTE]</ph>When you run your mobile service in <ph id=\"ph8\">&lt;em&gt;</ph>Free<ph id=\"ph9\">&lt;/em&gt;</ph><ph id=\"ph10\"/> tier, you are only able to run one scheduled job at a time.",
          "pos": [
            0,
            202
          ]
        },
        {
          "content": "In paid tiers, you can run up to ten scheduled jobs at a time.",
          "pos": [
            203,
            265
          ]
        }
      ]
    },
    {
      "pos": [
        2504,
        2635
      ],
      "content": "In the scheduler dialog, enter <bpt id=\"p9\">_</bpt>getUpdates<ept id=\"p9\">_</ept><ph id=\"ph11\"/> for the <bpt id=\"p10\">**</bpt>Job Name<ept id=\"p10\">**</ept>, set the schedule interval and units, then click the check button."
    },
    {
      "pos": [
        2641,
        2685
      ],
      "content": "This creates a new job named <bpt id=\"p11\">**</bpt>getUpdates<ept id=\"p11\">**</ept>."
    },
    {
      "pos": [
        2690,
        2827
      ],
      "content": "Click the new job you just created, click the <bpt id=\"p12\">**</bpt>Script<ept id=\"p12\">**</ept><ph id=\"ph12\"/> tab and replace the placeholder function <bpt id=\"p13\">**</bpt>getUpdates<ept id=\"p13\">**</ept><ph id=\"ph13\"/> with the following code:"
    },
    {
      "pos": [
        6161,
        6389
      ],
      "content": "This script calls the Twitter query API using stored credentials to request recent tweets that contain the hashtag <ph id=\"ph14\">`#mobileservices`</ph>. Duplicate tweets and replies are removed from the results before they are stored in the table.",
      "nodes": [
        {
          "content": "This script calls the Twitter query API using stored credentials to request recent tweets that contain the hashtag <ph id=\"ph14\">`#mobileservices`</ph>.",
          "pos": [
            0,
            152
          ]
        },
        {
          "content": "Duplicate tweets and replies are removed from the results before they are stored in the table.",
          "pos": [
            153,
            247
          ]
        }
      ]
    },
    {
      "pos": [
        6396,
        6783
      ],
      "content": "<ph id=\"ph15\">[AZURE.NOTE]</ph>This sample assumes that only a few rows are inserted into the table during each scheduled run. In cases where many rows are inserted in a loop you may run out of connections when running on the Free tier. In this case, you should perform inserts in batches. For more information, see <bpt id=\"p14\">[</bpt>How to: Perform bulk inserts<ept id=\"p14\">](mobile-services-how-to-use-server-scripts.md#bulk-inserts)</ept>.",
      "nodes": [
        {
          "content": "<ph id=\"ph15\">[AZURE.NOTE]</ph>This sample assumes that only a few rows are inserted into the table during each scheduled run.",
          "pos": [
            0,
            126
          ]
        },
        {
          "content": "In cases where many rows are inserted in a loop you may run out of connections when running on the Free tier.",
          "pos": [
            127,
            236
          ]
        },
        {
          "content": "In this case, you should perform inserts in batches.",
          "pos": [
            237,
            289
          ]
        },
        {
          "content": "For more information, see <bpt id=\"p14\">[</bpt>How to: Perform bulk inserts<ept id=\"p14\">](mobile-services-how-to-use-server-scripts.md#bulk-inserts)</ept>.",
          "pos": [
            290,
            446
          ]
        }
      ]
    },
    {
      "pos": [
        6788,
        6826
      ],
      "content": "Click <bpt id=\"p15\">**</bpt>Run Once<ept id=\"p15\">**</ept><ph id=\"ph16\"/> to test the script."
    },
    {
      "pos": [
        6832,
        6907
      ],
      "content": "This saves and executes the job while it remains disabled in the scheduler."
    },
    {
      "pos": [
        6912,
        7060
      ],
      "content": "Click the back button, click <bpt id=\"p16\">**</bpt>Data<ept id=\"p16\">**</ept>, click the <bpt id=\"p17\">**</bpt>Updates<ept id=\"p17\">**</ept><ph id=\"ph17\"/> table, click <bpt id=\"p18\">**</bpt>Browse<ept id=\"p18\">**</ept>, and verify that Twitter data has been inserted into the table."
    },
    {
      "pos": [
        7065,
        7154
      ],
      "content": "Click the back button, click <bpt id=\"p19\">**</bpt>Scheduler<ept id=\"p19\">**</ept>, select <bpt id=\"p20\">**</bpt>getUpdates<ept id=\"p20\">**</ept>, then click <bpt id=\"p21\">**</bpt>Enable<ept id=\"p21\">**</ept>."
    },
    {
      "pos": [
        7160,
        7239
      ],
      "content": "This enables the job to run on the specified schedule, in this case every hour."
    },
    {
      "pos": [
        7241,
        7402
      ],
      "content": "Congratulations, you have successfully created a new scheduled job in your mobile service. This job will be executed as scheduled until you disable or modify it.",
      "nodes": [
        {
          "content": "Congratulations, you have successfully created a new scheduled job in your mobile service.",
          "pos": [
            0,
            90
          ]
        },
        {
          "content": "This job will be executed as scheduled until you disable or modify it.",
          "pos": [
            91,
            161
          ]
        }
      ]
    },
    {
      "pos": [
        7432,
        7440
      ],
      "content": "See also"
    },
    {
      "pos": [
        7444,
        7547
      ],
      "leadings": [
        "",
        "  "
      ],
      "content": "[Mobile Services server script reference]\n<ph id=\"ph18\">&lt;br/&gt;</ph>Learn more about registering and using server scripts."
    },
    {
      "pos": [
        7567,
        7753
      ],
      "content": "[Register for Twitter access and store credentials]: #get-oauth-credentials\n[Create the new Updates table]: #create-table\n[Create a new scheduled job]: #add-job\n[Next steps]: #next-steps"
    },
    {
      "pos": [
        7788,
        8279
      ],
      "content": "[Mobile Services server script reference]: http://go.microsoft.com/fwlink/?LinkId=262293\n[WindowsAzure.com]: http://www.windowsazure.com/\n[Azure classic portal]: https://manage.windowsazure.com/\n[Register your apps for Twitter login with Mobile Services]: /develop/mobile/how-to-guides/register-for-twitter-authentication\n[Twitter Developers]: http://go.microsoft.com/fwlink/p/?LinkId=268300\n[App settings]: http://msdn.microsoft.com/library/windowsazure/b6bb7d2d-35ae-47eb-a03f-6ee393e170f7"
    }
  ],
  "content": "<properties\n    pageTitle=\"Schedule backend tasks in a JavaScript backend mobile service | Microsoft Azure\"\n    description=\"Use the scheduler in Azure Mobile Services to define JavaScript backend jobs that run on a schedule.\"\n    services=\"mobile-services\"\n    documentationCenter=\"\"\n    authors=\"ggailey777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-multiple\"\n    ms.devlang=\"multiple\"\n    ms.topic=\"article\"\n    ms.date=\"02/11/2016\"\n    ms.author=\"glenga\"/>\n\n# Schedule recurring jobs in Mobile Services\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n\n\n> [AZURE.SELECTOR]\n- [.NET backend](mobile-services-dotnet-backend-schedule-recurring-tasks.md)\n- [Javascript backend](mobile-services-schedule-recurring-tasks.md)\n\nThis topic shows you how to use the job scheduler functionality in the Azure classic portal to define server script code that is executed based on a schedule that you define. In this case, the script periodically check with a remote service, in this case Twitter, and stores the results in a new table. Some other periodic tasks that can be scheduled include:\n\n+ Archiving old or duplicate data records.\n+ Requesting and storing external data, such as tweets, RSS entries, and location information.\n+ Processing or resizing stored images.\n\nThis tutorial shows you how to use the job scheduler to create a scheduled job that requests tweet data from Twitter and stores the tweets in a new Updates table.\n\n##<a name=\"get-oauth-credentials\"></a>Register for access to Twitter v1.1 APIs and store credentials\n\n[AZURE.INCLUDE [mobile-services-register-twitter-access](../../includes/mobile-services-register-twitter-access.md)]\n\n##<a name=\"create-table\"></a>Create the new Updates table\n\nNext, you need to create a new table in which to store tweets.\n\n2. In the [Azure classic portal], click the **Data** tab for your mobile service, then click **+Create**.\n\n3. In **Table name** type _Updates_, then click the check button.\n\n##<a name=\"add-job\"></a>Create a new scheduled job\n\nNow, you can create the scheduled job that accesses Twitter and stores tweet data in the new Updates table.\n\n2. Click the **Scheduler** tab, then click **+Create**.\n\n    >[AZURE.NOTE]When you run your mobile service in <em>Free</em> tier, you are only able to run one scheduled job at a time. In paid tiers, you can run up to ten scheduled jobs at a time.\n\n3. In the scheduler dialog, enter _getUpdates_ for the **Job Name**, set the schedule interval and units, then click the check button.\n\n    This creates a new job named **getUpdates**.\n\n4. Click the new job you just created, click the **Script** tab and replace the placeholder function **getUpdates** with the following code:\n\n        var updatesTable = tables.getTable('Updates');\n        var request = require('request');\n        var twitterUrl = \"https://api.twitter.com/1.1/search/tweets.json?q=%23mobileservices&result_type=recent\";\n\n        // Get the service configuration module.\n        var config = require('mobileservice-config');\n\n        // Get the stored Twitter consumer key and secret.\n        var consumerKey = config.twitterConsumerKey,\n            consumerSecret = config.twitterConsumerSecret\n        // Get the Twitter access token from app settings.\n        var accessToken= config.appSettings.TWITTER_ACCESS_TOKEN,\n            accessTokenSecret = config.appSettings.TWITTER_ACCESS_TOKEN_SECRET;\n\n        function getUpdates() {\n            // Check what is the last tweet we stored when the job last ran\n            // and ask Twitter to only give us more recent tweets\n            appendLastTweetId(\n                twitterUrl,\n                function twitterUrlReady(url){\n                    // Create a new request with OAuth credentials.\n                    request.get({\n                        url: url,\n                        oauth: {\n                            consumer_key: consumerKey,\n                            consumer_secret: consumerSecret,\n                            token: accessToken,\n                            token_secret: accessTokenSecret\n                        }},\n                        function (error, response, body) {\n                        if (!error && response.statusCode == 200) {\n                            var results = JSON.parse(body).statuses;\n                            if(results){\n                                console.log('Fetched ' + results.length + ' new results from Twitter');\n                                results.forEach(function (tweet){\n                                    if(!filterOutTweet(tweet)){\n                                        var update = {\n                                            twitterId: tweet.id,\n                                            text: tweet.text,\n                                            author: tweet.user.screen_name,\n                                            date: tweet.created_at\n                                        };\n                                        updatesTable.insert(update);\n                                    }\n                                });\n                            }\n                        } else {\n                            console.error('Could not contact Twitter');\n                        }\n                    });\n\n                });\n         }\n        // Find the largest (most recent) tweet ID we have already stored\n        // (if we have stored any) and ask Twitter to only return more\n        // recent ones\n        function appendLastTweetId(url, callback){\n            updatesTable\n            .orderByDescending('twitterId')\n            .read({success: function readUpdates(updates){\n                if(updates.length){\n                    callback(url + '&since_id=' + (updates[0].twitterId + 1));\n                } else {\n                    callback(url);\n                }\n            }});\n        }\n\n        function filterOutTweet(tweet){\n            // Remove retweets and replies\n            return (tweet.text.indexOf('RT') === 0 || tweet.to_user_id);\n        }\n\n\n    This script calls the Twitter query API using stored credentials to request recent tweets that contain the hashtag `#mobileservices`. Duplicate tweets and replies are removed from the results before they are stored in the table.\n\n    >[AZURE.NOTE]This sample assumes that only a few rows are inserted into the table during each scheduled run. In cases where many rows are inserted in a loop you may run out of connections when running on the Free tier. In this case, you should perform inserts in batches. For more information, see [How to: Perform bulk inserts](mobile-services-how-to-use-server-scripts.md#bulk-inserts).\n\n6. Click **Run Once** to test the script.\n\n    This saves and executes the job while it remains disabled in the scheduler.\n\n7. Click the back button, click **Data**, click the **Updates** table, click **Browse**, and verify that Twitter data has been inserted into the table.\n\n8. Click the back button, click **Scheduler**, select **getUpdates**, then click **Enable**.\n\n    This enables the job to run on the specified schedule, in this case every hour.\n\nCongratulations, you have successfully created a new scheduled job in your mobile service. This job will be executed as scheduled until you disable or modify it.\n\n## <a name=\"nextsteps\"> </a>See also\n\n* [Mobile Services server script reference]\n  <br/>Learn more about registering and using server scripts.\n\n<!-- Anchors. -->\n[Register for Twitter access and store credentials]: #get-oauth-credentials\n[Create the new Updates table]: #create-table\n[Create a new scheduled job]: #add-job\n[Next steps]: #next-steps\n\n<!-- Images. -->\n\n<!-- URLs. -->\n[Mobile Services server script reference]: http://go.microsoft.com/fwlink/?LinkId=262293\n[WindowsAzure.com]: http://www.windowsazure.com/\n[Azure classic portal]: https://manage.windowsazure.com/\n[Register your apps for Twitter login with Mobile Services]: /develop/mobile/how-to-guides/register-for-twitter-authentication\n[Twitter Developers]: http://go.microsoft.com/fwlink/p/?LinkId=268300\n[App settings]: http://msdn.microsoft.com/library/windowsazure/b6bb7d2d-35ae-47eb-a03f-6ee393e170f7\n"
}