<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="de-de">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use an HTML client with Azure Mobile Services | Microsoft Azure</source>
          <target state="new">How to use an HTML client with Azure Mobile Services | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use an HTML client for Azure Mobile Services.</source>
          <target state="new">Learn how to use an HTML client for Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use an HTML/JavaScript client for Azure Mobile Services</source>
          <target state="new">How to use an HTML/JavaScript client for Azure Mobile Services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide shows you how to perform common scenarios using an HTML/JavaScript client for Azure Mobile Services, which includes Windows Store JavaScript and PhoneGap/Cordova apps.</source>
          <target state="new">This guide shows you how to perform common scenarios using an HTML/JavaScript client for Azure Mobile Services, which includes Windows Store JavaScript and PhoneGap/Cordova apps.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The scenarios covered include querying for data, inserting, updating, and deleting data, authenticating users, and handling errors.</source>
          <target state="new">The scenarios covered include querying for data, inserting, updating, and deleting data, authenticating users, and handling errors.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you are new to Mobile Services, you should consider first completing the <bpt id="p1">[</bpt>Mobile Services quickstart<ept id="p1">](mobile-services-html-get-started.md)</ept>.</source>
          <target state="new">If you are new to Mobile Services, you should consider first completing the <bpt id="p1">[</bpt>Mobile Services quickstart<ept id="p1">](mobile-services-html-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The quickstart tutorial helps you configure your account and create your first mobile service.</source>
          <target state="new">The quickstart tutorial helps you configure your account and create your first mobile service.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How to: Create the Mobile Services client</source>
          <target state="new">How to: Create the Mobile Services client</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The way that you add a reference to the Mobile Services client depends on your app platform, which includes the following:</source>
          <target state="new">The way that you add a reference to the Mobile Services client depends on your app platform, which includes the following:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For a web-based application, open the HTML file and add the following to the script references for the page:</source>
          <target state="new">For a web-based application, open the HTML file and add the following to the script references for the page:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For a Windows Store app written in JavaScript/HTML, add the <bpt id="p2">**</bpt>WindowsAzure.MobileServices.WinJS<ept id="p2">**</ept><ph id="ph4" /> NuGet package to your project.</source>
          <target state="new">For a Windows Store app written in JavaScript/HTML, add the <bpt id="p2">**</bpt>WindowsAzure.MobileServices.WinJS<ept id="p2">**</ept><ph id="ph4" /> NuGet package to your project.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For a PhoneGap or Cordova app, add the <bpt id="p3">[</bpt>Mobile Services plugin<ept id="p3">](https://github.com/Azure/azure-mobile-services-cordova)</ept><ph id="ph5" /> to your project.</source>
          <target state="new">For a PhoneGap or Cordova app, add the <bpt id="p3">[</bpt>Mobile Services plugin<ept id="p3">](https://github.com/Azure/azure-mobile-services-cordova)</ept><ph id="ph5" /> to your project.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This plugin supports <bpt id="p4">[</bpt>push notifications<ept id="p4">](#push-notifications)</ept>.</source>
          <target state="new">This plugin supports <bpt id="p4">[</bpt>push notifications<ept id="p4">](#push-notifications)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the editor, open or create a JavaScript file, and add the following code that defines the <ph id="ph6">`MobileServiceClient`</ph><ph id="ph7" /> variable, and supply the application URL and application key from the mobile service in the <ph id="ph8">`MobileServiceClient`</ph><ph id="ph9" /> constructor, in that order.</source>
          <target state="new">In the editor, open or create a JavaScript file, and add the following code that defines the <ph id="ph6">`MobileServiceClient`</ph><ph id="ph7" /> variable, and supply the application URL and application key from the mobile service in the <ph id="ph8">`MobileServiceClient`</ph><ph id="ph9" /> constructor, in that order.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You must replace the placeholder <ph id="ph10">`AppUrl`</ph><ph id="ph11" /> with the application URL of your mobile service and <ph id="ph12">`AppKey`</ph><ph id="ph13" /> with the application key, which you obtain from the <bpt id="p5">[</bpt>Azure classic portal<ept id="p5">](http://manage.windowsazure.com/)</ept>.</source>
          <target state="new">You must replace the placeholder <ph id="ph10">`AppUrl`</ph><ph id="ph11" /> with the application URL of your mobile service and <ph id="ph12">`AppKey`</ph><ph id="ph13" /> with the application key, which you obtain from the <bpt id="p5">[</bpt>Azure classic portal<ept id="p5">](http://manage.windowsazure.com/)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph14">[AZURE.IMPORTANT]</ph>The application key is intended to filter-out random request against your mobile service, and it is distributed with the application.</source>
          <target state="new"><ph id="ph14">[AZURE.IMPORTANT]</ph>The application key is intended to filter-out random request against your mobile service, and it is distributed with the application.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because this key is not encrypted, it cannot be considered secure.</source>
          <target state="new">Because this key is not encrypted, it cannot be considered secure.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To truly secure your mobile service data, you must instead authenticate users before allowing access.</source>
          <target state="new">To truly secure your mobile service data, you must instead authenticate users before allowing access.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p6">[</bpt>How to: Authenticate users<ept id="p6">](#authentication)</ept>.</source>
          <target state="new">For more information, see <bpt id="p6">[</bpt>How to: Authenticate users<ept id="p6">](#authentication)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>How to: Query data from a mobile service</source>
          <target state="new">How to: Query data from a mobile service</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All of the code that accesses or modifies data in the SQL Database table calls functions on the <ph id="ph15">`MobileServiceTable`</ph><ph id="ph16" /> object.</source>
          <target state="new">All of the code that accesses or modifies data in the SQL Database table calls functions on the <ph id="ph15">`MobileServiceTable`</ph><ph id="ph16" /> object.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You get a reference to the table by calling the <ph id="ph17">`getTable()`</ph><ph id="ph18" /> function on an instance of the <ph id="ph19">`MobileServiceClient`</ph>.</source>
          <target state="new">You get a reference to the table by calling the <ph id="ph17">`getTable()`</ph><ph id="ph18" /> function on an instance of the <ph id="ph19">`MobileServiceClient`</ph>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>How to: Filter returned data</source>
          <target state="new">How to: Filter returned data</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to filter data by including a <ph id="ph20">`where`</ph><ph id="ph21" /> clause in a query.</source>
          <target state="new">The following code illustrates how to filter data by including a <ph id="ph20">`where`</ph><ph id="ph21" /> clause in a query.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It returns all items from <ph id="ph22">`todoItemTable`</ph><ph id="ph23" /> whose complete field is equal to <ph id="ph24">`false`</ph>.</source>
          <target state="new">It returns all items from <ph id="ph22">`todoItemTable`</ph><ph id="ph23" /> whose complete field is equal to <ph id="ph24">`false`</ph>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph25">`todoItemTable`</ph><ph id="ph26" /> is the reference to the mobile service table that we created previously.</source>
          <target state="new"><ph id="ph25">`todoItemTable`</ph><ph id="ph26" /> is the reference to the mobile service table that we created previously.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The where function applies a row filtering predicate to the query against the table.</source>
          <target state="new">The where function applies a row filtering predicate to the query against the table.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It accepts as its argument a JSON object or function that defines the row filter, and returns a query that can be further composed.</source>
          <target state="new">It accepts as its argument a JSON object or function that defines the row filter, and returns a query that can be further composed.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By calling <ph id="ph27">`where`</ph><ph id="ph28" /> on the Query object and passing an object as a parameter, we are  instructing Mobile Services to return only the rows whose <ph id="ph29">`complete`</ph><ph id="ph30" /> column contains the <ph id="ph31">`false`</ph><ph id="ph32" /> value.</source>
          <target state="new">By calling <ph id="ph27">`where`</ph><ph id="ph28" /> on the Query object and passing an object as a parameter, we are  instructing Mobile Services to return only the rows whose <ph id="ph29">`complete`</ph><ph id="ph30" /> column contains the <ph id="ph31">`false`</ph><ph id="ph32" /> value.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Also, look at the request URI below, and notice that we are modifying the query string  itself:</source>
          <target state="new">Also, look at the request URI below, and notice that we are modifying the query string  itself:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can view the URI of the request sent to the mobile service by using message inspection software, such as browser developer tools or Fiddler.</source>
          <target state="new">You can view the URI of the request sent to the mobile service by using message inspection software, such as browser developer tools or Fiddler.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This request would normally be translated roughly into the following SQL query on the server side:</source>
          <target state="new">This request would normally be translated roughly into the following SQL query on the server side:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The object which is passed to the <ph id="ph33">`where`</ph><ph id="ph34" /> method can have an arbitrary number of parameters, and they'll all be interpreted as AND clauses to the query.</source>
          <target state="new">The object which is passed to the <ph id="ph33">`where`</ph><ph id="ph34" /> method can have an arbitrary number of parameters, and they'll all be interpreted as AND clauses to the query.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, the line below:</source>
          <target state="new">For example, the line below:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Would be roughly translated (for the same request shown before) as</source>
          <target state="new">Would be roughly translated (for the same request shown before) as</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph35">`where`</ph><ph id="ph36" /> statement above and the SQL query above find incomplete items assigned to "david" of "medium" difficulty.</source>
          <target state="new">The <ph id="ph35">`where`</ph><ph id="ph36" /> statement above and the SQL query above find incomplete items assigned to "david" of "medium" difficulty.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>There is, however, another way to write the same query.</source>
          <target state="new">There is, however, another way to write the same query.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <ph id="ph37">`.where`</ph><ph id="ph38" /> call on the Query object will add an <ph id="ph39">`AND`</ph><ph id="ph40" /> expression to the <ph id="ph41">`WHERE`</ph><ph id="ph42" /> clause, so we could have written that in three lines instead:</source>
          <target state="new">A <ph id="ph37">`.where`</ph><ph id="ph38" /> call on the Query object will add an <ph id="ph39">`AND`</ph><ph id="ph40" /> expression to the <ph id="ph41">`WHERE`</ph><ph id="ph42" /> clause, so we could have written that in three lines instead:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Or using the fluent API:</source>
          <target state="new">Or using the fluent API:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The two methods are equivalent and may be used interchangeably.</source>
          <target state="new">The two methods are equivalent and may be used interchangeably.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>All the <ph id="ph43">`where`</ph><ph id="ph44" /> calls so far take an object with some parameters, and are compared for equality against the data from the database.</source>
          <target state="new">All the <ph id="ph43">`where`</ph><ph id="ph44" /> calls so far take an object with some parameters, and are compared for equality against the data from the database.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There is, however, another overload for the query method, which takes a function instead of the object.</source>
          <target state="new">There is, however, another overload for the query method, which takes a function instead of the object.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this function we can then write more complex expressions, using operators such as inequality and other relational operations.</source>
          <target state="new">In this function we can then write more complex expressions, using operators such as inequality and other relational operations.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In these functions, the keyword <ph id="ph45">`this`</ph><ph id="ph46" /> binds to the server object.</source>
          <target state="new">In these functions, the keyword <ph id="ph45">`this`</ph><ph id="ph46" /> binds to the server object.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The body of the function is translated into an Open Data Protocol (OData) boolean expression which is passed to a query string parameter.</source>
          <target state="new">The body of the function is translated into an Open Data Protocol (OData) boolean expression which is passed to a query string parameter.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It is possible to pass in a function that takes no parameters, like so:</source>
          <target state="new">It is possible to pass in a function that takes no parameters, like so:</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If passing in a function with parameters, any arguments after the <ph id="ph47">`where`</ph><ph id="ph48" /> clause are bound to the function parameters in order.</source>
          <target state="new">If passing in a function with parameters, any arguments after the <ph id="ph47">`where`</ph><ph id="ph48" /> clause are bound to the function parameters in order.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Any objects which come from the outside of the function scope MUST be passed as parameters - the function cannot capture any external variables.</source>
          <target state="new">Any objects which come from the outside of the function scope MUST be passed as parameters - the function cannot capture any external variables.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the next two examples, the argument "david" is bound to the parameter <ph id="ph49">`name`</ph><ph id="ph50" /> and in the first example, the argument "medium" is also bound to the parameter <ph id="ph51">`level`</ph>.</source>
          <target state="new">In the next two examples, the argument "david" is bound to the parameter <ph id="ph49">`name`</ph><ph id="ph50" /> and in the first example, the argument "medium" is also bound to the parameter <ph id="ph51">`level`</ph>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Also, the function must consist of a single <ph id="ph52">`return`</ph><ph id="ph53" /> statement with a supported expression, like so:</source>
          <target state="new">Also, the function must consist of a single <ph id="ph52">`return`</ph><ph id="ph53" /> statement with a supported expression, like so:</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>So, as long as we follow the rules, we can add more complex filters to our database queries, like so:</source>
          <target state="new">So, as long as we follow the rules, we can add more complex filters to our database queries, like so:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It is possible to combine <ph id="ph54">`where`</ph><ph id="ph55" /> with <ph id="ph56">`orderBy`</ph>, <ph id="ph57">`take`</ph>, and <ph id="ph58">`skip`</ph>.</source>
          <target state="new">It is possible to combine <ph id="ph54">`where`</ph><ph id="ph55" /> with <ph id="ph56">`orderBy`</ph>, <ph id="ph57">`take`</ph>, and <ph id="ph58">`skip`</ph>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See the next section for details.</source>
          <target state="new">See the next section for details.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>How to: Sort returned data</source>
          <target state="new">How to: Sort returned data</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to sort data by including an <ph id="ph59">`orderBy`</ph><ph id="ph60" /> or <ph id="ph61">`orderByDescending`</ph><ph id="ph62" /> function in the query.</source>
          <target state="new">The following code illustrates how to sort data by including an <ph id="ph59">`orderBy`</ph><ph id="ph60" /> or <ph id="ph61">`orderByDescending`</ph><ph id="ph62" /> function in the query.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It returns items from <ph id="ph63">`todoItemTable`</ph><ph id="ph64" /> sorted ascending by the <ph id="ph65">`text`</ph><ph id="ph66" /> field.</source>
          <target state="new">It returns items from <ph id="ph63">`todoItemTable`</ph><ph id="ph64" /> sorted ascending by the <ph id="ph65">`text`</ph><ph id="ph66" /> field.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>By default, the server returns only the first 50 elements.</source>
          <target state="new">By default, the server returns only the first 50 elements.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph67">[AZURE.NOTE]</ph><ph id="ph68" /> A server-driven page size us used by default to prevent all elements from being returned.</source>
          <target state="new"><ph id="ph67">[AZURE.NOTE]</ph><ph id="ph68" /> A server-driven page size us used by default to prevent all elements from being returned.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This keeps default requests for large data sets from negatively impacting the service.</source>
          <target state="new">This keeps default requests for large data sets from negatively impacting the service.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You may increase the number of items to be returned by calling <ph id="ph69">`take`</ph><ph id="ph70" /> as described in the next section.</source>
          <target state="new">You may increase the number of items to be returned by calling <ph id="ph69">`take`</ph><ph id="ph70" /> as described in the next section.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph71">`todoItemTable`</ph><ph id="ph72" /> is the reference to the mobile service table that we created previously.</source>
          <target state="new"><ph id="ph71">`todoItemTable`</ph><ph id="ph72" /> is the reference to the mobile service table that we created previously.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>How to: Return data in pages</source>
          <target state="new">How to: Return data in pages</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>By default, Mobile Services only returns 50 rows in a given request, unless the client explicitly asks for more data in the response.</source>
          <target state="new">By default, Mobile Services only returns 50 rows in a given request, unless the client explicitly asks for more data in the response.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following code shows how to implement paging in returned data by using the <ph id="ph73">`take`</ph><ph id="ph74" /> and <ph id="ph75">`skip`</ph><ph id="ph76" /> clauses in the query.</source>
          <target state="new">The following code shows how to implement paging in returned data by using the <ph id="ph73">`take`</ph><ph id="ph74" /> and <ph id="ph75">`skip`</ph><ph id="ph76" /> clauses in the query.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following query, when executed, returns the top three items in the table.</source>
          <target state="new">The following query, when executed, returns the top three items in the table.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph77">`take(3)`</ph><ph id="ph78" /> method was translated into the query option <ph id="ph79">`$top=3`</ph><ph id="ph80" /> in the query URI.</source>
          <target state="new">Notice that the <ph id="ph77">`take(3)`</ph><ph id="ph78" /> method was translated into the query option <ph id="ph79">`$top=3`</ph><ph id="ph80" /> in the query URI.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following revised query skips the first three results and returns the next three after that.</source>
          <target state="new">The following revised query skips the first three results and returns the next three after that.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This is effectively the second "page" of data, where the page size is three items.</source>
          <target state="new">This is effectively the second "page" of data, where the page size is three items.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Again, you can view the URI of the request sent to the mobile service.</source>
          <target state="new">Again, you can view the URI of the request sent to the mobile service.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph81">`skip(3)`</ph><ph id="ph82" /> method was translated into the query option <ph id="ph83">`$skip=3`</ph><ph id="ph84" /> in the query URI.</source>
          <target state="new">Notice that the <ph id="ph81">`skip(3)`</ph><ph id="ph82" /> method was translated into the query option <ph id="ph83">`$skip=3`</ph><ph id="ph84" /> in the query URI.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This is a simplified scenario of passing hard-coded paging values to the <ph id="ph85">`take`</ph><ph id="ph86" /> and <ph id="ph87">`skip`</ph><ph id="ph88" /> functions.</source>
          <target state="new">This is a simplified scenario of passing hard-coded paging values to the <ph id="ph85">`take`</ph><ph id="ph86" /> and <ph id="ph87">`skip`</ph><ph id="ph88" /> functions.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In a real-world app, you can use queries similar to the above with a pager control or comparable UI to let users navigate to previous and next pages.</source>
          <target state="new">In a real-world app, you can use queries similar to the above with a pager control or comparable UI to let users navigate to previous and next pages.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>How to: Select specific columns</source>
          <target state="new">How to: Select specific columns</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can specify which set of properties to include in the results by adding a <ph id="ph89">`select`</ph><ph id="ph90" /> clause to your query.</source>
          <target state="new">You can specify which set of properties to include in the results by adding a <ph id="ph89">`select`</ph><ph id="ph90" /> clause to your query.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, the following code returns the <ph id="ph91">`id`</ph>, <ph id="ph92">`complete`</ph>, and <ph id="ph93">`text`</ph><ph id="ph94" /> properties from each row in the <ph id="ph95">`todoItemTable`</ph>:</source>
          <target state="new">For example, the following code returns the <ph id="ph91">`id`</ph>, <ph id="ph92">`complete`</ph>, and <ph id="ph93">`text`</ph><ph id="ph94" /> properties from each row in the <ph id="ph95">`todoItemTable`</ph>:</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Here the parameters to the select function are the names of the table's columns that you want to return.</source>
          <target state="new">Here the parameters to the select function are the names of the table's columns that you want to return.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>All the functions described so far are additive, so we can just keep calling them and we'll each time affect more of the query.</source>
          <target state="new">All the functions described so far are additive, so we can just keep calling them and we'll each time affect more of the query.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>One more example:</source>
          <target state="new">One more example:</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>How to: Look up data by ID</source>
          <target state="new">How to: Look up data by ID</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph96">`lookup`</ph><ph id="ph97" /> function takes only the <ph id="ph98">`id`</ph><ph id="ph99" /> value, and returns the object from the database with that ID.</source>
          <target state="new">The <ph id="ph96">`lookup`</ph><ph id="ph97" /> function takes only the <ph id="ph98">`id`</ph><ph id="ph99" /> value, and returns the object from the database with that ID.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Database tables are created with either an integer or string <ph id="ph100">`id`</ph><ph id="ph101" /> column.</source>
          <target state="new">Database tables are created with either an integer or string <ph id="ph100">`id`</ph><ph id="ph101" /> column.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A string <ph id="ph102">`id`</ph><ph id="ph103" /> column is the default.</source>
          <target state="new">A string <ph id="ph102">`id`</ph><ph id="ph103" /> column is the default.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Execute an OData query operation</source>
          <target state="new">Execute an OData query operation</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Mobile Services uses the OData query URI conventions for composing and executing REST queries.</source>
          <target state="new">Mobile Services uses the OData query URI conventions for composing and executing REST queries.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Not all OData queries can be composed by using the built-in query functions, especially complex filter operations like searching for a substring in a property.</source>
          <target state="new">Not all OData queries can be composed by using the built-in query functions, especially complex filter operations like searching for a substring in a property.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For these kinds of complex queries, you can pass any valid OData query option string to the <ph id="ph104">`read`</ph><ph id="ph105" /> function, as follows:</source>
          <target state="new">For these kinds of complex queries, you can pass any valid OData query option string to the <ph id="ph104">`read`</ph><ph id="ph105" /> function, as follows:</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph106">[AZURE.NOTE]</ph>When you provide a raw OData query option string into the <ph id="ph107">`read`</ph><ph id="ph108" /> function, you cannot also use the query builder methods in the same query.</source>
          <target state="new"><ph id="ph106">[AZURE.NOTE]</ph>When you provide a raw OData query option string into the <ph id="ph107">`read`</ph><ph id="ph108" /> function, you cannot also use the query builder methods in the same query.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In this case, you must compose your whole query as an OData query string.</source>
          <target state="new">In this case, you must compose your whole query as an OData query string.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For more information on OData system query options, see the <bpt id="p7">[</bpt><ept id="p7">OData system query options reference]</ept>.</source>
          <target state="new">For more information on OData system query options, see the <bpt id="p7">[</bpt><ept id="p7">OData system query options reference]</ept>.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>How to: Insert data into a mobile service</source>
          <target state="new">How to: Insert data into a mobile service</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to insert new rows into a table.</source>
          <target state="new">The following code illustrates how to insert new rows into a table.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The client requests that a row of data be inserted by sending a POST request to the mobile service.</source>
          <target state="new">The client requests that a row of data be inserted by sending a POST request to the mobile service.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The request body contains the data to be inserted, as a JSON object.</source>
          <target state="new">The request body contains the data to be inserted, as a JSON object.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This inserts data from the supplied JSON object into the table.</source>
          <target state="new">This inserts data from the supplied JSON object into the table.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also specify a callback function to be invoked when the insertion is complete:</source>
          <target state="new">You can also specify a callback function to be invoked when the insertion is complete:</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Working with ID values</source>
          <target state="new">Working with ID values</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Mobile Services supports unique custom string values for the table's <bpt id="p8">**</bpt>id<ept id="p8">**</ept><ph id="ph109" /> column.</source>
          <target state="new">Mobile Services supports unique custom string values for the table's <bpt id="p8">**</bpt>id<ept id="p8">**</ept><ph id="ph109" /> column.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This allows applications to use custom values such as email addresses or user names for the ID.</source>
          <target state="new">This allows applications to use custom values such as email addresses or user names for the ID.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, the following code inserts a new item as a JSON object, where the unique ID is an email address:</source>
          <target state="new">For example, the following code inserts a new item as a JSON object, where the unique ID is an email address:</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>String IDs provide you with the following benefits:</source>
          <target state="new">String IDs provide you with the following benefits:</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>IDs are generated without making a round-trip to the database.</source>
          <target state="new">IDs are generated without making a round-trip to the database.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Records are easier to merge from different tables or databases.</source>
          <target state="new">Records are easier to merge from different tables or databases.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>IDs values can integrate better with an application's logic.</source>
          <target state="new">IDs values can integrate better with an application's logic.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When a string ID value is not already set on an inserted record, Mobile Services generates a unique value for the ID.</source>
          <target state="new">When a string ID value is not already set on an inserted record, Mobile Services generates a unique value for the ID.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more information on how to generate your own ID values, either on the client or in a .NET backend, see <bpt id="p9">[</bpt>How to: Generate unique ID values<ept id="p9">](mobile-services-how-to-use-server-scripts.md#generate-guids)</ept>.</source>
          <target state="new">For more information on how to generate your own ID values, either on the client or in a .NET backend, see <bpt id="p9">[</bpt>How to: Generate unique ID values<ept id="p9">](mobile-services-how-to-use-server-scripts.md#generate-guids)</ept>.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can also use integer IDs for your tables.</source>
          <target state="new">You can also use integer IDs for your tables.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To use an integer ID, you must create your table with the <ph id="ph110">`mobile table create`</ph><ph id="ph111" /> command using the <ph id="ph112">`--integerId`</ph><ph id="ph113" /> option.</source>
          <target state="new">To use an integer ID, you must create your table with the <ph id="ph110">`mobile table create`</ph><ph id="ph111" /> command using the <ph id="ph112">`--integerId`</ph><ph id="ph113" /> option.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This command is used with the Command-line Interface (CLI) for Azure.</source>
          <target state="new">This command is used with the Command-line Interface (CLI) for Azure.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information on using the CLI, see <bpt id="p10">[</bpt>CLI to manage Mobile Services tables<ept id="p10">](../virtual-machines-command-line-tools.md#Mobile_Tables)</ept>.</source>
          <target state="new">For more information on using the CLI, see <bpt id="p10">[</bpt>CLI to manage Mobile Services tables<ept id="p10">](../virtual-machines-command-line-tools.md#Mobile_Tables)</ept>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>How to: Modify data in a mobile service</source>
          <target state="new">How to: Modify data in a mobile service</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to update data in a table.</source>
          <target state="new">The following code illustrates how to update data in a table.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The client requests that a row of data be updated by sending a PATCH request to the mobile service.</source>
          <target state="new">The client requests that a row of data be updated by sending a PATCH request to the mobile service.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The request body contains the specific fields to be updated, as a JSON object.</source>
          <target state="new">The request body contains the specific fields to be updated, as a JSON object.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>It updates an existing item in the table <ph id="ph114">`todoItemTable`</ph>.</source>
          <target state="new">It updates an existing item in the table <ph id="ph114">`todoItemTable`</ph>.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The first parameter specifies the instance to update in the table, as specified by its ID.</source>
          <target state="new">The first parameter specifies the instance to update in the table, as specified by its ID.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can also specify a callback function to be invoked when the update is complete:</source>
          <target state="new">You can also specify a callback function to be invoked when the update is complete:</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>How to: Delete data in a mobile service</source>
          <target state="new">How to: Delete data in a mobile service</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to delete data from a table.</source>
          <target state="new">The following code illustrates how to delete data from a table.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The client requests that a row of data be deleted by sending a DELETE request to the mobile service.</source>
          <target state="new">The client requests that a row of data be deleted by sending a DELETE request to the mobile service.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It deletes an existing item in the table todoItemTable.</source>
          <target state="new">It deletes an existing item in the table todoItemTable.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The first parameter specifies the instance to delete in the table, as specified by its ID.</source>
          <target state="new">The first parameter specifies the instance to delete in the table, as specified by its ID.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You can also specify a callback function to be invoked when the delete is complete:</source>
          <target state="new">You can also specify a callback function to be invoked when the delete is complete:</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>How to: Display data in the user interface</source>
          <target state="new">How to: Display data in the user interface</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This section shows how to display returned data objects using UI elements.</source>
          <target state="new">This section shows how to display returned data objects using UI elements.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To query items in <ph id="ph115">`todoItemTable`</ph><ph id="ph116" /> and display it in a very simple list, you can run the following example code.</source>
          <target state="new">To query items in <ph id="ph115">`todoItemTable`</ph><ph id="ph116" /> and display it in a very simple list, you can run the following example code.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>No selection, filtering or sorting of any kind is done.</source>
          <target state="new">No selection, filtering or sorting of any kind is done.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In a Windows Store app, the results of a query can be used to create a [WinJS.Binding.List] object, which can be bound as the data source for a <bpt id="p11">[</bpt><ept id="p11">ListView]</ept> object.</source>
          <target state="new">In a Windows Store app, the results of a query can be used to create a [WinJS.Binding.List] object, which can be bound as the data source for a <bpt id="p11">[</bpt><ept id="p11">ListView]</ept> object.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p12">[</bpt><ept id="p12">Data binding (Windows Store apps using JavaScript and HTML)]</ept>.</source>
          <target state="new">For more information, see <bpt id="p12">[</bpt><ept id="p12">Data binding (Windows Store apps using JavaScript and HTML)]</ept>.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>How to: Call a custom API</source>
          <target state="new">How to: Call a custom API</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.</source>
          <target state="new">A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.</source>
          <target state="new">By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For an example of how to create a custom API in your mobile service, see <bpt id="p13">[</bpt>How to: define a custom API endpoint<ept id="p13">](mobile-services-dotnet-backend-define-custom-api.md)</ept>.</source>
          <target state="new">For an example of how to create a custom API in your mobile service, see <bpt id="p13">[</bpt>How to: define a custom API endpoint<ept id="p13">](mobile-services-dotnet-backend-define-custom-api.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>You call a custom API from the client by calling the <bpt id="p14">[</bpt>invokeApi<ept id="p14">](https://github.com/Azure/azure-mobile-services/blob/master/sdk/Javascript/src/MobileServiceClient.js#L337)</ept><ph id="ph117" /> method on <bpt id="p15">**</bpt>MobileServiceClient<ept id="p15">**</ept>.</source>
          <target state="new">You call a custom API from the client by calling the <bpt id="p14">[</bpt>invokeApi<ept id="p14">](https://github.com/Azure/azure-mobile-services/blob/master/sdk/Javascript/src/MobileServiceClient.js#L337)</ept><ph id="ph117" /> method on <bpt id="p15">**</bpt>MobileServiceClient<ept id="p15">**</ept>.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For example, the following line of code sends a POST request to the <bpt id="p16">**</bpt>completeAll<ept id="p16">**</ept><ph id="ph118" /> API on the mobile service:</source>
          <target state="new">For example, the following line of code sends a POST request to the <bpt id="p16">**</bpt>completeAll<ept id="p16">**</ept><ph id="ph118" /> API on the mobile service:</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more realistic examples and a more a complete discussion of <bpt id="p17">**</bpt>invokeApi<ept id="p17">**</ept>, see <bpt id="p18">[</bpt>Custom API in Azure Mobile Services Client SDKs<ept id="p18">](http://blogs.msdn.com/b/carlosfigueira/archive/2013/06/19/custom-api-in-azure-mobile-services-client-sdks.aspx)</ept>.</source>
          <target state="new">For more realistic examples and a more a complete discussion of <bpt id="p17">**</bpt>invokeApi<ept id="p17">**</ept>, see <bpt id="p18">[</bpt>Custom API in Azure Mobile Services Client SDKs<ept id="p18">](http://blogs.msdn.com/b/carlosfigueira/archive/2013/06/19/custom-api-in-azure-mobile-services-client-sdks.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>How to: Authenticate users</source>
          <target state="new">How to: Authenticate users</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Mobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, and Twitter.</source>
          <target state="new">Mobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, and Twitter.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You can set permissions on tables to restrict access for specific operations to only authenticated users.</source>
          <target state="new">You can set permissions on tables to restrict access for specific operations to only authenticated users.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>You can also use the identity of authenticated users to implement authorization rules in server scripts.</source>
          <target state="new">You can also use the identity of authenticated users to implement authorization rules in server scripts.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For more information, see the [Get started with authentication] tutorial.</source>
          <target state="new">For more information, see the [Get started with authentication] tutorial.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph119">[AZURE.NOTE]</ph><ph id="ph120" /> When using authentication in a PhoneGap or Cordova app, you must also add the following plugins to the project:</source>
          <target state="new"><ph id="ph119">[AZURE.NOTE]</ph><ph id="ph120" /> When using authentication in a PhoneGap or Cordova app, you must also add the following plugins to the project:</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>https://git-wip-us.apache.org/repos/asf/cordova-plugin-device.git</source>
          <target state="new">https://git-wip-us.apache.org/repos/asf/cordova-plugin-device.git</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>https://git-wip-us.apache.org/repos/asf/cordova-plugin-inappbrowser.git</source>
          <target state="new">https://git-wip-us.apache.org/repos/asf/cordova-plugin-inappbrowser.git</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Two authentication flows are supported: a <bpt id="p19">_</bpt>server flow<ept id="p19">_</ept><ph id="ph121" /> and a <bpt id="p20">_</bpt>client flow<ept id="p20">_</ept>.</source>
          <target state="new">Two authentication flows are supported: a <bpt id="p19">_</bpt>server flow<ept id="p19">_</ept><ph id="ph121" /> and a <bpt id="p20">_</bpt>client flow<ept id="p20">_</ept>.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.</source>
          <target state="new">The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs.</source>
          <target state="new">The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Server flow
To have Mobile Services manage the authentication process in your Windows Store or HTML5 app,
you must register your app with your identity provider.</source>
          <target state="new">Server flow
To have Mobile Services manage the authentication process in your Windows Store or HTML5 app,
you must register your app with your identity provider.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Then in your mobile service, you need to configure the application ID and secret provided by your provider.</source>
          <target state="new">Then in your mobile service, you need to configure the application ID and secret provided by your provider.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For more information, see the tutorial <bpt id="p21">[</bpt>Add authentication to your app<ept id="p21">](mobile-services-html-get-started-users.md)</ept>.</source>
          <target state="new">For more information, see the tutorial <bpt id="p21">[</bpt>Add authentication to your app<ept id="p21">](mobile-services-html-get-started-users.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Once you have registered your identity provider, simply call the [LoginAsync method] with the [MobileServiceAuthenticationProvider] value of your provider.</source>
          <target state="new">Once you have registered your identity provider, simply call the [LoginAsync method] with the [MobileServiceAuthenticationProvider] value of your provider.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example, to login with Facebook use the following code.</source>
          <target state="new">For example, to login with Facebook use the following code.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If you are using an identity provider other than Facebook, change the value passed to the <ph id="ph122">`login`</ph><ph id="ph123" /> method above to one of the following: <ph id="ph124">`microsoftaccount`</ph>, <ph id="ph125">`facebook`</ph>, <ph id="ph126">`twitter`</ph>, <ph id="ph127">`google`</ph>, or <ph id="ph128">`windowsazureactivedirectory`</ph>.</source>
          <target state="new">If you are using an identity provider other than Facebook, change the value passed to the <ph id="ph122">`login`</ph><ph id="ph123" /> method above to one of the following: <ph id="ph124">`microsoftaccount`</ph>, <ph id="ph125">`facebook`</ph>, <ph id="ph126">`twitter`</ph>, <ph id="ph127">`google`</ph>, or <ph id="ph128">`windowsazureactivedirectory`</ph>.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In this case, Mobile Services manages the OAuth 2.0 authentication flow by displaying the login page of the selected provider and generating a Mobile Services authentication token after successful login with the identity provider.</source>
          <target state="new">In this case, Mobile Services manages the OAuth 2.0 authentication flow by displaying the login page of the selected provider and generating a Mobile Services authentication token after successful login with the identity provider.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <bpt id="p22">[</bpt><ept id="p22">login]</ept> function, when complete, returns a JSON object (<bpt id="p23">**</bpt>user<ept id="p23">**</ept>) that exposes both the user ID and Mobile Services authentication token in the <bpt id="p24">**</bpt>userId<ept id="p24">**</ept><ph id="ph129" /> and <bpt id="p25">**</bpt>authenticationToken<ept id="p25">**</ept><ph id="ph130" /> fields, respectively.</source>
          <target state="new">The <bpt id="p22">[</bpt><ept id="p22">login]</ept> function, when complete, returns a JSON object (<bpt id="p23">**</bpt>user<ept id="p23">**</ept>) that exposes both the user ID and Mobile Services authentication token in the <bpt id="p24">**</bpt>userId<ept id="p24">**</ept><ph id="ph129" /> and <bpt id="p25">**</bpt>authenticationToken<ept id="p25">**</ept><ph id="ph130" /> fields, respectively.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This token can be cached and re-used until it expires.</source>
          <target state="new">This token can be cached and re-used until it expires.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more information, see [Caching the authentication token].</source>
          <target state="new">For more information, see [Caching the authentication token].</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Client flow</source>
          <target state="new">Client flow</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Your app can also independently contact the identity provider and then provide the returned token to Mobile Services for authentication.</source>
          <target state="new">Your app can also independently contact the identity provider and then provide the returned token to Mobile Services for authentication.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This client flow enables you to provide a single sign-in experience for users or to retrieve additional user data from the identity provider.</source>
          <target state="new">This client flow enables you to provide a single sign-in experience for users or to retrieve additional user data from the identity provider.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Facebook/Google SDK basic example</source>
          <target state="new">Facebook/Google SDK basic example</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This example uses Facebook client SDK for authentication:</source>
          <target state="new">This example uses Facebook client SDK for authentication:</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>This example assumes that the token provided by the respective provider SDK is stored in the <ph id="ph131">`token`</ph><ph id="ph132" /> variable.</source>
          <target state="new">This example assumes that the token provided by the respective provider SDK is stored in the <ph id="ph131">`token`</ph><ph id="ph132" /> variable.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Twitter cannot be used for client authentication at this time.</source>
          <target state="new">Twitter cannot be used for client authentication at this time.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Microsoft Account basic example</source>
          <target state="new">Microsoft Account basic example</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The following example uses the Live SDK, which supports single-sign-on for Windows Store apps by using Microsoft Account:</source>
          <target state="new">The following example uses the Live SDK, which supports single-sign-on for Windows Store apps by using Microsoft Account:</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This simplified example gets a token from Live Connect, which is supplied to Mobile Services by calling the <bpt id="p26">[</bpt><ept id="p26">login]</ept> function.</source>
          <target state="new">This simplified example gets a token from Live Connect, which is supplied to Mobile Services by calling the <bpt id="p26">[</bpt><ept id="p26">login]</ept> function.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Microsoft Account complete example</source>
          <target state="new">Microsoft Account complete example</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the Live SDK with WinJS APIs to provide an enhanced single-sign-on experience:</source>
          <target state="new">The following example shows how to use the Live SDK with WinJS APIs to provide an enhanced single-sign-on experience:</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>This initializes the Live Connect client, sends a new login request to Microsoft account, sends the returned authentication token to Mobile Services, and then displays information about the signed-in user.</source>
          <target state="new">This initializes the Live Connect client, sends a new login request to Microsoft account, sends the returned authentication token to Mobile Services, and then displays information about the signed-in user.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The app does not start until authentication succeeds.</source>
          <target state="new">The app does not start until authentication succeeds.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>--&gt;</source>
          <target state="new">--&gt;</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>How to: Register for push notifications</source>
          <target state="new">How to: Register for push notifications</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When your app is a PhoneGap or Apache Cordova HTML/JavaScript app, the native mobile platform enables you to receive push notifications on the device.</source>
          <target state="new">When your app is a PhoneGap or Apache Cordova HTML/JavaScript app, the native mobile platform enables you to receive push notifications on the device.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The <bpt id="p27">[</bpt>Apache Cordova plugin for Azure Mobile Services<ept id="p27">](https://github.com/Azure/azure-mobile-services-cordova)</ept><ph id="ph134" /> enables you to register for push notifications with Azure Notification Hubs.</source>
          <target state="new">The <bpt id="p27">[</bpt>Apache Cordova plugin for Azure Mobile Services<ept id="p27">](https://github.com/Azure/azure-mobile-services-cordova)</ept><ph id="ph134" /> enables you to register for push notifications with Azure Notification Hubs.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The specific notification service used depends on the native device platform on which the code executes.</source>
          <target state="new">The specific notification service used depends on the native device platform on which the code executes.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For an example of how to do this, see the sample, <bpt id="p28">[</bpt>Use Microsoft Azure to push notifications to Cordova apps<ept id="p28">](https://github.com/Azure/mobile-services-samples/tree/master/CordovaNotificationsArticle)</ept>.</source>
          <target state="new">For an example of how to do this, see the sample, <bpt id="p28">[</bpt>Use Microsoft Azure to push notifications to Cordova apps<ept id="p28">](https://github.com/Azure/mobile-services-samples/tree/master/CordovaNotificationsArticle)</ept>.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph135">[AZURE.NOTE]</ph>This plugin currently only supports iOS and Android devices.</source>
          <target state="new"><ph id="ph135">[AZURE.NOTE]</ph>This plugin currently only supports iOS and Android devices.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For a solution that also includes Windows devices, see the article <bpt id="p29">[</bpt>Push Notifications to PhoneGap Apps using Notification Hubs Integration<ept id="p29">](http://blogs.msdn.com/b/azuremobile/archive/2014/06/17/push-notifications-to-phonegap-apps-using-notification-hubs-integration.aspx)</ept>.</source>
          <target state="new">For a solution that also includes Windows devices, see the article <bpt id="p29">[</bpt>Push Notifications to PhoneGap Apps using Notification Hubs Integration<ept id="p29">](http://blogs.msdn.com/b/azuremobile/archive/2014/06/17/push-notifications-to-phonegap-apps-using-notification-hubs-integration.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>How to: Handle errors</source>
          <target state="new">How to: Handle errors</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>There are several ways to encounter, validate, and work around errors in Mobile Services.</source>
          <target state="new">There are several ways to encounter, validate, and work around errors in Mobile Services.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>As an example, server scripts are registered in a mobile service and can be used to perform a wide range of operations on data being inserted and updated, including validation and data modification.</source>
          <target state="new">As an example, server scripts are registered in a mobile service and can be used to perform a wide range of operations on data being inserted and updated, including validation and data modification.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Imagine defining and registering a server script that validate and modify data, like so:</source>
          <target state="new">Imagine defining and registering a server script that validate and modify data, like so:</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This server-side script validates the length of string data sent to the mobile service and rejects strings that are too long, in this case longer than 10 characters.</source>
          <target state="new">This server-side script validates the length of string data sent to the mobile service and rejects strings that are too long, in this case longer than 10 characters.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Now that the mobile service is validating data and sending error responses on the server-side, you can update your HTML app to be able to handle error responses from validation.</source>
          <target state="new">Now that the mobile service is validating data and sending error responses on the server-side, you can update your HTML app to be able to handle error responses from validation.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To tease this out even further, you pass in the error handler as the second argument each time you perform data access:</source>
          <target state="new">To tease this out even further, you pass in the error handler as the second argument each time you perform data access:</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>How to: Use promises</source>
          <target state="new">How to: Use promises</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Promises provide a mechanism to schedule work to be done on a value that has not yet been computed.</source>
          <target state="new">Promises provide a mechanism to schedule work to be done on a value that has not yet been computed.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>It is an abstraction for managing interactions with asynchronous APIs.</source>
          <target state="new">It is an abstraction for managing interactions with asynchronous APIs.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The <ph id="ph136">`done`</ph><ph id="ph137" /> promise is executed as soon as the function provided to it has either successfully completed or has gotten an error.</source>
          <target state="new">The <ph id="ph136">`done`</ph><ph id="ph137" /> promise is executed as soon as the function provided to it has either successfully completed or has gotten an error.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Unlike the <ph id="ph138">`then`</ph><ph id="ph139" /> promise, it is guaranteed to throw any error that is not handled inside the function, and after the handlers have finished executing, this function throws any error that would have been returned from then as a promise in the error state.</source>
          <target state="new">Unlike the <ph id="ph138">`then`</ph><ph id="ph139" /> promise, it is guaranteed to throw any error that is not handled inside the function, and after the handlers have finished executing, this function throws any error that would have been returned from then as a promise in the error state.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For more information, see [done].</source>
          <target state="new">For more information, see [done].</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Like so:</source>
          <target state="new">Like so:</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <ph id="ph140">`then`</ph><ph id="ph141" /> promise is the same as the as the <ph id="ph142">`done`</ph><ph id="ph143" /> promise, but unlike the <ph id="ph144">`then`</ph><ph id="ph145" /> promise, <ph id="ph146">`done`</ph><ph id="ph147" /> is guaranteed to throw any error that is not handled inside the function.</source>
          <target state="new">The <ph id="ph140">`then`</ph><ph id="ph141" /> promise is the same as the as the <ph id="ph142">`done`</ph><ph id="ph143" /> promise, but unlike the <ph id="ph144">`then`</ph><ph id="ph145" /> promise, <ph id="ph146">`done`</ph><ph id="ph147" /> is guaranteed to throw any error that is not handled inside the function.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If you do not provide an error handler to <ph id="ph148">`then`</ph><ph id="ph149" /> and the operation has an error, it does not throw an exception but rather returns a promise in the error state.</source>
          <target state="new">If you do not provide an error handler to <ph id="ph148">`then`</ph><ph id="ph149" /> and the operation has an error, it does not throw an exception but rather returns a promise in the error state.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For more information, see [then].</source>
          <target state="new">For more information, see [then].</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Like so:</source>
          <target state="new">Like so:</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>You can use promises in a number of different ways.</source>
          <target state="new">You can use promises in a number of different ways.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>You can chain promise operations by calling <ph id="ph150">`then`</ph><ph id="ph151" /> or <ph id="ph152">`done`</ph><ph id="ph153" /> on the promise that is returned by the previous <ph id="ph154">`then`</ph><ph id="ph155" /> function.</source>
          <target state="new">You can chain promise operations by calling <ph id="ph150">`then`</ph><ph id="ph151" /> or <ph id="ph152">`done`</ph><ph id="ph153" /> on the promise that is returned by the previous <ph id="ph154">`then`</ph><ph id="ph155" /> function.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph156">`then`</ph><ph id="ph157" /> for an intermediate stage of the operation (for example <ph id="ph158">`.then().then()`</ph>), and <ph id="ph159">`done`</ph><ph id="ph160" /> for the final stage of the operation (for example <ph id="ph161">`.then().then().done()`</ph>).</source>
          <target state="new">Use <ph id="ph156">`then`</ph><ph id="ph157" /> for an intermediate stage of the operation (for example <ph id="ph158">`.then().then()`</ph>), and <ph id="ph159">`done`</ph><ph id="ph160" /> for the final stage of the operation (for example <ph id="ph161">`.then().then().done()`</ph>).</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>You can chain multiple <ph id="ph162">`then`</ph><ph id="ph163" /> functions, because <ph id="ph164">`then`</ph><ph id="ph165" /> returns a promise.</source>
          <target state="new">You can chain multiple <ph id="ph162">`then`</ph><ph id="ph163" /> functions, because <ph id="ph164">`then`</ph><ph id="ph165" /> returns a promise.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>You cannot chain more than one <ph id="ph166">`done`</ph><ph id="ph167" /> method, because it returns undefined.</source>
          <target state="new">You cannot chain more than one <ph id="ph166">`done`</ph><ph id="ph167" /> method, because it returns undefined.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>[Learn more about the  differences between then and done].</source>
          <target state="new">[Learn more about the  differences between then and done].</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>How to: Customize client request headers</source>
          <target state="new">How to: Customize client request headers</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>You can send custom request headers using the <ph id="ph168">`withFilter`</ph><ph id="ph169" /> function, reading and writing arbitrary properties of the request about to be sent within the filter.</source>
          <target state="new">You can send custom request headers using the <ph id="ph168">`withFilter`</ph><ph id="ph169" /> function, reading and writing arbitrary properties of the request about to be sent within the filter.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>You may want to add such a custom HTTP header if a server-side script needs it or may be enhanced by it.</source>
          <target state="new">You may want to add such a custom HTTP header if a server-side script needs it or may be enhanced by it.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Filters are used for a lot more than customizing request headers.</source>
          <target state="new">Filters are used for a lot more than customizing request headers.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>They can be used to examine or change requests, examine or change  responses, bypass networking calls, send multiple calls, etc.</source>
          <target state="new">They can be used to examine or change requests, examine or change  responses, bypass networking calls, send multiple calls, etc.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>How to: Use cross-origin resource sharing</source>
          <target state="new">How to: Use cross-origin resource sharing</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>To control which websites are allowed to interact with and send requests to your mobile service, make sure to add the host name of the website you use to host it to the Cross-Origin Resource Sharing (CORS) whitelist.</source>
          <target state="new">To control which websites are allowed to interact with and send requests to your mobile service, make sure to add the host name of the website you use to host it to the Cross-Origin Resource Sharing (CORS) whitelist.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For a JavaScript backend mobile service, you can configure the whitelist on the Configure tab in the <bpt id="p30">[</bpt>Azure classic portal<ept id="p30">](https://manage.windowsazure.com)</ept>.</source>
          <target state="new">For a JavaScript backend mobile service, you can configure the whitelist on the Configure tab in the <bpt id="p30">[</bpt>Azure classic portal<ept id="p30">](https://manage.windowsazure.com)</ept>.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>You can use wildcards if required.</source>
          <target state="new">You can use wildcards if required.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>By default, new Mobile Services instruct browsers to permit access only from <ph id="ph170">`localhost`</ph>, and Cross-Origin Resource Sharing (CORS) allows JavaScript code running in a browser on an external hostname to interact with your Mobile Service.</source>
          <target state="new">By default, new Mobile Services instruct browsers to permit access only from <ph id="ph170">`localhost`</ph>, and Cross-Origin Resource Sharing (CORS) allows JavaScript code running in a browser on an external hostname to interact with your Mobile Service.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>This configuration is not necessary for WinJS applications.</source>
          <target state="new">This configuration is not necessary for WinJS applications.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>[What is Mobile Services]: #what-is
[Concepts]: #concepts
[How to: Create the Mobile Services client]: #create-client
[How to: Query data from a mobile service]: #querying
[Filter returned data]: #filtering
[Sort returned data]: #sorting
[Return data in pages]: #paging
[Select specific columns]: #selecting
[Look up data by ID]: #lookingup
[How to: Display data in the user interface]: #binding
[How to: Insert data into a mobile service]: #inserting
[How to: Modify data in a mobile service]: #modifying
[How to: Delete data in a mobile service]: #deleting
[How to: Authenticate users]: #authentication
[How to: Handle errors]: #errors
[How to: Use promises]: #promises
[How to: Customize request headers]: #customizing
[How to: Use cross-origin resource sharing]: #hostnames
[Next steps]: #nextsteps
[Execute an OData query operation]: #odata-query</source>
          <target state="new">[What is Mobile Services]: #what-is
[Concepts]: #concepts
[How to: Create the Mobile Services client]: #create-client
[How to: Query data from a mobile service]: #querying
[Filter returned data]: #filtering
[Sort returned data]: #sorting
[Return data in pages]: #paging
[Select specific columns]: #selecting
[Look up data by ID]: #lookingup
[How to: Display data in the user interface]: #binding
[How to: Insert data into a mobile service]: #inserting
[How to: Modify data in a mobile service]: #modifying
[How to: Delete data in a mobile service]: #deleting
[How to: Authenticate users]: #authentication
[How to: Handle errors]: #errors
[How to: Use promises]: #promises
[How to: Customize request headers]: #customizing
[How to: Use cross-origin resource sharing]: #hostnames
[Next steps]: #nextsteps
[Execute an OData query operation]: #odata-query</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>[then]: http://msdn.microsoft.com/library/windows/apps/br229728.aspx
[done]: http://msdn.microsoft.com/library/windows/apps/hh701079.aspx
[Learn more about the  differences between then and done]: http://msdn.microsoft.com/library/windows/apps/hh700334.aspx
[how to handle errors in promises]: http://msdn.microsoft.com/library/windows/apps/hh700337.aspx</source>
          <target state="new">[then]: http://msdn.microsoft.com/library/windows/apps/br229728.aspx
[done]: http://msdn.microsoft.com/library/windows/apps/hh701079.aspx
[Learn more about the  differences between then and done]: http://msdn.microsoft.com/library/windows/apps/hh700334.aspx
[how to handle errors in promises]: http://msdn.microsoft.com/library/windows/apps/hh700337.aspx</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d84c8623139cb4ba96ddd72c77f7be9153a868a2</xliffext:olfilehash>
  </header>
</xliff>