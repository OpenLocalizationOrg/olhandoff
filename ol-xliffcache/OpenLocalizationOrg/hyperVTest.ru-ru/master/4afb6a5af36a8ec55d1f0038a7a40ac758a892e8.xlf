<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="ru-ru" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">4afb6a5af36a8ec55d1f0038a7a40ac758a892e8</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.ContentId: 4981828d-1a08-4d8c-a99d-874a926a153f</source>
          <target xml:space="preserve">ms.ContentId: 4981828d-1a08-4d8c-a99d-874a926a153f</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: PowerShell to Docker Comparison</source>
          <target xml:space="preserve">title: PowerShell to Docker Comparison</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">PowerShell to Docker comparison for managing Windows Server Containers</source>
          <target xml:space="preserve">PowerShell to Docker comparison for managing Windows Server Containers</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Updating contents on 27-Oct for testing, ver2.</source>
          <target xml:space="preserve">Updating contents on 27-Oct for testing, ver2.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">There are many ways to manage Windows Server Containers using both in-box Windows tools (PowerShell, in this preview) and Open Source management tools such as Docker.</source>
          <target xml:space="preserve">There are many ways to manage Windows Server Containers using both in-box Windows tools (PowerShell, in this preview) and Open Source management tools such as Docker.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">Guides outlining both individually available here:</source>
          <target xml:space="preserve">Guides outlining both individually available here:</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Manage Windows Server Containers with Docker</source>
          <target xml:space="preserve">Manage Windows Server Containers with Docker</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Manage Windows Server Containers with PowerShell</source>
          <target xml:space="preserve">Manage Windows Server Containers with PowerShell</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">This page is a more in depth reference comparing the Docker tools and PowerShell management tools.</source>
          <target xml:space="preserve">This page is a more in depth reference comparing the Docker tools and PowerShell management tools.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">PowerShell for containers versus Hyper-V VMs</source>
          <target xml:space="preserve">PowerShell for containers versus Hyper-V VMs</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">You can create, run, and interact with Windows Server Containers using PowerShell cmdlets.</source>
          <target xml:space="preserve">You can create, run, and interact with Windows Server Containers using PowerShell cmdlets.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Everything you need to get going is available in-box.</source>
          <target xml:space="preserve">Everything you need to get going is available in-box.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">If you’ve used Hyper-V PowerShell, the design of the cmdlets should be pretty familiar to you.</source>
          <target xml:space="preserve">If you’ve used Hyper-V PowerShell, the design of the cmdlets should be pretty familiar to you.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">A lot of the workflow is similar to how you’d manage a virtual machine using the Hyper-V module.</source>
          <target xml:space="preserve">A lot of the workflow is similar to how you’d manage a virtual machine using the Hyper-V module.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">`New-VM`</data>
          <data id="id2">`Get-VM`</data>
          <data id="id3">`Start-VM`</data>
          <data id="id4">`Stop-VM`</data>
          <data id="id5">`New-Container`</data>
          <data id="id6">`Get-Container`</data>
          <data id="id7">`Start-Container`</data>
          <data id="id8">`Stop-Container`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Instead of <ph dataRef="id1" id="ph1" />, <ph dataRef="id2" id="ph2" />, <ph dataRef="id3" id="ph3" />, <ph dataRef="id4" id="ph4" />, you have <ph dataRef="id5" id="ph5" />, <ph dataRef="id6" id="ph6" />, <ph dataRef="id7" id="ph7" />, <ph dataRef="id8" id="ph8" />.</source>
          <target xml:space="preserve">Instead of <ph dataRef="id1" id="ph1" />, <ph dataRef="id2" id="ph2" />, <ph dataRef="id3" id="ph3" />, <ph dataRef="id4" id="ph4" />, you have <ph dataRef="id5" id="ph5" />, <ph dataRef="id6" id="ph6" />, <ph dataRef="id7" id="ph7" />, <ph dataRef="id8" id="ph8" />.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">There are quite a few container-specific cmdlets and parameters, but the general lifecycle and management of a Windows container looks roughly like that of a Hyper-V VM.</source>
          <target xml:space="preserve">There are quite a few container-specific cmdlets and parameters, but the general lifecycle and management of a Windows container looks roughly like that of a Hyper-V VM.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">How does PowerShell management compare to Docker?</source>
          <target xml:space="preserve">How does PowerShell management compare to Docker?</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">The Containers PowerShell cmdlets expose an API that isn’t quite the same as Docker's; as a general rule, the cmdlets are more granular in operation.</source>
          <target xml:space="preserve">The Containers PowerShell cmdlets expose an API that isn’t quite the same as Docker's; as a general rule, the cmdlets are more granular in operation.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Some Docker commands have pretty straightforward parallels in PowerShell:</source>
          <target xml:space="preserve">Some Docker commands have pretty straightforward parallels in PowerShell:</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">Docker command</source>
          <target xml:space="preserve">Docker command</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">PowerShell Cmdlet</source>
          <target xml:space="preserve">PowerShell Cmdlet</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">`docker build`</data>
          <data id="id2">`docker cp`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The PowerShell cmdlets are not an exact perfect parity, and there are a fair number of commands that we’re not providing PowerShell replacements for* (notably <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />).</source>
          <target xml:space="preserve">The PowerShell cmdlets are not an exact perfect parity, and there are a fair number of commands that we’re not providing PowerShell replacements for* (notably <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />).</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">`docker run`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But what might leap out at you is that there’s no single one-line replacement for <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">But what might leap out at you is that there’s no single one-line replacement for <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">\* Subject to change.</source>
          <target xml:space="preserve">\* Subject to change.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">But I need docker run!</source>
          <target xml:space="preserve">But I need docker run!</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">What’s going on?</source>
          <target xml:space="preserve">What’s going on?</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">We’re doing a couple things here to provide a slightly more familiar interaction model for users who know their way around PowerShell already.</source>
          <target xml:space="preserve">We’re doing a couple things here to provide a slightly more familiar interaction model for users who know their way around PowerShell already.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Of course, if you’re used to the way docker operates, this will be a bit of a mental shift.</source>
          <target xml:space="preserve">Of course, if you’re used to the way docker operates, this will be a bit of a mental shift.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">The lifecycle of a container in the PowerShell model is slightly different.</source>
          <target xml:space="preserve">The lifecycle of a container in the PowerShell model is slightly different.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">`New-Container`</data>
          <data id="id2">`Start-Container`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the Containers PowerShell module, we expose the more granular operations of <ph dataRef="id1" id="ph1" /> (which creates a new container that’s stopped) and <ph dataRef="id2" id="ph2" />.</source>
          <target xml:space="preserve">In the Containers PowerShell module, we expose the more granular operations of <ph dataRef="id1" id="ph1" /> (which creates a new container that’s stopped) and <ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">In between creating and starting the container, you can also configure the container’s settings; for TP3, the only other configuration we’re planning to expose is the ability to set the network connection for the container.</source>
          <target xml:space="preserve">In between creating and starting the container, you can also configure the container’s settings; for TP3, the only other configuration we’re planning to expose is the ability to set the network connection for the container.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">using the (Add/Remove/Connect/Disconnect/Get/Set)-ContainerNetworkAdapter cmdlets.</source>
          <target xml:space="preserve">using the (Add/Remove/Connect/Disconnect/Get/Set)-ContainerNetworkAdapter cmdlets.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">You can’t currently pass a command to be run inside the container on start.</source>
          <target xml:space="preserve">You can’t currently pass a command to be run inside the container on start.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">`Enter-PSSession -ContainerId &lt;ID of a running container&gt;`</data>
          <data id="id2">`Invoke-Command -ContainerId &lt;container id&gt; -ScriptBlock { code to run inside the container }`</data>
          <data id="id3">`Invoke-Command -ContainerId &lt;container id&gt; -FilePath &lt;path to script&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">However, you can still get an interactive PowerShell session to a running container using <ph dataRef="id1" id="ph1" />, and you can execute a command inside a running container using <ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />.</source>
          <target xml:space="preserve">However, you can still get an interactive PowerShell session to a running container using <ph dataRef="id1" id="ph1" />, and you can execute a command inside a running container using <ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">`-RunAsAdministrator`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Both of these commands allow the optional <ph dataRef="id1" id="ph1" /> flag for high privilige actions.</source>
          <target xml:space="preserve">Both of these commands allow the optional <ph dataRef="id1" id="ph1" /> flag for high privilige actions.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Caveats and known issues</source>
          <target xml:space="preserve">Caveats and known issues</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Right now, the Containers cmdlets have no knowledge about any containers or images created through Docker, and Docker does not know anything about containers and images created through the PowerShell.</source>
          <target xml:space="preserve">Right now, the Containers cmdlets have no knowledge about any containers or images created through Docker, and Docker does not know anything about containers and images created through the PowerShell.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">If you created it in Docker, manage it with Docker; if you created it through PowerShell, manage it through PowerShell.</source>
          <target xml:space="preserve">If you created it in Docker, manage it with Docker; if you created it through PowerShell, manage it through PowerShell.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">We have quite a bit of work we'd like to do to improve the end user experience -- better error messages, better progress reporting, invalid event strings, and so forth.</source>
          <target xml:space="preserve">We have quite a bit of work we'd like to do to improve the end user experience -- better error messages, better progress reporting, invalid event strings, and so forth.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">If you happen to run into a situation where you wish you were getting more or better info, please feel free to send suggestions to the forums.</source>
          <target xml:space="preserve">If you happen to run into a situation where you wish you were getting more or better info, please feel free to send suggestions to the forums.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">A quick runthrough</source>
          <target xml:space="preserve">A quick runthrough</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">Here is a walk through of some common workflows.</source>
          <target xml:space="preserve">Here is a walk through of some common workflows.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">This assumes you've installed an OS container image named "ServerDatacenterCore" and created a virtual switch named "Virtual Switch" (using New-VMSwitch).</source>
          <target xml:space="preserve">This assumes you've installed an OS container image named "ServerDatacenterCore" and created a virtual switch named "Virtual Switch" (using New-VMSwitch).</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">Build your own sample</source>
          <target xml:space="preserve">Build your own sample</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">`Get-Command -Module Containers`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can see all the Containers cmdlets using <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">You can see all the Containers cmdlets using <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">There are several other cmdlets that are not described here, which we'll leave to you to learn about on your own.</source>
          <target xml:space="preserve">There are several other cmdlets that are not described here, which we'll leave to you to learn about on your own.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`Enter-PSSession`</data>
          <data id="id4">`Invoke-Command`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> This won't return the <ph dataRef="id3" id="ph1" /> and <ph dataRef="id4" id="ph2" /> cmdlets, which are part of core PowerShell.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> This won't return the <ph dataRef="id3" id="ph1" /> and <ph dataRef="id4" id="ph2" /> cmdlets, which are part of core PowerShell.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">`Get-Help [cmdlet name]`</data>
          <data id="id2">`[cmdlet name] -?`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can also get help about any cmdlet using <ph dataRef="id1" id="ph1" />, or equivalently <ph dataRef="id2" id="ph2" />.</source>
          <target xml:space="preserve">You can also get help about any cmdlet using <ph dataRef="id1" id="ph1" />, or equivalently <ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Today, the help output is auto-generated and just tells you the syntax for commands; we will be adding further documentation as we get closer to finalizing the cmdlet design.</source>
          <target xml:space="preserve">Today, the help output is auto-generated and just tells you the syntax for commands; we will be adding further documentation as we get closer to finalizing the cmdlet design.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">A nicer way to discover the syntax is the PowerShell ISE, which you may not have looked at before if you haven't used PowerShell very much.</source>
          <target xml:space="preserve">A nicer way to discover the syntax is the PowerShell ISE, which you may not have looked at before if you haven't used PowerShell very much.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">If you're running on a SKU that permits it, try starting the ISE, opening the Commands pane, and choosing the "Containers" module, which will show you a graphical representation of the cmdlets and their parameter sets.</source>
          <target xml:space="preserve">If you're running on a SKU that permits it, try starting the ISE, opening the Commands pane, and choosing the "Containers" module, which will show you a graphical representation of the cmdlets and their parameter sets.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">`docker run`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">PS: Just to prove it can be done, here's a PowerShell function that composes some of the cmdlets we've seen already into an ersatz <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">PS: Just to prove it can be done, here's a PowerShell function that composes some of the cmdlets we've seen already into an ersatz <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">(To be clear, this is a proof of concept, not under active development.)</source>
          <target xml:space="preserve">(To be clear, this is a proof of concept, not under active development.)</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Docker</source>
          <target xml:space="preserve">Docker</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">Windows Server Containers can be managed with Docker commands.</source>
          <target xml:space="preserve">Windows Server Containers can be managed with Docker commands.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">While Windows containers should be comparable to their Linux counterparts and have the same management experience through Docker, there are some Docker commands that simply don't make sense with a Windows container.</source>
          <target xml:space="preserve">While Windows containers should be comparable to their Linux counterparts and have the same management experience through Docker, there are some Docker commands that simply don't make sense with a Windows container.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">Others simply haven't been tested (we're getting there).</source>
          <target xml:space="preserve">Others simply haven't been tested (we're getting there).</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">In an effort to not duplicate the API documentation available in Docker, here is a link to their management APIs.</source>
          <target xml:space="preserve">In an effort to not duplicate the API documentation available in Docker, here is a link to their management APIs.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">Their walkthroughs are fantastic.</source>
          <target xml:space="preserve">Their walkthroughs are fantastic.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">We're tracking things that do and don't work in the Docker APIs in our Work in Progress document.</source>
          <target xml:space="preserve">We're tracking things that do and don't work in the Docker APIs in our Work in Progress document.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>