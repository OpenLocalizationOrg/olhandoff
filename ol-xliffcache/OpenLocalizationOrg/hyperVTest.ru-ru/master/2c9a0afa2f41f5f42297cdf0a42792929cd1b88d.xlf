<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="ru-ru" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">2c9a0afa2f41f5f42297cdf0a42792929cd1b88d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.ContentId: B9414110-BEFD-423F-9AD8-AFD5EE612CDA</source>
          <target xml:space="preserve">ms.ContentId: B9414110-BEFD-423F-9AD8-AFD5EE612CDA</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Step 8: Experiment with Windows PowerShell</source>
          <target xml:space="preserve">title: Step 8: Experiment with Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">Step 8: Experiment with Windows PowerShell</source>
          <target xml:space="preserve">Step 8: Experiment with Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Test update to see if new XLIF contains everything.</source>
          <target xml:space="preserve">Test update to see if new XLIF contains everything.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">Now that you have walked through the basics of deploying Hyper-V, creating virtual machines and managing these virtual machines, let’s explore how you can automate many of these activities with PowerShell.</source>
          <target xml:space="preserve">Now that you have walked through the basics of deploying Hyper-V, creating virtual machines and managing these virtual machines, let’s explore how you can automate many of these activities with PowerShell.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">Return a list of Hyper-V commands</source>
          <target xml:space="preserve">Return a list of Hyper-V commands</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Click on the Windows start button, type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PowerShell</pc>.</source>
          <target xml:space="preserve">Click on the Windows start button, type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PowerShell</pc>.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Run the following command to display a searchable list of PowerShell commands available with the Hyper-V PowerShell Module.</source>
          <target xml:space="preserve">Run the following command to display a searchable list of PowerShell commands available with the Hyper-V PowerShell Module.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">You get something like this:</source>
          <target xml:space="preserve">You get something like this:</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">`get-help`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To learn more about a particular PowerShell command use <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">To learn more about a particular PowerShell command use <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">`get-vm`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For instance running the following command will return information about the <ph dataRef="id1" id="ph1" /> Hyper-V command.</source>
          <target xml:space="preserve">For instance running the following command will return information about the <ph dataRef="id1" id="ph1" /> Hyper-V command.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">The output shows you how to structure the command, what the required and optional parameters are, and the aliases that you can use.</source>
          <target xml:space="preserve">The output shows you how to structure the command, what the required and optional parameters are, and the aliases that you can use.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Return a list of virtual machines</source>
          <target xml:space="preserve">Return a list of virtual machines</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">`get-vm`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use the <ph dataRef="id1" id="ph1" /> command to return a list of virtual machines.</source>
          <target xml:space="preserve">Use the <ph dataRef="id1" id="ph1" /> command to return a list of virtual machines.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">In PowerShell, run the following command:</source>
          <target xml:space="preserve">In PowerShell, run the following command:</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">This displays something like this:</source>
          <target xml:space="preserve">This displays something like this:</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">`get-vm`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To return a list of only powered on virtual machines add a filter to the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">To return a list of only powered on virtual machines add a filter to the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">A filter can be added by using the where-object command.</source>
          <target xml:space="preserve">A filter can be added by using the where-object command.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://technet.microsoft.com/en-us/library/ee177028.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information on filtering see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using the Where-Object</pc> documentation.</source>
          <target xml:space="preserve">For more information on filtering see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using the Where-Object</pc> documentation.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">To list all virtual machines in a powered off state, run the following command.</source>
          <target xml:space="preserve">To list all virtual machines in a powered off state, run the following command.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">This command is a copy of the command from step 2 with the filter changed from ‘Running’ to ‘Off’.</source>
          <target xml:space="preserve">This command is a copy of the command from step 2 with the filter changed from ‘Running’ to ‘Off’.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Start and shut down virtual machines</source>
          <target xml:space="preserve">Start and shut down virtual machines</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">To start a particular virtual machine, run the following command with name of the virtual machine:</source>
          <target xml:space="preserve">To start a particular virtual machine, run the following command with name of the virtual machine:</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">To start all currently powered off virtual machines, get a list of those machines and pipe the list to the 'start-vm' command:</source>
          <target xml:space="preserve">To start all currently powered off virtual machines, get a list of those machines and pipe the list to the 'start-vm' command:</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">To shut down all running virtual machines, run this:</source>
          <target xml:space="preserve">To shut down all running virtual machines, run this:</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Create a VM checkpoint</source>
          <target xml:space="preserve">Create a VM checkpoint</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">`get-vm`</data>
          <data id="id2">`checkpoint-vm`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create a checkpoint using PowerShell, select the virtual machine using the <ph dataRef="id1" id="ph1" /> command and pipe this to the <ph dataRef="id2" id="ph2" /> command.</source>
          <target xml:space="preserve">To create a checkpoint using PowerShell, select the virtual machine using the <ph dataRef="id1" id="ph1" /> command and pipe this to the <ph dataRef="id2" id="ph2" /> command.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">`-snapshotname`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Finally give the checkpoint a name using <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">Finally give the checkpoint a name using <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">The complete command will look like the following:</source>
          <target xml:space="preserve">The complete command will look like the following:</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">For example, here is a checkpoint with the name DEMOCP:</source>
          <target xml:space="preserve">For example, here is a checkpoint with the name DEMOCP:</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Create a new virtual machine</source>
          <target xml:space="preserve">Create a new virtual machine</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">The following example shows how to create a new virtual machine in the PowerShell Integrated Scripting Environment (ISE).</source>
          <target xml:space="preserve">The following example shows how to create a new virtual machine in the PowerShell Integrated Scripting Environment (ISE).</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">This is a simple example and could be expanded on to include additional PowerShell features and more advanced VM deployments.</source>
          <target xml:space="preserve">This is a simple example and could be expanded on to include additional PowerShell features and more advanced VM deployments.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To open the PowerShell ISE click on start, type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PowerShell ISE</pc>.</source>
          <target xml:space="preserve">To open the PowerShell ISE click on start, type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PowerShell ISE</pc>.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">Run the following code to create a virtual machine.</source>
          <target xml:space="preserve">Run the following code to create a virtual machine.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://technet.microsoft.com/en-us/library/hh848537.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New-VM</pc> documentation for detailed information on the New-VM command.</source>
          <target xml:space="preserve">See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New-VM</pc> documentation for detailed information on the New-VM command.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Wrap up and References</source>
          <target xml:space="preserve">Wrap up and References</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">This document has shown some simple steps to explorer the Hyper-V PowerShell module as well as some sample scenarios.</source>
          <target xml:space="preserve">This document has shown some simple steps to explorer the Hyper-V PowerShell module as well as some sample scenarios.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://technet.microsoft.com/%5Clibrary/Hh848559.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information on the Hyper-V PowerShell module, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hyper-V Cmdlets in Windows PowerShell reference</pc>.</source>
          <target xml:space="preserve">For more information on the Hyper-V PowerShell module, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hyper-V Cmdlets in Windows PowerShell reference</pc>.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>