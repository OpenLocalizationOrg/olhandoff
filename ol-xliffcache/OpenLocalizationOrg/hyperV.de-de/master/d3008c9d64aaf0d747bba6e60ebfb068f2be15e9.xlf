<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="de-de">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3008c9d64aaf0d747bba6e60ebfb068f2be15e9</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Receiving messages on the simulated device</source>
          <target state="new">Receiving messages on the simulated device</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you'll modify the simulated device application you created in [Get started with IoT Hub] to receive cloud-to-device messages from the IoT hub.</source>
          <target state="new">In this section, you'll modify the simulated device application you created in [Get started with IoT Hub] to receive cloud-to-device messages from the IoT hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Visual Studio, in the <bpt id="p1">**</bpt>SimulatedDevice<ept id="p1">**</ept> project, add the following method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class.</source>
          <target state="new">In Visual Studio, in the <bpt id="p1">**</bpt>SimulatedDevice<ept id="p1">**</ept> project, add the following method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ReceiveAsync`</ph> method asynchronously returns the received message at the time that it is received by the device.</source>
          <target state="new">The <ph id="ph1">`ReceiveAsync`</ph> method asynchronously returns the received message at the time that it is received by the device.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It returns <bpt id="p1">*</bpt>null<ept id="p1">*</ept> after a specifiable timeout period (in this case the default of 1 minute is used).</source>
          <target state="new">It returns <bpt id="p1">*</bpt>null<ept id="p1">*</ept> after a specifiable timeout period (in this case the default of 1 minute is used).</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When this happens, we want the code to continue waiting for new messages.</source>
          <target state="new">When this happens, we want the code to continue waiting for new messages.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is the reason for the <ph id="ph1">`if (receivedMessage == null) continue`</ph> line.</source>
          <target state="new">This is the reason for the <ph id="ph1">`if (receivedMessage == null) continue`</ph> line.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`CompleteAsync()`</ph> notifies IoT Hub that the message has been successfully processed and that it can be safely removed from the device queue.</source>
          <target state="new">The call to <ph id="ph1">`CompleteAsync()`</ph> notifies IoT Hub that the message has been successfully processed and that it can be safely removed from the device queue.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If something happened that prevented the device app from completing the processing of the message, IoT Hub will deliver it again; it is then important that message processing logic in the device app be <bpt id="p1">*</bpt>idempotent<ept id="p1">*</ept>, i.e. receiving multiple times the same message should produce the same result.</source>
          <target state="new">If something happened that prevented the device app from completing the processing of the message, IoT Hub will deliver it again; it is then important that message processing logic in the device app be <bpt id="p1">*</bpt>idempotent<ept id="p1">*</ept>, i.e. receiving multiple times the same message should produce the same result.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An application can also temporarily <ph id="ph1">`Abandon`</ph> a message, which will have IoT hub retain the message in the queue for future consumption; or <ph id="ph2">`Reject`</ph> a message, which will permanently remove the message from the queue.</source>
          <target state="new">An application can also temporarily <ph id="ph1">`Abandon`</ph> a message, which will have IoT hub retain the message in the queue for future consumption; or <ph id="ph2">`Reject`</ph> a message, which will permanently remove the message from the queue.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt>IoT Hub Developer Guide<ept id="p1">][IoT Hub Developer Guide - C2D]</ept> for more information on the cloud-to-device message lifecycle.</source>
          <target state="new">Refer to <bpt id="p1">[</bpt>IoT Hub Developer Guide<ept id="p1">][IoT Hub Developer Guide - C2D]</ept> for more information on the cloud-to-device message lifecycle.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> When using HTTP/1 instead of AMQP as a transport, the <ph id="ph2">`ReceiveAsync`</ph> will return immediately.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> When using HTTP/1 instead of AMQP as a transport, the <ph id="ph2">`ReceiveAsync`</ph> will return immediately.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The supported pattern for cloud-to-device messages with HTTP/1 is intermittently connected devices that check for messages infrequently (i.e. less than every 25 mins).</source>
          <target state="new">The supported pattern for cloud-to-device messages with HTTP/1 is intermittently connected devices that check for messages infrequently (i.e. less than every 25 mins).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Issuing more HTTP/1 receives will result in IoT Hub throttling the requests.</source>
          <target state="new">Issuing more HTTP/1 receives will result in IoT Hub throttling the requests.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt>IoT Hub Developer Guide<ept id="p1">][IoT Hub Developer Guide - C2D]</ept> for more information on the differences between AMQP and HTTP/1 support, and IoT Hub throttling.</source>
          <target state="new">Refer to <bpt id="p1">[</bpt>IoT Hub Developer Guide<ept id="p1">][IoT Hub Developer Guide - C2D]</ept> for more information on the differences between AMQP and HTTP/1 support, and IoT Hub throttling.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Add the following method in the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method right before the <ph id="ph1">`Console.ReadLine()`</ph> line:</source>
          <target state="new">Add the following method in the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method right before the <ph id="ph1">`Console.ReadLine()`</ph> line:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> For simplicity's sake, this tutorial does not implement any retry policy.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> For simplicity's sake, this tutorial does not implement any retry policy.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In production code, it is reccommended to implement retry policies (such as exponential backoff), as suggested in the MSDN article [Transient Fault Handling].</source>
          <target state="new">In production code, it is reccommended to implement retry policies (such as exponential backoff), as suggested in the MSDN article [Transient Fault Handling].</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>