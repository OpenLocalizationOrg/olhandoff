{
  "nodes": [
    {
      "content": "Writing Expressions for Attribute Mappings in Azure Active Directory | Microsoft Azure",
      "pos": [
        27,
        113
      ]
    },
    {
      "content": "Learn how to use expression mappings to transform attribute values into an acceptable format during automated provisioning of SaaS app objects in Azure Active Directory.",
      "pos": [
        132,
        301
      ]
    },
    {
      "content": "Writing Expressions for Attribute Mappings in Azure Active Directory",
      "pos": [
        614,
        682
      ]
    },
    {
      "content": "When you configure provisioning to a SaaS application, one of the types of attribute mappings that you can specify is an expression mapping.",
      "pos": [
        684,
        824
      ]
    },
    {
      "content": "For these, you must write a script-like expression that allows you to transform your users’ data into formats that are more acceptable for the SaaS application.",
      "pos": [
        827,
        987
      ]
    },
    {
      "content": "Syntax Overview",
      "pos": [
        996,
        1011
      ]
    },
    {
      "content": "The syntax for Expressions for Attribute Mappings is reminiscent of Visual Basic for Applications (VBA) functions.",
      "pos": [
        1013,
        1127
      ]
    },
    {
      "content": "The entire expression must be defined in terms of functions, which consist of a name followed by arguments in parentheses:",
      "pos": [
        1131,
        1253
      ]
    },
    {
      "content": "FunctionName(&lt;&lt;argument 1&gt;&gt;,&lt;<ph id=\"ph1\">&lt;argument N&gt;</ph>&gt;)",
      "pos": [
        1260,
        1303
      ]
    },
    {
      "content": "You may nest functions within each other.",
      "pos": [
        1309,
        1350
      ]
    },
    {
      "content": "For example:",
      "pos": [
        1351,
        1363
      ]
    },
    {
      "content": "FunctionOne(FunctionTwo(&lt;<ph id=\"ph1\">&lt;argument1&gt;</ph>&gt;))",
      "pos": [
        1370,
        1409
      ]
    },
    {
      "content": "You can pass three different types of arguments into functions:",
      "pos": [
        1415,
        1478
      ]
    },
    {
      "content": "Attributes, which must be enclosed in square square brackets.",
      "pos": [
        1486,
        1547
      ]
    },
    {
      "content": "For example: [attributeName]",
      "pos": [
        1548,
        1576
      ]
    },
    {
      "content": "String constants, which must be enclosed in double quotes.",
      "pos": [
        1584,
        1642
      ]
    },
    {
      "content": "For example: \"United States\"",
      "pos": [
        1643,
        1671
      ]
    },
    {
      "content": "Other Functions.",
      "pos": [
        1679,
        1695
      ]
    },
    {
      "content": "For example: FunctionOne(&lt;",
      "pos": [
        1696,
        1722
      ]
    },
    {
      "content": "&gt;, FunctionTwo(&lt;",
      "pos": [
        1733,
        1749
      ]
    },
    {
      "content": "&gt;))",
      "pos": [
        1760,
        1763
      ]
    },
    {
      "content": "For string constants, if you need a backslash ( \\ ) or quotation mark ( \" ) in the string, it must be escaped with the backslash ( \\ ) symbol.",
      "pos": [
        1768,
        1910
      ]
    },
    {
      "content": "For example: \"Company name: \\\"Contoso\\\"\"",
      "pos": [
        1911,
        1951
      ]
    },
    {
      "content": "List of Functions",
      "pos": [
        1958,
        1975
      ]
    },
    {
      "pos": [
        1977,
        2307
      ],
      "content": "<bpt id=\"p1\">[</bpt>Append<ept id=\"p1\">](#append)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>FormatDateTime<ept id=\"p2\">](#formatdatetime)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>Join<ept id=\"p3\">](#join)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>Mid<ept id=\"p4\">](#mid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>Not<ept id=\"p5\">](#not)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>Replace<ept id=\"p6\">](#replace)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>StripSpaces<ept id=\"p7\">](#stripspaces)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p8\">[</bpt>Switch<ept id=\"p8\">](#switch)</ept>"
    },
    {
      "content": "Append",
      "pos": [
        2328,
        2334
      ]
    },
    {
      "content": "Function:",
      "pos": [
        2338,
        2347
      ]
    },
    {
      "content": "Append(source, suffix)",
      "pos": [
        2355,
        2377
      ]
    },
    {
      "content": "Description:",
      "pos": [
        2381,
        2393
      ]
    },
    {
      "content": "Takes a source string value and appends the suffix to the end of it.",
      "pos": [
        2401,
        2469
      ]
    },
    {
      "content": "Parameters:",
      "pos": [
        2474,
        2485
      ]
    },
    {
      "content": "Name",
      "pos": [
        2495,
        2499
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        2501,
        2520
      ]
    },
    {
      "content": "Type",
      "pos": [
        2523,
        2527
      ]
    },
    {
      "content": "Notes",
      "pos": [
        2530,
        2535
      ]
    },
    {
      "content": "source",
      "pos": [
        2586,
        2592
      ]
    },
    {
      "content": "Required",
      "pos": [
        2597,
        2605
      ]
    },
    {
      "content": "String",
      "pos": [
        2608,
        2614
      ]
    },
    {
      "content": "Usually name of the attribute from the source object",
      "pos": [
        2617,
        2669
      ]
    },
    {
      "content": "suffix",
      "pos": [
        2676,
        2682
      ]
    },
    {
      "content": "Required",
      "pos": [
        2687,
        2695
      ]
    },
    {
      "content": "String",
      "pos": [
        2698,
        2704
      ]
    },
    {
      "content": "The string that you want to append to the end of the source value.",
      "pos": [
        2707,
        2773
      ]
    },
    {
      "content": "FormatDateTime",
      "pos": [
        2793,
        2807
      ]
    },
    {
      "content": "Function:",
      "pos": [
        2811,
        2820
      ]
    },
    {
      "content": "FormatDateTime(source, inputFormat, outputFormat)",
      "pos": [
        2828,
        2877
      ]
    },
    {
      "content": "Description:",
      "pos": [
        2881,
        2893
      ]
    },
    {
      "content": "Takes a date string from one format and converts it into a different format.",
      "pos": [
        2901,
        2977
      ]
    },
    {
      "content": "Parameters:",
      "pos": [
        2982,
        2993
      ]
    },
    {
      "content": "Name",
      "pos": [
        3003,
        3007
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        3009,
        3028
      ]
    },
    {
      "content": "Type",
      "pos": [
        3031,
        3035
      ]
    },
    {
      "content": "Notes",
      "pos": [
        3038,
        3043
      ]
    },
    {
      "content": "source",
      "pos": [
        3094,
        3100
      ]
    },
    {
      "content": "Required",
      "pos": [
        3105,
        3113
      ]
    },
    {
      "content": "String",
      "pos": [
        3116,
        3122
      ]
    },
    {
      "content": "Usually name of the attribute from the source object.",
      "pos": [
        3125,
        3178
      ]
    },
    {
      "content": "inputFormat",
      "pos": [
        3185,
        3196
      ]
    },
    {
      "content": "Required",
      "pos": [
        3201,
        3209
      ]
    },
    {
      "content": "String",
      "pos": [
        3212,
        3218
      ]
    },
    {
      "content": "Expected format of the source value.",
      "pos": [
        3221,
        3257
      ]
    },
    {
      "content": "For supported formats, see <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx<ept id=\"p1\">](http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx)</ept>.",
      "pos": [
        3258,
        3412
      ]
    },
    {
      "content": "outputFormat",
      "pos": [
        3419,
        3431
      ]
    },
    {
      "content": "Required",
      "pos": [
        3436,
        3444
      ]
    },
    {
      "content": "String",
      "pos": [
        3447,
        3453
      ]
    },
    {
      "content": "Format of the output date.",
      "pos": [
        3456,
        3482
      ]
    },
    {
      "content": "Join",
      "pos": [
        3503,
        3507
      ]
    },
    {
      "content": "Function:",
      "pos": [
        3511,
        3520
      ]
    },
    {
      "content": "Join(separator, source1, source2, …)",
      "pos": [
        3528,
        3564
      ]
    },
    {
      "content": "Description:",
      "pos": [
        3568,
        3580
      ]
    },
    {
      "content": "Join() is similar to Append(), except that it can combine multiple <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> string values into a single string, and each value will be separated by a <bpt id=\"p2\">**</bpt>separator<ept id=\"p2\">**</ept> string.",
      "pos": [
        3588,
        3761
      ]
    },
    {
      "content": "If one of the source values is a multi-value attribute, then every value in that attribute will be joined together, separated the separator value.",
      "pos": [
        3763,
        3909
      ]
    },
    {
      "content": "Parameters:",
      "pos": [
        3915,
        3926
      ]
    },
    {
      "content": "Name",
      "pos": [
        3936,
        3940
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        3942,
        3961
      ]
    },
    {
      "content": "Type",
      "pos": [
        3964,
        3968
      ]
    },
    {
      "content": "Notes",
      "pos": [
        3971,
        3976
      ]
    },
    {
      "content": "separator",
      "pos": [
        4027,
        4036
      ]
    },
    {
      "content": "Required",
      "pos": [
        4041,
        4049
      ]
    },
    {
      "content": "String",
      "pos": [
        4052,
        4058
      ]
    },
    {
      "content": "String used to separate source values when they are concatenated into one string.",
      "pos": [
        4061,
        4142
      ]
    },
    {
      "content": "Can be \"\" if no separator is required.",
      "pos": [
        4143,
        4181
      ]
    },
    {
      "content": "**source1  …",
      "pos": [
        4186,
        4198
      ]
    },
    {
      "content": "sourceN **",
      "pos": [
        4199,
        4209
      ]
    },
    {
      "content": "Required, variable-number of times",
      "pos": [
        4212,
        4246
      ]
    },
    {
      "content": "String",
      "pos": [
        4249,
        4255
      ]
    },
    {
      "content": "String values to be joined together.",
      "pos": [
        4258,
        4294
      ]
    },
    {
      "content": "Mid",
      "pos": [
        4315,
        4318
      ]
    },
    {
      "content": "Function:",
      "pos": [
        4322,
        4331
      ]
    },
    {
      "content": "Mid(source, start, length)",
      "pos": [
        4339,
        4365
      ]
    },
    {
      "content": "Description:",
      "pos": [
        4369,
        4381
      ]
    },
    {
      "content": "Returns a substring of the source value.",
      "pos": [
        4389,
        4429
      ]
    },
    {
      "content": "A substring is a string that contains only some of the characters from the source string.",
      "pos": [
        4430,
        4519
      ]
    },
    {
      "content": "Parameters:",
      "pos": [
        4524,
        4535
      ]
    },
    {
      "content": "Name",
      "pos": [
        4545,
        4549
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        4551,
        4570
      ]
    },
    {
      "content": "Type",
      "pos": [
        4573,
        4577
      ]
    },
    {
      "content": "Notes",
      "pos": [
        4580,
        4585
      ]
    },
    {
      "content": "source",
      "pos": [
        4636,
        4642
      ]
    },
    {
      "content": "Required",
      "pos": [
        4647,
        4655
      ]
    },
    {
      "content": "String",
      "pos": [
        4658,
        4664
      ]
    },
    {
      "content": "Usually name of the attribute.",
      "pos": [
        4667,
        4697
      ]
    },
    {
      "content": "start",
      "pos": [
        4704,
        4709
      ]
    },
    {
      "content": "Required",
      "pos": [
        4714,
        4722
      ]
    },
    {
      "content": "integer",
      "pos": [
        4725,
        4732
      ]
    },
    {
      "content": "Index in the <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> string where substring should start.",
      "pos": [
        4735,
        4795
      ]
    },
    {
      "content": "First character in the string will have index of 1, second character will have index 2, and so on.",
      "pos": [
        4796,
        4894
      ]
    },
    {
      "content": "length",
      "pos": [
        4901,
        4907
      ]
    },
    {
      "content": "Required",
      "pos": [
        4912,
        4920
      ]
    },
    {
      "content": "integer",
      "pos": [
        4923,
        4930
      ]
    },
    {
      "content": "Length of the substring.",
      "pos": [
        4933,
        4957
      ]
    },
    {
      "content": "If length ends outside the <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> string, function will return substring from <bpt id=\"p2\">**</bpt>start<ept id=\"p2\">**</ept> index till end of <bpt id=\"p3\">**</bpt>source<ept id=\"p3\">**</ept> string.",
      "pos": [
        4958,
        5086
      ]
    },
    {
      "content": "Not",
      "pos": [
        5108,
        5111
      ]
    },
    {
      "content": "Function:",
      "pos": [
        5115,
        5124
      ]
    },
    {
      "content": "Not(source)",
      "pos": [
        5132,
        5143
      ]
    },
    {
      "content": "Description:",
      "pos": [
        5147,
        5159
      ]
    },
    {
      "content": "Flips the boolean value of the <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept>.",
      "pos": [
        5167,
        5209
      ]
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> value is \"<bpt id=\"p2\">*</bpt>True<ept id=\"p2\">*</ept>\", returns \"<bpt id=\"p3\">*</bpt>False<ept id=\"p3\">*</ept>\".",
      "pos": [
        5210,
        5261
      ]
    },
    {
      "content": "Otherwise, returns \"<bpt id=\"p1\">*</bpt>True<ept id=\"p1\">*</ept>\".",
      "pos": [
        5262,
        5290
      ]
    },
    {
      "content": "Parameters:",
      "pos": [
        5295,
        5306
      ]
    },
    {
      "content": "Name",
      "pos": [
        5316,
        5320
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        5322,
        5341
      ]
    },
    {
      "content": "Type",
      "pos": [
        5344,
        5348
      ]
    },
    {
      "content": "Notes",
      "pos": [
        5351,
        5356
      ]
    },
    {
      "content": "source",
      "pos": [
        5407,
        5413
      ]
    },
    {
      "content": "Required",
      "pos": [
        5418,
        5426
      ]
    },
    {
      "content": "Boolean String",
      "pos": [
        5429,
        5443
      ]
    },
    {
      "pos": [
        5446,
        5496
      ],
      "content": "Expected <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> values are \"True\" or \"False\".."
    },
    {
      "content": "Replace",
      "pos": [
        5517,
        5524
      ]
    },
    {
      "content": "Function:",
      "pos": [
        5528,
        5537
      ]
    },
    {
      "content": "ObsoleteReplace(source, oldValue, regexPattern, regexGroupName, replacementValue, replacementAttributeName, template)",
      "pos": [
        5545,
        5662
      ]
    },
    {
      "content": "Description:",
      "pos": [
        5666,
        5678
      ]
    },
    {
      "content": "Replaces values within a string.",
      "pos": [
        5685,
        5717
      ]
    },
    {
      "content": "It works differently depending on the parameters provided:",
      "pos": [
        5718,
        5776
      ]
    },
    {
      "pos": [
        5780,
        5836
      ],
      "content": "When <bpt id=\"p1\">**</bpt>oldValue<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>replacementValue<ept id=\"p2\">**</ept> are provided:"
    },
    {
      "content": "Replaces all occurrences of oldValue in the source  with replacementValue",
      "pos": [
        5843,
        5916
      ]
    },
    {
      "pos": [
        5920,
        5968
      ],
      "content": "When <bpt id=\"p1\">**</bpt>oldValue<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>template<ept id=\"p2\">**</ept> are provided:"
    },
    {
      "pos": [
        5975,
        6065
      ],
      "content": "Replaces all occurrences of the <bpt id=\"p1\">**</bpt>oldValue<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>template<ept id=\"p2\">**</ept> with the <bpt id=\"p3\">**</bpt>source<ept id=\"p3\">**</ept> value"
    },
    {
      "pos": [
        6069,
        6162
      ],
      "content": "When <bpt id=\"p1\">**</bpt>oldValueRegexPattern<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>oldValueRegexGroupName<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>replacementValue<ept id=\"p3\">**</ept> are provided:"
    },
    {
      "content": "Replaces all values matching oldValueRegexPattern in the source string with replacementValue",
      "pos": [
        6169,
        6261
      ]
    },
    {
      "pos": [
        6265,
        6365
      ],
      "content": "When <bpt id=\"p1\">**</bpt>oldValueRegexPattern<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>oldValueRegexGroupName<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>replacementPropertyName<ept id=\"p3\">**</ept> are provided:"
    },
    {
      "pos": [
        6372,
        6419
      ],
      "content": "If <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> has value, <bpt id=\"p2\">**</bpt>source<ept id=\"p2\">**</ept> is returned"
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> has no value, uses <bpt id=\"p2\">**</bpt>oldValueRegexPattern<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>oldValueRegexGroupName<ept id=\"p3\">**</ept> to extract replacement value from the property with <bpt id=\"p4\">**</bpt>replacementPropertyName<ept id=\"p4\">**</ept>.",
      "pos": [
        6426,
        6595
      ]
    },
    {
      "content": "Replacement value is returned as the result",
      "pos": [
        6596,
        6639
      ]
    },
    {
      "content": "Parameters:",
      "pos": [
        6644,
        6655
      ]
    },
    {
      "content": "Name",
      "pos": [
        6665,
        6669
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        6671,
        6690
      ]
    },
    {
      "content": "Type",
      "pos": [
        6693,
        6697
      ]
    },
    {
      "content": "Notes",
      "pos": [
        6700,
        6705
      ]
    },
    {
      "content": "source",
      "pos": [
        6756,
        6762
      ]
    },
    {
      "content": "Required",
      "pos": [
        6767,
        6775
      ]
    },
    {
      "content": "String",
      "pos": [
        6778,
        6784
      ]
    },
    {
      "content": "Usually name of the attribute from the source object.",
      "pos": [
        6787,
        6840
      ]
    },
    {
      "content": "oldValue",
      "pos": [
        6847,
        6855
      ]
    },
    {
      "content": "Optional",
      "pos": [
        6860,
        6868
      ]
    },
    {
      "content": "String",
      "pos": [
        6871,
        6877
      ]
    },
    {
      "pos": [
        6880,
        6931
      ],
      "content": "Value to be replaced in <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>template<ept id=\"p2\">**</ept>."
    },
    {
      "content": "regexPattern",
      "pos": [
        6938,
        6950
      ]
    },
    {
      "content": "Optional",
      "pos": [
        6955,
        6963
      ]
    },
    {
      "content": "String",
      "pos": [
        6966,
        6972
      ]
    },
    {
      "content": "Regex pattern for the value to be replaced in <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept>.",
      "pos": [
        6975,
        7032
      ]
    },
    {
      "content": "Or, when replacementPropertyName is used, pattern to extract value from replacement property.",
      "pos": [
        7033,
        7126
      ]
    },
    {
      "content": "regexGroupName",
      "pos": [
        7133,
        7147
      ]
    },
    {
      "content": "Optional",
      "pos": [
        7152,
        7160
      ]
    },
    {
      "content": "String",
      "pos": [
        7163,
        7169
      ]
    },
    {
      "content": "Name of the group inside <bpt id=\"p1\">**</bpt>regexPattern<ept id=\"p1\">**</ept>.",
      "pos": [
        7172,
        7214
      ]
    },
    {
      "content": "Only when  replacementPropertyName is used, we will extract value of this group as replacementValue from replacement property.",
      "pos": [
        7215,
        7341
      ]
    },
    {
      "content": "replacementValue",
      "pos": [
        7348,
        7364
      ]
    },
    {
      "content": "Optional",
      "pos": [
        7369,
        7377
      ]
    },
    {
      "content": "String",
      "pos": [
        7380,
        7386
      ]
    },
    {
      "content": "New value to replace old one with.",
      "pos": [
        7389,
        7423
      ]
    },
    {
      "content": "replacementAttributeName",
      "pos": [
        7430,
        7454
      ]
    },
    {
      "content": "Optional",
      "pos": [
        7459,
        7467
      ]
    },
    {
      "content": "String",
      "pos": [
        7470,
        7476
      ]
    },
    {
      "content": "Name of the attribute to be used for replacement value, when source has no value.",
      "pos": [
        7479,
        7560
      ]
    },
    {
      "content": "template",
      "pos": [
        7567,
        7575
      ]
    },
    {
      "content": "Optional",
      "pos": [
        7580,
        7588
      ]
    },
    {
      "content": "String",
      "pos": [
        7591,
        7597
      ]
    },
    {
      "pos": [
        7600,
        7720
      ],
      "content": "When <bpt id=\"p1\">**</bpt>template<ept id=\"p1\">**</ept> value is provided, we will look for <bpt id=\"p2\">**</bpt>oldValue<ept id=\"p2\">**</ept> inside the template and replace it with source value."
    },
    {
      "content": "StripSpaces",
      "pos": [
        7741,
        7752
      ]
    },
    {
      "content": "Function:",
      "pos": [
        7756,
        7765
      ]
    },
    {
      "content": "StripSpaces(source)",
      "pos": [
        7773,
        7792
      ]
    },
    {
      "content": "Description:",
      "pos": [
        7796,
        7808
      ]
    },
    {
      "content": "Removes all space (\" \") characters from the source string.",
      "pos": [
        7816,
        7874
      ]
    },
    {
      "content": "Parameters:",
      "pos": [
        7878,
        7889
      ]
    },
    {
      "content": "Name",
      "pos": [
        7899,
        7903
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        7905,
        7924
      ]
    },
    {
      "content": "Type",
      "pos": [
        7927,
        7931
      ]
    },
    {
      "content": "Notes",
      "pos": [
        7934,
        7939
      ]
    },
    {
      "content": "source",
      "pos": [
        7990,
        7996
      ]
    },
    {
      "content": "Required",
      "pos": [
        8001,
        8009
      ]
    },
    {
      "content": "String",
      "pos": [
        8012,
        8018
      ]
    },
    {
      "pos": [
        8021,
        8048
      ],
      "content": "<bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> value to update."
    },
    {
      "content": "Switch",
      "pos": [
        8069,
        8075
      ]
    },
    {
      "content": "Function:",
      "pos": [
        8079,
        8088
      ]
    },
    {
      "content": "Switch(source, defaultValue, key1, value1, key2, value2, …)",
      "pos": [
        8096,
        8155
      ]
    },
    {
      "content": "Description:",
      "pos": [
        8159,
        8171
      ]
    },
    {
      "content": "When <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> value matches a <bpt id=\"p2\">**</bpt>key<ept id=\"p2\">**</ept>, returns <bpt id=\"p3\">**</bpt>value<ept id=\"p3\">**</ept> for that <bpt id=\"p4\">**</bpt>key<ept id=\"p4\">**</ept>.",
      "pos": [
        8179,
        8255
      ]
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> value doesn't match any keys, returns <bpt id=\"p2\">**</bpt>defaultValue<ept id=\"p2\">**</ept>.",
      "pos": [
        8256,
        8325
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>value<ept id=\"p2\">**</ept> parameters must always come in pairs.",
      "pos": [
        8327,
        8386
      ]
    },
    {
      "content": "The function always expects an even number of parameters.",
      "pos": [
        8387,
        8444
      ]
    },
    {
      "content": "Parameters:",
      "pos": [
        8448,
        8459
      ]
    },
    {
      "content": "Name",
      "pos": [
        8469,
        8473
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        8475,
        8494
      ]
    },
    {
      "content": "Type",
      "pos": [
        8497,
        8501
      ]
    },
    {
      "content": "Notes",
      "pos": [
        8504,
        8509
      ]
    },
    {
      "content": "source",
      "pos": [
        8560,
        8566
      ]
    },
    {
      "content": "Required",
      "pos": [
        8571,
        8579
      ]
    },
    {
      "content": "String",
      "pos": [
        8582,
        8588
      ]
    },
    {
      "pos": [
        8591,
        8618
      ],
      "content": "<bpt id=\"p1\">**</bpt>Source<ept id=\"p1\">**</ept> value to update."
    },
    {
      "content": "defaultValue",
      "pos": [
        8625,
        8637
      ]
    },
    {
      "content": "Optional",
      "pos": [
        8642,
        8650
      ]
    },
    {
      "content": "String",
      "pos": [
        8653,
        8659
      ]
    },
    {
      "content": "Default value to be used when source doesn't match any keys.",
      "pos": [
        8662,
        8722
      ]
    },
    {
      "content": "Can be empty string (\"\").",
      "pos": [
        8723,
        8748
      ]
    },
    {
      "content": "key",
      "pos": [
        8755,
        8758
      ]
    },
    {
      "content": "Required",
      "pos": [
        8763,
        8771
      ]
    },
    {
      "content": "String",
      "pos": [
        8774,
        8780
      ]
    },
    {
      "pos": [
        8783,
        8824
      ],
      "content": "<bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept> to compare <bpt id=\"p2\">**</bpt>source<ept id=\"p2\">**</ept> value with."
    },
    {
      "content": "value",
      "pos": [
        8831,
        8836
      ]
    },
    {
      "content": "Required",
      "pos": [
        8841,
        8849
      ]
    },
    {
      "content": "String",
      "pos": [
        8852,
        8858
      ]
    },
    {
      "pos": [
        8861,
        8915
      ],
      "content": "Replacement value for the <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> matching the key."
    },
    {
      "content": "Examples",
      "pos": [
        8924,
        8932
      ]
    },
    {
      "content": "Strip known domain name",
      "pos": [
        8938,
        8961
      ]
    },
    {
      "content": "You need to strip a known domain name from a user’s email to obtain a user name.",
      "pos": [
        8963,
        9043
      ]
    },
    {
      "content": "For example, if the domain is \"contoso.com\", then you could use the following expression:",
      "pos": [
        9049,
        9138
      ]
    },
    {
      "content": "Expression:",
      "pos": [
        9143,
        9154
      ]
    },
    {
      "content": "Sample input / output:",
      "pos": [
        9209,
        9231
      ]
    },
    {
      "pos": [
        9242,
        9282
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (mail): \"john.doe@contoso.com\""
    },
    {
      "pos": [
        9286,
        9309
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>:  \"john.doe\""
    },
    {
      "content": "Append constant suffix to user name",
      "pos": [
        9316,
        9351
      ]
    },
    {
      "content": "If you are using a Salesforce Sandbox, you might need to append an additional suffix to all your user names before synchronizing them.",
      "pos": [
        9353,
        9487
      ]
    },
    {
      "content": "Expression:",
      "pos": [
        9494,
        9505
      ]
    },
    {
      "content": "Sample input/output:",
      "pos": [
        9556,
        9576
      ]
    },
    {
      "pos": [
        9587,
        9641
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept>: (userPrincipalName): \"John.Doe@contoso.com\""
    },
    {
      "pos": [
        9646,
        9686
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>:  \"John.Doe@contoso.com.test\""
    },
    {
      "content": "Generate user alias by concatenating parts of first and last name",
      "pos": [
        9696,
        9761
      ]
    },
    {
      "content": "You need to generate a user alias by taking first 3 letters of user's first name and first 5 letters of user's last name.",
      "pos": [
        9763,
        9884
      ]
    },
    {
      "content": "Expression:",
      "pos": [
        9889,
        9900
      ]
    },
    {
      "content": "Sample input/output:",
      "pos": [
        9966,
        9986
      ]
    },
    {
      "pos": [
        9997,
        10026
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (givenName): \"John\""
    },
    {
      "pos": [
        10030,
        10056
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (surname): \"Doe\""
    },
    {
      "pos": [
        10060,
        10081
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>:  \"JohDoe\""
    },
    {
      "content": "Output date as a string in a certain format",
      "pos": [
        10090,
        10133
      ]
    },
    {
      "content": "You want to send dates to a SaaS application in a certain format.",
      "pos": [
        10135,
        10200
      ]
    },
    {
      "content": "For example, you want to format dates for ServiceNow.",
      "pos": [
        10206,
        10259
      ]
    },
    {
      "content": "Expression:",
      "pos": [
        10265,
        10276
      ]
    },
    {
      "content": "Sample input/output:",
      "pos": [
        10363,
        10383
      ]
    },
    {
      "pos": [
        10389,
        10441
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (extensionAttribute1): \"20150123105347.1Z\""
    },
    {
      "pos": [
        10445,
        10470
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>:  \"2015-01-23\""
    },
    {
      "content": "Replace a value based on predefined set of options",
      "pos": [
        10480,
        10530
      ]
    },
    {
      "content": "You need to define the time zone of the user based on the state code stored in Azure AD.",
      "pos": [
        10532,
        10620
      ]
    },
    {
      "content": "If the state code doesn't match any of the predefined options, use default value of \"Australia/Sydney\".",
      "pos": [
        10626,
        10729
      ]
    },
    {
      "content": "Expression:",
      "pos": [
        10734,
        10745
      ]
    },
    {
      "content": "Sample input/output:",
      "pos": [
        10878,
        10898
      ]
    },
    {
      "pos": [
        10904,
        10928
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (state): \"QLD\""
    },
    {
      "pos": [
        10932,
        10964
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>: \"Australia/Brisbane\""
    }
  ],
  "content": "<properties\n    pageTitle=\"Writing Expressions for Attribute Mappings in Azure Active Directory | Microsoft Azure\"\n    description=\"Learn how to use expression mappings to transform attribute values into an acceptable format during automated provisioning of SaaS app objects in Azure Active Directory.\"\n    services=\"active-directory\"\n    documentationCenter=\"\"\n    authors=\"markusvi\"\n    manager=\"stevenpo\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"active-directory\"\n    ms.workload=\"identity\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"10/20/2015\"\n    ms.author=\"markusvi\"/>\n\n\n# Writing Expressions for Attribute Mappings in Azure Active Directory\n\nWhen you configure provisioning to a SaaS application, one of the types of attribute mappings that you can specify is an expression mapping. \n For these, you must write a script-like expression that allows you to transform your users’ data into formats that are more acceptable for the SaaS application.\n\n\n\n\n\n## Syntax Overview\n\nThe syntax for Expressions for Attribute Mappings is reminiscent of Visual Basic for Applications (VBA) functions.\n\n- The entire expression must be defined in terms of functions, which consist of a name followed by arguments in parentheses: <br>\n*FunctionName(<<argument 1>>,<<argument N>>)*\n\n\n- You may nest functions within each other. For example: <br> *FunctionOne(FunctionTwo(<<argument1>>))*\n\n\n- You can pass three different types of arguments into functions:\n\n   1. Attributes, which must be enclosed in square square brackets. For example: [attributeName]\n\n   2. String constants, which must be enclosed in double quotes. For example: \"United States\"\n\n   3. Other Functions. For example: FunctionOne(<<argument1>>, FunctionTwo(<<argument2>>))\n\n\n- For string constants, if you need a backslash ( \\ ) or quotation mark ( \" ) in the string, it must be escaped with the backslash ( \\ ) symbol. For example: \"Company name: \\\"Contoso\\\"\"\n\n\n\n## List of Functions\n\n[Append](#append) &nbsp;&nbsp;&nbsp;&nbsp; [FormatDateTime](#formatdatetime) &nbsp;&nbsp;&nbsp;&nbsp; [Join](#join) &nbsp;&nbsp;&nbsp;&nbsp; [Mid](#mid) &nbsp;&nbsp;&nbsp;&nbsp; [Not](#not) &nbsp;&nbsp;&nbsp;&nbsp; [Replace](#replace) &nbsp;&nbsp;&nbsp;&nbsp; [StripSpaces](#stripspaces) &nbsp;&nbsp;&nbsp;&nbsp; [Switch](#switch)\n\n\n\n\n\n----------\n### Append\n\n**Function:**<br> \nAppend(source, suffix)\n\n**Description:**<br> \nTakes a source string value and appends the suffix to the end of it.\n \n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | Usually name of the attribute from the source object |\n| **suffix** | Required | String | The string that you want to append to the end of the source value. |\n\n\n----------\n### FormatDateTime\n\n**Function:**<br> \nFormatDateTime(source, inputFormat, outputFormat)\n\n**Description:**<br> \nTakes a date string from one format and converts it into a different format.\n \n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | Usually name of the attribute from the source object. |\n| **inputFormat** | Required | String | Expected format of the source value. For supported formats, see [http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx](http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx). |\n| **outputFormat** | Required | String | Format of the output date. |\n\n\n\n----------\n### Join\n\n**Function:**<br> \nJoin(separator, source1, source2, …)\n\n**Description:**<br> \nJoin() is similar to Append(), except that it can combine multiple **source** string values into a single string, and each value will be separated by a **separator** string.\n\nIf one of the source values is a multi-value attribute, then every value in that attribute will be joined together, separated the separator value.\n\n \n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **separator** | Required | String | String used to separate source values when they are concatenated into one string. Can be \"\" if no separator is required. |\n| **source1  … sourceN ** | Required, variable-number of times | String | String values to be joined together. |\n\n\n\n----------\n### Mid\n\n**Function:**<br> \nMid(source, start, length)\n\n**Description:**<br> \nReturns a substring of the source value. A substring is a string that contains only some of the characters from the source string.\n\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | Usually name of the attribute. |\n| **start** | Required | integer | Index in the **source** string where substring should start. First character in the string will have index of 1, second character will have index 2, and so on. |\n| **length** | Required | integer | Length of the substring. If length ends outside the **source** string, function will return substring from **start** index till end of **source** string. |\n\n\n\n\n----------\n### Not\n\n**Function:**<br> \nNot(source)\n\n**Description:**<br> \nFlips the boolean value of the **source**. If **source** value is \"*True*\", returns \"*False*\". Otherwise, returns \"*True*\".\n\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | Boolean String | Expected **source** values are \"True\" or \"False\".. |\n\n\n\n----------\n### Replace\n\n**Function:**<br> \nObsoleteReplace(source, oldValue, regexPattern, regexGroupName, replacementValue, replacementAttributeName, template)\n\n**Description:**<br>\nReplaces values within a string. It works differently depending on the parameters provided:\n\n- When **oldValue** and **replacementValue** are provided:\n\n   - Replaces all occurrences of oldValue in the source  with replacementValue\n\n- When **oldValue** and **template** are provided:\n\n   - Replaces all occurrences of the **oldValue** in the **template** with the **source** value\n\n- When **oldValueRegexPattern**, **oldValueRegexGroupName**, **replacementValue** are provided:\n\n   - Replaces all values matching oldValueRegexPattern in the source string with replacementValue\n\n- When **oldValueRegexPattern**, **oldValueRegexGroupName**, **replacementPropertyName** are provided:\n\n   - If **source** has value, **source** is returned\n\n   - If **source** has no value, uses **oldValueRegexPattern** and **oldValueRegexGroupName** to extract replacement value from the property with **replacementPropertyName**. Replacement value is returned as the result\n\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | Usually name of the attribute from the source object. |\n| **oldValue** | Optional | String | Value to be replaced in **source** or **template**. |\n| **regexPattern** | Optional | String | Regex pattern for the value to be replaced in **source**. Or, when replacementPropertyName is used, pattern to extract value from replacement property. |\n| **regexGroupName** | Optional | String | Name of the group inside **regexPattern**. Only when  replacementPropertyName is used, we will extract value of this group as replacementValue from replacement property. |\n| **replacementValue** | Optional | String | New value to replace old one with. |\n| **replacementAttributeName** | Optional | String | Name of the attribute to be used for replacement value, when source has no value. |\n| **template** | Optional | String | When **template** value is provided, we will look for **oldValue** inside the template and replace it with source value. |\n\n\n\n----------\n### StripSpaces\n\n**Function:**<br> \nStripSpaces(source)\n\n**Description:**<br> \nRemoves all space (\" \") characters from the source string.\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | **source** value to update. |\n\n\n\n----------\n### Switch\n\n**Function:**<br> \nSwitch(source, defaultValue, key1, value1, key2, value2, …)\n\n**Description:**<br> \nWhen **source** value matches a **key**, returns **value** for that **key**. If **source** value doesn't match any keys, returns **defaultValue**.  **Key** and **value** parameters must always come in pairs. The function always expects an even number of parameters.\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | **Source** value to update. |\n| **defaultValue** | Optional | String | Default value to be used when source doesn't match any keys. Can be empty string (\"\"). |\n| **key** | Required | String | **Key** to compare **source** value with. |\n| **value** | Required | String | Replacement value for the **source** matching the key. |\n\n\n\n## Examples\n\n### Strip known domain name\n\nYou need to strip a known domain name from a user’s email to obtain a user name. <br>\nFor example, if the domain is \"contoso.com\", then you could use the following expression:\n\n\n**Expression:** <br>\n`Replace([mail], \"@contoso.com\", , ,\"\", ,)`\n\n**Sample input / output:** <br>\n\n- **INPUT** (mail): \"john.doe@contoso.com\"\n\n- **OUTPUT**:  \"john.doe\"\n\n\n### Append constant suffix to user name\n\nIf you are using a Salesforce Sandbox, you might need to append an additional suffix to all your user names before synchronizing them.\n\n\n\n\n**Expression:** <br>\n`Append([userPrincipalName], \".test\"))`\n\n**Sample input/output:** <br>\n\n- **INPUT**: (userPrincipalName): \"John.Doe@contoso.com\"\n\n\n- **OUTPUT**:  \"John.Doe@contoso.com.test\"\n\n\n\n\n\n### Generate user alias by concatenating parts of first and last name\n\nYou need to generate a user alias by taking first 3 letters of user's first name and first 5 letters of user's last name.\n\n\n**Expression:** <br>\n`Append(Mid([givenName], 1, 3), Mid([surname], 1, 5))`\n\n**Sample input/output:** <br>\n\n- **INPUT** (givenName): \"John\"\n\n- **INPUT** (surname): \"Doe\"\n\n- **OUTPUT**:  \"JohDoe\"\n\n\n\n\n### Output date as a string in a certain format\n\nYou want to send dates to a SaaS application in a certain format. <br>\nFor example, you want to format dates for ServiceNow.\n\n\n\n**Expression:** <br>\n\n`FormatDateTime([extensionAttribute1], \"yyyyMMddHHmmss.fZ\", \"yyyy-MM-dd\")`\n\n**Sample input/output:**\n\n- **INPUT** (extensionAttribute1): \"20150123105347.1Z\"\n\n- **OUTPUT**:  \"2015-01-23\"\n\n\n\n\n\n### Replace a value based on predefined set of options\n\nYou need to define the time zone of the user based on the state code stored in Azure AD. <br>\nIf the state code doesn't match any of the predefined options, use default value of \"Australia/Sydney\".\n\n\n**Expression:** <br>\n\n`Switch([state], \"Australia/Sydney\", \"NSW\", \"Australia/Sydney\",\"QLD\", \"Australia/Brisbane\", \"SA\", \"Australia/Adelaide\")`\n\n**Sample input/output:**\n\n- **INPUT** (state): \"QLD\"\n\n- **OUTPUT**: \"Australia/Brisbane\"\n\n\n[AZURE.INCLUDE [saas-toc](../../includes/active-directory-saas-toc.md)]\n\n\n"
}