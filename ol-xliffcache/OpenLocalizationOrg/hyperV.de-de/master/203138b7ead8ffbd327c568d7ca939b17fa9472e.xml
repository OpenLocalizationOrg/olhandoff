{
  "nodes": [
    {
      "content": "Deploy an API app in Azure App Service",
      "pos": [
        28,
        66
      ]
    },
    {
      "content": "Learn how to deploy an API app project to your Azure subscription.",
      "pos": [
        87,
        153
      ]
    },
    {
      "content": "Deploy an API app in Azure App Service",
      "pos": [
        486,
        524
      ]
    },
    {
      "content": "Overview",
      "pos": [
        616,
        624
      ]
    },
    {
      "content": "In this tutorial, you deploy the Web API project that you created in the <bpt id=\"p1\">[</bpt>previous tutorial<ept id=\"p1\">](app-service-dotnet-create-api-app.md)</ept> to a new <bpt id=\"p2\">[</bpt>API app<ept id=\"p2\">](app-service-api-apps-why-best-platform.md)</ept>.",
      "pos": [
        626,
        819
      ]
    },
    {
      "content": "You use Visual Studio to create the API app resource in <bpt id=\"p1\">[</bpt>Azure App Service<ept id=\"p1\">](../app-service/app-service-value-prop-what-is.md)</ept> and to deploy your Web API code to the Azure API app.",
      "pos": [
        820,
        999
      ]
    },
    {
      "content": "Other deployment options",
      "pos": [
        1006,
        1030
      ]
    },
    {
      "content": "There are many other ways to deploy API apps.",
      "pos": [
        1032,
        1077
      ]
    },
    {
      "content": "An API app is a <bpt id=\"p1\">[</bpt>web app<ept id=\"p1\">](../app-service-web/app-service-web-overview.md)</ept> with extra features for hosting web services, and all of <bpt id=\"p2\">[</bpt>the deployment methods that are available for web apps<ept id=\"p2\">](../app-service-web/web-sites-deploy.md)</ept> can also be used with API apps.",
      "pos": [
        1078,
        1337
      ]
    },
    {
      "content": "The web app that hosts an API app is called the API app host in the Azure preview portal, and you can configure deployment by using the API app host portal blade.",
      "pos": [
        1338,
        1500
      ]
    },
    {
      "content": "For information about the API app host blade, see <bpt id=\"p1\">[</bpt>Manage an API app<ept id=\"p1\">](app-service-api-manage-in-portal.md)</ept>.",
      "pos": [
        1501,
        1608
      ]
    },
    {
      "content": "The fact that API apps are based on web apps also means that you can deploy code written for platforms other than ASP.NET to API apps.",
      "pos": [
        1610,
        1744
      ]
    },
    {
      "content": "For an example that uses Git to deploy Node.js code to an API app, see <bpt id=\"p1\">[</bpt>Create a Node.js API app in Azure App Service<ept id=\"p1\">](app-service-api-nodejs-api-app.md)</ept>.",
      "pos": [
        1745,
        1899
      ]
    },
    {
      "pos": [
        1905,
        1954
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"provision\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create the API app in Azure"
    },
    {
      "content": "In this section, you use the Visual Studio <bpt id=\"p1\">**</bpt>Publish Web<ept id=\"p1\">**</ept> wizard to create an API app in Azure.",
      "pos": [
        1957,
        2053
      ]
    },
    {
      "content": "Where the instructions direct you to enter a name for the API app, enter <bpt id=\"p1\">*</bpt>ContactsList<ept id=\"p1\">*</ept>.",
      "pos": [
        2054,
        2142
      ]
    },
    {
      "pos": [
        2247,
        2307
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"deploy\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Deploy your code to the new Azure API app"
    },
    {
      "pos": [
        2309,
        2388
      ],
      "content": "You use the same <bpt id=\"p1\">**</bpt>Publish Web<ept id=\"p1\">**</ept> wizard to deploy your code to the new API app."
    },
    {
      "content": "Call the Azure API app",
      "pos": [
        2493,
        2515
      ]
    },
    {
      "content": "Since you enabled the Swagger UI in the previous tutorial, you can use that to verify that the API app is running in Azure.",
      "pos": [
        2518,
        2641
      ]
    },
    {
      "pos": [
        2646,
        2765
      ],
      "content": "In the <bpt id=\"p1\">[</bpt>Azure preview portal<ept id=\"p1\">](https://portal.azure.com)</ept>, go to the <bpt id=\"p2\">**</bpt>API app<ept id=\"p2\">**</ept> blade for the API app that you deployed."
    },
    {
      "content": "Click the API app's URL.",
      "pos": [
        2770,
        2794
      ]
    },
    {
      "content": "Click the URL",
      "pos": [
        2802,
        2815
      ]
    },
    {
      "content": "An \"API app successfully created\" page appears.",
      "pos": [
        2878,
        2925
      ]
    },
    {
      "content": "Add \"/swagger\" to the end of the URL in the browser address bar.",
      "pos": [
        2930,
        2994
      ]
    },
    {
      "pos": [
        2999,
        3071
      ],
      "content": "In the Swagger page that appears, click <bpt id=\"p1\">**</bpt>Contacts &gt; Get &gt; Try it Out<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Try it out",
      "pos": [
        3079,
        3089
      ]
    },
    {
      "content": "View the API definition in the portal",
      "pos": [
        3152,
        3189
      ]
    },
    {
      "pos": [
        3194,
        3318
      ],
      "content": "In the <bpt id=\"p1\">[</bpt>Azure preview portal<ept id=\"p1\">](https://portal.azure.com)</ept>, go back to the <bpt id=\"p2\">**</bpt>API app<ept id=\"p2\">**</ept> blade for the API app that you deployed."
    },
    {
      "pos": [
        3323,
        3348
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>API Definition<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        3356,
        3466
      ],
      "content": "The app's <bpt id=\"p1\">**</bpt>API Definition<ept id=\"p1\">**</ept> blade shows the list of API operations that you defined when you created the app."
    },
    {
      "content": "API Definition",
      "pos": [
        3475,
        3489
      ]
    },
    {
      "content": "Next, you'll make a change to the API definition and see the change reflected in the portal.",
      "pos": [
        3560,
        3652
      ]
    },
    {
      "pos": [
        3657,
        3762
      ],
      "content": "Go back to the project in Visual Studio and add the following code to the <bpt id=\"p1\">**</bpt>ContactsController.cs<ept id=\"p1\">**</ept> file."
    },
    {
      "pos": [
        3994,
        4087
      ],
      "content": "This code adds a <bpt id=\"p1\">**</bpt>Post<ept id=\"p1\">**</ept> method that can be used to post new <ph id=\"ph1\">`Contact`</ph> instances to the API."
    },
    {
      "content": "The code for the Contacts class now looks like the following example.",
      "pos": [
        4093,
        4162
      ]
    },
    {
      "pos": [
        4989,
        5062
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the project and select <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        5068,
        5093
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Preview<ept id=\"p1\">**</ept> tab"
    },
    {
      "pos": [
        5099,
        5168
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Start Preview<ept id=\"p1\">**</ept> to see which file(s) will be copied to Azure."
    },
    {
      "content": "Publish Web dialog",
      "pos": [
        5178,
        5196
      ]
    },
    {
      "pos": [
        5280,
        5298
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Publish<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Restart the gateway as you did the first time you published.",
      "pos": [
        5303,
        5363
      ]
    },
    {
      "content": "Once the publish process has completed, go back to the portal, and close and reopen the <bpt id=\"p1\">**</bpt>API Definition<ept id=\"p1\">**</ept> blade.",
      "pos": [
        5369,
        5482
      ]
    },
    {
      "content": "You will see the new API endpoint you just created and deployed directly into your Azure subscription.",
      "pos": [
        5483,
        5585
      ]
    },
    {
      "content": "API Definition",
      "pos": [
        5593,
        5607
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        5690,
        5700
      ]
    },
    {
      "content": "You've seen how the direct deployment capabilities in Visual Studio make it easy to test that your API works correctly.",
      "pos": [
        5702,
        5821
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">[</bpt>next tutorial<ept id=\"p1\">](../app-service-dotnet-remotely-debug-api-app.md)</ept>, you'll see how to debug your API app while it runs in Azure.",
      "pos": [
        5822,
        5955
      ]
    },
    {
      "content": "API apps are web apps with extra features for hosting APIs, which means you can use any deployment method that works with web apps.",
      "pos": [
        5957,
        6088
      ]
    },
    {
      "content": "For more information about deployment options for web apps, see <bpt id=\"p1\">[</bpt>Deploy a web app in Azure App Service<ept id=\"p1\">](../app-service-web/web-sites-deploy.md)</ept>.",
      "pos": [
        6089,
        6233
      ]
    },
    {
      "pos": [
        6235,
        6344
      ],
      "content": "For information about API Apps features, see <bpt id=\"p1\">[</bpt>What are API apps?<ept id=\"p1\">](app-service-api-apps-why-best-platform.md)</ept>."
    }
  ],
  "content": "<properties \n    pageTitle=\"Deploy an API app in Azure App Service \" \n    description=\"Learn how to deploy an API app project to your Azure subscription.\" \n    services=\"app-service\\api\" \n    documentationCenter=\".net\" \n    authors=\"bradygaster\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags \n    ms.service=\"app-service-api\" \n    ms.workload=\"web\" \n    ms.tgt_pltfrm=\"dotnet\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"10/08/2015\" \n    ms.author=\"tdykstra\"/>\n\n# Deploy an API app in Azure App Service \n\n[AZURE.INCLUDE [app-service-api-v2-note](../../includes/app-service-api-v2-note.md)]\n\n## Overview\n\nIn this tutorial, you deploy the Web API project that you created in the [previous tutorial](app-service-dotnet-create-api-app.md) to a new [API app](app-service-api-apps-why-best-platform.md). You use Visual Studio to create the API app resource in [Azure App Service](../app-service/app-service-value-prop-what-is.md) and to deploy your Web API code to the Azure API app. \n\n### Other deployment options\n\nThere are many other ways to deploy API apps. An API app is a [web app](../app-service-web/app-service-web-overview.md) with extra features for hosting web services, and all of [the deployment methods that are available for web apps](../app-service-web/web-sites-deploy.md) can also be used with API apps. The web app that hosts an API app is called the API app host in the Azure preview portal, and you can configure deployment by using the API app host portal blade. For information about the API app host blade, see [Manage an API app](app-service-api-manage-in-portal.md).\n\nThe fact that API apps are based on web apps also means that you can deploy code written for platforms other than ASP.NET to API apps. For an example that uses Git to deploy Node.js code to an API app, see [Create a Node.js API app in Azure App Service](app-service-api-nodejs-api-app.md).\n \n## <a id=\"provision\"></a>Create the API app in Azure \n\nIn this section, you use the Visual Studio **Publish Web** wizard to create an API app in Azure. Where the instructions direct you to enter a name for the API app, enter *ContactsList*.\n\n[AZURE.INCLUDE [app-service-api-pub-web-create](../../includes/app-service-api-pub-web-create.md)]\n\n## <a id=\"deploy\"></a>Deploy your code to the new Azure API app\n\nYou use the same **Publish Web** wizard to deploy your code to the new API app.\n\n[AZURE.INCLUDE [app-service-api-pub-web-deploy](../../includes/app-service-api-pub-web-deploy.md)]\n\n## Call the Azure API app \n\nSince you enabled the Swagger UI in the previous tutorial, you can use that to verify that the API app is running in Azure.\n\n1. In the [Azure preview portal](https://portal.azure.com), go to the **API app** blade for the API app that you deployed.\n\n2. Click the API app's URL.\n\n    ![Click the URL](./media/app-service-dotnet-deploy-api-app/clickurl.png)\n\n    An \"API app successfully created\" page appears.\n\n3. Add \"/swagger\" to the end of the URL in the browser address bar.\n\n4. In the Swagger page that appears, click **Contacts > Get > Try it Out**.\n\n    ![Try it out](./media/app-service-dotnet-deploy-api-app/swaggerui.png)\n\n## View the API definition in the portal\n\n1. In the [Azure preview portal](https://portal.azure.com), go back to the **API app** blade for the API app that you deployed.\n\n4. Click **API Definition**. \n \n    The app's **API Definition** blade shows the list of API operations that you defined when you created the app. \n\n    ![API Definition](./media/app-service-dotnet-deploy-api-app/29-api-definition-v3.png)\n\nNext, you'll make a change to the API definition and see the change reflected in the portal.\n\n5. Go back to the project in Visual Studio and add the following code to the **ContactsController.cs** file.   \n\n        [HttpPost]\n        public HttpResponseMessage Post([FromBody] Contact contact)\n        {\n            // todo: save the contact somewhere\n            return Request.CreateResponse(HttpStatusCode.Created);\n        }\n\n    This code adds a **Post** method that can be used to post new `Contact` instances to the API.\n\n    The code for the Contacts class now looks like the following example.\n\n        public class ContactsController : ApiController\n        {\n            [HttpGet]\n            public IEnumerable<Contact> Get()\n            {\n                return new Contact[]{\n                            new Contact { Id = 1, EmailAddress = \"barney@contoso.com\", Name = \"Barney Poland\"},\n                            new Contact { Id = 2, EmailAddress = \"lacy@contoso.com\", Name = \"Lacy Barrera\"},\n                            new Contact { Id = 3, EmailAddress = \"lora@microsoft.com\", Name = \"Lora Riggs\"}\n                        };\n            }\n        \n            [HttpPost]\n            public HttpResponseMessage Post([FromBody] Contact contact)\n            {\n                // todo: save the contact somewhere\n                return Request.CreateResponse(HttpStatusCode.Created);\n            }\n        }\n\n7. In **Solution Explorer**, right-click the project and select **Publish**. \n\n9. Click the **Preview** tab\n\n10. Click **Start Preview** to see which file(s) will be copied to Azure.  \n\n    ![Publish Web dialog](./media/app-service-dotnet-deploy-api-app/39-re-publish-preview-step-v2.png)\n\n11. Click **Publish**.\n\n6. Restart the gateway as you did the first time you published.\n\n12. Once the publish process has completed, go back to the portal, and close and reopen the **API Definition** blade. You will see the new API endpoint you just created and deployed directly into your Azure subscription.\n\n    ![API Definition](./media/app-service-dotnet-deploy-api-app/38-portal-with-post-method-v4.png)\n\n## Next steps\n\nYou've seen how the direct deployment capabilities in Visual Studio make it easy to test that your API works correctly. In the [next tutorial](../app-service-dotnet-remotely-debug-api-app.md), you'll see how to debug your API app while it runs in Azure.\n\nAPI apps are web apps with extra features for hosting APIs, which means you can use any deployment method that works with web apps. For more information about deployment options for web apps, see [Deploy a web app in Azure App Service](../app-service-web/web-sites-deploy.md).\n\nFor information about API Apps features, see [What are API apps?](app-service-api-apps-why-best-platform.md).\n\n\n"
}