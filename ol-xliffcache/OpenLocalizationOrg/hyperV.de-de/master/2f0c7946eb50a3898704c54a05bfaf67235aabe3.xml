{
  "nodes": [
    {
      "content": "Create a device identity",
      "pos": [
        3,
        27
      ]
    },
    {
      "content": "In this section, you'll create a Java console app that creates a new device identity in the identity registry in your IoT hub.",
      "pos": [
        29,
        155
      ]
    },
    {
      "content": "A device cannot connect to IoT hub unless it has an entry in the device identity registry.",
      "pos": [
        156,
        246
      ]
    },
    {
      "content": "Refer to the <bpt id=\"p1\">**</bpt>Device Identity Registry<ept id=\"p1\">**</ept> section of the <bpt id=\"p2\">[</bpt>IoT Hub Developer Guide<ept id=\"p2\">][lnk-devguide-identity]</ept> for more information.",
      "pos": [
        247,
        374
      ]
    },
    {
      "content": "When you run this console application, it generates a unique device ID and key that your device can identify itself with when it sends device-to-cloud messages to IoT Hub.",
      "pos": [
        375,
        546
      ]
    },
    {
      "content": "Create a new empty folder called iot-java-get-started.",
      "pos": [
        551,
        605
      ]
    },
    {
      "content": "In the iot-java-get-started folder, create a new Maven project called <bpt id=\"p1\">**</bpt>create-device-identity<ept id=\"p1\">**</ept> using the following command at your command-prompt.",
      "pos": [
        606,
        754
      ]
    },
    {
      "content": "Note that this is a single, long command:",
      "pos": [
        755,
        796
      ]
    },
    {
      "content": "At your command prompt, navigate to the new create-device-identity folder.",
      "pos": [
        982,
        1056
      ]
    },
    {
      "content": "Using a text editor, open the pom.xml file in the create-device-identity folder and add the following dependency to the <bpt id=\"p1\">**</bpt>dependencies<ept id=\"p1\">**</ept> node.",
      "pos": [
        1061,
        1203
      ]
    },
    {
      "content": "This enables you to use the iothub-service-sdk package in your application:",
      "pos": [
        1204,
        1279
      ]
    },
    {
      "content": "Save and close the pom.xml file.",
      "pos": [
        1493,
        1525
      ]
    },
    {
      "content": "Using a text editor, open the create-device-identity\\src\\main\\java\\com\\mycompany\\app\\App.java file.",
      "pos": [
        1530,
        1629
      ]
    },
    {
      "pos": [
        1634,
        1686
      ],
      "content": "Add the following <bpt id=\"p1\">**</bpt>import<ept id=\"p1\">**</ept> statements to the file:"
    },
    {
      "pos": [
        1971,
        2117
      ],
      "content": "Add the following class-level variables to the <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> class, replacing <bpt id=\"p2\">**</bpt>{yourhubname}<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>{yourhubkey}<ept id=\"p3\">**</ept> with the values your noted earlier:"
    },
    {
      "pos": [
        2361,
        2443
      ],
      "content": "Modify the signature of the <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> method to include the exceptions shown below:"
    },
    {
      "content": "Add the following code as the body of the <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> method.",
      "pos": [
        2564,
        2622
      ]
    },
    {
      "content": "This code creates a device called <bpt id=\"p1\">*</bpt>javadevice<ept id=\"p1\">*</ept> in your IoT Hub identity registry if doesn't already exist.",
      "pos": [
        2623,
        2729
      ]
    },
    {
      "content": "It then displays the device id and key that you will need later:",
      "pos": [
        2730,
        2794
      ]
    },
    {
      "content": "Save and close the App.java file.",
      "pos": [
        3356,
        3389
      ]
    },
    {
      "pos": [
        3395,
        3549
      ],
      "content": "To build the <bpt id=\"p1\">**</bpt>create-device-identity<ept id=\"p1\">**</ept> application using Maven, execute the following command at the command-prompt in the create-device-identity folder:"
    },
    {
      "pos": [
        3606,
        3758
      ],
      "content": "To run the <bpt id=\"p1\">**</bpt>create-device-identity<ept id=\"p1\">**</ept> application using Maven, execute the following command at the command-prompt in the create-device-identity folder:"
    },
    {
      "content": "Make a note of the <bpt id=\"p1\">**</bpt>Device id<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Device key<ept id=\"p2\">**</ept>.",
      "pos": [
        3840,
        3892
      ]
    },
    {
      "content": "You will need these later when you create an application that connects to IoT Hub as a device.",
      "pos": [
        3893,
        3987
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The IoT Hub identity registry only stores device identities to enable secure access to the hub.",
      "pos": [
        3991,
        4099
      ]
    },
    {
      "content": "It stores device IDs and keys to use as security credentials and an enabled/disabled flag that enables you to disable access for an individual device.",
      "pos": [
        4100,
        4250
      ]
    },
    {
      "content": "If you application needs to store other device-specific metadata, it should use an application-specific store.",
      "pos": [
        4251,
        4361
      ]
    },
    {
      "content": "Refer to <bpt id=\"p1\">[</bpt>IoT Hub Developer Guide<ept id=\"p1\">][lnk-devguide-identity]</ept> for more information.",
      "pos": [
        4362,
        4441
      ]
    },
    {
      "content": "Receive device-to-cloud messages",
      "pos": [
        4446,
        4478
      ]
    },
    {
      "content": "In this section, you'll create a Java console app that reads device-to-cloud messages from IoT Hub.",
      "pos": [
        4480,
        4579
      ]
    },
    {
      "content": "An IoT hub exposes an <bpt id=\"p1\">[</bpt>Event Hubs<ept id=\"p1\">][lnk-event-hubs-overview]</ept>-compatible endpoint to enable you to read device-to-cloud messages.",
      "pos": [
        4580,
        4707
      ]
    },
    {
      "content": "To keep things simple, this tutorial creates a basic reader that is not suitable for a high throughput deployment.",
      "pos": [
        4708,
        4822
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>Process device-to-cloud messages<ept id=\"p1\">][lnk-processd2c-tutorial]</ept> tutorial shows you how to process device-to-cloud messages at scale.",
      "pos": [
        4823,
        4955
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>Get Started with Event Hubs<ept id=\"p1\">][lnk-eventhubs-tutorial]</ept> tutorial provides further information on how to process messages from Event Hubs and is applicable to the IoT Hub Event Hub-compatible endpoints.",
      "pos": [
        4956,
        5159
      ]
    },
    {
      "content": "In the iot-java-get-started folder you created in the <bpt id=\"p1\">*</bpt>Create a device identity<ept id=\"p1\">*</ept> section, create a new Maven project called <bpt id=\"p2\">**</bpt>read-d2c-messages<ept id=\"p2\">**</ept> using the following command at your command-prompt.",
      "pos": [
        5164,
        5361
      ]
    },
    {
      "content": "Note that this is a single, long command:",
      "pos": [
        5362,
        5403
      ]
    },
    {
      "content": "At your command prompt, navigate to the new read-d2c-messages folder.",
      "pos": [
        5584,
        5653
      ]
    },
    {
      "content": "Using a text editor, open the pom.xml file in the read-d2c-messages folder and add the following dependency to the <bpt id=\"p1\">**</bpt>dependencies<ept id=\"p1\">**</ept> node.",
      "pos": [
        5658,
        5795
      ]
    },
    {
      "content": "This enables you to use the eventhubs-client package in your application to read from the Event Hubs-compatible endpoint:",
      "pos": [
        5796,
        5917
      ]
    },
    {
      "content": "Save and close the pom.xml file.",
      "pos": [
        6107,
        6139
      ]
    },
    {
      "content": "Using a text editor, open the read-d2c-messages\\src\\main\\java\\com\\mycompany\\app\\App.java file.",
      "pos": [
        6144,
        6238
      ]
    },
    {
      "pos": [
        6243,
        6295
      ],
      "content": "Add the following <bpt id=\"p1\">**</bpt>import<ept id=\"p1\">**</ept> statements to the file:"
    },
    {
      "pos": [
        6776,
        6837
      ],
      "content": "Add the following class-level variables to the <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> class:"
    },
    {
      "content": "Add the following nested class inside the <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> class.",
      "pos": [
        6959,
        7015
      ]
    },
    {
      "content": "The application creates two threads to run the <bpt id=\"p1\">**</bpt>MessageReceiver<ept id=\"p1\">**</ept> to read messages from the two partitions in the Event Hub:",
      "pos": [
        7016,
        7141
      ]
    },
    {
      "pos": [
        7324,
        7387
      ],
      "content": "Add the following constructor to the <bpt id=\"p1\">**</bpt>MessageReceiver<ept id=\"p1\">**</ept> class:"
    },
    {
      "content": "Add the following <bpt id=\"p1\">**</bpt>run<ept id=\"p1\">**</ept> method to the <bpt id=\"p2\">**</bpt>MessageReceiver<ept id=\"p2\">**</ept> class.",
      "pos": [
        7505,
        7571
      ]
    },
    {
      "content": "This method creates an <bpt id=\"p1\">**</bpt>EventHubReceiver<ept id=\"p1\">**</ept> instance to read from an Event Hub partition.",
      "pos": [
        7572,
        7661
      ]
    },
    {
      "content": "It loops continuously and prints the message details to the console untill <bpt id=\"p1\">**</bpt>stopThread<ept id=\"p1\">**</ept> is true.",
      "pos": [
        7662,
        7760
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This method uses a filter when it creates the receiver so that the receiver only reads messages sent to IoT Hub after the receiver starts running.",
      "pos": [
        8594,
        8753
      ]
    },
    {
      "content": "This is useful in a test environment so you can see the current set of messages, but in a production environment your code should make sure that it processes all the messages - see the <bpt id=\"p1\">[</bpt>How to process IoT Hub device-to-cloud messages<ept id=\"p1\">][lnk-processd2c-tutorial]</ept> tutorial for more information.",
      "pos": [
        8754,
        9044
      ]
    },
    {
      "pos": [
        9050,
        9132
      ],
      "content": "Modify the signature of the <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> method to include the exceptions shown below:"
    },
    {
      "content": "Add the following code to the <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> method in the <bpt id=\"p2\">**</bpt>App<ept id=\"p2\">**</ept> class.",
      "pos": [
        9219,
        9286
      ]
    },
    {
      "content": "This code creates an <bpt id=\"p1\">**</bpt>EventHubClient<ept id=\"p1\">**</ept> instance to connect to the Event Hub-compatible endpoint on your IoT hub.",
      "pos": [
        9287,
        9400
      ]
    },
    {
      "content": "It then creates two threads to read from the two partitions.",
      "pos": [
        9401,
        9461
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>{youriothubkey}<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>{youreventhubcompatiblenamespace}<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>{youreventhubcompatiblename}<ept id=\"p3\">**</ept> with the values you noted previously.",
      "pos": [
        9462,
        9604
      ]
    },
    {
      "content": "The value of the <bpt id=\"p1\">**</bpt>{youreventhubcompatiblenamespace}<ept id=\"p1\">**</ept> placeholder comes from the <bpt id=\"p2\">**</bpt>Event Hub-compatible endpoint<ept id=\"p2\">**</ept> - it takes the form <bpt id=\"p3\">**</bpt>xxxxnamespace<ept id=\"p3\">**</ept> (in other words, remove the <bpt id=\"p4\">**</bpt>sb://<ept id=\"p4\">**</ept> prefix and <bpt id=\"p5\">**</bpt>.servicebus.windows.net<ept id=\"p5\">**</ept> suffix from the Event Hub-compatible endpoint value from the portal).",
      "pos": [
        9605,
        9905
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This code assumes you created your IoT hub in the F1 (free) tier.",
      "pos": [
        10754,
        10832
      ]
    },
    {
      "content": "A free IoT hub has two partitions named \"0\" and \"1\".",
      "pos": [
        10833,
        10885
      ]
    },
    {
      "content": "If you created your IoT hub using one of the other pricing tiers, you should adjust the code to create a <bpt id=\"p1\">**</bpt>MessageReceiver<ept id=\"p1\">**</ept> for each partition.",
      "pos": [
        10886,
        11030
      ]
    },
    {
      "content": "Save and close the App.java file.",
      "pos": [
        11036,
        11069
      ]
    },
    {
      "pos": [
        11075,
        11219
      ],
      "content": "To build the <bpt id=\"p1\">**</bpt>read-d2c-messages<ept id=\"p1\">**</ept> application using Maven, execute the following command at the command-prompt in the read-d2c-messages folder:"
    }
  ],
  "content": "## Create a device identity\n\nIn this section, you'll create a Java console app that creates a new device identity in the identity registry in your IoT hub. A device cannot connect to IoT hub unless it has an entry in the device identity registry. Refer to the **Device Identity Registry** section of the [IoT Hub Developer Guide][lnk-devguide-identity] for more information. When you run this console application, it generates a unique device ID and key that your device can identify itself with when it sends device-to-cloud messages to IoT Hub.\n\n1. Create a new empty folder called iot-java-get-started. In the iot-java-get-started folder, create a new Maven project called **create-device-identity** using the following command at your command-prompt. Note that this is a single, long command:\n\n    ```\n    mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=create-device-identity -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n    ```\n\n2. At your command prompt, navigate to the new create-device-identity folder.\n\n3. Using a text editor, open the pom.xml file in the create-device-identity folder and add the following dependency to the **dependencies** node. This enables you to use the iothub-service-sdk package in your application:\n\n    ```\n    <dependency>\n      <groupId>com.microsoft.azure.iothub-java-client</groupId>\n      <artifactId>iothub-java-service-client</artifactId>\n      <version>1.0.2</version>\n    </dependency>\n    ```\n    \n4. Save and close the pom.xml file.\n\n5. Using a text editor, open the create-device-identity\\src\\main\\java\\com\\mycompany\\app\\App.java file.\n\n6. Add the following **import** statements to the file:\n\n    ```\n    import com.microsoft.azure.iot.service.exceptions.IotHubException;\n    import com.microsoft.azure.iot.service.sdk.Device;\n    import com.microsoft.azure.iot.service.sdk.RegistryManager;\n\n    import java.io.IOException;\n    import java.net.URISyntaxException;\n    ```\n\n7. Add the following class-level variables to the **App** class, replacing **{yourhubname}** and **{yourhubkey}** with the values your noted earlier:\n\n    ```\n    private static final String connectionString = \"HostName={yourhubname}.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey={yourhubkey}\";\n    private static final String deviceId = \"javadevice\";\n    \n    ```\n    \n8. Modify the signature of the **main** method to include the exceptions shown below:\n\n    ```\n    public static void main( String[] args ) throws IOException, URISyntaxException, Exception\n    ```\n    \n9. Add the following code as the body of the **main** method. This code creates a device called *javadevice* in your IoT Hub identity registry if doesn't already exist. It then displays the device id and key that you will need later:\n\n    ```\n    RegistryManager registryManager = RegistryManager.createFromConnectionString(connectionString);\n\n    Device device = Device.createFromId(deviceId, null, null);\n    try {\n      device = registryManager.addDevice(device);\n    } catch (IotHubException iote) {\n      try {\n        device = registryManager.getDevice(deviceId);\n      } catch (IotHubException iotf) {\n        iotf.printStackTrace();\n      }\n    }\n    System.out.println(\"Device id: \" + device.getDeviceId());\n    System.out.println(\"Device key: \" + device.getPrimaryKey());\n    ```\n\n10. Save and close the App.java file.\n\n11. To build the **create-device-identity** application using Maven, execute the following command at the command-prompt in the create-device-identity folder:\n\n    ```\n    mvn clean package -DskipTests\n    ```\n\n12. To run the **create-device-identity** application using Maven, execute the following command at the command-prompt in the create-device-identity folder:\n\n    ```\n    mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"\n    ```\n\n13. Make a note of the **Device id** and **Device key**. You will need these later when you create an application that connects to IoT Hub as a device.\n\n> [AZURE.NOTE] The IoT Hub identity registry only stores device identities to enable secure access to the hub. It stores device IDs and keys to use as security credentials and an enabled/disabled flag that enables you to disable access for an individual device. If you application needs to store other device-specific metadata, it should use an application-specific store. Refer to [IoT Hub Developer Guide][lnk-devguide-identity] for more information.\n\n## Receive device-to-cloud messages\n\nIn this section, you'll create a Java console app that reads device-to-cloud messages from IoT Hub. An IoT hub exposes an [Event Hubs][lnk-event-hubs-overview]-compatible endpoint to enable you to read device-to-cloud messages. To keep things simple, this tutorial creates a basic reader that is not suitable for a high throughput deployment. The [Process device-to-cloud messages][lnk-processd2c-tutorial] tutorial shows you how to process device-to-cloud messages at scale. The [Get Started with Event Hubs][lnk-eventhubs-tutorial] tutorial provides further information on how to process messages from Event Hubs and is applicable to the IoT Hub Event Hub-compatible endpoints.\n\n1. In the iot-java-get-started folder you created in the *Create a device identity* section, create a new Maven project called **read-d2c-messages** using the following command at your command-prompt. Note that this is a single, long command:\n\n    ```\n    mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=read-d2c-messages -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n    ```\n\n2. At your command prompt, navigate to the new read-d2c-messages folder.\n\n3. Using a text editor, open the pom.xml file in the read-d2c-messages folder and add the following dependency to the **dependencies** node. This enables you to use the eventhubs-client package in your application to read from the Event Hubs-compatible endpoint:\n\n    ```\n    <dependency>\n      <groupId>com.microsoft.eventhubs.client</groupId>\n      <artifactId>eventhubs-client</artifactId>\n      <version>1.0</version>\n    </dependency>\n    ```\n\n4. Save and close the pom.xml file.\n\n5. Using a text editor, open the read-d2c-messages\\src\\main\\java\\com\\mycompany\\app\\App.java file.\n\n6. Add the following **import** statements to the file:\n\n    ```\n    import java.io.IOException;\n    import com.microsoft.eventhubs.client.Constants;\n    import com.microsoft.eventhubs.client.EventHubClient;\n    import com.microsoft.eventhubs.client.EventHubEnqueueTimeFilter;\n    import com.microsoft.eventhubs.client.EventHubException;\n    import com.microsoft.eventhubs.client.EventHubMessage;\n    import com.microsoft.eventhubs.client.EventHubReceiver;\n    import com.microsoft.eventhubs.client.ConnectionStringBuilder;\n    ```\n\n7. Add the following class-level variables to the **App** class:\n\n    ```\n    private static EventHubClient client;\n    private static long now = System.currentTimeMillis();\n    ```\n\n8. Add the following nested class inside the **App** class. The application creates two threads to run the **MessageReceiver** to read messages from the two partitions in the Event Hub:\n\n    ```\n    private static class MessageReceiver implements Runnable\n    {\n        public volatile boolean stopThread = false;\n        private String partitionId;\n    }\n    ```\n\n9. Add the following constructor to the **MessageReceiver** class:\n\n    ```\n    public MessageReceiver(String partitionId) {\n        this.partitionId = partitionId;\n    }\n    ```\n\n10. Add the following **run** method to the **MessageReceiver** class. This method creates an **EventHubReceiver** instance to read from an Event Hub partition. It loops continuously and prints the message details to the console untill **stopThread** is true.\n\n    ```\n    public void run() {\n      try {\n        EventHubReceiver receiver = client.getConsumerGroup(null).createReceiver(partitionId, new EventHubEnqueueTimeFilter(now), Constants.DefaultAmqpCredits);\n        System.out.println(\"** Created receiver on partition \" + partitionId);\n        while (!stopThread) {\n          EventHubMessage message = EventHubMessage.parseAmqpMessage(receiver.receive(5000));\n          if(message != null) {\n            System.out.println(\"Received: (\" + message.getOffset() + \" | \"\n                + message.getSequence() + \" | \" + message.getEnqueuedTimestamp()\n                + \") => \" + message.getDataAsString());\n          }\n        }\n        receiver.close();\n      }\n      catch(EventHubException e) {\n        System.out.println(\"Exception: \" + e.getMessage());\n      }\n    }\n    ```\n\n    > [AZURE.NOTE] This method uses a filter when it creates the receiver so that the receiver only reads messages sent to IoT Hub after the receiver starts running. This is useful in a test environment so you can see the current set of messages, but in a production environment your code should make sure that it processes all the messages - see the [How to process IoT Hub device-to-cloud messages][lnk-processd2c-tutorial] tutorial for more information.\n\n11. Modify the signature of the **main** method to include the exceptions shown below:\n\n    ```\n    public static void main( String[] args ) throws IOException\n    ```\n\n12. Add the following code to the **main** method in the **App** class. This code creates an **EventHubClient** instance to connect to the Event Hub-compatible endpoint on your IoT hub. It then creates two threads to read from the two partitions. Replace **{youriothubkey}**, **{youreventhubcompatiblenamespace}**, and **{youreventhubcompatiblename}** with the values you noted previously. The value of the **{youreventhubcompatiblenamespace}** placeholder comes from the **Event Hub-compatible endpoint** - it takes the form **xxxxnamespace** (in other words, remove the **sb://** prefix and **.servicebus.windows.net** suffix from the Event Hub-compatible endpoint value from the portal).\n\n    ```\n    String policyName = \"iothubowner\";\n    String policyKey = \"{youriothubkey}\";\n    String namespace = \"{youreventhubcompatiblenamespace}\";\n    String name = \"{youreventhubcompatiblename}\";\n    try {\n      ConnectionStringBuilder csb = new ConnectionStringBuilder(policyName, policyKey, namespace);\n      client = EventHubClient.create(csb.getConnectionString(), name);\n    }\n    catch(EventHubException e) {\n        System.out.println(\"Exception: \" + e.getMessage());\n    }\n    \n    MessageReceiver mr0 = new MessageReceiver(\"0\");\n    MessageReceiver mr1 = new MessageReceiver(\"1\");\n    Thread t0 = new Thread(mr0);\n    Thread t1 = new Thread(mr1);\n    t0.start(); t1.start();\n\n    System.out.println(\"Press ENTER to exit.\");\n    System.in.read();\n    mr0.stopThread = true;\n    mr1.stopThread = true;\n    client.close();\n    ```\n\n    > [AZURE.NOTE] This code assumes you created your IoT hub in the F1 (free) tier. A free IoT hub has two partitions named \"0\" and \"1\". If you created your IoT hub using one of the other pricing tiers, you should adjust the code to create a **MessageReceiver** for each partition.\n\n13. Save and close the App.java file.\n\n14. To build the **read-d2c-messages** application using Maven, execute the following command at the command-prompt in the read-d2c-messages folder:\n\n    ```\n    mvn clean package -DskipTests\n    ```\n\n\n\n<!-- Links -->\n\n[lnk-eventhubs-tutorial]: ../event-hubs/event-hubs-csharp-ephcs-getstarted.md\n[lnk-devguide-identity]: iot-hub-devguide.md#identityregistry\n[lnk-event-hubs-overview]: ../event-hubs/event-hubs-overview.md\n[lnk-processd2c-tutorial]: iot-hub-csharp-csharp-process-d2c.md\n\n"
}