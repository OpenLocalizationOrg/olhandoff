{
  "nodes": [
    {
      "content": "How to Use iOS SDK for Azure Mobile Apps",
      "pos": [
        27,
        67
      ]
    },
    {
      "content": "How to Use iOS SDK for Azure Mobile Apps",
      "pos": [
        86,
        126
      ]
    },
    {
      "content": "How to Use iOS Client Library for Azure Mobile Apps",
      "pos": [
        458,
        509
      ]
    },
    {
      "content": "This guide teaches you to perform common scenarios using the latest <bpt id=\"p1\">[</bpt>Azure Mobile Apps iOS SDK<ept id=\"p1\">](https://go.microsoft.com/fwLink/?LinkID=266533&amp;clcid=0x409)</ept>.",
      "pos": [
        635,
        791
      ]
    },
    {
      "content": "If you are new to Azure Mobile Apps, first complete <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Mobile Apps Quick Start]</ept> to create a backend, create a table, and download a pre-built iOS Xcode project.",
      "pos": [
        792,
        956
      ]
    },
    {
      "content": "In this guide, we focus on the client-side iOS SDK.",
      "pos": [
        957,
        1008
      ]
    },
    {
      "content": "To learn more about the .NET server-side SDK for the backend, see <bpt id=\"p1\">[</bpt>Work with .NET Backend<ept id=\"p1\">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept>",
      "pos": [
        1009,
        1159
      ]
    },
    {
      "content": "Reference documentation",
      "pos": [
        1164,
        1187
      ]
    },
    {
      "pos": [
        1189,
        1352
      ],
      "content": "The reference documentation for the iOS client SDK is located here: <bpt id=\"p1\">[</bpt>Azure Mobile Apps iOS Client Reference<ept id=\"p1\">](http://azure.github.io/azure-mobile-services/iOS/v3/)</ept>."
    },
    {
      "pos": [
        1356,
        1399
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"Setup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Setup and Prerequisites"
    },
    {
      "content": "This guide assumes that you have created a backend with a table.",
      "pos": [
        1401,
        1465
      ]
    },
    {
      "content": "This guide assumes that the table has the same schema as the tables in those tutorials.",
      "pos": [
        1466,
        1553
      ]
    },
    {
      "content": "This guide also assumes that in your code, you reference <ph id=\"ph1\">`MicrosoftAzureMobile.framework`</ph> and import <ph id=\"ph2\">`MicrosoftAzureMobile/MicrosoftAzureMobile.h`</ph>.",
      "pos": [
        1554,
        1701
      ]
    },
    {
      "pos": [
        1705,
        1754
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create Client"
    },
    {
      "content": "To access an Azure Mobile Apps backend in your project, create an <ph id=\"ph1\">`MSClient`</ph>.",
      "pos": [
        1756,
        1833
      ]
    },
    {
      "content": "Replace <ph id=\"ph1\">`AppUrl`</ph> with the app URL.",
      "pos": [
        1834,
        1868
      ]
    },
    {
      "content": "You may leave <ph id=\"ph1\">`gatewayURLString`</ph> and <ph id=\"ph2\">`applicationKey`</ph> empty.",
      "pos": [
        1869,
        1929
      ]
    },
    {
      "content": "If you set up a gateway for authentication, populate <ph id=\"ph1\">`gatewayURLString`</ph> with the gateway URL.",
      "pos": [
        1930,
        2023
      ]
    },
    {
      "pos": [
        2025,
        2041
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        2124,
        2134
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        2202,
        2262
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"table-reference\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create Table Reference"
    },
    {
      "content": "To access or update data, create a reference to the backend table.",
      "pos": [
        2264,
        2330
      ]
    },
    {
      "content": "Replace <ph id=\"ph1\">`TodoItem`</ph> with the name of your table",
      "pos": [
        2331,
        2377
      ]
    },
    {
      "pos": [
        2379,
        2395
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        2459,
        2469
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        2528,
        2569
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"querying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Query Data"
    },
    {
      "content": "To create a database query, query the <ph id=\"ph1\">`MSTable`</ph> object.",
      "pos": [
        2571,
        2626
      ]
    },
    {
      "content": "The following query gets all the items in <ph id=\"ph1\">`TodoItem`</ph> and logs the text of each item.",
      "pos": [
        2627,
        2711
      ]
    },
    {
      "pos": [
        2713,
        2729
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        3141,
        3151
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        3399,
        3451
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"filtering\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Filter Returned Data"
    },
    {
      "content": "To filter results, there are many available options.",
      "pos": [
        3453,
        3505
      ]
    },
    {
      "content": "To filter using a predicate, use an <ph id=\"ph1\">`NSPredicate`</ph> and <ph id=\"ph2\">`readWithPredicate`</ph>.",
      "pos": [
        3507,
        3581
      ]
    },
    {
      "content": "The following filters returned data to find only incomplete Todo items.",
      "pos": [
        3582,
        3653
      ]
    },
    {
      "pos": [
        3655,
        3671
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        4189,
        4199
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        4603,
        4649
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"query-object\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Use MSQuery"
    },
    {
      "pos": [
        4651,
        4771
      ],
      "content": "To perform a complex query (including sorting and paging), create an <ph id=\"ph1\">`MSQuery`</ph> object, directly or by using a predicate:"
    },
    {
      "pos": [
        4773,
        4789
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        4930,
        4940
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "<ph id=\"ph1\">`MSQuery`</ph> lets you control several query behaviors, including the following.",
      "pos": [
        5053,
        5129
      ]
    },
    {
      "content": "Execute an <ph id=\"ph1\">`MSQuery`</ph> query by calling <ph id=\"ph2\">`readWithCompletion`</ph> on it, as shown in the next example.",
      "pos": [
        5130,
        5225
      ]
    },
    {
      "content": "Specify order of results",
      "pos": [
        5228,
        5252
      ]
    },
    {
      "content": "Limit which fields to return",
      "pos": [
        5255,
        5283
      ]
    },
    {
      "content": "Limit how many records to return",
      "pos": [
        5286,
        5318
      ]
    },
    {
      "content": "Specify total count in response",
      "pos": [
        5321,
        5352
      ]
    },
    {
      "content": "Specify custom query string parameters in request",
      "pos": [
        5355,
        5404
      ]
    },
    {
      "content": "Apply additional functions",
      "pos": [
        5407,
        5433
      ]
    },
    {
      "pos": [
        5439,
        5491
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"sorting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Sort Data with MSQuery"
    },
    {
      "content": "To sort results, let's look at an example.",
      "pos": [
        5493,
        5535
      ]
    },
    {
      "content": "To first ascendingly by field <ph id=\"ph1\">`text`</ph> and then descendingly by field <ph id=\"ph2\">`completion`</ph>, invoke <ph id=\"ph3\">`MSQuery`</ph> like so:",
      "pos": [
        5536,
        5643
      ]
    },
    {
      "pos": [
        5645,
        5661
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        6062,
        6072
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        6389,
        6506
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"selecting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph><ph id=\"ph3\">&lt;a name=\"parameters\"&gt;</ph><ph id=\"ph4\">&lt;/a&gt;</ph>How to: Limit Fields and Expand Query String Parameters with MSQuery"
    },
    {
      "content": "To limit fields to be returned in a query, specify the names of the fields in the <bpt id=\"p1\">**</bpt>selectFields<ept id=\"p1\">**</ept> property.",
      "pos": [
        6508,
        6616
      ]
    },
    {
      "content": "This returns only the text and completed fields:",
      "pos": [
        6617,
        6665
      ]
    },
    {
      "pos": [
        6667,
        6683
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        6740,
        6750
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        6803,
        6969
      ],
      "content": "To include additional query string parameters in the server request (for example, because a custom server-side script uses them), populate <ph id=\"ph1\">`query.parameters`</ph> like so:"
    },
    {
      "pos": [
        6971,
        6987
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        7077,
        7087
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        7160,
        7203
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"inserting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Insert Data"
    },
    {
      "content": "To insert a new table row, create a new <ph id=\"ph1\">`NSDictionary`</ph> and invoke <ph id=\"ph2\">`table insert`</ph>.",
      "pos": [
        7205,
        7286
      ]
    },
    {
      "content": "Mobile Services automatically generates new columns based on the <ph id=\"ph1\">`NSDictionary`</ph> if <bpt id=\"p1\">[</bpt><ept id=\"p1\">Dynamic Schema]</ept> is not disabled.",
      "pos": [
        7287,
        7403
      ]
    },
    {
      "content": "If <ph id=\"ph1\">`id`</ph> is not provided, the backend automatically generates a new unique ID.",
      "pos": [
        7405,
        7482
      ]
    },
    {
      "content": "Provide your own <ph id=\"ph1\">`id`</ph> to use email addresses, usernames, or your own custom values as ID.",
      "pos": [
        7483,
        7572
      ]
    },
    {
      "content": "Providing your own ID may ease joins and business-oriented database logic.",
      "pos": [
        7573,
        7647
      ]
    },
    {
      "pos": [
        7649,
        7817
      ],
      "content": "The <ph id=\"ph1\">`result`</ph> contains the new item that was inserted; depending on your server logic, it may have additional or modified data compared to what was passed to the server."
    },
    {
      "pos": [
        7819,
        7835
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        8151,
        8161
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        8432,
        8475
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"modifying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Modify Data"
    },
    {
      "pos": [
        8477,
        8537
      ],
      "content": "To update an existing row, modify an item and call <ph id=\"ph1\">`update`</ph>:"
    },
    {
      "pos": [
        8539,
        8555
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        8911,
        8921
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Alternatively, supply the row ID and the updated field:",
      "pos": [
        9293,
        9348
      ]
    },
    {
      "pos": [
        9350,
        9366
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        9630,
        9640
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        9871,
        9934
      ],
      "content": "At minimum, the <ph id=\"ph1\">`id`</ph> attribute must be set when making updates."
    },
    {
      "pos": [
        9938,
        9980
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"deleting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Delete Data"
    },
    {
      "pos": [
        9982,
        10031
      ],
      "content": "To delete an item, invoke <ph id=\"ph1\">`delete`</ph> with the item:"
    },
    {
      "pos": [
        10033,
        10049
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        10239,
        10249
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Alternatively, delete by providing a row ID:",
      "pos": [
        10443,
        10487
      ]
    },
    {
      "pos": [
        10489,
        10505
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        10736,
        10746
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        10952,
        11015
      ],
      "content": "At minimum, the <ph id=\"ph1\">`id`</ph> attribute must be set when making deletes."
    },
    {
      "pos": [
        11019,
        11066
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"customapi\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Call Custom API"
    },
    {
      "content": "With a custom API, you can expose any backend functionality.",
      "pos": [
        11068,
        11128
      ]
    },
    {
      "content": "It doesn't have to map to a table operation.",
      "pos": [
        11129,
        11173
      ]
    },
    {
      "content": "Not only do you gain more control over messaging, you can even read/set headers and change the response body format.",
      "pos": [
        11174,
        11290
      ]
    },
    {
      "content": "To learn how to create a custom API on the backend, read <bpt id=\"p1\">[</bpt>Custom APIs<ept id=\"p1\">](app-service-mobile-node-backend-how-to-use-server-sdk.md#work-easy-apis)</ept>",
      "pos": [
        11291,
        11434
      ]
    },
    {
      "content": "To call a custom API, call <ph id=\"ph1\">`MSClient.invokeAPI`</ph> as shown below.",
      "pos": [
        11436,
        11499
      ]
    },
    {
      "content": "The request and response content are treated as JSON.",
      "pos": [
        11500,
        11553
      ]
    },
    {
      "content": "To use other media types, <bpt id=\"p1\">[</bpt>use the other overload of <ph id=\"ph1\">`invokeAPI`</ph><ept id=\"p1\">](http://azure.github.io/azure-mobile-services/iOS/v3/Classes/MSClient.html#//api/name/invokeAPI:data:HTTPMethod:parameters:headers:completion:)</ept>",
      "pos": [
        11554,
        11762
      ]
    },
    {
      "pos": [
        11764,
        12014
      ],
      "content": "To make a <ph id=\"ph1\">`GET`</ph> request instead of a <ph id=\"ph2\">`POST`</ph> request, set parameter <ph id=\"ph3\">`HTTPMethod`</ph> to <ph id=\"ph4\">`\"GET\"`</ph> and parameter <ph id=\"ph5\">`body`</ph> to <ph id=\"ph6\">`nil`</ph> (since GET requests do not have message bodies.) If your custom API supports other HTTP verbs, change <ph id=\"ph7\">`HTTPMethod`</ph> appropriately."
    },
    {
      "pos": [
        12016,
        12032
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        12588,
        12598
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        13093,
        13185
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"templates\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Register push templates to send cross-platform notifications"
    },
    {
      "pos": [
        13187,
        13310
      ],
      "content": "To register templates, simply pass along templates with your <bpt id=\"p1\">**</bpt>client.push registerDeviceToken<ept id=\"p1\">**</ept> method in your client app."
    },
    {
      "pos": [
        13312,
        13328
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        13497,
        13507
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Your templates will be of type NSDictionary and can contain multiple templates in the following format:",
      "pos": [
        13692,
        13795
      ]
    },
    {
      "pos": [
        13797,
        13813
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        13931,
        13941
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Note that all tags will be stripped away for security.",
      "pos": [
        14031,
        14085
      ]
    },
    {
      "content": "To add tags to installations or templates within installations, see <bpt id=\"p1\">[</bpt>Work with the .NET backend server SDK for Azure Mobile Apps<ept id=\"p1\">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#tags)</ept>.",
      "pos": [
        14086,
        14281
      ]
    },
    {
      "pos": [
        14283,
        14433
      ],
      "content": "To send notifications utilizing these registered templates, work with <bpt id=\"p1\">[</bpt>Notification Hubs APIs<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn495101.aspx)</ept>"
    },
    {
      "pos": [
        14437,
        14479
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"errors\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Handle Errors"
    },
    {
      "content": "When you call a mobile service, the completion block contains an <ph id=\"ph1\">`NSError`</ph> parameter.",
      "pos": [
        14481,
        14566
      ]
    },
    {
      "content": "When an error occurs, this parameter is non-nil.",
      "pos": [
        14567,
        14615
      ]
    },
    {
      "content": "In your code, you should check this parameter and handle the error as needed, as demonstrated in the code snippets above.",
      "pos": [
        14616,
        14737
      ]
    },
    {
      "pos": [
        14739,
        15026
      ],
      "content": "The file <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`&lt;WindowsAzureMobileServices/MSError.h&gt;`</ph><ept id=\"p1\">](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h)</ept> defines the constants <ph id=\"ph2\">`MSErrorResponseKey`</ph>, <ph id=\"ph3\">`MSErrorRequestKey`</ph>, and <ph id=\"ph4\">`MSErrorServerItemKey`</ph> to get more data related to the error, obtainable as follows:"
    },
    {
      "pos": [
        15028,
        15044
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        15134,
        15144
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "In addition, the file defines constants for each error code, which may be used as shown below:",
      "pos": [
        15209,
        15303
      ]
    },
    {
      "pos": [
        15305,
        15321
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        15379,
        15389
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        15450,
        15544
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"adal\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Authenticate users with the Active Directory Authentication Library"
    },
    {
      "content": "You can use the Active Directory Authentication Library (ADAL) to sign users into your application using Azure Active Directory.",
      "pos": [
        15546,
        15674
      ]
    },
    {
      "content": "This is often preferable to using the <ph id=\"ph1\">`loginAsync()`</ph> methods, as it provides a more native UX feel and allows for additional customization.",
      "pos": [
        15675,
        15814
      ]
    },
    {
      "content": "Configure your mobile app backend for AAD sign-in by followin the <bpt id=\"p1\">[</bpt>How to configure App Service for Active Directory login<ept id=\"p1\">](app-service-mobile-how-to-configure-active-directory-authentication.md)</ept> tutorial.",
      "pos": [
        15819,
        16024
      ]
    },
    {
      "content": "Make sure to complete the optional step of registering a native client application.",
      "pos": [
        16025,
        16108
      ]
    },
    {
      "content": "For iOS, it is recommended (but not required) that the redirect URI is of the form <ph id=\"ph1\">`&lt;app-scheme&gt;://&lt;bundle-id&gt;`</ph>.",
      "pos": [
        16109,
        16221
      ]
    },
    {
      "content": "Please see the <bpt id=\"p1\">[</bpt>ADAL iOS quickstart<ept id=\"p1\">](active-directory-devquickstarts-ios.md#em1-determine-what-your-redirect-uri-will-be-for-iosem)</ept> for more details.",
      "pos": [
        16222,
        16371
      ]
    },
    {
      "content": "Install ADAL using Cocoapods.",
      "pos": [
        16376,
        16405
      ]
    },
    {
      "content": "Edit your Podfile to include the following, replacing <bpt id=\"p1\">**</bpt>YOUR-PROJECT<ept id=\"p1\">**</ept> with the name of your Xcode project:",
      "pos": [
        16406,
        16513
      ]
    },
    {
      "content": "and the Pod:",
      "pos": [
        16639,
        16651
      ]
    },
    {
      "pos": [
        16679,
        16823
      ],
      "content": "Using the Terminal, run <ph id=\"ph1\">`pod install`</ph> from the directory containing your project, and then open the generated Xcode workspace (not the project)."
    },
    {
      "content": "Add the below code to your application, according to the language you are using.",
      "pos": [
        16828,
        16908
      ]
    },
    {
      "content": "In each, make the following replacements:",
      "pos": [
        16909,
        16950
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-AUTHORITY-HERE<ept id=\"p1\">**</ept> ith the name of the tenant in which you provisioned your application.",
      "pos": [
        16954,
        17057
      ]
    },
    {
      "content": "The format should be https://login.windows.net/contoso.onmicrosoft.com.",
      "pos": [
        17058,
        17129
      ]
    },
    {
      "content": "This value can be copied out of the Domain tab in your Azure Active Directory in the [Azure classic portal].",
      "pos": [
        17130,
        17238
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-RESOURCE-ID-HERE<ept id=\"p1\">**</ept> with the client ID for your mobile app backend.",
      "pos": [
        17242,
        17325
      ]
    },
    {
      "content": "You can obtain this from the <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept> tab under <bpt id=\"p2\">**</bpt>Azure Active Directory Settings<ept id=\"p2\">**</ept> in the portal.",
      "pos": [
        17326,
        17428
      ]
    },
    {
      "pos": [
        17432,
        17531
      ],
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-CLIENT-ID-HERE<ept id=\"p1\">**</ept> with the client ID you copied from the native client application."
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-REDIRECT-URI-HERE<ept id=\"p1\">**</ept> with your site's <bpt id=\"p2\">_</bpt>/.auth/login/done<ept id=\"p2\">_</ept> endpoint, using the HTTPS scheme.",
      "pos": [
        17535,
        17642
      ]
    },
    {
      "content": "This value should be similar to <bpt id=\"p1\">_</bpt>https://contoso.azurewebsites.net/.auth/login/done<ept id=\"p1\">_</ept>.",
      "pos": [
        17643,
        17728
      ]
    },
    {
      "pos": [
        17730,
        17746
      ],
      "content": "<bpt id=\"p1\">**</bpt>Objective-C<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        19524,
        19534
      ],
      "content": "<bpt id=\"p1\">**</bpt>Swift<ept id=\"p1\">**</ept>:"
    }
  ],
  "content": "<properties\n    pageTitle=\"How to Use iOS SDK for Azure Mobile Apps\"\n    description=\"How to Use iOS SDK for Azure Mobile Apps\"\n    services=\"app-service\\mobile\"\n    documentationCenter=\"ios\"\n    authors=\"krisragh\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-mobile\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-ios\"\n    ms.devlang=\"objective-c\"\n    ms.topic=\"article\"\n    ms.date=\"03/09/2016\"\n    ms.author=\"krisragh\"/>\n\n# How to Use iOS Client Library for Azure Mobile Apps\n\n[AZURE.INCLUDE [app-service-mobile-selector-client-library](../../includes/app-service-mobile-selector-client-library.md)]\n\nThis guide teaches you to perform common scenarios using the latest [Azure Mobile Apps iOS SDK](https://go.microsoft.com/fwLink/?LinkID=266533&clcid=0x409). If you are new to Azure Mobile Apps, first complete [Azure Mobile Apps Quick Start] to create a backend, create a table, and download a pre-built iOS Xcode project. In this guide, we focus on the client-side iOS SDK. To learn more about the .NET server-side SDK for the backend, see [Work with .NET Backend](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)\n\n## Reference documentation\n\nThe reference documentation for the iOS client SDK is located here: [Azure Mobile Apps iOS Client Reference](http://azure.github.io/azure-mobile-services/iOS/v3/).\n\n##<a name=\"Setup\"></a>Setup and Prerequisites\n\nThis guide assumes that you have created a backend with a table. This guide assumes that the table has the same schema as the tables in those tutorials. This guide also assumes that in your code, you reference `MicrosoftAzureMobile.framework` and import `MicrosoftAzureMobile/MicrosoftAzureMobile.h`.\n\n##<a name=\"create-client\"></a>How to: Create Client\n\nTo access an Azure Mobile Apps backend in your project, create an `MSClient`. Replace `AppUrl` with the app URL. You may leave `gatewayURLString` and `applicationKey` empty. If you set up a gateway for authentication, populate `gatewayURLString` with the gateway URL.\n\n**Objective-C**:\n\n```\nMSClient *client = [MSClient clientWithApplicationURLString:@\"AppUrl\"];\n```\n\n**Swift**:\n\n```\nlet client = MSClient(applicationURLString: \"AppUrl\")\n```\n\n\n##<a name=\"table-reference\"></a>How to: Create Table Reference\n\nTo access or update data, create a reference to the backend table. Replace `TodoItem` with the name of your table\n\n**Objective-C**:\n\n```\nMSTable *table = [client tableWithName:@\"TodoItem\"];\n```\n\n**Swift**:\n\n```\nlet table = client.tableWithName(\"TodoItem\")\n```\n\n\n##<a name=\"querying\"></a>How to: Query Data\n\nTo create a database query, query the `MSTable` object. The following query gets all the items in `TodoItem` and logs the text of each item.\n\n**Objective-C**:\n\n```\n[table readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(error) { // error is nil if no error occured\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) { // items is NSArray of records that match query\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n**Swift**:\n\n```\ntable.readWithCompletion { (result, error) in\n    if let err = error {\n        print(\"ERROR \", err)\n    } else if let items = result?.items {\n        for item in items {\n            print(\"Todo Item: \", item[\"text\"])\n        }\n    }\n}\n```\n\n##<a name=\"filtering\"></a>How to: Filter Returned Data\n\nTo filter results, there are many available options.\n\nTo filter using a predicate, use an `NSPredicate` and `readWithPredicate`. The following filters returned data to find only incomplete Todo items.\n\n**Objective-C**:\n\n```\n// Create a predicate that finds items where complete is false\nNSPredicate * predicate = [NSPredicate predicateWithFormat:@\"complete == NO\"];\n// Query the TodoItem table\n[table readWithPredicate:predicate completion:^(MSQueryResult *result, NSError *error) {\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) {\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n**Swift**:\n\n```\n// Create a predicate that finds items where complete is false\nlet predicate =  NSPredicate(format: \"complete == NO\")\n// Query the TodoItem table\ntable.readWithPredicate(predicate) { (result, error) in\n    if let err = error {\n        print(\"ERROR \", err)\n    } else if let items = result?.items {\n        for item in items {\n            print(\"Todo Item: \", item[\"text\"])\n        }\n    }\n}\n```\n\n##<a name=\"query-object\"></a>How to: Use MSQuery\n\nTo perform a complex query (including sorting and paging), create an `MSQuery` object, directly or by using a predicate:\n\n**Objective-C**:\n\n```\nMSQuery *query = [table query];\nMSQuery *query = [table queryWithPredicate: [NSPredicate predicateWithFormat:@\"complete == NO\"]];\n```\n\n**Swift**:\n\n```\nlet query = table.query()\nlet query = table.queryWithPredicate(NSPredicate(format: \"complete == NO\"))\n```\n\n`MSQuery` lets you control several query behaviors, including the following. Execute an `MSQuery` query by calling `readWithCompletion` on it, as shown in the next example.\n* Specify order of results\n* Limit which fields to return\n* Limit how many records to return\n* Specify total count in response\n* Specify custom query string parameters in request\n* Apply additional functions\n\n\n## <a name=\"sorting\"></a>How to: Sort Data with MSQuery\n\nTo sort results, let's look at an example. To first ascendingly by field `text` and then descendingly by field `completion`, invoke `MSQuery` like so:\n\n**Objective-C**:\n\n```\n[query orderByAscending:@\"text\"];\n[query orderByDescending:@\"complete\"];\n[query readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) {\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n**Swift**:\n\n```\nquery.orderByAscending(\"text\")\nquery.orderByDescending(\"complete\")\nquery.readWithCompletion { (result, error) in\n    if let err = error {\n        print(\"ERROR \", err)\n    } else if let items = result?.items {\n        for item in items {\n            print(\"Todo Item: \", item[\"text\"])\n        }\n    }\n}\n```\n\n\n## <a name=\"selecting\"></a><a name=\"parameters\"></a>How to: Limit Fields and Expand Query String Parameters with MSQuery\n\nTo limit fields to be returned in a query, specify the names of the fields in the **selectFields** property. This returns only the text and completed fields:\n\n**Objective-C**:\n\n```\nquery.selectFields = @[@\"text\", @\"complete\"];\n```\n\n**Swift**:\n\n```\nquery.selectFields = [\"text\", \"complete\"]\n```\n\nTo include additional query string parameters in the server request (for example, because a custom server-side script uses them), populate `query.parameters` like so:\n\n**Objective-C**:\n\n```\nquery.parameters = @{\n    @\"myKey1\" : @\"value1\",\n    @\"myKey2\" : @\"value2\",\n};\n```\n\n**Swift**:\n\n```\nquery.parameters = [\"myKey1\": \"value1\", \"myKey2\": \"value2\"]\n```\n\n##<a name=\"inserting\"></a>How to: Insert Data\n\nTo insert a new table row, create a new `NSDictionary` and invoke `table insert`. Mobile Services automatically generates new columns based on the `NSDictionary` if [Dynamic Schema] is not disabled.\n\nIf `id` is not provided, the backend automatically generates a new unique ID. Provide your own `id` to use email addresses, usernames, or your own custom values as ID. Providing your own ID may ease joins and business-oriented database logic.\n\nThe `result` contains the new item that was inserted; depending on your server logic, it may have additional or modified data compared to what was passed to the server.\n\n**Objective-C**:\n\n```\nNSDictionary *newItem = @{@\"id\": @\"custom-id\", @\"text\": @\"my new item\", @\"complete\" : @NO};\n[table insert:newItem completion:^(NSDictionary *result, NSError *error) {\n    if(error) {\n        NSLog(@\"ERROR %@\", error);\n    } else {\n        NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\n    }\n}];\n```\n\n**Swift**:\n\n```\nlet newItem = [\"id\": \"custom-id\", \"text\": \"my new item\", \"complete\": false]\ntable.insert(newItem) { (result, error) in\n    if let err = error {\n        print(\"ERROR \", err)\n    } else if let item = result {\n        print(\"Todo Item: \", item[\"text\"])\n    }\n}\n```\n\n##<a name=\"modifying\"></a>How to: Modify Data\n\nTo update an existing row, modify an item and call `update`:\n\n**Objective-C**:\n\n```\nNSMutableDictionary *newItem = [oldItem mutableCopy]; // oldItem is NSDictionary\n[newItem setValue:@\"Updated text\" forKey:@\"text\"];\n[table update:newItem completion:^(NSDictionary *result, NSError *error) {\n    if(error) {\n        NSLog(@\"ERROR %@\", error);\n    } else {\n        NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\n    }\n}];\n```\n\n**Swift**:\n\n```\nif let newItem = oldItem.mutableCopy() as? NSMutableDictionary {\n    newItem[\"text\"] = \"Updated text\"\n    table2.update(newItem as [NSObject: AnyObject], completion: { (result, error) -> Void in\n        if let err = error {\n            print(\"ERROR \", err)\n        } else if let item = result {\n            print(\"Todo Item: \", item[\"text\"])\n        }\n    })\n}\n```\n\nAlternatively, supply the row ID and the updated field:\n\n**Objective-C**:\n\n```\n[table update:@{@\"id\":@\"custom-id\", @\"text\":\"my EDITED item\"} completion:^(NSDictionary *result, NSError *error) {\n    if(error) {\n        NSLog(@\"ERROR %@\", error);\n    } else {\n        NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\n    }\n}];\n```\n\n**Swift**:\n\n```\ntable.update([\"id\": \"custom-id\", \"text\": \"my EDITED item\"]) { (result, error) in\n    if let err = error {\n        print(\"ERROR \", err)\n    } else if let item = result {\n        print(\"Todo Item: \", item[\"text\"])\n    }\n}\n```\n\nAt minimum, the `id` attribute must be set when making updates.\n\n##<a name=\"deleting\"></a>How to: Delete Data\n\nTo delete an item, invoke `delete` with the item:\n\n**Objective-C**:\n\n```\n[table delete:item completion:^(id itemId, NSError *error) {\n    if(error) {\n        NSLog(@\"ERROR %@\", error);\n    } else {\n        NSLog(@\"Todo Item ID: %@\", itemId);\n    }\n}];\n```\n\n**Swift**:\n\n```\ntable.delete(newItem as [NSObject: AnyObject]) { (itemId, error) in\n    if let err = error {\n        print(\"ERROR \", err)\n    } else {\n        print(\"Todo Item ID: \", itemId)\n    }\n}\n```\n\nAlternatively, delete by providing a row ID:\n\n**Objective-C**:\n\n```\n[table deleteWithId:@\"37BBF396-11F0-4B39-85C8-B319C729AF6D\" completion:^(id itemId, NSError *error) {\n    if(error) {\n        NSLog(@\"ERROR %@\", error);\n    } else {\n        NSLog(@\"Todo Item ID: %@\", itemId);\n    }\n}];\n```\n\n**Swift**:\n\n```\ntable.deleteWithId(\"37BBF396-11F0-4B39-85C8-B319C729AF6D\") { (itemId, error) in\n    if let err = error {\n        print(\"ERROR \", err)\n    } else {\n        print(\"Todo Item ID: \", itemId)\n    }\n}\n```\n\nAt minimum, the `id` attribute must be set when making deletes.\n\n##<a name=\"customapi\"></a>How to: Call Custom API\n\nWith a custom API, you can expose any backend functionality. It doesn't have to map to a table operation. Not only do you gain more control over messaging, you can even read/set headers and change the response body format. To learn how to create a custom API on the backend, read [Custom APIs](app-service-mobile-node-backend-how-to-use-server-sdk.md#work-easy-apis)\n\nTo call a custom API, call `MSClient.invokeAPI` as shown below. The request and response content are treated as JSON. To use other media types, [use the other overload of `invokeAPI`](http://azure.github.io/azure-mobile-services/iOS/v3/Classes/MSClient.html#//api/name/invokeAPI:data:HTTPMethod:parameters:headers:completion:)\n\nTo make a `GET` request instead of a `POST` request, set parameter `HTTPMethod` to `\"GET\"` and parameter `body` to `nil` (since GET requests do not have message bodies.) If your custom API supports other HTTP verbs, change `HTTPMethod` appropriately.\n\n**Objective-C**:\n```\n    [self.client invokeAPI:@\"sendEmail\"\n                      body:@{ @\"contents\": @\"Hello world!\" }\n                HTTPMethod:@\"POST\"\n                parameters:@{ @\"to\": @\"bill@contoso.com\", @\"subject\" : @\"Hi!\" }\n                   headers:nil\n                completion: ^(NSData *result, NSHTTPURLResponse *response, NSError *error) {\n                    if(error) {\n                        NSLog(@\"ERROR %@\", error);\n                    } else {\n                        // Do something with result\n                    }\n                }];\n```\n\n**Swift**:\n\n```\nclient.invokeAPI(\"sendEmail\",\n            body: [ \"contents\": \"Hello World\" ],\n            HTTPMethod: \"POST\",\n            parameters: [ \"to\": \"bill@contoso.com\", \"subject\" : \"Hi!\" ],\n            headers: nil)\n            {\n                (result, response, error) -> Void in\n                if let err = error {\n                    print(\"ERROR \", err)\n                } else if let res = result {\n                          // Do something with result\n                }\n        }\n```\n\n##<a name=\"templates\"></a>How to: Register push templates to send cross-platform notifications\n\nTo register templates, simply pass along templates with your **client.push registerDeviceToken** method in your client app.\n\n**Objective-C**:\n\n```\n[client.push registerDeviceToken:deviceToken template:iOSTemplate completion:^(NSError *error) {\n    if(error) {\n        NSLog(@\"ERROR %@\", error);\n    }\n}];\n```\n\n**Swift**:\n\n```\n    client.push?.registerDeviceToken(NSData(), template: iOSTemplate, completion: { (error) in\n        if let err = error {\n            print(\"ERROR \", err)\n        }\n    })\n```\n\nYour templates will be of type NSDictionary and can contain multiple templates in the following format:\n\n**Objective-C**:\n\n```\nNSDictionary *iOSTemplate = @{ @\"templateName\": @{ @\"body\": @{ @\"aps\": @{ @\"alert\": @\"$(message)\" } } } };\n```\n\n**Swift**:\n\n```\nlet iOSTemplate = [\"templateName\": [\"body\": [\"aps\": [\"alert\": \"$(message)\"]]]]\n```\n\nNote that all tags will be stripped away for security. To add tags to installations or templates within installations, see [Work with the .NET backend server SDK for Azure Mobile Apps](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#tags).\n\nTo send notifications utilizing these registered templates, work with [Notification Hubs APIs](https://msdn.microsoft.com/library/azure/dn495101.aspx)\n\n##<a name=\"errors\"></a>How to: Handle Errors\n\nWhen you call a mobile service, the completion block contains an `NSError` parameter. When an error occurs, this parameter is non-nil. In your code, you should check this parameter and handle the error as needed, as demonstrated in the code snippets above.\n\nThe file [`<WindowsAzureMobileServices/MSError.h>`](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h) defines the constants `MSErrorResponseKey`, `MSErrorRequestKey`, and `MSErrorServerItemKey` to get more data related to the error, obtainable as follows:\n\n**Objective-C**:\n\n```\nNSDictionary *serverItem = [error.userInfo objectForKey:MSErrorServerItemKey];\n```\n\n**Swift**:\n\n```\nlet serverItem = error.userInfo[MSErrorServerItemKey]\n```\n\nIn addition, the file defines constants for each error code, which may be used as shown below:\n\n**Objective-C**:\n\n```\nif (error.code == MSErrorPreconditionFailed) {\n```\n\n**Swift**:\n\n```\nif (error.code == MSErrorPreconditionFailed) {\n```\n\n## <a name=\"adal\"></a>How to: Authenticate users with the Active Directory Authentication Library\n\nYou can use the Active Directory Authentication Library (ADAL) to sign users into your application using Azure Active Directory. This is often preferable to using the `loginAsync()` methods, as it provides a more native UX feel and allows for additional customization.\n\n1. Configure your mobile app backend for AAD sign-in by followin the [How to configure App Service for Active Directory login](app-service-mobile-how-to-configure-active-directory-authentication.md) tutorial. Make sure to complete the optional step of registering a native client application. For iOS, it is recommended (but not required) that the redirect URI is of the form `<app-scheme>://<bundle-id>`. Please see the [ADAL iOS quickstart](active-directory-devquickstarts-ios.md#em1-determine-what-your-redirect-uri-will-be-for-iosem) for more details.\n\n2. Install ADAL using Cocoapods. Edit your Podfile to include the following, replacing **YOUR-PROJECT** with the name of your Xcode project:\n\n        source 'https://github.com/CocoaPods/Specs.git'\n        link_with ['YOUR-PROJECT']\n        xcodeproj 'YOUR-PROJECT'\nand the Pod:\n\n        pod 'ADALiOS'\n\n3. Using the Terminal, run `pod install` from the directory containing your project, and then open the generated Xcode workspace (not the project).\n\n4. Add the below code to your application, according to the language you are using. In each, make the following replacements:\n\n* Replace **INSERT-AUTHORITY-HERE** ith the name of the tenant in which you provisioned your application. The format should be https://login.windows.net/contoso.onmicrosoft.com. This value can be copied out of the Domain tab in your Azure Active Directory in the [Azure classic portal].\n\n* Replace **INSERT-RESOURCE-ID-HERE** with the client ID for your mobile app backend. You can obtain this from the **Advanced** tab under **Azure Active Directory Settings** in the portal.\n\n* Replace **INSERT-CLIENT-ID-HERE** with the client ID you copied from the native client application.\n\n* Replace **INSERT-REDIRECT-URI-HERE** with your site's _/.auth/login/done_ endpoint, using the HTTPS scheme. This value should be similar to _https://contoso.azurewebsites.net/.auth/login/done_.\n\n**Objective-C**:\n\n    #import <ADALiOS/ADAuthenticationContext.h>\n    #import <ADALiOS/ADAuthenticationSettings.h>\n    // ...\n    - (void) authenticate:(UIViewController*) parent\n               completion:(void (^) (MSUser*, NSError*))completionBlock;\n    {\n        NSString *authority = @\"INSERT-AUTHORITY-HERE\";\n        NSString *resourceId = @\"INSERT-RESOURCE-ID-HERE\";\n        NSString *clientId = @\"INSERT-CLIENT-ID-HERE\";\n        NSURL *redirectUri = [[NSURL alloc]initWithString:@\"INSERT-REDIRECT-URI-HERE\"];\n        ADAuthenticationError *error;\n        ADAuthenticationContext authContext = [ADAuthenticationContext authenticationContextWithAuthority:authority error:&error];\n        authContext.parentController = parent;\n        [ADAuthenticationSettings sharedInstance].enableFullScreen = YES;\n        [authContext acquireTokenWithResource:resourceId\n                                     clientId:clientId\n                                  redirectUri:redirectUri\n                              completionBlock:^(ADAuthenticationResult *result) {\n                                  if (result.status != AD_SUCCEEDED)\n                                  {\n                                      completionBlock(nil, result.error);;\n                                  }\n                                  else\n                                  {\n                                      NSDictionary *payload = @{\n                                                                @\"access_token\" : result.tokenCacheStoreItem.accessToken\n                                                                };\n                                      [client loginWithProvider:@\"aad\" token:payload completion:completionBlock];\n                                  }\n                              }];\n    }\n\n\n**Swift**:\n\n    // add the following imports to your bridging header:\n    //     #import <ADALiOS/ADAuthenticationContext.h>\n    //     #import <ADALiOS/ADAuthenticationSettings.h>\n\n    func authenticate(parent: UIViewController, completion: (MSUser?, NSError?) -> Void) {\n        let authority = \"INSERT-AUTHORITY-HERE\"\n        let resourceId = \"INSERT-RESOURCE-ID-HERE\"\n        let clientId = \"INSERT-CLIENT-ID-HERE\"\n        let redirectUri = NSURL(string: \"INSERT-REDIRECT-URI-HERE\")\n        var error: AutoreleasingUnsafeMutablePointer<ADAuthenticationError?> = nil\n        let authContext = ADAuthenticationContext(authority: authority, error: error)\n        authContext.parentController = parent\n        ADAuthenticationSettings.sharedInstance().enableFullScreen = true\n        authContext.acquireTokenWithResource(resourceId, clientId: clientId, redirectUri: redirectUri) { (result) in\n                if result.status != AD_SUCCEEDED {\n                    completion(nil, result.error)\n                }\n                else {\n                    let payload: [String: String] = [\"access_token\": result.tokenCacheStoreItem.accessToken]\n                    client.loginWithProvider(\"aad\", token: payload, completion: completion)\n                }\n            }\n    }\n\n\n<!-- Anchors. -->\n\n[What is Mobile Services]: #what-is\n[Concepts]: #concepts\n[Setup and Prerequisites]: #Setup\n[How to: Create the Mobile Services client]: #create-client\n[How to: Create a table reference]: #table-reference\n[How to: Query data from a mobile service]: #querying\n[Filter returned data]: #filtering\n[Sort returned data]: #sorting\n[Return data in pages]: #paging\n[Select specific columns]: #selecting\n[How to: Bind data to the user interface]: #binding\n[How to: Insert data into a mobile service]: #inserting\n[How to: Modify data in a mobile service]: #modifying\n[How to: Authenticate users]: #authentication\n[Cache authentication tokens]: #caching-tokens\n[How to: Upload images and large files]: #blobs\n[How to: Handle errors]: #errors\n[How to: Design unit tests]: #unit-testing\n[How to: Customize the client]: #customizing\n[Customize request headers]: #custom-headers\n[Customize data type serialization]: #custom-serialization\n[Next Steps]: #next-steps\n[How to: Use MSQuery]: #query-object\n\n<!-- Images. -->\n\n<!-- URLs. -->\n[Azure Mobile Apps Quick Start]: app-service-mobile-ios-get-started.md\n\n[Add Mobile Services to Existing App]: /develop/mobile/tutorials/get-started-data\n[Get started with Mobile Services]: /develop/mobile/tutorials/get-started-ios\n[Validate and modify data in Mobile Services by using server scripts]: /develop/mobile/tutorials/validate-modify-and-augment-data-ios\n[Mobile Services SDK]: https://go.microsoft.com/fwLink/p/?LinkID=266533\n[Authentication]: /develop/mobile/tutorials/get-started-with-users-ios\n[iOS SDK]: https://developer.apple.com/xcode\n\n[Handling Expired Tokens]: http://go.microsoft.com/fwlink/p/?LinkId=301955\n[Live Connect SDK]: http://go.microsoft.com/fwlink/p/?LinkId=301960\n[Permissions]: http://msdn.microsoft.com/library/windowsazure/jj193161.aspx\n[Service-side Authorization]: mobile-services-javascript-backend-service-side-authorization.md\n[Use scripts to authorize users]: /develop/mobile/tutorials/authorize-users-in-scripts-ios\n[Dynamic Schema]: http://go.microsoft.com/fwlink/p/?LinkId=296271\n[How to: access custom parameters]: /develop/mobile/how-to-guides/work-with-server-scripts#access-headers\n[Create a table]: http://msdn.microsoft.com/library/windowsazure/jj193162.aspx\n[NSDictionary object]: http://go.microsoft.com/fwlink/p/?LinkId=301965\n[ASCII control codes C0 and C1]: http://en.wikipedia.org/wiki/Data_link_escape_character#C1_set\n[CLI to manage Mobile Services tables]: ../virtual-machines-command-line-tools.md#Mobile_Tables\n[Conflict-Handler]: mobile-services-ios-handling-conflicts-offline-data.md#add-conflict-handling\n"
}