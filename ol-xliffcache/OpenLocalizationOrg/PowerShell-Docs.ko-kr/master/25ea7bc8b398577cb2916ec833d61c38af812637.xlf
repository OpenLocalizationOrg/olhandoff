<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="1/5/2016 3:30:11 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25ea7bc8b398577cb2916ec833d61c38af812637</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Separating Configuration and Environment Data</source>
            <target state="new">Separating Configuration and Environment Data</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0</source>
            <target state="new">Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>In Windows PowerShell Desired State Configuration (DSC), it is possible to separate configuration data from the logic of your configuration.</source>
            <target state="new">In Windows PowerShell Desired State Configuration (DSC), it is possible to separate configuration data from the logic of your configuration.</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Another way to look at this is to consider the structural configuration (for example, a configuration might require that IIS be installed) as separate from the environmental configuration (that is, whether the situation is a test environment vs. a production one—the node names would be different, but the configuration applied to them would be the same).</source>
            <target state="new">Another way to look at this is to consider the structural configuration (for example, a configuration might require that IIS be installed) as separate from the environmental configuration (that is, whether the situation is a test environment vs. a production one—the node names would be different, but the configuration applied to them would be the same).</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>This has the following advantages:</source>
            <target state="new">This has the following advantages:</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>It allows you to reuse your configuration data for different resources, nodes, and configurations.</source>
            <target state="new">It allows you to reuse your configuration data for different resources, nodes, and configurations.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Configuration logic is more reusable if it does not contain hard-coded data.</source>
            <target state="new">Configuration logic is more reusable if it does not contain hard-coded data.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>This is similar to good scripting guidelines for functions.</source>
            <target state="new">This is similar to good scripting guidelines for functions.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>If some of the data needs to change, you can make the changes in one location, thereby saving time and reducing errors.</source>
            <target state="new">If some of the data needs to change, you can make the changes in one location, thereby saving time and reducing errors.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Basic concepts and examples</source>
            <target state="new">Basic concepts and examples</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>To specify the environmental part of the configuration, DSC uses the <bpt id="2">&lt;strong&gt;</bpt>ConfigurationData<ept id="2">&lt;/strong&gt;</ept> parameter, which is a hash table (or it can take a .psd1 file which contains the hash table).</source>
            <target state="new">To specify the environmental part of the configuration, DSC uses the <bpt id="2">&lt;strong&gt;</bpt>ConfigurationData<ept id="2">&lt;/strong&gt;</ept> parameter, which is a hash table (or it can take a .psd1 file which contains the hash table).</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>This hash table must have at least one key <bpt id="2">&lt;strong&gt;</bpt>AllNodes<ept id="2">&lt;/strong&gt;</ept>, which has a structured value.</source>
            <target state="new">This hash table must have at least one key <bpt id="2">&lt;strong&gt;</bpt>AllNodes<ept id="2">&lt;/strong&gt;</ept>, which has a structured value.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Note the AllNodes key, whose value is an array.</source>
            <target state="new">Note the AllNodes key, whose value is an array.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Each element of this array is also a hash table, which requires NodeName as a key:</source>
            <target state="new">Each element of this array is also a hash table, which requires NodeName as a key:</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Each hash table entry in AllNodes corresponds to configuration data to a node in the configuration.</source>
            <target state="new">Each hash table entry in AllNodes corresponds to configuration data to a node in the configuration.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>In addition to the required NodeName key, you can add other keys to the hash table as well, for example:</source>
            <target state="new">In addition to the required NodeName key, you can add other keys to the hash table as well, for example:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>DSC offers three special variables to use in the configuration script:</source>
            <target state="new">DSC offers three special variables to use in the configuration script:</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>$AllNodes<ept id="1">&lt;/strong&gt;</ept>: Refers to all of the nodes.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>$AllNodes<ept id="1">&lt;/strong&gt;</ept>: Refers to all of the nodes.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>You can use filtering with <bpt id="2">&lt;strong&gt;</bpt>.Where()<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>.ForEach()<ept id="4">&lt;/strong&gt;</ept>, so instead of hard-coding node names to select particular nodes for action, you could write something like this to select VM-1 and VM-3 in the above example:</source>
            <target state="new">You can use filtering with <bpt id="2">&lt;strong&gt;</bpt>.Where()<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>.ForEach()<ept id="4">&lt;/strong&gt;</ept>, so instead of hard-coding node names to select particular nodes for action, you could write something like this to select VM-1 and VM-3 in the above example:</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>$Node<ept id="1">&lt;/strong&gt;</ept>: Once the set of nodes is filtered, you can use $Node to refer to the particular entry.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>$Node<ept id="1">&lt;/strong&gt;</ept>: Once the set of nodes is filtered, you can use $Node to refer to the particular entry.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>To apply a property to all nodes, you can set NodeName = “*”.</source>
            <target state="new">To apply a property to all nodes, you can set NodeName = “*”.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>For example, to give every node the LogPath property, you could do this:</source>
            <target state="new">For example, to give every node the LogPath property, you could do this:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>$ConfigurationData<ept id="1">&lt;/strong&gt;</ept>: You can use this variable inside a configuration to access the configuration data hash table passed as a parameter.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>$ConfigurationData<ept id="1">&lt;/strong&gt;</ept>: You can use this variable inside a configuration to access the configuration data hash table passed as a parameter.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>You can find a full example included in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>xWebAdministration module<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">You can find a full example included in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>xWebAdministration module<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>