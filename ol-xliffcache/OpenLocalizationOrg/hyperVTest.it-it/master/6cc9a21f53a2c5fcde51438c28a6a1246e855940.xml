{
  "nodes": [
    {
      "pos": [
        28,
        104
      ],
      "content": "Add authentication to your universal Windows 8.1 app | Azure Mobile Services"
    },
    {
      "pos": [
        123,
        296
      ],
      "content": "Learn how to use Mobile Services to authenticate users of your Windows Store app through a variety of identity providers, including Google, Facebook, Twitter, and Microsoft."
    },
    {
      "pos": [
        643,
        695
      ],
      "content": "Add authentication to your universal Windows 8.1 app"
    },
    {
      "pos": [
        827,
        1173
      ],
      "content": "This topic shows you how to authenticate users in Azure Mobile Services from your universal Windows 8.1 app. In this tutorial, you add authentication to the quickstart project using an identity provider that is supported by Mobile Services. After being successfully authenticated and authorized by Mobile Services, the user ID value is displayed.",
      "nodes": [
        {
          "content": "This topic shows you how to authenticate users in Azure Mobile Services from your universal Windows 8.1 app.",
          "pos": [
            0,
            108
          ]
        },
        {
          "content": "In this tutorial, you add authentication to the quickstart project using an identity provider that is supported by Mobile Services.",
          "pos": [
            109,
            240
          ]
        },
        {
          "content": "After being successfully authenticated and authorized by Mobile Services, the user ID value is displayed.",
          "pos": [
            241,
            346
          ]
        }
      ]
    },
    {
      "pos": [
        1175,
        1310
      ],
      "content": "This tutorial is based on the Mobile Services quickstart. You must also first complete the tutorial <bpt id=\"p1\">[</bpt><ept id=\"p1\">Get started with Mobile Services]</ept>.",
      "nodes": [
        {
          "content": "This tutorial is based on the Mobile Services quickstart.",
          "pos": [
            0,
            57
          ]
        },
        {
          "content": "You must also first complete the tutorial <bpt id=\"p1\">[</bpt><ept id=\"p1\">Get started with Mobile Services]</ept>.",
          "pos": [
            58,
            173
          ]
        }
      ]
    },
    {
      "pos": [
        1314,
        1614
      ],
      "content": "<ph id=\"ph3\">[AZURE.NOTE]</ph>This tutorial shows you how to authenticate users in Windows Store and Windows Phone Store 8.1 apps. For a Windows Phone 8.0 or Windows Phone Silverlight 8.1 app, see this version of <bpt id=\"p2\">[</bpt>Get started with authentication in Mobile Services<ept id=\"p2\">](mobile-services-windows-phone-get-started-users.md)</ept>.",
      "nodes": [
        {
          "content": "<ph id=\"ph3\">[AZURE.NOTE]</ph>This tutorial shows you how to authenticate users in Windows Store and Windows Phone Store 8.1 apps.",
          "pos": [
            0,
            130
          ]
        },
        {
          "content": "For a Windows Phone 8.0 or Windows Phone Silverlight 8.1 app, see this version of <bpt id=\"p2\">[</bpt>Get started with authentication in Mobile Services<ept id=\"p2\">](mobile-services-windows-phone-get-started-users.md)</ept>.",
          "pos": [
            131,
            356
          ]
        }
      ]
    },
    {
      "pos": [
        1616,
        1618
      ],
      "content": "##"
    },
    {
      "pos": [
        1642,
        1708
      ],
      "content": "Register your app for authentication and configure Mobile Services"
    },
    {
      "pos": [
        1829,
        1831
      ],
      "content": "##"
    },
    {
      "pos": [
        1858,
        1901
      ],
      "content": "Restrict permissions to authenticated users"
    },
    {
      "pos": [
        2034,
        2508
      ],
      "content": "<ph id=\"ph6\">[AZURE.NOTE]</ph><ph id=\"ph7\"/> When you use Visual Studio tools to connect your app to a Mobile Service, the tool generate two sets of <bpt id=\"p3\">**</bpt>MobileServiceClient<ept id=\"p3\">**</ept><ph id=\"ph8\"/> definitions, one for each client platform. This is a good time to simplify the generated code by unifying the <ph id=\"ph9\">`#if...#endif`</ph><ph id=\"ph10\"/> wrapped <bpt id=\"p4\">**</bpt>MobileServiceClient<ept id=\"p4\">**</ept><ph id=\"ph11\"/> definitions into a single unwrapped definition used by both versions of the app. You won't need to do this if you downloaded the quickstart app from the <bpt id=\"p5\">[</bpt><ept id=\"p5\">Azure classic portal]</ept>.",
      "nodes": [
        {
          "content": "<ph id=\"ph6\">[AZURE.NOTE]</ph><ph id=\"ph7\"/> When you use Visual Studio tools to connect your app to a Mobile Service, the tool generate two sets of <bpt id=\"p3\">**</bpt>MobileServiceClient<ept id=\"p3\">**</ept><ph id=\"ph8\"/> definitions, one for each client platform.",
          "pos": [
            0,
            267
          ]
        },
        {
          "content": "This is a good time to simplify the generated code by unifying the <ph id=\"ph9\">`#if...#endif`</ph><ph id=\"ph10\"/> wrapped <bpt id=\"p4\">**</bpt>MobileServiceClient<ept id=\"p4\">**</ept><ph id=\"ph11\"/> definitions into a single unwrapped definition used by both versions of the app.",
          "pos": [
            268,
            548
          ]
        },
        {
          "content": "You won't need to do this if you downloaded the quickstart app from the <bpt id=\"p5\">[</bpt><ept id=\"p5\">Azure classic portal]</ept>.",
          "pos": [
            549,
            682
          ]
        }
      ]
    },
    {
      "pos": [
        2510,
        2512
      ],
      "content": "##"
    },
    {
      "pos": [
        2546,
        2575
      ],
      "content": "Add authentication to the app"
    },
    {
      "pos": [
        2714,
        3034
      ],
      "content": "Now, any user authenticated by your trusted identity providers can access the <bpt id=\"p6\">*</bpt>TodoItem<ept id=\"p6\">*</ept><ph id=\"ph13\"/> table. To better secure user-specific data, you must also implement authorization. To do this you get the user ID of a given user, which can then be used to determine what level of access that user should have for a given resource.",
      "nodes": [
        {
          "content": "Now, any user authenticated by your trusted identity providers can access the <bpt id=\"p6\">*</bpt>TodoItem<ept id=\"p6\">*</ept><ph id=\"ph13\"/> table.",
          "pos": [
            0,
            148
          ]
        },
        {
          "content": "To better secure user-specific data, you must also implement authorization.",
          "pos": [
            149,
            224
          ]
        },
        {
          "content": "To do this you get the user ID of a given user, which can then be used to determine what level of access that user should have for a given resource.",
          "pos": [
            225,
            373
          ]
        }
      ]
    },
    {
      "pos": [
        3036,
        3038
      ],
      "content": "##"
    },
    {
      "pos": [
        3059,
        3102
      ],
      "content": "Store the authorization token on the client"
    },
    {
      "pos": [
        3104,
        3554
      ],
      "content": "The previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts. Not only is this method inefficient, you can run into usage-related issues should many customers try to start your app at the same time. A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in.",
      "nodes": [
        {
          "content": "The previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts.",
          "pos": [
            0,
            166
          ]
        },
        {
          "content": "Not only is this method inefficient, you can run into usage-related issues should many customers try to start your app at the same time.",
          "pos": [
            167,
            303
          ]
        },
        {
          "content": "A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in.",
          "pos": [
            304,
            450
          ]
        }
      ]
    },
    {
      "pos": [
        3558,
        3756
      ],
      "content": "<ph id=\"ph14\">[AZURE.NOTE]</ph>You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication. This tutorial uses service-managed authentication.",
      "nodes": [
        {
          "content": "<ph id=\"ph14\">[AZURE.NOTE]</ph>You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication.",
          "pos": [
            0,
            166
          ]
        },
        {
          "content": "This tutorial uses service-managed authentication.",
          "pos": [
            167,
            217
          ]
        }
      ]
    },
    {
      "pos": [
        3946,
        3956
      ],
      "content": "Next steps"
    },
    {
      "pos": [
        3958,
        4250
      ],
      "content": "In the next tutorial, <bpt id=\"p7\">[</bpt>Service-side authorization of Mobile Services users<ept id=\"p7\">](mobile-services-javascript-backend-service-side-authorization.md)</ept>, you will take the user ID value provided by Mobile Services based on an authenticated user and use it to filter the data returned by Mobile Services."
    },
    {
      "pos": [
        4255,
        4263
      ],
      "content": "See also"
    },
    {
      "pos": [
        4267,
        4508
      ],
      "content": "<bpt id=\"p8\">[</bpt>Enhanced users feature<ept id=\"p8\">](http://go.microsoft.com/fwlink/p/?LinkId=506605)</ept><ph id=\"ph16\">&lt;br/&gt;</ph>\nYou can get additional user data maintained by the identity provider in your mobile service by by calling the <bpt id=\"p9\">**</bpt>user.getIdentities()<ept id=\"p9\">**</ept><ph id=\"ph17\"/> function in server scripts."
    },
    {
      "pos": [
        4513,
        4631
      ],
      "content": "<bpt id=\"p10\">[</bpt><ept id=\"p10\">Mobile Services .NET How-to Conceptual Reference]</ept><ph id=\"ph18\">&lt;br/&gt;</ph>Learn more about how to use Mobile Services with a .NET client."
    },
    {
      "pos": [
        4652,
        4928
      ],
      "content": "[Register your app for authentication and configure Mobile Services]: #register\n[Restrict table permissions to authenticated users]: #permissions\n[Add authentication to the app]: #add-authentication\n[Store authentication tokens on the client]: #tokens\n[Next Steps]:#next-steps"
    },
    {
      "pos": [
        4946,
        5154
      ],
      "content": "[Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582\n[My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039\n[Live SDK for Windows]: http://go.microsoft.com/fwlink/p/?LinkId=262253"
    }
  ],
  "content": "<properties \n    pageTitle=\"Add authentication to your universal Windows 8.1 app | Azure Mobile Services\"\n    description=\"Learn how to use Mobile Services to authenticate users of your Windows Store app through a variety of identity providers, including Google, Facebook, Twitter, and Microsoft.\" \n    services=\"mobile-services\" \n    documentationCenter=\"windows\" \n    authors=\"ggailey777\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.workload=\"mobile\" \n    ms.tgt_pltfrm=\"mobile-windows-store\" \n    ms.devlang=\"dotnet\" \n    ms.topic=\"article\" \n    ms.date=\"11/22/2015\" \n    ms.author=\"glenga\"/>\n\n# Add authentication to your universal Windows 8.1 app\n\n[AZURE.INCLUDE [mobile-services-selector-get-started-users](../../includes/mobile-services-selector-get-started-users.md)]      \n\nThis topic shows you how to authenticate users in Azure Mobile Services from your universal Windows 8.1 app. In this tutorial, you add authentication to the quickstart project using an identity provider that is supported by Mobile Services. After being successfully authenticated and authorized by Mobile Services, the user ID value is displayed.\n\nThis tutorial is based on the Mobile Services quickstart. You must also first complete the tutorial [Get started with Mobile Services]. \n\n>[AZURE.NOTE]This tutorial shows you how to authenticate users in Windows Store and Windows Phone Store 8.1 apps. For a Windows Phone 8.0 or Windows Phone Silverlight 8.1 app, see this version of [Get started with authentication in Mobile Services](mobile-services-windows-phone-get-started-users.md).\n\n##<a name=\"register\"></a> Register your app for authentication and configure Mobile Services\n\n[AZURE.INCLUDE [mobile-services-register-authentication](../../includes/mobile-services-register-authentication.md)] \n\n##<a name=\"permissions\"></a> Restrict permissions to authenticated users\n\n[AZURE.INCLUDE [mobile-services-restrict-permissions-windows](../../includes/mobile-services-restrict-permissions-windows.md)] \n \n>[AZURE.NOTE] When you use Visual Studio tools to connect your app to a Mobile Service, the tool generate two sets of **MobileServiceClient** definitions, one for each client platform. This is a good time to simplify the generated code by unifying the `#if...#endif` wrapped **MobileServiceClient** definitions into a single unwrapped definition used by both versions of the app. You won't need to do this if you downloaded the quickstart app from the [Azure classic portal].\n\n##<a name=\"add-authentication\"></a> Add authentication to the app\n\n[AZURE.INCLUDE [mobile-windows-universal-dotnet-authenticate-app](../../includes/mobile-windows-universal-dotnet-authenticate-app.md)] \n\nNow, any user authenticated by your trusted identity providers can access the *TodoItem* table. To better secure user-specific data, you must also implement authorization. To do this you get the user ID of a given user, which can then be used to determine what level of access that user should have for a given resource.\n\n##<a name=\"tokens\"></a>Store the authorization token on the client\n\nThe previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts. Not only is this method inefficient, you can run into usage-related issues should many customers try to start your app at the same time. A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in. \n\n>[AZURE.NOTE]You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication. This tutorial uses service-managed authentication.\n\n[AZURE.INCLUDE [mobile-windows-universal-dotnet-authenticate-app-with-token](../../includes/mobile-windows-universal-dotnet-authenticate-app-with-token.md)] \n\n## <a name=\"next-steps\"> </a>Next steps\n\nIn the next tutorial, [Service-side authorization of Mobile Services users](mobile-services-javascript-backend-service-side-authorization.md), you will take the user ID value provided by Mobile Services based on an authenticated user and use it to filter the data returned by Mobile Services. \n\n##See also\n\n+ [Enhanced users feature](http://go.microsoft.com/fwlink/p/?LinkId=506605)<br/>\nYou can get additional user data maintained by the identity provider in your mobile service by by calling the **user.getIdentities()** function in server scripts. \n\n+ [Mobile Services .NET How-to Conceptual Reference]<br/>Learn more about how to use Mobile Services with a .NET client.\n\n\n<!-- Anchors. -->\n[Register your app for authentication and configure Mobile Services]: #register\n[Restrict table permissions to authenticated users]: #permissions\n[Add authentication to the app]: #add-authentication\n[Store authentication tokens on the client]: #tokens\n[Next Steps]:#next-steps\n\n\n<!-- URLs. -->\n[Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582\n[My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039\n[Live SDK for Windows]: http://go.microsoft.com/fwlink/p/?LinkId=262253\n\n[Get started with Mobile Services]: mobile-services-javascript-backend-windows-store-dotnet-get-started.md\n[Get started with authentication]: ../mobile-services-javascript-backend-windows-store-dotnet-get-started-users.md\n[Get started with push notifications]: ../mobile-services-javascript-backend-windows-store-dotnet-get-started-push.md\n[Authorize users with scripts]: ../mobile-services-windows-store-dotnet-authorize-users-in-scripts.md\n\n[Azure classic portal]: https://manage.windowsazure.com/\n[Mobile Services .NET How-to Conceptual Reference]: mobile-services-windows-dotnet-how-to-use-client-library.md\n[Register your Windows Store app package for Microsoft authentication]: ../mobile-services-how-to-register-store-app-package-microsoft-authentication.md\n "
}