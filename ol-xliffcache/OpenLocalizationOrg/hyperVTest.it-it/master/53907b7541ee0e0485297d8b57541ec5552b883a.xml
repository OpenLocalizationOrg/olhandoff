{
  "nodes": [
    {
      "pos": [
        27,
        82
      ],
      "content": "How to Use iOS Client Library for Azure Mobile Services"
    },
    {
      "pos": [
        101,
        150
      ],
      "content": "How to Use iOS Client Library for Mobile Services"
    },
    {
      "pos": [
        476,
        531
      ],
      "content": "How to Use iOS Client Library for Azure Mobile Services"
    },
    {
      "pos": [
        636,
        642
      ],
      "content": "&amp;nbsp;"
    },
    {
      "pos": [
        763,
        1008
      ],
      "content": "This guide teaches you to perform common scenarios using the Azure Mobile Services [iOS SDK]. If you are new to Mobile Services, first complete [Mobile Services Quick Start] to configure your account, create a table, and create a mobile service.",
      "nodes": [
        {
          "content": "This guide teaches you to perform common scenarios using the Azure Mobile Services [iOS SDK].",
          "pos": [
            0,
            93
          ]
        },
        {
          "content": "If you are new to Mobile Services, first complete [Mobile Services Quick Start] to configure your account, create a table, and create a mobile service.",
          "pos": [
            94,
            245
          ]
        }
      ]
    },
    {
      "pos": [
        1012,
        1226
      ],
      "content": "<ph id=\"ph4\">[AZURE.NOTE]</ph><ph id=\"ph5\"/> This guide uses the latest <bpt id=\"p1\">[</bpt>iOS Mobile Services SDK<ept id=\"p1\">](https://go.microsoft.com/fwLink/?LinkID=266533&amp;clcid=0x409)</ept>. If your project uses an older version of the SDK, first upgrade the framework in Xcode.",
      "nodes": [
        {
          "content": "<ph id=\"ph4\">[AZURE.NOTE]</ph><ph id=\"ph5\"/> This guide uses the latest <bpt id=\"p1\">[</bpt>iOS Mobile Services SDK<ept id=\"p1\">](https://go.microsoft.com/fwLink/?LinkID=266533&amp;clcid=0x409)</ept>.",
          "pos": [
            0,
            200
          ]
        },
        {
          "content": "If your project uses an older version of the SDK, first upgrade the framework in Xcode.",
          "pos": [
            201,
            288
          ]
        }
      ]
    },
    {
      "pos": [
        1316,
        1318
      ],
      "content": "##"
    },
    {
      "pos": [
        1338,
        1361
      ],
      "content": "Setup and Prerequisites"
    },
    {
      "pos": [
        1363,
        1798
      ],
      "content": "This guide assumes that you have created a mobile service with a table. For more information see <bpt id=\"p2\">[</bpt><ept id=\"p2\">Create a table]</ept>, or reuse the <ph id=\"ph7\">`TodoItem`</ph><ph id=\"ph8\"/> table created in [Mobile Services Quick Start]. This guide assumes that the table has the same schema as the tables in those tutorials. This guide also assumes that your Xcode references <ph id=\"ph9\">`WindowsAzureMobileServices.framework`</ph><ph id=\"ph10\"/> and imports <ph id=\"ph11\">`WindowsAzureMobileServices/WindowsAzureMobileServices.h`</ph>.",
      "nodes": [
        {
          "content": "This guide assumes that you have created a mobile service with a table.",
          "pos": [
            0,
            71
          ]
        },
        {
          "content": "For more information see <bpt id=\"p2\">[</bpt><ept id=\"p2\">Create a table]</ept>, or reuse the <ph id=\"ph7\">`TodoItem`</ph><ph id=\"ph8\"/> table created in [Mobile Services Quick Start].",
          "pos": [
            72,
            256
          ]
        },
        {
          "content": "This guide assumes that the table has the same schema as the tables in those tutorials.",
          "pos": [
            257,
            344
          ]
        },
        {
          "content": "This guide also assumes that your Xcode references <ph id=\"ph9\">`WindowsAzureMobileServices.framework`</ph><ph id=\"ph10\"/> and imports <ph id=\"ph11\">`WindowsAzureMobileServices/WindowsAzureMobileServices.h`</ph>.",
          "pos": [
            345,
            557
          ]
        }
      ]
    },
    {
      "pos": [
        1800,
        1802
      ],
      "content": "##"
    },
    {
      "pos": [
        1830,
        1867
      ],
      "content": "How to: Create Mobile Services Client"
    },
    {
      "pos": [
        1869,
        2069
      ],
      "content": "To access an Azure mobile service in your project, create an <ph id=\"ph12\">`MSClient`</ph><ph id=\"ph13\"/> client object. Replace <ph id=\"ph14\">`AppUrl`</ph><ph id=\"ph15\"/> and <ph id=\"ph16\">`AppKey`</ph><ph id=\"ph17\"/> with the mobile service URL and the application key Dashboard values, respectively.",
      "nodes": [
        {
          "content": "To access an Azure mobile service in your project, create an <ph id=\"ph12\">`MSClient`</ph><ph id=\"ph13\"/> client object.",
          "pos": [
            0,
            120
          ]
        },
        {
          "content": "Replace <ph id=\"ph14\">`AppUrl`</ph><ph id=\"ph15\"/> and <ph id=\"ph16\">`AppKey`</ph><ph id=\"ph17\"/> with the mobile service URL and the application key Dashboard values, respectively.",
          "pos": [
            121,
            302
          ]
        }
      ]
    },
    {
      "pos": [
        2177,
        2179
      ],
      "content": "##"
    },
    {
      "pos": [
        2209,
        2239
      ],
      "content": "How to: Create Table Reference"
    },
    {
      "pos": [
        2241,
        2377
      ],
      "content": "To access or update data for your Azure mobile service, create a reference to the table. Replace <ph id=\"ph18\">`TodoItem`</ph><ph id=\"ph19\"/> with the name of your table.",
      "nodes": [
        {
          "content": "To access or update data for your Azure mobile service, create a reference to the table.",
          "pos": [
            0,
            88
          ]
        },
        {
          "content": "Replace <ph id=\"ph18\">`TodoItem`</ph><ph id=\"ph19\"/> with the name of your table.",
          "pos": [
            89,
            170
          ]
        }
      ]
    },
    {
      "pos": [
        2445,
        2447
      ],
      "content": "##"
    },
    {
      "pos": [
        2470,
        2488
      ],
      "content": "How to: Query Data"
    },
    {
      "pos": [
        2490,
        2630
      ],
      "content": "To create a database query, query the <ph id=\"ph20\">`MSTable`</ph><ph id=\"ph21\"/> object. The following query gets all the items in <ph id=\"ph22\">`TodoItem`</ph><ph id=\"ph23\"/> and logs the text of each item.",
      "nodes": [
        {
          "content": "To create a database query, query the <ph id=\"ph20\">`MSTable`</ph><ph id=\"ph21\"/> object.",
          "pos": [
            0,
            89
          ]
        },
        {
          "content": "The following query gets all the items in <ph id=\"ph22\">`TodoItem`</ph><ph id=\"ph23\"/> and logs the text of each item.",
          "pos": [
            90,
            208
          ]
        }
      ]
    },
    {
      "pos": [
        3042,
        3044
      ],
      "content": "##"
    },
    {
      "pos": [
        3068,
        3096
      ],
      "content": "How to: Filter Returned Data"
    },
    {
      "pos": [
        3098,
        3150
      ],
      "content": "To filter results, there are many available options."
    },
    {
      "pos": [
        3152,
        3298
      ],
      "content": "To filter using a predicate, use an <ph id=\"ph24\">`NSPredicate`</ph><ph id=\"ph25\"/> and <ph id=\"ph26\">`readWithPredicate`</ph>. The following filters returned data to find only incomplete Todo items.",
      "nodes": [
        {
          "content": "To filter using a predicate, use an <ph id=\"ph24\">`NSPredicate`</ph><ph id=\"ph25\"/> and <ph id=\"ph26\">`readWithPredicate`</ph>.",
          "pos": [
            0,
            127
          ]
        },
        {
          "content": "The following filters returned data to find only incomplete Todo items.",
          "pos": [
            128,
            199
          ]
        }
      ]
    },
    {
      "pos": [
        3880,
        3882
      ],
      "content": "##"
    },
    {
      "pos": [
        3909,
        3928
      ],
      "content": "How to: Use MSQuery"
    },
    {
      "pos": [
        3930,
        4050
      ],
      "content": "To perform a complex query (including sorting and paging), create an <ph id=\"ph27\">`MSQuery`</ph><ph id=\"ph28\"/> object, directly or by using a predicate:"
    },
    {
      "pos": [
        4199,
        4371
      ],
      "content": "<ph id=\"ph29\">`MSQuery`</ph><ph id=\"ph30\"/> lets you control several query behaviors, including the following. Execute an <ph id=\"ph31\">`MSQuery`</ph><ph id=\"ph32\"/> query by calling <ph id=\"ph33\">`readWithCompletion`</ph><ph id=\"ph34\"/> on it, as shown in the next example.",
      "nodes": [
        {
          "content": "<ph id=\"ph29\">`MSQuery`</ph><ph id=\"ph30\"/> lets you control several query behaviors, including the following.",
          "pos": [
            0,
            110
          ]
        },
        {
          "content": "Execute an <ph id=\"ph31\">`MSQuery`</ph><ph id=\"ph32\"/> query by calling <ph id=\"ph33\">`readWithCompletion`</ph><ph id=\"ph34\"/> on it, as shown in the next example.",
          "pos": [
            111,
            274
          ]
        }
      ]
    },
    {
      "pos": [
        4374,
        4398
      ],
      "content": "Specify order of results"
    },
    {
      "pos": [
        4401,
        4429
      ],
      "content": "Limit which fields to return"
    },
    {
      "pos": [
        4432,
        4464
      ],
      "content": "Limit how many records to return"
    },
    {
      "pos": [
        4467,
        4498
      ],
      "content": "Specify total count in response"
    },
    {
      "pos": [
        4501,
        4550
      ],
      "content": "Specify custom query string parameters in request"
    },
    {
      "pos": [
        4553,
        4579
      ],
      "content": "Apply additional functions"
    },
    {
      "pos": [
        4607,
        4637
      ],
      "content": "How to: Sort Data with MSQuery"
    },
    {
      "pos": [
        4639,
        4789
      ],
      "content": "To sort results, let's look at an example. To first ascendingly by field <ph id=\"ph35\">`text`</ph><ph id=\"ph36\"/> and then descendingly by field <ph id=\"ph37\">`completion`</ph>, invoke <ph id=\"ph38\">`MSQuery`</ph><ph id=\"ph39\"/> like so:",
      "nodes": [
        {
          "content": "To sort results, let's look at an example.",
          "pos": [
            0,
            42
          ]
        },
        {
          "content": "To first ascendingly by field <ph id=\"ph35\">`text`</ph><ph id=\"ph36\"/> and then descendingly by field <ph id=\"ph37\">`completion`</ph>, invoke <ph id=\"ph38\">`MSQuery`</ph><ph id=\"ph39\"/> like so:",
          "pos": [
            43,
            237
          ]
        }
      ]
    },
    {
      "pos": [
        5214,
        5255
      ],
      "content": "How to: Return Data in Pages with MSQuery"
    },
    {
      "pos": [
        5257,
        5522
      ],
      "content": "Mobile Services limits the amount of records that are returned in a single response. To control the number of records displayed to your users you must implement a paging system.  Paging is performed by using the following three properties of the <bpt id=\"p3\">**</bpt>MSQuery<ept id=\"p3\">**</ept><ph id=\"ph40\"/> object:",
      "nodes": [
        {
          "content": "Mobile Services limits the amount of records that are returned in a single response.",
          "pos": [
            0,
            84
          ]
        },
        {
          "content": "To control the number of records displayed to your users you must implement a paging system.",
          "pos": [
            85,
            177
          ]
        },
        {
          "content": "Paging is performed by using the following three properties of the <bpt id=\"p3\">**</bpt>MSQuery<ept id=\"p3\">**</ept><ph id=\"ph40\"/> object:",
          "pos": [
            179,
            318
          ]
        }
      ]
    },
    {
      "pos": [
        5617,
        5771
      ],
      "content": "In the following example, a simple function requests 5 records from the server and then appends them to the local collection of previously loaded records:"
    },
    {
      "pos": [
        6618,
        6686
      ],
      "content": "How to: Limit Fields and Expand Query String Parameters with MSQuery"
    },
    {
      "pos": [
        6688,
        6845
      ],
      "content": "To limit fields to be returned in a query, specify the names of the fields in the <bpt id=\"p4\">**</bpt>selectFields<ept id=\"p4\">**</ept><ph id=\"ph41\"/> property. This returns only the text and completed fields:",
      "nodes": [
        {
          "content": "To limit fields to be returned in a query, specify the names of the fields in the <bpt id=\"p4\">**</bpt>selectFields<ept id=\"p4\">**</ept><ph id=\"ph41\"/> property.",
          "pos": [
            0,
            161
          ]
        },
        {
          "content": "This returns only the text and completed fields:",
          "pos": [
            162,
            210
          ]
        }
      ]
    },
    {
      "pos": [
        6907,
        7073
      ],
      "content": "To include additional query string parameters in the server request (for example, because a custom server-side script uses them), populate <ph id=\"ph42\">`query.parameters`</ph><ph id=\"ph43\"/> like so:"
    },
    {
      "pos": [
        7179,
        7181
      ],
      "content": "##"
    },
    {
      "pos": [
        7205,
        7224
      ],
      "content": "How to: Insert Data"
    },
    {
      "pos": [
        7226,
        7424
      ],
      "content": "To insert a new table row, create a new <ph id=\"ph44\">`NSDictionary`</ph><ph id=\"ph45\"/> and invoke <ph id=\"ph46\">`table insert`</ph>. Mobile Services automatically generates new columns based on the <ph id=\"ph47\">`NSDictionary`</ph><ph id=\"ph48\"/> if <bpt id=\"p5\">[</bpt><ept id=\"p5\">Dynamic Schema]</ept> is not disabled.",
      "nodes": [
        {
          "content": "To insert a new table row, create a new <ph id=\"ph44\">`NSDictionary`</ph><ph id=\"ph45\"/> and invoke <ph id=\"ph46\">`table insert`</ph>.",
          "pos": [
            0,
            134
          ]
        },
        {
          "content": "Mobile Services automatically generates new columns based on the <ph id=\"ph47\">`NSDictionary`</ph><ph id=\"ph48\"/> if <bpt id=\"p5\">[</bpt><ept id=\"p5\">Dynamic Schema]</ept> is not disabled.",
          "pos": [
            135,
            323
          ]
        }
      ]
    },
    {
      "pos": [
        7426,
        7668
      ],
      "content": "If <ph id=\"ph49\">`id`</ph><ph id=\"ph50\"/> is not provided, the backend automatically generates a new unique ID. Provide your own <ph id=\"ph51\">`id`</ph><ph id=\"ph52\"/> to use email addresses, usernames, or your own custom values as ID. Providing your own ID may ease joins and business-oriented database logic.",
      "nodes": [
        {
          "content": "If <ph id=\"ph49\">`id`</ph><ph id=\"ph50\"/> is not provided, the backend automatically generates a new unique ID.",
          "pos": [
            0,
            111
          ]
        },
        {
          "content": "Provide your own <ph id=\"ph51\">`id`</ph><ph id=\"ph52\"/> to use email addresses, usernames, or your own custom values as ID.",
          "pos": [
            112,
            235
          ]
        },
        {
          "content": "Providing your own ID may ease joins and business-oriented database logic.",
          "pos": [
            236,
            310
          ]
        }
      ]
    },
    {
      "pos": [
        8238,
        8240
      ],
      "content": "##"
    },
    {
      "pos": [
        8264,
        8283
      ],
      "content": "How to: Modify Data"
    },
    {
      "pos": [
        8285,
        8345
      ],
      "content": "To update an existing row, modify an item and call <ph id=\"ph53\">`update`</ph>:"
    },
    {
      "pos": [
        8648,
        8703
      ],
      "content": "Alternatively, supply the row ID and the updated field:"
    },
    {
      "pos": [
        8925,
        8988
      ],
      "content": "At minimum, the <ph id=\"ph54\">`id`</ph><ph id=\"ph55\"/> attribute must be set when making updates."
    },
    {
      "pos": [
        8990,
        8992
      ],
      "content": "##"
    },
    {
      "pos": [
        9015,
        9034
      ],
      "content": "How to: Delete Data"
    },
    {
      "pos": [
        9036,
        9085
      ],
      "content": "To delete an item, invoke <ph id=\"ph56\">`delete`</ph><ph id=\"ph57\"/> with the item:"
    },
    {
      "pos": [
        9236,
        9280
      ],
      "content": "Alternatively, delete by providing a row ID:"
    },
    {
      "pos": [
        9472,
        9535
      ],
      "content": "At minimum, the <ph id=\"ph58\">`id`</ph><ph id=\"ph59\"/> attribute must be set when making deletes."
    },
    {
      "pos": [
        9537,
        9539
      ],
      "content": "##"
    },
    {
      "pos": [
        9565,
        9590
      ],
      "content": "How to: Call a custom API"
    },
    {
      "pos": [
        9592,
        10077
      ],
      "content": "A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation. By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON. For an example of how to create a custom API in your mobile service, see <bpt id=\"p6\">[</bpt>How to: define a custom API endpoint<ept id=\"p6\">](mobile-services-dotnet-backend-define-custom-api.md)</ept>.",
      "nodes": [
        {
          "content": "A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.",
          "pos": [
            0,
            151
          ]
        },
        {
          "content": "By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.",
          "pos": [
            152,
            319
          ]
        },
        {
          "content": "For an example of how to create a custom API in your mobile service, see <bpt id=\"p6\">[</bpt>How to: define a custom API endpoint<ept id=\"p6\">](mobile-services-dotnet-backend-define-custom-api.md)</ept>.",
          "pos": [
            320,
            523
          ]
        }
      ]
    },
    {
      "pos": [
        10190,
        10192
      ],
      "content": "##"
    },
    {
      "pos": [
        10221,
        10247
      ],
      "content": "How to: Authenticate Users"
    },
    {
      "pos": [
        10249,
        10351
      ],
      "content": "Azure Mobile Services supports various identity providers. For a basic tutorial, see [Authentication].",
      "nodes": [
        {
          "content": "Azure Mobile Services supports various identity providers.",
          "pos": [
            0,
            58
          ]
        },
        {
          "content": "For a basic tutorial, see [Authentication].",
          "pos": [
            59,
            102
          ]
        }
      ]
    },
    {
      "pos": [
        10353,
        10413
      ],
      "content": "Azure Mobile Services supports two authentication workflows:"
    },
    {
      "pos": [
        10417,
        10600
      ],
      "content": "<bpt id=\"p7\">**</bpt>Server-managed Login<ept id=\"p7\">**</ept>: Azure Mobile Services manages the login process on behalf of your app. It displays a provider-specific login page and authenticates with the chosen provider.",
      "nodes": [
        {
          "content": "<bpt id=\"p7\">**</bpt>Server-managed Login<ept id=\"p7\">**</ept>: Azure Mobile Services manages the login process on behalf of your app.",
          "pos": [
            0,
            134
          ]
        },
        {
          "content": "It displays a provider-specific login page and authenticates with the chosen provider.",
          "pos": [
            135,
            221
          ]
        }
      ]
    },
    {
      "pos": [
        10604,
        10752
      ],
      "content": "<bpt id=\"p8\">**</bpt>Client-managed Login<ept id=\"p8\">**</ept>: The <bpt id=\"p9\">_</bpt>app<ept id=\"p9\">_</ept><ph id=\"ph61\"/> requests a token from the identity provider and presents this token to Azure Mobile Services for authentication."
    },
    {
      "pos": [
        10754,
        10998
      ],
      "content": "When authentication succeeds, you get back a user object with a user ID value and the auth token. To use this user ID to authorize users, see <bpt id=\"p10\">[</bpt><ept id=\"p10\">Service-side Authorization]</ept>. To restrict table access to only authenticated users, see <bpt id=\"p11\">[</bpt><ept id=\"p11\">Permissions]</ept>.",
      "nodes": [
        {
          "content": "When authentication succeeds, you get back a user object with a user ID value and the auth token.",
          "pos": [
            0,
            97
          ]
        },
        {
          "content": "To use this user ID to authorize users, see <bpt id=\"p10\">[</bpt><ept id=\"p10\">Service-side Authorization]</ept>.",
          "pos": [
            98,
            211
          ]
        },
        {
          "content": "To restrict table access to only authenticated users, see <bpt id=\"p11\">[</bpt><ept id=\"p11\">Permissions]</ept>.",
          "pos": [
            212,
            324
          ]
        }
      ]
    },
    {
      "pos": [
        11004,
        11024
      ],
      "content": "Server-managed Login"
    },
    {
      "pos": [
        11026,
        11253
      ],
      "content": "Here is how you can add server-managed login to the [Mobile Services Quick Start] project; you may use similar code for your other projects. For more information and to see an end-to-end example in action, see [Authentication].",
      "nodes": [
        {
          "content": "Here is how you can add server-managed login to the [Mobile Services Quick Start] project; you may use similar code for your other projects.",
          "pos": [
            0,
            140
          ]
        },
        {
          "content": "For more information and to see an end-to-end example in action, see [Authentication].",
          "pos": [
            141,
            227
          ]
        }
      ]
    },
    {
      "pos": [
        11371,
        11408
      ],
      "content": "Client-managed Login (Single Sign-on)"
    },
    {
      "pos": [
        11410,
        11691
      ],
      "content": "You may do the login process outside the Mobile Services client, either to enable single sign-on or if your app contacts the identity provider directly. In such cases, you can log in to Mobile Services by providing a token obtained independently from a supported identity provider.",
      "nodes": [
        {
          "content": "You may do the login process outside the Mobile Services client, either to enable single sign-on or if your app contacts the identity provider directly.",
          "pos": [
            0,
            152
          ]
        },
        {
          "content": "In such cases, you can log in to Mobile Services by providing a token obtained independently from a supported identity provider.",
          "pos": [
            153,
            281
          ]
        }
      ]
    },
    {
      "pos": [
        11693,
        11903
      ],
      "content": "The following example uses the <bpt id=\"p12\">[</bpt><ept id=\"p12\">Live Connect SDK]</ept> to enable single sign-on for iOS apps. It assumes that you have a <bpt id=\"p13\">**</bpt>LiveConnectClient<ept id=\"p13\">**</ept><ph id=\"ph63\"/> instance named <ph id=\"ph64\">`liveClient`</ph><ph id=\"ph65\"/> in the controller and the user is logged in.",
      "nodes": [
        {
          "content": "The following example uses the <bpt id=\"p12\">[</bpt><ept id=\"p12\">Live Connect SDK]</ept> to enable single sign-on for iOS apps.",
          "pos": [
            0,
            128
          ]
        },
        {
          "content": "It assumes that you have a <bpt id=\"p13\">**</bpt>LiveConnectClient<ept id=\"p13\">**</ept><ph id=\"ph63\"/> instance named <ph id=\"ph64\">`liveClient`</ph><ph id=\"ph65\"/> in the controller and the user is logged in.",
          "pos": [
            129,
            339
          ]
        }
      ]
    },
    {
      "pos": [
        12156,
        12158
      ],
      "content": "##"
    },
    {
      "pos": [
        12187,
        12222
      ],
      "content": "How to: Cache Authentication Tokens"
    },
    {
      "pos": [
        12224,
        12481
      ],
      "content": "Let's see how you may cache tokens in the [Mobile Services Quick Start] project; you may apply similar steps to any project. <ph id=\"ph66\">[AZURE.INCLUDE [mobile-services-ios-authenticate-app-with-token](../../includes/mobile-services-ios-authenticate-app-with-token.md)]</ph>",
      "nodes": [
        {
          "content": "Let's see how you may cache tokens in the [Mobile Services Quick Start] project; you may apply similar steps to any project.",
          "pos": [
            0,
            124
          ]
        },
        {
          "content": "<ph id=\"ph66\">[AZURE.INCLUDE [mobile-services-ios-authenticate-app-with-token](../../includes/mobile-services-ios-authenticate-app-with-token.md)]</ph>",
          "pos": [
            125,
            276
          ]
        }
      ]
    },
    {
      "pos": [
        12483,
        12485
      ],
      "content": "##"
    },
    {
      "pos": [
        12506,
        12527
      ],
      "content": "How to: Handle Errors"
    },
    {
      "pos": [
        12529,
        12748
      ],
      "content": "When you call a mobile service, the completion block contains an <ph id=\"ph67\">`NSError *error`</ph><ph id=\"ph68\"/> parameter. When an error occurs, this parameter is non-nil. In your code, you should check this parameter and handle the error as needed.",
      "nodes": [
        {
          "content": "When you call a mobile service, the completion block contains an <ph id=\"ph67\">`NSError *error`</ph><ph id=\"ph68\"/> parameter.",
          "pos": [
            0,
            126
          ]
        },
        {
          "content": "When an error occurs, this parameter is non-nil.",
          "pos": [
            127,
            175
          ]
        },
        {
          "content": "In your code, you should check this parameter and handle the error as needed.",
          "pos": [
            176,
            253
          ]
        }
      ]
    },
    {
      "pos": [
        12750,
        13217
      ],
      "content": "The file <bpt id=\"p14\">[</bpt><ph id=\"ph69\">`&lt;WindowsAzureMobileServices/MSError.h&gt;`</ph><ept id=\"p14\">](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h)</ept><ph id=\"ph70\"/> defines the constants <ph id=\"ph71\">`MSErrorResponseKey`</ph>, <ph id=\"ph72\">`MSErrorRequestKey`</ph>, and <ph id=\"ph73\">`MSErrorServerItemKey`</ph><ph id=\"ph74\"/> to get more data related to the error. In addition, the file defines constants for each error code. For an example on how to use these constants, see <bpt id=\"p15\">[</bpt><ept id=\"p15\">Conflict-Handler]</ept> for its usage of <ph id=\"ph75\">`MSErrorServerItemKey`</ph><ph id=\"ph76\"/> and <ph id=\"ph77\">`MSErrorPreconditionFailed`</ph>.",
      "nodes": [
        {
          "content": "The file <bpt id=\"p14\">[</bpt><ph id=\"ph69\">`&lt;WindowsAzureMobileServices/MSError.h&gt;`</ph><ept id=\"p14\">](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h)</ept><ph id=\"ph70\"/> defines the constants <ph id=\"ph71\">`MSErrorResponseKey`</ph>, <ph id=\"ph72\">`MSErrorRequestKey`</ph>, and <ph id=\"ph73\">`MSErrorServerItemKey`</ph><ph id=\"ph74\"/> to get more data related to the error.",
          "pos": [
            0,
            416
          ]
        },
        {
          "content": "In addition, the file defines constants for each error code.",
          "pos": [
            417,
            477
          ]
        },
        {
          "content": "For an example on how to use these constants, see <bpt id=\"p15\">[</bpt><ept id=\"p15\">Conflict-Handler]</ept> for its usage of <ph id=\"ph75\">`MSErrorServerItemKey`</ph><ph id=\"ph76\"/> and <ph id=\"ph77\">`MSErrorPreconditionFailed`</ph>.",
          "pos": [
            478,
            712
          ]
        }
      ]
    },
    {
      "pos": [
        14258,
        14582
      ],
      "content": "[Mobile Services Quick Start]: mobile-services-ios-get-started.md\n[Get started with Mobile Services]: mobile-services-ios-get-started.md\n[Mobile Services SDK]: https://go.microsoft.com/fwLink/p/?LinkID=266533\n[Authentication]: /develop/mobile/tutorials/get-started-with-users-ios\n[iOS SDK]: https://developer.apple.com/xcode"
    }
  ],
  "content": "<properties\n    pageTitle=\"How to Use iOS Client Library for Azure Mobile Services\"\n    description=\"How to Use iOS Client Library for Mobile Services\"\n    services=\"mobile-services\"\n    documentationCenter=\"ios\"\n    authors=\"krisragh\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-ios\"\n    ms.devlang=\"objective-c\"\n    ms.topic=\"article\"\n    ms.date=\"01/12/2016\"\n    ms.author=\"krisragh\"/>\n\n# How to Use iOS Client Library for Azure Mobile Services\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n\n\n[AZURE.INCLUDE [mobile-services-selector-client-library](../../includes/mobile-services-selector-client-library.md)]\n\nThis guide teaches you to perform common scenarios using the Azure Mobile Services [iOS SDK]. If you are new to Mobile Services, first complete [Mobile Services Quick Start] to configure your account, create a table, and create a mobile service.\n\n> [AZURE.NOTE] This guide uses the latest [iOS Mobile Services SDK](https://go.microsoft.com/fwLink/?LinkID=266533&clcid=0x409). If your project uses an older version of the SDK, first upgrade the framework in Xcode.\n\n[AZURE.INCLUDE [mobile-services-concepts](../../includes/mobile-services-concepts.md)]\n\n##<a name=\"Setup\"></a>Setup and Prerequisites\n\nThis guide assumes that you have created a mobile service with a table. For more information see [Create a table], or reuse the `TodoItem` table created in [Mobile Services Quick Start]. This guide assumes that the table has the same schema as the tables in those tutorials. This guide also assumes that your Xcode references `WindowsAzureMobileServices.framework` and imports `WindowsAzureMobileServices/WindowsAzureMobileServices.h`.\n\n##<a name=\"create-client\"></a>How to: Create Mobile Services Client\n\nTo access an Azure mobile service in your project, create an `MSClient` client object. Replace `AppUrl` and `AppKey` with the mobile service URL and the application key Dashboard values, respectively.\n\n```\nMSClient *client = [MSClient clientWithApplicationURLString:@\"AppUrl\" applicationKey:@\"AppKey\"];\n```\n\n##<a name=\"table-reference\"></a>How to: Create Table Reference\n\nTo access or update data for your Azure mobile service, create a reference to the table. Replace `TodoItem` with the name of your table.\n\n```\n    MSTable *table = [client tableWithName:@\"TodoItem\"];\n```\n\n##<a name=\"querying\"></a>How to: Query Data\n\nTo create a database query, query the `MSTable` object. The following query gets all the items in `TodoItem` and logs the text of each item.\n\n```\n[table readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(error) { // error is nil if no error occured\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) { // items is NSArray of records that match query\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n##<a name=\"filtering\"></a>How to: Filter Returned Data\n\nTo filter results, there are many available options.\n\nTo filter using a predicate, use an `NSPredicate` and `readWithPredicate`. The following filters returned data to find only incomplete Todo items.\n\n```\n// Create a predicate that finds items where complete is false\nNSPredicate * predicate = [NSPredicate predicateWithFormat:@\"complete == NO\"];\n// Query the TodoItem table and update the items property with the results from the service\n[table readWithPredicate:predicate completion:^(MSQueryResult *result, NSError *error) {\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) {\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n##<a name=\"query-object\"></a>How to: Use MSQuery\n\nTo perform a complex query (including sorting and paging), create an `MSQuery` object, directly or by using a predicate:\n\n```\n    MSQuery *query = [table query];\n    MSQuery *query = [table queryWithPredicate: [NSPredicate predicateWithFormat:@\"complete == NO\"]];\n```\n\n`MSQuery` lets you control several query behaviors, including the following. Execute an `MSQuery` query by calling `readWithCompletion` on it, as shown in the next example.\n* Specify order of results\n* Limit which fields to return\n* Limit how many records to return\n* Specify total count in response\n* Specify custom query string parameters in request\n* Apply additional functions\n\n\n## <a name=\"sorting\"></a>How to: Sort Data with MSQuery\n\nTo sort results, let's look at an example. To first ascendingly by field `text` and then descendingly by field `completion`, invoke `MSQuery` like so:\n\n```\n[query orderByAscending:@\"text\"];\n[query orderByDescending:@\"complete\"];\n[query readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) {\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n## <a name=\"paging\"></a>How to: Return Data in Pages with MSQuery\n\nMobile Services limits the amount of records that are returned in a single response. To control the number of records displayed to your users you must implement a paging system.  Paging is performed by using the following three properties of the **MSQuery** object:\n\n```\n+   `BOOL includeTotalCount`\n+   `NSInteger fetchLimit`\n+   `NSInteger fetchOffset`\n```\n\nIn the following example, a simple function requests 5 records from the server and then appends them to the local collection of previously loaded records:\n\n```\n// Create and initialize these properties\n@property (nonatomic, strong)   NSMutableArray *loadedItems; // Init via [[NSMutableArray alloc] init]\n@property (nonatomic)                   BOOL moreResults;\n```\n\n```\n-(void)loadResults\n{\n    MSQuery *query = [self.table query];\n\n    query.includeTotalCount = YES;\n    query.fetchLimit = 5;\n    query.fetchOffset = self.loadedItems.count;\n\n\n    [query readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(!error) {\n            // Add the items to our local copy\n            [self.loadedItems addObjectsFromArray:result.items];\n\n            // Set a flag to keep track if there are any additional records we need to load\n            self.moreResults = (self.loadedItems.count <= result.totalCount);\n        }\n    }];\n}\n\n```\n\n## <a name=\"selecting\"></a><a name=\"parameters\"></a>How to: Limit Fields and Expand Query String Parameters with MSQuery\n\nTo limit fields to be returned in a query, specify the names of the fields in the **selectFields** property. This returns only the text and completed fields:\n\n```\n    query.selectFields = @[@\"text\", @\"completed\"];\n```\n\nTo include additional query string parameters in the server request (for example, because a custom server-side script uses them), populate `query.parameters` like so:\n\n```\n    query.parameters = @{\n        @\"myKey1\" : @\"value1\",\n        @\"myKey2\" : @\"value2\",\n    };\n```\n\n##<a name=\"inserting\"></a>How to: Insert Data\n\nTo insert a new table row, create a new `NSDictionary` and invoke `table insert`. Mobile Services automatically generates new columns based on the `NSDictionary` if [Dynamic Schema] is not disabled.\n\nIf `id` is not provided, the backend automatically generates a new unique ID. Provide your own `id` to use email addresses, usernames, or your own custom values as ID. Providing your own ID may ease joins and business-oriented database logic.\n\n```\n    NSDictionary *newItem = @{@\"id\": @\"custom-id\", @\"text\": @\"my new item\", @\"complete\" : @NO};\n    [self.table insert:newItem completion:^(NSDictionary *result, NSError *error) {\n        // The result contains the new item that was inserted,\n        // depending on your server scripts it may have additional or modified\n        // data compared to what was passed to the server.\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                        NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\n        }\n    }];\n```\n\n##<a name=\"modifying\"></a>How to: Modify Data\n\nTo update an existing row, modify an item and call `update`:\n\n```\n    NSMutableDictionary *newItem = [oldItem mutableCopy]; // oldItem is NSDictionary\n    [newItem setValue:@\"Updated text\" forKey:@\"text\"];\n    [self.table update:newItem completion:^(NSDictionary *item, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\nAlternatively, supply the row ID and the updated field:\n\n```\n    [self.table update:@{@\"id\":@\"37BBF396-11F0-4B39-85C8-B319C729AF6D\", @\"Complete\":@YES} completion:^(NSDictionary *item, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\nAt minimum, the `id` attribute must be set when making updates.\n\n##<a name=\"deleting\"></a>How to: Delete Data\n\nTo delete an item, invoke `delete` with the item:\n\n```\n    [self.table delete:item completion:^(id itemId, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\nAlternatively, delete by providing a row ID:\n\n```\n    [self.table deleteWithId:@\"37BBF396-11F0-4B39-85C8-B319C729AF6D\" completion:^(id itemId, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\nAt minimum, the `id` attribute must be set when making deletes.\n\n##<a name=\"#custom-api\"></a>How to: Call a custom API\n\nA custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation. By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON. For an example of how to create a custom API in your mobile service, see [How to: define a custom API endpoint](mobile-services-dotnet-backend-define-custom-api.md).\n\n[AZURE.INCLUDE [mobile-services-ios-call-custom-api](../../includes/mobile-services-ios-call-custom-api.md)]\n\n\n##<a name=\"authentication\"></a>How to: Authenticate Users\n\nAzure Mobile Services supports various identity providers. For a basic tutorial, see [Authentication].\n\nAzure Mobile Services supports two authentication workflows:\n\n- **Server-managed Login**: Azure Mobile Services manages the login process on behalf of your app. It displays a provider-specific login page and authenticates with the chosen provider.\n\n- **Client-managed Login**: The _app_ requests a token from the identity provider and presents this token to Azure Mobile Services for authentication.\n\nWhen authentication succeeds, you get back a user object with a user ID value and the auth token. To use this user ID to authorize users, see [Service-side Authorization]. To restrict table access to only authenticated users, see [Permissions].\n\n### Server-managed Login\n\nHere is how you can add server-managed login to the [Mobile Services Quick Start] project; you may use similar code for your other projects. For more information and to see an end-to-end example in action, see [Authentication].\n\n[AZURE.INCLUDE [mobile-services-ios-authenticate-app](../../includes/mobile-services-ios-authenticate-app.md)]\n\n### Client-managed Login (Single Sign-on)\n\nYou may do the login process outside the Mobile Services client, either to enable single sign-on or if your app contacts the identity provider directly. In such cases, you can log in to Mobile Services by providing a token obtained independently from a supported identity provider.\n\nThe following example uses the [Live Connect SDK] to enable single sign-on for iOS apps. It assumes that you have a **LiveConnectClient** instance named `liveClient` in the controller and the user is logged in.\n\n```\n    [client loginWithProvider:@\"microsoftaccount\"\n        token:@{@\"authenticationToken\" : self.liveClient.session.authenticationToken}\n        completion:^(MSUser *user, NSError *error) {\n                // Handle success and errors\n    }];\n```\n\n##<a name=\"caching-tokens\"></a>How to: Cache Authentication Tokens\n\nLet's see how you may cache tokens in the [Mobile Services Quick Start] project; you may apply similar steps to any project. [AZURE.INCLUDE [mobile-services-ios-authenticate-app-with-token](../../includes/mobile-services-ios-authenticate-app-with-token.md)]\n\n##<a name=\"errors\"></a>How to: Handle Errors\n\nWhen you call a mobile service, the completion block contains an `NSError *error` parameter. When an error occurs, this parameter is non-nil. In your code, you should check this parameter and handle the error as needed.\n\nThe file [`<WindowsAzureMobileServices/MSError.h>`](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h) defines the constants `MSErrorResponseKey`, `MSErrorRequestKey`, and `MSErrorServerItemKey` to get more data related to the error. In addition, the file defines constants for each error code. For an example on how to use these constants, see [Conflict-Handler] for its usage of `MSErrorServerItemKey` and `MSErrorPreconditionFailed`.\n\n<!-- Anchors. -->\n\n[What is Mobile Services]: #what-is\n[Concepts]: #concepts\n[Setup and Prerequisites]: #Setup\n[How to: Create the Mobile Services client]: #create-client\n[How to: Create a table reference]: #table-reference\n[How to: Query data from a mobile service]: #querying\n[Filter returned data]: #filtering\n[Sort returned data]: #sorting\n[Return data in pages]: #paging\n[Select specific columns]: #selecting\n[How to: Bind data to the user interface]: #binding\n[How to: Insert data into a mobile service]: #inserting\n[How to: Modify data in a mobile service]: #modifying\n[How to: Authenticate users]: #authentication\n[Cache authentication tokens]: #caching-tokens\n[How to: Upload images and large files]: #blobs\n[How to: Handle errors]: #errors\n[How to: Design unit tests]: #unit-testing\n[How to: Customize the client]: #customizing\n[Customize request headers]: #custom-headers\n[Customize data type serialization]: #custom-serialization\n[Next Steps]: #next-steps\n[How to: Use MSQuery]: #query-object\n\n<!-- Images. -->\n\n<!-- URLs. -->\n[Mobile Services Quick Start]: mobile-services-ios-get-started.md\n[Get started with Mobile Services]: mobile-services-ios-get-started.md\n[Mobile Services SDK]: https://go.microsoft.com/fwLink/p/?LinkID=266533\n[Authentication]: /develop/mobile/tutorials/get-started-with-users-ios\n[iOS SDK]: https://developer.apple.com/xcode\n\n[Handling Expired Tokens]: http://go.microsoft.com/fwlink/p/?LinkId=301955\n[Live Connect SDK]: http://go.microsoft.com/fwlink/p/?LinkId=301960\n[Permissions]: http://msdn.microsoft.com/library/windowsazure/jj193161.aspx\n[Service-side Authorization]: mobile-services-javascript-backend-service-side-authorization.md\n[Dynamic Schema]: http://go.microsoft.com/fwlink/p/?LinkId=296271\n[Create a table]: http://msdn.microsoft.com/library/windowsazure/jj193162.aspx\n[NSDictionary object]: http://go.microsoft.com/fwlink/p/?LinkId=301965\n[ASCII control codes C0 and C1]: http://en.wikipedia.org/wiki/Data_link_escape_character#C1_set\n[CLI to manage Mobile Services tables]: ../virtual-machines-command-line-tools.md#Mobile_Tables\n[Conflict-Handler]: mobile-services-ios-handling-conflicts-offline-data.md#add-conflict-handling\n"
}