{
  "nodes": [
    {
      "content": "Create a simulated device app",
      "pos": [
        3,
        32
      ]
    },
    {
      "content": "In this section, you'll create a Java console app that simulates a device that sends device-to-cloud messages to an IoT hub.",
      "pos": [
        34,
        158
      ]
    },
    {
      "content": "In the iot-java-get-started folder you created in the <bpt id=\"p1\">*</bpt>Create a device identity<ept id=\"p1\">*</ept> section, create a new Maven project called <bpt id=\"p2\">**</bpt>simulated-device<ept id=\"p2\">**</ept> using the following command at your command-prompt.",
      "pos": [
        163,
        359
      ]
    },
    {
      "content": "Note that this is a single, long command:",
      "pos": [
        360,
        401
      ]
    },
    {
      "content": "At your command prompt, navigate to the new simulated-device folder.",
      "pos": [
        581,
        649
      ]
    },
    {
      "content": "Using a text editor, open the pom.xml file in the simulated-device folder and add the following dependencies to the <bpt id=\"p1\">**</bpt>dependencies<ept id=\"p1\">**</ept> node.",
      "pos": [
        654,
        792
      ]
    },
    {
      "content": "This enables you to use the iothub-java-client package in your application to communicate with your IoT hub and to serialize Java objects to JSON:",
      "pos": [
        793,
        939
      ]
    },
    {
      "content": "Save and close the pom.xml file.",
      "pos": [
        1296,
        1328
      ]
    },
    {
      "content": "Using a text editor, open the simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java file.",
      "pos": [
        1333,
        1426
      ]
    },
    {
      "pos": [
        1431,
        1483
      ],
      "content": "Add the following <bpt id=\"p1\">**</bpt>import<ept id=\"p1\">**</ept> statements to the file:"
    },
    {
      "pos": [
        2070,
        2313
      ],
      "content": "Add the following class-level variables to the <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> class, replacing <bpt id=\"p2\">**</bpt>{youriothubname}<ept id=\"p2\">**</ept> with your IoT hub name, and <bpt id=\"p3\">**</bpt>{yourdeviceid}<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>{yourdevicekey}<ept id=\"p4\">**</ept> with the device values you generated in the <bpt id=\"p5\">*</bpt>Create a device identity<ept id=\"p5\">*</ept> section:"
    },
    {
      "content": "This sample application uses the <bpt id=\"p1\">**</bpt>protocol<ept id=\"p1\">**</ept> variable when it instantiates a <bpt id=\"p2\">**</bpt>DeviceClient<ept id=\"p2\">**</ept> object.",
      "pos": [
        2604,
        2706
      ]
    },
    {
      "content": "You can use either the HTTPS or AMQPS protocol to communicate with IoT Hub.",
      "pos": [
        2707,
        2782
      ]
    },
    {
      "pos": [
        2787,
        2930
      ],
      "content": "Add the following nested <bpt id=\"p1\">**</bpt>TelemetryDataPoint<ept id=\"p1\">**</ept> class inside the <bpt id=\"p2\">**</bpt>App<ept id=\"p2\">**</ept> class to specify the telemetry data your device sends to your IoT hub:"
    },
    {
      "content": "Add the following nested <bpt id=\"p1\">**</bpt>EventCallback<ept id=\"p1\">**</ept> class inside the <bpt id=\"p2\">**</bpt>App<ept id=\"p2\">**</ept> class to display the acknowledgement status that the IoT hub returns when it processes a message from the simulated device.",
      "pos": [
        3182,
        3373
      ]
    },
    {
      "content": "This method also notifies the main thread in the application when the message has been processed:",
      "pos": [
        3374,
        3471
      ]
    },
    {
      "content": "Add the following nested <bpt id=\"p1\">**</bpt>MessageSender<ept id=\"p1\">**</ept> class inside the <bpt id=\"p2\">**</bpt>App<ept id=\"p2\">**</ept> class.",
      "pos": [
        3867,
        3941
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>run<ept id=\"p1\">**</ept> method in this class generates sample telemetry data to send to your IoT hub and waits for an acknowledgement before sending the next message:",
      "pos": [
        3942,
        4096
      ]
    },
    {
      "content": "This method sends a new device-to-cloud message one second after the IoT hub acknowledges the previous message.",
      "pos": [
        5353,
        5464
      ]
    },
    {
      "content": "The message contains a JSON-serialized object with the deviceId and a randomly generated number to simulate a wind speed sensor.",
      "pos": [
        5465,
        5593
      ]
    },
    {
      "pos": [
        5599,
        5722
      ],
      "content": "Replace the <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> method with the following code that creates a thread to send device-to-cloud messages to your IoT hub:"
    },
    {
      "content": "Save and close the App.java file.",
      "pos": [
        6051,
        6084
      ]
    },
    {
      "pos": [
        6090,
        6232
      ],
      "content": "To build the <bpt id=\"p1\">**</bpt>simulated-device<ept id=\"p1\">**</ept> application using Maven, execute the following command at the command-prompt in the simulated-device folder:"
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> To keep things simple, this tutorial does not implement any retry policy.",
      "pos": [
        6287,
        6373
      ]
    },
    {
      "content": "In production code, you should implement retry policies (such as an exponential backoff), as suggested in the MSDN article <bpt id=\"p1\">[</bpt>Transient Fault Handling<ept id=\"p1\">][lnk-transient-faults]</ept>.",
      "pos": [
        6374,
        6546
      ]
    }
  ],
  "content": "## Create a simulated device app\n\nIn this section, you'll create a Java console app that simulates a device that sends device-to-cloud messages to an IoT hub.\n\n1. In the iot-java-get-started folder you created in the *Create a device identity* section, create a new Maven project called **simulated-device** using the following command at your command-prompt. Note that this is a single, long command:\n\n    ```\n    mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=simulated-device -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n    ```\n\n2. At your command prompt, navigate to the new simulated-device folder.\n\n3. Using a text editor, open the pom.xml file in the simulated-device folder and add the following dependencies to the **dependencies** node. This enables you to use the iothub-java-client package in your application to communicate with your IoT hub and to serialize Java objects to JSON:\n\n    ```\n    <dependency>\n      <groupId>com.microsoft.azure.iothub-java-client</groupId>\n      <artifactId>iothub-java-device-client</artifactId>\n      <version>1.0.2</version>\n    </dependency>\n    <dependency>\n      <groupId>com.google.code.gson</groupId>\n      <artifactId>gson</artifactId>\n      <version>2.3.1</version>\n    </dependency>\n    ```\n\n4. Save and close the pom.xml file.\n\n5. Using a text editor, open the simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java file.\n\n6. Add the following **import** statements to the file:\n\n    ```\n    import com.microsoft.azure.iothub.DeviceClient;\n    import com.microsoft.azure.iothub.IotHubClientProtocol;\n    import com.microsoft.azure.iothub.Message;\n    import com.microsoft.azure.iothub.IotHubStatusCode;\n    import com.microsoft.azure.iothub.IotHubEventCallback;\n    import com.microsoft.azure.iothub.IotHubMessageResult;\n    import java.io.IOException;\n    import java.net.URISyntaxException;\n    import java.security.InvalidKeyException;\n    import java.util.Random;\n    import javax.naming.SizeLimitExceededException;\n    import com.google.gson.Gson;\n    ```\n\n7. Add the following class-level variables to the **App** class, replacing **{youriothubname}** with your IoT hub name, and **{yourdeviceid}** and **{yourdevicekey}** with the device values you generated in the *Create a device identity* section:\n\n    ```\n    private static String connString = \"HostName={youriothubname}.azure-devices.net;DeviceId={yourdeviceid};SharedAccessKey={yourdevicekey}\";\n    private static IotHubClientProtocol protocol = IotHubClientProtocol.AMQPS;\n    private static boolean stopThread = false;\n    ```\n\n    This sample application uses the **protocol** variable when it instantiates a **DeviceClient** object. You can use either the HTTPS or AMQPS protocol to communicate with IoT Hub.\n\n8. Add the following nested **TelemetryDataPoint** class inside the **App** class to specify the telemetry data your device sends to your IoT hub:\n\n    ```\n    private static class TelemetryDataPoint {\n      public String deviceId;\n      public double windSpeed;\n        \n      public String serialize() {\n        Gson gson = new Gson();\n        return gson.toJson(this);\n      }\n    }\n    ```\n\n9. Add the following nested **EventCallback** class inside the **App** class to display the acknowledgement status that the IoT hub returns when it processes a message from the simulated device. This method also notifies the main thread in the application when the message has been processed:\n\n    ```\n    private static class EventCallback implements IotHubEventCallback\n    {\n      public void execute(IotHubStatusCode status, Object context) {\n        System.out.println(\"IoT Hub responded to message with status \" + status.name());\n      \n        if (context != null) {\n          synchronized (context) {\n            context.notify();\n          }\n        }\n      }\n    }\n    ```\n\n10. Add the following nested **MessageSender** class inside the **App** class. The **run** method in this class generates sample telemetry data to send to your IoT hub and waits for an acknowledgement before sending the next message:\n\n    ```\n    private static class MessageSender implements Runnable {\n      public volatile boolean stopThread = false;\n\n      public void run()  {\n        try {\n          double avgWindSpeed = 10; // m/s\n          Random rand = new Random();\n          DeviceClient client;\n          client = new DeviceClient(connString, protocol);\n          client.open();\n        \n          while (!stopThread) {\n            double currentWindSpeed = avgWindSpeed + rand.nextDouble() * 4 - 2;\n            TelemetryDataPoint telemetryDataPoint = new TelemetryDataPoint();\n            telemetryDataPoint.deviceId = \"myFirstDevice\";\n            telemetryDataPoint.windSpeed = currentWindSpeed;\n      \n            String msgStr = telemetryDataPoint.serialize();\n            Message msg = new Message(msgStr);\n            System.out.println(msgStr);\n        \n            Object lockobj = new Object();\n            EventCallback callback = new EventCallback();\n            client.sendEventAsync(msg, callback, lockobj);\n    \n            synchronized (lockobj) {\n              lockobj.wait();\n            }\n            Thread.sleep(1000);\n          }\n          client.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n    }\n    ```\n\n    This method sends a new device-to-cloud message one second after the IoT hub acknowledges the previous message. The message contains a JSON-serialized object with the deviceId and a randomly generated number to simulate a wind speed sensor.\n\n11. Replace the **main** method with the following code that creates a thread to send device-to-cloud messages to your IoT hub:\n\n    ```\n    public static void main( String[] args ) throws IOException, URISyntaxException {\n    \n      MessageSender ms0 = new MessageSender();\n      Thread t0 = new Thread(ms0);\n      t0.start(); \n    \n      System.out.println(\"Press ENTER to exit.\");\n      System.in.read();\n      ms0.stopThread = true;\n    }\n    ```\n\n12. Save and close the App.java file.\n\n13. To build the **simulated-device** application using Maven, execute the following command at the command-prompt in the simulated-device folder:\n\n    ```\n    mvn clean package -DskipTests\n    ```\n\n> [AZURE.NOTE] To keep things simple, this tutorial does not implement any retry policy. In production code, you should implement retry policies (such as an exponential backoff), as suggested in the MSDN article [Transient Fault Handling][lnk-transient-faults].\n\n<!-- Links -->\n[lnk-transient-faults]: https://msdn.microsoft.com/library/hh680901(v=pandp.50).aspx\n"
}