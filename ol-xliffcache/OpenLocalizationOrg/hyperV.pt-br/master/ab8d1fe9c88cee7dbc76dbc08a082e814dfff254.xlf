<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pt-br">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab8d1fe9c88cee7dbc76dbc08a082e814dfff254</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create a device identity</source>
          <target state="new">Create a device identity</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you'll create a Node.js console app that creates a new device identity in the identity registry in your IoT hub.</source>
          <target state="new">In this section, you'll create a Node.js console app that creates a new device identity in the identity registry in your IoT hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A device cannot connect to IoT hub unless it has an entry in the device identity registry.</source>
          <target state="new">A device cannot connect to IoT hub unless it has an entry in the device identity registry.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Refer to the <bpt id="p1">**</bpt>Device Identity Registry<ept id="p1">**</ept> section of the <bpt id="p2">[</bpt>IoT Hub Developer Guide<ept id="p2">][lnk-devguide-identity]</ept> for more information.</source>
          <target state="new">Refer to the <bpt id="p1">**</bpt>Device Identity Registry<ept id="p1">**</ept> section of the <bpt id="p2">[</bpt>IoT Hub Developer Guide<ept id="p2">][lnk-devguide-identity]</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you run this console application, it generates a unique device ID and key that your device can identify itself with when it sends device-to-cloud messages to IoT Hub.</source>
          <target state="new">When you run this console application, it generates a unique device ID and key that your device can identify itself with when it sends device-to-cloud messages to IoT Hub.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create a new empty folder called <bpt id="p1">**</bpt>createdeviceidentity<ept id="p1">**</ept>.</source>
          <target state="new">Create a new empty folder called <bpt id="p1">**</bpt>createdeviceidentity<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>createdeviceidentity<ept id="p1">**</ept> folder, create a new package.json file using the following command at your command-prompt.</source>
          <target state="new">In the <bpt id="p1">**</bpt>createdeviceidentity<ept id="p1">**</ept> folder, create a new package.json file using the following command at your command-prompt.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Accept all the defaults:</source>
          <target state="new">Accept all the defaults:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>At your command-prompt in the <bpt id="p1">**</bpt>createdeviceidentity<ept id="p1">**</ept> folder, run the following command to install the <bpt id="p2">**</bpt>azure-iothub<ept id="p2">**</ept> package:</source>
          <target state="new">At your command-prompt in the <bpt id="p1">**</bpt>createdeviceidentity<ept id="p1">**</ept> folder, run the following command to install the <bpt id="p2">**</bpt>azure-iothub<ept id="p2">**</ept> package:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using a text editor, create a new <bpt id="p1">**</bpt>CreateDeviceIdentity.js<ept id="p1">**</ept> file in the <bpt id="p2">**</bpt>createdeviceidentity<ept id="p2">**</ept> folder.</source>
          <target state="new">Using a text editor, create a new <bpt id="p1">**</bpt>CreateDeviceIdentity.js<ept id="p1">**</ept> file in the <bpt id="p2">**</bpt>createdeviceidentity<ept id="p2">**</ept> folder.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`require`</ph> statement at the start of the <bpt id="p1">**</bpt>CreateDeviceIdentity.js<ept id="p1">**</ept> file:</source>
          <target state="new">Add the following <ph id="ph1">`require`</ph> statement at the start of the <bpt id="p1">**</bpt>CreateDeviceIdentity.js<ept id="p1">**</ept> file:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Add the following code to the <bpt id="p1">**</bpt>CreateDeviceIdentity.js<ept id="p1">**</ept> file, replacing the placeholder value with the connection string for the IoT hub you created in the previous section:</source>
          <target state="new">Add the following code to the <bpt id="p1">**</bpt>CreateDeviceIdentity.js<ept id="p1">**</ept> file, replacing the placeholder value with the connection string for the IoT hub you created in the previous section:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add the following code to create a new device definition in the device identity registry in your IoT hub.</source>
          <target state="new">Add the following code to create a new device definition in the device identity registry in your IoT hub.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This code creates a new device if the device id does not exist in the registry, otherwise it returns the key of the existing device:</source>
          <target state="new">This code creates a new device if the device id does not exist in the registry, otherwise it returns the key of the existing device:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Save and close <bpt id="p1">**</bpt>CreateDeviceIdentity.js<ept id="p1">**</ept> file.</source>
          <target state="new">Save and close <bpt id="p1">**</bpt>CreateDeviceIdentity.js<ept id="p1">**</ept> file.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To run the <bpt id="p1">**</bpt>createdeviceidentity<ept id="p1">**</ept> application, execute the following command at the command-prompt in the createdeviceidentity folder:</source>
          <target state="new">To run the <bpt id="p1">**</bpt>createdeviceidentity<ept id="p1">**</ept> application, execute the following command at the command-prompt in the createdeviceidentity folder:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Make a note of the <bpt id="p1">**</bpt>Device id<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Device key<ept id="p2">**</ept>.</source>
          <target state="new">Make a note of the <bpt id="p1">**</bpt>Device id<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Device key<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You will need these later when you create an application that connects to IoT Hub as a device.</source>
          <target state="new">You will need these later when you create an application that connects to IoT Hub as a device.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The IoT Hub identity registry only stores device identities to enable secure access to the hub.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The IoT Hub identity registry only stores device identities to enable secure access to the hub.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It stores device IDs and keys to use as security credentials and an enabled/disabled flag that enables you to disable access for an individual device.</source>
          <target state="new">It stores device IDs and keys to use as security credentials and an enabled/disabled flag that enables you to disable access for an individual device.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you application needs to store other device-specific metadata, it should use an application-specific store.</source>
          <target state="new">If you application needs to store other device-specific metadata, it should use an application-specific store.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt>IoT Hub Developer Guide<ept id="p1">][lnk-devguide-identity]</ept> for more information.</source>
          <target state="new">Refer to <bpt id="p1">[</bpt>IoT Hub Developer Guide<ept id="p1">][lnk-devguide-identity]</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Receive device-to-cloud messages</source>
          <target state="new">Receive device-to-cloud messages</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this section, you'll create a Node.js console app that reads device-to-cloud messages from IoT Hub.</source>
          <target state="new">In this section, you'll create a Node.js console app that reads device-to-cloud messages from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An IoT hub exposes an <bpt id="p1">[</bpt>Event Hubs<ept id="p1">][lnk-event-hubs-overview]</ept>-compatible endpoint to enable you to read device-to-cloud messages.</source>
          <target state="new">An IoT hub exposes an <bpt id="p1">[</bpt>Event Hubs<ept id="p1">][lnk-event-hubs-overview]</ept>-compatible endpoint to enable you to read device-to-cloud messages.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To keep things simple, this tutorial creates a basic reader that is not suitable for a high throughput deployment.</source>
          <target state="new">To keep things simple, this tutorial creates a basic reader that is not suitable for a high throughput deployment.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Process device-to-cloud messages<ept id="p1">][lnk-processd2c-tutorial]</ept> tutorial shows you how to process device-to-cloud messages at scale.</source>
          <target state="new">The <bpt id="p1">[</bpt>Process device-to-cloud messages<ept id="p1">][lnk-processd2c-tutorial]</ept> tutorial shows you how to process device-to-cloud messages at scale.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Get Started with Event Hubs<ept id="p1">][lnk-eventhubs-tutorial]</ept> tutorial provides further information on how to process messages from Event Hubs and is applicable to the IoT Hub Event Hub-compatible endpoints.</source>
          <target state="new">The <bpt id="p1">[</bpt>Get Started with Event Hubs<ept id="p1">][lnk-eventhubs-tutorial]</ept> tutorial provides further information on how to process messages from Event Hubs and is applicable to the IoT Hub Event Hub-compatible endpoints.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create a new empty folder called <bpt id="p1">**</bpt>readdevicetocloudmessages<ept id="p1">**</ept>.</source>
          <target state="new">Create a new empty folder called <bpt id="p1">**</bpt>readdevicetocloudmessages<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>readdevicetocloudmessages<ept id="p1">**</ept> folder, create a new package.json file using the following command at your command-prompt.</source>
          <target state="new">In the <bpt id="p1">**</bpt>readdevicetocloudmessages<ept id="p1">**</ept> folder, create a new package.json file using the following command at your command-prompt.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Accept all the defaults:</source>
          <target state="new">Accept all the defaults:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>At your command-prompt in the <bpt id="p1">**</bpt>readdevicetocloudmessages<ept id="p1">**</ept> folder, run the following command to install the <bpt id="p2">**</bpt>amqp10<ept id="p2">**</ept> and <bpt id="p3">**</bpt>bluebird<ept id="p3">**</ept> packages:</source>
          <target state="new">At your command-prompt in the <bpt id="p1">**</bpt>readdevicetocloudmessages<ept id="p1">**</ept> folder, run the following command to install the <bpt id="p2">**</bpt>amqp10<ept id="p2">**</ept> and <bpt id="p3">**</bpt>bluebird<ept id="p3">**</ept> packages:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using a text editor, create a new <bpt id="p1">**</bpt>ReadDeviceToCloudMessages.js<ept id="p1">**</ept> file in the <bpt id="p2">**</bpt>readdevicetocloudmessages<ept id="p2">**</ept> folder.</source>
          <target state="new">Using a text editor, create a new <bpt id="p1">**</bpt>ReadDeviceToCloudMessages.js<ept id="p1">**</ept> file in the <bpt id="p2">**</bpt>readdevicetocloudmessages<ept id="p2">**</ept> folder.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`require`</ph> statements at the start of the <bpt id="p1">**</bpt>ReadDeviceToCloudMessages.js<ept id="p1">**</ept> file:</source>
          <target state="new">Add the following <ph id="ph1">`require`</ph> statements at the start of the <bpt id="p1">**</bpt>ReadDeviceToCloudMessages.js<ept id="p1">**</ept> file:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add the following variable declarations, replacing the placeholders with the values you noted previously.</source>
          <target state="new">Add the following variable declarations, replacing the placeholders with the values you noted previously.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">**</bpt>{your event hub-compatible namespace}<ept id="p1">**</ept> placeholder comes from the <bpt id="p2">**</bpt>Event Hub-compatible endpoint<ept id="p2">**</ept> field in the portal - it takes the form <bpt id="p3">**</bpt>namespace.servicebus.windows.net<ept id="p3">**</ept> (without the <bpt id="p4">*</bpt>sb://<ept id="p4">*</ept> prefix).</source>
          <target state="new">The value of the <bpt id="p1">**</bpt>{your event hub-compatible namespace}<ept id="p1">**</ept> placeholder comes from the <bpt id="p2">**</bpt>Event Hub-compatible endpoint<ept id="p2">**</ept> field in the portal - it takes the form <bpt id="p3">**</bpt>namespace.servicebus.windows.net<ept id="p3">**</ept> (without the <bpt id="p4">*</bpt>sb://<ept id="p4">*</ept> prefix).</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This code assumes you created your IoT hub in the F1 (free) tier.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This code assumes you created your IoT hub in the F1 (free) tier.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A free IoT hub has two partitions named "0" and "1".</source>
          <target state="new">A free IoT hub has two partitions named "0" and "1".</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you created your IoT hub using one of the other pricing tiers, you should adjust the code to create a <bpt id="p1">**</bpt>MessageReceiver<ept id="p1">**</ept> for each partition.</source>
          <target state="new">If you created your IoT hub using one of the other pricing tiers, you should adjust the code to create a <bpt id="p1">**</bpt>MessageReceiver<ept id="p1">**</ept> for each partition.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add the following filter definition.</source>
          <target state="new">Add the following filter definition.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This application uses a filter when it creates a receiver so that the receiver only reads messages sent to IoT Hub after the receiver starts running.</source>
          <target state="new">This application uses a filter when it creates a receiver so that the receiver only reads messages sent to IoT Hub after the receiver starts running.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is useful in a test environment so you can see the current set of messages, but in a production environment your code should make sure that it processes all the messages - see the <bpt id="p1">[</bpt>How to process IoT Hub device-to-cloud messages<ept id="p1">][lnk-processd2c-tutorial]</ept> tutorial for more information.</source>
          <target state="new">This is useful in a test environment so you can see the current set of messages, but in a production environment your code should make sure that it processes all the messages - see the <bpt id="p1">[</bpt>How to process IoT Hub device-to-cloud messages<ept id="p1">][lnk-processd2c-tutorial]</ept> tutorial for more information.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add the following code to create the receive address and an AMQP client:</source>
          <target state="new">Add the following code to create the receive address and an AMQP client:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add the following two functions that print output to the console:</source>
          <target state="new">Add the following two functions that print output to the console:</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Add the following function that acts as a receiver for a given partition using the filter:</source>
          <target state="new">Add the following function that acts as a receiver for a given partition using the filter:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the following code to connect to the Event Hub-compatible endpoint and start the receivers:</source>
          <target state="new">Add the following code to connect to the Event Hub-compatible endpoint and start the receivers:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Save and close the <bpt id="p1">**</bpt>ReadDeviceToCloudMessages.js<ept id="p1">**</ept> file.</source>
          <target state="new">Save and close the <bpt id="p1">**</bpt>ReadDeviceToCloudMessages.js<ept id="p1">**</ept> file.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>