{
  "nodes": [
    {
      "content": "How to use the Android Mobile Apps Client Library",
      "pos": [
        27,
        76
      ]
    },
    {
      "content": "How to use Android client SDK for Azure Mobile Apps.",
      "pos": [
        95,
        147
      ]
    },
    {
      "content": "How to use the Android client library for Mobile Apps",
      "pos": [
        482,
        535
      ]
    },
    {
      "content": "This guide shows you how to use the Android client SDK for Mobile Apps to implement common scenarios, such as querying",
      "pos": [
        661,
        779
      ]
    },
    {
      "content": "for data (inserting, updating, and deleting), authenticating users, handling errors, and customizing the client.",
      "pos": [
        780,
        892
      ]
    },
    {
      "content": "It also",
      "pos": [
        893,
        900
      ]
    },
    {
      "content": "does a deep-dive into common client code used in most mobile apps.",
      "pos": [
        901,
        967
      ]
    },
    {
      "content": "This guide focuses on the client-side Android SDK.",
      "pos": [
        969,
        1019
      ]
    },
    {
      "content": "To learn more about the server-side SDKs for Mobile Apps, see",
      "pos": [
        1021,
        1082
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Work with .NET backend SDK<ept id=\"p1\">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept> or",
      "pos": [
        1083,
        1174
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>How to use the Node.js backend SDK<ept id=\"p1\">](app-service-mobile-node-backend-how-to-use-server-sdk.md)</ept>.",
      "pos": [
        1175,
        1270
      ]
    },
    {
      "content": "Reference Documentation",
      "pos": [
        1275,
        1298
      ]
    },
    {
      "pos": [
        1300,
        1441
      ],
      "content": "You can find the Javadocs API reference for the Android client library <bpt id=\"p1\">[</bpt>on GitHub<ept id=\"p1\">](http://azure.github.io/azure-mobile-apps-android-client/)</ept>."
    },
    {
      "content": "Setup and Prerequisites",
      "pos": [
        1446,
        1469
      ]
    },
    {
      "content": "The Mobile Services SDK for Android supports Android version 2.2 or later, but we recommend building against version 4.2 or later.",
      "pos": [
        1471,
        1601
      ]
    },
    {
      "content": "Complete the <bpt id=\"p1\">[</bpt>Mobile Apps quickstart<ept id=\"p1\">](app-service-mobile-android-get-started.md)</ept> tutorial, which will ensure that you have",
      "pos": [
        1603,
        1725
      ]
    },
    {
      "content": "installed Android Studio; it will help you configure your account and create your first Mobile App backend.",
      "pos": [
        1726,
        1833
      ]
    },
    {
      "content": "If you do this,",
      "pos": [
        1834,
        1849
      ]
    },
    {
      "content": "you can skip the rest of this section.",
      "pos": [
        1850,
        1888
      ]
    },
    {
      "content": "If you decide not to complete the Quickstart tutorial, and want to connect an Android app to a Mobile App backend, you",
      "pos": [
        1890,
        2008
      ]
    },
    {
      "content": "need to do the following:",
      "pos": [
        2009,
        2034
      ]
    },
    {
      "pos": [
        2038,
        2213
      ],
      "content": "[create a Mobile App backend](app-service-mobile-android-get-started.md#create-a-new-azure-mobile-app-backend) to use\nwith your Android app (unless your app already has one)",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>create a Mobile App backend<ept id=\"p1\">](app-service-mobile-android-get-started.md#create-a-new-azure-mobile-app-backend)</ept> to use",
          "pos": [
            0,
            117
          ]
        },
        {
          "content": "with your Android app (unless your app already has one)",
          "pos": [
            118,
            173
          ]
        }
      ]
    },
    {
      "pos": [
        2216,
        2286
      ],
      "content": "In Android Studio, <bpt id=\"p1\">[</bpt>update the Gradle build files<ept id=\"p1\">](#gradle-build)</ept>, and"
    },
    {
      "content": "Enable internet permission",
      "pos": [
        2290,
        2316
      ]
    },
    {
      "content": "After this, you will need to complete the steps described in the Deep dive section.",
      "pos": [
        2337,
        2420
      ]
    },
    {
      "pos": [
        2425,
        2480
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"gradle-build\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Update the Gradle build file"
    },
    {
      "pos": [
        2482,
        2517
      ],
      "content": "Change both <bpt id=\"p1\">**</bpt>build.gradle<ept id=\"p1\">**</ept> files:"
    },
    {
      "pos": [
        2522,
        2610
      ],
      "content": "Add this code to the <bpt id=\"p1\">*</bpt>Project<ept id=\"p1\">*</ept> level <bpt id=\"p2\">**</bpt>build.gradle<ept id=\"p2\">**</ept> file inside the <bpt id=\"p3\">*</bpt>buildscript<ept id=\"p3\">*</ept> tag:"
    },
    {
      "pos": [
        2715,
        2807
      ],
      "content": "Add this code to the <bpt id=\"p1\">*</bpt>Module app<ept id=\"p1\">*</ept> level <bpt id=\"p2\">**</bpt>build.gradle<ept id=\"p2\">**</ept> file inside the <bpt id=\"p3\">*</bpt>dependencies<ept id=\"p3\">*</ept> tag:"
    },
    {
      "content": "Currently the latest version is 3.1.",
      "pos": [
        2877,
        2913
      ]
    },
    {
      "content": "The supported versions are listed <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=717034)</ept>.",
      "pos": [
        2914,
        3004
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"enable-internet\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Enable internet permission",
      "pos": [
        3009,
        3065
      ]
    },
    {
      "content": "To access Azure, your app must have the INTERNET permission enabled.",
      "pos": [
        3066,
        3134
      ]
    },
    {
      "content": "If it's not already enabled, add the following line of code to your <bpt id=\"p1\">**</bpt>AndroidManifest.xml<ept id=\"p1\">**</ept> file:",
      "pos": [
        3135,
        3232
      ]
    },
    {
      "content": "The basics deep dive",
      "pos": [
        3305,
        3325
      ]
    },
    {
      "content": "This section discusses some of the code in the Quickstart app.",
      "pos": [
        3327,
        3389
      ]
    },
    {
      "content": "If you did not complete the Quickstart, you will need to add this code to your app.",
      "pos": [
        3390,
        3473
      ]
    },
    {
      "pos": [
        3477,
        3646
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The string \"MobileServices\" occurs frequently in the code: the code actually references the Mobile Apps SDK, it's just a temporary carry-over from the past."
    },
    {
      "pos": [
        3652,
        3704
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"data-object\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Define client data classes"
    },
    {
      "content": "To access data from SQL Azure tables, you define client data classes that correspond to the tables in the Mobile App backend.",
      "pos": [
        3706,
        3831
      ]
    },
    {
      "content": "Examples in this topic assume a table named <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept>, which has the following columns:",
      "pos": [
        3832,
        3920
      ]
    },
    {
      "content": "id",
      "pos": [
        3924,
        3926
      ]
    },
    {
      "content": "text",
      "pos": [
        3929,
        3933
      ]
    },
    {
      "content": "complete",
      "pos": [
        3936,
        3944
      ]
    },
    {
      "content": "The corresponding typed client-side object is the following:",
      "pos": [
        3946,
        4006
      ]
    },
    {
      "pos": [
        4133,
        4189
      ],
      "content": "The code will reside in a file called <bpt id=\"p1\">**</bpt>ToDoItem.java<ept id=\"p1\">**</ept>."
    },
    {
      "content": "If your SQL Azure table contains more columns, you would add the corresponding fields  to this class.",
      "pos": [
        4191,
        4292
      ]
    },
    {
      "content": "For example if it had an integer Priority column, then you might add this field, along with its getter and setter methods:",
      "pos": [
        4294,
        4416
      ]
    },
    {
      "content": "To learn how to create additional tables in your Mobile Apps backend, see <bpt id=\"p1\">[</bpt>How to: Define a table controller<ept id=\"p1\">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#how-to-define-a-table-controller)</ept> (.NET backend) or <bpt id=\"p2\">[</bpt>Define Tables using a Dynamic Schema<ept id=\"p2\">](app-service-mobile-node-backend-how-to-use-server-sdk.md#TableOperations)</ept> (Node.js backend).",
      "pos": [
        4831,
        5183
      ]
    },
    {
      "content": "For a Node.js backend, you can also use the <bpt id=\"p1\">**</bpt>Easy tables<ept id=\"p1\">**</ept> setting in the <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure portal]</ept>.",
      "pos": [
        5184,
        5274
      ]
    },
    {
      "pos": [
        5279,
        5340
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create the client context"
    },
    {
      "content": "This code creates the <bpt id=\"p1\">**</bpt>MobileServiceClient<ept id=\"p1\">**</ept> object that is used to access your Mobile App backend.",
      "pos": [
        5342,
        5442
      ]
    },
    {
      "content": "The code goes in the <ph id=\"ph1\">`onCreate`</ph> method of the <bpt id=\"p1\">**</bpt>Activity<ept id=\"p1\">**</ept> class specified in <bpt id=\"p2\">*</bpt>AndroidManifest.xml<ept id=\"p2\">*</ept> as a <bpt id=\"p3\">**</bpt>MAIN<ept id=\"p3\">**</ept> action and <bpt id=\"p4\">**</bpt>LAUNCHER<ept id=\"p4\">**</ept> category.",
      "pos": [
        5443,
        5590
      ]
    },
    {
      "content": "In the Quickstart code, it goes in the <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> file.",
      "pos": [
        5591,
        5657
      ]
    },
    {
      "content": "In this code, replace <ph id=\"ph1\">`MobileAppUrl`</ph> with the URL of your Mobile App backend, which can be found in the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://portal.azure.com/)</ept> in the blade for your Mobile App backend.",
      "pos": [
        5812,
        5999
      ]
    },
    {
      "content": "For this line of code to compile, you also need to add the following <bpt id=\"p1\">**</bpt>import<ept id=\"p1\">**</ept> statement:",
      "pos": [
        6000,
        6090
      ]
    },
    {
      "pos": [
        6152,
        6212
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"instantiating\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create a table reference"
    },
    {
      "content": "The easiest way to query or modify data in the backend is by using the <bpt id=\"p1\">*</bpt>typed programming model<ept id=\"p1\">*</ept>, since Java is a strongly typed language (later on we will discuss the <bpt id=\"p2\">*</bpt>untyped<ept id=\"p2\">*</ept> model).",
      "pos": [
        6214,
        6399
      ]
    },
    {
      "content": "This model provides seamless JSON serialization and deserialization using the <bpt id=\"p1\">[</bpt>gson<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library when sending data between  client objects and tables in the backend Azure SQL: the developer doesn't have to do anything, the framework handles it all.",
      "pos": [
        6400,
        6693
      ]
    },
    {
      "content": "To access a table, first create a <bpt id=\"p1\">[</bpt>MobileServiceTable<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=296835)</ept> object by calling the <bpt id=\"p2\">**</bpt>getTable<ept id=\"p2\">**</ept> method on the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>MobileServiceClient<ept id=\"p4\">**</ept><ept id=\"p3\">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept>.",
      "pos": [
        6695,
        6981
      ]
    },
    {
      "content": "This method has two overloads:",
      "pos": [
        6983,
        7013
      ]
    },
    {
      "pos": [
        7208,
        7291
      ],
      "content": "In the following code, <bpt id=\"p1\">*</bpt>mClient<ept id=\"p1\">*</ept> is a reference to your MobileServiceClient object."
    },
    {
      "pos": [
        7293,
        7463
      ],
      "content": "The <bpt id=\"p1\">[</bpt>first overload<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=296839)</ept> is used where the class name and the table name are the same, and is the one used in the Quickstart:"
    },
    {
      "pos": [
        7551,
        7719
      ],
      "content": "The <bpt id=\"p1\">[</bpt>2nd overload<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=296840)</ept> is used when the table name is different from the class name: the first parameter is the table name."
    },
    {
      "pos": [
        7827,
        7888
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"binding\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Bind data to the user interface"
    },
    {
      "content": "Data binding involves three components:",
      "pos": [
        7890,
        7929
      ]
    },
    {
      "content": "The data source",
      "pos": [
        7933,
        7948
      ]
    },
    {
      "content": "The screen layout",
      "pos": [
        7951,
        7968
      ]
    },
    {
      "content": "The adapter that ties the two together.",
      "pos": [
        7971,
        8010
      ]
    },
    {
      "content": "In our sample code, we return the data from the Mobile Apps SQL Azure table <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> into an array.",
      "pos": [
        8012,
        8113
      ]
    },
    {
      "content": "This is a very common pattern for data applications: database queries often return a collection of rows which the client gets in a list or array.",
      "pos": [
        8114,
        8259
      ]
    },
    {
      "content": "In this sample the array is the data source.",
      "pos": [
        8260,
        8304
      ]
    },
    {
      "content": "The code specifies a screen layout that defines the view of the data that will appear on the device.",
      "pos": [
        8306,
        8406
      ]
    },
    {
      "pos": [
        8408,
        8535
      ],
      "content": "And the two are bound together with an adapter, which in this code is an extension of the <bpt id=\"p1\">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id=\"p1\">*</ept> class."
    },
    {
      "pos": [
        8542,
        8588
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"layout\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Define the Layout"
    },
    {
      "content": "The layout is defined by several snippets of XML code.",
      "pos": [
        8590,
        8644
      ]
    },
    {
      "content": "Given an existing layout, let's assume the following code represents the <bpt id=\"p1\">**</bpt>ListView<ept id=\"p1\">**</ept> we want to populate with our server data.",
      "pos": [
        8645,
        8772
      ]
    },
    {
      "content": "In the above code the <bpt id=\"p1\">*</bpt>listitem<ept id=\"p1\">*</ept> attribute specifies the id of the layout for an individual row in the list.",
      "pos": [
        8984,
        9092
      ]
    },
    {
      "content": "Here is that code, which specifies a check box and its associated text.",
      "pos": [
        9093,
        9164
      ]
    },
    {
      "content": "This gets instantiated once for each item in the list.",
      "pos": [
        9165,
        9219
      ]
    },
    {
      "content": "This layout does not display the <bpt id=\"p1\">**</bpt>id<ept id=\"p1\">**</ept> field, and a more complex layout would specify additional fields in the display.",
      "pos": [
        9220,
        9340
      ]
    },
    {
      "content": "This code is in the <bpt id=\"p1\">**</bpt>row_list_to_do.xml<ept id=\"p1\">**</ept> file.",
      "pos": [
        9341,
        9389
      ]
    },
    {
      "pos": [
        9880,
        9928
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"adapter\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Define the adapter"
    },
    {
      "content": "Since the data source of our view is an array of <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept>, we subclass our adapter from a <bpt id=\"p2\">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id=\"p2\">*</ept> class.",
      "pos": [
        9930,
        10059
      ]
    },
    {
      "content": "This subclass will produce a View for every <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> using the <bpt id=\"p2\">*</bpt>row_list_to_do<ept id=\"p2\">*</ept> layout.",
      "pos": [
        10060,
        10149
      ]
    },
    {
      "pos": [
        10151,
        10252
      ],
      "content": "In our code we define the following class which is an extension of the <bpt id=\"p1\">*</bpt>ArrayAdapter&amp;lt;E&amp;gt;<ept id=\"p1\">*</ept> class:"
    },
    {
      "content": "You must override the adapter's <bpt id=\"p1\">*</bpt>getView<ept id=\"p1\">*</ept> method.",
      "pos": [
        10322,
        10371
      ]
    },
    {
      "content": "This sample code is one example of how to do this: details will vary with your application.",
      "pos": [
        10372,
        10463
      ]
    },
    {
      "content": "We create an instance of this class in our Activity as follows:",
      "pos": [
        11588,
        11651
      ]
    },
    {
      "content": "Note that the second parameter to the ToDoItemAdapter constructor is a reference to the layout.",
      "pos": [
        11751,
        11846
      ]
    },
    {
      "content": "The call to the constructor is followed by the following code which first gets a reference to the <bpt id=\"p1\">**</bpt>ListView<ept id=\"p1\">**</ept>, and next calls <bpt id=\"p2\">*</bpt>setAdapter<ept id=\"p2\">*</ept> to configure itself to use the adapter we just created:",
      "pos": [
        11847,
        12042
      ]
    },
    {
      "pos": [
        12160,
        12195
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"api\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>The API structure"
    },
    {
      "content": "Mobile Apps table operations and custom API calls are asynchronous, so you use the <bpt id=\"p1\">[</bpt>Future<ept id=\"p1\">](http://developer.android.com/reference/java/util/concurrent/Future.html)</ept> and <bpt id=\"p2\">[</bpt>AsyncTask<ept id=\"p2\">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> objects in all of the asynchronous  methods involving queries and inserts, updates and deletes.",
      "pos": [
        12197,
        12539
      ]
    },
    {
      "content": "This makes it easier to perform multiple operations on a background thread without having to deal with multiple nested callbacks.",
      "pos": [
        12540,
        12669
      ]
    },
    {
      "pos": [
        12671,
        12868
      ],
      "content": "To see how these asynchronous APIs are used in your Android app and how data is displayed in the UI, review the <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> file in the Android quickstart project from the <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure portal]</ept>."
    },
    {
      "pos": [
        12876,
        12925
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"use-adapter\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Use the adapter"
    },
    {
      "content": "You are now ready to use data binding.",
      "pos": [
        12927,
        12965
      ]
    },
    {
      "content": "The following code shows how to get the items in the mobile service table, clear the adapter, and then call the adapter's <bpt id=\"p1\">*</bpt>add<ept id=\"p1\">*</ept> method to fill it with the returned items.",
      "pos": [
        12966,
        13136
      ]
    },
    {
      "pos": [
        13139,
        13164
      ],
      "content": "<bpt id=\"p1\">**</bpt>TBD<ept id=\"p1\">**</ept>: Test this code!!"
    },
    {
      "content": "You must also call the adapter any time you modify the <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> table if you want to display the results of doing that.",
      "pos": [
        14048,
        14169
      ]
    },
    {
      "content": "Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection.",
      "pos": [
        14170,
        14290
      ]
    },
    {
      "content": "When you insert an item you call the <bpt id=\"p1\">*</bpt>add<ept id=\"p1\">*</ept> method on the adapter, when deleting, you call the <bpt id=\"p2\">*</bpt>remove<ept id=\"p2\">*</ept> method.",
      "pos": [
        14291,
        14401
      ]
    },
    {
      "pos": [
        14405,
        14475
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"querying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Query data from your Mobile App backend"
    },
    {
      "content": "This section describes how to issue queries to the Mobile App backend, which includes the following tasks:",
      "pos": [
        14477,
        14583
      ]
    },
    {
      "content": "Return all Items",
      "pos": [
        14588,
        14604
      ]
    },
    {
      "content": "Filter returned data",
      "pos": [
        14609,
        14629
      ]
    },
    {
      "content": "Sort returned data",
      "pos": [
        14634,
        14652
      ]
    },
    {
      "content": "Return data in pages",
      "pos": [
        14657,
        14677
      ]
    },
    {
      "content": "Select specific columns",
      "pos": [
        14682,
        14705
      ]
    },
    {
      "content": "Concatenate query methods",
      "pos": [
        14710,
        14735
      ]
    },
    {
      "pos": [
        14753,
        14812
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"showAll\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Return all Items from a Table"
    },
    {
      "pos": [
        14814,
        14876
      ],
      "content": "The following query returns all items in the <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> table."
    },
    {
      "pos": [
        14936,
        15007
      ],
      "content": "The <bpt id=\"p1\">*</bpt>results<ept id=\"p1\">*</ept> variable returns the result set from the query as a list."
    },
    {
      "pos": [
        15013,
        15065
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"filtering\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Filter returned data"
    },
    {
      "content": "The following query execution returns all items from the <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> table where <bpt id=\"p2\">*</bpt>complete<ept id=\"p2\">*</ept> equals <bpt id=\"p3\">*</bpt>false<ept id=\"p3\">*</ept>.",
      "pos": [
        15067,
        15173
      ]
    },
    {
      "content": "This is the code that is already in the Quickstart.",
      "pos": [
        15174,
        15225
      ]
    },
    {
      "pos": [
        15386,
        15471
      ],
      "content": "<bpt id=\"p1\">*</bpt>mToDoTable<ept id=\"p1\">*</ept> is the reference to the mobile service table that we created previously."
    },
    {
      "content": "You define a filter using the <bpt id=\"p1\">**</bpt>where<ept id=\"p1\">**</ept> method call on the table reference.",
      "pos": [
        15473,
        15548
      ]
    },
    {
      "content": "This is followed by a <bpt id=\"p1\">**</bpt>field<ept id=\"p1\">**</ept> method call followed by a method call that specifies the logical predicate.",
      "pos": [
        15549,
        15656
      ]
    },
    {
      "content": "Possible predicate methods include <bpt id=\"p1\">**</bpt>eq<ept id=\"p1\">**</ept> (equals), <bpt id=\"p2\">**</bpt>ne<ept id=\"p2\">**</ept> (not equal), <bpt id=\"p3\">**</bpt>gt<ept id=\"p3\">**</ept> (greater than), <bpt id=\"p4\">**</bpt>ge<ept id=\"p4\">**</ept> (greater than or equal to), <bpt id=\"p5\">**</bpt>lt<ept id=\"p5\">**</ept> (less than), <bpt id=\"p6\">**</bpt>le<ept id=\"p6\">**</ept> (less than or equal to), and etc. These methods let you compare number and string fields to specific values.",
      "pos": [
        15657,
        15922
      ]
    },
    {
      "content": "You can filter on dates.",
      "pos": [
        15924,
        15948
      ]
    },
    {
      "content": "The following methods let you compare the entire date field or parts of of the date: <bpt id=\"p1\">**</bpt>year<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>month<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>day<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>hour<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>minute<ept id=\"p5\">**</ept> and <bpt id=\"p6\">**</bpt>second<ept id=\"p6\">**</ept>.",
      "pos": [
        15949,
        16100
      ]
    },
    {
      "content": "The following example adds a filter for items whose <bpt id=\"p1\">*</bpt>due date<ept id=\"p1\">*</ept> equals 2013.",
      "pos": [
        16101,
        16176
      ]
    },
    {
      "content": "The following methods support complex filters on string fields: <bpt id=\"p1\">**</bpt>startsWith<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>endsWith<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>concat<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>subString<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>indexOf<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>replace<ept id=\"p6\">**</ept>, <bpt id=\"p7\">**</bpt>toLower<ept id=\"p7\">**</ept>, <bpt id=\"p8\">**</bpt>toUpper<ept id=\"p8\">**</ept>, <bpt id=\"p9\">**</bpt>trim<ept id=\"p9\">**</ept>, and <bpt id=\"p10\">**</bpt>length<ept id=\"p10\">**</ept>.",
      "pos": [
        16240,
        16438
      ]
    },
    {
      "content": "The following example filters for table rows where the <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> column starts with \"PRI0\".",
      "pos": [
        16439,
        16527
      ]
    },
    {
      "content": "The following operator methods are supported on number fields: <bpt id=\"p1\">**</bpt>add<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>sub<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>mul<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>div<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>mod<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>floor<ept id=\"p6\">**</ept>, <bpt id=\"p7\">**</bpt>ceiling<ept id=\"p7\">**</ept>, and <bpt id=\"p8\">**</bpt>round<ept id=\"p8\">**</ept>.",
      "pos": [
        16597,
        16743
      ]
    },
    {
      "content": "The following example filters for table rows where the <bpt id=\"p1\">*</bpt>duration<ept id=\"p1\">*</ept> is an even number.",
      "pos": [
        16744,
        16828
      ]
    },
    {
      "content": "You can combine predicates with these logical methods: <bpt id=\"p1\">**</bpt>and<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>or<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>not<ept id=\"p3\">**</ept>.",
      "pos": [
        16902,
        16985
      ]
    },
    {
      "content": "The following example combines two of the above examples.",
      "pos": [
        16986,
        17043
      ]
    },
    {
      "content": "And you can group and nest logical operators, like this:",
      "pos": [
        17157,
        17213
      ]
    },
    {
      "pos": [
        17411,
        17604
      ],
      "content": "For more detailed discussion and examples of filtering, see <bpt id=\"p1\">[</bpt>Exploring the richness of the Android client query model<ept id=\"p1\">](http://hashtagfail.com/post/46493261719/mobile-services-android-querying)</ept>."
    },
    {
      "pos": [
        17610,
        17658
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"sorting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Sort returned data"
    },
    {
      "content": "The following code returns all items from a table of <bpt id=\"p1\">*</bpt>ToDoItems<ept id=\"p1\">*</ept> sorted ascending by the <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept> field.",
      "pos": [
        17660,
        17762
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>mToDoTable<ept id=\"p1\">*</ept> is the reference to the backend table that you created previously:",
      "pos": [
        17763,
        17842
      ]
    },
    {
      "pos": [
        17915,
        18021
      ],
      "content": "The first parameter of the <bpt id=\"p1\">**</bpt>orderBy<ept id=\"p1\">**</ept> method is a string equal to the name of the field on which to sort."
    },
    {
      "pos": [
        18023,
        18131
      ],
      "content": "The second parameter uses the <bpt id=\"p1\">**</bpt>QueryOrder<ept id=\"p1\">**</ept> enumeration to specify whether to sort ascending or descending."
    },
    {
      "pos": [
        18133,
        18267
      ],
      "content": "Note that if you are filtering using the <bpt id=\"p1\">***</bpt>where<ept id=\"p1\">***</ept> method, the <bpt id=\"p2\">***</bpt>where<ept id=\"p2\">***</ept> method must be invoked prior to the <bpt id=\"p3\">***</bpt>orderBy<ept id=\"p3\">***</ept> method."
    },
    {
      "pos": [
        18273,
        18322
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"paging\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Return data in pages"
    },
    {
      "content": "The first example shows how to select the top 5 items from a table.",
      "pos": [
        18324,
        18391
      ]
    },
    {
      "content": "The query returns the items from a table of  <bpt id=\"p1\">*</bpt>ToDoItems<ept id=\"p1\">*</ept>.",
      "pos": [
        18392,
        18449
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>mToDoTable<ept id=\"p1\">*</ept> is the reference to the backend table that you created previously:",
      "pos": [
        18450,
        18529
      ]
    },
    {
      "content": "Here's a query that skips the first 5 items, and then returns the next 5:",
      "pos": [
        18596,
        18669
      ]
    },
    {
      "pos": [
        18724,
        18779
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"selecting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Select specific columns"
    },
    {
      "content": "The following code illustrates how to return all items from a table of  <bpt id=\"p1\">*</bpt>ToDoItems<ept id=\"p1\">*</ept>, but only displays the <bpt id=\"p2\">*</bpt>complete<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>text<ept id=\"p3\">*</ept> fields.",
      "pos": [
        18781,
        18917
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>mToDoTable<ept id=\"p1\">*</ept> is the reference to the backend table that we created previously.",
      "pos": [
        18918,
        18996
      ]
    },
    {
      "content": "Here the parameters to the select function are the string names of the table's columns that you want to return.",
      "pos": [
        19089,
        19200
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>select<ept id=\"p1\">**</ept> method needs to follow methods like <bpt id=\"p2\">**</bpt>where<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>orderBy<ept id=\"p3\">**</ept>, if they are present.",
      "pos": [
        19202,
        19300
      ]
    },
    {
      "content": "It can be followed by paging methods like <bpt id=\"p1\">**</bpt>top<ept id=\"p1\">**</ept>.",
      "pos": [
        19301,
        19351
      ]
    },
    {
      "pos": [
        19357,
        19413
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"chaining\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Concatenate query methods"
    },
    {
      "content": "As you have seen, the methods used in querying backend tables can be concatenated.",
      "pos": [
        19415,
        19497
      ]
    },
    {
      "content": "This allows you to do things like select specific columns of filtered rows that are sorted and paged.",
      "pos": [
        19498,
        19599
      ]
    },
    {
      "content": "You can create quite complex logical filters.",
      "pos": [
        19600,
        19645
      ]
    },
    {
      "content": "What makes this work is that the query methods you use return <bpt id=\"p1\">**</bpt>MobileServiceQuery&amp;lt;T&amp;gt;<ept id=\"p1\">**</ept> objects, which can in turn have additional methods invoked on them.",
      "pos": [
        19647,
        19808
      ]
    },
    {
      "content": "To end the series of methods and actually run the query, you call the <bpt id=\"p1\">**</bpt>execute<ept id=\"p1\">**</ept> method.",
      "pos": [
        19809,
        19898
      ]
    },
    {
      "pos": [
        19900,
        19979
      ],
      "content": "Here's a code sample where <bpt id=\"p1\">*</bpt>mToDoTable<ept id=\"p1\">*</ept> is a reference to the <bpt id=\"p2\">*</bpt>ToDoItem<ept id=\"p2\">*</ept> table."
    },
    {
      "content": "The main requirement in chaining methods together is that the <bpt id=\"p1\">*</bpt>where<ept id=\"p1\">*</ept> method and predicates need to come first.",
      "pos": [
        20292,
        20403
      ]
    },
    {
      "content": "After that, you can call subsequent methods in the order that best meets the needs of your application.",
      "pos": [
        20404,
        20507
      ]
    },
    {
      "pos": [
        20512,
        20572
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"inserting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Insert data into the backend"
    },
    {
      "content": "The following code shows how to insert a new row into a table.",
      "pos": [
        20574,
        20636
      ]
    },
    {
      "pos": [
        20638,
        20719
      ],
      "content": "First you instantiate an instance of the <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> class and set its properties."
    },
    {
      "content": "Next you execute the following code:",
      "pos": [
        20817,
        20853
      ]
    },
    {
      "content": "The returned entity matches the data inserted into the backend table, included the ID and any other values set on the backend.",
      "pos": [
        20909,
        21035
      ]
    },
    {
      "content": "Mobile Apps requires that each table have a column named <bpt id=\"p1\">**</bpt>id<ept id=\"p1\">**</ept>, which is used to index the table.",
      "pos": [
        21037,
        21135
      ]
    },
    {
      "content": "By default, this column is a string data type, which is needed to support offline sync.",
      "pos": [
        21136,
        21223
      ]
    },
    {
      "content": "The default value of the ID column is a GUID, but you can provide other unique values, such as email addresses or usernames.",
      "pos": [
        21224,
        21348
      ]
    },
    {
      "content": "When a string ID value is not provided for an inserted record, the backend generates a new GUID value.",
      "pos": [
        21349,
        21451
      ]
    },
    {
      "content": "String ID values provide the following advantages:",
      "pos": [
        21453,
        21503
      ]
    },
    {
      "content": "IDs can be generated without making a round-trip to the database.",
      "pos": [
        21507,
        21572
      ]
    },
    {
      "content": "Records are easier to merge from different tables or databases.",
      "pos": [
        21575,
        21638
      ]
    },
    {
      "content": "ID values integrate better with an application's logic.",
      "pos": [
        21641,
        21696
      ]
    },
    {
      "pos": [
        21700,
        21758
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"updating\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Update data in a mobile app"
    },
    {
      "content": "The following code shows how to update data in a table.",
      "pos": [
        21760,
        21815
      ]
    },
    {
      "pos": [
        21853,
        21964
      ],
      "content": "In this example, <bpt id=\"p1\">*</bpt>item<ept id=\"p1\">*</ept> is a reference to a row in the <bpt id=\"p2\">*</bpt>ToDoItem<ept id=\"p2\">*</ept> table, which has had some changes made to it."
    },
    {
      "pos": [
        21968,
        22026
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"deleting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Delete data in a mobile app"
    },
    {
      "content": "The following code shows how to delete data from a table by specifying the data object.",
      "pos": [
        22028,
        22115
      ]
    },
    {
      "pos": [
        22147,
        22227
      ],
      "content": "You can also delete an item by specifying the <bpt id=\"p1\">**</bpt>id<ept id=\"p1\">**</ept> field of the row to delete."
    },
    {
      "pos": [
        22326,
        22378
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"lookup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Look up a specific item"
    },
    {
      "pos": [
        22380,
        22440
      ],
      "content": "This code shows how to look up an item with a specific <bpt id=\"p1\">*</bpt>id<ept id=\"p1\">*</ept>."
    },
    {
      "pos": [
        22582,
        22634
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"untyped\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Work with untyped data"
    },
    {
      "content": "The untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your backend table contains a large number of columns and you only need to reference a few of them.",
      "pos": [
        22636,
        22893
      ]
    },
    {
      "content": "Using the typed model requires you to define all of the mobile apps table's columns in your data class.",
      "pos": [
        22894,
        22997
      ]
    },
    {
      "content": "But with the untyped model you only define the columns you need to use.",
      "pos": [
        22998,
        23069
      ]
    },
    {
      "content": "Most of the API calls for accessing data are similar to the typed programming calls.",
      "pos": [
        23071,
        23155
      ]
    },
    {
      "content": "The main difference is that in the untyped model you invoke methods on the <bpt id=\"p1\">**</bpt>MobileServiceJsonTable<ept id=\"p1\">**</ept> object, instead of the <bpt id=\"p2\">**</bpt>MobileServiceTable<ept id=\"p2\">**</ept> object.",
      "pos": [
        23156,
        23311
      ]
    },
    {
      "pos": [
        23318,
        23392
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"json_instance\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create an instance of an untyped table"
    },
    {
      "content": "Similar to the typed model, you start by getting a table reference, but in this case it's a <bpt id=\"p1\">**</bpt>MobileServicesJsonTable<ept id=\"p1\">**</ept> object.",
      "pos": [
        23394,
        23521
      ]
    },
    {
      "content": "You get the reference by calling the <bpt id=\"p1\">**</bpt>getTable<ept id=\"p1\">**</ept> method on an instance of the client, like this:",
      "pos": [
        23522,
        23619
      ]
    },
    {
      "content": "Once you have created an instance of the <bpt id=\"p1\">**</bpt>MobileServiceJsonTable<ept id=\"p1\">**</ept>, you can call almost all of the methods on it that you can with the typed programming model.",
      "pos": [
        23734,
        23894
      ]
    },
    {
      "content": "However in some cases the methods take an untyped parameter, as we see in the following examples.",
      "pos": [
        23895,
        23992
      ]
    },
    {
      "pos": [
        23998,
        24060
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"json_insert\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Insert into an untyped table"
    },
    {
      "content": "The following code shows how to do an insert.",
      "pos": [
        24062,
        24107
      ]
    },
    {
      "content": "The first step is to create a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>JsonObject<ept id=\"p2\">**</ept><ept id=\"p1\">](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)</ept>, which is part of the <bpt id=\"p3\">[</bpt>gson<ept id=\"p3\">]( http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library.",
      "pos": [
        24108,
        24338
      ]
    },
    {
      "content": "The next step is to insert the object.",
      "pos": [
        24475,
        24513
      ]
    },
    {
      "content": "If you need to get the ID of the inserted object, use this method call:",
      "pos": [
        24560,
        24631
      ]
    },
    {
      "pos": [
        24690,
        24752
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"json_delete\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Delete from an untyped table"
    },
    {
      "content": "The following code shows how to delete an instance, in this case, the same instance of a <bpt id=\"p1\">**</bpt>JsonObject<ept id=\"p1\">**</ept> that was created in the prior <bpt id=\"p2\">*</bpt>insert<ept id=\"p2\">*</ept> example.",
      "pos": [
        24754,
        24905
      ]
    },
    {
      "content": "Note that the code is the same as with the typed case, but the method has a different signature since it references an <bpt id=\"p1\">**</bpt>JsonObject<ept id=\"p1\">**</ept>.",
      "pos": [
        24906,
        25040
      ]
    },
    {
      "content": "You can also delete an instance directly by using its ID:",
      "pos": [
        25083,
        25140
      ]
    },
    {
      "pos": [
        25180,
        25248
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"json_get\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Return all rows from an untyped table"
    },
    {
      "content": "The following code shows how to retrieve an entire table.",
      "pos": [
        25250,
        25307
      ]
    },
    {
      "content": "Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.",
      "pos": [
        25308,
        25404
      ]
    },
    {
      "content": "You can do filtering, sorting and paging by concatenating  methods that have the same names as those used in the typed programming model.",
      "pos": [
        26909,
        27046
      ]
    },
    {
      "pos": [
        27052,
        27102
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"custom-api\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Call a custom API"
    },
    {
      "content": "A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.",
      "pos": [
        27104,
        27255
      ]
    },
    {
      "content": "By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.",
      "pos": [
        27256,
        27423
      ]
    },
    {
      "content": "From an Android client, you call the <bpt id=\"p1\">**</bpt>invokeApi<ept id=\"p1\">**</ept> method to call the custom API endpoint.",
      "pos": [
        27425,
        27515
      ]
    },
    {
      "content": "The following example shows how to call an API endpoint named <bpt id=\"p1\">*</bpt>completeAll<ept id=\"p1\">*</ept>, which returns a collection class named MarkAllResult.",
      "pos": [
        27516,
        27646
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>invokeApi<ept id=\"p1\">**</ept> method is called on the client, which sends a POST request to the new custom API.",
      "pos": [
        28333,
        28432
      ]
    },
    {
      "content": "The result returned by the custom API is displayed in a message dialog, as are any errors.",
      "pos": [
        28433,
        28523
      ]
    },
    {
      "content": "Other versions of <bpt id=\"p1\">**</bpt>invokeApi<ept id=\"p1\">**</ept> let you optionally send an object in the request body, specify the HTTP method, and send query parameters with the request.",
      "pos": [
        28524,
        28679
      ]
    },
    {
      "content": "Untyped versions of <bpt id=\"p1\">**</bpt>invokeApi<ept id=\"p1\">**</ept> are provided as well.",
      "pos": [
        28680,
        28735
      ]
    },
    {
      "pos": [
        28739,
        28806
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"authentication\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: add authentication to your app"
    },
    {
      "content": "Tutorials already describe in detail how to add these features.",
      "pos": [
        28808,
        28871
      ]
    },
    {
      "content": "App Service supports <bpt id=\"p1\">[</bpt>authenticating app users<ept id=\"p1\">](app-service-mobile-android-get-started-users.md)</ept> using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory.",
      "pos": [
        28873,
        29091
      ]
    },
    {
      "content": "You can set permissions on tables to restrict access for specific operations to only authenticated users.",
      "pos": [
        29092,
        29197
      ]
    },
    {
      "content": "You can also use the identity of authenticated users to implement authorization rules in your backend.",
      "pos": [
        29198,
        29300
      ]
    },
    {
      "content": "Two authentication flows are supported: a <bpt id=\"p1\">*</bpt>server<ept id=\"p1\">*</ept> flow and a <bpt id=\"p2\">*</bpt>client<ept id=\"p2\">*</ept> flow.",
      "pos": [
        29302,
        29378
      ]
    },
    {
      "content": "The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.",
      "pos": [
        29379,
        29504
      ]
    },
    {
      "content": "The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs, and requires you to code this.",
      "pos": [
        29505,
        29694
      ]
    },
    {
      "content": "Three steps are required to enable authentication in your app:",
      "pos": [
        29696,
        29758
      ]
    },
    {
      "content": "Register your app for authentication with a provider, and configure your Mobile App backend.",
      "pos": [
        29762,
        29854
      ]
    },
    {
      "content": "Restrict table permissions to authenticated users only.",
      "pos": [
        29857,
        29912
      ]
    },
    {
      "content": "Add authentication code to your app.",
      "pos": [
        29915,
        29951
      ]
    },
    {
      "content": "You can set permissions on tables to restrict access for specific operations to only authenticated users.",
      "pos": [
        29953,
        30058
      ]
    },
    {
      "content": "You can also use the SID of an authenticated user to modify requests.",
      "pos": [
        30059,
        30128
      ]
    },
    {
      "content": "These first two tasks are done using the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://portal.azure.com/)</ept>.",
      "pos": [
        30130,
        30213
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Get started with authentication]</ept>.",
      "pos": [
        30214,
        30274
      ]
    },
    {
      "pos": [
        30280,
        30345
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"caching\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Add authentication code to your app"
    },
    {
      "content": "The following code starts the server flow login process using the Google provider:",
      "pos": [
        30347,
        30429
      ]
    },
    {
      "content": "You can get the ID of the logged-in user from a <bpt id=\"p1\">**</bpt>MobileServiceUser<ept id=\"p1\">**</ept>  using the <bpt id=\"p2\">**</bpt>getUserId<ept id=\"p2\">**</ept> method.",
      "pos": [
        30520,
        30622
      ]
    },
    {
      "content": "For an example of how to use Futures to call the asynchronous login APIs, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Get started with authentication]</ept>.",
      "pos": [
        30623,
        30735
      ]
    },
    {
      "pos": [
        30742,
        30799
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"caching\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Cache authentication tokens"
    },
    {
      "content": "Caching authentication tokens requires you to store the User ID and authentication token locally on the device.",
      "pos": [
        30801,
        30912
      ]
    },
    {
      "content": "The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data.",
      "pos": [
        30913,
        31072
      ]
    },
    {
      "content": "However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.",
      "pos": [
        31073,
        31180
      ]
    },
    {
      "pos": [
        31182,
        31354
      ],
      "content": "You can see a complete example of how to cache authentication tokens in <bpt id=\"p1\">[</bpt>Cache authentication tokens section<ept id=\"p1\">](app-service-mobile-android-get-started-users.md#cache-tokens)</ept>."
    },
    {
      "content": "When you try to use an expired token you will get a <bpt id=\"p1\">*</bpt>401 unauthorized<ept id=\"p1\">*</ept> response.",
      "pos": [
        31356,
        31436
      ]
    },
    {
      "content": "The user must then log in to obtain new tokens.",
      "pos": [
        31437,
        31484
      ]
    },
    {
      "content": "You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services.",
      "pos": [
        31485,
        31684
      ]
    },
    {
      "content": "The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401.",
      "pos": [
        31685,
        31830
      ]
    },
    {
      "content": "You can also inspect the token to check the expiration.",
      "pos": [
        31831,
        31886
      ]
    },
    {
      "pos": [
        31892,
        31986
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"adal\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Authenticate users with the Active Directory Authentication Library"
    },
    {
      "content": "You can use the Active Directory Authentication Library (ADAL) to sign users into your application using Azure Active Directory.",
      "pos": [
        31988,
        32116
      ]
    },
    {
      "content": "This is often preferable to using the <ph id=\"ph1\">`loginAsync()`</ph> methods, as it provides a more native UX feel and allows for additional customization.",
      "pos": [
        32117,
        32256
      ]
    },
    {
      "content": "Configure your mobile app backend for AAD sign-in by followin the <bpt id=\"p1\">[</bpt>How to configure App Service for Active Directory login<ept id=\"p1\">](app-service-mobile-how-to-configure-active-directory-authentication.md)</ept> tutorial.",
      "pos": [
        32261,
        32466
      ]
    },
    {
      "content": "Make sure to complete the optional step of registering a native client application.",
      "pos": [
        32467,
        32550
      ]
    },
    {
      "content": "Install ADAL by modifying your build.gradle file to include the following:",
      "pos": [
        32555,
        32629
      ]
    },
    {
      "pos": [
        32635,
        33195
      ],
      "content": "repositories {\n     mavenCentral()\n     flatDir {\n         dirs 'libs'\n     }\n     maven {\n         url \"YourLocalMavenRepoPath\\\\.m2\\\\repository\"\n     }\n }\n packagingOptions {\n     exclude 'META-INF/MSFTSIG.RSA'\n     exclude 'META-INF/MSFTSIG.SF'\n }\n dependencies {\n     compile fileTree(dir: 'libs', include: ['*.jar'])\n     compile('com.microsoft.aad:adal:1.1.1') {\n         exclude group: 'com.android.support'\n     } // Recent version is 1.1.1\n     compile 'com.android.support:support-v4:23.0.0'\n }",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "repositories {",
          "pos": [
            0,
            14
          ]
        },
        {
          "content": "mavenCentral()",
          "pos": [
            20,
            34
          ]
        },
        {
          "content": "flatDir {",
          "pos": [
            40,
            49
          ]
        },
        {
          "content": "dirs 'libs'",
          "pos": [
            59,
            70
          ]
        },
        {
          "content": "}",
          "pos": [
            76,
            77
          ]
        },
        {
          "content": "maven {",
          "pos": [
            83,
            90
          ]
        },
        {
          "content": "url \"YourLocalMavenRepoPath\\\\.m2\\\\repository\"",
          "pos": [
            100,
            145
          ]
        },
        {
          "content": "}",
          "pos": [
            151,
            152
          ]
        },
        {
          "content": "}",
          "pos": [
            154,
            155
          ]
        },
        {
          "content": "packagingOptions {",
          "pos": [
            157,
            175
          ]
        },
        {
          "content": "exclude 'META-INF/MSFTSIG.RSA'",
          "pos": [
            181,
            211
          ]
        },
        {
          "content": "exclude 'META-INF/MSFTSIG.SF'",
          "pos": [
            217,
            246
          ]
        },
        {
          "content": "}",
          "pos": [
            248,
            249
          ]
        },
        {
          "content": "dependencies {",
          "pos": [
            251,
            265
          ]
        },
        {
          "content": "compile fileTree(dir: 'libs', include: ['*.jar'])",
          "pos": [
            271,
            320
          ]
        },
        {
          "content": "compile('com.microsoft.aad:adal:1.1.1') {",
          "pos": [
            326,
            367
          ]
        },
        {
          "content": "exclude group: 'com.android.support'",
          "pos": [
            377,
            413
          ]
        },
        {
          "content": "} // Recent version is 1.1.1",
          "pos": [
            419,
            447
          ]
        },
        {
          "content": "compile 'com.android.support:support-v4:23.0.0'",
          "pos": [
            453,
            500
          ]
        },
        {
          "content": "}",
          "pos": [
            502,
            503
          ]
        }
      ]
    },
    {
      "content": "Add the below code to your application, making the following replacements:",
      "pos": [
        33200,
        33274
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-AUTHORITY-HERE<ept id=\"p1\">**</ept> ith the name of the tenant in which you provisioned your application.",
      "pos": [
        33278,
        33381
      ]
    },
    {
      "content": "The format should be https://login.windows.net/contoso.onmicrosoft.com.",
      "pos": [
        33382,
        33453
      ]
    },
    {
      "content": "This value can be copied out of the Domain tab in your Azure Active Directory in the [Azure classic portal].",
      "pos": [
        33454,
        33562
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-RESOURCE-ID-HERE<ept id=\"p1\">**</ept> with the client ID for your mobile app backend.",
      "pos": [
        33566,
        33649
      ]
    },
    {
      "content": "You can obtain this from the <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept> tab under <bpt id=\"p2\">**</bpt>Azure Active Directory Settings<ept id=\"p2\">**</ept> in the portal.",
      "pos": [
        33650,
        33752
      ]
    },
    {
      "pos": [
        33756,
        33855
      ],
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-CLIENT-ID-HERE<ept id=\"p1\">**</ept> with the client ID you copied from the native client application."
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-REDIRECT-URI-HERE<ept id=\"p1\">**</ept> with your site's <bpt id=\"p2\">_</bpt>/.auth/login/done<ept id=\"p2\">_</ept> endpoint, using the HTTPS scheme.",
      "pos": [
        33859,
        33966
      ]
    },
    {
      "content": "This value should be similar to <bpt id=\"p1\">_</bpt>https://contoso.azurewebsites.net/.auth/login/done<ept id=\"p1\">_</ept>.",
      "pos": [
        33967,
        34052
      ]
    },
    {
      "content": "How to: add push notification to your app",
      "pos": [
        36544,
        36585
      ]
    },
    {
      "pos": [
        36587,
        36786
      ],
      "content": "You can <bpt id=\"p1\">[</bpt>read an overview<ept id=\"p1\">](notification-hubs-overview.md/#integration-with-app-service-mobile-apps)</ept> that describes how Microsoft Azure Notification Hubs supports a wide variety of push notifications,"
    },
    {
      "pos": [
        36788,
        36917
      ],
      "content": "In <bpt id=\"p1\">[</bpt>this tutorial<ept id=\"p1\">](app-service-mobile-android-get-started-push.md)</ept>, every time a record is inserted, a push notification is sent."
    },
    {
      "content": "How to: add offline sync to your app",
      "pos": [
        36922,
        36958
      ]
    },
    {
      "content": "The Quickstart tutorial contains code that implements offline sync.",
      "pos": [
        36959,
        37026
      ]
    },
    {
      "content": "Look for code prefixed with comments like this:",
      "pos": [
        37027,
        37074
      ]
    },
    {
      "content": "By uncommenting the following lines of code you can implement offline sync, and you can add similar code to other Mobile Apps code.",
      "pos": [
        37097,
        37228
      ]
    },
    {
      "pos": [
        37232,
        37286
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"customizing\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Customize the client"
    },
    {
      "content": "There are several ways for you to customize the default behavior of the client.",
      "pos": [
        37288,
        37367
      ]
    },
    {
      "pos": [
        37373,
        37428
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"headers\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Customize request headers"
    },
    {
      "content": "You might want to attach a custom header to every outgoing request.",
      "pos": [
        37430,
        37497
      ]
    },
    {
      "content": "You can accomplish that by configuring a <bpt id=\"p1\">**</bpt>ServiceFilter<ept id=\"p1\">**</ept> like this:",
      "pos": [
        37498,
        37567
      ]
    },
    {
      "pos": [
        38358,
        38417
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"serialization\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Customize serialization"
    },
    {
      "content": "The client assumes that the table names, column names and data types on the backend all match exactly the data objects defined in the client.",
      "pos": [
        38419,
        38560
      ]
    },
    {
      "content": "But there can be any number of reasons why the server and client names might not match.",
      "pos": [
        38561,
        38648
      ]
    },
    {
      "content": "In your scenario, you might want to do the following kinds of customizations:",
      "pos": [
        38649,
        38726
      ]
    },
    {
      "content": "The column names used in the mobile-  service table don't match the names you are using in the client.",
      "pos": [
        38730,
        38832
      ]
    },
    {
      "content": "Use a mobile service table that has a different name than the class it maps to in the client.",
      "pos": [
        38835,
        38928
      ]
    },
    {
      "content": "Turn on automatic property capitalization.",
      "pos": [
        38931,
        38973
      ]
    },
    {
      "content": "Add complex properties to an object.",
      "pos": [
        38976,
        39012
      ]
    },
    {
      "pos": [
        39018,
        39085
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"columns\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Map different client and server names"
    },
    {
      "pos": [
        39087,
        39213
      ],
      "content": "Suppose that your Java client code uses standard Java-style names for the <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> object properties, such as the following."
    },
    {
      "content": "mId",
      "pos": [
        39217,
        39220
      ]
    },
    {
      "content": "mText",
      "pos": [
        39223,
        39228
      ]
    },
    {
      "content": "mComplete",
      "pos": [
        39231,
        39240
      ]
    },
    {
      "content": "mDuration",
      "pos": [
        39243,
        39252
      ]
    },
    {
      "content": "You must serialize the client names into JSON names that match the column names of the <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> table on the server.",
      "pos": [
        39255,
        39373
      ]
    },
    {
      "content": "The following code, which makes use of the <bpt id=\"p1\">[</bpt>gson<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library does this.",
      "pos": [
        39374,
        39491
      ]
    },
    {
      "pos": [
        39839,
        39927
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"table\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Map different table names between the client and the backend"
    },
    {
      "content": "Mapping the client table name to a different mobile services table name is easy, we just use one of the overrides of the",
      "pos": [
        39929,
        40049
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a href=\"http://go.microsoft.com/fwlink/p/?LinkId=296840\" target=\"_blank\"&gt;</ph>getTable()<ph id=\"ph2\">&lt;/a&gt;</ph> function, as seen in the following code.",
      "pos": [
        40050,
        40179
      ]
    },
    {
      "pos": [
        40256,
        40319
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"conversions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Automate column name mappings"
    },
    {
      "content": "Mapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section.",
      "pos": [
        40321,
        40434
      ]
    },
    {
      "content": "But suppose our table has a lot of columns, say 20 or 30.",
      "pos": [
        40435,
        40492
      ]
    },
    {
      "content": "It turns out that we can call the <ph id=\"ph1\">&lt;a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph2\">&lt;/a&gt;</ph> API and specify a conversion strategy that will apply to every column, and avoid having to annotate every single column name.",
      "pos": [
        40493,
        40736
      ]
    },
    {
      "pos": [
        40738,
        40987
      ],
      "content": "To do this we use the <ph id=\"ph1\">&lt;a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph2\">&lt;/a&gt;</ph> library which the Android client library uses behind the scenes to serialize Java objects to JSON data, which is sent to Azure Mobile Services."
    },
    {
      "content": "The following code uses the <bpt id=\"p1\">*</bpt>setFieldNamingStrategy()<ept id=\"p1\">*</ept> method, in which we define a <bpt id=\"p2\">*</bpt>FieldNamingStrategy()<ept id=\"p2\">*</ept> method.",
      "pos": [
        40989,
        41104
      ]
    },
    {
      "content": "This method says to delete the initial character (an \"m\"), and then lower-case the next character, for every field name.",
      "pos": [
        41105,
        41225
      ]
    },
    {
      "content": "This code also enables pretty-printing of the output JSON.",
      "pos": [
        41226,
        41284
      ]
    },
    {
      "content": "This code must be executed prior to any method calls on the Mobile Services client object.",
      "pos": [
        41718,
        41808
      ]
    },
    {
      "pos": [
        41814,
        41890
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"complex\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Store an object or array property into a table"
    },
    {
      "content": "So far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table.",
      "pos": [
        41892,
        42060
      ]
    },
    {
      "content": "Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table.",
      "pos": [
        42061,
        42184
      ]
    },
    {
      "content": "For example we might want to add an array of strings to the client object.",
      "pos": [
        42185,
        42259
      ]
    },
    {
      "content": "It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.",
      "pos": [
        42260,
        42377
      ]
    },
    {
      "pos": [
        42379,
        42719
      ],
      "content": "To see an example of how to do this, check out the blog post <ph id=\"ph1\">&lt;a href=\"http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson\" target=\"_blank\"&gt;</ph>Customizing serialization using the <ph id=\"ph2\">&lt;a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph3\">&lt;/a&gt;</ph> library in the Mobile Services Android client<ph id=\"ph4\">&lt;/a&gt;</ph>."
    },
    {
      "content": "This general method can be used whenever we have a complex object that is not automatically serializable into JSON and the mobile services table.",
      "pos": [
        42721,
        42866
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use the Android Mobile Apps Client Library\"\n    description=\"How to use Android client SDK for Azure Mobile Apps.\"\n    services=\"app-service\\mobile\"\n    documentationCenter=\"android\"\n    authors=\"RickSaling\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-mobile\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-android\"\n    ms.devlang=\"java\"\n    ms.topic=\"article\"\n    ms.date=\"02/04/2016\"\n    ms.author=\"ricksal\"/>\n\n\n# How to use the Android client library for Mobile Apps\n\n[AZURE.INCLUDE [app-service-mobile-selector-client-library](../../includes/app-service-mobile-selector-client-library.md)]\n\nThis guide shows you how to use the Android client SDK for Mobile Apps to implement common scenarios, such as querying\nfor data (inserting, updating, and deleting), authenticating users, handling errors, and customizing the client. It also\ndoes a deep-dive into common client code used in most mobile apps.\n\nThis guide focuses on the client-side Android SDK.  To learn more about the server-side SDKs for Mobile Apps, see\n[Work with .NET backend SDK](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md) or\n[How to use the Node.js backend SDK](app-service-mobile-node-backend-how-to-use-server-sdk.md).\n\n## Reference Documentation\n\nYou can find the Javadocs API reference for the Android client library [on GitHub](http://azure.github.io/azure-mobile-apps-android-client/).\n\n## Setup and Prerequisites\n\nThe Mobile Services SDK for Android supports Android version 2.2 or later, but we recommend building against version 4.2 or later.\n\nComplete the [Mobile Apps quickstart](app-service-mobile-android-get-started.md) tutorial, which will ensure that you have\ninstalled Android Studio; it will help you configure your account and create your first Mobile App backend. If you do this,\nyou can skip the rest of this section.\n\nIf you decide not to complete the Quickstart tutorial, and want to connect an Android app to a Mobile App backend, you\nneed to do the following:\n\n- [create a Mobile App backend](app-service-mobile-android-get-started.md#create-a-new-azure-mobile-app-backend) to use\n  with your Android app (unless your app already has one)\n- In Android Studio, [update the Gradle build files](#gradle-build), and\n- [Enable internet permission](#enable-internet)\n\nAfter this, you will need to complete the steps described in the Deep dive section.\n\n###<a name=\"gradle-build\"></a>Update the Gradle build file\n\nChange both **build.gradle** files:\n\n1. Add this code to the *Project* level **build.gradle** file inside the *buildscript* tag:\n\n        buildscript {\n            repositories {\n                jcenter()\n            }\n        }\n\n2. Add this code to the *Module app* level **build.gradle** file inside the *dependencies* tag:\n\n        compile 'com.microsoft.azure:azure-mobile-android:3.1'\n\n    Currently the latest version is 3.1. The supported versions are listed [here](http://go.microsoft.com/fwlink/p/?LinkID=717034).\n\n###<a name=\"enable-internet\"></a>Enable internet permission\nTo access Azure, your app must have the INTERNET permission enabled. If it's not already enabled, add the following line of code to your **AndroidManifest.xml** file:\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n## The basics deep dive\n\nThis section discusses some of the code in the Quickstart app. If you did not complete the Quickstart, you will need to add this code to your app.\n\n> [AZURE.NOTE] The string \"MobileServices\" occurs frequently in the code: the code actually references the Mobile Apps SDK, it's just a temporary carry-over from the past.\n\n\n###<a name=\"data-object\"></a>Define client data classes\n\nTo access data from SQL Azure tables, you define client data classes that correspond to the tables in the Mobile App backend. Examples in this topic assume a table named *ToDoItem*, which has the following columns:\n\n- id\n- text\n- complete\n\nThe corresponding typed client-side object is the following:\n\n    public class ToDoItem {\n        private String id;\n        private String text;\n        private Boolean complete;\n    }\n\nThe code will reside in a file called **ToDoItem.java**.\n\nIf your SQL Azure table contains more columns, you would add the corresponding fields  to this class.\n\nFor example if it had an integer Priority column, then you might add this field, along with its getter and setter methods:\n\n        private Integer priority;\n\n        /**\n         * Returns the item priority\n         */\n        public Integer getPriority() {\n            return mPriority;\n        }\n\n        /**\n         * Sets the item priority\n         *\n         * @param priority\n         *            priority to set\n         */\n        public final void setPriority(Integer priority) {\n            mPriority = priority;\n        }\n\nTo learn how to create additional tables in your Mobile Apps backend, see [How to: Define a table controller](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#how-to-define-a-table-controller) (.NET backend) or [Define Tables using a Dynamic Schema](app-service-mobile-node-backend-how-to-use-server-sdk.md#TableOperations) (Node.js backend). For a Node.js backend, you can also use the **Easy tables** setting in the [Azure portal].\n\n###<a name=\"create-client\"></a>How to: Create the client context\n\nThis code creates the **MobileServiceClient** object that is used to access your Mobile App backend. The code goes in the `onCreate` method of the **Activity** class specified in *AndroidManifest.xml* as a **MAIN** action and **LAUNCHER** category. In the Quickstart code, it goes in the **ToDoActivity.java** file.\n\n        MobileServiceClient mClient = new MobileServiceClient(\n                \"MobileAppUrl\", // Replace with the above Site URL\n                this)\n\nIn this code, replace `MobileAppUrl` with the URL of your Mobile App backend, which can be found in the [Azure portal](https://portal.azure.com/) in the blade for your Mobile App backend. For this line of code to compile, you also need to add the following **import** statement:\n\n    import com.microsoft.windowsazure.mobileservices.*;\n\n###<a name=\"instantiating\"></a>How to: Create a table reference\n\nThe easiest way to query or modify data in the backend is by using the *typed programming model*, since Java is a strongly typed language (later on we will discuss the *untyped* model). This model provides seamless JSON serialization and deserialization using the [gson](http://go.microsoft.com/fwlink/p/?LinkId=290801) library when sending data between  client objects and tables in the backend Azure SQL: the developer doesn't have to do anything, the framework handles it all.\n\nTo access a table, first create a [MobileServiceTable](http://go.microsoft.com/fwlink/p/?LinkId=296835) object by calling the **getTable** method on the [**MobileServiceClient**](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html).  This method has two overloads:\n\n    public class MobileServiceClient {\n        public <E> MobileServiceTable<E> getTable(Class<E> clazz);\n        public <E> MobileServiceTable<E> getTable(String name, Class<E> clazz);\n    }\n\nIn the following code, *mClient* is a reference to your MobileServiceClient object.\n\nThe [first overload](http://go.microsoft.com/fwlink/p/?LinkId=296839) is used where the class name and the table name are the same, and is the one used in the Quickstart:\n\n        MobileServiceTable<ToDoItem> mToDoTable = mClient.getTable(ToDoItem.class);\n\n\nThe [2nd overload](http://go.microsoft.com/fwlink/p/?LinkId=296840) is used when the table name is different from the class name: the first parameter is the table name.\n\n        MobileServiceTable<ToDoItem> mToDoTable = mClient.getTable(\"ToDoItemBackup\", ToDoItem.class);\n\n###<a name=\"binding\"></a>How to: Bind data to the user interface\n\nData binding involves three components:\n\n- The data source\n- The screen layout\n- The adapter that ties the two together.\n\nIn our sample code, we return the data from the Mobile Apps SQL Azure table *ToDoItem* into an array. This is a very common pattern for data applications: database queries often return a collection of rows which the client gets in a list or array. In this sample the array is the data source.\n\nThe code specifies a screen layout that defines the view of the data that will appear on the device.\n\nAnd the two are bound together with an adapter, which in this code is an extension of the *ArrayAdapter&lt;ToDoItem&gt;* class.\n\n#### <a name=\"layout\"></a>How to: Define the Layout\n\nThe layout is defined by several snippets of XML code. Given an existing layout, let's assume the following code represents the **ListView** we want to populate with our server data.\n\n    <ListView\n        android:id=\"@+id/listViewToDo\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        tools:listitem=\"@layout/row_list_to_do\" >\n    </ListView>\n\n\nIn the above code the *listitem* attribute specifies the id of the layout for an individual row in the list. Here is that code, which specifies a check box and its associated text. This gets instantiated once for each item in the list. This layout does not display the **id** field, and a more complex layout would specify additional fields in the display. This code is in the **row_list_to_do.xml** file.\n\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"horizontal\">\n        <CheckBox\n            android:id=\"@+id/checkToDoItem\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/checkbox_text\" />\n    </LinearLayout>\n\n\n#### <a name=\"adapter\"></a>How to: Define the adapter\n\nSince the data source of our view is an array of *ToDoItem*, we subclass our adapter from a *ArrayAdapter&lt;ToDoItem&gt;* class. This subclass will produce a View for every *ToDoItem* using the *row_list_to_do* layout.\n\nIn our code we define the following class which is an extension of the *ArrayAdapter&lt;E&gt;* class:\n\n    public class ToDoItemAdapter extends ArrayAdapter<ToDoItem> {\n\n\nYou must override the adapter's *getView* method. This sample code is one example of how to do this: details will vary with your application.\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        View row = convertView;\n\n        final ToDoItem currentItem = getItem(position);\n\n        if (row == null) {\n            LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();\n            row = inflater.inflate(R.layout.row_list_to_do, parent, false);\n        }\n\n        row.setTag(currentItem);\n\n        final CheckBox checkBox = (CheckBox) row.findViewById(R.id.checkToDoItem);\n        checkBox.setText(currentItem.getText());\n        checkBox.setChecked(false);\n        checkBox.setEnabled(true);\n\n        checkBox.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View arg0) {\n                if (checkBox.isChecked()) {\n                    checkBox.setEnabled(false);\n                    if (mContext instanceof ToDoActivity) {\n                        ToDoActivity activity = (ToDoActivity) mContext;\n                        activity.checkItem(currentItem);\n                    }\n                }\n            }\n        });\n\n\n        return row;\n    }\n\nWe create an instance of this class in our Activity as follows:\n\n    ToDoItemAdapter mAdapter;\n    mAdapter = new ToDoItemAdapter(this, R.layout.row_list_to_do);\n\nNote that the second parameter to the ToDoItemAdapter constructor is a reference to the layout. The call to the constructor is followed by the following code which first gets a reference to the **ListView**, and next calls *setAdapter* to configure itself to use the adapter we just created:\n\n    ListView listViewToDo = (ListView) findViewById(R.id.listViewToDo);\n    listViewToDo.setAdapter(mAdapter);\n\n### <a name=\"api\"></a>The API structure\n\nMobile Apps table operations and custom API calls are asynchronous, so you use the [Future](http://developer.android.com/reference/java/util/concurrent/Future.html) and [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) objects in all of the asynchronous  methods involving queries and inserts, updates and deletes. This makes it easier to perform multiple operations on a background thread without having to deal with multiple nested callbacks.\n\nTo see how these asynchronous APIs are used in your Android app and how data is displayed in the UI, review the **ToDoActivity.java** file in the Android quickstart project from the [Azure portal].\n\n\n#### <a name=\"use-adapter\"></a>How to: Use the adapter\n\nYou are now ready to use data binding. The following code shows how to get the items in the mobile service table, clear the adapter, and then call the adapter's *add* method to fill it with the returned items.\n\n\n**TBD**: Test this code!!\n\n    public void showAll(View view) {\n        AsyncTask<Void, Void, Void> task = new AsyncTask<Void, Void, Void>(){\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final List<ToDoItem> results = mToDoTable.execute().get();\n                    runOnUiThread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            mAdapter.clear();\n                            for (ToDoItem item : results) {\n                                mAdapter.add(item);\n                            }\n                        }\n                    });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        };\n        runAsyncTask(task);\n    }\n\nYou must also call the adapter any time you modify the *ToDoItem* table if you want to display the results of doing that. Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection. When you insert an item you call the *add* method on the adapter, when deleting, you call the *remove* method.\n\n##<a name=\"querying\"></a>How to: Query data from your Mobile App backend\n\nThis section describes how to issue queries to the Mobile App backend, which includes the following tasks:\n\n- [Return all Items]\n- [Filter returned data]\n- [Sort returned data]\n- [Return data in pages]\n- [Select specific columns]\n- [Concatenate query methods](#chaining)\n\n### <a name=\"showAll\"></a>How to: Return all Items from a Table\n\nThe following query returns all items in the *ToDoItem* table.\n\n    List<ToDoItem> results = mToDoTable.execute().get();\n\nThe *results* variable returns the result set from the query as a list.\n\n### <a name=\"filtering\"></a>How to: Filter returned data\n\nThe following query execution returns all items from the *ToDoItem* table where *complete* equals *false*. This is the code that is already in the Quickstart.\n\n    List<ToDoItem> result = mToDoTable.where()\n                                .field(\"complete\").eq(false)\n                                .execute().get();\n\n*mToDoTable* is the reference to the mobile service table that we created previously.\n\nYou define a filter using the **where** method call on the table reference. This is followed by a **field** method call followed by a method call that specifies the logical predicate. Possible predicate methods include **eq** (equals), **ne** (not equal), **gt** (greater than), **ge** (greater than or equal to), **lt** (less than), **le** (less than or equal to), and etc. These methods let you compare number and string fields to specific values.\n\nYou can filter on dates. The following methods let you compare the entire date field or parts of of the date: **year**, **month**, **day**, **hour**, **minute** and **second**. The following example adds a filter for items whose *due date* equals 2013.\n\n    mToDoTable.where().year(\"due\").eq(2013).execute().get();\n\nThe following methods support complex filters on string fields: **startsWith**, **endsWith**, **concat**, **subString**, **indexOf**, **replace**, **toLower**, **toUpper**, **trim**, and **length**. The following example filters for table rows where the *text* column starts with \"PRI0\".\n\n    mToDoTable.where().startsWith(\"text\", \"PRI0\").execute().get();\n\nThe following operator methods are supported on number fields: **add**, **sub**, **mul**, **div**, **mod**, **floor**, **ceiling**, and **round**. The following example filters for table rows where the *duration* is an even number.\n\n    mToDoTable.where().field(\"duration\").mod(2).eq(0).execute().get();\n\nYou can combine predicates with these logical methods: **and**, **or** and **not**. The following example combines two of the above examples.\n\n    mToDoTable.where().year(\"due\").eq(2013).and().startsWith(\"text\", \"PRI0\")\n                .execute().get();\n\nAnd you can group and nest logical operators, like this:\n\n    mToDoTable.where()\n                .year(\"due\").eq(2013)\n                    .and\n                (startsWith(\"text\", \"PRI0\").or().field(\"duration\").gt(10))\n                .execute().get();\n\nFor more detailed discussion and examples of filtering, see [Exploring the richness of the Android client query model](http://hashtagfail.com/post/46493261719/mobile-services-android-querying).\n\n### <a name=\"sorting\"></a>How to: Sort returned data\n\nThe following code returns all items from a table of *ToDoItems* sorted ascending by the *text* field. *mToDoTable* is the reference to the backend table that you created previously:\n\n    mToDoTable.orderBy(\"text\", QueryOrder.Ascending).execute().get();\n\nThe first parameter of the **orderBy** method is a string equal to the name of the field on which to sort.\n\nThe second parameter uses the **QueryOrder** enumeration to specify whether to sort ascending or descending.\n\nNote that if you are filtering using the ***where*** method, the ***where*** method must be invoked prior to the ***orderBy*** method.\n\n### <a name=\"paging\"></a>How to: Return data in pages\n\nThe first example shows how to select the top 5 items from a table. The query returns the items from a table of  *ToDoItems*. *mToDoTable* is the reference to the backend table that you created previously:\n\n    List<ToDoItem> result = mToDoTable.top(5).execute().get();\n\n\nHere's a query that skips the first 5 items, and then returns the next 5:\n\n    mToDoTable.skip(5).top(5).execute().get();\n\n\n### <a name=\"selecting\"></a>How to: Select specific columns\n\nThe following code illustrates how to return all items from a table of  *ToDoItems*, but only displays the *complete* and *text* fields. *mToDoTable* is the reference to the backend table that we created previously.\n\n    List<ToDoItemNarrow> result = mToDoTable.select(\"complete\", \"text\").execute().get();\n\n\nHere the parameters to the select function are the string names of the table's columns that you want to return.\n\nThe **select** method needs to follow methods like **where** and **orderBy**, if they are present. It can be followed by paging methods like **top**.\n\n### <a name=\"chaining\"></a>How to: Concatenate query methods\n\nAs you have seen, the methods used in querying backend tables can be concatenated. This allows you to do things like select specific columns of filtered rows that are sorted and paged. You can create quite complex logical filters.\n\nWhat makes this work is that the query methods you use return **MobileServiceQuery&lt;T&gt;** objects, which can in turn have additional methods invoked on them. To end the series of methods and actually run the query, you call the **execute** method.\n\nHere's a code sample where *mToDoTable* is a reference to the *ToDoItem* table.\n\n    mToDoTable.where().year(\"due\").eq(2013)\n                    .and().startsWith(\"text\", \"PRI0\")\n                    .or().field(\"duration\").gt(10)\n                .select(\"id\", \"complete\", \"text\", \"duration\")\n                .orderBy(duration, QueryOrder.Ascending).top(20)\n                .execute().get();\n\nThe main requirement in chaining methods together is that the *where* method and predicates need to come first. After that, you can call subsequent methods in the order that best meets the needs of your application.\n\n\n##<a name=\"inserting\"></a>How to: Insert data into the backend\n\nThe following code shows how to insert a new row into a table.\n\nFirst you instantiate an instance of the *ToDoItem* class and set its properties.\n\n    ToDoItem item = new ToDoItem();\n    item.text = \"Test Program\";\n    item.complete = false;\n\nNext you execute the following code:\n\n    ToDoItem entity = mToDoTable.insert(item).get();\n\nThe returned entity matches the data inserted into the backend table, included the ID and any other values set on the backend.\n\nMobile Apps requires that each table have a column named **id**, which is used to index the table. By default, this column is a string data type, which is needed to support offline sync. The default value of the ID column is a GUID, but you can provide other unique values, such as email addresses or usernames. When a string ID value is not provided for an inserted record, the backend generates a new GUID value.\n\nString ID values provide the following advantages:\n\n+ IDs can be generated without making a round-trip to the database.\n+ Records are easier to merge from different tables or databases.\n+ ID values integrate better with an application's logic.\n\n##<a name=\"updating\"></a>How to: Update data in a mobile app\n\nThe following code shows how to update data in a table.\n\n    mToDoTable.update(item).get();\n\nIn this example, *item* is a reference to a row in the *ToDoItem* table, which has had some changes made to it.\n\n##<a name=\"deleting\"></a>How to: Delete data in a mobile app\n\nThe following code shows how to delete data from a table by specifying the data object.\n\n    mToDoTable.delete(item);\n\nYou can also delete an item by specifying the **id** field of the row to delete.\n\n    String myRowId = \"2FA404AB-E458-44CD-BC1B-3BC847EF0902\";\n    mToDoTable.delete(myRowId);\n\n\n##<a name=\"lookup\"></a>How to: Look up a specific item\n\nThis code shows how to look up an item with a specific *id*.\n\n    ToDoItem result = mToDoTable\n                        .lookUp(\"0380BAFB-BCFF-443C-B7D5-30199F730335\")\n                        .get();\n\n##<a name=\"untyped\"></a>How to: Work with untyped data\n\nThe untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your backend table contains a large number of columns and you only need to reference a few of them. Using the typed model requires you to define all of the mobile apps table's columns in your data class. But with the untyped model you only define the columns you need to use.\n\nMost of the API calls for accessing data are similar to the typed programming calls. The main difference is that in the untyped model you invoke methods on the **MobileServiceJsonTable** object, instead of the **MobileServiceTable** object.\n\n\n### <a name=\"json_instance\"></a>How to: Create an instance of an untyped table\n\nSimilar to the typed model, you start by getting a table reference, but in this case it's a **MobileServicesJsonTable** object. You get the reference by calling the **getTable** method on an instance of the client, like this:\n\n    private MobileServiceJsonTable mJsonToDoTable;\n    //...\n    mJsonToDoTable = mClient.getTable(\"ToDoItem\");\n\nOnce you have created an instance of the **MobileServiceJsonTable**, you can call almost all of the methods on it that you can with the typed programming model. However in some cases the methods take an untyped parameter, as we see in the following examples.\n\n### <a name=\"json_insert\"></a>How to: Insert into an untyped table\n\nThe following code shows how to do an insert. The first step is to create a [**JsonObject**](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html), which is part of the [gson]( http://go.microsoft.com/fwlink/p/?LinkId=290801) library.\n\n    JsonObject jsonItem = new JsonObject();\n    jsonItem.addProperty(\"text\", \"Wake up\");\n    jsonItem.addProperty(\"complete\", false);\n\nThe next step is to insert the object.\n\n    mJsonToDoTable.insert(jsonItem).get();\n\n\nIf you need to get the ID of the inserted object, use this method call:\n\n    jsonItem.getAsJsonPrimitive(\"id\").getAsInt());\n\n\n### <a name=\"json_delete\"></a>How to: Delete from an untyped table\n\nThe following code shows how to delete an instance, in this case, the same instance of a **JsonObject** that was created in the prior *insert* example. Note that the code is the same as with the typed case, but the method has a different signature since it references an **JsonObject**.\n\n\n         mToDoTable.delete(jsonItem);\n\n\nYou can also delete an instance directly by using its ID:\n\n         mToDoTable.delete(ID);\n\n\n### <a name=\"json_get\"></a>How to: Return all rows from an untyped table\n\nThe following code shows how to retrieve an entire table. Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.\n\n    public void showAllUntyped(View view) {\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final JsonElement result = mJsonToDoTable.execute().get();\n                    final JsonArray results = result.getAsJsonArray();\n                    runOnUiThread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            mAdapter.clear();\n                            for (JsonElement item : results) {\n                                String ID = item.getAsJsonObject().getAsJsonPrimitive(\"id\").getAsString();\n                                String mText = item.getAsJsonObject().getAsJsonPrimitive(\"text\").getAsString();\n                                Boolean mComplete = item.getAsJsonObject().getAsJsonPrimitive(\"complete\").getAsBoolean();\n                                ToDoItem mToDoItem = new ToDoItem();\n                                mToDoItem.setId(ID);\n                                mToDoItem.setText(mText);\n                                mToDoItem.setComplete(mComplete);\n                                mAdapter.add(mToDoItem);\n                            }\n                        }\n                    });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\nYou can do filtering, sorting and paging by concatenating  methods that have the same names as those used in the typed programming model.\n\n\n\n##<a name=\"custom-api\"></a>How to: Call a custom API\n\nA custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation. By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.\n\nFrom an Android client, you call the **invokeApi** method to call the custom API endpoint. The following example shows how to call an API endpoint named *completeAll*, which returns a collection class named MarkAllResult.\n\n    public void completeItem(View view) {\n\n        ListenableFuture<MarkAllResult> result = mClient.invokeApi( \"completeAll\", MarkAllResult.class );\n\n            Futures.addCallback(result, new FutureCallback<MarkAllResult>() {\n                @Override\n                public void onFailure(Throwable exc) {\n                    createAndShowDialog((Exception) exc, \"Error\");\n                }\n\n                @Override\n                public void onSuccess(MarkAllResult result) {\n                    createAndShowDialog(result.getCount() + \" item(s) marked as complete.\", \"Completed Items\");\n                    refreshItemsFromTable();\n                }\n            });\n        }\n\nThe **invokeApi** method is called on the client, which sends a POST request to the new custom API. The result returned by the custom API is displayed in a message dialog, as are any errors. Other versions of **invokeApi** let you optionally send an object in the request body, specify the HTTP method, and send query parameters with the request. Untyped versions of **invokeApi** are provided as well.\n\n##<a name=\"authentication\"></a>How to: add authentication to your app\n\nTutorials already describe in detail how to add these features.\n\nApp Service supports [authenticating app users](app-service-mobile-android-get-started-users.md) using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory. You can set permissions on tables to restrict access for specific operations to only authenticated users. You can also use the identity of authenticated users to implement authorization rules in your backend.\n\nTwo authentication flows are supported: a *server* flow and a *client* flow. The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface. The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs, and requires you to code this.\n\nThree steps are required to enable authentication in your app:\n\n- Register your app for authentication with a provider, and configure your Mobile App backend.\n- Restrict table permissions to authenticated users only.\n- Add authentication code to your app.\n\nYou can set permissions on tables to restrict access for specific operations to only authenticated users. You can also use the SID of an authenticated user to modify requests.\n\nThese first two tasks are done using the [Azure portal](https://portal.azure.com/). For more information, see [Get started with authentication].\n\n### <a name=\"caching\"></a>How to: Add authentication code to your app\n\nThe following code starts the server flow login process using the Google provider:\n\n    MobileServiceUser user = mClient.login(MobileServiceAuthenticationProvider.Google);\n\nYou can get the ID of the logged-in user from a **MobileServiceUser**  using the **getUserId** method. For an example of how to use Futures to call the asynchronous login APIs, see [Get started with authentication].\n\n\n### <a name=\"caching\"></a>How to: Cache authentication tokens\n\nCaching authentication tokens requires you to store the User ID and authentication token locally on the device. The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data. However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.\n\nYou can see a complete example of how to cache authentication tokens in [Cache authentication tokens section](app-service-mobile-android-get-started-users.md#cache-tokens).\n\nWhen you try to use an expired token you will get a *401 unauthorized* response. The user must then log in to obtain new tokens. You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services. The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401. You can also inspect the token to check the expiration.\n\n\n## <a name=\"adal\"></a>How to: Authenticate users with the Active Directory Authentication Library\n\nYou can use the Active Directory Authentication Library (ADAL) to sign users into your application using Azure Active Directory. This is often preferable to using the `loginAsync()` methods, as it provides a more native UX feel and allows for additional customization.\n\n1. Configure your mobile app backend for AAD sign-in by followin the [How to configure App Service for Active Directory login](app-service-mobile-how-to-configure-active-directory-authentication.md) tutorial. Make sure to complete the optional step of registering a native client application.\n\n2. Install ADAL by modifying your build.gradle file to include the following:\n\n    repositories {\n        mavenCentral()\n        flatDir {\n            dirs 'libs'\n        }\n        maven {\n            url \"YourLocalMavenRepoPath\\\\.m2\\\\repository\"\n        }\n    }\n    packagingOptions {\n        exclude 'META-INF/MSFTSIG.RSA'\n        exclude 'META-INF/MSFTSIG.SF'\n    }\n    dependencies {\n        compile fileTree(dir: 'libs', include: ['*.jar'])\n        compile('com.microsoft.aad:adal:1.1.1') {\n            exclude group: 'com.android.support'\n        } // Recent version is 1.1.1\n        compile 'com.android.support:support-v4:23.0.0'\n    }\n\n3. Add the below code to your application, making the following replacements:\n\n* Replace **INSERT-AUTHORITY-HERE** ith the name of the tenant in which you provisioned your application. The format should be https://login.windows.net/contoso.onmicrosoft.com. This value can be copied out of the Domain tab in your Azure Active Directory in the [Azure classic portal].\n\n* Replace **INSERT-RESOURCE-ID-HERE** with the client ID for your mobile app backend. You can obtain this from the **Advanced** tab under **Azure Active Directory Settings** in the portal.\n\n* Replace **INSERT-CLIENT-ID-HERE** with the client ID you copied from the native client application.\n\n* Replace **INSERT-REDIRECT-URI-HERE** with your site's _/.auth/login/done_ endpoint, using the HTTPS scheme. This value should be similar to _https://contoso.azurewebsites.net/.auth/login/done_.\n\n        private AuthenticationContext mContext;\n        private void authenticate() {\n        String authority = \"INSERT-AUTHORITY-HERE\";\n        String resourceId = \"INSERT-RESOURCE-ID-HERE\";\n        String clientId = \"INSERT-CLIENT-ID-HERE\";\n        String redirectUri = \"INSERT-REDIRECT-URI-HERE\";\n        try {\n            mContext = new AuthenticationContext(this, authority, true);\n            mContext.acquireToken(this, resourceId, clientId, redirectUri, PromptBehavior.Auto, \"\", callback);\n        } catch (Exception exc) {\n            exc.printStackTrace();\n        }\n        }\n        private AuthenticationCallback<AuthenticationResult> callback = new AuthenticationCallback<AuthenticationResult>() {\n        @Override\n        public void onError(Exception exc) {\n            if (exc instanceof AuthenticationException) {\n                Log.d(TAG, \"Cancelled\");\n            } else {\n                Log.d(TAG, \"Authentication error:\" + exc.getMessage());\n            }\n        }\n        @Override\n            public void onSuccess(AuthenticationResult result) {\n            if (result == null || result.getAccessToken() == null\n                    || result.getAccessToken().isEmpty()) {\n                Log.d(TAG, \"Token is empty\");\n            } else {\n                try {\n                    JSONObject payload = new JSONObject();\n                    payload.put(\"access_token\", result.getAccessToken());\n                    ListenableFuture<MobileServiceUser> mLogin = mClient.login(\"aad\", payload.toString());\n                    Futures.addCallback(mLogin, new FutureCallback<MobileServiceUser>() {\n                        @Override\n                        public void onFailure(Throwable exc) {\n                            exc.printStackTrace();\n                        }\n                        @Override\n                        public void onSuccess(MobileServiceUser user) {\n                            Log.d(TAG, \"Login Complete\");\n                        }\n                    });\n                }\n                catch (Exception exc){\n                    Log.d(TAG, \"Authentication error:\" + exc.getMessage());\n                }\n            }\n        }\n        };\n        @Override\n        protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (mContext != null) {\n            mContext.onActivityResult(requestCode, resultCode, data);\n        }\n        }\n\n\n## How to: add push notification to your app\n\nYou can [read an overview](notification-hubs-overview.md/#integration-with-app-service-mobile-apps) that describes how Microsoft Azure Notification Hubs supports a wide variety of push notifications,\n\nIn [this tutorial](app-service-mobile-android-get-started-push.md), every time a record is inserted, a push notification is sent.\n\n## How to: add offline sync to your app\nThe Quickstart tutorial contains code that implements offline sync. Look for code prefixed with comments like this:\n\n    // Offline Sync\n\nBy uncommenting the following lines of code you can implement offline sync, and you can add similar code to other Mobile Apps code.\n\n##<a name=\"customizing\"></a>How to: Customize the client\n\nThere are several ways for you to customize the default behavior of the client.\n\n### <a name=\"headers\"></a>How to: Customize request headers\n\nYou might want to attach a custom header to every outgoing request. You can accomplish that by configuring a **ServiceFilter** like this:\n\n    private class CustomHeaderFilter implements ServiceFilter {\n\n        @Override\n        public ListenableFuture<ServiceFilterResponse> handleRequest(\n                    ServiceFilterRequest request,\n                    NextServiceFilterCallback next) {\n\n            runOnUiThread(new Runnable() {\n\n                @Override\n                public void run() {\n                    request.addHeader(\"My-Header\", \"Value\");                    }\n            });\n\n            SettableFuture<ServiceFilterResponse> result = SettableFuture.create();\n            try {\n                ServiceFilterResponse response = next.onNext(request).get();\n                result.set(response);\n            } catch (Exception exc) {\n                result.setException(exc);\n            }\n        }\n\n### <a name=\"serialization\"></a>How to: Customize serialization\n\nThe client assumes that the table names, column names and data types on the backend all match exactly the data objects defined in the client. But there can be any number of reasons why the server and client names might not match. In your scenario, you might want to do the following kinds of customizations:\n\n- The column names used in the mobile-  service table don't match the names you are using in the client.\n- Use a mobile service table that has a different name than the class it maps to in the client.\n- Turn on automatic property capitalization.\n- Add complex properties to an object.\n\n### <a name=\"columns\"></a>How to: Map different client and server names\n\nSuppose that your Java client code uses standard Java-style names for the *ToDoItem* object properties, such as the following.\n\n- mId\n- mText\n- mComplete\n- mDuration\n\n\nYou must serialize the client names into JSON names that match the column names of the *ToDoItem* table on the server. The following code, which makes use of the [gson](http://go.microsoft.com/fwlink/p/?LinkId=290801) library does this.\n\n    @com.google.gson.annotations.SerializedName(\"text\")\n    private String mText;\n\n    @com.google.gson.annotations.SerializedName(\"id\")\n    private int mId;\n\n    @com.google.gson.annotations.SerializedName(\"complete\")\n    private boolean mComplete;\n\n    @com.google.gson.annotations.SerializedName(\"duration\")\n    private String mDuration;\n\n### <a name=\"table\"></a>How to: Map different table names between the client and the backend\n\nMapping the client table name to a different mobile services table name is easy, we just use one of the overrides of the\n<a href=\"http://go.microsoft.com/fwlink/p/?LinkId=296840\" target=\"_blank\">getTable()</a> function, as seen in the following code.\n\n    mToDoTable = mClient.getTable(\"ToDoItemBackup\", ToDoItem.class);\n\n\n### <a name=\"conversions\"></a>How to: Automate column name mappings\n\nMapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section. But suppose our table has a lot of columns, say 20 or 30. It turns out that we can call the <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> API and specify a conversion strategy that will apply to every column, and avoid having to annotate every single column name.\n\nTo do this we use the <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> library which the Android client library uses behind the scenes to serialize Java objects to JSON data, which is sent to Azure Mobile Services.\n\nThe following code uses the *setFieldNamingStrategy()* method, in which we define a *FieldNamingStrategy()* method. This method says to delete the initial character (an \"m\"), and then lower-case the next character, for every field name. This code also enables pretty-printing of the output JSON.\n\n    client.setGsonBuilder(\n        MobileServiceClient\n        .createMobileServiceGsonBuilder()\n        .setFieldNamingStrategy(new FieldNamingStrategy() {\n            public String translateName(Field field) {\n                String name = field.getName();\n                return Character.toLowerCase(name.charAt(1))\n                    + name.substring(2);\n                }\n            })\n            .setPrettyPrinting());\n\n\n\nThis code must be executed prior to any method calls on the Mobile Services client object.\n\n### <a name=\"complex\"></a>How to: Store an object or array property into a table\n\nSo far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table. Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table. For example we might want to add an array of strings to the client object. It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.\n\nTo see an example of how to do this, check out the blog post <a href=\"http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson\" target=\"_blank\">Customizing serialization using the <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> library in the Mobile Services Android client</a>.\n\nThis general method can be used whenever we have a complex object that is not automatically serializable into JSON and the mobile services table.\n\n<!-- Anchors. -->\n\n[What is Mobile Services]: #what-is\n[Concepts]: #concepts\n[How to: Create the Mobile Services client]: #create-client\n[How to: Create a table reference]: #instantiating\n[The API structure]: #api\n[How to: Query data from a mobile service]: #querying\n[Return all Items]: #showAll\n[Filter returned data]: #filtering\n[Sort returned data]: #sorting\n[Return data in pages]: #paging\n[Select specific columns]: #selecting\n[How to: Concatenate query methods]: #chaining\n[How to: Bind data to the user interface]: #binding\n[How to: Define the layout]: #layout\n[How to: Define the adapter]: #adapter\n[How to: Use the adapter]: #use-adapter\n[How to: Insert data into a mobile service]: #inserting\n[How to: update data in a mobile service]: #updating\n[How to: Delete data in a mobile service]: #deleting\n[How to: Look up a specific item]: #lookup\n[How to: Work with untyped data]: #untyped\n[How to: Authenticate users]: #authentication\n[Cache authentication tokens]: #caching\n[How to: Handle errors]: #errors\n[How to: Design unit tests]: #tests\n[How to: Customize the client]: #customizing\n[Customize request headers]: #headers\n[Customize serialization]: #serialization\n[Next Steps]: #next-steps\n[Setup and Prerequisites]: #setup\n\n<!-- Images. -->\n\n\n\n<!-- URLs. -->\n[Get started with Azure Mobile Apps]: app-service-mobile-android-get-started.md\n[ASCII control codes C0 and C1]: http://en.wikipedia.org/wiki/Data_link_escape_character#C1_set\n[Mobile Services SDK for Android]: http://go.microsoft.com/fwlink/p/?LinkID=717033\n[Azure portal]: https://portal.azure.com\n[Get started with authentication]: app-service-mobile-android-get-started-users.md\n"
}