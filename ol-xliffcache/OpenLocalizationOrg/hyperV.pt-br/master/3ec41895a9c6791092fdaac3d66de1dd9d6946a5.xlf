<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pt-br">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ec41895a9c6791092fdaac3d66de1dd9d6946a5</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Processing device-to-cloud messages</source>
          <target state="new">Processing device-to-cloud messages</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you will create a Windows console app that process device-to-cloud messages from IoT Hub.</source>
          <target state="new">In this section, you will create a Windows console app that process device-to-cloud messages from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Iot Hub exposes an <bpt id="p1">[</bpt>Event Hubs<ept id="p1">][Event Hubs Overview]</ept>-compatible endpoint to read device-to-cloud messages.</source>
          <target state="new">Iot Hub exposes an <bpt id="p1">[</bpt>Event Hubs<ept id="p1">][Event Hubs Overview]</ept>-compatible endpoint to read device-to-cloud messages.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial uses <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept> to process these messages in a console app.</source>
          <target state="new">This tutorial uses <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept> to process these messages in a console app.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information on how to process messages from Event Hubs you can refer to the <bpt id="p1">[</bpt><ept id="p1">Get Started with Event Hubs]</ept> tutorial.</source>
          <target state="new">For more information on how to process messages from Event Hubs you can refer to the <bpt id="p1">[</bpt><ept id="p1">Get Started with Event Hubs]</ept> tutorial.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The main challenge when implementing reliable storage of data point messages or forwarding of interactive ones, is that Event Hubs event processing relies on the message consumer to checkpoint its progress.</source>
          <target state="new">The main challenge when implementing reliable storage of data point messages or forwarding of interactive ones, is that Event Hubs event processing relies on the message consumer to checkpoint its progress.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Moreover, in order to achieve high throughput, when reading from Event Hubs, checkpoints should happen in large batches, creating the possibility of duplicate processing for a large number of messages.</source>
          <target state="new">Moreover, in order to achieve high throughput, when reading from Event Hubs, checkpoints should happen in large batches, creating the possibility of duplicate processing for a large number of messages.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this tutorial we show how to synchronize Azure storage writes and Service Bus deduplication windows with Event Processor Host checkpoints.</source>
          <target state="new">In this tutorial we show how to synchronize Azure storage writes and Service Bus deduplication windows with Event Processor Host checkpoints.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In order to reliably write messages to Azure storage, we make use of the <bpt id="p1">[</bpt>block blobs<ept id="p1">][Azure Block Blobs]</ept> feature of individual block commit.</source>
          <target state="new">In order to reliably write messages to Azure storage, we make use of the <bpt id="p1">[</bpt>block blobs<ept id="p1">][Azure Block Blobs]</ept> feature of individual block commit.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The event processor accumulates messages in memory, until it is time to perform a checkpoint (i.e. after the accummulated buffer is greater than the maximum block size of 4Mb, or after the Service Bus deduplication time windows is elapsed).</source>
          <target state="new">The event processor accumulates messages in memory, until it is time to perform a checkpoint (i.e. after the accummulated buffer is greater than the maximum block size of 4Mb, or after the Service Bus deduplication time windows is elapsed).</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Then, before checkpointing, a new block is committed to the blob.</source>
          <target state="new">Then, before checkpointing, a new block is committed to the blob.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The event processor uses Event Hubs message offsets as block ids.</source>
          <target state="new">The event processor uses Event Hubs message offsets as block ids.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This allows to perform a deduplication check before committing the new block to storage, taking care of a possible crash between a block committed and the checkpoint.</source>
          <target state="new">This allows to perform a deduplication check before committing the new block to storage, taking care of a possible crash between a block committed and the checkpoint.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single storage account to write all the messages retrieved from IoT Hub.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single storage account to write all the messages retrieved from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt><ept id="p1">Azure Storage scalability Guidelines]</ept> to decide if you need multiple Azure Storage account in your solution.</source>
          <target state="new">Refer to <bpt id="p1">[</bpt><ept id="p1">Azure Storage scalability Guidelines]</ept> to decide if you need multiple Azure Storage account in your solution.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In order to avoid duplicates in the processing of interactive messages, we make use of Service Bus deduplication feature.</source>
          <target state="new">In order to avoid duplicates in the processing of interactive messages, we make use of Service Bus deduplication feature.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By stamping each interactive message with a unique <ph id="ph1">`MessageId`</ph>, Service Bus can ensure that, in the specified deduplication time window, no two messages with the same <ph id="ph2">`MessageId`</ph> will be delivered to the receivers.</source>
          <target state="new">By stamping each interactive message with a unique <ph id="ph1">`MessageId`</ph>, Service Bus can ensure that, in the specified deduplication time window, no two messages with the same <ph id="ph2">`MessageId`</ph> will be delivered to the receivers.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This deduplication, together with the per-message completion semantics provided by Service Bus queues, makes reliable processing interactive messages significantly easier.</source>
          <target state="new">This deduplication, together with the per-message completion semantics provided by Service Bus queues, makes reliable processing interactive messages significantly easier.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To ensure that no messages is resubmitted outside of the deduplication window, we synchronize the Event Processor Host checkpointing mechanism with the Service Bus queue deduplication window.</source>
          <target state="new">To ensure that no messages is resubmitted outside of the deduplication window, we synchronize the Event Processor Host checkpointing mechanism with the Service Bus queue deduplication window.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is accomplished by forcing a checkpoint at least once every time window elapses (in this tutorial, 1 hour).</source>
          <target state="new">This is accomplished by forcing a checkpoint at least once every time window elapses (in this tutorial, 1 hour).</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single partitioned Service Bus queue to process all the interactive messages retrieved from IoT Hub.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single partitioned Service Bus queue to process all the interactive messages retrieved from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Depending on your solution's need, refer to <bpt id="p1">[</bpt><ept id="p1">Service Bus documentation]</ept> for more information on how to use Service Bus Queues.</source>
          <target state="new">Depending on your solution's need, refer to <bpt id="p1">[</bpt><ept id="p1">Service Bus documentation]</ept> for more information on how to use Service Bus Queues.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Provision an Azure Storage account and a Service Bus queue</source>
          <target state="new">Provision an Azure Storage account and a Service Bus queue</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In order to use <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept>, you must have an Azure Storage account.</source>
          <target state="new">In order to use <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept>, you must have an Azure Storage account.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can use an existing one, or follow the instructions in <bpt id="p1">[</bpt><ept id="p1">About Azure Storage]</ept> to create a new one.</source>
          <target state="new">You can use an existing one, or follow the instructions in <bpt id="p1">[</bpt><ept id="p1">About Azure Storage]</ept> to create a new one.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Take note of the storage account connection string.</source>
          <target state="new">Take note of the storage account connection string.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You will also need a Service Bus queue to enable reliable processing of interactive messages.</source>
          <target state="new">You will also need a Service Bus queue to enable reliable processing of interactive messages.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can create a queue programmatically with a 1 hour deduplication window, as explained in <bpt id="p1">[</bpt>How to use Service Bus Queues<ept id="p1">][Service Bus Queue]</ept>, or use the <bpt id="p2">[</bpt><ept id="p2">Azure portal]</ept>, following these steps:</source>
          <target state="new">You can create a queue programmatically with a 1 hour deduplication window, as explained in <bpt id="p1">[</bpt>How to use Service Bus Queues<ept id="p1">][Service Bus Queue]</ept>, or use the <bpt id="p2">[</bpt><ept id="p2">Azure portal]</ept>, following these steps:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>NEW<ept id="p1">**</ept> in the bottom left corner, then <bpt id="p2">**</bpt>App Services<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Service Bus<ept id="p3">**</ept>, then <bpt id="p4">**</bpt>Queue<ept id="p4">**</ept>, then <bpt id="p5">**</bpt>Custom<ept id="p5">**</ept>, select the name <bpt id="p6">**</bpt>d2ctutorial<ept id="p6">**</ept>, then select a deduplication window of 1 hour.</source>
          <target state="new">Click <bpt id="p1">**</bpt>NEW<ept id="p1">**</ept> in the bottom left corner, then <bpt id="p2">**</bpt>App Services<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Service Bus<ept id="p3">**</ept>, then <bpt id="p4">**</bpt>Queue<ept id="p4">**</ept>, then <bpt id="p5">**</bpt>Custom<ept id="p5">**</ept>, select the name <bpt id="p6">**</bpt>d2ctutorial<ept id="p6">**</ept>, then select a deduplication window of 1 hour.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Click the name of the queue (<bpt id="p1">**</bpt>d2ctutorial<ept id="p1">**</ept>), then <bpt id="p2">**</bpt>Configure<ept id="p2">**</ept>, and create two shared access policies, one called <bpt id="p3">**</bpt>send<ept id="p3">**</ept> with <bpt id="p4">**</bpt>Send<ept id="p4">**</ept> permissions, and one called <bpt id="p5">**</bpt>listen<ept id="p5">**</ept> with <bpt id="p6">**</bpt>Listen<ept id="p6">**</ept> permissions.</source>
          <target state="new">Click the name of the queue (<bpt id="p1">**</bpt>d2ctutorial<ept id="p1">**</ept>), then <bpt id="p2">**</bpt>Configure<ept id="p2">**</ept>, and create two shared access policies, one called <bpt id="p3">**</bpt>send<ept id="p3">**</ept> with <bpt id="p4">**</bpt>Send<ept id="p4">**</ept> permissions, and one called <bpt id="p5">**</bpt>listen<ept id="p5">**</ept> with <bpt id="p6">**</bpt>Listen<ept id="p6">**</ept> permissions.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> at the bottom, when done.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> at the bottom, when done.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Dashboard<ept id="p1">**</ept> in the top, then <bpt id="p2">**</bpt>Connection information<ept id="p2">**</ept> a the bottom, take note of the two connection strings.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Dashboard<ept id="p1">**</ept> in the top, then <bpt id="p2">**</bpt>Connection information<ept id="p2">**</ept> a the bottom, take note of the two connection strings.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Create the event processor</source>
          <target state="new">Create the event processor</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the current Visual Studio solution, click <bpt id="p1">**</bpt>File-&gt;Add-&gt;Project<ept id="p1">**</ept> to create a new Visual C# Desktop App project using the <bpt id="p2">**</bpt>Console  Application<ept id="p2">**</ept> project template.</source>
          <target state="new">In the current Visual Studio solution, click <bpt id="p1">**</bpt>File-&gt;Add-&gt;Project<ept id="p1">**</ept> to create a new Visual C# Desktop App project using the <bpt id="p2">**</bpt>Console  Application<ept id="p2">**</ept> project template.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Name the project <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept>.</source>
          <target state="new">Name the project <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click the solution, and then click <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept>.</source>
          <target state="new">In Solution Explorer, right-click the solution, and then click <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept> dialog box appears.</source>
          <target state="new">The <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept> dialog box appears.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Search for <ph id="ph1">`WindowsAzure.ServiceBus`</ph>, click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the terms of use.</source>
          <target state="new">Search for <ph id="ph1">`WindowsAzure.ServiceBus`</ph>, click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the terms of use.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus NuGet package<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>, with all its dependencies.</source>
          <target state="new">This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus NuGet package<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>, with all its dependencies.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Search for <ph id="ph1">`Microsoft Azure Service Bus Event Hub - EventProcessorHost`</ph>, click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the terms of use.</source>
          <target state="new">Search for <ph id="ph1">`Microsoft Azure Service Bus Event Hub - EventProcessorHost`</ph>, click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the terms of use.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus Event Hub - EventProcessorHost NuGet package<ept id="p1">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>, with all its dependencies.</source>
          <target state="new">This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus Event Hub - EventProcessorHost NuGet package<ept id="p1">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>, with all its dependencies.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept> project, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</source>
          <target state="new">Right-click the <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept> project, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Name the new class <bpt id="p1">**</bpt>StoreEventProcessor<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> to create the class.</source>
          <target state="new">Name the new class <bpt id="p1">**</bpt>StoreEventProcessor<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> to create the class.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add the following statements at the top of the StoreEventProcessor.cs file:</source>
          <target state="new">Add the following statements at the top of the StoreEventProcessor.cs file:</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Then, substitute the following code for the body of the class:</source>
          <target state="new">Then, substitute the following code for the body of the class:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This class will be called by the <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> to process device-to-cloud messages received from IoT Hub, and implements the main logic for reliably storing messages in a blob container and forwarding interactive messages to the Service Bus queue.</source>
          <target state="new">This class will be called by the <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> to process device-to-cloud messages received from IoT Hub, and implements the main logic for reliably storing messages in a blob container and forwarding interactive messages to the Service Bus queue.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OpenAsync()`</ph> method, initialized the  <ph id="ph2">`currentBlockInitOffset`</ph> variable which tracks the current offset of the first message being read by this event processor (remember that each processor is responsible for a single partition).</source>
          <target state="new">The <ph id="ph1">`OpenAsync()`</ph> method, initialized the  <ph id="ph2">`currentBlockInitOffset`</ph> variable which tracks the current offset of the first message being read by this event processor (remember that each processor is responsible for a single partition).</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessEventsAsync()`</ph> method receives a batch of messages from IoT Hub that are processed in the following way.</source>
          <target state="new">The <ph id="ph1">`ProcessEventsAsync()`</ph> method receives a batch of messages from IoT Hub that are processed in the following way.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Interactive messages are sent to the Service Bus queue, while data point messages are appended to the memoryBuffer called <ph id="ph1">`toAppend`</ph>.</source>
          <target state="new">Interactive messages are sent to the Service Bus queue, while data point messages are appended to the memoryBuffer called <ph id="ph1">`toAppend`</ph>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In case the memory buffer reaches the block limit (i.e. 4Mb), or the Service Bus deduplication time windows has elapsed since the last checkpoint (in this tutorial, 1 hour), a checkpoint is triggered.</source>
          <target state="new">In case the memory buffer reaches the block limit (i.e. 4Mb), or the Service Bus deduplication time windows has elapsed since the last checkpoint (in this tutorial, 1 hour), a checkpoint is triggered.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The method <ph id="ph1">`AppendAndCheckpoint()`</ph> first generates a blockId for the block to be appended.</source>
          <target state="new">The method <ph id="ph1">`AppendAndCheckpoint()`</ph> first generates a blockId for the block to be appended.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Since Azure storage requires all block ids to have the same length, the offset is padded with leading zeroes (<ph id="ph1">`currentBlockInitOffset.ToString("0000000000000000000000000")`</ph>).</source>
          <target state="new">Since Azure storage requires all block ids to have the same length, the offset is padded with leading zeroes (<ph id="ph1">`currentBlockInitOffset.ToString("0000000000000000000000000")`</ph>).</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Then, if a block with this id is already in the blob, the method overwrites it with the current one.</source>
          <target state="new">Then, if a block with this id is already in the blob, the method overwrites it with the current one.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To simplify the code, this tutorial uses a single blob file per partition to store the messages.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To simplify the code, this tutorial uses a single blob file per partition to store the messages.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A real solution would implement file rolling, by creating additional files when they reach a certain size (note Azure blob can be at most 195Gb), or after a certain amount of time (e.g. <ph id="ph1">`fileName_{partitionId}_{date-time}`</ph>).</source>
          <target state="new">A real solution would implement file rolling, by creating additional files when they reach a certain size (note Azure blob can be at most 195Gb), or after a certain amount of time (e.g. <ph id="ph1">`fileName_{partitionId}_{date-time}`</ph>).</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Program<ept id="p1">**</ept> class, add the following <ph id="ph1">`using`</ph> statements at the top:</source>
          <target state="new">In the <bpt id="p1">**</bpt>Program<ept id="p1">**</ept> class, add the following <ph id="ph1">`using`</ph> statements at the top:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Then, modify the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class as shown below, substituting the IoT Hub <bpt id="p3">**</bpt>iothubowner<ept id="p3">**</ept> connection string (from [Get started with IoT Hub] tutorial), the storage connection string, and the Service Bus connection string with <bpt id="p4">**</bpt>Send<ept id="p4">**</ept> permissions for the queue named <bpt id="p5">**</bpt>d2ctutorial<ept id="p5">**</ept>:</source>
          <target state="new">Then, modify the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class as shown below, substituting the IoT Hub <bpt id="p3">**</bpt>iothubowner<ept id="p3">**</ept> connection string (from [Get started with IoT Hub] tutorial), the storage connection string, and the Service Bus connection string with <bpt id="p4">**</bpt>Send<ept id="p4">**</ept> permissions for the queue named <bpt id="p5">**</bpt>d2ctutorial<ept id="p5">**</ept>:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> For simplicity's sake, this tutorial uses a single instance of <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> For simplicity's sake, this tutorial uses a single instance of <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Please refer to <bpt id="p1">[</bpt><ept id="p1">Event Hubs Programming Guide]</ept> and the [Process device-to-cloud messages] tutorial for more information on processing device-to-cloud messages.</source>
          <target state="new">Please refer to <bpt id="p1">[</bpt><ept id="p1">Event Hubs Programming Guide]</ept> and the [Process device-to-cloud messages] tutorial for more information on processing device-to-cloud messages.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Receive interactive messages</source>
          <target state="new">Receive interactive messages</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In this section, you'll write a Windows console app that receives interactive messages from the Service Bus queue.</source>
          <target state="new">In this section, you'll write a Windows console app that receives interactive messages from the Service Bus queue.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt>Build multi-tier applications with Service Bus<ept id="p1">][]</ept> for more information on how to architect a solution using Service Bus.</source>
          <target state="new">Refer to <bpt id="p1">[</bpt>Build multi-tier applications with Service Bus<ept id="p1">][]</ept> for more information on how to architect a solution using Service Bus.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the current Visual Studio solution, create a new Visual C# Desktop App project using the <bpt id="p1">**</bpt>Console  Application<ept id="p1">**</ept> project template.</source>
          <target state="new">In the current Visual Studio solution, create a new Visual C# Desktop App project using the <bpt id="p1">**</bpt>Console  Application<ept id="p1">**</ept> project template.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Name the project <bpt id="p1">**</bpt>ProcessD2cInteractiveMessages<ept id="p1">**</ept>.</source>
          <target state="new">Name the project <bpt id="p1">**</bpt>ProcessD2cInteractiveMessages<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click the solution, and then click <bpt id="p1">**</bpt>Manage NuGet Packages for Solution...<ept id="p1">**</ept>.</source>
          <target state="new">In Solution Explorer, right-click the solution, and then click <bpt id="p1">**</bpt>Manage NuGet Packages for Solution...<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This displays the Manage NuGet Packages window.</source>
          <target state="new">This displays the Manage NuGet Packages window.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Search for <ph id="ph1">`WindowsAzure.Service Bus`</ph>, click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the terms of use.</source>
          <target state="new">Search for <ph id="ph1">`WindowsAzure.Service Bus`</ph>, click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the terms of use.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>, with all its dependencies.</source>
          <target state="new">This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>, with all its dependencies.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`using`</ph> statement at the top of the <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> file:</source>
          <target state="new">Add the following <ph id="ph1">`using`</ph> statement at the top of the <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> file:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Finally, add the following lines to the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method, substituting the connection string with <bpt id="p2">**</bpt>Listen<ept id="p2">**</ept> permissions for the queue named <bpt id="p3">**</bpt>d2ctutorial<ept id="p3">**</ept>:</source>
          <target state="new">Finally, add the following lines to the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method, substituting the connection string with <bpt id="p2">**</bpt>Listen<ept id="p2">**</ept> permissions for the queue named <bpt id="p3">**</bpt>d2ctutorial<ept id="p3">**</ept>:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>