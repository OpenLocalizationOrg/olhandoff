{
  "nodes": [
    {
      "pos": [
        3,
        79
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"server-auth\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Authenticate with a Provider (Server Flow)"
    },
    {
      "content": "To have Mobile Services manage the authentication process in your app, you must register your app with your identity",
      "pos": [
        81,
        197
      ]
    },
    {
      "content": "provider.",
      "pos": [
        198,
        207
      ]
    },
    {
      "content": "Then in your Azure App Service, you need to configure the application ID and secret provided by your provider.",
      "pos": [
        208,
        318
      ]
    },
    {
      "content": "For more information, see the tutorial [Add authentication to your app].",
      "pos": [
        319,
        391
      ]
    },
    {
      "content": "Once you have registered your identity provider, simply call the .login() method with the name of your provider.",
      "pos": [
        393,
        505
      ]
    },
    {
      "content": "For",
      "pos": [
        506,
        509
      ]
    },
    {
      "content": "example, to login with Facebook use the following code.",
      "pos": [
        510,
        565
      ]
    },
    {
      "content": "If you are using an identity provider other than Facebook, change the value passed to the login method above to one of",
      "pos": [
        739,
        857
      ]
    },
    {
      "content": "the following: <ph id=\"ph1\">`microsoftaccount`</ph>, <ph id=\"ph2\">`facebook`</ph>, <ph id=\"ph3\">`twitter`</ph>, <ph id=\"ph4\">`google`</ph>, or <ph id=\"ph5\">`aad`</ph>.",
      "pos": [
        858,
        935
      ]
    },
    {
      "content": "In this case, Azure App Service manages the OAuth 2.0 authentication flow by displaying the login page of the selected",
      "pos": [
        937,
        1055
      ]
    },
    {
      "content": "provider and generating a App Service authentication token after successful login with the identity provider.",
      "pos": [
        1056,
        1165
      ]
    },
    {
      "content": "The login",
      "pos": [
        1166,
        1175
      ]
    },
    {
      "content": "function, when complete, returns a JSON object (user) that exposes both the user ID and App Service authentication token",
      "pos": [
        1176,
        1296
      ]
    },
    {
      "content": "in the userId and authenticationToken fields, respectively.",
      "pos": [
        1297,
        1356
      ]
    },
    {
      "content": "This token can be cached and re-used until it expires.",
      "pos": [
        1357,
        1411
      ]
    },
    {
      "pos": [
        1416,
        1492
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"client-auth\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Authenticate with a Provider (Client Flow)"
    },
    {
      "content": "Your app can also independently contact the identity provider and then provide the returned token to your App Service for",
      "pos": [
        1494,
        1615
      ]
    },
    {
      "content": "authentication.",
      "pos": [
        1616,
        1631
      ]
    },
    {
      "content": "This client flow enables you to provide a single sign-in experience for users or to retrieve additional",
      "pos": [
        1632,
        1735
      ]
    },
    {
      "content": "user data from the identity provider.",
      "pos": [
        1736,
        1773
      ]
    },
    {
      "content": "Social Authentication basic example",
      "pos": [
        1780,
        1815
      ]
    },
    {
      "content": "This example uses Facebook client SDK for authentication:",
      "pos": [
        1817,
        1874
      ]
    },
    {
      "content": "This example assumes that the token provided by the respective provider SDK is stored in the token variable.",
      "pos": [
        2084,
        2192
      ]
    },
    {
      "content": "Microsoft Account example",
      "pos": [
        2199,
        2224
      ]
    },
    {
      "content": "The following example uses the Live SDK, which supports single-sign-on for Windows Store apps by using Microsoft Account:",
      "pos": [
        2226,
        2347
      ]
    },
    {
      "content": "This example gets a token from Live Connect, which is supplied to your App Service by calling the login function.",
      "pos": [
        2719,
        2832
      ]
    },
    {
      "pos": [
        2837,
        2919
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"auth-getinfo\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Obtain information about the authenticated user"
    },
    {
      "content": "The authentication information for the current user can be retrieved from the <ph id=\"ph1\">`/.auth/me`</ph> endpoint using any",
      "pos": [
        2921,
        3029
      ]
    },
    {
      "content": "AJAX method.",
      "pos": [
        3030,
        3042
      ]
    },
    {
      "content": "For example, to use the fetch API:",
      "pos": [
        3044,
        3078
      ]
    },
    {
      "content": "You could also use jQuery or another AJAX API to fetch the information.",
      "pos": [
        3314,
        3385
      ]
    },
    {
      "content": "Data will be received as a JSON object.",
      "pos": [
        3387,
        3426
      ]
    }
  ],
  "content": "###<a name=\"server-auth\"></a>How to: Authenticate with a Provider (Server Flow)\n\nTo have Mobile Services manage the authentication process in your app, you must register your app with your identity\nprovider. Then in your Azure App Service, you need to configure the application ID and secret provided by your provider.\nFor more information, see the tutorial [Add authentication to your app].\n\nOnce you have registered your identity provider, simply call the .login() method with the name of your provider. For\nexample, to login with Facebook use the following code.\n\n```\nclient.login(\"facebook\").done(function (results) {\n     alert(\"You are now logged in as: \" + results.userId);\n}, function (err) {\n     alert(\"Error: \" + err);\n});\n```\n\nIf you are using an identity provider other than Facebook, change the value passed to the login method above to one of\nthe following: `microsoftaccount`, `facebook`, `twitter`, `google`, or `aad`.\n\nIn this case, Azure App Service manages the OAuth 2.0 authentication flow by displaying the login page of the selected\nprovider and generating a App Service authentication token after successful login with the identity provider. The login\nfunction, when complete, returns a JSON object (user) that exposes both the user ID and App Service authentication token\nin the userId and authenticationToken fields, respectively. This token can be cached and re-used until it expires.\n\n###<a name=\"client-auth\"></a>How to: Authenticate with a Provider (Client Flow)\n\nYour app can also independently contact the identity provider and then provide the returned token to your App Service for\nauthentication. This client flow enables you to provide a single sign-in experience for users or to retrieve additional\nuser data from the identity provider.\n\n#### Social Authentication basic example\n\nThis example uses Facebook client SDK for authentication:\n\n```\nclient.login(\n     \"facebook\",\n     {\"access_token\": token})\n.done(function (results) {\n     alert(\"You are now logged in as: \" + results.userId);\n}, function (err) {\n     alert(\"Error: \" + err);\n});\n```\nThis example assumes that the token provided by the respective provider SDK is stored in the token variable.\n\n#### Microsoft Account example\n\nThe following example uses the Live SDK, which supports single-sign-on for Windows Store apps by using Microsoft Account:\n\n```\nWL.login({ scope: \"wl.basic\"}).then(function (result) {\n      client.login(\n            \"microsoftaccount\",\n            {\"authenticationToken\": result.session.authentication_token})\n      .done(function(results){\n            alert(\"You are now logged in as: \" + results.userId);\n      },\n      function(error){\n            alert(\"Error: \" + err);\n      });\n});\n```\n\nThis example gets a token from Live Connect, which is supplied to your App Service by calling the login function.\n\n###<a name=\"auth-getinfo\"></a>How to: Obtain information about the authenticated user\n\nThe authentication information for the current user can be retrieved from the `/.auth/me` endpoint using any\nAJAX method.  For example, to use the fetch API:\n\n```\nvar url = client.applicationUrl + '/.auth/me';\nfetch(url)\n    .then(function (data) {\n        return data.json()\n    }).then(function (user) {\n        // The user object contains the claims for the authenticated user\n    });\n```\n\nYou could also use jQuery or another AJAX API to fetch the information.  Data will be received as a JSON object.\n"
}