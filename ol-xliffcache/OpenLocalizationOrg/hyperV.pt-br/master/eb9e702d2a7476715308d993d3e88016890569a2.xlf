<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pt-br">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb9e702d2a7476715308d993d3e88016890569a2</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Send interactive messages from simulated device</source>
          <target state="new">Send interactive messages from simulated device</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you'll modify the simulated device application you created in the <bpt id="p1">[</bpt><ept id="p1">Get started with IoT Hub]</ept> tutorial to send interactive device-to-cloud messages to the IoT hub.</source>
          <target state="new">In this section, you'll modify the simulated device application you created in the <bpt id="p1">[</bpt><ept id="p1">Get started with IoT Hub]</ept> tutorial to send interactive device-to-cloud messages to the IoT hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Visual Studio, in the <bpt id="p1">**</bpt>SimulatedDevice<ept id="p1">**</ept> project, add the following method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class.</source>
          <target state="new">In Visual Studio, in the <bpt id="p1">**</bpt>SimulatedDevice<ept id="p1">**</ept> project, add the following method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This method is very similar to the <bpt id="p1">**</bpt>SendDeviceToCloudMessagesAsync<ept id="p1">**</ept> method in <bpt id="p2">**</bpt>SimulatedDevice<ept id="p2">**</ept> project.</source>
          <target state="new">This method is very similar to the <bpt id="p1">**</bpt>SendDeviceToCloudMessagesAsync<ept id="p1">**</ept> method in <bpt id="p2">**</bpt>SimulatedDevice<ept id="p2">**</ept> project.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The only differences are that you now set the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> system property, and a user property called <bpt id="p2">**</bpt>messageType<ept id="p2">**</ept>.</source>
          <target state="new">The only differences are that you now set the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> system property, and a user property called <bpt id="p2">**</bpt>messageType<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The code assigns a globally unique identifier (guid) to the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> property, that Service Bus can use to deduplicate the messages it receives.</source>
          <target state="new">The code assigns a globally unique identifier (guid) to the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> property, that Service Bus can use to deduplicate the messages it receives.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The sample uses the <bpt id="p1">**</bpt>messageType<ept id="p1">**</ept> property to distinguish interactive from data point messages.</source>
          <target state="new">The sample uses the <bpt id="p1">**</bpt>messageType<ept id="p1">**</ept> property to distinguish interactive from data point messages.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The application passes this information in message properties instead of in the message body, so that the event processor does not need to deserialize the message to perform message routing.</source>
          <target state="new">The application passes this information in message properties instead of in the message body, so that the event processor does not need to deserialize the message to perform message routing.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> It is important to create the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> used to deduplicate interactive messages in the device code because intermittent network communications, or other failures, could result in multiple retransmissions of the same message from that device.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> It is important to create the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> used to deduplicate interactive messages in the device code because intermittent network communications, or other failures, could result in multiple retransmissions of the same message from that device.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also use a semantic message id - such as a hash of the relevant message data fields - in place of a guid.</source>
          <target state="new">You can also use a semantic message id - such as a hash of the relevant message data fields - in place of a guid.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Add the following method in the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method right before the <ph id="ph1">`Console.ReadLine()`</ph> line:</source>
          <target state="new">Add the following method in the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method right before the <ph id="ph1">`Console.ReadLine()`</ph> line:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> For the sake of simplicity, this tutorial does not implement any retry policy.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> For the sake of simplicity, this tutorial does not implement any retry policy.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In production code, you should implement a retry policy such as exponential backoff, as suggested in the MSDN article <bpt id="p1">[</bpt><ept id="p1">Transient Fault Handling]</ept>.</source>
          <target state="new">In production code, you should implement a retry policy such as exponential backoff, as suggested in the MSDN article <bpt id="p1">[</bpt><ept id="p1">Transient Fault Handling]</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>