{
  "nodes": [
    {
      "content": "Build and deploy a Java API app in Azure App Service",
      "pos": [
        27,
        79
      ]
    },
    {
      "content": "Learn how to create a Java API app package and deploy it to Azure App Service.",
      "pos": [
        98,
        176
      ]
    },
    {
      "content": "Build and deploy a Java API app in Azure App Service",
      "pos": [
        513,
        565
      ]
    },
    {
      "content": "This tutorial shows how to create a Java application and deploy it to Azure App Service API Apps using <bpt id=\"p1\">[</bpt>Git<ept id=\"p1\">](http://git-scm.com)</ept>.",
      "pos": [
        679,
        808
      ]
    },
    {
      "content": "The instructions in this tutorial can be followed on any operating system that is capable of running Java.",
      "pos": [
        809,
        915
      ]
    },
    {
      "content": "The code in this tutorial is built using <bpt id=\"p1\">[</bpt>Maven<ept id=\"p1\">](https://maven.apache.org/)</ept>.",
      "pos": [
        916,
        992
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Jax-RS<ept id=\"p1\">](https://jax-rs-spec.java.net/)</ept> is used to create the RESTful Service, and is generated based on <bpt id=\"p2\">[</bpt>Swagger<ept id=\"p2\">](http://swagger.io)</ept> metadata specification using the <bpt id=\"p3\">[</bpt>Swagger Editor<ept id=\"p3\">](http://editor.swagger.io/)</ept>.",
      "pos": [
        993,
        1204
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        1209,
        1222
      ]
    },
    {
      "pos": [
        1227,
        1347
      ],
      "content": "<bpt id=\"p1\">[</bpt>Java Developer's Kit 8<ept id=\"p1\">](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)</ept> (or later)"
    },
    {
      "pos": [
        1351,
        1485
      ],
      "content": "A paid or <bpt id=\"p1\">[</bpt>free trial<ept id=\"p1\">](https://azure.microsoft.com/pricing/free-trial/)</ept> subscription to <bpt id=\"p2\">[</bpt>Microsoft Azure<ept id=\"p2\">](https://azure.microsoft.com)</ept>"
    },
    {
      "pos": [
        1489,
        1561
      ],
      "content": "<bpt id=\"p1\">[</bpt>Maven<ept id=\"p1\">](https://maven.apache.org/)</ept> installed on your development machine"
    },
    {
      "content": "Git installed on your development machine.",
      "pos": [
        1565,
        1607
      ]
    },
    {
      "content": "Scaffold the API using Swagger.IO",
      "pos": [
        1613,
        1646
      ]
    },
    {
      "content": "Using the swagger.io online editor, you can enter in Swagger JSON or YAML code representing the structure of your API.",
      "pos": [
        1647,
        1765
      ]
    },
    {
      "content": "Once you've got the API surface area designed, you can export code in a variety of platforms and frameworks.",
      "pos": [
        1766,
        1874
      ]
    },
    {
      "content": "In the next section the scaffolded code will be modified to include mock functionality.",
      "pos": [
        1875,
        1962
      ]
    },
    {
      "content": "This demonstration will begin with a Swagger JSON body that will be pasted into the swagger.io editor, which will then be used to generate code making use of JAX-RS to access a REST API endpoint.",
      "pos": [
        1965,
        2160
      ]
    },
    {
      "content": "Then, you'll edit the scaffolded code to return mock data, simulating a REST API built atop a data persistence mechanism.",
      "pos": [
        2161,
        2282
      ]
    },
    {
      "content": "Copy the Swagger JSON code below to your clipboard",
      "pos": [
        2289,
        2339
      ]
    },
    {
      "content": "Navigate to the <bpt id=\"p1\">[</bpt>Online Swagger editor<ept id=\"p1\">](http://editor.swagger.io/)</ept>.",
      "pos": [
        5662,
        5729
      ]
    },
    {
      "content": "Once there, click the <bpt id=\"p1\">**</bpt>File -&gt; Paste JSON<ept id=\"p1\">**</ept> menu item.",
      "pos": [
        5730,
        5785
      ]
    },
    {
      "content": "Paste Json",
      "pos": [
        5793,
        5803
      ]
    },
    {
      "content": "Paste in the Contacts List API Swagger JSON you copied earlier.",
      "pos": [
        5860,
        5923
      ]
    },
    {
      "content": "Pasted Swagger",
      "pos": [
        5932,
        5946
      ]
    },
    {
      "content": "View the documentation pages and API summary rendered in the editor.",
      "pos": [
        6007,
        6075
      ]
    },
    {
      "content": "View Swagger Generated Docs",
      "pos": [
        6084,
        6111
      ]
    },
    {
      "pos": [
        6185,
        6316
      ],
      "content": "Select the <bpt id=\"p1\">**</bpt>Generate Server -&gt; JAX-RS<ept id=\"p1\">**</ept> menu option to scaffold the server-side code you'll edit later to add mock implementation."
    },
    {
      "content": "Generate Code Menu Item",
      "pos": [
        6325,
        6348
      ]
    },
    {
      "content": "Once the code is generated you'll be provided a ZIP file to download.",
      "pos": [
        6423,
        6492
      ]
    },
    {
      "content": "This file contains the code scaffolded by the Swagger code generator and all of the associated build scripts.",
      "pos": [
        6493,
        6602
      ]
    },
    {
      "content": "Unzip the entire library to a directory on your development workstation.",
      "pos": [
        6603,
        6675
      ]
    },
    {
      "content": "Edit the Code to add API Implementation",
      "pos": [
        6681,
        6720
      ]
    },
    {
      "content": "In this section you'll replace the generated code's server-side implementation with your custom code.",
      "pos": [
        6721,
        6822
      ]
    },
    {
      "content": "The new code will return an ArrayList of Contact entities to the calling client.",
      "pos": [
        6823,
        6903
      ]
    },
    {
      "pos": [
        6909,
        7087
      ],
      "content": "Open the <bpt id=\"p1\">*</bpt>Contact.java<ept id=\"p1\">*</ept> model file, located in the <bpt id=\"p2\">*</bpt>src/gen/java/swagger/model<ept id=\"p2\">*</ept> folder, using <bpt id=\"p3\">[</bpt>Visual Studio Code<ept id=\"p3\">](https://code.visualstudio.com)</ept> or in your favorite text editor."
    },
    {
      "content": "Open Contact Model File",
      "pos": [
        7096,
        7119
      ]
    },
    {
      "pos": [
        7189,
        7244
      ],
      "content": "Add the following constructor to the <bpt id=\"p1\">**</bpt>Contact<ept id=\"p1\">**</ept> class."
    },
    {
      "pos": [
        7429,
        7643
      ],
      "content": "Open the <bpt id=\"p1\">*</bpt>ContactsApiServiceImpl.java<ept id=\"p1\">*</ept> service implementation file, located in the <bpt id=\"p2\">*</bpt>src/main/java/swagger/api/impl<ept id=\"p2\">*</ept> folder, using <bpt id=\"p3\">[</bpt>Visual Studio Code<ept id=\"p3\">](https://code.visualstudio.com)</ept> or in your favorite text editor."
    },
    {
      "content": "Open Contact Service Code File",
      "pos": [
        7651,
        7681
      ]
    },
    {
      "content": "Overwrite the code in the file with this new code to add a mock implementation to the service code.",
      "pos": [
        7758,
        7857
      ]
    },
    {
      "content": "Open a command prompt.",
      "pos": [
        9745,
        9767
      ]
    },
    {
      "content": "Execute the following Maven command to build the code and run it using the Jetty app server locally.",
      "pos": [
        9772,
        9872
      ]
    },
    {
      "content": "You should see the command window reflect that Jetty has started your code on port 8080.",
      "pos": [
        9917,
        10005
      ]
    },
    {
      "content": "Open Contact Service Code File",
      "pos": [
        10014,
        10044
      ]
    },
    {
      "pos": [
        10108,
        10252
      ],
      "content": "Use <bpt id=\"p1\">[</bpt>Postman<ept id=\"p1\">](https://www.getpostman.com/)</ept> to make a request to the \"get all contacts\" API method located at http://localhost:8080/api/contacts."
    },
    {
      "content": "Call the Contacts API",
      "pos": [
        10260,
        10281
      ]
    },
    {
      "pos": [
        10352,
        10502
      ],
      "content": "Use <bpt id=\"p1\">[</bpt>Postman<ept id=\"p1\">](https://www.getpostman.com/)</ept> to make a request to the \"get specific contact\" API method located at http://localhost:8080/api/contacts/2."
    },
    {
      "content": "Call the Contacts API",
      "pos": [
        10510,
        10531
      ]
    },
    {
      "content": "Finally, build the Java WAR (Web ARchive) file by executing the following Maven command in your console.",
      "pos": [
        10610,
        10714
      ]
    },
    {
      "content": "Once the WAR file is built, it will be placed into the <bpt id=\"p1\">**</bpt>target<ept id=\"p1\">**</ept> folder.",
      "pos": [
        10758,
        10831
      ]
    },
    {
      "content": "Navigate into the <bpt id=\"p1\">**</bpt>target<ept id=\"p1\">**</ept> folder and rename the WAR file <bpt id=\"p2\">**</bpt>ROOT.war<ept id=\"p2\">**</ept> (make sure the capitalization matches this format).",
      "pos": [
        10832,
        10956
      ]
    },
    {
      "pos": [
        11030,
        11139
      ],
      "content": "Finally, execute the following commands to create a <bpt id=\"p1\">**</bpt>deploy<ept id=\"p1\">**</ept> folder to use to deploy the WAR file to Azure."
    },
    {
      "content": "Publish the output to Azure App Service",
      "pos": [
        11266,
        11305
      ]
    },
    {
      "content": "In this section you'll learn how to create a new API App using the Azure Portal, prepare that API App for hosting Java applications, and deploy the newly-created WAR file to Azure App Service to run your new API App.",
      "pos": [
        11306,
        11522
      ]
    },
    {
      "pos": [
        11528,
        11661
      ],
      "content": "Create a new API app in the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](http://portal.azure.com)</ept>, by clicking on the <bpt id=\"p2\">**</bpt>New -&gt; Web + Mobile -&gt; API app<ept id=\"p2\">**</ept> menu item."
    },
    {
      "content": "Create a new API App",
      "pos": [
        11673,
        11693
      ]
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>Application settings<ept id=\"p1\">**</ept> option in the API App's settings blade.",
      "pos": [
        11754,
        11828
      ]
    },
    {
      "content": "Then, select the latest Java versions from the Java version menus, and select the latest Tomcat from the Web container menu.",
      "pos": [
        11829,
        11953
      ]
    },
    {
      "content": "Set up Java in the API App blade",
      "pos": [
        11961,
        11993
      ]
    },
    {
      "pos": [
        12051,
        12197
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Deployment credentials<ept id=\"p1\">**</ept> settings menu item, and provide a username and passowrd you wish to use for publishing files to your API App."
    },
    {
      "content": "Set deployment credentials",
      "pos": [
        12206,
        12232
      ]
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>Continuous Deployment<ept id=\"p1\">**</ept> settings menu item.",
      "pos": [
        12301,
        12356
      ]
    },
    {
      "content": "Once there, click the <bpt id=\"p1\">**</bpt>Choose source<ept id=\"p1\">**</ept> button and select the <bpt id=\"p2\">**</bpt>Local Git Repository<ept id=\"p2\">**</ept> option.",
      "pos": [
        12357,
        12451
      ]
    },
    {
      "content": "This will create a Git repository running in Azure, that has an association with your API App.",
      "pos": [
        12452,
        12546
      ]
    },
    {
      "content": "Each time you commit code to the <bpt id=\"p1\">*</bpt>master<ept id=\"p1\">*</ept> branch of your Git repository, your code will be published into your live running API App instance.",
      "pos": [
        12547,
        12688
      ]
    },
    {
      "content": "Set up a new local Git repository",
      "pos": [
        12697,
        12730
      ]
    },
    {
      "content": "Copy the new Git repository's URL to your clipboard.",
      "pos": [
        12792,
        12844
      ]
    },
    {
      "content": "Save this as it will be important in a moment.",
      "pos": [
        12845,
        12891
      ]
    },
    {
      "content": "Set up a new Git reposutory for your app",
      "pos": [
        12900,
        12940
      ]
    },
    {
      "content": "Git push the WAR file to the online repository.",
      "pos": [
        13004,
        13051
      ]
    },
    {
      "content": "To do this, navigate into the <bpt id=\"p1\">**</bpt>deploy<ept id=\"p1\">**</ept> folder you created earlier so that you can easily commit the code up to the repository running in your App Service.",
      "pos": [
        13052,
        13208
      ]
    },
    {
      "content": "Once you're in the console window and navigated into the folder where the webapps folder is located, issue the following Git commands to launch the process and fire off a deployment.",
      "pos": [
        13209,
        13391
      ]
    },
    {
      "content": "Once you issue the <bpt id=\"p1\">**</bpt>push<ept id=\"p1\">**</ept> request, you'll be asked for the password you created for the deployment credential earlier.",
      "pos": [
        13560,
        13680
      ]
    },
    {
      "content": "If you enter it in you should see your portal display the update has arrived and was deployed.",
      "pos": [
        13681,
        13775
      ]
    },
    {
      "content": "If you once again use Postman to hit the newly-deployed API App running in Azure App Service, you'll see that the behavior is consistent and that now it is returning contact data as expected, and using simple code changes to the Swagger.io scaffolded Java code.",
      "pos": [
        13789,
        14050
      ]
    },
    {
      "content": "Using your Java Contacts REST API live in Azure",
      "pos": [
        14059,
        14106
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        14187,
        14197
      ]
    },
    {
      "content": "In this article you were able to start with a Swagger JSON file and some scaffolded Java code obtained from the Swagger.io editor.",
      "pos": [
        14198,
        14328
      ]
    },
    {
      "content": "From there, your simple changes and a Git deploy process resulted in having a functional API app written in Java.",
      "pos": [
        14329,
        14442
      ]
    },
    {
      "content": "The next tutorial in the API Apps getting started series shows how to <bpt id=\"p1\">[</bpt>consume API apps from JavaScript clients, using CORS<ept id=\"p1\">](app-service-api-cors-consume-javascript.md)</ept>.",
      "pos": [
        14443,
        14612
      ]
    },
    {
      "content": "To build on this sample, you can learn more about the <bpt id=\"p1\">[</bpt>Storage SDK for Java<ept id=\"p1\">](../storage/storage-java-how-to-use-blob-storage.md)</ept> to persist the JSON blobs.",
      "pos": [
        14614,
        14769
      ]
    },
    {
      "content": "Or, you could use the <bpt id=\"p1\">[</bpt>Document DB Java SDK<ept id=\"p1\">](../documentdb/documentdb-java-application.md)</ept> to save your Contact data to Azure Document DB.",
      "pos": [
        14770,
        14908
      ]
    },
    {
      "pos": [
        14911,
        15007
      ],
      "content": "For more information about using Java in Azure, see the <bpt id=\"p1\">[</bpt>Java Developer Center<ept id=\"p1\">](/develop/java/)</ept>."
    }
  ],
  "content": "<properties\n    pageTitle=\"Build and deploy a Java API app in Azure App Service\"\n    description=\"Learn how to create a Java API app package and deploy it to Azure App Service.\"\n    services=\"app-service\\api\"\n    documentationCenter=\"java\"\n    authors=\"bradygaster\"\n    manager=\"mohisri\",\n    editor=\"tdykstra\"/>\n\n<tags\n    ms.service=\"app-service-api\"\n    ms.workload=\"web\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"java\"\n    ms.topic=\"get-started-article\"\n    ms.date=\"11/27/2015\"\n    ms.author=\"bradygaster\"/>\n\n# Build and deploy a Java API app in Azure App Service\n\n[AZURE.INCLUDE [app-service-api-get-started-selector](../../includes/app-service-api-get-started-selector.md)]\n\nThis tutorial shows how to create a Java application and deploy it to Azure App Service API Apps using [Git](http://git-scm.com). The instructions in this tutorial can be followed on any operating system that is capable of running Java. The code in this tutorial is built using [Maven](https://maven.apache.org/). [Jax-RS](https://jax-rs-spec.java.net/) is used to create the RESTful Service, and is generated based on [Swagger](http://swagger.io) metadata specification using the [Swagger Editor](http://editor.swagger.io/).\n\n## Prerequisites\n\n1. [Java Developer's Kit 8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) (or later)\n1. A paid or [free trial](https://azure.microsoft.com/pricing/free-trial/) subscription to [Microsoft Azure](https://azure.microsoft.com)\n1. [Maven](https://maven.apache.org/) installed on your development machine\n1. Git installed on your development machine. \n\n## Scaffold the API using Swagger.IO\nUsing the swagger.io online editor, you can enter in Swagger JSON or YAML code representing the structure of your API. Once you've got the API surface area designed, you can export code in a variety of platforms and frameworks. In the next section the scaffolded code will be modified to include mock functionality. \n\nThis demonstration will begin with a Swagger JSON body that will be pasted into the swagger.io editor, which will then be used to generate code making use of JAX-RS to access a REST API endpoint. Then, you'll edit the scaffolded code to return mock data, simulating a REST API built atop a data persistence mechanism.  \n\n1. Copy the Swagger JSON code below to your clipboard\n\n        {\n            \"swagger\": \"2.0\",\n            \"info\": {\n                \"version\": \"v1\",\n                \"title\": \"Contact List\",\n                \"description\": \"A Contact list API based on Swagger and built using Java\"\n            },\n            \"host\": \"localhost\",\n            \"schemes\": [\n                \"http\",\n                \"https\"\n            ],\n            \"basePath\": \"/api\",\n            \"paths\": {\n                \"/contacts\": {\n                    \"get\": {\n                        \"tags\": [\n                            \"Contact\"\n                        ],\n                        \"operationId\": \"contacts_get\",\n                        \"consumes\": [],\n                        \"produces\": [\n                            \"application/json\",\n                            \"text/json\"\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"OK\",\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/definitions/Contact\"\n                                    }\n                                }\n                            }\n                        },\n                        \"deprecated\": false\n                    }\n                },\n                \"/contacts/{id}\": {\n                    \"get\": {\n                        \"tags\": [\n                            \"Contact\"\n                        ],\n                        \"operationId\": \"contacts_getById\",\n                        \"consumes\": [],\n                        \"produces\": [\n                            \"application/json\",\n                            \"text/json\"\n                        ],\n                        \"parameters\": [\n                            {\n                                \"name\": \"id\",\n                                \"in\": \"path\",\n                                \"required\": true,\n                                \"type\": \"integer\",\n                                \"format\": \"int32\"\n                            }\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"OK\",\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/definitions/Contact\"\n                                    }\n                                }\n                            }\n                        },\n                        \"deprecated\": false\n                    }\n                }\n            },\n            \"definitions\": {\n                \"Contact\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"Id\": {\n                            \"format\": \"int32\",\n                            \"type\": \"integer\"\n                        },\n                        \"Name\": {\n                            \"type\": \"string\"\n                        },\n                        \"EmailAddress\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            }\n        }\n        \n1. Navigate to the [Online Swagger editor](http://editor.swagger.io/). Once there, click the **File -> Paste JSON** menu item.\n\n    ![Paste Json](media/app-service-api-java-api-app/paste-json.png)\n\n1. Paste in the Contacts List API Swagger JSON you copied earlier. \n\n    ![Pasted Swagger](media/app-service-api-java-api-app/pasted-swagger.png)\n\n1. View the documentation pages and API summary rendered in the editor. \n\n    ![View Swagger Generated Docs](media/app-service-api-java-api-app/view-swagger-generated-docs.png)\n\n1. Select the **Generate Server -> JAX-RS** menu option to scaffold the server-side code you'll edit later to add mock implementation. \n\n    ![Generate Code Menu Item](media/app-service-api-java-api-app/generate-code-menu-item.png)\n    \n    Once the code is generated you'll be provided a ZIP file to download. This file contains the code scaffolded by the Swagger code generator and all of the associated build scripts. Unzip the entire library to a directory on your development workstation. \n\n## Edit the Code to add API Implementation\nIn this section you'll replace the generated code's server-side implementation with your custom code. The new code will return an ArrayList of Contact entities to the calling client. \n\n1. Open the *Contact.java* model file, located in the *src/gen/java/swagger/model* folder, using [Visual Studio Code](https://code.visualstudio.com) or in your favorite text editor. \n\n    ![Open Contact Model File](media/app-service-api-java-api-app/open-contact-model-file.png)\n\n1. Add the following constructor to the **Contact** class. \n\n        public Contact(Integer id, String name, String email) \n        {\n            this.id = id;\n            this.name = name;\n            this.emailAddress = email;\n        }\n\n1. Open the *ContactsApiServiceImpl.java* service implementation file, located in the *src/main/java/swagger/api/impl* folder, using [Visual Studio Code](https://code.visualstudio.com) or in your favorite text editor.\n\n    ![Open Contact Service Code File](media/app-service-api-java-api-app/open-contact-service-code-file.png)\n\n1. Overwrite the code in the file with this new code to add a mock implementation to the service code. \n\n        package io.swagger.api.impl;\n\n        import io.swagger.api.*;\n        import io.swagger.model.*;\n        import com.sun.jersey.multipart.FormDataParam;\n        import io.swagger.model.Contact;\n        import java.util.*;\n        import io.swagger.api.NotFoundException;\n        import java.io.InputStream;\n        import com.sun.jersey.core.header.FormDataContentDisposition;\n        import com.sun.jersey.multipart.FormDataParam;\n        import javax.ws.rs.core.Response;\n\n        @javax.annotation.Generated(value = \"class io.swagger.codegen.languages.JaxRSServerCodegen\", date = \"2015-11-24T21:54:11.648Z\")\n        public class ContactsApiServiceImpl extends ContactsApiService {\n  \n            private ArrayList<Contact> loadContacts()\n            {\n                ArrayList<Contact> list = new ArrayList<Contact>();\n                list.add(new Contact(1, \"Barney Poland\", \"barney@contoso.com\"));\n                list.add(new Contact(2, \"Lacy Barrera\", \"lacy@contoso.com\"));\n                list.add(new Contact(3, \"Lora Riggs\", \"lora@contoso.com\"));\n                return list;\n            }\n  \n            @Override\n            public Response contactsGet()\n            throws NotFoundException {\n                ArrayList<Contact> list = loadContacts();\n                return Response.ok().entity(list).build();\n                }\n  \n            @Override\n            public Response contactsGetById(Integer id)\n            throws NotFoundException {\n                ArrayList<Contact> list = loadContacts();\n                Contact ret = null;\n            \n                for(int i=0; i<list.size(); i++)\n                {\n                    if(list.get(i).getId() == id)\n                    {\n                        ret = list.get(i);\n                    }\n                }\n                return Response.ok().entity(ret).build();\n            }\n        }\n\n1. Open a command prompt.\n\n1. Execute the following Maven command to build the code and run it using the Jetty app server locally. \n\n        mvn package jetty:run\n        \n1. You should see the command window reflect that Jetty has started your code on port 8080. \n\n    ![Open Contact Service Code File](media/app-service-api-java-api-app/run-jetty-war.png)\n    \n1. Use [Postman](https://www.getpostman.com/) to make a request to the \"get all contacts\" API method located at http://localhost:8080/api/contacts.\n\n    ![Call the Contacts API](media/app-service-api-java-api-app/calling-contacts-api.png)\n    \n1. Use [Postman](https://www.getpostman.com/) to make a request to the \"get specific contact\" API method located at http://localhost:8080/api/contacts/2.\n\n    ![Call the Contacts API](media/app-service-api-java-api-app/calling-specific-contact-api.png)\n    \n1. Finally, build the Java WAR (Web ARchive) file by executing the following Maven command in your console. \n\n        mvn package war:war\n        \n    Once the WAR file is built, it will be placed into the **target** folder. Navigate into the **target** folder and rename the WAR file **ROOT.war** (make sure the capitalization matches this format).\n    \n        rename swagger-jaxrs-server-1.0.0.war ROOT.war\n        \n    Finally, execute the following commands to create a **deploy** folder to use to deploy the WAR file to Azure. \n    \n        mkdir deploy\n        mkdir deploy\\webapps\n        copy target\\ROOT.war deploy\\webapps\n        cd deploy\n    \n## Publish the output to Azure App Service\nIn this section you'll learn how to create a new API App using the Azure Portal, prepare that API App for hosting Java applications, and deploy the newly-created WAR file to Azure App Service to run your new API App. \n\n1. Create a new API app in the [Azure portal](http://portal.azure.com), by clicking on the **New -> Web + Mobile -> API app** menu item.\n    \n    ![Create a new API App](media/app-service-api-java-api-app/create-api-app.png)\n\n1. Click the **Application settings** option in the API App's settings blade. Then, select the latest Java versions from the Java version menus, and select the latest Tomcat from the Web container menu.\n\n    ![Set up Java in the API App blade](media/app-service-api-java-api-app/set-up-java.png)\n\n1. Click the **Deployment credentials** settings menu item, and provide a username and passowrd you wish to use for publishing files to your API App. \n\n    ![Set deployment credentials](media/app-service-api-java-api-app/deployment-credentials.png)\n\n1. Click the **Continuous Deployment** settings menu item. Once there, click the **Choose source** button and select the **Local Git Repository** option. This will create a Git repository running in Azure, that has an association with your API App. Each time you commit code to the *master* branch of your Git repository, your code will be published into your live running API App instance. \n\n    ![Set up a new local Git repository](media/app-service-api-java-api-app/select-git-repo.png)\n\n1. Copy the new Git repository's URL to your clipboard. Save this as it will be important in a moment. \n\n    ![Set up a new Git reposutory for your app](media/app-service-api-java-api-app/copy-git-repo-url.png)\n\n1. Git push the WAR file to the online repository. To do this, navigate into the **deploy** folder you created earlier so that you can easily commit the code up to the repository running in your App Service. Once you're in the console window and navigated into the folder where the webapps folder is located, issue the following Git commands to launch the process and fire off a deployment. \n\n        git init\n        git add .\n        git commit -m \"initial commit\"\n        git remote add azure [YOUR GIT URL]     \n        git push azure master\n        \n    Once you issue the **push** request, you'll be asked for the password you created for the deployment credential earlier. If you enter it in you should see your portal display the update has arrived and was deployed. \n        \n1. If you once again use Postman to hit the newly-deployed API App running in Azure App Service, you'll see that the behavior is consistent and that now it is returning contact data as expected, and using simple code changes to the Swagger.io scaffolded Java code. \n\n    ![Using your Java Contacts REST API live in Azure](media/app-service-api-java-api-app/postman-calling-azure-contacts.png)\n    \n## Next steps\nIn this article you were able to start with a Swagger JSON file and some scaffolded Java code obtained from the Swagger.io editor. From there, your simple changes and a Git deploy process resulted in having a functional API app written in Java. The next tutorial in the API Apps getting started series shows how to [consume API apps from JavaScript clients, using CORS](app-service-api-cors-consume-javascript.md).\n\nTo build on this sample, you can learn more about the [Storage SDK for Java](../storage/storage-java-how-to-use-blob-storage.md) to persist the JSON blobs. Or, you could use the [Document DB Java SDK](../documentdb/documentdb-java-application.md) to save your Contact data to Azure Document DB. \n\nFor more information about using Java in Azure, see the [Java Developer Center](/develop/java/).\n\n\n"
}