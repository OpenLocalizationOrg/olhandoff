{
  "nodes": [
    {
      "content": "Provision an Azure Storage account",
      "pos": [
        3,
        37
      ]
    },
    {
      "content": "Since the simulated device will upload a file in an Azure Storage blob, you must have an Azure Storage account.",
      "pos": [
        38,
        149
      ]
    },
    {
      "content": "You can use an existing one, or follow the instructions in <bpt id=\"p1\">[</bpt><ept id=\"p1\">About Azure Storage]</ept> to create a new one.",
      "pos": [
        150,
        251
      ]
    },
    {
      "content": "Take note of the storage account connection string.",
      "pos": [
        252,
        303
      ]
    },
    {
      "content": "Send an Azure blob URI to the simulated device",
      "pos": [
        308,
        354
      ]
    },
    {
      "content": "In this section, you'll modify the <bpt id=\"p1\">**</bpt>SendCloudtoDevice<ept id=\"p1\">**</ept> console app you created in [Send Cloud-to-Device messages with IoT Hub] to include an Azure blob URI with a shared access signature.",
      "pos": [
        356,
        545
      ]
    },
    {
      "content": "This allows the cloud back end to grant write access to the blob only to the recipient of the cloud-to-device message.",
      "pos": [
        546,
        664
      ]
    },
    {
      "pos": [
        669,
        778
      ],
      "content": "In Visual Studio, right-click the <bpt id=\"p1\">**</bpt>SendCloudtoDevice<ept id=\"p1\">**</ept> project, and then click <bpt id=\"p2\">**</bpt>Manage NuGet Packages...<ept id=\"p2\">**</ept>."
    },
    {
      "content": "This displays the Manage NuGet Packages window.",
      "pos": [
        785,
        832
      ]
    },
    {
      "pos": [
        837,
        919
      ],
      "content": "Search for <ph id=\"ph1\">`WindowsAzure.Storage`</ph>, click <bpt id=\"p1\">**</bpt>Install<ept id=\"p1\">**</ept>, and accept the terms of use."
    },
    {
      "pos": [
        926,
        1064
      ],
      "content": "This downloads, installs, and adds a reference to the <bpt id=\"p1\">[</bpt>Microsoft Azure Storage SDK<ept id=\"p1\">](https://www.nuget.org/packages/WindowsAzure.Storage/)</ept>."
    },
    {
      "pos": [
        1069,
        1149
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> file, add the following statements at the top of the file:"
    },
    {
      "pos": [
        1252,
        1370
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Program<ept id=\"p1\">**</ept> class, add the following class fields, substituting the connection string for your storage account."
    },
    {
      "pos": [
        1456,
        1580
      ],
      "content": "Then add the following method (you can substitute any blob container name, this tutorial uses <bpt id=\"p1\">**</bpt>iothubfileuploadtutorial<ept id=\"p1\">**</ept>):"
    },
    {
      "content": "This method creates a new blob reference and generates a shared access signature URI as described in <bpt id=\"p1\">[</bpt>Create and use a SAS with Blob storage<ept id=\"p1\">](../storage/storage-dotnet-shared-access-signature-part-2.md)</ept>.",
      "pos": [
        2637,
        2840
      ]
    },
    {
      "content": "Note that the method above generates a signature URI that is valid for 24 hours.",
      "pos": [
        2841,
        2921
      ]
    },
    {
      "content": "If the target device needs more time to upload the file (e.g. it connects infrequently, it has unreliable connectivity to upload a large file), you might consider longer expiration times for the signatures.",
      "pos": [
        2922,
        3128
      ]
    },
    {
      "pos": [
        3133,
        3199
      ],
      "content": "Modify the <bpt id=\"p1\">**</bpt>SendCloudToDeviceMessageAsync<ept id=\"p1\">**</ept> in the following way:"
    },
    {
      "content": "This method sends a cloud-to-device message that contains two application properties: one identifying this message as a command to upload a file, the other holding the blob URI.",
      "pos": [
        3626,
        3803
      ]
    },
    {
      "content": "It also requests full delivery acknowledgments.",
      "pos": [
        3804,
        3851
      ]
    },
    {
      "content": "Note that the information in the two application properties can be serialized in a message body, but that would incur additional processing to serialize and deserialize the information.",
      "pos": [
        3852,
        4037
      ]
    }
  ],
  "content": "## Provision an Azure Storage account\nSince the simulated device will upload a file in an Azure Storage blob, you must have an Azure Storage account. You can use an existing one, or follow the instructions in [About Azure Storage] to create a new one. Take note of the storage account connection string.\n\n## Send an Azure blob URI to the simulated device\n\nIn this section, you'll modify the **SendCloudtoDevice** console app you created in [Send Cloud-to-Device messages with IoT Hub] to include an Azure blob URI with a shared access signature. This allows the cloud back end to grant write access to the blob only to the recipient of the cloud-to-device message.\n\n1. In Visual Studio, right-click the **SendCloudtoDevice** project, and then click **Manage NuGet Packages...**. \n\n    This displays the Manage NuGet Packages window.\n\n2. Search for `WindowsAzure.Storage`, click **Install**, and accept the terms of use. \n\n    This downloads, installs, and adds a reference to the [Microsoft Azure Storage SDK](https://www.nuget.org/packages/WindowsAzure.Storage/).\n\n3. In the **Program.cs** file, add the following statements at the top of the file:\n\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Blob;\n\n4. In the **Program** class, add the following class fields, substituting the connection string for your storage account.\n\n        static string storageConnectionString = \"{storage connection string}\";\n\n    Then add the following method (you can substitute any blob container name, this tutorial uses **iothubfileuploadtutorial**):\n   \n        private static async Task<string> GenerateBlobUriAsync()\n        {\n            var storageAccount = CloudStorageAccount.Parse(storageConnectionString);\n            var blobClient = storageAccount.CreateCloudBlobClient();\n            var blobContainer = blobClient.GetContainerReference(\"iothubfileuploadtutorial\");\n            await blobContainer.CreateIfNotExistsAsync();\n\n            var blobName = String.Format(\"deviceUpload_{0}\", Guid.NewGuid().ToString());\n            CloudBlockBlob blob = blobContainer.GetBlockBlobReference(blobName);\n\n            SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy();\n            sasConstraints.SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-5);\n            sasConstraints.SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24);\n            sasConstraints.Permissions = SharedAccessBlobPermissions.Read | SharedAccessBlobPermissions.Write;\n            string sasBlobToken = blob.GetSharedAccessSignature(sasConstraints);\n\n            return blob.Uri + sasBlobToken;\n        }\n\n    This method creates a new blob reference and generates a shared access signature URI as described in [Create and use a SAS with Blob storage](../storage/storage-dotnet-shared-access-signature-part-2.md). Note that the method above generates a signature URI that is valid for 24 hours. If the target device needs more time to upload the file (e.g. it connects infrequently, it has unreliable connectivity to upload a large file), you might consider longer expiration times for the signatures.\n\n5. Modify the **SendCloudToDeviceMessageAsync** in the following way:\n\n        private async static Task SendCloudToDeviceMessageAsync()\n        {\n            var commandMessage = new Message();\n            commandMessage.Properties[\"command\"] = \"FileUpload\";\n            commandMessage.Properties[\"fileUri\"] = await GenerateBlobUriAsync();\n            commandMessage.Ack = DeliveryAcknowledgement.Full;\n\n            await serviceClient.SendAsync(\"myFirstDevice\", commandMessage);\n        }\n\n    This method sends a cloud-to-device message that contains two application properties: one identifying this message as a command to upload a file, the other holding the blob URI. It also requests full delivery acknowledgments. Note that the information in the two application properties can be serialized in a message body, but that would incur additional processing to serialize and deserialize the information.\n\n<!-- Links -->\n\n[About Azure Storage]: ../storage/storage-create-storage-account.md#create-a-storage-account\n\n[IoT Hub Developer Guide - C2D]: iot-hub-devguide.md#c2d\n[Azure IoT - Service SDK NuGet package]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\n[Transient Fault Handling]: https://msdn.microsoft.com/library/hh680901(v=pandp.50).aspx\n[Get started with IoT Hub]: iot-hub-csharp-csharp-getstarted.md\n\n<!-- Images -->\n\n\n\n\n\n\n\n"
}