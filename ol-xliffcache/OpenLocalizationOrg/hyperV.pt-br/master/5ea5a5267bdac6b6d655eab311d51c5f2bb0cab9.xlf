<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pt-br">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ea5a5267bdac6b6d655eab311d51c5f2bb0cab9</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create a simulated device app</source>
          <target state="new">Create a simulated device app</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you'll create a Java console app that simulates a device that sends device-to-cloud messages to an IoT hub.</source>
          <target state="new">In this section, you'll create a Java console app that simulates a device that sends device-to-cloud messages to an IoT hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In the iot-java-get-started folder you created in the <bpt id="p1">*</bpt>Create a device identity<ept id="p1">*</ept> section, create a new Maven project called <bpt id="p2">**</bpt>simulated-device<ept id="p2">**</ept> using the following command at your command-prompt.</source>
          <target state="new">In the iot-java-get-started folder you created in the <bpt id="p1">*</bpt>Create a device identity<ept id="p1">*</ept> section, create a new Maven project called <bpt id="p2">**</bpt>simulated-device<ept id="p2">**</ept> using the following command at your command-prompt.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Note that this is a single, long command:</source>
          <target state="new">Note that this is a single, long command:</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>At your command prompt, navigate to the new simulated-device folder.</source>
          <target state="new">At your command prompt, navigate to the new simulated-device folder.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using a text editor, open the pom.xml file in the simulated-device folder and add the following dependencies to the <bpt id="p1">**</bpt>dependencies<ept id="p1">**</ept> node.</source>
          <target state="new">Using a text editor, open the pom.xml file in the simulated-device folder and add the following dependencies to the <bpt id="p1">**</bpt>dependencies<ept id="p1">**</ept> node.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This enables you to use the iothub-java-client package in your application to communicate with your IoT hub and to serialize Java objects to JSON:</source>
          <target state="new">This enables you to use the iothub-java-client package in your application to communicate with your IoT hub and to serialize Java objects to JSON:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Save and close the pom.xml file.</source>
          <target state="new">Save and close the pom.xml file.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using a text editor, open the simulated-device\src\main\java\com\mycompany\app\App.java file.</source>
          <target state="new">Using a text editor, open the simulated-device\src\main\java\com\mycompany\app\App.java file.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add the following <bpt id="p1">**</bpt>import<ept id="p1">**</ept> statements to the file:</source>
          <target state="new">Add the following <bpt id="p1">**</bpt>import<ept id="p1">**</ept> statements to the file:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Add the following class-level variables to the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class, replacing <bpt id="p2">**</bpt>{youriothubname}<ept id="p2">**</ept> with your IoT hub name, and <bpt id="p3">**</bpt>{yourdeviceid}<ept id="p3">**</ept> and <bpt id="p4">**</bpt>{yourdevicekey}<ept id="p4">**</ept> with the device values you generated in the <bpt id="p5">*</bpt>Create a device identity<ept id="p5">*</ept> section:</source>
          <target state="new">Add the following class-level variables to the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class, replacing <bpt id="p2">**</bpt>{youriothubname}<ept id="p2">**</ept> with your IoT hub name, and <bpt id="p3">**</bpt>{yourdeviceid}<ept id="p3">**</ept> and <bpt id="p4">**</bpt>{yourdevicekey}<ept id="p4">**</ept> with the device values you generated in the <bpt id="p5">*</bpt>Create a device identity<ept id="p5">*</ept> section:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This sample application uses the <bpt id="p1">**</bpt>protocol<ept id="p1">**</ept> variable when it instantiates a <bpt id="p2">**</bpt>DeviceClient<ept id="p2">**</ept> object.</source>
          <target state="new">This sample application uses the <bpt id="p1">**</bpt>protocol<ept id="p1">**</ept> variable when it instantiates a <bpt id="p2">**</bpt>DeviceClient<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use either the HTTPS or AMQPS protocol to communicate with IoT Hub.</source>
          <target state="new">You can use either the HTTPS or AMQPS protocol to communicate with IoT Hub.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add the following nested <bpt id="p1">**</bpt>TelemetryDataPoint<ept id="p1">**</ept> class inside the <bpt id="p2">**</bpt>App<ept id="p2">**</ept> class to specify the telemetry data your device sends to your IoT hub:</source>
          <target state="new">Add the following nested <bpt id="p1">**</bpt>TelemetryDataPoint<ept id="p1">**</ept> class inside the <bpt id="p2">**</bpt>App<ept id="p2">**</ept> class to specify the telemetry data your device sends to your IoT hub:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Add the following nested <bpt id="p1">**</bpt>EventCallback<ept id="p1">**</ept> class inside the <bpt id="p2">**</bpt>App<ept id="p2">**</ept> class to display the acknowledgement status that the IoT hub returns when it processes a message from the simulated device.</source>
          <target state="new">Add the following nested <bpt id="p1">**</bpt>EventCallback<ept id="p1">**</ept> class inside the <bpt id="p2">**</bpt>App<ept id="p2">**</ept> class to display the acknowledgement status that the IoT hub returns when it processes a message from the simulated device.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This method also notifies the main thread in the application when the message has been processed:</source>
          <target state="new">This method also notifies the main thread in the application when the message has been processed:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Add the following nested <bpt id="p1">**</bpt>MessageSender<ept id="p1">**</ept> class inside the <bpt id="p2">**</bpt>App<ept id="p2">**</ept> class.</source>
          <target state="new">Add the following nested <bpt id="p1">**</bpt>MessageSender<ept id="p1">**</ept> class inside the <bpt id="p2">**</bpt>App<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>run<ept id="p1">**</ept> method in this class generates sample telemetry data to send to your IoT hub and waits for an acknowledgement before sending the next message:</source>
          <target state="new">The <bpt id="p1">**</bpt>run<ept id="p1">**</ept> method in this class generates sample telemetry data to send to your IoT hub and waits for an acknowledgement before sending the next message:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method sends a new device-to-cloud message one second after the IoT hub acknowledges the previous message.</source>
          <target state="new">This method sends a new device-to-cloud message one second after the IoT hub acknowledges the previous message.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The message contains a JSON-serialized object with the deviceId and a randomly generated number to simulate a wind speed sensor.</source>
          <target state="new">The message contains a JSON-serialized object with the deviceId and a randomly generated number to simulate a wind speed sensor.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Replace the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method with the following code that creates a thread to send device-to-cloud messages to your IoT hub:</source>
          <target state="new">Replace the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method with the following code that creates a thread to send device-to-cloud messages to your IoT hub:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Save and close the App.java file.</source>
          <target state="new">Save and close the App.java file.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To build the <bpt id="p1">**</bpt>simulated-device<ept id="p1">**</ept> application using Maven, execute the following command at the command-prompt in the simulated-device folder:</source>
          <target state="new">To build the <bpt id="p1">**</bpt>simulated-device<ept id="p1">**</ept> application using Maven, execute the following command at the command-prompt in the simulated-device folder:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To keep things simple, this tutorial does not implement any retry policy.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To keep things simple, this tutorial does not implement any retry policy.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In production code, you should implement retry policies (such as an exponential backoff), as suggested in the MSDN article <bpt id="p1">[</bpt>Transient Fault Handling<ept id="p1">][lnk-transient-faults]</ept>.</source>
          <target state="new">In production code, you should implement retry policies (such as an exponential backoff), as suggested in the MSDN article <bpt id="p1">[</bpt>Transient Fault Handling<ept id="p1">][lnk-transient-faults]</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>