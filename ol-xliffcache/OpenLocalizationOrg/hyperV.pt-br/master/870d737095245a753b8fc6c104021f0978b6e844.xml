{
  "nodes": [
    {
      "content": "Get started with API Apps and ASP.NET in Azure App Service | Microsoft Azure",
      "pos": [
        27,
        103
      ]
    },
    {
      "content": "Learn how to create, deploy, and consume an ASP.NET API app in Azure App Service, by using Visual Studio 2015.",
      "pos": [
        122,
        232
      ]
    },
    {
      "content": "Get started with API Apps and ASP.NET in Azure App Service",
      "pos": [
        549,
        607
      ]
    },
    {
      "content": "Overview",
      "pos": [
        724,
        732
      ]
    },
    {
      "content": "In this tutorial, you create an <bpt id=\"p1\">[</bpt>App Service API app<ept id=\"p1\">](app-service-api-apps-why-best-platform.md)</ept>, deploy an ASP.NET Web API to the API app, and consume the API app from an ASP.NET MVC client.",
      "pos": [
        734,
        925
      ]
    },
    {
      "content": "The tutorial assumes that you are familiar with ASP.NET but have no prior experience with Microsoft Azure.",
      "pos": [
        926,
        1032
      ]
    },
    {
      "content": "On completing the tutorial, you'll have a Web API and client application up and running in the cloud.",
      "pos": [
        1033,
        1134
      ]
    },
    {
      "content": "The sample application is a simple contacts list.",
      "pos": [
        1136,
        1185
      ]
    },
    {
      "content": "The following illustration shows how the MVC app displays data received from the API.",
      "pos": [
        1186,
        1271
      ]
    },
    {
      "content": "What you'll learn",
      "pos": [
        1341,
        1358
      ]
    },
    {
      "content": "Three features of Azure App service are particularly helpful for developing and hosting APIs:",
      "pos": [
        1360,
        1453
      ]
    },
    {
      "content": "Integrated support for API metadata",
      "pos": [
        1457,
        1492
      ]
    },
    {
      "content": "CORS support",
      "pos": [
        1495,
        1507
      ]
    },
    {
      "content": "Authentication and authorization support",
      "pos": [
        1510,
        1550
      ]
    },
    {
      "content": "This is the first tutorial in a series that introduces these features.",
      "pos": [
        1553,
        1623
      ]
    },
    {
      "content": "This tutorial focuses on API metadata, the second focuses on CORS, and the third and fourth focus on authentication and authorization.",
      "pos": [
        1624,
        1758
      ]
    },
    {
      "content": "In these tutorials, you'll learn:",
      "pos": [
        1760,
        1793
      ]
    },
    {
      "content": "How to prepare your machine for Azure development by installing the Azure SDK for .NET.",
      "pos": [
        1797,
        1884
      ]
    },
    {
      "content": "How to work with API apps and web apps in Azure App Service by using tools built into Visual Studio 2015.",
      "pos": [
        1887,
        1992
      ]
    },
    {
      "content": "How to automate API discovery by using the Swashbuckle NuGet package to dynamically generate Swagger API definition JSON.",
      "pos": [
        1995,
        2116
      ]
    },
    {
      "content": "How to use automatically generated client code to consume an API app from a .NET client.",
      "pos": [
        2119,
        2207
      ]
    },
    {
      "content": "How to use the Azure portal to configure the endpoint for API app metadata.",
      "pos": [
        2210,
        2285
      ]
    },
    {
      "content": "How to use CORS to call an API app from a JavaScript client when the client is from a different domain than the API.",
      "pos": [
        2288,
        2404
      ]
    },
    {
      "content": "How to use Azure Active Directory to protect an API from unauthenticated access.",
      "pos": [
        2407,
        2487
      ]
    },
    {
      "content": "How to consume a protected API for users logged in to Azure Active Directory.",
      "pos": [
        2490,
        2567
      ]
    },
    {
      "content": "How to consume a protected API by using a service principal.",
      "pos": [
        2570,
        2630
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        2635,
        2648
      ]
    },
    {
      "content": "ASP.NET Web API",
      "pos": [
        2654,
        2669
      ]
    },
    {
      "pos": [
        2671,
        2911
      ],
      "content": "The tutorial assumes that you are familiar with ASP.NET Web API; if you need an introduction, see <bpt id=\"p1\">[</bpt>Getting Started with ASP.NET Web API 2<ept id=\"p1\">](http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api)</ept>."
    },
    {
      "content": "Visual Studio 2015",
      "pos": [
        2916,
        2934
      ]
    },
    {
      "content": "The instructions and screen shots assume you're using Visual Studio 2015, but the same guidance works for Visual Studio 2013.",
      "pos": [
        2936,
        3061
      ]
    },
    {
      "content": "Azure account",
      "pos": [
        3066,
        3079
      ]
    },
    {
      "content": "You need an Azure account to complete the tutorial.",
      "pos": [
        3081,
        3132
      ]
    },
    {
      "content": "You can:",
      "pos": [
        3133,
        3141
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Open an Azure account for free<ept id=\"p1\">](/pricing/free-trial/?WT.mc_id=A261C142F)</ept>.",
      "pos": [
        3145,
        3219
      ]
    },
    {
      "content": "You get credits that can be used to try out paid Azure services.",
      "pos": [
        3220,
        3284
      ]
    },
    {
      "content": "Even after the credits are used up, you can keep the account and use free Azure services and features, such as the Web Apps feature in Azure App Service.",
      "pos": [
        3285,
        3438
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Activate Visual Studio subscriber benefits<ept id=\"p1\">](/pricing/member-offers/msdn-benefits-details/?WT.mc_id=A261C142F)</ept>.",
      "pos": [
        3441,
        3552
      ]
    },
    {
      "content": "Your MSDN subscription gives you credits every month that you can use for paid Azure services.",
      "pos": [
        3553,
        3647
      ]
    },
    {
      "content": "If you want to get started with Azure App Service before you sign up for an Azure account, go to <bpt id=\"p1\">[</bpt>Try App Service<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=523751)</ept>.",
      "pos": [
        3649,
        3811
      ]
    },
    {
      "content": "There, you can immediately create a short-lived starter  app in App Service â€” no credit card required, and no commitments.",
      "pos": [
        3812,
        3934
      ]
    },
    {
      "content": "This tutorial requires version 2.8.1 or later of the Azure SDK for .NET.",
      "pos": [
        4018,
        4090
      ]
    },
    {
      "content": "Overview of the sample application",
      "pos": [
        4095,
        4129
      ]
    },
    {
      "content": "The code that you'll deploy to an API app and a web app for this tutorial is in the <bpt id=\"p1\">[</bpt>Azure-Samples/app-service-api-dotnet-contact-list<ept id=\"p1\">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept> GitHub repository.",
      "pos": [
        4131,
        4355
      ]
    },
    {
      "content": "The ContactsList Visual Studio solution includes the following projects:",
      "pos": [
        4356,
        4428
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ContactsList.API<ept id=\"p1\">**</ept> - An ASP.NET Web API project that returns a list of names and email addresses.",
      "pos": [
        4432,
        4531
      ]
    },
    {
      "content": "The initial call to the Get method returns 3 hard-coded contacts, then subsequent calls to Put, Post, and Delete methods save changes in a local JSON file.",
      "pos": [
        4532,
        4687
      ]
    },
    {
      "pos": [
        4690,
        4760
      ],
      "content": "<bpt id=\"p1\">**</bpt>ContactsList.MVC<ept id=\"p1\">**</ept> - An ASP.NET MVC client for the ContactsList API."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ContactsList.Angular<ept id=\"p1\">**</ept> - A simple AngularJS UI client for the ContactsList API.",
      "pos": [
        4763,
        4844
      ]
    },
    {
      "content": "Demonstrates how to call an unprotected (no authentication) API app.",
      "pos": [
        4845,
        4913
      ]
    },
    {
      "pos": [
        4916,
        5034
      ],
      "content": "<bpt id=\"p1\">**</bpt>ContactsList.Angular.AAD<ept id=\"p1\">**</ept> - An AngularJS client that shows how to use Azure Active Directory to authenticate users."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>CompanyContacts.API<ept id=\"p1\">**</ept> - An ASP.NET Web API project that returns a hardcoded list of contacts in response to a Get request.",
      "pos": [
        5037,
        5161
      ]
    },
    {
      "content": "Called by the <bpt id=\"p1\">**</bpt>ContactsList.API<ept id=\"p1\">**</ept> Get method to demonstrate how to call an API by using service-to-service (service principal) authentication.",
      "pos": [
        5162,
        5305
      ]
    },
    {
      "content": "Download the sample application",
      "pos": [
        5311,
        5342
      ]
    },
    {
      "pos": [
        5348,
        5494
      ],
      "content": "Download the <bpt id=\"p1\">[</bpt>Azure-Samples/app-service-api-dotnet-contact-list<ept id=\"p1\">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept> repository."
    },
    {
      "pos": [
        5500,
        5666
      ],
      "content": "You can <bpt id=\"p1\">[</bpt>Download a .zip file<ept id=\"p1\">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list/archive/master.zip)</ept> or clone the repository on your local machine."
    },
    {
      "content": "Open the ContactsList solution in Visual Studio 2015 or 2013.",
      "pos": [
        5672,
        5733
      ]
    },
    {
      "content": "Build the solution to restore the NuGet packages.",
      "pos": [
        5738,
        5787
      ]
    },
    {
      "content": "Use Swagger metadata and UI",
      "pos": [
        5792,
        5819
      ]
    },
    {
      "content": "Support for <bpt id=\"p1\">[</bpt>Swagger<ept id=\"p1\">](http://swagger.io/)</ept> 2.0 API metadata is built into Azure App Service.",
      "pos": [
        5821,
        5912
      ]
    },
    {
      "content": "Each API app can define a URL endpoint that returns metadata for the API in Swagger JSON format.",
      "pos": [
        5913,
        6009
      ]
    },
    {
      "content": "The metadata returned from that endpoint can be used to generate client code that makes it easier to consume the API.",
      "pos": [
        6010,
        6127
      ]
    },
    {
      "content": "In this section of the tutorial, you'll see how to automatically generate metadata for an ASP.NET Web API project, and you'll run an API test tool.",
      "pos": [
        6130,
        6277
      ]
    },
    {
      "content": "For these tasks you won't use Azure App Service yet; you'll see later how API Apps makes use of the metadata.",
      "pos": [
        6278,
        6387
      ]
    },
    {
      "content": "To provide Swagger 2.0 metadata for an ASP.NET Web API project, you can install the <bpt id=\"p1\">[</bpt>Swashbuckle<ept id=\"p1\">](https://www.nuget.org/packages/Swashbuckle)</ept> NuGet package.",
      "pos": [
        6389,
        6545
      ]
    },
    {
      "content": "Swashbuckle uses Reflection to dynamically generate metadata.",
      "pos": [
        6546,
        6607
      ]
    },
    {
      "content": "The Swashbuckle NuGet package is already installed in the ContactsList.API project that you downloaded, and it is already installed when you create a new project by using the <bpt id=\"p1\">**</bpt>Azure API App<ept id=\"p1\">**</ept> project template.",
      "pos": [
        6608,
        6818
      ]
    },
    {
      "content": "(In Visual Studio: <bpt id=\"p1\">**</bpt>File &gt; New &gt; Project &gt; ASP.NET Web Application &gt; Azure API App<ept id=\"p1\">**</ept>.)",
      "pos": [
        6819,
        6906
      ]
    },
    {
      "content": "In this section of the tutorial you take a look at the generated Swagger 2.0 metadata, and then you try out a test UI that is based on the Swagger metadata.",
      "pos": [
        6908,
        7064
      ]
    },
    {
      "content": "Set the ContactsList.API project as the startup project.",
      "pos": [
        7070,
        7126
      ]
    },
    {
      "content": "(Not the CompanyContacts.API project; that project is used in one of the later tutorials.)",
      "pos": [
        7127,
        7217
      ]
    },
    {
      "content": "Press F5 to run the project in debug mode.",
      "pos": [
        7223,
        7265
      ]
    },
    {
      "content": "The browser opens and shows the 403 Forbidden page.",
      "pos": [
        7271,
        7322
      ]
    },
    {
      "content": "In your browser address bar, add <ph id=\"ph1\">`swagger/docs/v1`</ph> to the end of the line, and then press Return.",
      "pos": [
        7389,
        7486
      ]
    },
    {
      "content": "(The URL will be <ph id=\"ph1\">`http://localhost:51864/swagger/docs/v1`</ph>.)",
      "pos": [
        7487,
        7546
      ]
    },
    {
      "content": "This is the default URL used by Swashbuckle to return Swagger 2.0 JSON metadata for the API.",
      "pos": [
        7552,
        7644
      ]
    },
    {
      "content": "If you're using Internet Explorer, the browser prompts you to download a v1.json file.",
      "pos": [
        7645,
        7731
      ]
    },
    {
      "content": "If you're using Chrome or Edge, the browser displays the JSON in the browser window.",
      "pos": [
        7803,
        7887
      ]
    },
    {
      "content": "The following sample shows the first section of the Swagger metadata for the API, with the definition for the Get method.",
      "pos": [
        7963,
        8084
      ]
    },
    {
      "content": "This metadata is what drives the Swagger UI that you'll use in the following steps, and you'll use it in a later section of the tutorial to automatically generate client code.",
      "pos": [
        8085,
        8260
      ]
    },
    {
      "content": "Close the browser.",
      "pos": [
        9118,
        9136
      ]
    },
    {
      "pos": [
        9141,
        9299
      ],
      "content": "In the ContactsList.API project in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, open the <bpt id=\"p2\">*</bpt>App_Start\\SwaggerConfig.cs<ept id=\"p2\">*</ept> file, then scroll down to the following code and uncomment it."
    },
    {
      "content": "The SwaggerConfig.cs file is created when you install the Swashbuckle package in a project.",
      "pos": [
        9387,
        9478
      ]
    },
    {
      "content": "The file provides a number of ways to configure Swashbuckle.",
      "pos": [
        9479,
        9539
      ]
    },
    {
      "content": "The code you've uncommented enables the Swagger UI that you'll use in the following steps.",
      "pos": [
        9545,
        9635
      ]
    },
    {
      "content": "When you create a Web API project by using the API app project template this code is commented out by default as a security measure.",
      "pos": [
        9636,
        9768
      ]
    },
    {
      "content": "Run the project again.",
      "pos": [
        9773,
        9795
      ]
    },
    {
      "content": "In your browser address bar, add <ph id=\"ph1\">`swagger`</ph> to the end of the line, and then press Return.",
      "pos": [
        9800,
        9889
      ]
    },
    {
      "content": "(The URL will be <ph id=\"ph1\">`http://localhost:51864/swagger`</ph>.)",
      "pos": [
        9890,
        9941
      ]
    },
    {
      "pos": [
        9946,
        10028
      ],
      "content": "When the Swagger UI page appears, click <bpt id=\"p1\">**</bpt>Contacts<ept id=\"p1\">**</ept> to see the methods available."
    },
    {
      "pos": [
        10106,
        10133
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Get &gt; Try it out<ept id=\"p1\">**</ept>."
    },
    {
      "content": "The Swagger UI calls the ContactsList Get method and displays the JSON results.",
      "pos": [
        10139,
        10218
      ]
    },
    {
      "pos": [
        10292,
        10354
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Post<ept id=\"p1\">**</ept>, and then click the box under <bpt id=\"p2\">**</bpt>Model Schema<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Clicking the model schema prefills the input box where you can specify the parameter value for the Post method.",
      "pos": [
        10360,
        10471
      ]
    },
    {
      "pos": [
        10538,
        10682
      ],
      "content": "Change the JSON in the <ph id=\"ph1\">`contact`</ph> parameter input box so that it looks like the following example, or substitute your own name and email address:"
    },
    {
      "pos": [
        10841,
        10862
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Try it out<ept id=\"p1\">**</ept>."
    },
    {
      "content": "The ContactsList API returns an HTTP 200 and a response body that confirms what was added.",
      "pos": [
        10868,
        10958
      ]
    },
    {
      "pos": [
        10964,
        10991
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Get &gt; Try it out<ept id=\"p1\">**</ept>."
    },
    {
      "content": "The Get method response now includes the new contact.",
      "pos": [
        10997,
        11050
      ]
    },
    {
      "content": "Try also the Put, Delete, and Get by ID methods, and then close the browser.",
      "pos": [
        11057,
        11133
      ]
    },
    {
      "content": "Swashbuckle works with any ASP.NET Web API project.",
      "pos": [
        11135,
        11186
      ]
    },
    {
      "content": "If you want to add Swagger metadata generation to an existing project, just install the Swashbuckle package.",
      "pos": [
        11187,
        11295
      ]
    },
    {
      "content": "If you want to create a new project to be deployed as an App Service API app, use the ASP.NET <bpt id=\"p1\">**</bpt>Azure API App<ept id=\"p1\">**</ept> project template, shown in the following illustration.",
      "pos": [
        11296,
        11462
      ]
    },
    {
      "content": "This template creates a Web API project with Swashbuckle installed.",
      "pos": [
        11532,
        11599
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> By default, Swashbuckle may generate duplicate Swagger operation IDs for your controller methods.",
      "pos": [
        11601,
        11708
      ]
    },
    {
      "content": "This happens if your controller has overloaded HTTP methods, for example: <ph id=\"ph1\">`Get()`</ph> and <ph id=\"ph2\">`Get(id)`</ph>.",
      "pos": [
        11709,
        11805
      ]
    },
    {
      "content": "For information about how to handle overloads, see <bpt id=\"p1\">[</bpt>Customize Swashbuckle-generated API definitions<ept id=\"p1\">](app-service-api-dotnet-swashbuckle-customize.md)</ept>.",
      "pos": [
        11806,
        11956
      ]
    },
    {
      "content": "If you create a Web API project in Visual Studio by using the Azure API App template, code that generates unique operation IDs is automatically added to the <bpt id=\"p1\">*</bpt>SwaggerConfig.cs<ept id=\"p1\">*</ept> file.",
      "pos": [
        11957,
        12138
      ]
    },
    {
      "content": "Create an API app in Azure and deploy the ContactsList.API project to it",
      "pos": [
        12145,
        12217
      ]
    },
    {
      "content": "In this section you use Azure tools that are integrated into the Visual Studio <bpt id=\"p1\">**</bpt>Publish Web<ept id=\"p1\">**</ept> wizard to create a new API app in Azure.",
      "pos": [
        12219,
        12354
      ]
    },
    {
      "content": "Then you deploy the ContactsList.API project to the new API app and call the API by running the Swagger UI again, this time while it runs in the cloud.",
      "pos": [
        12355,
        12506
      ]
    },
    {
      "pos": [
        12511,
        12606
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the ContactsList.API project, and then click <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        12612,
        12705
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Profile<ept id=\"p1\">**</ept> step of the <bpt id=\"p2\">**</bpt>Publish Web<ept id=\"p2\">**</ept> wizard, click <bpt id=\"p3\">**</bpt>Microsoft Azure App Service<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Sign in to your Azure account if you have not already done so, or refresh your credentials if they're expired.",
      "pos": [
        12784,
        12894
      ]
    },
    {
      "pos": [
        12899,
        13004
      ],
      "content": "In the App Service dialog box, choose the Azure <bpt id=\"p1\">**</bpt>Subscription<ept id=\"p1\">**</ept> you want to use, and then click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        13075,
        13190
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Hosting<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Create App Service<ept id=\"p2\">**</ept> dialog box, click <bpt id=\"p3\">**</bpt>Change Type<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>API App<ept id=\"p4\">**</ept>."
    },
    {
      "pos": [
        13260,
        13335
      ],
      "content": "Enter an <bpt id=\"p1\">**</bpt>API App Name<ept id=\"p1\">**</ept> that is unique in the <bpt id=\"p2\">*</bpt>azurewebsites.net<ept id=\"p2\">*</ept> domain."
    },
    {
      "content": "Visual Studio proposes a unique name by appending a date-time string to the project name.",
      "pos": [
        13342,
        13431
      ]
    },
    {
      "content": "You can accept that name if you prefer.",
      "pos": [
        13433,
        13472
      ]
    },
    {
      "content": "If you enter a name that someone else has already used, you'll see a red exclamation mark to the right instead of a green check mark, and you'll need to enter a different name.",
      "pos": [
        13479,
        13655
      ]
    },
    {
      "content": "Azure will use this name as the prefix for your application's URL.",
      "pos": [
        13661,
        13727
      ]
    },
    {
      "content": "The complete URL will consist of this name plus <bpt id=\"p1\">*</bpt>.azurewebsites.net<ept id=\"p1\">*</ept>.",
      "pos": [
        13728,
        13797
      ]
    },
    {
      "content": "For example, if the name is <ph id=\"ph1\">`ContactsListAPI`</ph>, the URL will be <ph id=\"ph2\">`contactslistapi.azurewebsites.net`</ph>.",
      "pos": [
        13798,
        13897
      ]
    },
    {
      "pos": [
        13902,
        13995
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Resource Group<ept id=\"p1\">**</ept> drop-down, Enter \"ContactsListGroup\" or another name if you prefer."
    },
    {
      "pos": [
        14001,
        14217
      ],
      "content": "This box lets you select an existing <bpt id=\"p1\">[</bpt>resource group<ept id=\"p1\">](../azure-preview-portal-using-resource-groups.md)</ept> or create a new one by typing in a name that is different from any existing resource group in your subscription."
    },
    {
      "content": "For this tutorial it's best to create a new one because that will make it easy to delete in one step all the Azure resources that you create for the tutorial.",
      "pos": [
        14223,
        14381
      ]
    },
    {
      "pos": [
        14386,
        14454
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> button next to the <bpt id=\"p2\">**</bpt>App Service Plan<ept id=\"p2\">**</ept> drop-down."
    },
    {
      "pos": [
        14527,
        14672
      ],
      "content": "For information about App Service plans, see <bpt id=\"p1\">[</bpt>App Service plans overview<ept id=\"p1\">](../app-service/azure-web-sites-web-hosting-plans-in-depth-overview.md)</ept>."
    },
    {
      "pos": [
        14677,
        14778
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Configure App Service Plan<ept id=\"p1\">**</ept> dialog, enter \"ContactsListPlan\" or another name if you prefer."
    },
    {
      "pos": [
        14783,
        14862
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> drop-down list, choose the location that is closest to you."
    },
    {
      "content": "This setting specifies which Azure datacenter your app will run in.",
      "pos": [
        14868,
        14935
      ]
    },
    {
      "content": "For this tutorial, you can select any region and it won't make a noticeable difference.",
      "pos": [
        14936,
        15023
      ]
    },
    {
      "content": "But for a production app, you want your server to be as close as possible to the clients that are accessing it in order to minimize <bpt id=\"p1\">[</bpt>latency<ept id=\"p1\">](http://www.bing.com/search?q=web%20latency%20introduction&amp;qs=n&amp;form=QBRE&amp;pq=web%20latency%20introduction&amp;sc=1-24&amp;sp=-1&amp;sk=&amp;cvid=eefff99dfc864d25a75a83740f1e0090)</ept>.",
      "pos": [
        15024,
        15328
      ]
    },
    {
      "pos": [
        15333,
        15375
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Size<ept id=\"p1\">**</ept> drop-down, click <bpt id=\"p2\">**</bpt>Free<ept id=\"p2\">**</ept>."
    },
    {
      "content": "For this tutorial, The free pricing tier will provide sufficient performance.",
      "pos": [
        15381,
        15458
      ]
    },
    {
      "pos": [
        15463,
        15522
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Configure App Service Plan<ept id=\"p1\">**</ept> dialog, click <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        15594,
        15653
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Create App Service<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Visual Studio creates the API app and creates a publish profile that has all of the required settings for the new API app.",
      "pos": [
        15659,
        15781
      ]
    },
    {
      "content": "In the following steps you use the new publish profile to deploy the project.",
      "pos": [
        15782,
        15859
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> There are other ways to create API apps in Azure App Service.",
      "pos": [
        15867,
        15938
      ]
    },
    {
      "content": "In Visual Studio the same dialogs are available while you're creating a new project.",
      "pos": [
        15939,
        16023
      ]
    },
    {
      "content": "You can also create API apps by using the Azure portal, <bpt id=\"p1\">[</bpt>Azure cmdlets for Windows PowerShell<ept id=\"p1\">](../powershell-install-configure.md)</ept>, or the <bpt id=\"p2\">[</bpt>cross-platform command-line interface<ept id=\"p2\">](../xplat-cli.md)</ept>.",
      "pos": [
        16024,
        16220
      ]
    },
    {
      "pos": [
        16225,
        16300
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Publish Web<ept id=\"p2\">**</ept> wizard, click <bpt id=\"p3\">**</bpt>Publish<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Visual Studio deploys the ContactsList.API project to the new API app and opens a browser to the URL of the API app.",
      "pos": [
        16376,
        16492
      ]
    },
    {
      "content": "A \"successfully created\" page appears in the browser.",
      "pos": [
        16493,
        16546
      ]
    },
    {
      "content": "Add \"swagger\" to the URL in the browser's address bar, and then press Enter.",
      "pos": [
        16620,
        16696
      ]
    },
    {
      "content": "(The URL will be <ph id=\"ph1\">`http://{apiappname}.azurewebsites.net/swagger`</ph>.)",
      "pos": [
        16697,
        16763
      ]
    },
    {
      "content": "The browser displays the same Swagger UI that you saw earlier, but it is now running in the cloud.",
      "pos": [
        16769,
        16867
      ]
    },
    {
      "content": "Try out the Get method, and you see that you're back to the default 3 contacts, because the changes you made earlier were saved in a local file; any changes you make now will be saved in the file system of the Azure API app.",
      "pos": [
        16868,
        17092
      ]
    },
    {
      "pos": [
        17098,
        17149
      ],
      "content": "Open the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://portal.azure.com/)</ept>."
    },
    {
      "pos": [
        17156,
        17205
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Browse &gt; API Apps &gt; {your new API app}<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        17292,
        17397
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept>, and then in the <bpt id=\"p2\">**</bpt>Settings<ept id=\"p2\">**</ept> blade find the API section and click <bpt id=\"p3\">**</bpt>API Definition<ept id=\"p3\">**</ept>."
    },
    {
      "content": "The API Definition blade lets you specify the URL that returns Swagger 2.0 metadata in JSON format.",
      "pos": [
        17478,
        17577
      ]
    },
    {
      "content": "When Visual Studio creates the API app, it sets the API definition URL to the default value that you saw earlier, which is the API app's base URL plus <ph id=\"ph1\">`/swagger/docs/v1`</ph>.",
      "pos": [
        17578,
        17748
      ]
    },
    {
      "content": "When you select an API app to generate client code for it, Visual Studio retrieves the metadata from this URL.",
      "pos": [
        17822,
        17932
      ]
    },
    {
      "content": "API definition URL in Azure Resource Manager tooling",
      "pos": [
        17939,
        17991
      ]
    },
    {
      "pos": [
        17993,
        18177
      ],
      "content": "You can also configure the API definition URL for an API app by using Azure Resource Manager tooling such as Azure PowerShell, CLI or <bpt id=\"p1\">[</bpt>Resource Explorer<ept id=\"p1\">](https://resources.azure.com/)</ept>."
    },
    {
      "content": "Set the <ph id=\"ph1\">`apiDefinition`</ph> property on the Microsoft.Web/sites/config resource type for your",
      "pos": [
        18180,
        18269
      ]
    },
    {
      "content": "/web resource.",
      "pos": [
        18281,
        18295
      ]
    },
    {
      "content": "For example, in <bpt id=\"p1\">**</bpt>Resource Explorer<ept id=\"p1\">**</ept>, go to <bpt id=\"p2\">**</bpt>subscriptions &gt; {your subscription} &gt; resourceGroups &gt; {your resource group} &gt; providers &gt; Microsoft.Web &gt; sites &gt; {your site} &gt; config &gt; web<ept id=\"p2\">**</ept>, and you'll see the cors property:",
      "pos": [
        18296,
        18521
      ]
    },
    {
      "pos": [
        18641,
        18719
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"codegen\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Consume from a .NET client by using generated client code"
    },
    {
      "content": "One of the advantages of integrating Swagger into Azure API apps is automatic code generation.",
      "pos": [
        18722,
        18816
      ]
    },
    {
      "content": "Generated client classes make it easier to write code that calls an API app.",
      "pos": [
        18817,
        18893
      ]
    },
    {
      "content": "In this section you see how to consume an API app from an ASP.NET MVC web app.",
      "pos": [
        18895,
        18973
      ]
    },
    {
      "content": "You'll run the MVC client and Web API locally first, then deploy the client to a new web app in Azure App Service and run it in the cloud.",
      "pos": [
        18974,
        19112
      ]
    },
    {
      "content": "Generate client code",
      "pos": [
        19118,
        19138
      ]
    },
    {
      "content": "You can generate client code for an API app by using Visual Studio or from the command line.",
      "pos": [
        19140,
        19232
      ]
    },
    {
      "content": "For this tutorial you'll use Visual Studio.",
      "pos": [
        19233,
        19276
      ]
    },
    {
      "content": "For information about how to do it from the command line, see the readme file of the <bpt id=\"p1\">[</bpt>Azure/autorest<ept id=\"p1\">](https://github.com/azure/autorest)</ept> repository on GitHub.com.",
      "pos": [
        19277,
        19439
      ]
    },
    {
      "content": "The ContactsList.MVC project already has the generated client code, but you'll delete it and regenerate it to make your own API app's URL be the default target URL.",
      "pos": [
        19441,
        19605
      ]
    },
    {
      "pos": [
        19610,
        19720
      ],
      "content": "In Visual Studio <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, in the ContactsList.MVC project, delete the <bpt id=\"p2\">*</bpt>ContactsList.API<ept id=\"p2\">*</ept> folder."
    },
    {
      "content": "This folder was created by using the code generation process that you're about to go through.",
      "pos": [
        19726,
        19819
      ]
    },
    {
      "pos": [
        19895,
        19978
      ],
      "content": "Right-click the ContactsList.MVC project, and then click <bpt id=\"p1\">**</bpt>Add &gt; REST API Client<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        20052,
        20170
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Add REST APi Client<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>Download from Microsoft Azure API App<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Browse<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        20246,
        20376
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>App Service<ept id=\"p1\">**</ept> dialog box, expand the <bpt id=\"p2\">**</bpt>ContactsListGroup<ept id=\"p2\">**</ept> resource group and select your API app, and then click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>."
    },
    {
      "content": "This dialog box gives more than one way to organize API apps in the list, in case you have too many to scroll through.",
      "pos": [
        20382,
        20500
      ]
    },
    {
      "content": "It also lets you enter a search string to filter API apps by name.",
      "pos": [
        20501,
        20567
      ]
    },
    {
      "content": "If you don't see the API app in the list, chances are that when you were creating the API app you accidentally omitted the step that changed the type from web app to API app.",
      "pos": [
        20644,
        20818
      ]
    },
    {
      "content": "In that case, you can create a new API app by repeating the steps you did earlier.",
      "pos": [
        20819,
        20901
      ]
    },
    {
      "content": "You'll need to choose a different name for the API app, unless you go to the portal and delete the web app first.",
      "pos": [
        20902,
        21015
      ]
    },
    {
      "pos": [
        21022,
        21190
      ],
      "content": "Notice that when you return to the <bpt id=\"p1\">**</bpt>Add REST API Client<ept id=\"p1\">**</ept> dialog, the text box has been filled in with the API definition URL value that you saw earlier in the portal."
    },
    {
      "content": "As an alternative, you could enter the URL directly instead of going through the browse dialog.",
      "pos": [
        21272,
        21367
      ]
    },
    {
      "content": "For example, if you deployed your API to a web app and it doesn't show up in the browse dialog, you can manually enter the URL that returns Swagger metadata here.",
      "pos": [
        21368,
        21530
      ]
    },
    {
      "content": "Notice also the <bpt id=\"p1\">**</bpt>Select an existing Swagger metadata file<ept id=\"p1\">**</ept> option.",
      "pos": [
        21536,
        21604
      ]
    },
    {
      "content": "If you want to generate code before deploying to Azure, you could run locally, download the Swagger JSON file, and select it here.",
      "pos": [
        21605,
        21735
      ]
    },
    {
      "pos": [
        21741,
        21797
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Add REST API Client<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Visual Studio creates a folder named after the API app and generates client classes.",
      "pos": [
        21803,
        21887
      ]
    },
    {
      "pos": [
        21962,
        22068
      ],
      "content": "Open <bpt id=\"p1\">*</bpt>Controllers\\ContactsController.cs<ept id=\"p1\">*</ept> to see the code that calls the API by using the generated client."
    },
    {
      "content": "The following snippet shows how to instantiate the client object and call the Get method.",
      "pos": [
        22075,
        22164
      ]
    },
    {
      "content": "This code passes in to the local IIS Express URL of thet API project to the client class constructor so that you can run the MVC web project and the API project locally.",
      "pos": [
        22373,
        22542
      ]
    },
    {
      "content": "If you omit the constructor parameter, the default endpoint is the URL that you generated the code from.",
      "pos": [
        22543,
        22647
      ]
    },
    {
      "content": "Your client class will be generated with a different name based on your API app name; change this code so that the type name matches what was generated in your project.",
      "pos": [
        22653,
        22821
      ]
    },
    {
      "content": "For example, if you named your API App ContactsListAPIContoso, the code would look like the following example:",
      "pos": [
        22822,
        22932
      ]
    },
    {
      "content": "Build the solution.",
      "pos": [
        23154,
        23173
      ]
    },
    {
      "content": "The controller and views of the MVC project look similar to controller and views that have been scaffolded for Entity Framework because that's how they were created -- by scaffolding an Entity Framework data model and then making minor changes to use the REST API client instead of an Entity Framework database context.",
      "pos": [
        23175,
        23494
      ]
    },
    {
      "content": "Run locally",
      "pos": [
        23500,
        23511
      ]
    },
    {
      "content": "Set the ContactsList.API and ContactsList.MVC projects as startup projects, with ContactsList.API starting before ContactsList.MVC.",
      "pos": [
        23516,
        23647
      ]
    },
    {
      "content": "(Right-click the solution, click <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Multiple startup projects<ept id=\"p2\">**</ept>, and set each project to <bpt id=\"p3\">**</bpt>Start<ept id=\"p3\">**</ept>.",
      "pos": [
        23648,
        23768
      ]
    },
    {
      "content": "Use the up/down arrow icons to ensure that ContactsList.API is first in the list.)",
      "pos": [
        23769,
        23851
      ]
    },
    {
      "content": "Press F5 to start the projects.",
      "pos": [
        23857,
        23888
      ]
    },
    {
      "content": "One browser displays the 403 page for the API and one displays the home page of the MVC app.",
      "pos": [
        23894,
        23986
      ]
    },
    {
      "pos": [
        23991,
        24079
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Contacts<ept id=\"p1\">**</ept> in the menu bar of the browser that displays the MVC app's home page."
    },
    {
      "content": "The MVC UI displays the contacts that are stored locally, and you can use the UI to add and delete contacts.",
      "pos": [
        24085,
        24193
      ]
    },
    {
      "content": "Create a web app in Azure and deploy the ContactsList.MVC project to it",
      "pos": [
        24268,
        24339
      ]
    },
    {
      "content": "In this section you use the same method to create a web app that you did earlier to create an API app, and the same method to deploy a web project to the Azure web app.",
      "pos": [
        24341,
        24509
      ]
    },
    {
      "content": "Change the MVC project to point to the Azure API app",
      "pos": [
        24516,
        24568
      ]
    },
    {
      "content": "Before deploying to Azure, change the API endpoint in the MVC project so that when the code is deployed it will call the Azure API app that you created earlier instead of localhost.",
      "pos": [
        24571,
        24752
      ]
    },
    {
      "pos": [
        24757,
        24831
      ],
      "content": "In the ContactsList.MVC project, open <bpt id=\"p1\">*</bpt>Controllers\\ContactsController.cs<ept id=\"p1\">*</ept>."
    },
    {
      "content": "Comment out the line that sets the API base URL to the localhost URL, uncomment the line that has no constructor parrameter.",
      "pos": [
        24836,
        24960
      ]
    },
    {
      "content": "The code now looks like the following example, except that in both lines the class name reflects the name of your API app that you generated the code from.",
      "pos": [
        24961,
        25116
      ]
    },
    {
      "content": "The default target URL is your Azure API app because you generated the code from there; if you used a different method to generate the code you might have to specify the Azure API app URL the same way you specified the local URL.",
      "pos": [
        25278,
        25507
      ]
    },
    {
      "content": "Create a web app to host the MVC site",
      "pos": [
        25515,
        25552
      ]
    },
    {
      "pos": [
        25557,
        25652
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the ContactsList.MVC project, and then click <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        25657,
        25714
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Publish Web<ept id=\"p1\">**</ept> wizard, click the <bpt id=\"p2\">**</bpt>Profile<ept id=\"p2\">**</ept> tab."
    },
    {
      "pos": [
        25720,
        25812
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Profile<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Publish Web<ept id=\"p2\">**</ept> wizard, click <bpt id=\"p3\">**</bpt>Microsoft Azure App Service<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        25817,
        25866
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>App Service<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        25871,
        25997
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Hosting<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Create App Service<ept id=\"p2\">**</ept> dialog box, click <bpt id=\"p3\">**</bpt>Change Type<ept id=\"p3\">**</ept>, and make sure the type is <bpt id=\"p4\">**</bpt>Web App<ept id=\"p4\">**</ept>."
    },
    {
      "pos": [
        26002,
        26076
      ],
      "content": "Enter a <bpt id=\"p1\">**</bpt>Web App Name<ept id=\"p1\">**</ept> that is unique in the <bpt id=\"p2\">*</bpt>azurewebsites.net<ept id=\"p2\">*</ept> domain."
    },
    {
      "pos": [
        26082,
        26138
      ],
      "content": "Choose the Azure <bpt id=\"p1\">**</bpt>Subscription<ept id=\"p1\">**</ept> you want to work with."
    },
    {
      "pos": [
        26143,
        26231
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Resource Group<ept id=\"p1\">**</ept> drop-down, choose the same resource group you created earlier."
    },
    {
      "pos": [
        26236,
        26316
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>App Service Plan<ept id=\"p1\">**</ept> drop-down, choose the same plan you created earlier."
    },
    {
      "pos": [
        26322,
        26339
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        26345,
        26481
      ],
      "content": "Visual Studio creates the web app, creates a publish profile for it, and displays the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> step of the <bpt id=\"p2\">**</bpt>Publish Web<ept id=\"p2\">**</ept> wizard."
    },
    {
      "content": "Deploy the ContactsList.Web project to the new web app",
      "pos": [
        26487,
        26541
      ]
    },
    {
      "pos": [
        26547,
        26623
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> step of the <bpt id=\"p2\">**</bpt>Publish Web<ept id=\"p2\">**</ept> wizard, click <bpt id=\"p3\">**</bpt>Publish<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Visual Studio deploys the ContactsList.MVC project to the new web app and opens a browser to the URL of the web app.",
      "pos": [
        26629,
        26745
      ]
    },
    {
      "content": "The same MVC UI appears that you saw running locally, except now it is showing the contacts that are stored in the Azure API app's file system.",
      "pos": [
        26746,
        26889
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        26967,
        26977
      ]
    },
    {
      "content": "In this tutorial, you've seen how to create API apps, deploy code to them, and consume them from .NET clients.",
      "pos": [
        26979,
        27089
      ]
    },
    {
      "content": "The next tutorial in the API Apps getting started series shows how to <bpt id=\"p1\">[</bpt>consume API apps from JavaScript clients, using CORS<ept id=\"p1\">](app-service-api-cors-consume-javascript.md)</ept>.",
      "pos": [
        27090,
        27259
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get started with API Apps and ASP.NET in Azure App Service | Microsoft Azure\"\n    description=\"Learn how to create, deploy, and consume an ASP.NET API app in Azure App Service, by using Visual Studio 2015.\"\n    services=\"app-service\\api\"\n    documentationCenter=\".net\"\n    authors=\"tdykstra\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-api\"\n    ms.workload=\"na\"\n    ms.tgt_pltfrm=\"dotnet\"\n    ms.devlang=\"na\"\n    ms.topic=\"hero-article\"\n    ms.date=\"11/25/2015\"\n    ms.author=\"tdykstra\"/>\n\n# Get started with API Apps and ASP.NET in Azure App Service\n\n[AZURE.INCLUDE [app-service-api-get-started-selector](../../includes/app-service-api-get-started-selector.md)]\n\n## Overview\n\nIn this tutorial, you create an [App Service API app](app-service-api-apps-why-best-platform.md), deploy an ASP.NET Web API to the API app, and consume the API app from an ASP.NET MVC client. The tutorial assumes that you are familiar with ASP.NET but have no prior experience with Microsoft Azure. On completing the tutorial, you'll have a Web API and client application up and running in the cloud.\n\nThe sample application is a simple contacts list. The following illustration shows how the MVC app displays data received from the API.\n\n![](./media/app-service-api-dotnet-get-started/mvccontacts.png)\n\n## What you'll learn\n\nThree features of Azure App service are particularly helpful for developing and hosting APIs:\n\n* Integrated support for API metadata\n* CORS support\n* Authentication and authorization support\n \nThis is the first tutorial in a series that introduces these features. This tutorial focuses on API metadata, the second focuses on CORS, and the third and fourth focus on authentication and authorization.\n\nIn these tutorials, you'll learn:\n\n* How to prepare your machine for Azure development by installing the Azure SDK for .NET.\n* How to work with API apps and web apps in Azure App Service by using tools built into Visual Studio 2015.\n* How to automate API discovery by using the Swashbuckle NuGet package to dynamically generate Swagger API definition JSON.\n* How to use automatically generated client code to consume an API app from a .NET client.\n* How to use the Azure portal to configure the endpoint for API app metadata.\n* How to use CORS to call an API app from a JavaScript client when the client is from a different domain than the API.\n* How to use Azure Active Directory to protect an API from unauthenticated access.\n* How to consume a protected API for users logged in to Azure Active Directory.\n* How to consume a protected API by using a service principal.\n\n## Prerequisites\n\n### ASP.NET Web API\n\nThe tutorial assumes that you are familiar with ASP.NET Web API; if you need an introduction, see [Getting Started with ASP.NET Web API 2](http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api).\n\n## Visual Studio 2015\n\nThe instructions and screen shots assume you're using Visual Studio 2015, but the same guidance works for Visual Studio 2013.\n\n## Azure account\n\nYou need an Azure account to complete the tutorial. You can:\n\n* [Open an Azure account for free](/pricing/free-trial/?WT.mc_id=A261C142F). You get credits that can be used to try out paid Azure services. Even after the credits are used up, you can keep the account and use free Azure services and features, such as the Web Apps feature in Azure App Service.\n* [Activate Visual Studio subscriber benefits](/pricing/member-offers/msdn-benefits-details/?WT.mc_id=A261C142F). Your MSDN subscription gives you credits every month that you can use for paid Azure services.\n\nIf you want to get started with Azure App Service before you sign up for an Azure account, go to [Try App Service](http://go.microsoft.com/fwlink/?LinkId=523751). There, you can immediately create a short-lived starter  app in App Service â€” no credit card required, and no commitments.\n\n[AZURE.INCLUDE [install-sdk-2015-2013](../../includes/install-sdk-2015-2013.md)]\n\nThis tutorial requires version 2.8.1 or later of the Azure SDK for .NET.\n\n## Overview of the sample application\n\nThe code that you'll deploy to an API app and a web app for this tutorial is in the [Azure-Samples/app-service-api-dotnet-contact-list](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list) GitHub repository. The ContactsList Visual Studio solution includes the following projects:\n\n* **ContactsList.API** - An ASP.NET Web API project that returns a list of names and email addresses. The initial call to the Get method returns 3 hard-coded contacts, then subsequent calls to Put, Post, and Delete methods save changes in a local JSON file.\n* **ContactsList.MVC** - An ASP.NET MVC client for the ContactsList API.\n* **ContactsList.Angular** - A simple AngularJS UI client for the ContactsList API. Demonstrates how to call an unprotected (no authentication) API app.\n* **ContactsList.Angular.AAD** - An AngularJS client that shows how to use Azure Active Directory to authenticate users.\n* **CompanyContacts.API** - An ASP.NET Web API project that returns a hardcoded list of contacts in response to a Get request. Called by the **ContactsList.API** Get method to demonstrate how to call an API by using service-to-service (service principal) authentication.\n \n## Download the sample application \n\n1. Download the [Azure-Samples/app-service-api-dotnet-contact-list](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list) repository.\n\n    You can [Download a .zip file](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list/archive/master.zip) or clone the repository on your local machine. \n\n2. Open the ContactsList solution in Visual Studio 2015 or 2013.\n\n2. Build the solution to restore the NuGet packages.\n\n## Use Swagger metadata and UI\n\nSupport for [Swagger](http://swagger.io/) 2.0 API metadata is built into Azure App Service. Each API app can define a URL endpoint that returns metadata for the API in Swagger JSON format. The metadata returned from that endpoint can be used to generate client code that makes it easier to consume the API. \n\nIn this section of the tutorial, you'll see how to automatically generate metadata for an ASP.NET Web API project, and you'll run an API test tool. For these tasks you won't use Azure App Service yet; you'll see later how API Apps makes use of the metadata.\n\nTo provide Swagger 2.0 metadata for an ASP.NET Web API project, you can install the [Swashbuckle](https://www.nuget.org/packages/Swashbuckle) NuGet package. Swashbuckle uses Reflection to dynamically generate metadata. The Swashbuckle NuGet package is already installed in the ContactsList.API project that you downloaded, and it is already installed when you create a new project by using the **Azure API App** project template. (In Visual Studio: **File > New > Project > ASP.NET Web Application > Azure API App**.)\n\nIn this section of the tutorial you take a look at the generated Swagger 2.0 metadata, and then you try out a test UI that is based on the Swagger metadata. \n\n2. Set the ContactsList.API project as the startup project. (Not the CompanyContacts.API project; that project is used in one of the later tutorials.)\n \n4. Press F5 to run the project in debug mode.\n\n    The browser opens and shows the 403 Forbidden page.\n\n    ![](./media/app-service-api-dotnet-get-started/403.png)\n\n12. In your browser address bar, add `swagger/docs/v1` to the end of the line, and then press Return. (The URL will be `http://localhost:51864/swagger/docs/v1`.)\n\n    This is the default URL used by Swashbuckle to return Swagger 2.0 JSON metadata for the API. If you're using Internet Explorer, the browser prompts you to download a v1.json file.\n\n    ![](./media/app-service-api-dotnet-get-started/iev1json.png)\n\n    If you're using Chrome or Edge, the browser displays the JSON in the browser window.\n\n    ![](./media/app-service-api-dotnet-get-started/chromev1json.png)\n\n    The following sample shows the first section of the Swagger metadata for the API, with the definition for the Get method. This metadata is what drives the Swagger UI that you'll use in the following steps, and you'll use it in a later section of the tutorial to automatically generate client code.\n\n        {\n          \"swagger\": \"2.0\",\n          \"info\": {\n            \"version\": \"v1\",\n            \"title\": \"ContactsList.API\"\n          },\n          \"host\": \"localhost:51864\",\n          \"schemes\": [ \"http\" ],\n          \"paths\": {\n            \"/api/Contacts\": {\n              \"get\": {\n                \"tags\": [ \"Contacts\" ],\n                \"operationId\": \"Contacts_Get\",\n                \"consumes\": [ ],\n                \"produces\": [ \"application/json\", \"text/json\", \"application/xml\", \"text/xml\" ],\n                \"responses\": {\n                  \"200\": {\n                    \"description\": \"OK\",\n                    \"schema\": {\n                      \"type\": \"array\",\n                      \"items\": { \"$ref\": \"#/definitions/Contact\" }\n                    }\n                  }\n                },\n                \"deprecated\": false\n              },\n\n1. Close the browser.\n\n3. In the ContactsList.API project in **Solution Explorer**, open the *App_Start\\SwaggerConfig.cs* file, then scroll down to the following code and uncomment it.\n\n        /*\n            })\n        .EnableSwaggerUi(c =>\n            {\n        */\n\n    The SwaggerConfig.cs file is created when you install the Swashbuckle package in a project. The file provides a number of ways to configure Swashbuckle.\n\n    The code you've uncommented enables the Swagger UI that you'll use in the following steps. When you create a Web API project by using the API app project template this code is commented out by default as a security measure.\n\n5. Run the project again.\n\n3. In your browser address bar, add `swagger` to the end of the line, and then press Return. (The URL will be `http://localhost:51864/swagger`.)\n\n4. When the Swagger UI page appears, click **Contacts** to see the methods available.\n\n    ![](./media/app-service-api-dotnet-get-started/contactsmethods.png)\n\n5. Click **Get > Try it out**.\n\n    The Swagger UI calls the ContactsList Get method and displays the JSON results.\n\n    ![](./media/app-service-api-dotnet-get-started/gettryitout.png)\n\n6. Click **Post**, and then click the box under **Model Schema**.\n\n    Clicking the model schema prefills the input box where you can specify the parameter value for the Post method.\n\n    ![](./media/app-service-api-dotnet-get-started/post.png)\n\n7. Change the JSON in the `contact` parameter input box so that it looks like the following example, or substitute your own name and email address:\n\n        {\n          \"CreatedBy\": \"\",\n          \"EmailAddress\": \"carson@contoso.com\",\n          \"Id\": 4,\n          \"Name\": \"Alexander Carson\"\n        } \n\n10. Click **Try it out**.\n\n    The ContactsList API returns an HTTP 200 and a response body that confirms what was added.\n\n11. Click **Get > Try it out**.\n\n    The Get method response now includes the new contact. \n\n12. Try also the Put, Delete, and Get by ID methods, and then close the browser.\n\nSwashbuckle works with any ASP.NET Web API project. If you want to add Swagger metadata generation to an existing project, just install the Swashbuckle package. If you want to create a new project to be deployed as an App Service API app, use the ASP.NET **Azure API App** project template, shown in the following illustration.\n\n![](./media/app-service-api-dotnet-get-started/apiapptemplate.png)\n\nThis template creates a Web API project with Swashbuckle installed.\n\n**Note:** By default, Swashbuckle may generate duplicate Swagger operation IDs for your controller methods. This happens if your controller has overloaded HTTP methods, for example: `Get()` and `Get(id)`. For information about how to handle overloads, see [Customize Swashbuckle-generated API definitions](app-service-api-dotnet-swashbuckle-customize.md). If you create a Web API project in Visual Studio by using the Azure API App template, code that generates unique operation IDs is automatically added to the *SwaggerConfig.cs* file.  \n\n## Create an API app in Azure and deploy the ContactsList.API project to it\n\nIn this section you use Azure tools that are integrated into the Visual Studio **Publish Web** wizard to create a new API app in Azure. Then you deploy the ContactsList.API project to the new API app and call the API by running the Swagger UI again, this time while it runs in the cloud.\n\n1. In **Solution Explorer**, right-click the ContactsList.API project, and then click **Publish**.\n\n3.  In the **Profile** step of the **Publish Web** wizard, click **Microsoft Azure App Service**.\n\n    ![](./media/app-service-api-dotnet-get-started/selectappservice.png)\n\n4. Sign in to your Azure account if you have not already done so, or refresh your credentials if they're expired.\n\n4. In the App Service dialog box, choose the Azure **Subscription** you want to use, and then click **New**.\n\n    ![](./media/app-service-api-dotnet-get-started/clicknew.png)\n\n3. In the **Hosting** tab of the **Create App Service** dialog box, click **Change Type**, and then click **API App**.\n\n    ![](./media/app-service-api-dotnet-get-started/apptype.png)\n\n4. Enter an **API App Name** that is unique in the *azurewebsites.net* domain. \n\n    Visual Studio proposes a unique name by appending a date-time string to the project name.  You can accept that name if you prefer. \n\n    If you enter a name that someone else has already used, you'll see a red exclamation mark to the right instead of a green check mark, and you'll need to enter a different name.\n\n    Azure will use this name as the prefix for your application's URL. The complete URL will consist of this name plus *.azurewebsites.net*. For example, if the name is `ContactsListAPI`, the URL will be `contactslistapi.azurewebsites.net`.\n\n6. In the **Resource Group** drop-down, Enter \"ContactsListGroup\" or another name if you prefer.\n\n    This box lets you select an existing [resource group](../azure-preview-portal-using-resource-groups.md) or create a new one by typing in a name that is different from any existing resource group in your subscription.\n\n    For this tutorial it's best to create a new one because that will make it easy to delete in one step all the Azure resources that you create for the tutorial.\n\n4. Click the **New** button next to the **App Service Plan** drop-down. \n\n    ![](./media/app-service-api-dotnet-get-started/createas.png)\n\n    For information about App Service plans, see [App Service plans overview](../app-service/azure-web-sites-web-hosting-plans-in-depth-overview.md).\n\n5. In the **Configure App Service Plan** dialog, enter \"ContactsListPlan\" or another name if you prefer.\n\n5. In the **Location** drop-down list, choose the location that is closest to you.\n\n    This setting specifies which Azure datacenter your app will run in. For this tutorial, you can select any region and it won't make a noticeable difference. But for a production app, you want your server to be as close as possible to the clients that are accessing it in order to minimize [latency](http://www.bing.com/search?q=web%20latency%20introduction&qs=n&form=QBRE&pq=web%20latency%20introduction&sc=1-24&sp=-1&sk=&cvid=eefff99dfc864d25a75a83740f1e0090).\n\n5. In the **Size** drop-down, click **Free**.\n\n    For this tutorial, The free pricing tier will provide sufficient performance.\n\n6. In the **Configure App Service Plan** dialog, click **OK**.\n\n    ![](./media/app-service-api-dotnet-get-started/configasp.png)\n\n7. In the **Create App Service** dialog box, click **Create**.\n\n    Visual Studio creates the API app and creates a publish profile that has all of the required settings for the new API app. In the following steps you use the new publish profile to deploy the project. \n \n    **Note:** There are other ways to create API apps in Azure App Service. In Visual Studio the same dialogs are available while you're creating a new project. You can also create API apps by using the Azure portal, [Azure cmdlets for Windows PowerShell](../powershell-install-configure.md), or the [cross-platform command-line interface](../xplat-cli.md).\n\n8. In the **Connection** tab of the **Publish Web** wizard, click **Publish**.\n\n    ![](./media/app-service-api-dotnet-get-started/clickpublish.png)\n\n    Visual Studio deploys the ContactsList.API project to the new API app and opens a browser to the URL of the API app. A \"successfully created\" page appears in the browser.\n\n    ![](./media/app-service-api-dotnet-get-started/appcreated.png)\n\n11. Add \"swagger\" to the URL in the browser's address bar, and then press Enter. (The URL will be `http://{apiappname}.azurewebsites.net/swagger`.)\n\n    The browser displays the same Swagger UI that you saw earlier, but it is now running in the cloud. Try out the Get method, and you see that you're back to the default 3 contacts, because the changes you made earlier were saved in a local file; any changes you make now will be saved in the file system of the Azure API app.\n\n12. Open the [Azure portal](https://portal.azure.com/).\n \n14. Click **Browse > API Apps > {your new API app}**.\n\n    ![](./media/app-service-api-dotnet-get-started/choosenewapiappinportal.png)\n\n16. Click **Settings**, and then in the **Settings** blade find the API section and click **API Definition**. \n\n    ![](./media/app-service-api-dotnet-get-started/apidefinsettings.png)\n\n    The API Definition blade lets you specify the URL that returns Swagger 2.0 metadata in JSON format. When Visual Studio creates the API app, it sets the API definition URL to the default value that you saw earlier, which is the API app's base URL plus `/swagger/docs/v1`. \n\n    ![](./media/app-service-api-dotnet-get-started/apidefurl.png)\n\n    When you select an API app to generate client code for it, Visual Studio retrieves the metadata from this URL. \n\n### API definition URL in Azure Resource Manager tooling\n\nYou can also configure the API definition URL for an API app by using Azure Resource Manager tooling such as Azure PowerShell, CLI or [Resource Explorer](https://resources.azure.com/). \n\nSet the `apiDefinition` property on the Microsoft.Web/sites/config resource type for your <site name>/web resource. For example, in **Resource Explorer**, go to **subscriptions > {your subscription} > resourceGroups > {your resource group} > providers > Microsoft.Web > sites > {your site} > config > web**, and you'll see the cors property:\n\n        \"apiDefinition\": {\n          \"url\": \"https://contactslistapi.azurewebsites.net/swagger/docs/v1\"\n        }\n\n## <a id=\"codegen\"></a> Consume from a .NET client by using generated client code \n\nOne of the advantages of integrating Swagger into Azure API apps is automatic code generation. Generated client classes make it easier to write code that calls an API app.\n\nIn this section you see how to consume an API app from an ASP.NET MVC web app. You'll run the MVC client and Web API locally first, then deploy the client to a new web app in Azure App Service and run it in the cloud.\n\n### Generate client code\n\nYou can generate client code for an API app by using Visual Studio or from the command line. For this tutorial you'll use Visual Studio. For information about how to do it from the command line, see the readme file of the [Azure/autorest](https://github.com/azure/autorest) repository on GitHub.com.\n\nThe ContactsList.MVC project already has the generated client code, but you'll delete it and regenerate it to make your own API app's URL be the default target URL.\n\n1. In Visual Studio **Solution Explorer**, in the ContactsList.MVC project, delete the *ContactsList.API* folder.\n\n    This folder was created by using the code generation process that you're about to go through.\n\n    ![](./media/app-service-api-dotnet-get-started/deletecodegen.png)\n\n2. Right-click the ContactsList.MVC project, and then click **Add > REST API Client**.\n\n    ![](./media/app-service-api-dotnet-get-started/codegenmenu.png)\n\n3. In the **Add REST APi Client** dialog box, click **Download from Microsoft Azure API App**, and then click **Browse**.\n\n    ![](./media/app-service-api-dotnet-get-started/codegenbrowse.png)\n\n8. In the **App Service** dialog box, expand the **ContactsListGroup** resource group and select your API app, and then click **OK**.\n\n    This dialog box gives more than one way to organize API apps in the list, in case you have too many to scroll through. It also lets you enter a search string to filter API apps by name.\n\n    ![](./media/app-service-api-dotnet-get-started/codegenselect.png)\n\n    If you don't see the API app in the list, chances are that when you were creating the API app you accidentally omitted the step that changed the type from web app to API app. In that case, you can create a new API app by repeating the steps you did earlier. You'll need to choose a different name for the API app, unless you go to the portal and delete the web app first. \n\n    Notice that when you return to the **Add REST API Client** dialog, the text box has been filled in with the API definition URL value that you saw earlier in the portal. \n\n    ![](./media/app-service-api-dotnet-get-started/codegenurlplugged.png)\n\n    As an alternative, you could enter the URL directly instead of going through the browse dialog. For example, if you deployed your API to a web app and it doesn't show up in the browse dialog, you can manually enter the URL that returns Swagger metadata here.\n\n    Notice also the **Select an existing Swagger metadata file** option. If you want to generate code before deploying to Azure, you could run locally, download the Swagger JSON file, and select it here. \n\n9. In the **Add REST API Client** dialog box, click **OK**.\n\n    Visual Studio creates a folder named after the API app and generates client classes.\n\n    ![](./media/app-service-api-dotnet-get-started/codegenfiles.png)\n\n5. Open *Controllers\\ContactsController.cs* to see the code that calls the API by using the generated client. \n\n    The following snippet shows how to instantiate the client object and call the Get method.\n\n        private ContactsListAPI db = new ContactsListAPI(new Uri(\"http://localhost:51864\"));\n        \n        public ActionResult Index()\n        {\n            return View(db.Contacts.Get());\n        }\n\n    This code passes in to the local IIS Express URL of thet API project to the client class constructor so that you can run the MVC web project and the API project locally. If you omit the constructor parameter, the default endpoint is the URL that you generated the code from. \n\n6. Your client class will be generated with a different name based on your API app name; change this code so that the type name matches what was generated in your project. For example, if you named your API App ContactsListAPIContoso, the code would look like the following example:\n\n        private ContactsListAPIContoso db = new ContactsListAPIContoso(new Uri(\"http://localhost:51864\"));\n        \n        public ActionResult Index()\n        {\n            return View(db.Contacts.Get());\n        }\n\n7. Build the solution.\n\nThe controller and views of the MVC project look similar to controller and views that have been scaffolded for Entity Framework because that's how they were created -- by scaffolding an Entity Framework data model and then making minor changes to use the REST API client instead of an Entity Framework database context.\n\n### Run locally\n\n1. Set the ContactsList.API and ContactsList.MVC projects as startup projects, with ContactsList.API starting before ContactsList.MVC. (Right-click the solution, click **Properties**, click **Multiple startup projects**, and set each project to **Start**. Use the up/down arrow icons to ensure that ContactsList.API is first in the list.) \n\n2. Press F5 to start the projects.\n\n    One browser displays the 403 page for the API and one displays the home page of the MVC app.\n\n3. Click **Contacts** in the menu bar of the browser that displays the MVC app's home page.\n\n    The MVC UI displays the contacts that are stored locally, and you can use the UI to add and delete contacts.\n\n    ![](./media/app-service-api-dotnet-get-started/mvccontacts.png)\n\n### Create a web app in Azure and deploy the ContactsList.MVC project to it\n\nIn this section you use the same method to create a web app that you did earlier to create an API app, and the same method to deploy a web project to the Azure web app.\n\n#### Change the MVC project to point to the Azure API app \n\nBefore deploying to Azure, change the API endpoint in the MVC project so that when the code is deployed it will call the Azure API app that you created earlier instead of localhost.\n\n1. In the ContactsList.MVC project, open *Controllers\\ContactsController.cs*.\n\n2. Comment out the line that sets the API base URL to the localhost URL, uncomment the line that has no constructor parrameter. The code now looks like the following example, except that in both lines the class name reflects the name of your API app that you generated the code from.\n\n        private ContactsListAPI db = new ContactsListAPI();\n        //private ContactsListAPI db = new ContactsListAPI(new Uri(\"http://localhost:51864\"));\n\n    The default target URL is your Azure API app because you generated the code from there; if you used a different method to generate the code you might have to specify the Azure API app URL the same way you specified the local URL. \n\n#### Create a web app to host the MVC site\n\n1. In **Solution Explorer**, right-click the ContactsList.MVC project, and then click **Publish**.\n\n2. In the **Publish Web** wizard, click the **Profile** tab.\n\n3.  In the **Profile** tab of the **Publish Web** wizard, click **Microsoft Azure App Service**.\n\n5. In the **App Service** dialog box, click **New**.\n\n3. In the **Hosting** tab of the **Create App Service** dialog box, click **Change Type**, and make sure the type is **Web App**.\n\n4. Enter a **Web App Name** that is unique in the *azurewebsites.net* domain. \n\n5. Choose the Azure **Subscription** you want to work with.\n\n6. In the **Resource Group** drop-down, choose the same resource group you created earlier.\n\n4. In the **App Service Plan** drop-down, choose the same plan you created earlier. \n\n7. Click **Create**.\n\n    Visual Studio creates the web app, creates a publish profile for it, and displays the **Connection** step of the **Publish Web** wizard.\n\n### Deploy the ContactsList.Web project to the new web app\n\n3.  In the **Connection** step of the **Publish Web** wizard, click **Publish**.\n\n    Visual Studio deploys the ContactsList.MVC project to the new web app and opens a browser to the URL of the web app. The same MVC UI appears that you saw running locally, except now it is showing the contacts that are stored in the Azure API app's file system.\n\n    ![](./media/app-service-api-dotnet-get-started/codegencontacts.png)\n\n## Next steps\n\nIn this tutorial, you've seen how to create API apps, deploy code to them, and consume them from .NET clients. The next tutorial in the API Apps getting started series shows how to [consume API apps from JavaScript clients, using CORS](app-service-api-cors-consume-javascript.md).\n\n"
}