<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1c960042aeca4ef7c858c8b854aa0bf278fac0b</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4c1d669" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Make your own integration services</source>
          <target state="new">Make your own integration services</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>2-March update: Starting in Windows 10, anyone can make a service very similar to the in-box Hyper-V integration services using a new socket-based communication channel between the Hyper-V host and the virtual machines running on it.</source>
          <target state="new">2-March update: Starting in Windows 10, anyone can make a service very similar to the in-box Hyper-V integration services using a new socket-based communication channel between the Hyper-V host and the virtual machines running on it.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using these Hyper-V sockets, services can run independently of the networking stack and all data stays on the same physical memory.</source>
          <target state="new">Using these Hyper-V sockets, services can run independently of the networking stack and all data stays on the same physical memory.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This document walks through creating a simple application built on Hyper-V sockets and how to get started using them.</source>
          <target state="new">This document walks through creating a simple application built on Hyper-V sockets and how to get started using them.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>PowerShell Direct<ept id="p1">](../user_guide/vmsession.md)</ept> is an example of an application (in this case an in-box Windows service) which uses Hyper-V sockets to communicate.</source>
          <target state="new"><bpt id="p1">[</bpt>PowerShell Direct<ept id="p1">](../user_guide/vmsession.md)</ept> is an example of an application (in this case an in-box Windows service) which uses Hyper-V sockets to communicate.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Supported Host OS</source>
          <target state="new">Supported Host OS</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Windows 10</source>
          <target state="new">Windows 10</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Windows Server Technical Preview 3 and later</source>
          <target state="new">Windows Server Technical Preview 3 and later</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Future releases (Server 2016 +)</source>
          <target state="new">Future releases (Server 2016 +)</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Supported Guest OS</source>
          <target state="new">Supported Guest OS</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows 10</source>
          <target state="new">Windows 10</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Windows Server Technical Preview 3 and later</source>
          <target state="new">Windows Server Technical Preview 3 and later</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Future releases (Server 2016 +)</source>
          <target state="new">Future releases (Server 2016 +)</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Capabilities and Limitations</source>
          <target state="new">Capabilities and Limitations</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Supports kernel mode or user mode actions</source>
          <target state="new">Supports kernel mode or user mode actions</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Data stream only</source>
          <target state="new">Data stream only</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No block memory (not the best for backup/video)</source>
          <target state="new">No block memory (not the best for backup/video)</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="new">Getting started</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Right now, Hyper-V sockets are available in native code (C/C++).</source>
          <target state="new">Right now, Hyper-V sockets are available in native code (C/C++).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To write a simple application, you'll need:</source>
          <target state="new">To write a simple application, you'll need:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>C compiler.</source>
          <target state="new">C compiler.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you don't have one, checkout <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://aka.ms/vs)</ept></source>
          <target state="new">If you don't have one, checkout <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://aka.ms/vs)</ept></target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A computer running Hyper-V with and a virtual machine.</source>
          <target state="new">A computer running Hyper-V with and a virtual machine.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Host and guest (VM) OS must be Windows 10, Windows Server Technical Preview 3, or later.</source>
          <target state="new">Host and guest (VM) OS must be Windows 10, Windows Server Technical Preview 3, or later.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Windows SDK -- We're in the process of publishing this.</source>
          <target state="new">Windows SDK -- We're in the process of publishing this.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Register a new application</source>
          <target state="new">Register a new application</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In order to use Hyper-V sockets, the application must be registered with the Hyper-V Host's registry.</source>
          <target state="new">In order to use Hyper-V sockets, the application must be registered with the Hyper-V Host's registry.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>By registering the service in the registry, you get:</source>
          <target state="new">By registering the service in the registry, you get:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>WMI management for enable, disable, and listing available services</source>
          <target state="new">WMI management for enable, disable, and listing available services</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Permission to communicate with virtual machines directly</source>
          <target state="new">Permission to communicate with virtual machines directly</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following PowerShell will register a new application named "HV Socket Demo".</source>
          <target state="new">The following PowerShell will register a new application named "HV Socket Demo".</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This must be run as administrator.</source>
          <target state="new">This must be run as administrator.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Manual instructions below.</source>
          <target state="new">Manual instructions below.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Registry location and information</source>
          <target state="new">Registry location and information</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this registry location, you'll see several GUIDs.</source>
          <target state="new">In this registry location, you'll see several GUIDs.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Those are our in-box services.</source>
          <target state="new">Those are our in-box services.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Information in the registry per service:</source>
          <target state="new">Information in the registry per service:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>-- this is the service's friendly name</source>
          <target state="new">-- this is the service's friendly name</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To register your own service, create a new registry key using your own GUID and friendly name.</source>
          <target state="new">To register your own service, create a new registry key using your own GUID and friendly name.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The friendly name will be associated with your new application.</source>
          <target state="new">The friendly name will be associated with your new application.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It will appear in performance counters and other places where a GUID isn't appropriate.</source>
          <target state="new">It will appear in performance counters and other places where a GUID isn't appropriate.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The registry entry will look like this:</source>
          <target state="new">The registry entry will look like this:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt> Tip: <ept id="p1">**</ept>  To generate a GUID in PowerShell and copy it to the clipboard, run:</source>
          <target state="new"><bpt id="p1">**</bpt> Tip: <ept id="p1">**</ept>  To generate a GUID in PowerShell and copy it to the clipboard, run:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Creating a Hyper-V socket</source>
          <target state="new">Creating a Hyper-V socket</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the most basic case, defining a socket requires an address family, connection type, and protocol.</source>
          <target state="new">In the most basic case, defining a socket requires an address family, connection type, and protocol.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Here is a simple <bpt id="p1">[</bpt>socket definition<ept id="p1">](
https://msdn.microsoft.com/en-us/library/windows/desktop/ms740506(v=vs.85).aspx
)</ept></source>
          <target state="new">Here is a simple <bpt id="p1">[</bpt>socket definition<ept id="p1">](
https://msdn.microsoft.com/en-us/library/windows/desktop/ms740506(v=vs.85).aspx
)</ept></target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For a Hyper-V socket:</source>
          <target state="new">For a Hyper-V socket:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Address family -</source>
          <target state="new">Address family -</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>type -</source>
          <target state="new">type -</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>protocol -</source>
          <target state="new">protocol -</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Here is an example declaration/instantiation:</source>
          <target state="new">Here is an example declaration/instantiation:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Binding to a Hyper-V socket</source>
          <target state="new">Binding to a Hyper-V socket</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Bind associates a socket with connection information.</source>
          <target state="new">Bind associates a socket with connection information.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The function definition is copied below for convinience, read more about bind <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/desktop/ms737550.aspx)</ept>.</source>
          <target state="new">The function definition is copied below for convinience, read more about bind <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/desktop/ms737550.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In contrast to the socket address (sockaddr) for a standard Internet Protocol address family (<ph id="ph1">`AF_INET`</ph>) which consists of the host machine's IP address and a port number on that host, the socket address for <ph id="ph2">`AF_HYPERV`</ph> uses the virtual machine's ID and the application ID defined above to establish a connection.</source>
          <target state="new">In contrast to the socket address (sockaddr) for a standard Internet Protocol address family (<ph id="ph1">`AF_INET`</ph>) which consists of the host machine's IP address and a port number on that host, the socket address for <ph id="ph2">`AF_HYPERV`</ph> uses the virtual machine's ID and the application ID defined above to establish a connection.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Since Hyper-V sockets do not depend on a networking stack, TCP/IP, DNS, etc. the socket endpoint needed a non-IP, not hostname, format that still unambiguously describes the connection.</source>
          <target state="new">Since Hyper-V sockets do not depend on a networking stack, TCP/IP, DNS, etc. the socket endpoint needed a non-IP, not hostname, format that still unambiguously describes the connection.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Here is the definition for a Hyper-V socket's socket address:</source>
          <target state="new">Here is the definition for a Hyper-V socket's socket address:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In lieu of an IP or hostname, AF_HYPERV endpoints rely heavily on two GUIDs:</source>
          <target state="new">In lieu of an IP or hostname, AF_HYPERV endpoints rely heavily on two GUIDs:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>VM ID – this is the unique ID assigned per VM.</source>
          <target state="new">VM ID – this is the unique ID assigned per VM.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A VM’s ID can be found using the following PowerShell snippet.</source>
          <target state="new">A VM’s ID can be found using the following PowerShell snippet.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Service ID – GUID, <bpt id="p1">[</bpt>described above<ept id="p1">](#RegisterANewApplication)</ept>, with which the application is registered in the Hyper-V host registry.</source>
          <target state="new">Service ID – GUID, <bpt id="p1">[</bpt>described above<ept id="p1">](#RegisterANewApplication)</ept>, with which the application is registered in the Hyper-V host registry.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>There is also a set of VMID wildcards available when a connection isn't to a specific virtual machine.</source>
          <target state="new">There is also a set of VMID wildcards available when a connection isn't to a specific virtual machine.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>VMID Wildcards</source>
          <target state="new">VMID Wildcards</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>GUID</source>
          <target state="new">GUID</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>HV_GUID_ZERO</source>
          <target state="new">HV_GUID_ZERO</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>00000000-0000-0000-0000-000000000000</source>
          <target state="new">00000000-0000-0000-0000-000000000000</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Listeners should bind to this VmId to accept connection from all partitions.</source>
          <target state="new">Listeners should bind to this VmId to accept connection from all partitions.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>HV_GUID_WILDCARD</source>
          <target state="new">HV_GUID_WILDCARD</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>00000000-0000-0000-0000-000000000000</source>
          <target state="new">00000000-0000-0000-0000-000000000000</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Listeners should bind to this VmId to accept connection from all partitions.</source>
          <target state="new">Listeners should bind to this VmId to accept connection from all partitions.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>HV_GUID_BROADCAST</source>
          <target state="new">HV_GUID_BROADCAST</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF</source>
          <target state="new">FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>HV_GUID_CHILDREN</source>
          <target state="new">HV_GUID_CHILDREN</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>90db8b89-0d35-4f79-8ce9-49ea0ac8b7cd</source>
          <target state="new">90db8b89-0d35-4f79-8ce9-49ea0ac8b7cd</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Wildcard address for children.</source>
          <target state="new">Wildcard address for children.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Listeners should bind to this VmId to accept connection from its children.</source>
          <target state="new">Listeners should bind to this VmId to accept connection from its children.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>HV_GUID_LOOPBACK</source>
          <target state="new">HV_GUID_LOOPBACK</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>e0e16197-dd56-4a10-9195-5ee7a155a838</source>
          <target state="new">e0e16197-dd56-4a10-9195-5ee7a155a838</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Loopback address.</source>
          <target state="new">Loopback address.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Using this VmId connects to the same partition as the connector.</source>
          <target state="new">Using this VmId connects to the same partition as the connector.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>HV_GUID_PARENT</source>
          <target state="new">HV_GUID_PARENT</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>a42e7cda-d03f-480c-9cc2-a4de20abb878</source>
          <target state="new">a42e7cda-d03f-480c-9cc2-a4de20abb878</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Parent address.</source>
          <target state="new">Parent address.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Using this VmId connects to the parent partition of the connector.*</source>
          <target state="new">Using this VmId connects to the parent partition of the connector.*</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>*<bpt id="p1">**</bpt>HV_GUID_PARENT<ept id="p1">**</ept></source>
          <target state="new">*<bpt id="p1">**</bpt>HV_GUID_PARENT<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The parent of a virtual machine is its host.</source>
          <target state="new">The parent of a virtual machine is its host.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The parent of a container is the container's host.</source>
          <target state="new">The parent of a container is the container's host.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Connecting from a container running in a virtual machine will connect to the VM hosting the container.</source>
          <target state="new">Connecting from a container running in a virtual machine will connect to the VM hosting the container.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Listening on this VmId accepts connection from:</source>
          <target state="new">Listening on this VmId accepts connection from:</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>(Inside containers): Container host.</source>
          <target state="new">(Inside containers): Container host.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>(Inside VM: Container host/ no container): VM host.</source>
          <target state="new">(Inside VM: Container host/ no container): VM host.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>(Not inside VM: Container host/ no container): Not supported.</source>
          <target state="new">(Not inside VM: Container host/ no container): Not supported.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Supported socket commands</source>
          <target state="new">Supported socket commands</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Socket()</source>
          <target state="new">Socket()</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Bind()</source>
          <target state="new">Bind()</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Connect()</source>
          <target state="new">Connect()</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Send()</source>
          <target state="new">Send()</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Listen()</source>
          <target state="new">Listen()</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Accept()</source>
          <target state="new">Accept()</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Complete WinSock API</source>
          <target state="new">Complete WinSock API</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Work in progress</source>
          <target state="new">Work in progress</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Graceful disconnect</source>
          <target state="new">Graceful disconnect</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>select</source>
          <target state="new">select</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>