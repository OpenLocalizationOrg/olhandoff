{
  "nodes": [
    {
      "content": "ms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD",
      "pos": [
        4,
        52
      ]
    },
    {
      "content": "title: Enumerate and query files and folders",
      "pos": [
        53,
        97
      ]
    },
    {
      "content": "description: Access files and folders in either a folder, library, device, or network location.",
      "pos": [
        98,
        193
      ]
    },
    {
      "content": "You can also query the files and folders in a location by constructing file and folder queries.",
      "pos": [
        194,
        289
      ]
    },
    {
      "content": "Enumerate and query files and folders",
      "pos": [
        296,
        333
      ]
    },
    {
      "content": "\\[ Updated for UWP apps on Windows 10.",
      "pos": [
        336,
        374
      ]
    },
    {
      "content": "For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]",
      "pos": [
        375,
        470
      ]
    },
    {
      "content": "Access files and folders in either a folder, library, device, or network location.",
      "pos": [
        473,
        555
      ]
    },
    {
      "content": "You can also query the files and folders in a location by constructing file and folder queries.",
      "pos": [
        556,
        651
      ]
    },
    {
      "pos": [
        653,
        753
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Also see the <bpt id=\"p2\">[</bpt>Folder enumeration sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?linkid=619993)</ept>."
    },
    {
      "content": "Prerequisites",
      "pos": [
        760,
        773
      ]
    },
    {
      "content": "Understand async programming for Universal Windows Platform (UWP) apps",
      "pos": [
        781,
        851
      ]
    },
    {
      "content": "You can learn how to write asynchronous apps in C# or Visual Basic, see <bpt id=\"p1\">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187337)</ept>.",
      "pos": [
        859,
        1036
      ]
    },
    {
      "content": "To learn how to write asynchronous apps in C++, see <bpt id=\"p1\">[</bpt>Asynchronous programming in C++<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.",
      "pos": [
        1037,
        1181
      ]
    },
    {
      "content": "Access permissions to the location",
      "pos": [
        1189,
        1223
      ]
    },
    {
      "content": "For example, the code in these examples require the <bpt id=\"p1\">**</bpt>picturesLibrary<ept id=\"p1\">**</ept> capability, but your location may require a different capability or no capability at all.",
      "pos": [
        1231,
        1392
      ]
    },
    {
      "content": "To learn more, see <bpt id=\"p1\">[</bpt>File access permissions<ept id=\"p1\">](file-access-permissions.md)</ept>.",
      "pos": [
        1393,
        1466
      ]
    },
    {
      "content": "Enumerate files and folders in a location",
      "pos": [
        1471,
        1512
      ]
    },
    {
      "pos": [
        1516,
        1581
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Remember to declare the <bpt id=\"p2\">**</bpt>picturesLibrary<ept id=\"p2\">**</ept> capability."
    },
    {
      "content": "In this example we first use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolder.GetFilesAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227276)</ept> method to get all the files in the root folder of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>PicturesLibrary<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders) and list the name of each file.",
      "pos": [
        1583,
        1893
      ]
    },
    {
      "content": "Next, we use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetFoldersAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227280)</ept> method to get all the subfolders in the <bpt id=\"p3\">**</bpt>PicturesLibrary<ept id=\"p3\">**</ept> and list the name of each subfolder.",
      "pos": [
        1894,
        2087
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> [!div class=\"tabbedCodeSnippets\"] \n<ph id=\"ph2\">&gt; ```cpp\n&gt; //#include </ph>",
      "pos": [
        2177,
        2237
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> //#include",
      "pos": [
        2249,
        2262
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> //#include",
      "pos": [
        2271,
        2284
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> using namespace Windows::Storage;",
      "pos": [
        2293,
        2329
      ]
    },
    {
      "content": "&gt; using namespace Platform::Collection",
      "pos": [
        2330,
        2368
      ]
    },
    {
      "content": ";\n&gt; using namespace concurre",
      "pos": [
        2369,
        2397
      ]
    },
    {
      "content": "cy;\n&gt; using namespace std;\n&gt; \n&gt; // Be sure to specify the Pictures Folder capability in the appxmanifext file.",
      "pos": [
        2398,
        2508
      ]
    },
    {
      "content": "&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n&gt; \n&gt; // Use a shared_ptr so that the string stays in memory",
      "pos": [
        2509,
        2633
      ]
    },
    {
      "content": "&gt; // until the last task is complet",
      "pos": [
        2634,
        2669
      ]
    },
    {
      "content": ".",
      "pos": [
        2670,
        2671
      ]
    },
    {
      "content": "&gt; auto outputString = make_sh<ph id=\"ph1\">ared</ph>",
      "pos": [
        2672,
        2705
      ]
    },
    {
      "content": "();\n&gt; *outputString += L\"Files:\\n\";\n&gt; \n&gt; // Get a read-only vector of the file objects",
      "pos": [
        2714,
        2800
      ]
    },
    {
      "content": "&gt; // and pass it to the continuatio",
      "pos": [
        2801,
        2836
      ]
    },
    {
      "content": "&gt; create_task(picturesFolder-&gt;GetFilesAsyn<ph id=\"ph1\">c())  </ph>",
      "pos": [
        2840,
        2888
      ]
    },
    {
      "content": "&gt;     // outputString is captured by value, which creates",
      "pos": [
        2895,
        2952
      ]
    },
    {
      "content": "<ph id=\"ph1\">copy</ph> \n&gt;     // of the shared_ptr and increments its referenc",
      "pos": [
        2955,
        3015
      ]
    },
    {
      "content": "<ph id=\"ph1\"> cou</ph>nt.",
      "pos": [
        3016,
        3023
      ]
    },
    {
      "content": "&gt;     .then ([outputString] (IV<ph id=\"ph1\">ectorView\\</ph>",
      "pos": [
        3024,
        3065
      ]
    },
    {
      "content": "^ files)\n&gt; {",
      "pos": [
        3079,
        3091
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt;</ph>     for ( unsigned int i = 0 ; i &lt; files-&gt;Size; i++)\n&gt;     {\n&gt;         *outputString += files-&gt;GetAt(i)-&gt;Name-&gt;Data();\n&gt;         *outputString += L\"\\n\";\n&gt;     }\n&gt; })",
      "pos": [
        3100,
        3267
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt;</ph>     // We need to explicitly state the return ty",
      "pos": [
        3268,
        3318
      ]
    },
    {
      "content": "<ph id=\"ph1\"> \n&gt;</ph>     // here: -&gt; IAsyncOpera<ph id=\"ph2\">tion</ph>",
      "pos": [
        3320,
        3355
      ]
    },
    {
      "content": "^&gt;^ \n&gt; {",
      "pos": [
        3440,
        3448
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt;</ph>     return picturesFolder-&gt;GetFoldersAsync(",
      "pos": [
        3449,
        3494
      ]
    },
    {
      "content": ";",
      "pos": [
        3495,
        3496
      ]
    },
    {
      "content": "<ph id=\"ph1\"> })</ph>\n&gt;     // Capture \"this\" to access m_OutputTextBlock from within the l",
      "pos": [
        3498,
        3571
      ]
    },
    {
      "content": "<ph id=\"ph1\">mbda</ph>.",
      "pos": [
        3572,
        3577
      ]
    },
    {
      "content": "&gt;     .then([this, outputString](IVec<ph id=\"ph1\">torView\\</ph>",
      "pos": [
        3578,
        3623
      ]
    },
    {
      "content": "^ folders)\n&gt; {",
      "pos": [
        3639,
        3653
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt;</ph>     *outputString += L\"Folders:\\n\";\n&gt; \n&gt;     for ( unsigned int i = 0; i &lt; folders-&gt;Size; i++)\n&gt;     {\n&gt;         *outputString += folders-&gt;GetAt(i)-&gt;Name-&gt;Data();\n&gt;         *outputString += L\"\\n\";\n&gt;     }\n&gt; \n&gt;     // Assume m_OutputTextBlock is a TextBlock defined in the XAML.",
      "pos": [
        3662,
        3941
      ]
    },
    {
      "content": "&gt;     m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());\n&gt; });\n<ph id=\"ph1\">&gt; ```\n&gt; ```cs\n&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;\n&gt; StringBuilder outputText = new StringBuilder();\n&gt; \n&gt; IReadOnlyList</ph>",
      "pos": [
        3942,
        4166
      ]
    },
    {
      "content": "fileList = \n&gt;     await picturesFolder.GetFilesAsync();\n&gt; \n&gt; outputText.AppendLine(\"Files:\");",
      "pos": [
        4180,
        4273
      ]
    },
    {
      "content": "&gt; foreach (StorageFile file in fileLis",
      "pos": [
        4274,
        4312
      ]
    },
    {
      "content": ")",
      "pos": [
        4313,
        4314
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; {</ph>\n&gt;     outputText.Append(file.Name +",
      "pos": [
        4315,
        4354
      ]
    },
    {
      "content": "\\n\");\n&gt; }\n&gt; \n&gt; IReadOnlyList",
      "pos": [
        4356,
        4384
      ]
    },
    {
      "content": "folderList = \n&gt;     await picturesFolder.GetFoldersAsync();\n&gt;            \n&gt; outputText.AppendLine(\"Folders:\");",
      "pos": [
        4400,
        4510
      ]
    },
    {
      "content": "&gt; foreach (StorageFolder folder in folderLis",
      "pos": [
        4511,
        4555
      ]
    },
    {
      "content": ")",
      "pos": [
        4556,
        4557
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; {</ph>\n&gt;     outputText.Append(folder.DisplayName +",
      "pos": [
        4558,
        4606
      ]
    },
    {
      "content": "\\<bpt id=\"p1\">n\");\n&gt; }\n&gt; ```\n&gt; ```vb\n&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\n&gt; Dim outputText As New StringBuilder\n&gt; \n&gt; Dim fileList As IReadOnlyList(Of StorageFile) =\n&gt;     Await picturesFolder.GetFilesAsync()\n&gt; \n&gt; outputText.AppendLine(\"Files:\")\n&gt; For Each file As StorageFile In fileList\n&gt; \n&gt;     outputText.Append(file.Name &amp; vbLf)\n&gt; \n&gt; Next file\n&gt; \n&gt; Dim folderList As IReadOnlyList(Of StorageFolder) =\n&gt;     Await picturesFolder.GetFoldersAsync()\n&gt; \n&gt; outputText.AppendLine(\"Folders:\")\n&gt; For Each folder As StorageFolder In folderList\n&gt; \n&gt;     outputText.Append(folder.DisplayName &amp; vbLf)\n&gt; \n&gt; Next folder\n&gt; ```\n\n\n&gt; **</bpt>Note<ept id=\"p1\">**</ept>  In C# or Visual Basic, remember to put the <bpt id=\"p2\">**</bpt>async<ept id=\"p2\">**</ept> keyword in the method declaration of any method in which you use the <bpt id=\"p3\">**</bpt>await<ept id=\"p3\">**</ept> operator.",
      "pos": [
        4608,
        5397
      ]
    },
    {
      "content": "Alternatively, you can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetItemsAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227286)</ept> method to get all items (both files and subfolders) in a particular location.",
      "pos": [
        5401,
        5587
      ]
    },
    {
      "content": "The following example uses the <bpt id=\"p1\">**</bpt>GetItemsAsync<ept id=\"p1\">**</ept> method to get all files and subfolders in the root folder of the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>PicturesLibrary<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders).",
      "pos": [
        5588,
        5802
      ]
    },
    {
      "content": "Then the example lists the name of each file and subfolder.",
      "pos": [
        5803,
        5862
      ]
    },
    {
      "content": "If the item is a subfolder, the example appends <ph id=\"ph1\">`\"folder\"`</ph> to the name.",
      "pos": [
        5863,
        5934
      ]
    },
    {
      "content": "&gt; [!div class=\"tabbedCodeSnippets\"] \n<ph id=\"ph1\">&gt; ```cpp\n&gt; // See previous example for comments, namespace and #include info.\n&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n&gt; auto outputString = make_shared</ph>",
      "pos": [
        5936,
        6149
      ]
    },
    {
      "content": "();\n&gt; \n&gt; create_task(picturesFolder-&gt;GetItemsAsync())",
      "pos": [
        6158,
        6211
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt;</ph>     .then ([this, outputString] (IVectorVi<ph id=\"ph2\">ew</ph>",
      "pos": [
        6220,
        6266
      ]
    },
    {
      "content": "^ items)\n&gt; {",
      "pos": [
        6281,
        6293
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt;</ph>     for ( unsigned int i = 0 ; i &lt; items-&gt;Size; i++)\n&gt;     {\n&gt;         *outputString += items-&gt;GetAt(i)-&gt;Name-&gt;Data();\n&gt;         if(items-&gt;GetAt(i)-&gt;IsOfType(StorageItemTypes::Folder))\n&gt;         {\n&gt;             *outputString += L\"  folder\\n\";\n&gt;         }\n&gt;         else\n&gt;         {\n&gt;             *outputString += L\"\\n\";\n&gt;         }\n&gt;         m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());\n&gt;     }\n&gt; });\n<ph id=\"ph2\">&gt; ```\n&gt; ```cs\n&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;\n&gt; StringBuilder outputText = new StringBuilder();\n&gt; \n&gt; IReadOnlyList</ph>",
      "pos": [
        6302,
        6872
      ]
    },
    {
      "content": "itemsList = \n&gt;     await picturesFolder.GetItemsAsync();\n&gt; \n&gt; foreach (var item in itemsList)",
      "pos": [
        6887,
        6980
      ]
    },
    {
      "content": "&gt;",
      "pos": [
        6981,
        6982
      ]
    },
    {
      "content": "<ph id=\"ph1\">{\n&gt;</ph>     if (item is StorageFol",
      "pos": [
        6983,
        7013
      ]
    },
    {
      "content": "<ph id=\"ph1\">er)</ph>\n&gt;",
      "pos": [
        7014,
        7019
      ]
    },
    {
      "content": "<ph id=\"ph1\">    {\n&gt;</ph>         outputText.Append(item.Name + \" folder\\n\");\n&gt; \n&gt;     }\n&gt;     else\n&gt;     {\n&gt;         outputText.Append(item.Name + \"\\n\");\n&gt; \n&gt;     }\n&gt; }\n&gt; ```\n&gt; ```vb\n&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\n&gt; Dim outputText As New StringBuilder\n&gt; \n&gt; Dim itemsList As IReadOnlyList(Of IStorageItem) =\n&gt;     Await picturesFolder.GetItemsAsync()\n&gt; \n&gt; For Each item In itemsList\n&gt; \n&gt;     If TypeOf item Is StorageFolder Then\n&gt; \n&gt;         outputText.Append(item.Name &amp; \" folder\" &amp; vbLf)\n&gt; \n&gt;     Else\n&gt; \n&gt;         outputText.Append(item.Name &amp; vbLf)\n&gt; \n&gt;     End If\n&gt; \n&gt; Next item\n&gt; ```\n\n## Query files in a location and enumerate matching files\n\nIn this example we query for all the files in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PicturesLibrary<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> grouped by the month, and this time the example recurses into subfolders.",
      "pos": [
        7020,
        7893
      ]
    },
    {
      "content": "First, we call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolder.CreateFolderQuery<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227262)</ept> and pass the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CommonFolderQuery.GroupByMonth<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br207957)</ept> value to the method.",
      "pos": [
        7894,
        8133
      ]
    },
    {
      "content": "That gives us a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolderQueryResult<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208066)</ept> object.",
      "pos": [
        8134,
        8246
      ]
    },
    {
      "content": "Next we call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolderQueryResult.GetFoldersAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208074)</ept> which returns <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>StorageFolder<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227230)</ept> objects representing virtual folders.",
      "pos": [
        8248,
        8495
      ]
    },
    {
      "content": "In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.",
      "pos": [
        8496,
        8609
      ]
    },
    {
      "content": "&gt; [!div class=\"tabbedCodeSnippets\"] \n<ph id=\"ph1\">&gt; ```cpp\n&gt; //#include </ph>",
      "pos": [
        8611,
        8670
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> //#include",
      "pos": [
        8682,
        8695
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> //#include",
      "pos": [
        8704,
        8717
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> using namespace Windows::Storage;",
      "pos": [
        8726,
        8762
      ]
    },
    {
      "content": "&gt; using namespace Windows::Storage::Searc",
      "pos": [
        8763,
        8804
      ]
    },
    {
      "content": ";\n&gt; using namespace concurre",
      "pos": [
        8805,
        8833
      ]
    },
    {
      "content": "cy;\n&gt; using namespace Platform::Collec",
      "pos": [
        8834,
        8872
      ]
    },
    {
      "content": "ions;\n&gt; using namespace Windows::Foundation::Coll",
      "pos": [
        8873,
        8922
      ]
    },
    {
      "content": "ctions;\n&gt; using namespace std;\n&gt; \n&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n&gt; \n&gt; StorageFolderQueryResult^ queryResult =",
      "pos": [
        8923,
        9066
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt;</ph>     picturesFolder-&gt;CreateFolderQuery(CommonFolderQuery::GroupByMonth);\n&gt; \n&gt; // Use shared_ptr so that outputString remains in memory",
      "pos": [
        9068,
        9203
      ]
    },
    {
      "content": "&gt; // until the task completes, which is after the function goes out of scop",
      "pos": [
        9204,
        9279
      ]
    },
    {
      "content": ".",
      "pos": [
        9280,
        9281
      ]
    },
    {
      "content": "&gt; auto outputString = std::make_sh<ph id=\"ph1\">ared</ph>",
      "pos": [
        9282,
        9320
      ]
    },
    {
      "content": "();\n&gt; \n&gt; create_task( queryResult-&gt;GetFoldersAsync()).then([this, outputString] (IVectorView",
      "pos": [
        9329,
        9421
      ]
    },
    {
      "content": "^ view) \n&gt; {",
      "pos": [
        9437,
        9449
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt;</ph>     for ( unsigned int i = 0; i &lt; view-&gt;Size; i++)\n<ph id=\"ph2\">&gt;     {\n&gt;         create_task(view-&gt;GetAt(i)-&gt;GetFilesAsync()).then([this, i, view, outputString](IVectorView</ph>",
      "pos": [
        9458,
        9620
      ]
    },
    {
      "content": "^ files)\n&gt;         {\n&gt;             *outputString += view-&gt;GetAt(i)-&gt;Name-&gt;Data();\n&gt;             *outputString += L\"(\";\n&gt;             *outputString += to_wstring(files-&gt;Size);\n&gt;             *outputString += L\")\\r\\n\";\n&gt;             for (unsigned int j = 0; j &lt; files-&gt;Size; j++)\n&gt;             {\n&gt;                 *outputString += L\"     \";\n&gt;                 *outputString += files-&gt;GetAt(j)-&gt;Name-&gt;Data();\n&gt;                 *outputString += L\"\\r\\n\";\n&gt;             }\n&gt;         }).then([this, outputString]()\n&gt;         {\n&gt;             m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());\n&gt;         });\n&gt;     }    \n&gt; });\n<ph id=\"ph1\">&gt; ```\n&gt; ```cs\n&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;\n&gt; \n&gt; StorageFolderQueryResult queryResult = \n&gt;     picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth);\n&gt;         \n&gt; IReadOnlyList</ph>",
      "pos": [
        9634,
        10484
      ]
    },
    {
      "content": "folderList = \n&gt;     await queryResult.GetFoldersAsync();\n&gt; \n&gt; StringBuilder outputText = new StringBuilder();\n&gt; \n&gt; foreach (StorageFolder folder in folderList)",
      "pos": [
        10500,
        10659
      ]
    },
    {
      "content": "&gt;",
      "pos": [
        10660,
        10661
      ]
    },
    {
      "content": "<ph id=\"ph1\">{\n&gt;</ph>     IReadOnly<ph id=\"ph2\">List</ph>",
      "pos": [
        10662,
        10683
      ]
    },
    {
      "content": "fileList = await folder.GetFilesAsync();\n&gt; \n&gt;     // Print the month and number of files in this group.",
      "pos": [
        10697,
        10800
      ]
    },
    {
      "content": "&gt;     outputText.AppendLine(folder.Name + \" (\" + fileList.Count + \")\");\n&gt; \n&gt;     foreach (StorageFile file in fileList)\n&gt;     {\n&gt;         // Print the name of the file.",
      "pos": [
        10801,
        10969
      ]
    },
    {
      "content": "&gt;         outputText.AppendLine(\"   \" + file.Name);\n&gt;     }\n&gt; }\n&gt; ```\n&gt; ```vb\n&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\n&gt; Dim outputText As New StringBuilder\n&gt; \n&gt; Dim queryResult As StorageFolderQueryResult =\n&gt;     picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth)\n&gt; \n&gt; Dim folderList As IReadOnlyList(Of StorageFolder) =\n&gt;     Await queryResult.GetFoldersAsync()\n&gt; \n&gt; For Each folder As StorageFolder In folderList\n&gt; \n&gt;     Dim fileList As IReadOnlyList(Of StorageFile) =\n&gt;         Await folder.GetFilesAsync()\n&gt; \n&gt;     ' Print the month and number of files in this group.",
      "pos": [
        10970,
        11585
      ]
    },
    {
      "content": "&gt;     outputText.AppendLine(folder.Name &amp; \" (\" &amp; fileList.Count &amp; \")\")\n&gt; \n&gt;     For Each file As StorageFile In fileList\n&gt; \n&gt;         ' Print the name of the file.",
      "pos": [
        11586,
        11749
      ]
    },
    {
      "content": "&gt;         outputText.AppendLine(\"   \" &amp; file.Name)\n&gt; \n&gt;     Next file\n&gt; \n&gt; Next folder\n&gt; ```\n\nThe output of the example looks similar to the following.",
      "pos": [
        11750,
        11901
      ]
    },
    {
      "content": "<ph id=\"ph1\">``` syntax\nJuly ‎2015 (2)\n   MyImage3.png\n   MyImage4.png\n‎December ‎2014 (2)\n   MyImage1.png\n   MyImage2.png\n```</ph>",
      "pos": [
        11903,
        12016
      ]
    }
  ],
  "content": "---\nms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD\ntitle: Enumerate and query files and folders\ndescription: Access files and folders in either a folder, library, device, or network location. You can also query the files and folders in a location by constructing file and folder queries.\n---\n# Enumerate and query files and folders\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nAccess files and folders in either a folder, library, device, or network location. You can also query the files and folders in a location by constructing file and folder queries.\n\n**Note**  Also see the [Folder enumeration sample](http://go.microsoft.com/fwlink/p/?linkid=619993).\n\n \n## Prerequisites\n\n-   **Understand async programming for Universal Windows Platform (UWP) apps**\n\n    You can learn how to write asynchronous apps in C# or Visual Basic, see [Call asynchronous APIs in C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/mt187337). To learn how to write asynchronous apps in C++, see [Asynchronous programming in C++](https://msdn.microsoft.com/library/windows/apps/mt187334).\n\n-   **Access permissions to the location**\n\n    For example, the code in these examples require the **picturesLibrary** capability, but your location may require a different capability or no capability at all. To learn more, see [File access permissions](file-access-permissions.md).\n\n## Enumerate files and folders in a location\n\n> **Note**  Remember to declare the **picturesLibrary** capability.\n\nIn this example we first use the [**StorageFolder.GetFilesAsync**](https://msdn.microsoft.com/library/windows/apps/br227276) method to get all the files in the root folder of the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) (not in subfolders) and list the name of each file. Next, we use the [**GetFoldersAsync**](https://msdn.microsoft.com/library/windows/apps/br227280) method to get all the subfolders in the **PicturesLibrary** and list the name of each subfolder.\n\n<!--BUGBUG: IAsyncOperation<IVectorView<StorageFolder^>^>^  causes build to flake out-->\n> [!div class=\"tabbedCodeSnippets\"] \n> ```cpp\n> //#include <ppltasks.h>\n> //#include <string>\n> //#include <memory>\n> using namespace Windows::Storage;\n> using namespace Platform::Collections;\n> using namespace concurrency;\n> using namespace std;\n> \n> // Be sure to specify the Pictures Folder capability in the appxmanifext file.\n> StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n> \n> // Use a shared_ptr so that the string stays in memory\n> // until the last task is complete.\n> auto outputString = make_shared<wstring>();\n> *outputString += L\"Files:\\n\";\n> \n> // Get a read-only vector of the file objects\n> // and pass it to the continuation. \n> create_task(picturesFolder->GetFilesAsync())        \n>     // outputString is captured by value, which creates a copy \n>     // of the shared_ptr and increments its reference count.\n>     .then ([outputString] (IVectorView\\<StorageFile^>^ files)\n> {        \n>     for ( unsigned int i = 0 ; i < files->Size; i++)\n>     {\n>         *outputString += files->GetAt(i)->Name->Data();\n>         *outputString += L\"\\n\";\n>     }\n> })\n>     // We need to explicitly state the return type \n>     // here: -> IAsyncOperation<...>\n>     .then([picturesFolder]() -> IAsyncOperation\\<IVectorView\\<StorageFolder^>^>^ \n> {\n>     return picturesFolder->GetFoldersAsync();\n> })\n>     // Capture \"this\" to access m_OutputTextBlock from within the lambda.\n>     .then([this, outputString](IVectorView\\<StorageFolder^>^ folders)\n> {        \n>     *outputString += L\"Folders:\\n\";\n> \n>     for ( unsigned int i = 0; i < folders->Size; i++)\n>     {\n>         *outputString += folders->GetAt(i)->Name->Data();\n>         *outputString += L\"\\n\";\n>     }\n> \n>     // Assume m_OutputTextBlock is a TextBlock defined in the XAML.\n>     m_OutputTextBlock->Text = ref new String((*outputString).c_str());\n> });\n> ```\n> ```cs\n> StorageFolder picturesFolder = KnownFolders.PicturesLibrary;\n> StringBuilder outputText = new StringBuilder();\n> \n> IReadOnlyList<StorageFile> fileList = \n>     await picturesFolder.GetFilesAsync();\n> \n> outputText.AppendLine(\"Files:\");\n> foreach (StorageFile file in fileList)\n> {\n>     outputText.Append(file.Name + \"\\n\");\n> }\n> \n> IReadOnlyList<StorageFolder> folderList = \n>     await picturesFolder.GetFoldersAsync();\n>            \n> outputText.AppendLine(\"Folders:\");\n> foreach (StorageFolder folder in folderList)\n> {\n>     outputText.Append(folder.DisplayName + \"\\n\");\n> }\n> ```\n> ```vb\n> Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\n> Dim outputText As New StringBuilder\n> \n> Dim fileList As IReadOnlyList(Of StorageFile) =\n>     Await picturesFolder.GetFilesAsync()\n> \n> outputText.AppendLine(\"Files:\")\n> For Each file As StorageFile In fileList\n> \n>     outputText.Append(file.Name & vbLf)\n> \n> Next file\n> \n> Dim folderList As IReadOnlyList(Of StorageFolder) =\n>     Await picturesFolder.GetFoldersAsync()\n> \n> outputText.AppendLine(\"Folders:\")\n> For Each folder As StorageFolder In folderList\n> \n>     outputText.Append(folder.DisplayName & vbLf)\n> \n> Next folder\n> ```\n\n\n> **Note**  In C# or Visual Basic, remember to put the **async** keyword in the method declaration of any method in which you use the **await** operator.\n \n\nAlternatively, you can use the [**GetItemsAsync**](https://msdn.microsoft.com/library/windows/apps/br227286) method to get all items (both files and subfolders) in a particular location. The following example uses the **GetItemsAsync** method to get all files and subfolders in the root folder of the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) (not in subfolders). Then the example lists the name of each file and subfolder. If the item is a subfolder, the example appends `\"folder\"` to the name.\n\n> [!div class=\"tabbedCodeSnippets\"] \n> ```cpp\n> // See previous example for comments, namespace and #include info.\n> StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n> auto outputString = make_shared<wstring>();\n> \n> create_task(picturesFolder->GetItemsAsync())        \n>     .then ([this, outputString] (IVectorView<IStorageItem^>^ items)\n> {        \n>     for ( unsigned int i = 0 ; i < items->Size; i++)\n>     {\n>         *outputString += items->GetAt(i)->Name->Data();\n>         if(items->GetAt(i)->IsOfType(StorageItemTypes::Folder))\n>         {\n>             *outputString += L\"  folder\\n\";\n>         }\n>         else\n>         {\n>             *outputString += L\"\\n\";\n>         }\n>         m_OutputTextBlock->Text = ref new String((*outputString).c_str());\n>     }\n> });\n> ```\n> ```cs\n> StorageFolder picturesFolder = KnownFolders.PicturesLibrary;\n> StringBuilder outputText = new StringBuilder();\n> \n> IReadOnlyList<IStorageItem> itemsList = \n>     await picturesFolder.GetItemsAsync();\n> \n> foreach (var item in itemsList)\n> {\n>     if (item is StorageFolder)\n>     {\n>         outputText.Append(item.Name + \" folder\\n\");\n> \n>     }\n>     else\n>     {\n>         outputText.Append(item.Name + \"\\n\");\n> \n>     }\n> }\n> ```\n> ```vb\n> Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\n> Dim outputText As New StringBuilder\n> \n> Dim itemsList As IReadOnlyList(Of IStorageItem) =\n>     Await picturesFolder.GetItemsAsync()\n> \n> For Each item In itemsList\n> \n>     If TypeOf item Is StorageFolder Then\n> \n>         outputText.Append(item.Name & \" folder\" & vbLf)\n> \n>     Else\n> \n>         outputText.Append(item.Name & vbLf)\n> \n>     End If\n> \n> Next item\n> ```\n\n## Query files in a location and enumerate matching files\n\nIn this example we query for all the files in the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) grouped by the month, and this time the example recurses into subfolders. First, we call [**StorageFolder.CreateFolderQuery**](https://msdn.microsoft.com/library/windows/apps/br227262) and pass the [**CommonFolderQuery.GroupByMonth**](https://msdn.microsoft.com/library/windows/apps/br207957) value to the method. That gives us a [**StorageFolderQueryResult**](https://msdn.microsoft.com/library/windows/apps/br208066) object.\n\nNext we call [**StorageFolderQueryResult.GetFoldersAsync**](https://msdn.microsoft.com/library/windows/apps/br208074) which returns [**StorageFolder**](https://msdn.microsoft.com/library/windows/apps/br227230) objects representing virtual folders. In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.\n\n> [!div class=\"tabbedCodeSnippets\"] \n> ```cpp\n> //#include <ppltasks.h>\n> //#include <string>\n> //#include <memory>\n> using namespace Windows::Storage;\n> using namespace Windows::Storage::Search;\n> using namespace concurrency;\n> using namespace Platform::Collections;\n> using namespace Windows::Foundation::Collections;\n> using namespace std;\n> \n> StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n> \n> StorageFolderQueryResult^ queryResult = \n>     picturesFolder->CreateFolderQuery(CommonFolderQuery::GroupByMonth);\n> \n> // Use shared_ptr so that outputString remains in memory\n> // until the task completes, which is after the function goes out of scope.\n> auto outputString = std::make_shared<wstring>();\n> \n> create_task( queryResult->GetFoldersAsync()).then([this, outputString] (IVectorView<StorageFolder^>^ view) \n> {        \n>     for ( unsigned int i = 0; i < view->Size; i++)\n>     {\n>         create_task(view->GetAt(i)->GetFilesAsync()).then([this, i, view, outputString](IVectorView<StorageFile^>^ files)\n>         {\n>             *outputString += view->GetAt(i)->Name->Data();\n>             *outputString += L\"(\";\n>             *outputString += to_wstring(files->Size);\n>             *outputString += L\")\\r\\n\";\n>             for (unsigned int j = 0; j < files->Size; j++)\n>             {\n>                 *outputString += L\"     \";\n>                 *outputString += files->GetAt(j)->Name->Data();\n>                 *outputString += L\"\\r\\n\";\n>             }\n>         }).then([this, outputString]()\n>         {\n>             m_OutputTextBlock->Text = ref new String((*outputString).c_str());\n>         });\n>     }    \n> });\n> ```\n> ```cs\n> StorageFolder picturesFolder = KnownFolders.PicturesLibrary;\n> \n> StorageFolderQueryResult queryResult = \n>     picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth);\n>         \n> IReadOnlyList<StorageFolder> folderList = \n>     await queryResult.GetFoldersAsync();\n> \n> StringBuilder outputText = new StringBuilder();\n> \n> foreach (StorageFolder folder in folderList)\n> {\n>     IReadOnlyList<StorageFile> fileList = await folder.GetFilesAsync();\n> \n>     // Print the month and number of files in this group.\n>     outputText.AppendLine(folder.Name + \" (\" + fileList.Count + \")\");\n> \n>     foreach (StorageFile file in fileList)\n>     {\n>         // Print the name of the file.\n>         outputText.AppendLine(\"   \" + file.Name);\n>     }\n> }\n> ```\n> ```vb\n> Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\n> Dim outputText As New StringBuilder\n> \n> Dim queryResult As StorageFolderQueryResult =\n>     picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth)\n> \n> Dim folderList As IReadOnlyList(Of StorageFolder) =\n>     Await queryResult.GetFoldersAsync()\n> \n> For Each folder As StorageFolder In folderList\n> \n>     Dim fileList As IReadOnlyList(Of StorageFile) =\n>         Await folder.GetFilesAsync()\n> \n>     ' Print the month and number of files in this group.\n>     outputText.AppendLine(folder.Name & \" (\" & fileList.Count & \")\")\n> \n>     For Each file As StorageFile In fileList\n> \n>         ' Print the name of the file.\n>         outputText.AppendLine(\"   \" & file.Name)\n> \n>     Next file\n> \n> Next folder\n> ```\n\nThe output of the example looks similar to the following.\n\n``` syntax\nJuly ‎2015 (2)\n   MyImage3.png\n   MyImage4.png\n‎December ‎2014 (2)\n   MyImage1.png\n   MyImage2.png\n```\n\n"
}