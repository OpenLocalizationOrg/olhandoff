<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-cn" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">1dcd35b41e215558005b1056c0384986ab86753b</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: DC235C16-8DAF-4078-9365-6612A10F3EC3</source>
          <target xml:space="preserve">ms.assetid: DC235C16-8DAF-4078-9365-6612A10F3EC3</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Create a Hello World app in C++ (Windows 10)</source>
          <target xml:space="preserve">title: Create a Hello World app in C++ (Windows 10)</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10.</source>
          <target xml:space="preserve">description: With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">These apps have a UI that's defined in Extensible Application Markup Language (XAML).</source>
          <target xml:space="preserve">These apps have a UI that's defined in Extensible Application Markup Language (XAML).</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">Create a "hello world" app in C++ (Windows 10)</source>
          <target xml:space="preserve">Create a "hello world" app in C++ (Windows 10)</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10.</source>
          <target xml:space="preserve">With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">These apps have a UI that's defined in Extensible Application Markup Language (XAML).</source>
          <target xml:space="preserve">These apps have a UI that's defined in Extensible Application Markup Language (XAML).</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn263168)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To develop an app that runs on Windows 8.1 and Windows Phone 8.1, use Microsoft Visual Studio 2013 Update 3 or later and follow the steps <pc dataRefEnd="id2" dataRefStart="id1" id="p1">here</pc>.</source>
          <target xml:space="preserve">To develop an app that runs on Windows 8.1 and Windows Phone 8.1, use Microsoft Visual Studio 2013 Update 3 or later and follow the steps <pc dataRefEnd="id2" dataRefStart="id1" id="p1">here</pc>.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">The most significant difference is that for Windows 8.1 and Windows Phone 8.1, you use a solution with three projects, one for the desktop (or tablet device), one for the phone, and one for shared code.</source>
          <target xml:space="preserve">The most significant difference is that for Windows 8.1 and Windows Phone 8.1, you use a solution with three projects, one for the desktop (or tablet device), one for the phone, and one for shared code.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">For Windows 10 development, all code shares the same project.</source>
          <target xml:space="preserve">For Windows 10 development, all code shares the same project.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">For tutorials in other programming languages, see:</source>
          <target xml:space="preserve">For tutorials in other programming languages, see:</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Create your first Windows Store app using JavaScript</source>
          <target xml:space="preserve">Create your first Windows Store app using JavaScript</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Create your first Windows Store app using C# or Visual Basic</source>
          <target xml:space="preserve">Create your first Windows Store app using C# or Visual Basic</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Before you start...</source>
          <target xml:space="preserve">Before you start...</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">To complete this tutorial, you must use Visual Studio 2015 Community or later, or one of the non-Community versions of Visual Studio 2015, on a computer that's running Windows 10 or Windows 8.1.</source>
          <target xml:space="preserve">To complete this tutorial, you must use Visual Studio 2015 Community or later, or one of the non-Community versions of Visual Studio 2015, on a computer that's running Windows 10 or Windows 8.1.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=532666)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To download, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get the tools</pc>.</source>
          <target xml:space="preserve">To download, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get the tools</pc>.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=533049)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Install the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SDK</pc> for Windows Universal Platform development.</source>
          <target xml:space="preserve">Install the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SDK</pc> for Windows Universal Platform development.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">You also must have a developer license.</source>
          <target xml:space="preserve">You also must have a developer license.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh974578)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For instructions, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get a developer license</pc>.</source>
          <target xml:space="preserve">For instructions, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get a developer license</pc>.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt185595)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We assume you have a basic understanding of standard C++, XAML, and the concepts in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML overview</pc>.</source>
          <target xml:space="preserve">We assume you have a basic understanding of standard C++, XAML, and the concepts in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML overview</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">We assume you're using the default window layout in Visual Studio.</source>
          <target xml:space="preserve">We assume you're using the default window layout in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To reset to the default layout, on the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Window</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reset Window Layout</pc>.</source>
          <target xml:space="preserve">To reset to the default layout, on the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Window</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reset Window Layout</pc>.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Note that there is a known issue with Visual Studio 2015 that can result in a NullReferenceException when loading the XAML designer.</source>
          <target xml:space="preserve">Note that there is a known issue with Visual Studio 2015 that can result in a NullReferenceException when loading the XAML designer.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">This issue blocks some of the steps of this tutorial, unless you apply the workaround.</source>
          <target xml:space="preserve">This issue blocks some of the steps of this tutorial, unless you apply the workaround.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=624036)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For details about this issue and the workaround, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this MSDN forum post</pc> .</source>
          <target xml:space="preserve">For details about this issue and the workaround, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this MSDN forum post</pc> .</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Comparing C++ desktop apps to Windows apps</source>
          <target xml:space="preserve">Comparing C++ desktop apps to Windows apps</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">If you're coming from a background in Windows desktop programming in C++, you'll probably find that some aspects of Windows Store app and Windows Phone app programming are familiar, but other aspects require some learning.</source>
          <target xml:space="preserve">If you're coming from a background in Windows desktop programming in C++, you'll probably find that some aspects of Windows Store app and Windows Phone app programming are familiar, but other aspects require some learning.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">What's the same?</source>
          <target xml:space="preserve">What's the same?</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">You can use the STL, the CRT (with some exceptions), and any other C++ library as long as the code does not attempt to call Windows functions that are not accessible from the Windows Runtime environment.</source>
          <target xml:space="preserve">You can use the STL, the CRT (with some exceptions), and any other C++ library as long as the code does not attempt to call Windows functions that are not accessible from the Windows Runtime environment.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">If you're accustomed to visual designers, you can still use the designer built into Microsoft Visual Studio, or you can use the more full-featured Blend for Visual Studio.</source>
          <target xml:space="preserve">If you're accustomed to visual designers, you can still use the designer built into Microsoft Visual Studio, or you can use the more full-featured Blend for Visual Studio.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">If you're accustomed to coding UI by hand, you can hand-code your XAML.</source>
          <target xml:space="preserve">If you're accustomed to coding UI by hand, you can hand-code your XAML.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">You're still creating apps that use Windows operating system types and your own custom types.</source>
          <target xml:space="preserve">You're still creating apps that use Windows operating system types and your own custom types.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">You're still using the Visual Studio debugger, profiler, and other development tools.</source>
          <target xml:space="preserve">You're still using the Visual Studio debugger, profiler, and other development tools.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">You're still creating apps that are compiled to native machine code by the Visual C++ compiler.</source>
          <target xml:space="preserve">You're still creating apps that are compiled to native machine code by the Visual C++ compiler.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">Windows Store apps in C++ don't execute in a managed runtime environment.</source>
          <target xml:space="preserve">Windows Store apps in C++ don't execute in a managed runtime environment.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">What's new?</source>
          <target xml:space="preserve">What's new?</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">The design principles for Windows Store apps and Universal Windows apps are very different from those for desktop apps.</source>
          <target xml:space="preserve">The design principles for Windows Store apps and Universal Windows apps are very different from those for desktop apps.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">Window borders, labels, dialog boxes, and so on, are de-emphasized.</source>
          <target xml:space="preserve">Window borders, labels, dialog boxes, and so on, are de-emphasized.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">Content is foremost.</source>
          <target xml:space="preserve">Content is foremost.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Great Universal Windows apps incorporate these principles from the very beginning of the planning stage.</source>
          <target xml:space="preserve">Great Universal Windows apps incorporate these principles from the very beginning of the planning stage.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">You're using XAML to define the entire UI.</source>
          <target xml:space="preserve">You're using XAML to define the entire UI.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">The separation between UI and core program logic is much clearer in a Windows Universal app than in an MFC or Win32 app.</source>
          <target xml:space="preserve">The separation between UI and core program logic is much clearer in a Windows Universal app than in an MFC or Win32 app.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Other people can work on the appearance of the UI in the XAML file while you're working on the behavior in the code file.</source>
          <target xml:space="preserve">Other people can work on the appearance of the UI in the XAML file while you're working on the behavior in the code file.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">You're primarily programming against a new, easy-to-navigate, object-oriented API, the Windows Runtime, although on Windows devices Win32 is still available for some functionality.</source>
          <target xml:space="preserve">You're primarily programming against a new, easy-to-navigate, object-oriented API, the Windows Runtime, although on Windows devices Win32 is still available for some functionality.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">You use C++/CX to consume and create Windows Runtime objects.</source>
          <target xml:space="preserve">You use C++/CX to consume and create Windows Runtime objects.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">C++/CX enables C++ exception handling, delegates, events, and automatic reference counting of dynamically created objects.</source>
          <target xml:space="preserve">C++/CX enables C++ exception handling, delegates, events, and automatic reference counting of dynamically created objects.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">When you use C++/CX, the details of the underlying COM and Windows architecture are hidden from your app code.</source>
          <target xml:space="preserve">When you use C++/CX, the details of the underlying COM and Windows architecture are hidden from your app code.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/hh699871.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">C++/CX Language Reference</pc>.</source>
          <target xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">C++/CX Language Reference</pc>.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Your app is compiled into a package that also contains metadata about the types that your app contains, the resources that it uses, and the capabilities that it requires (file access, internet access, camera access, and so forth).</source>
          <target xml:space="preserve">Your app is compiled into a package that also contains metadata about the types that your app contains, the resources that it uses, and the capabilities that it requires (file access, internet access, camera access, and so forth).</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">In the Windows Store and Windows Phone Store your app is verified as safe by a certification process and made discoverable to millions of potential customers.</source>
          <target xml:space="preserve">In the Windows Store and Windows Phone Store your app is verified as safe by a certification process and made discoverable to millions of potential customers.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">Hello World Store app in C++</source>
          <target xml:space="preserve">Hello World Store app in C++</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">Our first app is a "Hello World" that demonstrates some basic features of interactivity, layout, and styles.</source>
          <target xml:space="preserve">Our first app is a "Hello World" that demonstrates some basic features of interactivity, layout, and styles.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">We'll create an app from the Windows Universal app project template.</source>
          <target xml:space="preserve">We'll create an app from the Windows Universal app project template.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">If you've developed apps for Windows 8.1 and Windows Phone 8.1 before, you might remember that you had to have three projects in Visual Studio, one for the Windows app, one for the phone app, and another with shared code.</source>
          <target xml:space="preserve">If you've developed apps for Windows 8.1 and Windows Phone 8.1 before, you might remember that you had to have three projects in Visual Studio, one for the Windows app, one for the phone app, and another with shared code.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">The Windows 10 Universal Windows Platform (UWP) makes it possible to have just one project, which runs on all devices, including desktop and laptop computers running Windows 10, devices such as tablets, mobile phones, and so on.</source>
          <target xml:space="preserve">The Windows 10 Universal Windows Platform (UWP) makes it possible to have just one project, which runs on all devices, including desktop and laptop computers running Windows 10, devices such as tablets, mobile phones, and so on.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">We'll start with the basics:</source>
          <target xml:space="preserve">We'll start with the basics:</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">How to create a Universal Windows project in Visual Studio 2015 or later.</source>
          <target xml:space="preserve">How to create a Universal Windows project in Visual Studio 2015 or later.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">How to understand the projects and files that are created.</source>
          <target xml:space="preserve">How to understand the projects and files that are created.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">How to understand the extensions in Visual C++ component extensions (C++/CX), and when to use them.</source>
          <target xml:space="preserve">How to understand the extensions in Visual C++ component extensions (C++/CX), and when to use them.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">First, create a solution in Visual Studio</source>
          <target xml:space="preserve">First, create a solution in Visual Studio</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In Visual Studio, on the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Project</pc>.</source>
          <target xml:space="preserve">In Visual Studio, on the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Project</pc>.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, in the left pane, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Installed</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Visual C++</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows</pc> &gt; <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Universal</pc>.</source>
          <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, in the left pane, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Installed</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Visual C++</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows</pc> &gt; <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Universal</pc>.</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the center pane, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc>.</source>
          <target xml:space="preserve">In the center pane, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc>.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">Enter a name for the project.</source>
          <target xml:space="preserve">Enter a name for the project.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">We'll name it HelloWorld.</source>
          <target xml:space="preserve">We'll name it HelloWorld.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">C++ project templates in the New Project dialog box</source>
          <target xml:space="preserve">C++ project templates in the New Project dialog box</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
          <target xml:space="preserve">Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">If this is the first UWP project you've created, and you haven't enabled Developer Mode on your computer, the Enable Developer mode dialog box appears.</source>
          <target xml:space="preserve">If this is the first UWP project you've created, and you haven't enabled Developer Mode on your computer, the Enable Developer mode dialog box appears.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">Click on the link to bring up the Settings page that lets you set Developer Mode.</source>
          <target xml:space="preserve">Click on the link to bring up the Settings page that lets you set Developer Mode.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">Developer Mode allows your apps to be deployed and run locally.</source>
          <target xml:space="preserve">Developer Mode allows your apps to be deployed and run locally.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">Your project files are created.</source>
          <target xml:space="preserve">Your project files are created.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">Before we go on, let’s look at what's in the solution.</source>
          <target xml:space="preserve">Before we go on, let’s look at what's in the solution.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">Univeral app solution with nodes collapsed</source>
          <target xml:space="preserve">Univeral app solution with nodes collapsed</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">About the project files</source>
          <target xml:space="preserve">About the project files</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">Every .xaml file in a project folder has a corresponding .xaml.h file and .xaml.cpp file in the same folder and a .g file and a .g.hpp file in the Generated Files folder, which is on disk but not part of the project.</source>
          <target xml:space="preserve">Every .xaml file in a project folder has a corresponding .xaml.h file and .xaml.cpp file in the same folder and a .g file and a .g.hpp file in the Generated Files folder, which is on disk but not part of the project.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">You modify the XAML files to create UI elements and connect them to data sources (DataBinding).</source>
          <target xml:space="preserve">You modify the XAML files to create UI elements and connect them to data sources (DataBinding).</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">You modify the .h and .cpp files to add custom logic for event handlers.</source>
          <target xml:space="preserve">You modify the .h and .cpp files to add custom logic for event handlers.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">The auto-generated files represent the transformation of the XAML markup into C++.</source>
          <target xml:space="preserve">The auto-generated files represent the transformation of the XAML markup into C++.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">Don't modify these files, but you can study them to better understand how the code-behind works.</source>
          <target xml:space="preserve">Don't modify these files, but you can study them to better understand how the code-behind works.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Basically, the generated file contains a partial class definition for a XAML root element; this class is the same class that you modify in the \*.xaml.h and .cpp files.</source>
          <target xml:space="preserve">Basically, the generated file contains a partial class definition for a XAML root element; this class is the same class that you modify in the \*.xaml.h and .cpp files.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">The generated files declare the XAML UI child elements as class members so that you can reference them in the code you write.</source>
          <target xml:space="preserve">The generated files declare the XAML UI child elements as class members so that you can reference them in the code you write.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">At build time, the generated code and your code are merged into a complete class definition and then compiled.</source>
          <target xml:space="preserve">At build time, the generated code and your code are merged into a complete class definition and then compiled.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">Let's look first at the project files.</source>
          <target xml:space="preserve">Let's look first at the project files.</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">App.xaml, App.xaml.h, App.xaml.cpp:</pc> Represent the Application object, which is an app's entry point.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">App.xaml, App.xaml.h, App.xaml.cpp:</pc> Represent the Application object, which is an app's entry point.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">App.xaml contains no page-specific UI markup, but you can add UI styles and other elements that you want to be accessible from any page.</source>
          <target xml:space="preserve">App.xaml contains no page-specific UI markup, but you can add UI styles and other elements that you want to be accessible from any page.</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The code-behind files contain handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnLaunched</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnSuspending</pc> events.</source>
          <target xml:space="preserve">The code-behind files contain handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnLaunched</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnSuspending</pc> events.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">Typically, you add custom code here to initialize your app when it starts and perform cleanup when it's suspended or terminated.</source>
          <target xml:space="preserve">Typically, you add custom code here to initialize your app when it starts and perform cleanup when it's suspended or terminated.</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage.xaml, MainPage.xaml.h, MainPage.xaml.cpp:</pc>Contain the XAML markup and code-behind for the default "start" page in an app.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage.xaml, MainPage.xaml.h, MainPage.xaml.cpp:</pc>Contain the XAML markup and code-behind for the default "start" page in an app.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">It has no navigation support or built-in controls.</source>
          <target xml:space="preserve">It has no navigation support or built-in controls.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">pch.h, pch.cpp:</pc> A precompiled header file and the file that includes it in your project.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">pch.h, pch.cpp:</pc> A precompiled header file and the file that includes it in your project.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">In pch.h, you can include any headers that do not change often and are included in other files in the solution.</source>
          <target xml:space="preserve">In pch.h, you can include any headers that do not change often and are included in other files in the solution.</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest:</pc> An XML file that describes the device capabilities that your app requires, and the app version info and other metadata.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest:</pc> An XML file that describes the device capabilities that your app requires, and the app version info and other metadata.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To open this file in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Manifest Designer</pc>, just double-click it.</source>
          <target xml:space="preserve">To open this file in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Manifest Designer</pc>, just double-click it.</target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HelloWorld\_TemporaryKey.pfx:</pc>A key that enables deployment of the app on this machine, from Visual Studio.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HelloWorld\_TemporaryKey.pfx:</pc>A key that enables deployment of the app on this machine, from Visual Studio.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">A first look at the code</source>
          <target xml:space="preserve">A first look at the code</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">If you examine the code in App.xaml.h, App.xaml.cpp in the shared project, you'll notice that it's mostly C++ code that looks familiar.</source>
          <target xml:space="preserve">If you examine the code in App.xaml.h, App.xaml.cpp in the shared project, you'll notice that it's mostly C++ code that looks familiar.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">However, some syntax elements might not be as familiar if you are new to Windows Runtime apps, or you've worked with C++/CLI.</source>
          <target xml:space="preserve">However, some syntax elements might not be as familiar if you are new to Windows Runtime apps, or you've worked with C++/CLI.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">Here are the most common non-standard syntax elements you'll see in C++/CX:</source>
          <target xml:space="preserve">Here are the most common non-standard syntax elements you'll see in C++/CX:</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">Ref classes</source>
          <target xml:space="preserve">Ref classes</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Almost all Windows Runtime classes, which includes all the types in the Windows API--XAML controls, the pages in your app, the App class itself, all device and network objects, all container types--are declared as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ref class</pc>.</source>
          <target xml:space="preserve">Almost all Windows Runtime classes, which includes all the types in the Windows API--XAML controls, the pages in your app, the App class itself, all device and network objects, all container types--are declared as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ref class</pc>.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(A few Windows types are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">value class</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">value struct</pc>).</source>
          <target xml:space="preserve">(A few Windows types are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">value class</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">value struct</pc>).</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">A ref class is consumable from any language.</source>
          <target xml:space="preserve">A ref class is consumable from any language.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">In C++, the lifetime of these types is governed by automatic reference counting (not garbage collection) so that you never explicitly delete these objects.</source>
          <target xml:space="preserve">In C++, the lifetime of these types is governed by automatic reference counting (not garbage collection) so that you never explicitly delete these objects.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">You can create your own ref classes as well.</source>
          <target xml:space="preserve">You can create your own ref classes as well.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">All Windows Runtime types must be declared within a namespace and unlike in ISO C++ the types themselves have an accessibility modifier.</source>
          <target xml:space="preserve">All Windows Runtime types must be declared within a namespace and unlike in ISO C++ the types themselves have an accessibility modifier.</target>
        </segment>
      </unit>
      <unit id="206">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public</pc> modifier makes the class visible to Windows Runtime components outside the namespace.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public</pc> modifier makes the class visible to Windows Runtime components outside the namespace.</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">sealed</pc> keyword means the class cannot serve as a base class.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">sealed</pc> keyword means the class cannot serve as a base class.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">Almost all ref classes are sealed; class inheritance is not broadly used because Javascript does not understand it.</source>
          <target xml:space="preserve">Almost all ref classes are sealed; class inheritance is not broadly used because Javascript does not understand it.</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ref new</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">^ (hats)</pc></source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ref new</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">^ (hats)</pc></target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">You declare a variable of a ref class by using the ^ (hat) operator, and you instantiate the object with the ref new keyword.</source>
          <target xml:space="preserve">You declare a variable of a ref class by using the ^ (hat) operator, and you instantiate the object with the ref new keyword.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source xml:space="preserve">Thereafter you access the object's instance methods with the -&gt; operator just like a C++ pointer.</source>
          <target xml:space="preserve">Thereafter you access the object's instance methods with the -&gt; operator just like a C++ pointer.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">Static methods are accessed with the :: operator just as in ISO C++.</source>
          <target xml:space="preserve">Static methods are accessed with the :: operator just as in ISO C++.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source xml:space="preserve">In the following code, we use the fully qualified name to instantiate an object, and use the -&gt; operator to call an instance method.</source>
          <target xml:space="preserve">In the following code, we use the fully qualified name to instantiate an object, and use the -&gt; operator to call an instance method.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">Properties</source>
          <target xml:space="preserve">Properties</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source xml:space="preserve">A ref class can have properties, which, just as in managed languages, are special member functions that appear as fields to consuming code.</source>
          <target xml:space="preserve">A ref class can have properties, which, just as in managed languages, are special member functions that appear as fields to consuming code.</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source xml:space="preserve">Delegates</source>
          <target xml:space="preserve">Delegates</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source xml:space="preserve">Just as in managed languages, a delegate is a reference type that encapsulates a function with a specific signature.</source>
          <target xml:space="preserve">Just as in managed languages, a delegate is a reference type that encapsulates a function with a specific signature.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source xml:space="preserve">They are most often used with events and event handlers</source>
          <target xml:space="preserve">They are most often used with events and event handlers</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source xml:space="preserve">Adding content to the app</source>
          <target xml:space="preserve">Adding content to the app</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source xml:space="preserve">Let's add some content to the app.</source>
          <target xml:space="preserve">Let's add some content to the app.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source xml:space="preserve">Step 1: Modify your start page</source>
          <target xml:space="preserve">Step 1: Modify your start page</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, open MainPage.xaml.</source>
          <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, open MainPage.xaml.</target>
        </segment>
      </unit>
      <unit id="223">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Create controls for the UI by adding the following XAML to the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc>, immediately before its closing tag.</source>
          <target xml:space="preserve">Create controls for the UI by adding the following XAML to the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc>, immediately before its closing tag.</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209635)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">**</data>
          <data id="id18">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It contains a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StackPanel</pc></pc> that has a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextBlock</pc></pc> that asks the user's name, a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TextBox</pc></pc> element that accepts the user's name, a <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Button</pc></pc>, and another <pc dataRefEnd="id18" dataRefStart="id17" id="p9">TextBlock</pc> element.</source>
          <target xml:space="preserve">It contains a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StackPanel</pc></pc> that has a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextBlock</pc></pc> that asks the user's name, a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TextBox</pc></pc> element that accepts the user's name, a <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Button</pc></pc>, and another <pc dataRefEnd="id18" dataRefStart="id17" id="p9">TextBlock</pc> element.</target>
        </segment>
      </unit>
      <unit id="225">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn263172)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We talk more about XAML layout in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation, layout, and views</pc> article.</source>
          <target xml:space="preserve">We talk more about XAML layout in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation, layout, and views</pc> article.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source xml:space="preserve">At this point, you have created a very basic Universal Windows app.</source>
          <target xml:space="preserve">At this point, you have created a very basic Universal Windows app.</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source xml:space="preserve">To see what the UWP app looks like, press F5 to build, deploy, and run the app in debugging mode.</source>
          <target xml:space="preserve">To see what the UWP app looks like, press F5 to build, deploy, and run the app in debugging mode.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source xml:space="preserve">The default splash screen appears first.</source>
          <target xml:space="preserve">The default splash screen appears first.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source xml:space="preserve">It has an image—Assets\\SplashScreen.scale-100.png—and a background color that are specified in the app's manifest file.</source>
          <target xml:space="preserve">It has an image—Assets\\SplashScreen.scale-100.png—and a background color that are specified in the app's manifest file.</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh465332)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To learn how to customize the splash screen, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adding a splash screen</pc>.</source>
          <target xml:space="preserve">To learn how to customize the splash screen, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adding a splash screen</pc>.</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source xml:space="preserve">When the splash screen disappears, your app appears.</source>
          <target xml:space="preserve">When the splash screen disappears, your app appears.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source xml:space="preserve">It displays the main page of the App.</source>
          <target xml:space="preserve">It displays the main page of the App.</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source xml:space="preserve">Press the Windows key or click the Start button to go to the Start menu, and notice that deploying the app adds it to the Start menu's list of installed apps.</source>
          <target xml:space="preserve">Press the Windows key or click the Start button to go to the Start menu, and notice that deploying the app adds it to the Start menu's list of installed apps.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source xml:space="preserve">It also appears when you click on the the New link next to the All Apps button.</source>
          <target xml:space="preserve">It also appears when you click on the the New link next to the All Apps button.</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source xml:space="preserve">To run the app again, just tap or click its tile, press F5 or Ctrl+F5 in Visual Studio as usual.</source>
          <target xml:space="preserve">To run the app again, just tap or click its tile, press F5 or Ctrl+F5 in Visual Studio as usual.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source xml:space="preserve">Windows Store app screen, with controls</source>
          <target xml:space="preserve">Windows Store app screen, with controls</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source xml:space="preserve">It doesn't do much—yet—but congratulations, you've built your first Universal Windows Platform app!</source>
          <target xml:space="preserve">It doesn't do much—yet—but congratulations, you've built your first Universal Windows Platform app!</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source xml:space="preserve">To stop debugging and close the app, return to Visual Studio and press Shift+F5.</source>
          <target xml:space="preserve">To stop debugging and close the app, return to Visual Studio and press Shift+F5.</target>
        </segment>
      </unit>
      <unit id="239">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=619619)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run a Store app from Visual Studio</pc>.</source>
          <target xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run a Store app from Visual Studio</pc>.</target>
        </segment>
      </unit>
      <unit id="240">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the app, you can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc></pc>, but clicking the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc> doesn't do anything.</source>
          <target xml:space="preserve">In the app, you can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc></pc>, but clicking the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc> doesn't do anything.</target>
        </segment>
      </unit>
      <unit id="241">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In later steps, you create an event handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event, which displays a personalized greeting.</source>
          <target xml:space="preserve">In later steps, you create an event handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event, which displays a personalized greeting.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source xml:space="preserve">Start the app on a mobile device emulator</source>
          <target xml:space="preserve">Start the app on a mobile device emulator</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source xml:space="preserve">Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</source>
          <target xml:space="preserve">Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source xml:space="preserve">This section requires a Windows Phone running Windows 10, or access to a Windows Phone emulator and it requires that Visual Studio be running on a physical computer (not a virtual machine) with HyperV supported and enabled.</source>
          <target xml:space="preserve">This section requires a Windows Phone running Windows 10, or access to a Windows Phone emulator and it requires that Visual Studio be running on a physical computer (not a virtual machine) with HyperV supported and enabled.</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source xml:space="preserve">In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</source>
          <target xml:space="preserve">In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source xml:space="preserve">You can choose among emulators for devices with different memory and display configurations.</source>
          <target xml:space="preserve">You can choose among emulators for devices with different memory and display configurations.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source xml:space="preserve">Device</source>
          <target xml:space="preserve">Device</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source xml:space="preserve">Emulator 10.0.0.0 WVGA 4 inch 512MB</source>
          <target xml:space="preserve">Emulator 10.0.0.0 WVGA 4 inch 512MB</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source xml:space="preserve">Various emulators in other configurations</source>
          <target xml:space="preserve">Various emulators in other configurations</target>
        </segment>
      </unit>
      <unit id="250">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Emulator 10.0.0.0 WVGA 4 inch 512MB</pc> option.</source>
          <target xml:space="preserve">It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Emulator 10.0.0.0 WVGA 4 inch 512MB</pc> option.</target>
        </segment>
      </unit>
      <unit id="251">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?LinkId=394233)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  For more info about using the phone emulator, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run Windows Phone apps in the emulator</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  For more info about using the phone emulator, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run Windows Phone apps in the emulator</pc>.</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source xml:space="preserve">To debug your app on a physical device, you must have a device that’s registered for development.</source>
          <target xml:space="preserve">To debug your app on a physical device, you must have a device that’s registered for development.</target>
        </segment>
      </unit>
      <unit id="253">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Dn614128)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Register your Windows Phone</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Register your Windows Phone</pc>.</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source xml:space="preserve">To start debugging on a mobile device emulator</source>
          <target xml:space="preserve">To start debugging on a mobile device emulator</target>
        </segment>
      </unit>
      <unit id="255">
        <originalData>
          <data id="id1">![</data>
          <data id="id2">](images/startdebug-full.png)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Emulator 10.0.0.0 WVGA 4 inch 512MB</pc>.</source>
          <target xml:space="preserve">In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Emulator 10.0.0.0 WVGA 4 inch 512MB</pc>.</target>
        </segment>
      </unit>
      <unit id="256">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">![</data>
          <data id="id4">](images/startdebug-sm.png)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</source>
          <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source xml:space="preserve">–or–</source>
          <target xml:space="preserve">–or–</target>
        </segment>
      </unit>
      <unit id="258">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</source>
          <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source xml:space="preserve">–or–</source>
          <target xml:space="preserve">–or–</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source xml:space="preserve">Press F5.</source>
          <target xml:space="preserve">Press F5.</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source xml:space="preserve">On the mobile device emulator, the app looks like this.</source>
          <target xml:space="preserve">On the mobile device emulator, the app looks like this.</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source xml:space="preserve">Initial app screen on mobile device</source>
          <target xml:space="preserve">Initial app screen on mobile device</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source xml:space="preserve">Visual Studio starts the selected emulator and then deploys and starts your app.</source>
          <target xml:space="preserve">Visual Studio starts the selected emulator and then deploys and starts your app.</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source xml:space="preserve">The first thing you'll notice is that the 120-pixel left margin that looks good on the local machine pushes your content off the smaller screen of a mobile device.</source>
          <target xml:space="preserve">The first thing you'll notice is that the 120-pixel left margin that looks good on the local machine pushes your content off the smaller screen of a mobile device.</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source xml:space="preserve">Later in this tutorial, you'll learn how to adapt the UI to different screen sizes so your app always looks good.</source>
          <target xml:space="preserve">Later in this tutorial, you'll learn how to adapt the UI to different screen sizes so your app always looks good.</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source xml:space="preserve">Step 2: Create an event handler</source>
          <target xml:space="preserve">Step 2: Create an event handler</target>
        </segment>
      </unit>
      <unit id="267">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209635)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In MainPage.xaml, in either XAML or design view, select the "Say Hello" <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StackPanel</pc></pc> you added earlier.</source>
          <target xml:space="preserve">In MainPage.xaml, in either XAML or design view, select the "Say Hello" <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StackPanel</pc></pc> you added earlier.</target>
        </segment>
      </unit>
      <unit id="268">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">![</data>
          <data id="id4">](IMAGES/EVENTSBUTTON.png)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties Window</pc> by pressing Alt+Enter, and then choose the Events button (<ph dataRef="id3" id="ph1" />Events button<ph dataRef="id4" id="ph2" />).</source>
          <target xml:space="preserve">Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties Window</pc> by pressing Alt+Enter, and then choose the Events button (<ph dataRef="id3" id="ph1" />Events button<ph dataRef="id4" id="ph2" />).</target>
        </segment>
      </unit>
      <unit id="269">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Find the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event.</source>
          <target xml:space="preserve">Find the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event.</target>
        </segment>
      </unit>
      <unit id="270">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In its text box, type the name of the function that handles the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event.</source>
          <target xml:space="preserve">In its text box, type the name of the function that handles the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event.</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source xml:space="preserve">For this example, type "Button\_Click".</source>
          <target xml:space="preserve">For this example, type "Button\_Click".</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source xml:space="preserve">Properties window, Events view</source>
          <target xml:space="preserve">Properties window, Events view</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source xml:space="preserve">Press Enter.</source>
          <target xml:space="preserve">Press Enter.</target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source xml:space="preserve">The event handler method is created in MainPage.xaml.cpp and opened so that you can add the code that's executed when the event occurs.</source>
          <target xml:space="preserve">The event handler method is created in MainPage.xaml.cpp and opened so that you can add the code that's executed when the event occurs.</target>
        </segment>
      </unit>
      <unit id="275">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">At the same time, in MainPage.xaml, the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> is updated to declare the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Click</pc></pc> event handler, like this:</source>
          <target xml:space="preserve">At the same time, in MainPage.xaml, the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> is updated to declare the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Click</pc></pc> event handler, like this:</target>
        </segment>
      </unit>
      <unit id="276">
        <segment state="initial">
          <source xml:space="preserve">You could also have simply added this to the xaml code manually, which can be helpful if the designer doesn't load.</source>
          <target xml:space="preserve">You could also have simply added this to the xaml code manually, which can be helpful if the designer doesn't load.</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source xml:space="preserve">If you enter this manually, type "Click" and then let IntelliSense pop up the option to add a new event handler.</source>
          <target xml:space="preserve">If you enter this manually, type "Click" and then let IntelliSense pop up the option to add a new event handler.</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source xml:space="preserve">That way, Visual Studio creates the necessary method declaration and stub.</source>
          <target xml:space="preserve">That way, Visual Studio creates the necessary method declaration and stub.</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source xml:space="preserve">The designer fails to load if an unhandled exception occurs during rendering.</source>
          <target xml:space="preserve">The designer fails to load if an unhandled exception occurs during rendering.</target>
        </segment>
      </unit>
      <unit id="280">
        <segment state="initial">
          <source xml:space="preserve">Rendering in the designer involves running a design-time version of the page.</source>
          <target xml:space="preserve">Rendering in the designer involves running a design-time version of the page.</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source xml:space="preserve">It can be helpful to disable running user code.</source>
          <target xml:space="preserve">It can be helpful to disable running user code.</target>
        </segment>
      </unit>
      <unit id="282">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can do this by changing the setting in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tools, Options</pc> dialog box.</source>
          <target xml:space="preserve">You can do this by changing the setting in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tools, Options</pc> dialog box.</target>
        </segment>
      </unit>
      <unit id="283">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML Designer</pc>, uncheck <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run project code in XAML designer (if supported)</pc>.</source>
          <target xml:space="preserve">Under <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML Designer</pc>, uncheck <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run project code in XAML designer (if supported)</pc>.</target>
        </segment>
      </unit>
      <unit id="284">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In MainPage.xaml.cpp, add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button\_Click</pc> event handler that you just created.</source>
          <target xml:space="preserve">In MainPage.xaml.cpp, add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button\_Click</pc> event handler that you just created.</target>
        </segment>
      </unit>
      <unit id="285">
        <originalData>
          <data id="id1">`nameInput`</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This code retrieves the user's name from the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBox</pc></pc> control and uses it to create a greeting.</source>
          <target xml:space="preserve">This code retrieves the user's name from the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBox</pc></pc> control and uses it to create a greeting.</target>
        </segment>
      </unit>
      <unit id="286">
        <originalData>
          <data id="id1">`greetingOutput`</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBlock</pc></pc> displays the result.</source>
          <target xml:space="preserve">The <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBlock</pc></pc> displays the result.</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source xml:space="preserve">Set the project as the startup, and then press F5 to build and run the app.</source>
          <target xml:space="preserve">Set the project as the startup, and then press F5 to build and run the app.</target>
        </segment>
      </unit>
      <unit id="288">
        <segment state="initial">
          <source xml:space="preserve">When you type a name in the text box and click the button, the app displays a personalized greeting.</source>
          <target xml:space="preserve">When you type a name in the text box and click the button, the app displays a personalized greeting.</target>
        </segment>
      </unit>
      <unit id="289">
        <segment state="initial">
          <source xml:space="preserve">App screen with message display</source>
          <target xml:space="preserve">App screen with message display</target>
        </segment>
      </unit>
      <unit id="290">
        <segment state="initial">
          <source xml:space="preserve">Step 3: Style the start page</source>
          <target xml:space="preserve">Step 3: Style the start page</target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source xml:space="preserve">Choosing a theme</source>
          <target xml:space="preserve">Choosing a theme</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source xml:space="preserve">It's easy to customize the look and feel of your app.</source>
          <target xml:space="preserve">It's easy to customize the look and feel of your app.</target>
        </segment>
      </unit>
      <unit id="293">
        <segment state="initial">
          <source xml:space="preserve">By default, your app uses resources that have a light style.</source>
          <target xml:space="preserve">By default, your app uses resources that have a light style.</target>
        </segment>
      </unit>
      <unit id="294">
        <segment state="initial">
          <source xml:space="preserve">The system resources also include a light theme.</source>
          <target xml:space="preserve">The system resources also include a light theme.</target>
        </segment>
      </unit>
      <unit id="295">
        <segment state="initial">
          <source xml:space="preserve">Let's try it out and see what it looks like.</source>
          <target xml:space="preserve">Let's try it out and see what it looks like.</target>
        </segment>
      </unit>
      <unit id="296">
        <segment state="initial">
          <source xml:space="preserve">To switch to the dark theme</source>
          <target xml:space="preserve">To switch to the dark theme</target>
        </segment>
      </unit>
      <unit id="297">
        <segment state="initial">
          <source xml:space="preserve">Open App.xaml.</source>
          <target xml:space="preserve">Open App.xaml.</target>
        </segment>
      </unit>
      <unit id="298">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242324)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.application.requestedtheme)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the opening <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Application</pc></pc> tag, edit the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RequestedTheme</pc></pc> property and set its value to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Dark</pc>:</source>
          <target xml:space="preserve">In the opening <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Application</pc></pc> tag, edit the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RequestedTheme</pc></pc> property and set its value to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Dark</pc>:</target>
        </segment>
      </unit>
      <unit id="299">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242324)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Here's the full <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Application</pc></pc> tag with the dark theme :</source>
          <target xml:space="preserve">Here's the full <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Application</pc></pc> tag with the dark theme :</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source xml:space="preserve">Press F5 to build and run it.</source>
          <target xml:space="preserve">Press F5 to build and run it.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source xml:space="preserve">Notice that it uses the dark theme.</source>
          <target xml:space="preserve">Notice that it uses the dark theme.</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source xml:space="preserve">App screen with dark theme</source>
          <target xml:space="preserve">App screen with dark theme</target>
        </segment>
      </unit>
      <unit id="303">
        <segment state="initial">
          <source xml:space="preserve">Which theme should you use?</source>
          <target xml:space="preserve">Which theme should you use?</target>
        </segment>
      </unit>
      <unit id="304">
        <segment state="initial">
          <source xml:space="preserve">Whichever one you want.</source>
          <target xml:space="preserve">Whichever one you want.</target>
        </segment>
      </unit>
      <unit id="305">
        <segment state="initial">
          <source xml:space="preserve">Here's our take: for apps that mostly display images or video, we recommend the dark theme; for apps that contain a lot of text, we recommend the light theme.</source>
          <target xml:space="preserve">Here's our take: for apps that mostly display images or video, we recommend the dark theme; for apps that contain a lot of text, we recommend the light theme.</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source xml:space="preserve">If you're using a custom color scheme, use the theme that goes best with your app's look and feel.</source>
          <target xml:space="preserve">If you're using a custom color scheme, use the theme that goes best with your app's look and feel.</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source xml:space="preserve">In the rest of this tutorial, we use the Light theme in screenshots.</source>
          <target xml:space="preserve">In the rest of this tutorial, we use the Light theme in screenshots.</target>
        </segment>
      </unit>
      <unit id="308">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The theme is applied when the app is started and can't be changed while the app is running.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The theme is applied when the app is started and can't be changed while the app is running.</target>
        </segment>
      </unit>
      <unit id="309">
        <segment state="initial">
          <source xml:space="preserve">Using system styles</source>
          <target xml:space="preserve">Using system styles</target>
        </segment>
      </unit>
      <unit id="310">
        <segment state="initial">
          <source xml:space="preserve">Right now, in the Windows app the text is very small and difficult to read.</source>
          <target xml:space="preserve">Right now, in the Windows app the text is very small and difficult to read.</target>
        </segment>
      </unit>
      <unit id="311">
        <segment state="initial">
          <source xml:space="preserve">Let's fix that by applying a system style.</source>
          <target xml:space="preserve">Let's fix that by applying a system style.</target>
        </segment>
      </unit>
      <unit id="312">
        <segment state="initial">
          <source xml:space="preserve">To change the style of an element</source>
          <target xml:space="preserve">To change the style of an element</target>
        </segment>
      </unit>
      <unit id="313">
        <segment state="initial">
          <source xml:space="preserve">In the Windows project, open MainPage.xaml.</source>
          <target xml:space="preserve">In the Windows project, open MainPage.xaml.</target>
        </segment>
      </unit>
      <unit id="314">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In either XAML or design view, select the "What's your name?"<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> that you added earlier.</source>
          <target xml:space="preserve">In either XAML or design view, select the "What's your name?"<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> that you added earlier.</target>
        </segment>
      </unit>
      <unit id="315">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">![</data>
          <data id="id6">](IMAGES/PROPERTIESBUTTON.png)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc> window (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">F4</pc>), choose the Properties button (<ph dataRef="id5" id="ph1" />Properties button<ph dataRef="id6" id="ph2" />) in the upper right.</source>
          <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc> window (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">F4</pc>), choose the Properties button (<ph dataRef="id5" id="ph1" />Properties button<ph dataRef="id6" id="ph2" />) in the upper right.</target>
        </segment>
      </unit>
      <unit id="316">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> group and set the font size to 18 px.</source>
          <target xml:space="preserve">Expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> group and set the font size to 18 px.</target>
        </segment>
      </unit>
      <unit id="317">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Miscellaneous</pc> group and find the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc> property.</source>
          <target xml:space="preserve">Expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Miscellaneous</pc> group and find the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc> property.</target>
        </segment>
      </unit>
      <unit id="318">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Click the property marker (the green box to the right of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Style</pc> property), and then, on the menu, choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">System Resource</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">BaseTextBlockStyle</pc>.</source>
          <target xml:space="preserve">Click the property marker (the green box to the right of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Style</pc> property), and then, on the menu, choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">System Resource</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">BaseTextBlockStyle</pc>.</target>
        </segment>
      </unit>
      <unit id="319">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR208794)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">BaseTextBlockStyle</pc> is a resource that's defined in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary</pc></pc> in</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">BaseTextBlockStyle</pc> is a resource that's defined in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary</pc></pc> in</target>
        </segment>
      </unit>
      <unit id="320">
        <segment state="initial">
          <source xml:space="preserve">\\Program Files\\Windows Kits\\10\\Include\\winrt\\xaml\\design\\generic.xaml.</source>
          <target xml:space="preserve">\\Program Files\\Windows Kits\\10\\Include\\winrt\\xaml\\design\\generic.xaml.</target>
        </segment>
      </unit>
      <unit id="321">
        <segment state="initial">
          <source xml:space="preserve">Properties window, Properties view</source>
          <target xml:space="preserve">Properties window, Properties view</target>
        </segment>
      </unit>
      <unit id="322">
        <segment state="initial">
          <source xml:space="preserve">On the XAML design surface, the appearance of the text changes.</source>
          <target xml:space="preserve">On the XAML design surface, the appearance of the text changes.</target>
        </segment>
      </unit>
      <unit id="323">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the XAML editor, the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> is updated:</source>
          <target xml:space="preserve">In the XAML editor, the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> is updated:</target>
        </segment>
      </unit>
      <unit id="324">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`greetingOutput`</data>
          <data id="id4">[</data>
          <data id="id5">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Repeat the process to set the font size and assign the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BaseTextBlockStyle</pc> to the <ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">TextBlock</pc></pc> element.</source>
          <target xml:space="preserve">Repeat the process to set the font size and assign the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BaseTextBlockStyle</pc> to the <ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">TextBlock</pc></pc> element.</target>
        </segment>
      </unit>
      <unit id="325">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  Although there's no text in this <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlock</pc></pc>, when you move the pointer over the XAML design surface, a blue outline shows where it is so that you can select it.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  Although there's no text in this <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlock</pc></pc>, when you move the pointer over the XAML design surface, a blue outline shows where it is so that you can select it.</target>
        </segment>
      </unit>
      <unit id="326">
        <segment state="initial">
          <source xml:space="preserve">Your XAML now looks like this:</source>
          <target xml:space="preserve">Your XAML now looks like this:</target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source xml:space="preserve">Press F5 to build and run the app.</source>
          <target xml:space="preserve">Press F5 to build and run the app.</target>
        </segment>
      </unit>
      <unit id="328">
        <segment state="initial">
          <source xml:space="preserve">It now looks like this:</source>
          <target xml:space="preserve">It now looks like this:</target>
        </segment>
      </unit>
      <unit id="329">
        <segment state="initial">
          <source xml:space="preserve">App screen with larger text</source>
          <target xml:space="preserve">App screen with larger text</target>
        </segment>
      </unit>
      <unit id="330">
        <segment state="initial">
          <source xml:space="preserve">Step 4: Adapt the UI to different window sizes</source>
          <target xml:space="preserve">Step 4: Adapt the UI to different window sizes</target>
        </segment>
      </unit>
      <unit id="331">
        <segment state="initial">
          <source xml:space="preserve">Now we'll make the UI adapt to different screen sizes so it looks good on mobile devices.</source>
          <target xml:space="preserve">Now we'll make the UI adapt to different screen sizes so it looks good on mobile devices.</target>
        </segment>
      </unit>
      <unit id="332">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209021)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To do this, you add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> and set properties that are applied for different visual states.</source>
          <target xml:space="preserve">To do this, you add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> and set properties that are applied for different visual states.</target>
        </segment>
      </unit>
      <unit id="333">
        <segment state="initial">
          <source xml:space="preserve">To adjust the UI layout</source>
          <target xml:space="preserve">To adjust the UI layout</target>
        </segment>
      </unit>
      <unit id="334">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the XAML editor, add this block of XAML after the opening tag of the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> element.</source>
          <target xml:space="preserve">In the XAML editor, add this block of XAML after the opening tag of the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> element.</target>
        </segment>
      </unit>
      <unit id="335">
        <segment state="initial">
          <source xml:space="preserve">Debug the app on the local machine.</source>
          <target xml:space="preserve">Debug the app on the local machine.</target>
        </segment>
      </unit>
      <unit id="336">
        <segment state="initial">
          <source xml:space="preserve">Notice that the UI looks the same as before unless the window gets narrower than 641 device-independent pixels (DIPs).</source>
          <target xml:space="preserve">Notice that the UI looks the same as before unless the window gets narrower than 641 device-independent pixels (DIPs).</target>
        </segment>
      </unit>
      <unit id="337">
        <segment state="initial">
          <source xml:space="preserve">Debug the app on the mobile device emulator.</source>
          <target xml:space="preserve">Debug the app on the mobile device emulator.</target>
        </segment>
      </unit>
      <unit id="338">
        <originalData>
          <data id="id1">`narrowState`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Notice that the UI uses the properties you defined in the <ph dataRef="id1" id="ph1" /> and appears correctly on the small screen.</source>
          <target xml:space="preserve">Notice that the UI uses the properties you defined in the <ph dataRef="id1" id="ph1" /> and appears correctly on the small screen.</target>
        </segment>
      </unit>
      <unit id="339">
        <segment state="initial">
          <source xml:space="preserve">Mobile app screen with styled text</source>
          <target xml:space="preserve">Mobile app screen with styled text</target>
        </segment>
      </unit>
      <unit id="340">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209021)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you've used a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> in previous versions of XAML, you might notice that the XAML here uses a simplified syntax.</source>
          <target xml:space="preserve">If you've used a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> in previous versions of XAML, you might notice that the XAML here uses a simplified syntax.</target>
        </segment>
      </unit>
      <unit id="341">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209007)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">`wideState`</data>
          <data id="id6">[</data>
          <data id="id7">](https://msdn.microsoft.com/library/windows/apps/Dn890382)</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">[</data>
          <data id="id11">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth)</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc> named <ph dataRef="id5" id="ph1" /> has an <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">AdaptiveTrigger</pc></pc> with its <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinWindowWidth</pc></pc> property set to 641.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc> named <ph dataRef="id5" id="ph1" /> has an <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">AdaptiveTrigger</pc></pc> with its <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinWindowWidth</pc></pc> property set to 641.</target>
        </segment>
      </unit>
      <unit id="342">
        <segment state="initial">
          <source xml:space="preserve">This means that the state is to be applied only when the window width is not less than the minimum of 641 DIPs.</source>
          <target xml:space="preserve">This means that the state is to be applied only when the window width is not less than the minimum of 641 DIPs.</target>
        </segment>
      </unit>
      <unit id="343">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208817)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You don't define any <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc></pc> objects for this state, so it uses the layout properties you defined in the XAML for the page content.</source>
          <target xml:space="preserve">You don't define any <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc></pc> objects for this state, so it uses the layout properties you defined in the XAML for the page content.</target>
        </segment>
      </unit>
      <unit id="344">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209007)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">`narrowState`</data>
          <data id="id6">[</data>
          <data id="id7">](https://msdn.microsoft.com/library/windows/apps/Dn890382)</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">[</data>
          <data id="id11">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth)</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The second <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc>, <ph dataRef="id5" id="ph1" />, has an <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">AdaptiveTrigger</pc></pc> with its <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinWindowWidth</pc></pc> property set to 0.</source>
          <target xml:space="preserve">The second <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc>, <ph dataRef="id5" id="ph1" />, has an <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">AdaptiveTrigger</pc></pc> with its <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinWindowWidth</pc></pc> property set to 0.</target>
        </segment>
      </unit>
      <unit id="345">
        <segment state="initial">
          <source xml:space="preserve">This state is applied when the window width is greater than 0, but less than 641 DIPs.</source>
          <target xml:space="preserve">This state is applied when the window width is greater than 0, but less than 641 DIPs.</target>
        </segment>
      </unit>
      <unit id="346">
        <originalData>
          <data id="id1">`wideState`</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/library/windows/apps/BR208817)</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(At 641 DIPs, the <ph dataRef="id1" id="ph1" /> is applied.) In this state, you do define some <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Setter</pc></pc> objects to change the layout properties of controls in the UI:</source>
          <target xml:space="preserve">(At 641 DIPs, the <ph dataRef="id1" id="ph1" /> is applied.) In this state, you do define some <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Setter</pc></pc> objects to change the layout properties of controls in the UI:</target>
        </segment>
      </unit>
      <unit id="347">
        <originalData>
          <data id="id1">`contentPanel`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You reduce the left margin of the <ph dataRef="id1" id="ph1" /> element from 120 to 20.</source>
          <target xml:space="preserve">You reduce the left margin of the <ph dataRef="id1" id="ph1" /> element from 120 to 20.</target>
        </segment>
      </unit>
      <unit id="348">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.stackpanel.orientation)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">`inputPanel`</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Orientation</pc></pc> of the <ph dataRef="id5" id="ph1" /> element from <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Horizontal</pc> to <pc dataRefEnd="id9" dataRefStart="id8" id="p4">Vertical</pc>.</source>
          <target xml:space="preserve">You change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Orientation</pc></pc> of the <ph dataRef="id5" id="ph1" /> element from <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Horizontal</pc> to <pc dataRefEnd="id9" dataRefStart="id8" id="p4">Vertical</pc>.</target>
        </segment>
      </unit>
      <unit id="349">
        <originalData>
          <data id="id1">`inputButton`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You add a top margin of 4 DIPs to the <ph dataRef="id1" id="ph1" /> element.</source>
          <target xml:space="preserve">You add a top margin of 4 DIPs to the <ph dataRef="id1" id="ph1" /> element.</target>
        </segment>
      </unit>
      <unit id="350">
        <segment state="initial">
          <source xml:space="preserve">Summary</source>
          <target xml:space="preserve">Summary</target>
        </segment>
      </unit>
      <unit id="351">
        <segment state="initial">
          <source xml:space="preserve">Congratulations, you've completed the first tutorial!</source>
          <target xml:space="preserve">Congratulations, you've completed the first tutorial!</target>
        </segment>
      </unit>
      <unit id="352">
        <segment state="initial">
          <source xml:space="preserve">It taught how to add content to Windows Universal apps, how to add interactivity to them, and how to change their appearance.</source>
          <target xml:space="preserve">It taught how to add content to Windows Universal apps, how to add interactivity to them, and how to change their appearance.</target>
        </segment>
      </unit>
      <unit id="353">
        <segment state="initial">
          <source xml:space="preserve">Next steps</source>
          <target xml:space="preserve">Next steps</target>
        </segment>
      </unit>
      <unit id="354">
        <segment state="initial">
          <source xml:space="preserve">If you have a Windows Universal app project that targets Windows 8.1 and/or Windows Phone 8.1, you can port it to Windows 10.</source>
          <target xml:space="preserve">If you have a Windows Universal app project that targets Windows 8.1 and/or Windows Phone 8.1, you can port it to Windows 10.</target>
        </segment>
      </unit>
      <unit id="355">
        <segment state="initial">
          <source xml:space="preserve">There is no automatic process for this, but you can do it manually with a little effort.</source>
          <target xml:space="preserve">There is no automatic process for this, but you can do it manually with a little effort.</target>
        </segment>
      </unit>
      <unit id="356">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209021)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Start with a new Windows Universal project to get the latest project system structure and manifest files, copy your code files into the project's directory structure, add the items to your project, and rewrite your XAML using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> according to the guidance in this topic.</source>
          <target xml:space="preserve">Start with a new Windows Universal project to get the latest project system structure and manifest files, copy your code files into the project's directory structure, add the items to your project, and rewrite your XAML using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> according to the guidance in this topic.</target>
        </segment>
      </unit>
      <unit id="357">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt188203)</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?LinkId=619525)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Porting a Windows Runtime 8 project to a Universal Windows Platform (UWP) project</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Porting to the Universal Windows Platform (C++)</pc>.</source>
          <target xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Porting a Windows Runtime 8 project to a Universal Windows Platform (UWP) project</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Porting to the Universal Windows Platform (C++)</pc>.</target>
        </segment>
      </unit>
      <unit id="358">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=619623)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you have existing C++ code that you want to integrate with a UWP app, such as to create a new UWP UI for an existing application, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to: Use existing C++ code in a Universal Windows project</pc>.</source>
          <target xml:space="preserve">If you have existing C++ code that you want to integrate with a UWP app, such as to create a new UWP UI for an existing application, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to: Use existing C++ code in a Universal Windows project</pc>.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>