<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-cn" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">8d626d907c089daa2426c2905b269d6ba37f5ae6</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 066711E0-D5C4-467E-8683-3CC64EDBCC83</source>
          <target xml:space="preserve">ms.assetid: 066711E0-D5C4-467E-8683-3CC64EDBCC83</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Call asynchronous APIs in C# or Visual Basic</source>
          <target xml:space="preserve">title: Call asynchronous APIs in C# or Visual Basic</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</source>
          <target xml:space="preserve">description: The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Call asynchronous APIs in C# or Visual Basic</source>
          <target xml:space="preserve">Call asynchronous APIs in C# or Visual Basic</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</source>
          <target xml:space="preserve">The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.</source>
          <target xml:space="preserve">This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Asynchronous APIs keep your app from waiting for large operations to complete before continuing execution.</source>
          <target xml:space="preserve">Asynchronous APIs keep your app from waiting for large operations to complete before continuing execution.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">For example, an app that downloads info from the Internet might spend several seconds waiting for the info to arrive.</source>
          <target xml:space="preserve">For example, an app that downloads info from the Internet might spend several seconds waiting for the info to arrive.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">If you use a synchronous method to retrieve the info, the app is blocked until the method returns.</source>
          <target xml:space="preserve">If you use a synchronous method to retrieve the info, the app is blocked until the method returns.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">The app won't respond to user interaction and because it seems non-responsive, the user might become frustrated.</source>
          <target xml:space="preserve">The app won't respond to user interaction and because it seems non-responsive, the user might become frustrated.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">By providing asynchronous APIs, the UWP helps to ensure that your app stays responsive to the user when it's performing long operations.</source>
          <target xml:space="preserve">By providing asynchronous APIs, the UWP helps to ensure that your app stays responsive to the user when it's performing long operations.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Most of the asynchronous APIs in the UWP don't have synchronous counterparts, so you need to be sure to understand how to use the asynchronous APIs with C# or Visual Basic in your Universal Windows Platform (UWP) app.</source>
          <target xml:space="preserve">Most of the asynchronous APIs in the UWP don't have synchronous counterparts, so you need to be sure to understand how to use the asynchronous APIs with C# or Visual Basic in your Universal Windows Platform (UWP) app.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Here we show how to call asynchronous APIs of the UWP.</source>
          <target xml:space="preserve">Here we show how to call asynchronous APIs of the UWP.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Using asynchronous APIs</source>
          <target xml:space="preserve">Using asynchronous APIs</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">By convention, asynchronous methods are given names that end in "Async".</source>
          <target xml:space="preserve">By convention, asynchronous methods are given names that end in "Async".</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">You typically call asynchronous APIs in response to a user's action, such as when the user clicks a button.</source>
          <target xml:space="preserve">You typically call asynchronous APIs in response to a user's action, such as when the user clicks a button.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Calling an asynchronous method in an event handler is one of the simplest ways of using asynchronous APIs.</source>
          <target xml:space="preserve">Calling an asynchronous method in an event handler is one of the simplest ways of using asynchronous APIs.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Here we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator as an example.</source>
          <target xml:space="preserve">Here we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator as an example.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">Suppose that you have an app that lists the titles of blog posts from a certain location.</source>
          <target xml:space="preserve">Suppose that you have an app that lists the titles of blog posts from a certain location.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The app has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> that the user clicks to get the titles.</source>
          <target xml:space="preserve">The app has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> that the user clicks to get the titles.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The titles are displayed in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc>.</source>
          <target xml:space="preserve">The titles are displayed in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">When the user clicks the button, it is important that the app remains responsive while it waits for the info from the blog's website.</source>
          <target xml:space="preserve">When the user clicks the button, it is important that the app remains responsive while it waits for the info from the blog's website.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243460)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To ensure this responsiveness, the UWP provides an asynchronous method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SyndicationClient.RetrieveFeedAsync</pc></pc>, to download the feed.</source>
          <target xml:space="preserve">To ensure this responsiveness, the UWP provides an asynchronous method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SyndicationClient.RetrieveFeedAsync</pc></pc>, to download the feed.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243460)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The example here gets the lists of blog posts from a blog by calling the asynchronous method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SyndicationClient.RetrieveFeedAsync</pc></pc>, and awaiting the result.</source>
          <target xml:space="preserve">The example here gets the lists of blog posts from a blog by calling the asynchronous method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SyndicationClient.RetrieveFeedAsync</pc></pc>, and awaiting the result.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">[!div class="tabbedCodeSnippets" data-resources="OutlookServices.Calendar"]</source>
          <target xml:space="preserve">[!div class="tabbedCodeSnippets" data-resources="OutlookServices.Calendar"]</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./AsyncSnippets/csharp/MainPage.xaml.cs#SnippetDownloadRSS)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-csharp<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</source>
          <target xml:space="preserve">[!code-csharp<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./AsyncSnippets/vbnet/MainPage.xaml.vb#SnippetDownloadRSS)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-vb<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</source>
          <target xml:space="preserve">[!code-vb<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">There are a couple of important things about this example.</source>
          <target xml:space="preserve">There are a couple of important things about this example.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">[</data>
          <data id="id5">](https://msdn.microsoft.com/library/windows/apps/BR243460)</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">First, the line, <ph dataRef="id1" id="ph1" /> uses the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">await</pc> operator with the call to the asynchronous method, <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">RetrieveFeedAsync</pc></pc>.</source>
          <target xml:space="preserve">First, the line, <ph dataRef="id1" id="ph1" /> uses the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">await</pc> operator with the call to the asynchronous method, <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">RetrieveFeedAsync</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can think of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator as telling the compiler that you are calling an asynchronous method, which causes the compiler to do some extra work so you don’t have to.</source>
          <target xml:space="preserve">You can think of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator as telling the compiler that you are calling an asynchronous method, which causes the compiler to do some extra work so you don’t have to.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Next, the declaration of the event handler includes the keyword <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc>.</source>
          <target xml:space="preserve">Next, the declaration of the event handler includes the keyword <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc>.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You must include this keyword in the method declaration of any method in which you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator.</source>
          <target xml:space="preserve">You must include this keyword in the method declaration of any method in which you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In this topic, we won't go into a lot of the details of what the compiler does with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, but let's examine what your app does so that it is asynchronous and responsive.</source>
          <target xml:space="preserve">In this topic, we won't go into a lot of the details of what the compiler does with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, but let's examine what your app does so that it is asynchronous and responsive.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Consider what happens when you use synchronous code.</source>
          <target xml:space="preserve">Consider what happens when you use synchronous code.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">`SyndicationClient.RetrieveFeed`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, suppose that there is a method called <ph dataRef="id1" id="ph1" /> that is synchronous.</source>
          <target xml:space="preserve">For example, suppose that there is a method called <ph dataRef="id1" id="ph1" /> that is synchronous.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">`SyndicationFeed feed = client.RetrieveFeed(feedUri)`</data>
          <data id="id2">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</data>
          <data id="id3">`RetrieveFeed`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(There is no such method, but imagine that there is.) If your app included the line <ph dataRef="id1" id="ph1" />, instead of <ph dataRef="id2" id="ph2" />, execution of the app would stop until the return value of <ph dataRef="id3" id="ph3" /> is available.</source>
          <target xml:space="preserve">(There is no such method, but imagine that there is.) If your app included the line <ph dataRef="id1" id="ph1" />, instead of <ph dataRef="id2" id="ph2" />, execution of the app would stop until the return value of <ph dataRef="id3" id="ph3" /> is available.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">And while your app waits for the method to complete, it can't respond to any other events, such another <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event.</source>
          <target xml:space="preserve">And while your app waits for the method to complete, it can't respond to any other events, such another <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">`RetrieveFeed`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">That is, your app would be blocked until <ph dataRef="id1" id="ph1" /> returns.</source>
          <target xml:space="preserve">That is, your app would be blocked until <ph dataRef="id1" id="ph1" /> returns.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">`client.RetrieveFeedAsync`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But if you call <ph dataRef="id1" id="ph1" />, the method initiates the retrieval and immediately returns.</source>
          <target xml:space="preserve">But if you call <ph dataRef="id1" id="ph1" />, the method initiates the retrieval and immediately returns.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR243460)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> with <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">RetrieveFeedAsync</pc></pc>, the app temporarily exits the event handler.</source>
          <target xml:space="preserve">When you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> with <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">RetrieveFeedAsync</pc></pc>, the app temporarily exits the event handler.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Then it can process other events while <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RetrieveFeedAsync</pc> executes asynchronously.</source>
          <target xml:space="preserve">Then it can process other events while <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RetrieveFeedAsync</pc> executes asynchronously.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">This keeps the app responsive to the user.</source>
          <target xml:space="preserve">This keeps the app responsive to the user.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR243485)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RetrieveFeedAsync</pc> completes and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SyndicationFeed</pc></pc> is available, the app essentially reenters the event handler where it left off, after <ph dataRef="id7" id="ph1" />, and finishes the rest of the method.</source>
          <target xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RetrieveFeedAsync</pc> completes and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SyndicationFeed</pc></pc> is available, the app essentially reenters the event handler where it left off, after <ph dataRef="id7" id="ph1" />, and finishes the rest of the method.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`RetrieveFeed`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The nice thing about using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator is that the code doesn't look much different from how the code looks if you used the imaginary <ph dataRef="id3" id="ph1" /> method.</source>
          <target xml:space="preserve">The nice thing about using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator is that the code doesn't look much different from how the code looks if you used the imaginary <ph dataRef="id3" id="ph1" /> method.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There are ways to write asynchronous code in C# or Visual Basic without the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, but the resulting code tends to emphasize the mechanics of executing asynchronously.</source>
          <target xml:space="preserve">There are ways to write asynchronous code in C# or Visual Basic without the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, but the resulting code tends to emphasize the mechanics of executing asynchronously.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">This makes asynchronous code hard to write, hard to understand, and hard to maintain.</source>
          <target xml:space="preserve">This makes asynchronous code hard to write, hard to understand, and hard to maintain.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">By using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, you get the benefits of an asynchronous app without making your code complex.</source>
          <target xml:space="preserve">By using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, you get the benefits of an asynchronous app without making your code complex.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Return types and results of asynchronous APIs</source>
          <target xml:space="preserve">Return types and results of asynchronous APIs</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243460)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR243485)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you followed the link to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RetrieveFeedAsync</pc></pc>, you might have noticed that the return type of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">RetrieveFeedAsync</pc> is not a <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">SyndicationFeed</pc></pc>.</source>
          <target xml:space="preserve">If you followed the link to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RetrieveFeedAsync</pc></pc>, you might have noticed that the return type of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">RetrieveFeedAsync</pc> is not a <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">SyndicationFeed</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">`IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Instead, the return type is <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">Instead, the return type is <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">Viewed from the raw syntax, an asynchronous API returns an object that contains the result within it.</source>
          <target xml:space="preserve">Viewed from the raw syntax, an asynchronous API returns an object that contains the result within it.</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">While it is common, and sometimes useful, to think of an asynchronous method as being awaitable, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator actually operates on the method’s return value, not on the method.</source>
          <target xml:space="preserve">While it is common, and sometimes useful, to think of an asynchronous method as being awaitable, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator actually operates on the method’s return value, not on the method.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When you apply the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, what you get back is the result of calling <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResult</pc> on the object returned by the method.</source>
          <target xml:space="preserve">When you apply the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, what you get back is the result of calling <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResult</pc> on the object returned by the method.</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SyndicationFeed</pc> is the result of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RetrieveFeedAsync.GetResult()</pc>.</source>
          <target xml:space="preserve">In the example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SyndicationFeed</pc> is the result of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RetrieveFeedAsync.GetResult()</pc>.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">When you use an asynchronous method, you can examine the signature to see what you’ll get back after awaiting the value returned from the method.</source>
          <target xml:space="preserve">When you use an asynchronous method, you can examine the signature to see what you’ll get back after awaiting the value returned from the method.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">All asynchronous APIs in the UWP return one of the following types:</source>
          <target xml:space="preserve">All asynchronous APIs in the UWP return one of the following types:</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">IAsyncOperation&amp;lt;TResult&amp;gt;</source>
          <target xml:space="preserve">IAsyncOperation&amp;lt;TResult&amp;gt;</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">IAsyncOperationWithProgress&amp;lt;TResult, TProgress&amp;gt;</source>
          <target xml:space="preserve">IAsyncOperationWithProgress&amp;lt;TResult, TProgress&amp;gt;</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">IAsyncAction</source>
          <target xml:space="preserve">IAsyncAction</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">IAsyncActionWithProgress&amp;lt;TProgress&amp;gt;</source>
          <target xml:space="preserve">IAsyncActionWithProgress&amp;lt;TProgress&amp;gt;</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">`      TResult`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The result type of an asynchronous method is the same as the <ph dataRef="id1" id="ph1" /> type parameter.</source>
          <target xml:space="preserve">The result type of an asynchronous method is the same as the <ph dataRef="id1" id="ph1" /> type parameter.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">`TResult`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Types without a <ph dataRef="id1" id="ph1" /> don't have a result.</source>
          <target xml:space="preserve">Types without a <ph dataRef="id1" id="ph1" /> don't have a result.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can think of the result as being <pc dataRefEnd="id2" dataRefStart="id1" id="p1">void</pc>.</source>
          <target xml:space="preserve">You can think of the result as being <pc dataRefEnd="id2" dataRefStart="id1" id="p1">void</pc>.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/831f9wka.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In Visual Basic, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Sub</pc> procedure is equivalent to a method with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">void</pc> return type.</source>
          <target xml:space="preserve">In Visual Basic, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Sub</pc> procedure is equivalent to a method with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">void</pc> return type.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">The table here gives examples of asynchronous methods and lists the return type and result type of each.</source>
          <target xml:space="preserve">The table here gives examples of asynchronous methods and lists the return type and result type of each.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">Asynchronous method</source>
          <target xml:space="preserve">Asynchronous method</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">Return type</source>
          <target xml:space="preserve">Return type</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">Result type</source>
          <target xml:space="preserve">Result type</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">SyndicationClient.RetrieveFeedAsync</source>
          <target xml:space="preserve">SyndicationClient.RetrieveFeedAsync</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">IAsyncOperationWithProgress&amp;lt;SyndicationFeed, RetrievalProgress&amp;gt;</source>
          <target xml:space="preserve">IAsyncOperationWithProgress&amp;lt;SyndicationFeed, RetrievalProgress&amp;gt;</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">SyndicationFeed</source>
          <target xml:space="preserve">SyndicationFeed</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">FileOpenPicker.PickSingleFileAsync</source>
          <target xml:space="preserve">FileOpenPicker.PickSingleFileAsync</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">IAsyncOperation&amp;lt;StorageFile&amp;gt;</source>
          <target xml:space="preserve">IAsyncOperation&amp;lt;StorageFile&amp;gt;</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">StorageFile</source>
          <target xml:space="preserve">StorageFile</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">XmlDocument.SaveToFileAsync</source>
          <target xml:space="preserve">XmlDocument.SaveToFileAsync</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">IAsyncAction</source>
          <target xml:space="preserve">IAsyncAction</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">void</source>
          <target xml:space="preserve">void</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">InkStrokeContainer.LoadAsync</source>
          <target xml:space="preserve">InkStrokeContainer.LoadAsync</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">IAsyncActionWithProgress&amp;lt;UInt64&amp;gt;</source>
          <target xml:space="preserve">IAsyncActionWithProgress&amp;lt;UInt64&amp;gt;</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">void</source>
          <target xml:space="preserve">void</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">DataReader.LoadAsync</source>
          <target xml:space="preserve">DataReader.LoadAsync</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208120)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataReaderLoadOperation</pc>
						</pc>, a custom results class that implements <pc dataRefEnd="id6" dataRefStart="id5" id="p3">IAsyncOperation&amp;lt;UInt32&amp;gt;</pc></source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataReaderLoadOperation</pc>
						</pc>, a custom results class that implements <pc dataRefEnd="id6" dataRefStart="id5" id="p3">IAsyncOperation&amp;lt;UInt32&amp;gt;</pc></target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">UInt32</source>
          <target xml:space="preserve">UInt32</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230232.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/dd321424.aspx)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Asynchronous methods that are defined in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">.NET for UWP apps</pc></pc> have the return type <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Task</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Task&amp;lt;TResult&amp;gt;</pc></pc>.</source>
          <target xml:space="preserve">Asynchronous methods that are defined in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">.NET for UWP apps</pc></pc> have the return type <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Task</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Task&amp;lt;TResult&amp;gt;</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR206580)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Methods that return <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task</pc> are similar to the asynchronous methods in the UWP that return <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IAsyncAction</pc></pc>.</source>
          <target xml:space="preserve">Methods that return <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task</pc> are similar to the asynchronous methods in the UWP that return <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IAsyncAction</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In each case, the result of the asynchronous method is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">void</pc>.</source>
          <target xml:space="preserve">In each case, the result of the asynchronous method is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">void</pc>.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR206598)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">`TResult`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The return type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task&amp;lt;TResult&amp;gt;</pc> is similar to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IAsyncOperation&amp;lt;TResult&amp;gt;</pc></pc> in that the result of the asynchronous method when running the task is the same type as the <ph dataRef="id7" id="ph1" /> type parameter.</source>
          <target xml:space="preserve">The return type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task&amp;lt;TResult&amp;gt;</pc> is similar to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IAsyncOperation&amp;lt;TResult&amp;gt;</pc></pc> in that the result of the asynchronous method when running the task is the same type as the <ph dataRef="id7" id="ph1" /> type parameter.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230302.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info about using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET for UWP apps</pc> and tasks, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.NET for Windows Runtime apps overview</pc>.</source>
          <target xml:space="preserve">For more info about using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET for UWP apps</pc> and tasks, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.NET for Windows Runtime apps overview</pc>.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">Handling errors</source>
          <target xml:space="preserve">Handling errors</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator to retrieve your results from an asynchronous method, you can use a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">try/catch</pc> block to handle errors that occur in asynchronous methods, just as you do for synchronous methods.</source>
          <target xml:space="preserve">When you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator to retrieve your results from an asynchronous method, you can use a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">try/catch</pc> block to handle errors that occur in asynchronous methods, just as you do for synchronous methods.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The previous example wraps the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RetrieveFeedAsync</pc> method and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">await</pc> operation in a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">try/catch</pc> block to handle errors when an exception is thrown.</source>
          <target xml:space="preserve">The previous example wraps the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RetrieveFeedAsync</pc> method and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">await</pc> operation in a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">try/catch</pc> block to handle errors when an exception is thrown.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">When asynchronous methods call other asynchronous methods, any asynchronous method that results in an exception will be propagated to the outer methods.</source>
          <target xml:space="preserve">When asynchronous methods call other asynchronous methods, any asynchronous method that results in an exception will be propagated to the outer methods.</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This means that you can put a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">try/catch</pc> block on the outer-most method to catch errors for the nested asynchronous methods.</source>
          <target xml:space="preserve">This means that you can put a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">try/catch</pc> block on the outer-most method to catch errors for the nested asynchronous methods.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">Again, this is similar to how you catch exceptions for synchronous methods.</source>
          <target xml:space="preserve">Again, this is similar to how you catch exceptions for synchronous methods.</target>
        </segment>
      </unit>
      <unit id="197">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">However, you can't use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">catch</pc> block.</source>
          <target xml:space="preserve">However, you can't use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">catch</pc> block.</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  Starting with C# in Microsoft Visual Studio 2005, you can use <pc dataRefEnd="id4" dataRefStart="id3" id="p2">await</pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">catch</pc> block.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  Starting with C# in Microsoft Visual Studio 2005, you can use <pc dataRefEnd="id4" dataRefStart="id3" id="p2">await</pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">catch</pc> block.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">Summary and next steps</source>
          <target xml:space="preserve">Summary and next steps</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">The pattern of calling an asynchronous method that we show here is the simplest one to use when you call asynchronous APIs in an event handler.</source>
          <target xml:space="preserve">The pattern of calling an asynchronous method that we show here is the simplest one to use when you call asynchronous APIs in an event handler.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can also use this pattern when you call an asynchronous method in an overridden method that returns <pc dataRefEnd="id2" dataRefStart="id1" id="p1">void</pc> or a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Sub</pc> in Visual Basic.</source>
          <target xml:space="preserve">You can also use this pattern when you call an asynchronous method in an overridden method that returns <pc dataRefEnd="id2" dataRefStart="id1" id="p1">void</pc> or a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Sub</pc> in Visual Basic.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">As you encounter asynchronous methods in the UWP, it is important to remember:</source>
          <target xml:space="preserve">As you encounter asynchronous methods in the UWP, it is important to remember:</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">By convention, asynchronous methods are given names that end in "Async".</source>
          <target xml:space="preserve">By convention, asynchronous methods are given names that end in "Async".</target>
        </segment>
      </unit>
      <unit id="204">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Any method that uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator must have its declaration marked with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">async</pc> keyword.</source>
          <target xml:space="preserve">Any method that uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator must have its declaration marked with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">async</pc> keyword.</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When an app finds the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, the app remains responsive to user interaction while the asynchronous method executes.</source>
          <target xml:space="preserve">When an app finds the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator, the app remains responsive to user interaction while the asynchronous method executes.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Awaiting the value returned by an asynchronous method returns an object that contains the result.</source>
          <target xml:space="preserve">Awaiting the value returned by an asynchronous method returns an object that contains the result.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">In most cases, the result contained within the return value is what's useful, not the return value itself.</source>
          <target xml:space="preserve">In most cases, the result contained within the return value is what's useful, not the return value itself.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">You can find the type of the value that is contained inside the result by looking at the return type of the async method.</source>
          <target xml:space="preserve">You can find the type of the value that is contained inside the result by looking at the return type of the async method.</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Using asynchronous APIs and <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> patterns is often a way to improve the responsiveness of your app.</source>
          <target xml:space="preserve">Using asynchronous APIs and <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> patterns is often a way to improve the responsiveness of your app.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">The example in this topic outputs text that looks like this.</source>
          <target xml:space="preserve">The example in this topic outputs text that looks like this.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>