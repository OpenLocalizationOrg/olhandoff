<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-cn" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">34d58800e3ae3889589fa4fc264111069e5e0d16</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 923D8156-81D3-4A1E-9D02-DB219F600FDB</source>
          <target xml:space="preserve">ms.assetid: 923D8156-81D3-4A1E-9D02-DB219F600FDB</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">description: This article describes how to create Universal Windows Platform (UWP) apps that play audio in the background.</source>
          <target xml:space="preserve">description: This article describes how to create Universal Windows Platform (UWP) apps that play audio in the background.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">title: Background Audio</source>
          <target xml:space="preserve">title: Background Audio</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Background Audio</source>
          <target xml:space="preserve">Background Audio</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">This article describes how to create Universal Windows Platform (UWP) apps that play audio in the background.</source>
          <target xml:space="preserve">This article describes how to create Universal Windows Platform (UWP) apps that play audio in the background.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">This means that even after the user has minimized your app, returned to the home screen, or has navigated away from your app in some other way, your app can continue to play audio.</source>
          <target xml:space="preserve">This means that even after the user has minimized your app, returned to the home screen, or has navigated away from your app in some other way, your app can continue to play audio.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">This article discusses the components of a background audio app and how they work together.</source>
          <target xml:space="preserve">This article discusses the components of a background audio app and how they work together.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Scenarios for background audio playback include:</source>
          <target xml:space="preserve">Scenarios for background audio playback include:</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Long-running playlists:</pc> The user briefly brings up a foreground app to select and start a playlist, after which the user expects the playlist to continue playing in the background.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Long-running playlists:</pc> The user briefly brings up a foreground app to select and start a playlist, after which the user expects the playlist to continue playing in the background.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using task switcher:</pc> The user briefly brings up a foreground app to start playing audio, then switches to another open app using the task switcher.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using task switcher:</pc> The user briefly brings up a foreground app to start playing audio, then switches to another open app using the task switcher.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">The user expects the audio to continue playing in the background.</source>
          <target xml:space="preserve">The user expects the audio to continue playing in the background.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">The background audio implementation described in this article will allow your app to run universally on all Windows devices including Mobile, Desktop, and Xbox.</source>
          <target xml:space="preserve">The background audio implementation described in this article will allow your app to run universally on all Windows devices including Mobile, Desktop, and Xbox.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
					</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=619485)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Background audio UWP sample</pc> implements the code discussed in this overview.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Background audio UWP sample</pc> implements the code discussed in this overview.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">You can download the sample to see the code in context or to use as a starting point for your own app.</source>
          <target xml:space="preserve">You can download the sample to see the code in context or to use as a starting point for your own app.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Background audio architecture</source>
          <target xml:space="preserve">Background audio architecture</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">An app performing background playback consists of two processes.</source>
          <target xml:space="preserve">An app performing background playback consists of two processes.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">The first process is the main app, which contains the app UI and client logic, running in the foreground.</source>
          <target xml:space="preserve">The first process is the main app, which contains the app UI and client logic, running in the foreground.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224794)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The second process is the background playback task, which implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTask</pc></pc> like all UWP app background tasks.</source>
          <target xml:space="preserve">The second process is the background playback task, which implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTask</pc></pc> like all UWP app background tasks.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">The background task contains the audio playback logic and background services.</source>
          <target xml:space="preserve">The background task contains the audio playback logic and background services.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">The background task communicates with the system through the System Media Transport Controls.</source>
          <target xml:space="preserve">The background task communicates with the system through the System Media Transport Controls.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">The following diagram is an overview of how the system is designed.</source>
          <target xml:space="preserve">The following diagram is an overview of how the system is designed.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">windows 10 background audio architecture</source>
          <target xml:space="preserve">windows 10 background audio architecture</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">MediaPlayer</source>
          <target xml:space="preserve">MediaPlayer</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn640562)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Playback</pc></pc> namespace contains APIs used to play audio in the background.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Playback</pc></pc> namespace contains APIs used to play audio in the background.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652535)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There is a single instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc></pc> per app through which playback occurs.</source>
          <target xml:space="preserve">There is a single instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc></pc> per app through which playback occurs.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Your background audio app calls methods and sets properties on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> class to set the current track, start playback, pause, fast forward, rewind, and so on.</source>
          <target xml:space="preserve">Your background audio app calls methods and sets properties on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> class to set the current track, start playback, pause, fast forward, rewind, and so on.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652528)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The media player object instance is always accessed through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundMediaPlayer.Current</pc></pc> property.</source>
          <target xml:space="preserve">The media player object instance is always accessed through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundMediaPlayer.Current</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">MediaPlayer Proxy and Stub</source>
          <target xml:space="preserve">MediaPlayer Proxy and Stub</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> is accessed from your app's background process, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> instance is activated in the background task host and can be manipulated directly.</source>
          <target xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> is accessed from your app's background process, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> instance is activated in the background task host and can be manipulated directly.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> is accessed from the foreground application, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> instance that is returned is actually a proxy that communicates with a stub in the background process.</source>
          <target xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> is accessed from the foreground application, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> instance that is returned is actually a proxy that communicates with a stub in the background process.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This stub communicates with the actual <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> instance, which is also hosted in the background process.</source>
          <target xml:space="preserve">This stub communicates with the actual <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> instance, which is also hosted in the background process.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn987010)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn926635)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Both the foreground and background process can access most of the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> instance, with the exception of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer.Source</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer.SystemMediaTransportControls</pc></pc> which can only be accessed from the background process.</source>
          <target xml:space="preserve">Both the foreground and background process can access most of the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> instance, with the exception of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer.Source</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer.SystemMediaTransportControls</pc></pc> which can only be accessed from the background process.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652609)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn652603)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn652606)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The foreground app and the background process can both receive notifications of media-specific events like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaOpened</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaEnded</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaFailed</pc></pc>.</source>
          <target xml:space="preserve">The foreground app and the background process can both receive notifications of media-specific events like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaOpened</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaEnded</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaFailed</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Playback Lists</source>
          <target xml:space="preserve">Playback Lists</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">A common scenario for background audio applications is to play multiple items in a row.</source>
          <target xml:space="preserve">A common scenario for background audio applications is to play multiple items in a row.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930955)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn987010)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This is most easily accomplished in your background process by using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackList</pc></pc> object, which can be set as a source on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer</pc> by assigning it to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer.Source</pc></pc> property.</source>
          <target xml:space="preserve">This is most easily accomplished in your background process by using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackList</pc></pc> object, which can be set as a source on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer</pc> by assigning it to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer.Source</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It is not possible to access a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackList</pc> from the foreground process that was set in the background process.</source>
          <target xml:space="preserve">It is not possible to access a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackList</pc> from the foreground process that was set in the background process.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">System Media Transport Controls</source>
          <target xml:space="preserve">System Media Transport Controls</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">A user may control audio playback without directly using your app's UI through means such as Bluetooth devices, SmartGlass, and the System Media Transport Controls.</source>
          <target xml:space="preserve">A user may control audio playback without directly using your app's UI through means such as Bluetooth devices, SmartGlass, and the System Media Transport Controls.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn278677)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Your background task uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemMediaTransportControls</pc></pc> class to subscribe to these user-initiated system events.</source>
          <target xml:space="preserve">Your background task uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemMediaTransportControls</pc></pc> class to subscribe to these user-initiated system events.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn926635)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To get a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemMediaTransportControls</pc> instance from within the background process, use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer.SystemMediaTransportControls</pc></pc> property.</source>
          <target xml:space="preserve">To get a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemMediaTransportControls</pc> instance from within the background process, use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer.SystemMediaTransportControls</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn278708)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Foreground apps get an instance of the class by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemMediaTransportControls.GetForCurrentView</pc></pc>, but the instance returned is a foreground-only instance that does not relate to the background task.</source>
          <target xml:space="preserve">Foreground apps get an instance of the class by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemMediaTransportControls.GetForCurrentView</pc></pc>, but the instance returned is a foreground-only instance that does not relate to the background task.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">Sending Messages Between Tasks</source>
          <target xml:space="preserve">Sending Messages Between Tasks</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">There are times when you will want to communicate between the two processes of a background audio app.</source>
          <target xml:space="preserve">There are times when you will want to communicate between the two processes of a background audio app.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">For example, you might want the background task to notify the foreground task when a new track starts playing, and then send the new song title to the foreground task to display on the screen.</source>
          <target xml:space="preserve">For example, you might want the background task to notify the foreground task when a new track starts playing, and then send the new song title to the foreground task to display on the screen.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">A simple communication mechanism raises events in both the foreground and background processes.</source>
          <target xml:space="preserve">A simple communication mechanism raises events in both the foreground and background processes.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652533)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn652532)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendMessageToForeground</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SendMessageToBackground</pc></pc> methods each invoke events in the corresponding process.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendMessageToForeground</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SendMessageToBackground</pc></pc> methods each invoke events in the corresponding process.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652530)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn652531)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Messages can be received by subscribing to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MessageReceivedFromBackground</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MessageReceivedFromForeground</pc></pc> events.</source>
          <target xml:space="preserve">Messages can be received by subscribing to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MessageReceivedFromBackground</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MessageReceivedFromForeground</pc></pc> events.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">Data can be passed as an argument to the send message methods that are then passed into the message received event handlers.</source>
          <target xml:space="preserve">Data can be passed as an argument to the send message methods that are then passed into the message received event handlers.</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Pass data using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> class.</source>
          <target xml:space="preserve">Pass data using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">This class is a dictionary that contains a string as a key and other value types as values.</source>
          <target xml:space="preserve">This class is a dictionary that contains a string as a key and other value types as values.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">You can pass simple value types such as integers, strings, and booleans.</source>
          <target xml:space="preserve">You can pass simple value types such as integers, strings, and booleans.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Background Task Life Cycle</source>
          <target xml:space="preserve">Background Task Life Cycle</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">The lifetime of a background task is closely tied to your app's current playback status.</source>
          <target xml:space="preserve">The lifetime of a background task is closely tied to your app's current playback status.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">For example, when the user pauses audio playback, the system may terminate or cancel your app depending on the circumstances.</source>
          <target xml:space="preserve">For example, when the user pauses audio playback, the system may terminate or cancel your app depending on the circumstances.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">After a period of time without audio playback, the system may automatically shut down the background task.</source>
          <target xml:space="preserve">After a period of time without audio playback, the system may automatically shut down the background task.</target>
        </segment>
      </unit>
      <unit id="160">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224811)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn652528)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn652530)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTask.Run</pc></pc> method is called the first time your app accesses either <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundMediaPlayer.Current</pc></pc> from code running in the foreground app or when you register a handler for the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MessageReceivedFromBackground</pc></pc> event, whichever occurs first.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTask.Run</pc></pc> method is called the first time your app accesses either <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundMediaPlayer.Current</pc></pc> from code running in the foreground app or when you register a handler for the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MessageReceivedFromBackground</pc></pc> event, whichever occurs first.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It is recommended that you register for the message received handler before calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> for the first time so that the foreground app doesn't miss any messages sent from the background process.</source>
          <target xml:space="preserve">It is recommended that you register for the message received handler before calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> for the first time so that the foreground app doesn't miss any messages sent from the background process.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700499)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/hh700504)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/br224798)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">[</data>
          <data id="id16">](https://msdn.microsoft.com/library/windows/apps/br224788)</data>
          <data id="id17">**</data>
          <data id="id18">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To keep the background task alive, your app must request a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskDeferral</pc></pc> from within the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Run</pc> method and call <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BackgroundTaskDeferral.Complete</pc></pc> when the task instance receives the <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Canceled</pc></pc> or <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Completed</pc></pc> events.</source>
          <target xml:space="preserve">To keep the background task alive, your app must request a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskDeferral</pc></pc> from within the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Run</pc> method and call <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BackgroundTaskDeferral.Complete</pc></pc> when the task instance receives the <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Canceled</pc></pc> or <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Completed</pc></pc> events.</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Do not loop or wait in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> method because this consumes resources and may cause your app's background task to be terminated by the system.</source>
          <target xml:space="preserve">Do not loop or wait in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> method because this consumes resources and may cause your app's background task to be terminated by the system.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Your background task gets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Completed</pc> event when the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc> method is completed and deferral is not requested.</source>
          <target xml:space="preserve">Your background task gets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Completed</pc> event when the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc> method is completed and deferral is not requested.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In some cases, when your app gets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canceled</pc> event, it can be also followed by the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Completed</pc> event.</source>
          <target xml:space="preserve">In some cases, when your app gets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canceled</pc> event, it can be also followed by the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Completed</pc> event.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Your task may receive a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canceled</pc> event while <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc> is executing, so be sure to manage this potential concurrence.</source>
          <target xml:space="preserve">Your task may receive a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canceled</pc> event while <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc> is executing, so be sure to manage this potential concurrence.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">Situations in which the background task can be cancelled include:</source>
          <target xml:space="preserve">Situations in which the background task can be cancelled include:</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">A new app with audio playback capabilities starts on systems that enforce the exclusivity sub-policy.</source>
          <target xml:space="preserve">A new app with audio playback capabilities starts on systems that enforce the exclusivity sub-policy.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#system-policies-for-background-audio-task-lifetime)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System policies for background audio task lifetime</pc> section below.</source>
          <target xml:space="preserve">See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System policies for background audio task lifetime</pc> section below.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">A background task has been launched but music is not yet playing, and then the foreground app is suspended.</source>
          <target xml:space="preserve">A background task has been launched but music is not yet playing, and then the foreground app is suspended.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">Other media interruptions, such as incoming phone calls or VoIP calls.</source>
          <target xml:space="preserve">Other media interruptions, such as incoming phone calls or VoIP calls.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">Situations in which the background task can be terminated without notice include:</source>
          <target xml:space="preserve">Situations in which the background task can be terminated without notice include:</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">A VoIP call comes in and there is not enough available memory on the system to keep the background task alive.</source>
          <target xml:space="preserve">A VoIP call comes in and there is not enough available memory on the system to keep the background task alive.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">A resource policy is violated.</source>
          <target xml:space="preserve">A resource policy is violated.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">Task cancellation or completion does not end gracefully.</source>
          <target xml:space="preserve">Task cancellation or completion does not end gracefully.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">System policies for background audio task lifetime</source>
          <target xml:space="preserve">System policies for background audio task lifetime</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">The following policies help determine how the system manages the lifetime of background audio tasks.</source>
          <target xml:space="preserve">The following policies help determine how the system manages the lifetime of background audio tasks.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">Exclusivity</source>
          <target xml:space="preserve">Exclusivity</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">If enabled, this sub-policy limits the number of background audio tasks to be at most 1 at any given time.</source>
          <target xml:space="preserve">If enabled, this sub-policy limits the number of background audio tasks to be at most 1 at any given time.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">It is enabled on Mobile and other non-Desktop SKUs.</source>
          <target xml:space="preserve">It is enabled on Mobile and other non-Desktop SKUs.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Inactivity Timeout</source>
          <target xml:space="preserve">Inactivity Timeout</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">Due to resource constraints, the system may terminate your background task after a period of inactivity.</source>
          <target xml:space="preserve">Due to resource constraints, the system may terminate your background task after a period of inactivity.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">A background task is considered “inactive” if both of the following conditions are met:</source>
          <target xml:space="preserve">A background task is considered “inactive” if both of the following conditions are met:</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">The foreground app is not visible (it is suspended or terminated).</source>
          <target xml:space="preserve">The foreground app is not visible (it is suspended or terminated).</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">The background media player is not in the playing state.</source>
          <target xml:space="preserve">The background media player is not in the playing state.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">If both of these conditions are satisfied, the background media system policy will start a timer.</source>
          <target xml:space="preserve">If both of these conditions are satisfied, the background media system policy will start a timer.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">If neither condition has changed when the timer expires, the background media system policy will terminate the background task.</source>
          <target xml:space="preserve">If neither condition has changed when the timer expires, the background media system policy will terminate the background task.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">Shared Lifetime</source>
          <target xml:space="preserve">Shared Lifetime</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">If enabled, this sub-policy forces the background task to be dependent on the lifetime of the foreground task.</source>
          <target xml:space="preserve">If enabled, this sub-policy forces the background task to be dependent on the lifetime of the foreground task.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">If the foreground task is shut down, either by the user or the system, the background task will also shut down.</source>
          <target xml:space="preserve">If the foreground task is shut down, either by the user or the system, the background task will also shut down.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">However, note that this does not mean that the foreground is dependent on the background.</source>
          <target xml:space="preserve">However, note that this does not mean that the foreground is dependent on the background.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">If the background task is shut down, this does not force the foreground task to shut down.</source>
          <target xml:space="preserve">If the background task is shut down, this does not force the foreground task to shut down.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source xml:space="preserve">The following table lists the which policies are enforced on which device types.</source>
          <target xml:space="preserve">The following table lists the which policies are enforced on which device types.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">Sub-policy</source>
          <target xml:space="preserve">Sub-policy</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">Desktop</source>
          <target xml:space="preserve">Desktop</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">Mobile</source>
          <target xml:space="preserve">Mobile</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Other</source>
          <target xml:space="preserve">Other</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">Exclusivity</source>
          <target xml:space="preserve">Exclusivity</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">Disabled</source>
          <target xml:space="preserve">Disabled</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">Enabled</source>
          <target xml:space="preserve">Enabled</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source xml:space="preserve">Enabled</source>
          <target xml:space="preserve">Enabled</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">Inactivity Timeout</source>
          <target xml:space="preserve">Inactivity Timeout</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">Disabled</source>
          <target xml:space="preserve">Disabled</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">Enabled</source>
          <target xml:space="preserve">Enabled</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">Disabled</source>
          <target xml:space="preserve">Disabled</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Shared Lifetime</source>
          <target xml:space="preserve">Shared Lifetime</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">Enabled</source>
          <target xml:space="preserve">Enabled</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">Disabled</source>
          <target xml:space="preserve">Disabled</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">Disabled</source>
          <target xml:space="preserve">Disabled</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>