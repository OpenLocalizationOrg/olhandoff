<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-cn" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">53d404d52aff3f70ec982ab47f7449bedd70098d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Description: Describes the steps needed to ensure your Universal Windows Platform (UWP) app is usable when a high-contrast theme is active.</source>
          <target xml:space="preserve">Description: Describes the steps needed to ensure your Universal Windows Platform (UWP) app is usable when a high-contrast theme is active.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: High-contrast themes</source>
          <target xml:space="preserve">title: High-contrast themes</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: FD7CA6F6-A8F1-47D8-AA6C-3F2EC3168C45</source>
          <target xml:space="preserve">ms.assetid: FD7CA6F6-A8F1-47D8-AA6C-3F2EC3168C45</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">label: High-contrast themes</source>
          <target xml:space="preserve">label: High-contrast themes</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">template: detail.hbs</source>
          <target xml:space="preserve">template: detail.hbs</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">High-contrast themes</source>
          <target xml:space="preserve">High-contrast themes</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Describes the steps needed to ensure your Universal Windows Platform (UWP) app is usable when a high-contrast theme is active.</source>
          <target xml:space="preserve">Describes the steps needed to ensure your Universal Windows Platform (UWP) app is usable when a high-contrast theme is active.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">A UWP app supports high-contrast themes by default.</source>
          <target xml:space="preserve">A UWP app supports high-contrast themes by default.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">If a user has chosen that they want the system to use a high-contrast theme from system settings or accessibility tools, the framework automatically uses colors and style settings that produce a high-contrast layout and rendering for controls and components in the UI.</source>
          <target xml:space="preserve">If a user has chosen that they want the system to use a high-contrast theme from system settings or accessibility tools, the framework automatically uses colors and style settings that produce a high-contrast layout and rendering for controls and components in the UI.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">This default support is based on using the default themes and templates.</source>
          <target xml:space="preserve">This default support is based on using the default themes and templates.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">These themes and templates make references to system colors as resource definitions, and the resource sources change automatically when the system is using a high-contrast mode.</source>
          <target xml:space="preserve">These themes and templates make references to system colors as resource definitions, and the resource sources change automatically when the system is using a high-contrast mode.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">However, if you use custom templates, themes, and styles for your control, be careful that you do not disable the built-in support for high contrast.</source>
          <target xml:space="preserve">However, if you use custom templates, themes, and styles for your control, be careful that you do not disable the built-in support for high contrast.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">If you use one of the XAML designers for Microsoft Visual Studio for styling, the designer generates a separate, high-contrast theme alongside the primary theme whenever you define a template that is significantly different from the default template.</source>
          <target xml:space="preserve">If you use one of the XAML designers for Microsoft Visual Studio for styling, the designer generates a separate, high-contrast theme alongside the primary theme whenever you define a template that is significantly different from the default template.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208807)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR208794)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The separate theme dictionaries go into the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThemeDictionaries</pc></pc> collection, a dedicated property of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ResourceDictionary</pc></pc> element.</source>
          <target xml:space="preserve">The separate theme dictionaries go into the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThemeDictionaries</pc></pc> collection, a dedicated property of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ResourceDictionary</pc></pc> element.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/Hh465374)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info on themes and control templates, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Control templates</pc>.</source>
          <target xml:space="preserve">For more info on themes and control templates, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Control templates</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">It's often very informative to look at the XAML resource dictionaries and themes for specific controls and see how the themes are constructed and how they reference resources that are similar but different for each possible high-contrast setting.</source>
          <target xml:space="preserve">It's often very informative to look at the XAML resource dictionaries and themes for specific controls and see how the themes are constructed and how they reference resources that are similar but different for each possible high-contrast setting.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Detecting when a high-contrast theme is enabled</source>
          <target xml:space="preserve">Detecting when a high-contrast theme is enabled</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242237)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A UWP app can use members of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AccessibilitySettings</pc></pc> class to detect the current settings for high-contrast themes.</source>
          <target xml:space="preserve">A UWP app can use members of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AccessibilitySettings</pc></pc> class to detect the current settings for high-contrast themes.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242237_highcontrast)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrast</pc></pc> property determines whether a high-contrast theme is currently selected.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrast</pc></pc> property determines whether a high-contrast theme is currently selected.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR242237_highcontrastscheme)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrast</pc> is set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc>, then the next step is to check the value of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HighContrastScheme</pc></pc> property to get the name of the high-contrast theme that is used.</source>
          <target xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrast</pc> is set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc>, then the next step is to check the value of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HighContrastScheme</pc></pc> property to get the name of the high-contrast theme that is used.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">"High Contrast White" and "High Contrast Black" are typically values for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrastScheme</pc> that your code should respond to.</source>
          <target xml:space="preserve">"High Contrast White" and "High Contrast Black" are typically values for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrastScheme</pc> that your code should respond to.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208794)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">XAML-defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc> keys can't have spaces, so the keys for these themes in a resource dictionary are typically "HighContrastWhite" and "HighContrastBlack" respectively.</source>
          <target xml:space="preserve">XAML-defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc> keys can't have spaces, so the keys for these themes in a resource dictionary are typically "HighContrastWhite" and "HighContrastBlack" respectively.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">You should also have fallback logic for a default high-contrast theme in case the value is some other string.</source>
          <target xml:space="preserve">You should also have fallback logic for a default high-contrast theme in case the value is some other string.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=254993)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML high contrast sample</pc> shows the logic for this.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML high contrast sample</pc> shows the logic for this.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR242237)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Make sure you call the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AccessibilitySettings</pc></pc> constructor from a scope where the app is initialized and is already displaying content.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Make sure you call the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AccessibilitySettings</pc></pc> constructor from a scope where the app is initialized and is already displaying content.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Apps can switch to using high-contrast resource values while the app is running.</source>
          <target xml:space="preserve">Apps can switch to using high-contrast resource values while the app is running.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt185591)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This works so long as the resources are requested using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> in the style or template XAML.</source>
          <target xml:space="preserve">This works so long as the resources are requested using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> in the style or template XAML.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">The default themes (generic.xaml) all use this {ThemeResource} markup extension technique, so you'll get this behavior if you're using default control themes.</source>
          <target xml:space="preserve">The default themes (generic.xaml) all use this {ThemeResource} markup extension technique, so you'll get this behavior if you're using default control themes.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Custom controls or custom control styling can do this if you've used this {ThemeResource} markup extension resource technique in your custom templates and styles also.</source>
          <target xml:space="preserve">Custom controls or custom control styling can do this if you've used this {ThemeResource} markup extension resource technique in your custom templates and styles also.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">Accessibility</source>
          <target xml:space="preserve">Accessibility</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">UI contrast and settings sample</source>
          <target xml:space="preserve">UI contrast and settings sample</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">XAML accessibility sample</source>
          <target xml:space="preserve">XAML accessibility sample</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">XAML high contrast sample</source>
          <target xml:space="preserve">XAML high contrast sample</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">AccessibilitySettings</source>
          <target xml:space="preserve">AccessibilitySettings</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>