<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">5922031b97a00757abbbd856bcaf02daca0e557e</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Create a "Hello, world" app (XAML)</source>
            <target xml:space="preserve">Create a "Hello, world" app (XAML)</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">This tutorial teaches you how to use Extensible Application Markup Language (XAML) with C\# to create a simple "Hello, world" app that targets the Universal Windows Platform (UWP) on Windows 10.</source>
            <target xml:space="preserve">This tutorial teaches you how to use Extensible Application Markup Language (XAML) with C\# to create a simple "Hello, world" app that targets the Universal Windows Platform (UWP) on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <segment state="initial" id="103">
            <source xml:space="preserve">With a single project in Microsoft Visual Studio, you can build an app that runs on any Windows 10 device.</source>
            <target xml:space="preserve">With a single project in Microsoft Visual Studio, you can build an app that runs on any Windows 10 device.</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Here we focus on creating an app that runs equally well on desktop and mobile devices.</source>
            <target xml:space="preserve">Here we focus on creating an app that runs equally well on desktop and mobile devices.</target>
          </segment>
        </unit>
        <unit id="105">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="105">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Important</pc>   This tutorial is for use with Microsoft Visual Studio 2015 and Windows 10.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Important</pc>   This tutorial is for use with Microsoft Visual Studio 2015 and Windows 10.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">It won't work correctly with earlier versions.</source>
            <target xml:space="preserve">It won't work correctly with earlier versions.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">Here you'll learn how to:</source>
            <target xml:space="preserve">Here you'll learn how to:</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">Create a new Visual Studio project that targets Windows 10 and the UWP.</source>
            <target xml:space="preserve">Create a new Visual Studio project that targets Windows 10 and the UWP.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Add XAML content to your start page.</source>
            <target xml:space="preserve">Add XAML content to your start page.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">Handle touch, pen, and mouse input.</source>
            <target xml:space="preserve">Handle touch, pen, and mouse input.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">Run the project on the local desktop and on the phone emulator in Visual Studio.</source>
            <target xml:space="preserve">Run the project on the local desktop and on the phone emulator in Visual Studio.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">Adapt the UI to different screen sizes.</source>
            <target xml:space="preserve">Adapt the UI to different screen sizes.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Before you start...</source>
            <target xml:space="preserve">Before you start...</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">We're going to jump right into the steps you use to create a simple universal app.</source>
            <target xml:space="preserve">We're going to jump right into the steps you use to create a simple universal app.</target>
          </segment>
        </unit>
        <unit id="115">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="115">
            <source xml:space="preserve">So we strongly recommend that you read and understand the overview information in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">What's new in Windows 10</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">What's a Universal Windows app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> before you start this tutorial.</source>
            <target xml:space="preserve">So we strongly recommend that you read and understand the overview information in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">What's new in Windows 10</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">What's a Universal Windows app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> before you start this tutorial.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">To complete this tutorial, you need Windows 10 and Visual Studio 2015.</source>
            <target xml:space="preserve">To complete this tutorial, you need Windows 10 and Visual Studio 2015.</target>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Get set up</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for more info.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Get set up</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for more info.</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">We assume you have a basic understanding of XAML and the concepts in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">XAML overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">We assume you have a basic understanding of XAML and the concepts in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">XAML overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">We also assume you're using the default window layout in Visual Studio.</source>
            <target xml:space="preserve">We also assume you're using the default window layout in Visual Studio.</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">If you change the default layout, you can reset it in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Window</pc> menu by using the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Reset Window Layout</pc> command.</source>
            <target xml:space="preserve">If you change the default layout, you can reset it in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Window</pc> menu by using the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Reset Window Layout</pc> command.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">Step 1: Create a new project in Visual Studio</source>
            <target xml:space="preserve">Step 1: Create a new project in Visual Studio</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Launch Visual Studio 2015.</source>
            <target xml:space="preserve">Launch Visual Studio 2015.</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">The Visual Studio 2015 Start page appears.</source>
            <target xml:space="preserve">The Visual Studio 2015 Start page appears.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">(From now on, we'll refer to Visual Studio 2015 simply as Visual Studio .)</source>
            <target xml:space="preserve">(From now on, we'll refer to Visual Studio 2015 simply as Visual Studio .)</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">File</pc> menu, select <pc dataRefEnd="id4" dataRefStart="id3" id="4">New</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Project</pc>.</source>
            <target xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">File</pc> menu, select <pc dataRefEnd="id4" dataRefStart="id3" id="4">New</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Project</pc>.</target>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">New Project</pc> dialog appears.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">New Project</pc> dialog appears.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">The left pane of the dialog lets you select the type of templates to display.</source>
            <target xml:space="preserve">The left pane of the dialog lets you select the type of templates to display.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">In the left pane, expand <pc dataRefEnd="id2" dataRefStart="id1" id="2">Installed &gt; Templates &gt; Visual C\# &gt; Windows</pc>, then pick the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Universal</pc> template group.</source>
            <target xml:space="preserve">In the left pane, expand <pc dataRefEnd="id2" dataRefStart="id1" id="2">Installed &gt; Templates &gt; Visual C\# &gt; Windows</pc>, then pick the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Universal</pc> template group.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">The dialog's center pane displays a list of project templates for Universal Windows Platform (UWP) apps.</source>
            <target xml:space="preserve">The dialog's center pane displays a list of project templates for Universal Windows Platform (UWP) apps.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The New Project window </pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The New Project window </pc>
						</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">In the center pane, select the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App (Universal Windows)</pc> template.</source>
            <target xml:space="preserve">In the center pane, select the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App (Universal Windows)</pc> template.</target>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> template creates a minimal UWP app that compiles and runs, but contains no user-interface controls or data.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> template creates a minimal UWP app that compiles and runs, but contains no user-interface controls or data.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">You add controls to the app over the course of this tutorial.</source>
            <target xml:space="preserve">You add controls to the app over the course of this tutorial.</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Name</pc> text box, type "HelloWorld".</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Name</pc> text box, type "HelloWorld".</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="2">OK</pc> to create the project.</source>
            <target xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="2">OK</pc> to create the project.</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">Visual Studio creates your project and displays it in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>.</source>
            <target xml:space="preserve">Visual Studio creates your project and displays it in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>.</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Visual Studio Solution Explorer for the HelloWorld project</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Visual Studio Solution Explorer for the HelloWorld project</pc>
						</target>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source xml:space="preserve">Although the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> is a minimal template, it still contains a lot of files:</source>
            <target xml:space="preserve">Although the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> is a minimal template, it still contains a lot of files:</target>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source xml:space="preserve">A manifest file (Package.appxmanifest) that describes your app (its name, description, tile, start page, and so on) and lists the files that your app contains.</source>
            <target xml:space="preserve">A manifest file (Package.appxmanifest) that describes your app (its name, description, tile, start page, and so on) and lists the files that your app contains.</target>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source xml:space="preserve">A set of logo images (Assets/Square150x150Logo.scale-200.png, Assets/Square44x44Logo.scale-200.png, and Assets/Wide310x150Logo.scale-200.png)to display in the start menu.</source>
            <target xml:space="preserve">A set of logo images (Assets/Square150x150Logo.scale-200.png, Assets/Square44x44Logo.scale-200.png, and Assets/Wide310x150Logo.scale-200.png)to display in the start menu.</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">An image (Assets/StoreLogo.png) to represent your app in the Windows Store.</source>
            <target xml:space="preserve">An image (Assets/StoreLogo.png) to represent your app in the Windows Store.</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">A splash screen (Assets/SplashScreen.scale-200.png) to display when your app starts.</source>
            <target xml:space="preserve">A splash screen (Assets/SplashScreen.scale-200.png) to display when your app starts.</target>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source xml:space="preserve">XAML and code files for the app (App.xaml and App.xaml.cs).</source>
            <target xml:space="preserve">XAML and code files for the app (App.xaml and App.xaml.cs).</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">A start page (MainPage.xaml) and an accompanying code file (MainPage.xaml.cs) that run when your app starts.</source>
            <target xml:space="preserve">A start page (MainPage.xaml) and an accompanying code file (MainPage.xaml.cs) that run when your app starts.</target>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source xml:space="preserve">These files are essential to all UWP apps using C\#.</source>
            <target xml:space="preserve">These files are essential to all UWP apps using C\#.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">Every project that you create in Visual Studio contains them.</source>
            <target xml:space="preserve">Every project that you create in Visual Studio contains them.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">Step 2: Modify your start page</source>
            <target xml:space="preserve">Step 2: Modify your start page</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">What's in the files?</source>
            <target xml:space="preserve">What's in the files?</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">To view and edit a file in your project, double-click the file in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>.</source>
            <target xml:space="preserve">To view and edit a file in your project, double-click the file in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">By default, you can expand a XAML file just like a folder to see its associated code file.</source>
            <target xml:space="preserve">By default, you can expand a XAML file just like a folder to see its associated code file.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">XAML files open in a split view that shows both the design surface and the XAML editor.</source>
            <target xml:space="preserve">XAML files open in a split view that shows both the design surface and the XAML editor.</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">In this tutorial, you work with just a few of the files listed previously: App.xaml, MainPage.xaml, and MainPage.xaml.cs.</source>
            <target xml:space="preserve">In this tutorial, you work with just a few of the files listed previously: App.xaml, MainPage.xaml, and MainPage.xaml.cs.</target>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source xml:space="preserve">App.xaml and App.xaml.cs</source>
            <target xml:space="preserve">App.xaml and App.xaml.cs</target>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source xml:space="preserve">App.xaml is where you declare resources that are used across the app.</source>
            <target xml:space="preserve">App.xaml is where you declare resources that are used across the app.</target>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source xml:space="preserve">App.xaml.cs is the code-behind file for App.xaml.</source>
            <target xml:space="preserve">App.xaml.cs is the code-behind file for App.xaml.</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">Code-behind is the code that is joined with the XAML page's partial class.</source>
            <target xml:space="preserve">Code-behind is the code that is joined with the XAML page's partial class.</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">Together, the XAML and code-behind make a complete class.</source>
            <target xml:space="preserve">Together, the XAML and code-behind make a complete class.</target>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source xml:space="preserve">App.xaml.cs is the entry point for your app.</source>
            <target xml:space="preserve">App.xaml.cs is the entry point for your app.</target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">Like all code-behind pages, it contains a constructor that calls the <pc dataRefEnd="id2" dataRefStart="id1" id="2">InitializeComponent</pc> method.</source>
            <target xml:space="preserve">Like all code-behind pages, it contains a constructor that calls the <pc dataRefEnd="id2" dataRefStart="id1" id="2">InitializeComponent</pc> method.</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">You don't write the <pc dataRefEnd="id2" dataRefStart="id1" id="2">InitializeComponent</pc> method.</source>
            <target xml:space="preserve">You don't write the <pc dataRefEnd="id2" dataRefStart="id1" id="2">InitializeComponent</pc> method.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">It's generated by Visual Studio, and its main purpose is to initialize the elements declared in the XAML file.</source>
            <target xml:space="preserve">It's generated by Visual Studio, and its main purpose is to initialize the elements declared in the XAML file.</target>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source xml:space="preserve">App.xaml.cs also contains methods to handle activation and suspension of the app.</source>
            <target xml:space="preserve">App.xaml.cs also contains methods to handle activation and suspension of the app.</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">MainPage.xaml</source>
            <target xml:space="preserve">MainPage.xaml</target>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source xml:space="preserve">In MainPage.xaml you define the UI for your app.</source>
            <target xml:space="preserve">In MainPage.xaml you define the UI for your app.</target>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source xml:space="preserve">You can add elements directly using XAML markup, or you can use the design tools provided by Visual Studio.</source>
            <target xml:space="preserve">You can add elements directly using XAML markup, or you can use the design tools provided by Visual Studio.</target>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source xml:space="preserve">MainPage.xaml.cs is the code-behind page for MainPage.xaml.</source>
            <target xml:space="preserve">MainPage.xaml.cs is the code-behind page for MainPage.xaml.</target>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source xml:space="preserve">It's where you add your app logic and event handlers.</source>
            <target xml:space="preserve">It's where you add your app logic and event handlers.</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">Together these two files define a new class called <pc dataRefEnd="id2" dataRefStart="id1" id="2">MainPage</pc>, which inherits from <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Page**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, in the <pc dataRefEnd="id10" dataRefStart="id9" id="6">HelloWorld</pc> namespace.</source>
            <target xml:space="preserve">Together these two files define a new class called <pc dataRefEnd="id2" dataRefStart="id1" id="2">MainPage</pc>, which inherits from <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Page**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, in the <pc dataRefEnd="id10" dataRefStart="id9" id="6">HelloWorld</pc> namespace.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">MainPage.xaml</source>
            <target xml:space="preserve">MainPage.xaml</target>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source xml:space="preserve">MainPage.xaml.cs</source>
            <target xml:space="preserve">MainPage.xaml.cs</target>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source xml:space="preserve">Modify the start page</source>
            <target xml:space="preserve">Modify the start page</target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">Now, let's add some content to the app.</source>
            <target xml:space="preserve">Now, let's add some content to the app.</target>
          </segment>
        </unit>
        <unit id="173">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="173">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To modify the start page</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To modify the start page</pc>
						</target>
          </segment>
        </unit>
        <unit id="174">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="174">
            <source xml:space="preserve">Double-click MainPage.xaml in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc> to open it.</source>
            <target xml:space="preserve">Double-click MainPage.xaml in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc> to open it.</target>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source xml:space="preserve">In the XAML editor, add the controls for the UI.</source>
            <target xml:space="preserve">In the XAML editor, add the controls for the UI.</target>
          </segment>
        </unit>
        <unit id="176">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="176">
            <source xml:space="preserve">In the root <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Grid**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, add this XAML.</source>
            <target xml:space="preserve">In the root <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Grid**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, add this XAML.</target>
          </segment>
        </unit>
        <unit id="177">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;strong&gt;</data>
            <data id="id14">&lt;/strong&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id21">&lt;link&gt;</data>
            <data id="id22">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id27">&lt;strong&gt;</data>
            <data id="id28">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="177">
            <source xml:space="preserve">It contains a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StackPanel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> with a title <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**TextBlock**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, a <pc dataRefEnd="id14" dataRefStart="id13" id="6">TextBlock</pc> that asks the user's name, a <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> element to accept the user's name, a <pc dataRefEnd="id22" dataRefStart="id21" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>, and another <pc dataRefEnd="id28" dataRefStart="id27" id="12">TextBlock</pc> to show a greeting.</source>
            <target xml:space="preserve">It contains a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StackPanel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> with a title <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**TextBlock**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, a <pc dataRefEnd="id14" dataRefStart="id13" id="6">TextBlock</pc> that asks the user's name, a <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> element to accept the user's name, a <pc dataRefEnd="id22" dataRefStart="id21" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>, and another <pc dataRefEnd="id28" dataRefStart="id27" id="12">TextBlock</pc> to show a greeting.</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">Some of these controls have names so that you can refer to them later in your code.</source>
            <target xml:space="preserve">Some of these controls have names so that you can refer to them later in your code.</target>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source xml:space="preserve">Step 3: Start the app</source>
            <target xml:space="preserve">Step 3: Start the app</target>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source xml:space="preserve">At this point, you've created a very simple app.</source>
            <target xml:space="preserve">At this point, you've created a very simple app.</target>
          </segment>
        </unit>
        <unit id="181">
          <segment state="initial" id="181">
            <source xml:space="preserve">This is a good time to build, deploy, and launch your app and see what it looks like.</source>
            <target xml:space="preserve">This is a good time to build, deploy, and launch your app and see what it looks like.</target>
          </segment>
        </unit>
        <unit id="182">
          <segment state="initial" id="182">
            <source xml:space="preserve">You can debug your app on the local machine, in a simulator or emulator, or on a remote device.</source>
            <target xml:space="preserve">You can debug your app on the local machine, in a simulator or emulator, or on a remote device.</target>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source xml:space="preserve">Here's the target device menu in Visual Studio.</source>
            <target xml:space="preserve">Here's the target device menu in Visual Studio.</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Drop-down list of device targets for debugging your app</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Drop-down list of device targets for debugging your app</pc>
						</target>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source xml:space="preserve">Start the app on a Desktop device</source>
            <target xml:space="preserve">Start the app on a Desktop device</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">By default, the app runs on the local machine.</source>
            <target xml:space="preserve">By default, the app runs on the local machine.</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">The target device menu provides several options for debugging your app on devices from the desktop device family.</source>
            <target xml:space="preserve">The target device menu provides several options for debugging your app on devices from the desktop device family.</target>
          </segment>
        </unit>
        <unit id="188">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="188">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Simulator</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Simulator</pc>
						</target>
          </segment>
        </unit>
        <unit id="189">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="189">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Local Machine</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Local Machine</pc>
						</target>
          </segment>
        </unit>
        <unit id="190">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="190">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Remote Machine</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Remote Machine</pc>
						</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To start debugging on the local machine</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To start debugging on the local machine</pc>
						</target>
          </segment>
        </unit>
        <unit id="192">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="192">
            <source xml:space="preserve">In the target device menu (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Start debugging menu</pc>) on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Standard</pc> toolbar, make sure that <pc dataRefEnd="id6" dataRefStart="id5" id="6">Local Machine</pc> is selected.</source>
            <target xml:space="preserve">In the target device menu (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Start debugging menu</pc>) on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Standard</pc> toolbar, make sure that <pc dataRefEnd="id6" dataRefStart="id5" id="6">Local Machine</pc> is selected.</target>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source xml:space="preserve">(It's the default selection.)</source>
            <target xml:space="preserve">(It's the default selection.)</target>
          </segment>
        </unit>
        <unit id="194">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="194">
            <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Start debugging button</pc>) on the toolbar.</source>
            <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Start debugging button</pc>) on the toolbar.</target>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="196">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="196">
            <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc>.</source>
            <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc>.</target>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="198">
          <segment state="initial" id="198">
            <source xml:space="preserve">Press F5.</source>
            <target xml:space="preserve">Press F5.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">The app opens in a window, and a default splash screen appears first.</source>
            <target xml:space="preserve">The app opens in a window, and a default splash screen appears first.</target>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source xml:space="preserve">The splash screen is defined by an image (SplashScreen.png) and a background color (specified in your app's manifest file).</source>
            <target xml:space="preserve">The splash screen is defined by an image (SplashScreen.png) and a background color (specified in your app's manifest file).</target>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source xml:space="preserve">The splash screen disappears, and then your app appears.</source>
            <target xml:space="preserve">The splash screen disappears, and then your app appears.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">It looks like this.</source>
            <target xml:space="preserve">It looks like this.</target>
          </segment>
        </unit>
        <unit id="203">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="203">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Initial app screen</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Initial app screen</pc>
						</target>
          </segment>
        </unit>
        <unit id="204">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="204">
            <source xml:space="preserve">Press the Windows key to open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu, then show all apps.</source>
            <target xml:space="preserve">Press the Windows key to open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu, then show all apps.</target>
          </segment>
        </unit>
        <unit id="205">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="205">
            <source xml:space="preserve">Notice that deploying the app locally adds its tile to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu.</source>
            <target xml:space="preserve">Notice that deploying the app locally adds its tile to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu.</target>
          </segment>
        </unit>
        <unit id="206">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="206">
            <source xml:space="preserve">To run the app again (not in debugging mode), tap or click its tile in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu.</source>
            <target xml:space="preserve">To run the app again (not in debugging mode), tap or click its tile in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu.</target>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source xml:space="preserve">It doesn't do much—yet—but congratulations, you've built your first UWP app!</source>
            <target xml:space="preserve">It doesn't do much—yet—but congratulations, you've built your first UWP app!</target>
          </segment>
        </unit>
        <unit id="208">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="208">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To stop debugging</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To stop debugging</pc>
						</target>
          </segment>
        </unit>
        <unit id="209">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="209">
            <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Stop Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop debugging button</pc>) in the toolbar.</source>
            <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Stop Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop debugging button</pc>) in the toolbar.</target>
          </segment>
        </unit>
        <unit id="210">
          <segment state="initial" id="210">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="211">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="211">
            <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop debugging</pc>.</source>
            <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop debugging</pc>.</target>
          </segment>
        </unit>
        <unit id="212">
          <segment state="initial" id="212">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="213">
          <segment state="initial" id="213">
            <source xml:space="preserve">Close the app window.</source>
            <target xml:space="preserve">Close the app window.</target>
          </segment>
        </unit>
        <unit id="214">
          <segment state="initial" id="214">
            <source xml:space="preserve">Start the app on a mobile device emulator</source>
            <target xml:space="preserve">Start the app on a mobile device emulator</target>
          </segment>
        </unit>
        <unit id="215">
          <segment state="initial" id="215">
            <source xml:space="preserve">Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</source>
            <target xml:space="preserve">Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</target>
          </segment>
        </unit>
        <unit id="216">
          <segment state="initial" id="216">
            <source xml:space="preserve">In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</source>
            <target xml:space="preserve">In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</target>
          </segment>
        </unit>
        <unit id="217">
          <segment state="initial" id="217">
            <source xml:space="preserve">You can choose among emulators for devices with different memory and display configurations.</source>
            <target xml:space="preserve">You can choose among emulators for devices with different memory and display configurations.</target>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Device</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Device</pc>
						</target>
          </segment>
        </unit>
        <unit id="219">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="219">
            <source xml:space="preserve">**Emulator <pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc> WVGA 4 inch 512MB**</source>
            <target xml:space="preserve">**Emulator <pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc> WVGA 4 inch 512MB**</target>
          </segment>
        </unit>
        <unit id="220">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="220">
            <source xml:space="preserve">**Emulator <pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc> WVGA 4 inch 1GB**</source>
            <target xml:space="preserve">**Emulator <pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc> WVGA 4 inch 1GB**</target>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source xml:space="preserve">etc... (Various emulators in other configurations)</source>
            <target xml:space="preserve">etc... (Various emulators in other configurations)</target>
          </segment>
        </unit>
        <unit id="222">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="222">
            <source xml:space="preserve">It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc> option.</source>
            <target xml:space="preserve">It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc> option.</target>
          </segment>
        </unit>
        <unit id="223">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="223">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To start debugging on a mobile device emulator</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To start debugging on a mobile device emulator</pc>
						</target>
          </segment>
        </unit>
        <unit id="224">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="224">
            <source xml:space="preserve">In the target device menu (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Start debugging menu</pc>) on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="6">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc>.</source>
            <target xml:space="preserve">In the target device menu (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Start debugging menu</pc>) on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="6">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc>.</target>
          </segment>
        </unit>
        <unit id="225">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="225">
            <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Start debugging button</pc>) in the toolbar.</source>
            <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Start debugging button</pc>) in the toolbar.</target>
          </segment>
        </unit>
        <unit id="226">
          <segment state="initial" id="226">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="227">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="227">
            <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc>.</source>
            <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc>.</target>
          </segment>
        </unit>
        <unit id="228">
          <segment state="initial" id="228">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="229">
          <segment state="initial" id="229">
            <source xml:space="preserve">Press F5.</source>
            <target xml:space="preserve">Press F5.</target>
          </segment>
        </unit>
        <unit id="230">
          <segment state="initial" id="230">
            <source xml:space="preserve">Visual Studio starts the selected emulator and then deploys and starts your app.</source>
            <target xml:space="preserve">Visual Studio starts the selected emulator and then deploys and starts your app.</target>
          </segment>
        </unit>
        <unit id="231">
          <segment state="initial" id="231">
            <source xml:space="preserve">On the mobile device emulator, the app looks like this.</source>
            <target xml:space="preserve">On the mobile device emulator, the app looks like this.</target>
          </segment>
        </unit>
        <unit id="232">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="232">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Initial app screen on mobile device</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Initial app screen on mobile device</pc>
						</target>
          </segment>
        </unit>
        <unit id="233">
          <segment state="initial" id="233">
            <source xml:space="preserve">The first thing you'll notice is the button is pushed off the smaller screen of a mobile device.</source>
            <target xml:space="preserve">The first thing you'll notice is the button is pushed off the smaller screen of a mobile device.</target>
          </segment>
        </unit>
        <unit id="234">
          <segment state="initial" id="234">
            <source xml:space="preserve">Later in this tutorial, you'll learn how to adapt the UI to different screen sizes so your app always looks good.</source>
            <target xml:space="preserve">Later in this tutorial, you'll learn how to adapt the UI to different screen sizes so your app always looks good.</target>
          </segment>
        </unit>
        <unit id="235">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="235">
            <source xml:space="preserve">You might also notice that you can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, but right now, clicking or tapping the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> doesn't do anything.</source>
            <target xml:space="preserve">You might also notice that you can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, but right now, clicking or tapping the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> doesn't do anything.</target>
          </segment>
        </unit>
        <unit id="236">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="236">
            <source xml:space="preserve">In the next steps, you create an event handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event to display a personalized greeting.</source>
            <target xml:space="preserve">In the next steps, you create an event handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event to display a personalized greeting.</target>
          </segment>
        </unit>
        <unit id="237">
          <segment state="initial" id="237">
            <source xml:space="preserve">You add the event handler code to your MainPage.xaml.cs file.</source>
            <target xml:space="preserve">You add the event handler code to your MainPage.xaml.cs file.</target>
          </segment>
        </unit>
        <unit id="238">
          <segment state="initial" id="238">
            <source xml:space="preserve">Step 4: Create an event handler</source>
            <target xml:space="preserve">Step 4: Create an event handler</target>
          </segment>
        </unit>
        <unit id="239">
          <segment state="initial" id="239">
            <source xml:space="preserve">XAML elements can send messages when certain events occur.</source>
            <target xml:space="preserve">XAML elements can send messages when certain events occur.</target>
          </segment>
        </unit>
        <unit id="240">
          <segment state="initial" id="240">
            <source xml:space="preserve">These event messages give you the opportunity to take some action in response to the event.</source>
            <target xml:space="preserve">These event messages give you the opportunity to take some action in response to the event.</target>
          </segment>
        </unit>
        <unit id="241">
          <segment state="initial" id="241">
            <source xml:space="preserve">You put your code to respond to the event in an event handler method.</source>
            <target xml:space="preserve">You put your code to respond to the event in an event handler method.</target>
          </segment>
        </unit>
        <unit id="242">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="242">
            <source xml:space="preserve">One of the most common events in many apps is a user clicking a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">One of the most common events in many apps is a user clicking a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="243">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="243">
            <source xml:space="preserve">Let's create an event handler for your button's <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event.</source>
            <target xml:space="preserve">Let's create an event handler for your button's <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event.</target>
          </segment>
        </unit>
        <unit id="244">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
            <data id="id11">&lt;link&gt;</data>
            <data id="id12">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="244">
            <source xml:space="preserve">The event handler will get the user's name from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nameInput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control and use it to output a greeting to the <pc dataRefEnd="id10" dataRefStart="id9" id="6">greetingOutput</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**TextBlock**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The event handler will get the user's name from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nameInput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control and use it to output a greeting to the <pc dataRefEnd="id10" dataRefStart="id9" id="6">greetingOutput</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**TextBlock**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="245">
          <segment state="initial" id="245">
            <source xml:space="preserve">Using events that work for touch, mouse, and pen input</source>
            <target xml:space="preserve">Using events that work for touch, mouse, and pen input</target>
          </segment>
        </unit>
        <unit id="246">
          <segment state="initial" id="246">
            <source xml:space="preserve">What events should you handle?</source>
            <target xml:space="preserve">What events should you handle?</target>
          </segment>
        </unit>
        <unit id="247">
          <segment state="initial" id="247">
            <source xml:space="preserve">Because they can run on a variety of devices, design your Windows Store apps with touch input in mind.</source>
            <target xml:space="preserve">Because they can run on a variety of devices, design your Windows Store apps with touch input in mind.</target>
          </segment>
        </unit>
        <unit id="248">
          <segment state="initial" id="248">
            <source xml:space="preserve">Your app must also be able to handle input from a mouse or a stylus.</source>
            <target xml:space="preserve">Your app must also be able to handle input from a mouse or a stylus.</target>
          </segment>
        </unit>
        <unit id="249">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="249">
            <source xml:space="preserve">Fortunately, events such as <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DoubleTapped**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> are device-independent.</source>
            <target xml:space="preserve">Fortunately, events such as <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DoubleTapped**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> are device-independent.</target>
          </segment>
        </unit>
        <unit id="250">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="250">
            <source xml:space="preserve">If you're familiar with Microsoft .NET programming, you might have seen separate events for mouse, touch, and stylus input, like <pc dataRefEnd="id2" dataRefStart="id1" id="2">MouseMove</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">TouchMove</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">StylusMove</pc>.</source>
            <target xml:space="preserve">If you're familiar with Microsoft .NET programming, you might have seen separate events for mouse, touch, and stylus input, like <pc dataRefEnd="id2" dataRefStart="id1" id="2">MouseMove</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">TouchMove</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">StylusMove</pc>.</target>
          </segment>
        </unit>
        <unit id="251">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="251">
            <source xml:space="preserve">In Windows Store apps, these separate events are replaced with a single <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PointerMoved**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event that works equally well for touch, mouse, and stylus input.</source>
            <target xml:space="preserve">In Windows Store apps, these separate events are replaced with a single <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PointerMoved**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event that works equally well for touch, mouse, and stylus input.</target>
          </segment>
        </unit>
        <unit id="252">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="252">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To add an event handler</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To add an event handler</pc>
						</target>
          </segment>
        </unit>
        <unit id="253">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="253">
            <source xml:space="preserve">In XAML or design view, select the "Say Hello" <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that you added to MainPage.xaml.</source>
            <target xml:space="preserve">In XAML or design view, select the "Say Hello" <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that you added to MainPage.xaml.</target>
          </segment>
        </unit>
        <unit id="254">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="254">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties Window</pc>, click the Events button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Events button</pc>).</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties Window</pc>, click the Events button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Events button</pc>).</target>
          </segment>
        </unit>
        <unit id="255">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="255">
            <source xml:space="preserve">Find the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event at the top of the event list.</source>
            <target xml:space="preserve">Find the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event at the top of the event list.</target>
          </segment>
        </unit>
        <unit id="256">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="256">
            <source xml:space="preserve">In the text box for the event, type the name of the function that handles the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc> event.</source>
            <target xml:space="preserve">In the text box for the event, type the name of the function that handles the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc> event.</target>
          </segment>
        </unit>
        <unit id="257">
          <segment state="initial" id="257">
            <source xml:space="preserve">For this example, type "Button\_Click".</source>
            <target xml:space="preserve">For this example, type "Button\_Click".</target>
          </segment>
        </unit>
        <unit id="258">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="258">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Events list in the properties window</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Events list in the properties window</pc>
						</target>
          </segment>
        </unit>
        <unit id="259">
          <segment state="initial" id="259">
            <source xml:space="preserve">Press Enter.</source>
            <target xml:space="preserve">Press Enter.</target>
          </segment>
        </unit>
        <unit id="260">
          <segment state="initial" id="260">
            <source xml:space="preserve">The event handler method is created and opened in the code editor so you can add code to be executed when the event occurs.</source>
            <target xml:space="preserve">The event handler method is created and opened in the code editor so you can add code to be executed when the event occurs.</target>
          </segment>
        </unit>
        <unit id="261">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="261">
            <source xml:space="preserve">In the XAML editor, the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is updated to declare the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> event handler like this.</source>
            <target xml:space="preserve">In the XAML editor, the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is updated to declare the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> event handler like this.</target>
          </segment>
        </unit>
        <unit id="262">
          <segment state="initial" id="262">
            <source xml:space="preserve">Add code to the event handler that you created in the code-behind page.</source>
            <target xml:space="preserve">Add code to the event handler that you created in the code-behind page.</target>
          </segment>
        </unit>
        <unit id="263">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="263">
            <source xml:space="preserve">In the event handler, retrieve the user's name from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nameInput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control and use it to create a greeting.</source>
            <target xml:space="preserve">In the event handler, retrieve the user's name from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nameInput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control and use it to create a greeting.</target>
          </segment>
        </unit>
        <unit id="264">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="264">
            <source xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">greetingOutput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**TextBlock**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to display the result.</source>
            <target xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">greetingOutput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**TextBlock**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to display the result.</target>
          </segment>
        </unit>
        <unit id="265">
          <segment state="initial" id="265">
            <source xml:space="preserve">Debug the app on the local machine.</source>
            <target xml:space="preserve">Debug the app on the local machine.</target>
          </segment>
        </unit>
        <unit id="266">
          <segment state="initial" id="266">
            <source xml:space="preserve">When you enter your name in the text box and click the button, the app displays a personalized greeting.</source>
            <target xml:space="preserve">When you enter your name in the text box and click the button, the app displays a personalized greeting.</target>
          </segment>
        </unit>
        <unit id="267">
          <segment state="initial" id="267">
            <source xml:space="preserve">Step 5: Adapt the UI to different window sizes</source>
            <target xml:space="preserve">Step 5: Adapt the UI to different window sizes</target>
          </segment>
        </unit>
        <unit id="268">
          <segment state="initial" id="268">
            <source xml:space="preserve">Now we'll make the UI adapt to different screen sizes so it looks good on mobile devices.</source>
            <target xml:space="preserve">Now we'll make the UI adapt to different screen sizes so it looks good on mobile devices.</target>
          </segment>
        </unit>
        <unit id="269">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="269">
            <source xml:space="preserve">To do this, you add a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**VisualStateManager**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and set properties that are applied for different visual states.</source>
            <target xml:space="preserve">To do this, you add a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**VisualStateManager**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and set properties that are applied for different visual states.</target>
          </segment>
        </unit>
        <unit id="270">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="270">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To adjust the UI layout</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To adjust the UI layout</pc>
						</target>
          </segment>
        </unit>
        <unit id="271">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="271">
            <source xml:space="preserve">In the XAML editor, add this block of XAML after the opening tag of the root <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Grid**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element.</source>
            <target xml:space="preserve">In the XAML editor, add this block of XAML after the opening tag of the root <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Grid**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element.</target>
          </segment>
        </unit>
        <unit id="272">
          <segment state="initial" id="272">
            <source xml:space="preserve">Debug the app on the local machine.</source>
            <target xml:space="preserve">Debug the app on the local machine.</target>
          </segment>
        </unit>
        <unit id="273">
          <segment state="initial" id="273">
            <source xml:space="preserve">Notice that the UI looks the same as before unless the window gets narrower than 641 pixels.</source>
            <target xml:space="preserve">Notice that the UI looks the same as before unless the window gets narrower than 641 pixels.</target>
          </segment>
        </unit>
        <unit id="274">
          <segment state="initial" id="274">
            <source xml:space="preserve">Debug the app on the mobile device emulator.</source>
            <target xml:space="preserve">Debug the app on the mobile device emulator.</target>
          </segment>
        </unit>
        <unit id="275">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="275">
            <source xml:space="preserve">Notice that the UI uses the properties you defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">narrowState</pc> and appears correctly on the small screen.</source>
            <target xml:space="preserve">Notice that the UI uses the properties you defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">narrowState</pc> and appears correctly on the small screen.</target>
          </segment>
        </unit>
        <unit id="276">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="276">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Mobile app screen</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Mobile app screen</pc>
						</target>
          </segment>
        </unit>
        <unit id="277">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="277">
            <source xml:space="preserve">If you've used a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**VisualStateManager**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> in previous versions of XAML, you might notice that the XAML here uses a simplified syntax.</source>
            <target xml:space="preserve">If you've used a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**VisualStateManager**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> in previous versions of XAML, you might notice that the XAML here uses a simplified syntax.</target>
          </segment>
        </unit>
        <unit id="278">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="278">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**VisualState**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> named <pc dataRefEnd="id8" dataRefStart="id7" id="4">wideState</pc> has an <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**AdaptiveTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> with its <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**MinWindowWidth**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> property set to 641.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**VisualState**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> named <pc dataRefEnd="id8" dataRefStart="id7" id="4">wideState</pc> has an <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**AdaptiveTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> with its <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**MinWindowWidth**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> property set to 641.</target>
          </segment>
        </unit>
        <unit id="279">
          <segment state="initial" id="279">
            <source xml:space="preserve">This means that the state is to be applied only when the window width is not less than the minimum of 641 pixels.</source>
            <target xml:space="preserve">This means that the state is to be applied only when the window width is not less than the minimum of 641 pixels.</target>
          </segment>
        </unit>
        <unit id="280">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="280">
            <source xml:space="preserve">You don't define any <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Setter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> objects for this state, so it uses the layout properties you defined in the XAML for the page content.</source>
            <target xml:space="preserve">You don't define any <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Setter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> objects for this state, so it uses the layout properties you defined in the XAML for the page content.</target>
          </segment>
        </unit>
        <unit id="281">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="281">
            <source xml:space="preserve">The second <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**VisualState**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4">narrowState</pc>, has an <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**AdaptiveTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> with its <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**MinWindowWidth**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> property set to 0.</source>
            <target xml:space="preserve">The second <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**VisualState**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4">narrowState</pc>, has an <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**AdaptiveTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> with its <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**MinWindowWidth**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> property set to 0.</target>
          </segment>
        </unit>
        <unit id="282">
          <segment state="initial" id="282">
            <source xml:space="preserve">This state is applied when the window width is greater than 0, but less than 641 pixels.</source>
            <target xml:space="preserve">This state is applied when the window width is greater than 0, but less than 641 pixels.</target>
          </segment>
        </unit>
        <unit id="283">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="283">
            <source xml:space="preserve">(At 641 pixels, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">wideState</pc> is applied.)</source>
            <target xml:space="preserve">(At 641 pixels, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">wideState</pc> is applied.)</target>
          </segment>
        </unit>
        <unit id="284">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="284">
            <source xml:space="preserve">In this state, you do define some <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Setter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> objects to change the layout properties of controls in the UI:</source>
            <target xml:space="preserve">In this state, you do define some <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Setter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> objects to change the layout properties of controls in the UI:</target>
          </segment>
        </unit>
        <unit id="285">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
            <data id="id11">&lt;strong&gt;</data>
            <data id="id12">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="285">
            <source xml:space="preserve">You change the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Orientation**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> of the <pc dataRefEnd="id8" dataRefStart="id7" id="4">inputPanel</pc> element from <pc dataRefEnd="id10" dataRefStart="id9" id="6">Horizontal</pc> to <pc dataRefEnd="id12" dataRefStart="id11" id="8">Vertical</pc>.</source>
            <target xml:space="preserve">You change the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Orientation**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> of the <pc dataRefEnd="id8" dataRefStart="id7" id="4">inputPanel</pc> element from <pc dataRefEnd="id10" dataRefStart="id9" id="6">Horizontal</pc> to <pc dataRefEnd="id12" dataRefStart="id11" id="8">Vertical</pc>.</target>
          </segment>
        </unit>
        <unit id="286">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="286">
            <source xml:space="preserve">You add a top margin of 4 to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">inputButton</pc> element.</source>
            <target xml:space="preserve">You add a top margin of 4 to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">inputButton</pc> element.</target>
          </segment>
        </unit>
        <unit id="287">
          <segment state="initial" id="287">
            <source xml:space="preserve">Summary</source>
            <target xml:space="preserve">Summary</target>
          </segment>
        </unit>
        <unit id="288">
          <segment state="initial" id="288">
            <source xml:space="preserve">Congratulations, you've created your first app for Windows 10 and the UWP!</source>
            <target xml:space="preserve">Congratulations, you've created your first app for Windows 10 and the UWP!</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>