<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">e4782444dda3df8c9940f2f2ae6d897b90474738</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Optimize suspend/resume</source>
            <target xml:space="preserve">Optimize suspend/resume</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Create Universal Windows Platform (UWP) apps that streamline their use of the process lifetime system to resume efficiently after suspension or termination.</source>
            <target xml:space="preserve">Create Universal Windows Platform (UWP) apps that streamline their use of the process lifetime system to resume efficiently after suspension or termination.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">Launch</source>
            <target xml:space="preserve">Launch</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">When reactivating an app following suspend/terminate, check to see if a long time has elapsed.</source>
            <target xml:space="preserve">When reactivating an app following suspend/terminate, check to see if a long time has elapsed.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">If so, consider returning to the main landing page of the app instead of showing the user stale data.</source>
            <target xml:space="preserve">If so, consider returning to the main landing page of the app instead of showing the user stale data.</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">This will also result in faster startup.</source>
            <target xml:space="preserve">This will also result in faster startup.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">During activation, always check the PreviousExecutionState of the event args parameter (for example, for launched activations check LaunchActivatedEventArgs.PreviousExecutionState).</source>
            <target xml:space="preserve">During activation, always check the PreviousExecutionState of the event args parameter (for example, for launched activations check LaunchActivatedEventArgs.PreviousExecutionState).</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">If the value is ClosedByUser or NotRunning, don’t waste time restoring previously saved state.</source>
            <target xml:space="preserve">If the value is ClosedByUser or NotRunning, don’t waste time restoring previously saved state.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">In this case, the right thing is to provide a fresh experience – and it will result in faster startup.</source>
            <target xml:space="preserve">In this case, the right thing is to provide a fresh experience – and it will result in faster startup.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">Instead of eagerly restoring previously saved state, consider keep track of that state, and only restoring it on demand.</source>
            <target xml:space="preserve">Instead of eagerly restoring previously saved state, consider keep track of that state, and only restoring it on demand.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">For example, consider a situation where your app was previously suspended, saved state for 3 pages, and was then terminated.</source>
            <target xml:space="preserve">For example, consider a situation where your app was previously suspended, saved state for 3 pages, and was then terminated.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">Upon relaunch, if you decide to return the user to the 3rd page, do not eagerly restore the state for the first 2 pages.</source>
            <target xml:space="preserve">Upon relaunch, if you decide to return the user to the 3rd page, do not eagerly restore the state for the first 2 pages.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">Instead, hold on to this state and only use it once you know you need it.</source>
            <target xml:space="preserve">Instead, hold on to this state and only use it once you know you need it.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">While running</source>
            <target xml:space="preserve">While running</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">As a best practice, don’t wait for the suspend event and then persist a large amount of state.</source>
            <target xml:space="preserve">As a best practice, don’t wait for the suspend event and then persist a large amount of state.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">Instead, your application should incrementally persist smaller amounts of state as it runs.</source>
            <target xml:space="preserve">Instead, your application should incrementally persist smaller amounts of state as it runs.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">This is especially important for large apps that are at risk of running out of time during suspend if they try to save everything at once.</source>
            <target xml:space="preserve">This is especially important for large apps that are at risk of running out of time during suspend if they try to save everything at once.</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">However, you need to find a good balance between incremental saving and performance of your app while running.</source>
            <target xml:space="preserve">However, you need to find a good balance between incremental saving and performance of your app while running.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">A good tradeoff is to incrementally keep track of the data that has changed (and therefore needs to be saved) – and use the suspend event to actually save that data (which is faster than saving all data or examining the entire state of app to decide what to save).</source>
            <target xml:space="preserve">A good tradeoff is to incrementally keep track of the data that has changed (and therefore needs to be saved) – and use the suspend event to actually save that data (which is faster than saving all data or examining the entire state of app to decide what to save).</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Don’t use the window Activated or VisibilityChanged events to decide when to save state.</source>
            <target xml:space="preserve">Don’t use the window Activated or VisibilityChanged events to decide when to save state.</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">When the user switches away from your app, the window is deactivated, but the system waits a short amount of time (about 10 seconds) before suspending the app.</source>
            <target xml:space="preserve">When the user switches away from your app, the window is deactivated, but the system waits a short amount of time (about 10 seconds) before suspending the app.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">This is to give a more responsive experience in case the user switches back to your app rapidly.</source>
            <target xml:space="preserve">This is to give a more responsive experience in case the user switches back to your app rapidly.</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">Wait for the suspend event before running suspend logic.</source>
            <target xml:space="preserve">Wait for the suspend event before running suspend logic.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">Suspend</source>
            <target xml:space="preserve">Suspend</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">During suspend, reduce the footprint of your app.</source>
            <target xml:space="preserve">During suspend, reduce the footprint of your app.</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">If your app uses less memory while suspended, the overall system will be more responsive and fewer suspended apps (including yours) will be terminated.</source>
            <target xml:space="preserve">If your app uses less memory while suspended, the overall system will be more responsive and fewer suspended apps (including yours) will be terminated.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">However, balance this with the need for snappy resumes: don’t reduce footprint so much that resume slows down considerably while your app reloads lots of data into memory.</source>
            <target xml:space="preserve">However, balance this with the need for snappy resumes: don’t reduce footprint so much that resume slows down considerably while your app reloads lots of data into memory.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">For managed apps, the system will run a garbage collection pass after the app’s suspend handlers complete.</source>
            <target xml:space="preserve">For managed apps, the system will run a garbage collection pass after the app’s suspend handlers complete.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">Make sure to take advantage of this by releasing references to objects that will help reduce the app’s footprint while suspended.</source>
            <target xml:space="preserve">Make sure to take advantage of this by releasing references to objects that will help reduce the app’s footprint while suspended.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Ideally, your app will finish with suspend logic in less than 1 second.</source>
            <target xml:space="preserve">Ideally, your app will finish with suspend logic in less than 1 second.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">The faster you can suspend, the better – that will result in a snappier user experience for other apps and parts of the system.</source>
            <target xml:space="preserve">The faster you can suspend, the better – that will result in a snappier user experience for other apps and parts of the system.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">If you must, your suspend logic can take up to 5 seconds on desktop devices or 10 seconds on mobile devices.</source>
            <target xml:space="preserve">If you must, your suspend logic can take up to 5 seconds on desktop devices or 10 seconds on mobile devices.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">If those times are exceeded, your app will be abruptly terminated.</source>
            <target xml:space="preserve">If those times are exceeded, your app will be abruptly terminated.</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">You don’t want this to happen – because if it does, when the user switches back to your app, a new process will be launched and the experience will feel much slower compared to resuming a suspended app.</source>
            <target xml:space="preserve">You don’t want this to happen – because if it does, when the user switches back to your app, a new process will be launched and the experience will feel much slower compared to resuming a suspended app.</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">Resume</source>
            <target xml:space="preserve">Resume</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">Most apps don’t need to do anything special when resumed, so typically you won’t handle this event.</source>
            <target xml:space="preserve">Most apps don’t need to do anything special when resumed, so typically you won’t handle this event.</target>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source xml:space="preserve">Some apps use resume to restore connections that were closed during suspend, or to refresh data that may be stale.</source>
            <target xml:space="preserve">Some apps use resume to restore connections that were closed during suspend, or to refresh data that may be stale.</target>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source xml:space="preserve">Instead of doing this kind of work eagerly, design your app to initiate these activities on demand.</source>
            <target xml:space="preserve">Instead of doing this kind of work eagerly, design your app to initiate these activities on demand.</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">This will result in a faster experience when the user switches back to a suspended app, and ensures that you’re only doing work the user really needs.</source>
            <target xml:space="preserve">This will result in a faster experience when the user switches back to a suspended app, and ensures that you’re only doing work the user really needs.</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">Avoid unnecessary termination</source>
            <target xml:space="preserve">Avoid unnecessary termination</target>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source xml:space="preserve">The UWP process lifetime system can suspend or terminate an app for a variety of reasons.</source>
            <target xml:space="preserve">The UWP process lifetime system can suspend or terminate an app for a variety of reasons.</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">This process is designed to quickly return an app to the state it was in before it was suspended or terminated.</source>
            <target xml:space="preserve">This process is designed to quickly return an app to the state it was in before it was suspended or terminated.</target>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source xml:space="preserve">When done well, the user won’t be aware that the app ever stopped running.</source>
            <target xml:space="preserve">When done well, the user won’t be aware that the app ever stopped running.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">Here are a few tricks that your UWP app can use to help the system streamline transitions in an app’s lifetime.</source>
            <target xml:space="preserve">Here are a few tricks that your UWP app can use to help the system streamline transitions in an app’s lifetime.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">An app can be suspended when the user moves it to the background or when the system enters a low power state.</source>
            <target xml:space="preserve">An app can be suspended when the user moves it to the background or when the system enters a low power state.</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">When the app is being suspended, it raises the suspending event and has up to 5 seconds to save its data.</source>
            <target xml:space="preserve">When the app is being suspended, it raises the suspending event and has up to 5 seconds to save its data.</target>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source xml:space="preserve">If the app's suspending event handler doesn't complete within 5 seconds, the system assumes the app has stopped responding and terminates it.</source>
            <target xml:space="preserve">If the app's suspending event handler doesn't complete within 5 seconds, the system assumes the app has stopped responding and terminates it.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">A terminated app has to go through the long startup process again instead of being immediately loaded into memory when a user switches to it.</source>
            <target xml:space="preserve">A terminated app has to go through the long startup process again instead of being immediately loaded into memory when a user switches to it.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">Serialize only when necessary</source>
            <target xml:space="preserve">Serialize only when necessary</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">Many apps serialize all their data on suspension.</source>
            <target xml:space="preserve">Many apps serialize all their data on suspension.</target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">If you only need to store a small amount of app settings data, however, you should use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**LocalSettings**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> store instead of serializing the data.</source>
            <target xml:space="preserve">If you only need to store a small amount of app settings data, however, you should use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**LocalSettings**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> store instead of serializing the data.</target>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source xml:space="preserve">Use serialization for larger amounts of data and for non-settings data.</source>
            <target xml:space="preserve">Use serialization for larger amounts of data and for non-settings data.</target>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source xml:space="preserve">When you do serialize your data, you should avoid reserializing if it hasn't changed.</source>
            <target xml:space="preserve">When you do serialize your data, you should avoid reserializing if it hasn't changed.</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">It takes extra time to serialize and save the data, plus extra time to read and deserialize it when the app is activated again.</source>
            <target xml:space="preserve">It takes extra time to serialize and save the data, plus extra time to read and deserialize it when the app is activated again.</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">Instead, we recommend that the app determine if its state has actually changed, and if so, serialize and deserialize only the data that changed.</source>
            <target xml:space="preserve">Instead, we recommend that the app determine if its state has actually changed, and if so, serialize and deserialize only the data that changed.</target>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source xml:space="preserve">A good way to ensure that this happens is to periodically serialize data in the background after it changes.</source>
            <target xml:space="preserve">A good way to ensure that this happens is to periodically serialize data in the background after it changes.</target>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source xml:space="preserve">When you use this technique, everything that needs to be serialized at suspension has already been saved so there is no work to do and an app suspends quickly.</source>
            <target xml:space="preserve">When you use this technique, everything that needs to be serialized at suspension has already been saved so there is no work to do and an app suspends quickly.</target>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source xml:space="preserve">Serializing data in C\# and Visual Basic</source>
            <target xml:space="preserve">Serializing data in C\# and Visual Basic</target>
          </segment>
        </unit>
        <unit id="161">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="161">
            <source xml:space="preserve">The available choices of serialization technology for .NET apps are the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**System.Xml.Serialization.XmlSerializer**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**System.Runtime.Serialization.DataContractSerializer**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**System.Runtime.Serialization.Json.DataContractJsonSerializer**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> classes.</source>
            <target xml:space="preserve">The available choices of serialization technology for .NET apps are the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**System.Xml.Serialization.XmlSerializer**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**System.Runtime.Serialization.DataContractSerializer**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**System.Runtime.Serialization.Json.DataContractJsonSerializer**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> classes.</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">From a performance perspective, we recommend using the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**XmlSerializer**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class.</source>
            <target xml:space="preserve">From a performance perspective, we recommend using the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**XmlSerializer**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class.</target>
          </segment>
        </unit>
        <unit id="163">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="163">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">XmlSerializer</pc> has the lowest serialization and deserialization times, and maintains a low memory footprint.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">XmlSerializer</pc> has the lowest serialization and deserialization times, and maintains a low memory footprint.</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">XmlSerializer</pc> has few dependencies on the .NET framework; this means that compared with the other serialization technologies, fewer modules need to be loaded into your app to use the <pc dataRefEnd="id4" dataRefStart="id3" id="4">XmlSerializer</pc>.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">XmlSerializer</pc> has few dependencies on the .NET framework; this means that compared with the other serialization technologies, fewer modules need to be loaded into your app to use the <pc dataRefEnd="id4" dataRefStart="id3" id="4">XmlSerializer</pc>.</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DataContractSerializer**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> makes it easier to serialize custom classes, although it has a larger performance impact than <pc dataRefEnd="id8" dataRefStart="id7" id="3">XmlSerializer</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DataContractSerializer**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> makes it easier to serialize custom classes, although it has a larger performance impact than <pc dataRefEnd="id8" dataRefStart="id7" id="3">XmlSerializer</pc>.</target>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source xml:space="preserve">If you need better performance, consider switching.</source>
            <target xml:space="preserve">If you need better performance, consider switching.</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">In general, you should not load more than one serializer, and you should prefer <pc dataRefEnd="id2" dataRefStart="id1" id="2">XmlSerializer</pc> unless you need the features of another serializer.</source>
            <target xml:space="preserve">In general, you should not load more than one serializer, and you should prefer <pc dataRefEnd="id2" dataRefStart="id1" id="2">XmlSerializer</pc> unless you need the features of another serializer.</target>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source xml:space="preserve">Reduce memory footprint</source>
            <target xml:space="preserve">Reduce memory footprint</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">The system tries to keep as many suspended apps in memory as possible so that users can quickly and reliably switch between them.</source>
            <target xml:space="preserve">The system tries to keep as many suspended apps in memory as possible so that users can quickly and reliably switch between them.</target>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source xml:space="preserve">When an app is suspended and stays in the system's memory, it can quickly be brought to the foreground for the user to interact with, without having to display a splash screen or perform a lengthy load operation.</source>
            <target xml:space="preserve">When an app is suspended and stays in the system's memory, it can quickly be brought to the foreground for the user to interact with, without having to display a splash screen or perform a lengthy load operation.</target>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source xml:space="preserve">If there aren't enough resources to keep an app in memory, the app is terminated.</source>
            <target xml:space="preserve">If there aren't enough resources to keep an app in memory, the app is terminated.</target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">This makes memory management important for two reasons:</source>
            <target xml:space="preserve">This makes memory management important for two reasons:</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">Freeing as much memory as possible at suspension minimizes the chances that your app is terminated because of lack of resources while it’s suspended.</source>
            <target xml:space="preserve">Freeing as much memory as possible at suspension minimizes the chances that your app is terminated because of lack of resources while it’s suspended.</target>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source xml:space="preserve">Reducing the overall amount of memory your app uses reduces the chances that other apps are terminated while they are suspended.</source>
            <target xml:space="preserve">Reducing the overall amount of memory your app uses reduces the chances that other apps are terminated while they are suspended.</target>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source xml:space="preserve">Release resources</source>
            <target xml:space="preserve">Release resources</target>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source xml:space="preserve">Certain objects, such as files and devices, occupy a large amount of memory.</source>
            <target xml:space="preserve">Certain objects, such as files and devices, occupy a large amount of memory.</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">We recommend that during suspension, an app release handles to these objects and recreate them when needed.</source>
            <target xml:space="preserve">We recommend that during suspension, an app release handles to these objects and recreate them when needed.</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">This is also a good time to purge any caches that won’t be valid when the app is resumed.</source>
            <target xml:space="preserve">This is also a good time to purge any caches that won’t be valid when the app is resumed.</target>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source xml:space="preserve">An additional step the XAML framework runs on your behalf for C\# and Visual Basic apps is garbage collection if it is necessary.</source>
            <target xml:space="preserve">An additional step the XAML framework runs on your behalf for C\# and Visual Basic apps is garbage collection if it is necessary.</target>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source xml:space="preserve">This ensures any objects no longer referenced in app code are released.</source>
            <target xml:space="preserve">This ensures any objects no longer referenced in app code are released.</target>
          </segment>
        </unit>
        <unit id="181">
          <segment state="initial" id="181">
            <source xml:space="preserve">Resume quickly</source>
            <target xml:space="preserve">Resume quickly</target>
          </segment>
        </unit>
        <unit id="182">
          <segment state="initial" id="182">
            <source xml:space="preserve">A suspended app can be resumed when the user moves it to the foreground or when the system comes out of a low power state.</source>
            <target xml:space="preserve">A suspended app can be resumed when the user moves it to the foreground or when the system comes out of a low power state.</target>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source xml:space="preserve">When an app is resumed from the suspended state, it continues from where it was when it was suspended.</source>
            <target xml:space="preserve">When an app is resumed from the suspended state, it continues from where it was when it was suspended.</target>
          </segment>
        </unit>
        <unit id="184">
          <segment state="initial" id="184">
            <source xml:space="preserve">No app data is lost because it was stored in memory, even if the app was suspended for a long period of time.</source>
            <target xml:space="preserve">No app data is lost because it was stored in memory, even if the app was suspended for a long period of time.</target>
          </segment>
        </unit>
        <unit id="185">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="185">
            <source xml:space="preserve">Most apps don't need to handle the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Resuming**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event.</source>
            <target xml:space="preserve">Most apps don't need to handle the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Resuming**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event.</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">When your app is resumed, variables and objects have the exact same state they had when the app was suspended.</source>
            <target xml:space="preserve">When your app is resumed, variables and objects have the exact same state they had when the app was suspended.</target>
          </segment>
        </unit>
        <unit id="187">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="187">
            <source xml:space="preserve">Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resuming</pc> event only if you need to update data or objects that might have changed between the time your app was suspended and when it was resumed such as: content (for example, update feed data), network connections that may have gone stale, or if you need to reacquire access to a device (for example, a webcam).</source>
            <target xml:space="preserve">Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resuming</pc> event only if you need to update data or objects that might have changed between the time your app was suspended and when it was resumed such as: content (for example, update feed data), network connections that may have gone stale, or if you need to reacquire access to a device (for example, a webcam).</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">Related topics</source>
            <target xml:space="preserve">Related topics</target>
          </segment>
        </unit>
        <unit id="189">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="189">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Guidelines for app suspend and resume</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Guidelines for app suspend and resume</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>