<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">daca0d528ae54849d010e3799fa6ee299fe7d3f2</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">x:Class attribute</source>
            <target xml:space="preserve">x:Class attribute</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Configures XAML compilation to join partial classes between markup and code-behind.</source>
            <target xml:space="preserve">Configures XAML compilation to join partial classes between markup and code-behind.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</source>
            <target xml:space="preserve">The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">XAML attribute usage</source>
            <target xml:space="preserve">XAML attribute usage</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">XAML values</source>
            <target xml:space="preserve">XAML values</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">Term</source>
            <target xml:space="preserve">Term</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Description</source>
            <target xml:space="preserve">Description</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">namespace</source>
            <target xml:space="preserve">namespace</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">Optional.</source>
            <target xml:space="preserve">Optional.</target>
          </segment>
        </unit>
        <unit id="112">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="112">
            <source xml:space="preserve">Specifies a namespace that contains the partial class identified by <pc dataRefEnd="id2" dataRefStart="id1" id="2">classname</pc>.</source>
            <target xml:space="preserve">Specifies a namespace that contains the partial class identified by <pc dataRefEnd="id2" dataRefStart="id1" id="2">classname</pc>.</target>
          </segment>
        </unit>
        <unit id="113">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="113">
            <source xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="2">namespace</pc> is specified, a dot (.)</source>
            <target xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="2">namespace</pc> is specified, a dot (.)</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">separates <pc dataRefEnd="id2" dataRefStart="id1" id="2">namespace</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">classname</pc>.</source>
            <target xml:space="preserve">separates <pc dataRefEnd="id2" dataRefStart="id1" id="2">namespace</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">classname</pc>.</target>
          </segment>
        </unit>
        <unit id="115">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="115">
            <source xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="2">namespace</pc> is omitted, <pc dataRefEnd="id4" dataRefStart="id3" id="4">classname</pc> is assumed to have no namespace.</source>
            <target xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="2">namespace</pc> is omitted, <pc dataRefEnd="id4" dataRefStart="id3" id="4">classname</pc> is assumed to have no namespace.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">classname</source>
            <target xml:space="preserve">classname</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">Required.</source>
            <target xml:space="preserve">Required.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">Specifies the name of the partial class that connects the loaded XAML and your code-behind for that XAML.</source>
            <target xml:space="preserve">Specifies the name of the partial class that connects the loaded XAML and your code-behind for that XAML.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">Remarks</source>
            <target xml:space="preserve">Remarks</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">x:Class</pc> can be declared as an attribute for any element that is the root of a XAML file/object tree and is being compiled by build actions, or for the <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**Application**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> root in the application definition of a compiled application.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">x:Class</pc> can be declared as an attribute for any element that is the root of a XAML file/object tree and is being compiled by build actions, or for the <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**Application**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> root in the application definition of a compiled application.</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">Declaring <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Class</pc> on any element other than a page root or application root, and under any circumstances for a XAML file that is not compiled with the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Page</pc> build action, results in a compile-time error.</source>
            <target xml:space="preserve">Declaring <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Class</pc> on any element other than a page root or application root, and under any circumstances for a XAML file that is not compiled with the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Page</pc> build action, results in a compile-time error.</target>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source xml:space="preserve">The class used as <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Class</pc> cannot be a nested class.</source>
            <target xml:space="preserve">The class used as <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Class</pc> cannot be a nested class.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">The value of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Class</pc> attribute must be a string that specifies the fully qualified name of a class.</source>
            <target xml:space="preserve">The value of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Class</pc> attribute must be a string that specifies the fully qualified name of a class.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">You can omit namespace information so long as that is how the code-behind is structured also (your class definition starts at the class level).</source>
            <target xml:space="preserve">You can omit namespace information so long as that is how the code-behind is structured also (your class definition starts at the class level).</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">The code-behind file for a page or application definition must be within a code file that is included as part of the project.</source>
            <target xml:space="preserve">The code-behind file for a page or application definition must be within a code file that is included as part of the project.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">The code-behind class must be public.</source>
            <target xml:space="preserve">The code-behind class must be public.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">The code-behind class must be partial.</source>
            <target xml:space="preserve">The code-behind class must be partial.</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">CLR language rules</source>
            <target xml:space="preserve">CLR language rules</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">Although your code-behind file can be a C++ file, there are certain conventions that still follow the CLR language form, so that there is no difference in the XAML syntax.</source>
            <target xml:space="preserve">Although your code-behind file can be a C++ file, there are certain conventions that still follow the CLR language form, so that there is no difference in the XAML syntax.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">In particular, the separator between the namespace and classname components of any <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Class</pc> value is always a dot ("."), even though the separator between namespace and classname in the C++ code file associated with the XAML is "::".</source>
            <target xml:space="preserve">In particular, the separator between the namespace and classname components of any <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Class</pc> value is always a dot ("."), even though the separator between namespace and classname in the C++ code file associated with the XAML is "::".</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">If you declare nested namespaces in C++, then the separator between the successive nested namespace strings should also be "." rather than "::" when you specify the <pc dataRefEnd="id2" dataRefStart="id1" id="2">namespace</pc> part of the <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Class</pc> value.</source>
            <target xml:space="preserve">If you declare nested namespaces in C++, then the separator between the successive nested namespace strings should also be "." rather than "::" when you specify the <pc dataRefEnd="id2" dataRefStart="id1" id="2">namespace</pc> part of the <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Class</pc> value.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>