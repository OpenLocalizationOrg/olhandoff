<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">f73dce3d606ebe19a0b8f248f689e4a27f8836b9</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Getting started: Navigation</source>
            <target xml:space="preserve">Getting started: Navigation</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Adding navigation</source>
            <target xml:space="preserve">Adding navigation</target>
          </segment>
        </unit>
        <unit id="105">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="105">
            <source xml:space="preserve">iOS provides the <pc dataRefEnd="id2" dataRefStart="id1" id="2">UINavigationController</pc> class to help with in-app navigation: you can push and pop views to create the hierarchy of <pc dataRefEnd="id4" dataRefStart="id3" id="4">UIViewControllers</pc> that define your app.</source>
            <target xml:space="preserve">iOS provides the <pc dataRefEnd="id2" dataRefStart="id1" id="2">UINavigationController</pc> class to help with in-app navigation: you can push and pop views to create the hierarchy of <pc dataRefEnd="id4" dataRefStart="id3" id="4">UIViewControllers</pc> that define your app.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">In contrast, a Windows 10 app containing multiple views takes more of a web-site approach to navigation.</source>
            <target xml:space="preserve">In contrast, a Windows 10 app containing multiple views takes more of a web-site approach to navigation.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">You can imagine your users hopping from page to page as they click on controls to work their way through the app.</source>
            <target xml:space="preserve">You can imagine your users hopping from page to page as they click on controls to work their way through the app.</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Navigation design basics</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Navigation design basics</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="109">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="109">
            <source xml:space="preserve">One of the ways to manage this navigation in a Windows 10 app is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Frame**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class.</source>
            <target xml:space="preserve">One of the ways to manage this navigation in a Windows 10 app is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Frame**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">The following walkthrough shows you how to try this out.</source>
            <target xml:space="preserve">The following walkthrough shows you how to try this out.</target>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source xml:space="preserve">Continuing with the solution you started earlier, open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">MainPage.xaml</pc> file, and add a button in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Design</pc> view.</source>
            <target xml:space="preserve">Continuing with the solution you started earlier, open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">MainPage.xaml</pc> file, and add a button in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Design</pc> view.</target>
          </segment>
        </unit>
        <unit id="112">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="112">
            <source xml:space="preserve">Change the button's <pc dataRefEnd="id2" dataRefStart="id1" id="2">Content</pc> property from "Button" to "Go To Page".</source>
            <target xml:space="preserve">Change the button's <pc dataRefEnd="id2" dataRefStart="id1" id="2">Content</pc> property from "Button" to "Go To Page".</target>
          </segment>
        </unit>
        <unit id="113">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="113">
            <source xml:space="preserve">Then, create a handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc> event, as shown in the following figure.</source>
            <target xml:space="preserve">Then, create a handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc> event, as shown in the following figure.</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> view).</source>
            <target xml:space="preserve">If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> view).</target>
          </segment>
        </unit>
        <unit id="115">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="115">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">adding a button and its click event in visual studio</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">adding a button and its click event in visual studio</pc>
						</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">Let's add a new page.</source>
            <target xml:space="preserve">Let's add a new page.</target>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution</pc> view, tap the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Project</pc> menu, and tap <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add New Item</pc>.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution</pc> view, tap the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Project</pc> menu, and tap <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add New Item</pc>.</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">Tap <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank Page</pc> as shown in the following figure, and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="4">Add</pc>.</source>
            <target xml:space="preserve">Tap <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank Page</pc> as shown in the following figure, and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="4">Add</pc>.</target>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">adding a new page in visual studio</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">adding a new page in visual studio</pc>
						</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">Next, add a button to the BlankPage.xaml file.</source>
            <target xml:space="preserve">Next, add a button to the BlankPage.xaml file.</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">Let's use the AppBarButton control, and let's give it a back arrow image: in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">XAML</pc> view, add <pc dataRefEnd="id4" dataRefStart="id3" id="4"> &lt;AppBarButton Icon="Back"/&gt;</pc> between the <pc dataRefEnd="id6" dataRefStart="id5" id="6">&lt;Grid&gt; &lt;/Grid&gt;</pc> elements.</source>
            <target xml:space="preserve">Let's use the AppBarButton control, and let's give it a back arrow image: in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">XAML</pc> view, add <pc dataRefEnd="id4" dataRefStart="id3" id="4"> &lt;AppBarButton Icon="Back"/&gt;</pc> between the <pc dataRefEnd="id6" dataRefStart="id5" id="6">&lt;Grid&gt; &lt;/Grid&gt;</pc> elements.</target>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source xml:space="preserve">Now, let's add an event handler to the button: double-click the control in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> view and Microsoft Visual Studio adds the text "AppBarButton\_Click" to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Click</pc> box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file.</source>
            <target xml:space="preserve">Now, let's add an event handler to the button: double-click the control in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> view and Microsoft Visual Studio adds the text "AppBarButton\_Click" to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Click</pc> box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">adding a back button and its click event in visual studio</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">adding a back button and its click event in visual studio</pc>
						</target>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source xml:space="preserve">If you return to the BlankPage.xaml file's <pc dataRefEnd="id2" dataRefStart="id1" id="2">XAML</pc> view, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">&lt;AppBarButton&gt;</pc> element's Extensible Application Markup Language (XAML) code should now look like this:</source>
            <target xml:space="preserve">If you return to the BlankPage.xaml file's <pc dataRefEnd="id2" dataRefStart="id1" id="2">XAML</pc> view, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">&lt;AppBarButton&gt;</pc> element's Extensible Application Markup Language (XAML) code should now look like this:</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"> &lt;AppBarButton Icon="Back" Click="AppBarButton_Click"/&gt;</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"> &lt;AppBarButton Icon="Back" Click="AppBarButton_Click"/&gt;</pc>
						</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">Return to the BlankPage.xaml.cs file, and add this code to go to the previous page after the user taps the button.</source>
            <target xml:space="preserve">Return to the BlankPage.xaml.cs file, and add this code to go to the previous page after the user taps the button.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">Finally, open the MainPage.xaml.cs file and add this code.</source>
            <target xml:space="preserve">Finally, open the MainPage.xaml.cs file and add this code.</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">It opens BlankPage after the user taps the button.</source>
            <target xml:space="preserve">It opens BlankPage after the user taps the button.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">Now, run the program.</source>
            <target xml:space="preserve">Now, run the program.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">Tap the "Go To Page" button to go to the other page, and then tap the back-arrow button to return to the previous page.</source>
            <target xml:space="preserve">Tap the "Go To Page" button to go to the other page, and then tap the back-arrow button to return to the previous page.</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">Page navigation is managed by the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Frame**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class.</source>
            <target xml:space="preserve">Page navigation is managed by the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Frame**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class.</target>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source xml:space="preserve">As the <pc dataRefEnd="id2" dataRefStart="id1" id="2">UINavigationController</pc> class in iOS uses <pc dataRefEnd="id4" dataRefStart="id3" id="4">pushViewController</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">popViewController</pc> methods, the <pc dataRefEnd="id8" dataRefStart="id7" id="8">Frame</pc> class for Windows Store apps provides <pc dataRefEnd="id10" dataRefStart="id9" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**Navigate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc> and <pc dataRefEnd="id16" dataRefStart="id15" id="12CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="12CapsExtId2">**GoBack**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="12CapsExtId3"></pc></pc> methods.</source>
            <target xml:space="preserve">As the <pc dataRefEnd="id2" dataRefStart="id1" id="2">UINavigationController</pc> class in iOS uses <pc dataRefEnd="id4" dataRefStart="id3" id="4">pushViewController</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">popViewController</pc> methods, the <pc dataRefEnd="id8" dataRefStart="id7" id="8">Frame</pc> class for Windows Store apps provides <pc dataRefEnd="id10" dataRefStart="id9" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**Navigate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc> and <pc dataRefEnd="id16" dataRefStart="id15" id="12CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="12CapsExtId2">**GoBack**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="12CapsExtId3"></pc></pc> methods.</target>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Frame</pc> class also has a method called <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GoForward**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, which does what you might expect.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Frame</pc> class also has a method called <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GoForward**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, which does what you might expect.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">This walkthrough creates a new instance of BlankPage each time you navigate to it.</source>
            <target xml:space="preserve">This walkthrough creates a new instance of BlankPage each time you navigate to it.</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">(The previous instance will be freed, or <pc dataRefEnd="id2" dataRefStart="id1" id="2">released</pc>, automatically).</source>
            <target xml:space="preserve">(The previous instance will be freed, or <pc dataRefEnd="id2" dataRefStart="id1" id="2">released</pc>, automatically).</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">If you don't want a new instance to be created each time, add the following code to the BlankPage class's constructor in the BlankPage.xaml.cs file.</source>
            <target xml:space="preserve">If you don't want a new instance to be created each time, add the following code to the BlankPage class's constructor in the BlankPage.xaml.cs file.</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">This will enable the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**NavigationCacheMode**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> behavior.</source>
            <target xml:space="preserve">This will enable the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**NavigationCacheMode**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> behavior.</target>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source xml:space="preserve">You can also get or set the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Frame</pc> class's <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**CacheSize**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property to manage how many pages in the navigation history can be cached.</source>
            <target xml:space="preserve">You can also get or set the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Frame</pc> class's <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**CacheSize**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property to manage how many pages in the navigation history can be cached.</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">For more info about navigation, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Navigation</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">XAML personality animations sample</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info about navigation, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Navigation</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">XAML personality animations sample</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  For info about navigation for Windows Store apps using JavaScript and HTML, see <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">Quickstart: Using single-page navigation</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  For info about navigation for Windows Store apps using JavaScript and HTML, see <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">Quickstart: Using single-page navigation</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">Next step</source>
            <target xml:space="preserve">Next step</target>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Getting started: Animation</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Getting started: Animation</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>