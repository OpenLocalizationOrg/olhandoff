<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">5b0e6979ede46c8b1f83dad880922b081dea3b9b</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Custom dependency properties</source>
            <target xml:space="preserve">Custom dependency properties</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Here we explain how to define and implement your own dependency properties for a Windows Runtime app using C++, C\#, or Visual Basic.</source>
            <target xml:space="preserve">Here we explain how to define and implement your own dependency properties for a Windows Runtime app using C++, C\#, or Visual Basic.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">We list reasons why app developers and component authors might want to create custom dependency properties.</source>
            <target xml:space="preserve">We list reasons why app developers and component authors might want to create custom dependency properties.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">We describe the implementation steps for a custom dependency property, as well as some best practices that can improve performance, usability, or versatility of the dependency property.</source>
            <target xml:space="preserve">We describe the implementation steps for a custom dependency property, as well as some best practices that can improve performance, usability, or versatility of the dependency property.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">Prerequisites</source>
            <target xml:space="preserve">Prerequisites</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">We assume that you have read the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Dependency properties overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and that you understand dependency properties from the perspective of a consumer of existing dependency properties.</source>
            <target xml:space="preserve">We assume that you have read the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Dependency properties overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and that you understand dependency properties from the perspective of a consumer of existing dependency properties.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">To follow the examples in this topic, you should also understand XAML and know how to write a basic Windows Runtime app using C++, C\#, or Visual Basic.</source>
            <target xml:space="preserve">To follow the examples in this topic, you should also understand XAML and know how to write a basic Windows Runtime app using C++, C\#, or Visual Basic.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">What is a dependency property?</source>
            <target xml:space="preserve">What is a dependency property?</target>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source xml:space="preserve">Dependency properties are properties that are registered with the Windows Runtime property system by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method, and that are identified by a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> identifier member on the defining class.</source>
            <target xml:space="preserve">Dependency properties are properties that are registered with the Windows Runtime property system by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method, and that are identified by a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> identifier member on the defining class.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">You can enable what would otherwise be a common language runtime (CLR) or C++ property to support styling, data binding, animations, and default values by implementing it as a dependency property.</source>
            <target xml:space="preserve">You can enable what would otherwise be a common language runtime (CLR) or C++ property to support styling, data binding, animations, and default values by implementing it as a dependency property.</target>
          </segment>
        </unit>
        <unit id="113">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="113">
            <source xml:space="preserve">Dependency properties can be used only by <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> types.</source>
            <target xml:space="preserve">Dependency properties can be used only by <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> types.</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">But <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyObject</pc> is quite high in the class hierarchy, so the majority of classes that are intended for UI and presentation support can support dependency properties.</source>
            <target xml:space="preserve">But <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyObject</pc> is quite high in the class hierarchy, so the majority of classes that are intended for UI and presentation support can support dependency properties.</target>
          </segment>
        </unit>
        <unit id="115">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="115">
            <source xml:space="preserve">For more information about dependency properties and some of the terminology and conventions used for describing them in this documentation, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Dependency properties overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more information about dependency properties and some of the terminology and conventions used for describing them in this documentation, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Dependency properties overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">Examples of dependency properties in the Windows Runtime are: <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Control.Background**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**FrameworkElement.Width**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**TextBox.Text**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, among many others.</source>
            <target xml:space="preserve">Examples of dependency properties in the Windows Runtime are: <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Control.Background**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**FrameworkElement.Width**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**TextBox.Text**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, among many others.</target>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source xml:space="preserve">Each dependency property exposed by a class has a corresponding <pc dataRefEnd="id2" dataRefStart="id1" id="2">public</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4">static</pc> <pc dataRefEnd="id6" dataRefStart="id5" id="6">readonly</pc> property of type <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> that is exposed on that same class and that is the identifier for the dependency property.</source>
            <target xml:space="preserve">Each dependency property exposed by a class has a corresponding <pc dataRefEnd="id2" dataRefStart="id1" id="2">public</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4">static</pc> <pc dataRefEnd="id6" dataRefStart="id5" id="6">readonly</pc> property of type <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> that is exposed on that same class and that is the identifier for the dependency property.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">The identifier's name follows this convention: the name of the dependency property, with the string "Property" added to the end of the name.</source>
            <target xml:space="preserve">The identifier's name follows this convention: the name of the dependency property, with the string "Property" added to the end of the name.</target>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source xml:space="preserve">For example, the corresponding <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyProperty</pc> identifier for the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Control.Background</pc> property is <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Control.BackgroundProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For example, the corresponding <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyProperty</pc> identifier for the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Control.Background</pc> property is <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Control.BackgroundProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">The identifier stores the information about the dependency property as it was registered, and the identifier can then be used later for other operations involving the dependency property, such as calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The identifier stores the information about the dependency property as it was registered, and the identifier can then be used later for other operations involving the dependency property, such as calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">Property wrappers</source>
            <target xml:space="preserve">Property wrappers</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Dependency properties typically have a wrapper implementation.</source>
            <target xml:space="preserve">Dependency properties typically have a wrapper implementation.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">Without the wrapper, the only way to get or set the properties would be to use the dependency property utility methods <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> and to pass the identifier to them as a parameter.</source>
            <target xml:space="preserve">Without the wrapper, the only way to get or set the properties would be to use the dependency property utility methods <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> and to pass the identifier to them as a parameter.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">This is a rather unnatural usage for something that is ostensibly a property.</source>
            <target xml:space="preserve">This is a rather unnatural usage for something that is ostensibly a property.</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">But with the wrapper, your code and any other code that references the dependency property can use a straightforward object-property syntax that is natural for the language you're using.</source>
            <target xml:space="preserve">But with the wrapper, your code and any other code that references the dependency property can use a straightforward object-property syntax that is natural for the language you're using.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">If you implement a custom dependency property yourself and want it to be public and easy to call, define the property wrappers too.</source>
            <target xml:space="preserve">If you implement a custom dependency property yourself and want it to be public and easy to call, define the property wrappers too.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">The property wrappers are also useful for reporting basic information about the dependency property to reflection or static analysis processes.</source>
            <target xml:space="preserve">The property wrappers are also useful for reporting basic information about the dependency property to reflection or static analysis processes.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">Specifically, the wrapper is where you place attributes such as <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ContentPropertyAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Specifically, the wrapper is where you place attributes such as <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ContentPropertyAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">When to implement a property as a dependency property</source>
            <target xml:space="preserve">When to implement a property as a dependency property</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">Whenever you implement a public read/write property on a class, as long as your class derives from <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, you have the option to make your property work as a dependency property.</source>
            <target xml:space="preserve">Whenever you implement a public read/write property on a class, as long as your class derives from <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, you have the option to make your property work as a dependency property.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">Sometimes the typical technique of backing your property with a private field is adequate.</source>
            <target xml:space="preserve">Sometimes the typical technique of backing your property with a private field is adequate.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Defining your custom property as a dependency property is not always necessary or appropriate.</source>
            <target xml:space="preserve">Defining your custom property as a dependency property is not always necessary or appropriate.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">The choice will depend on the scenarios that you intend your property to support.</source>
            <target xml:space="preserve">The choice will depend on the scenarios that you intend your property to support.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">You might consider implementing your property as a dependency property when you want it to support one or more of these features of the Windows Runtime or of Windows Runtime apps:</source>
            <target xml:space="preserve">You might consider implementing your property as a dependency property when you want it to support one or more of these features of the Windows Runtime or of Windows Runtime apps:</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">Setting the property through a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Style**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></source>
            <target xml:space="preserve">Setting the property through a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Style**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">Acting as valid target property for data binding</source>
            <target xml:space="preserve">Acting as valid target property for data binding</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">Supporting animated values through a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Storyboard**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></source>
            <target xml:space="preserve">Supporting animated values through a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Storyboard**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">Reporting when the previous value of the property has been changed by:</source>
            <target xml:space="preserve">Reporting when the previous value of the property has been changed by:</target>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source xml:space="preserve">Actions taken by the property system itself</source>
            <target xml:space="preserve">Actions taken by the property system itself</target>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source xml:space="preserve">The environment</source>
            <target xml:space="preserve">The environment</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">User actions</source>
            <target xml:space="preserve">User actions</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">Reading and writing styles</source>
            <target xml:space="preserve">Reading and writing styles</target>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source xml:space="preserve">Checklist for defining a dependency property</source>
            <target xml:space="preserve">Checklist for defining a dependency property</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">Defining a dependency property can be thought of as a set of concepts.</source>
            <target xml:space="preserve">Defining a dependency property can be thought of as a set of concepts.</target>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source xml:space="preserve">These concepts are not necessarily procedural steps, because several concepts can be addressed in a single line of code in the implementation.</source>
            <target xml:space="preserve">These concepts are not necessarily procedural steps, because several concepts can be addressed in a single line of code in the implementation.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">This list gives just a quick overview.</source>
            <target xml:space="preserve">This list gives just a quick overview.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">We'll explain each concept in more detail later in this topic, and we'll show you example code in several languages.</source>
            <target xml:space="preserve">We'll explain each concept in more detail later in this topic, and we'll show you example code in several languages.</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">(Optional) Create property metadata for the dependency property.</source>
            <target xml:space="preserve">(Optional) Create property metadata for the dependency property.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">You need property metadata only if you want property-changed behavior, or a metadata-based default value that can be restored by calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ClearValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">You need property metadata only if you want property-changed behavior, or a metadata-based default value that can be restored by calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ClearValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="150">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="150">
            <source xml:space="preserve">Register the property name with the property system (call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, specifying an owner type and the type of the property value.</source>
            <target xml:space="preserve">Register the property name with the property system (call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, specifying an owner type and the type of the property value.</target>
          </segment>
        </unit>
        <unit id="151">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="151">
            <source xml:space="preserve">There's a required parameter for <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that expects property metadata.</source>
            <target xml:space="preserve">There's a required parameter for <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that expects property metadata.</target>
          </segment>
        </unit>
        <unit id="152">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="152">
            <source xml:space="preserve">Specify <pc dataRefEnd="id2" dataRefStart="id1" id="2">null</pc> for this, or specify the actual property metadata if you have declared any.</source>
            <target xml:space="preserve">Specify <pc dataRefEnd="id2" dataRefStart="id1" id="2">null</pc> for this, or specify the actual property metadata if you have declared any.</target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
            <data id="id11">&lt;strong&gt;</data>
            <data id="id12">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">Define a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> identifier as a <pc dataRefEnd="id8" dataRefStart="id7" id="4">public</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="6">static</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="8">readonly</pc> property member on the owner type.</source>
            <target xml:space="preserve">Define a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> identifier as a <pc dataRefEnd="id8" dataRefStart="id7" id="4">public</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="6">static</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="8">readonly</pc> property member on the owner type.</target>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source xml:space="preserve">Define a wrapper property, following the property accessor model that's used in the language you are implementing.</source>
            <target xml:space="preserve">Define a wrapper property, following the property accessor model that's used in the language you are implementing.</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">The wrapper property name should match the <pc dataRefEnd="id2" dataRefStart="id1" id="2">name</pc> string that you used in <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The wrapper property name should match the <pc dataRefEnd="id2" dataRefStart="id1" id="2">name</pc> string that you used in <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="156">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id11">&lt;link&gt;</data>
            <data id="id12">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="156">
            <source xml:space="preserve">Implement the <pc dataRefEnd="id2" dataRefStart="id1" id="2">get</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">set</pc> accessors to connect the wrapper with the dependency property that it wraps, by calling <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> and passing your own property's identifier as a parameter.</source>
            <target xml:space="preserve">Implement the <pc dataRefEnd="id2" dataRefStart="id1" id="2">get</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">set</pc> accessors to connect the wrapper with the dependency property that it wraps, by calling <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> and passing your own property's identifier as a parameter.</target>
          </segment>
        </unit>
        <unit id="157">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="157">
            <source xml:space="preserve">(Optional) Place attributes such as <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ContentPropertyAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> on the wrapper.</source>
            <target xml:space="preserve">(Optional) Place attributes such as <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ContentPropertyAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> on the wrapper.</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  If you are defining a custom attached property, you generally omit the wrapper.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  If you are defining a custom attached property, you generally omit the wrapper.</target>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source xml:space="preserve">Instead, you write a different style of accessor that a XAML processor can use.</source>
            <target xml:space="preserve">Instead, you write a different style of accessor that a XAML processor can use.</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Custom attached properties</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Custom attached properties</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">Registering the property</source>
            <target xml:space="preserve">Registering the property</target>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source xml:space="preserve">For your property to be a dependency property, you must register the property into a property store maintained by the Windows Runtime property system.</source>
            <target xml:space="preserve">For your property to be a dependency property, you must register the property into a property store maintained by the Windows Runtime property system.</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">You must give the property a unique identifier to be used as the qualifier for later property-system operations.</source>
            <target xml:space="preserve">You must give the property a unique identifier to be used as the qualifier for later property-system operations.</target>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source xml:space="preserve">These operations might be internal operations, or your own code calling property-system APIs.</source>
            <target xml:space="preserve">These operations might be internal operations, or your own code calling property-system APIs.</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">To register the property, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method.</source>
            <target xml:space="preserve">To register the property, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method.</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">For Microsoft .NET languages (C\# and Microsoft Visual Basic) you call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> within the body of your class (inside the class, but outside any member definitions).</source>
            <target xml:space="preserve">For Microsoft .NET languages (C\# and Microsoft Visual Basic) you call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> within the body of your class (inside the class, but outside any member definitions).</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">The identifier is also provided by the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method call, as the return value.</source>
            <target xml:space="preserve">The identifier is also provided by the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method call, as the return value.</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
            <data id="id11">&lt;strong&gt;</data>
            <data id="id12">&lt;/strong&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> call is typically made outside of other member definitions because you use the return value to assign and create a <pc dataRefEnd="id8" dataRefStart="id7" id="4">public</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="6">static</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="8">readonly</pc> property of type <pc dataRefEnd="id14" dataRefStart="id13" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc> as part of your class.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> call is typically made outside of other member definitions because you use the return value to assign and create a <pc dataRefEnd="id8" dataRefStart="id7" id="4">public</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="6">static</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="8">readonly</pc> property of type <pc dataRefEnd="id14" dataRefStart="id13" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc> as part of your class.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">This property becomes the identifier for your dependency property.</source>
            <target xml:space="preserve">This property becomes the identifier for your dependency property.</target>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source xml:space="preserve">Here are examples of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> call.</source>
            <target xml:space="preserve">Here are examples of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> call.</target>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="172">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="172">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Registering the dependency property in a class body is the typical implementation, but you can also register a dependency property in the class static constructor.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Registering the dependency property in a class body is the typical implementation, but you can also register a dependency property in the class static constructor.</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">This approach may make sense if you need more than one line of code to initialize the dependency property.</source>
            <target xml:space="preserve">This approach may make sense if you need more than one line of code to initialize the dependency property.</target>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source xml:space="preserve">For C++, you have options for how you split the implementation between the header and the code file.</source>
            <target xml:space="preserve">For C++, you have options for how you split the implementation between the header and the code file.</target>
          </segment>
        </unit>
        <unit id="175">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="175">
            <source xml:space="preserve">The typical split is to declare the identifier itself as <pc dataRefEnd="id2" dataRefStart="id1" id="2">public</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4">static</pc> property in the header, with a <pc dataRefEnd="id6" dataRefStart="id5" id="6">get</pc> implementation but no <pc dataRefEnd="id8" dataRefStart="id7" id="8">set</pc>.</source>
            <target xml:space="preserve">The typical split is to declare the identifier itself as <pc dataRefEnd="id2" dataRefStart="id1" id="2">public</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4">static</pc> property in the header, with a <pc dataRefEnd="id6" dataRefStart="id5" id="6">get</pc> implementation but no <pc dataRefEnd="id8" dataRefStart="id7" id="8">set</pc>.</target>
          </segment>
        </unit>
        <unit id="176">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="176">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">get</pc> implementation refers to a private field, which is an uninitialized <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">get</pc> implementation refers to a private field, which is an uninitialized <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance.</target>
          </segment>
        </unit>
        <unit id="177">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="177">
            <source xml:space="preserve">You can also declare the wrappers and the <pc dataRefEnd="id2" dataRefStart="id1" id="2">get</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">set</pc> implementations of the wrapper.</source>
            <target xml:space="preserve">You can also declare the wrappers and the <pc dataRefEnd="id2" dataRefStart="id1" id="2">get</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">set</pc> implementations of the wrapper.</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">In this case the header includes some minimal implementation.</source>
            <target xml:space="preserve">In this case the header includes some minimal implementation.</target>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source xml:space="preserve">If the wrapper needs Windows Runtime attribution, attribute in the header too.</source>
            <target xml:space="preserve">If the wrapper needs Windows Runtime attribution, attribute in the header too.</target>
          </segment>
        </unit>
        <unit id="180">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="180">
            <source xml:space="preserve">Put the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> call in the code file, within a helper function that only gets run when the app initializes the first time.</source>
            <target xml:space="preserve">Put the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> call in the code file, within a helper function that only gets run when the app initializes the first time.</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">Use the return value of <pc dataRefEnd="id2" dataRefStart="id1" id="2">Register</pc> to fill the static but uninitialized identifiers that you declared in the header, which you initially set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">nullptr</pc> at the root scope of the implementation file.</source>
            <target xml:space="preserve">Use the return value of <pc dataRefEnd="id2" dataRefStart="id1" id="2">Register</pc> to fill the static but uninitialized identifiers that you declared in the header, which you initially set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">nullptr</pc> at the root scope of the implementation file.</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  For the C++ code, the reason why you have a private field and a public read-only property that surfaces the <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> is so that other callers who use your dependency property can also use property-system utility APIs that require the identifier to be public.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  For the C++ code, the reason why you have a private field and a public read-only property that surfaces the <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> is so that other callers who use your dependency property can also use property-system utility APIs that require the identifier to be public.</target>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source xml:space="preserve">If you keep the identifier private, people can't use these utility APIs.</source>
            <target xml:space="preserve">If you keep the identifier private, people can't use these utility APIs.</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id25">&lt;link&gt;</data>
            <data id="id26">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id31">&lt;link&gt;</data>
            <data id="id32">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">Examples of such API and scenarios include <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> by choice, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ClearValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**GetAnimationBaseValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>, <pc dataRefEnd="id26" dataRefStart="id25" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**SetBinding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>, and <pc dataRefEnd="id32" dataRefStart="id31" id="12CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="12CapsExtId2">**Setter.Property**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="12CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Examples of such API and scenarios include <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> by choice, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ClearValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**GetAnimationBaseValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>, <pc dataRefEnd="id26" dataRefStart="id25" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**SetBinding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>, and <pc dataRefEnd="id32" dataRefStart="id31" id="12CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="12CapsExtId2">**Setter.Property**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="12CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="185">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="185">
            <source xml:space="preserve">You can't use a public field for this, because Windows Runtime compile rules don't allow public data members that use reference types like <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyProperty</pc>.</source>
            <target xml:space="preserve">You can't use a public field for this, because Windows Runtime compile rules don't allow public data members that use reference types like <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyProperty</pc>.</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">Dependency property name conventions</source>
            <target xml:space="preserve">Dependency property name conventions</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">There are naming conventions for dependency properties; follow them in all but exceptional circumstances.</source>
            <target xml:space="preserve">There are naming conventions for dependency properties; follow them in all but exceptional circumstances.</target>
          </segment>
        </unit>
        <unit id="188">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="188">
            <source xml:space="preserve">The dependency property itself has a basic name ("Label" in the preceding example) that is given as the first parameter of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The dependency property itself has a basic name ("Label" in the preceding example) that is given as the first parameter of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">The name must be unique within each registering type, and the uniqueness requirement also applies to any inherited members.</source>
            <target xml:space="preserve">The name must be unique within each registering type, and the uniqueness requirement also applies to any inherited members.</target>
          </segment>
        </unit>
        <unit id="190">
          <segment state="initial" id="190">
            <source xml:space="preserve">Dependency properties inherited through base types are considered to be part of the registering type already; names of inherited properties cannot be registered again.</source>
            <target xml:space="preserve">Dependency properties inherited through base types are considered to be part of the registering type already; names of inherited properties cannot be registered again.</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Caution</pc>  Although the name you provide here can be any string identifier that is valid in programming for your language of choice, you usually want to be able to set your dependency property in XAML too.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Caution</pc>  Although the name you provide here can be any string identifier that is valid in programming for your language of choice, you usually want to be able to set your dependency property in XAML too.</target>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source xml:space="preserve">To be set in XAML, the property name you choose must be a valid XAML name.</source>
            <target xml:space="preserve">To be set in XAML, the property name you choose must be a valid XAML name.</target>
          </segment>
        </unit>
        <unit id="193">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="193">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">XAML overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">XAML overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source xml:space="preserve">When you create the identifier property, combine the name of the property as you registered it with the suffix "Property" ("LabelProperty", for example).</source>
            <target xml:space="preserve">When you create the identifier property, combine the name of the property as you registered it with the suffix "Property" ("LabelProperty", for example).</target>
          </segment>
        </unit>
        <unit id="195">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="195">
            <source xml:space="preserve">This property is your identifier for the dependency property, and it is used as an input for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> calls you make in your own property wrappers.</source>
            <target xml:space="preserve">This property is your identifier for the dependency property, and it is used as an input for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> calls you make in your own property wrappers.</target>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source xml:space="preserve">It is also used by the property system and potentially by XAML processors.</source>
            <target xml:space="preserve">It is also used by the property system and potentially by XAML processors.</target>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source xml:space="preserve">Implementing the wrapper</source>
            <target xml:space="preserve">Implementing the wrapper</target>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;strong&gt;</data>
            <data id="id16">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source xml:space="preserve">Your property wrapper should call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> in the <pc dataRefEnd="id8" dataRefStart="id7" id="4">get</pc> implementation, and <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> in the <pc dataRefEnd="id16" dataRefStart="id15" id="8">set</pc> implementation.</source>
            <target xml:space="preserve">Your property wrapper should call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> in the <pc dataRefEnd="id8" dataRefStart="id7" id="4">get</pc> implementation, and <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> in the <pc dataRefEnd="id16" dataRefStart="id15" id="8">set</pc> implementation.</target>
          </segment>
        </unit>
        <unit id="199">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="199">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Caution</pc>  In all but exceptional circumstances, your wrapper implementations should perform only the <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> operations.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Caution</pc>  In all but exceptional circumstances, your wrapper implementations should perform only the <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> operations.</target>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source xml:space="preserve">Otherwise, you'll get different behavior when your property is set via XAML versus when it is set via code.</source>
            <target xml:space="preserve">Otherwise, you'll get different behavior when your property is set via XAML versus when it is set via code.</target>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source xml:space="preserve">For efficiency, the XAML parser bypasses wrappers when setting dependency properties; whenever possible, it uses the registry of dependency properties.</source>
            <target xml:space="preserve">For efficiency, the XAML parser bypasses wrappers when setting dependency properties; whenever possible, it uses the registry of dependency properties.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source xml:space="preserve">Property metadata for a custom dependency property</source>
            <target xml:space="preserve">Property metadata for a custom dependency property</target>
          </segment>
        </unit>
        <unit id="204">
          <segment state="initial" id="204">
            <source xml:space="preserve">When property metadata is assigned to a dependency property, the same metadata is applied to that property for any instance of the property-owner type or its subclasses.</source>
            <target xml:space="preserve">When property metadata is assigned to a dependency property, the same metadata is applied to that property for any instance of the property-owner type or its subclasses.</target>
          </segment>
        </unit>
        <unit id="205">
          <segment state="initial" id="205">
            <source xml:space="preserve">In property metadata, you can specify two behaviors:</source>
            <target xml:space="preserve">In property metadata, you can specify two behaviors:</target>
          </segment>
        </unit>
        <unit id="206">
          <segment state="initial" id="206">
            <source xml:space="preserve">A default value that the property system assigns to all cases of the property.</source>
            <target xml:space="preserve">A default value that the property system assigns to all cases of the property.</target>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source xml:space="preserve">A static callback method that is automatically invoked within the property system whenever a property value is detected.</source>
            <target xml:space="preserve">A static callback method that is automatically invoked within the property system whenever a property value is detected.</target>
          </segment>
        </unit>
        <unit id="208">
          <segment state="initial" id="208">
            <source xml:space="preserve">Calling Register with property metadata</source>
            <target xml:space="preserve">Calling Register with property metadata</target>
          </segment>
        </unit>
        <unit id="209">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;em&gt;</data>
            <data id="id8">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="209">
            <source xml:space="preserve">In the previous examples of calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, we passed a null value for the <pc dataRefEnd="id8" dataRefStart="id7" id="4">propertyMetadata</pc> parameter.</source>
            <target xml:space="preserve">In the previous examples of calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, we passed a null value for the <pc dataRefEnd="id8" dataRefStart="id7" id="4">propertyMetadata</pc> parameter.</target>
          </segment>
        </unit>
        <unit id="210">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="210">
            <source xml:space="preserve">To enable a dependency property to provide a default value or use a property-changed callback, you must define a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instance that provides one or both of these capabilities.</source>
            <target xml:space="preserve">To enable a dependency property to provide a default value or use a property-changed callback, you must define a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instance that provides one or both of these capabilities.</target>
          </segment>
        </unit>
        <unit id="211">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="211">
            <source xml:space="preserve">Typically you provide a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> as an inline-created instance, within the parameters for <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyProperty.Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Typically you provide a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> as an inline-created instance, within the parameters for <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyProperty.Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="212">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id21">&lt;strong&gt;</data>
            <data id="id22">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="212">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  If you are defining a <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> implementation, you must use the utility method <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**PropertyMetadata.Create**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> rather than calling a <pc dataRefEnd="id16" dataRefStart="id15" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc> constructor to define the <pc dataRefEnd="id22" dataRefStart="id21" id="9">PropertyMetadata</pc> instance.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  If you are defining a <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> implementation, you must use the utility method <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**PropertyMetadata.Create**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> rather than calling a <pc dataRefEnd="id16" dataRefStart="id15" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc> constructor to define the <pc dataRefEnd="id22" dataRefStart="id21" id="9">PropertyMetadata</pc> instance.</target>
          </segment>
        </unit>
        <unit id="213">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="213">
            <source xml:space="preserve">This next example modifies the previously shown <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> examples by referencing a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance with a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**PropertyChangedCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> value.</source>
            <target xml:space="preserve">This next example modifies the previously shown <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> examples by referencing a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance with a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**PropertyChangedCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> value.</target>
          </segment>
        </unit>
        <unit id="214">
          <segment state="initial" id="214">
            <source xml:space="preserve">The implementation of the "OnLabelChanged" callback will be shown later in this section.</source>
            <target xml:space="preserve">The implementation of the "OnLabelChanged" callback will be shown later in this section.</target>
          </segment>
        </unit>
        <unit id="215">
          <segment state="initial" id="215">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="216">
          <segment state="initial" id="216">
            <source xml:space="preserve">Default value</source>
            <target xml:space="preserve">Default value</target>
          </segment>
        </unit>
        <unit id="217">
          <segment state="initial" id="217">
            <source xml:space="preserve">You can specify a default value for a dependency property such that the property always returns a particular default value when it is unset.</source>
            <target xml:space="preserve">You can specify a default value for a dependency property such that the property always returns a particular default value when it is unset.</target>
          </segment>
        </unit>
        <unit id="218">
          <segment state="initial" id="218">
            <source xml:space="preserve">This value can be different than the inherent default value for the type of that property.</source>
            <target xml:space="preserve">This value can be different than the inherent default value for the type of that property.</target>
          </segment>
        </unit>
        <unit id="219">
          <segment state="initial" id="219">
            <source xml:space="preserve">If a default value is not specified, the default value for a dependency property is null for a reference type, or the default of the type for a value type or language primitive (for example, 0 for an integer or an empty string for a string).</source>
            <target xml:space="preserve">If a default value is not specified, the default value for a dependency property is null for a reference type, or the default of the type for a value type or language primitive (for example, 0 for an integer or an empty string for a string).</target>
          </segment>
        </unit>
        <unit id="220">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="220">
            <source xml:space="preserve">The main reason for establishing a default value is that this value is restored when you call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ClearValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> on the property.</source>
            <target xml:space="preserve">The main reason for establishing a default value is that this value is restored when you call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ClearValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> on the property.</target>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source xml:space="preserve">Establishing a default value on a per-property basis might be more convenient than establishing default values in constructors, particularly for value types.</source>
            <target xml:space="preserve">Establishing a default value on a per-property basis might be more convenient than establishing default values in constructors, particularly for value types.</target>
          </segment>
        </unit>
        <unit id="222">
          <segment state="initial" id="222">
            <source xml:space="preserve">However, for reference types, make sure that establishing a default value does not create an unintentional singleton pattern.</source>
            <target xml:space="preserve">However, for reference types, make sure that establishing a default value does not create an unintentional singleton pattern.</target>
          </segment>
        </unit>
        <unit id="223">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="223">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Best practices</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> later in this topic</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Best practices</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> later in this topic</target>
          </segment>
        </unit>
        <unit id="224">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="224">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Do not register with a default value of <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**UnsetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Do not register with a default value of <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**UnsetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="225">
          <segment state="initial" id="225">
            <source xml:space="preserve">If you do, it will confuse property consumers and will have unintended consequences within the property system.</source>
            <target xml:space="preserve">If you do, it will confuse property consumers and will have unintended consequences within the property system.</target>
          </segment>
        </unit>
        <unit id="226">
          <segment state="initial" id="226">
            <source xml:space="preserve">CreateDefaultValueCallback</source>
            <target xml:space="preserve">CreateDefaultValueCallback</target>
          </segment>
        </unit>
        <unit id="227">
          <segment state="initial" id="227">
            <source xml:space="preserve">In some scenarios, you are defining dependency properties for objects that are used on more than one UI thread.</source>
            <target xml:space="preserve">In some scenarios, you are defining dependency properties for objects that are used on more than one UI thread.</target>
          </segment>
        </unit>
        <unit id="228">
          <segment state="initial" id="228">
            <source xml:space="preserve">This might be the case if you are defining a data object that is used by multiple apps, or a control that you use in more than one app.</source>
            <target xml:space="preserve">This might be the case if you are defining a data object that is used by multiple apps, or a control that you use in more than one app.</target>
          </segment>
        </unit>
        <unit id="229">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="229">
            <source xml:space="preserve">You can enable the exchange of the object between different UI threads by providing a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> implementation rather than a default value instance, which is tied to the thread that registered the property.</source>
            <target xml:space="preserve">You can enable the exchange of the object between different UI threads by providing a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> implementation rather than a default value instance, which is tied to the thread that registered the property.</target>
          </segment>
        </unit>
        <unit id="230">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="230">
            <source xml:space="preserve">Basically a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> defines a factory for default values.</source>
            <target xml:space="preserve">Basically a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> defines a factory for default values.</target>
          </segment>
        </unit>
        <unit id="231">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="231">
            <source xml:space="preserve">The value returned by <pc dataRefEnd="id2" dataRefStart="id1" id="2">CreateDefaultValueCallback</pc> is always associated with the current UI <pc dataRefEnd="id4" dataRefStart="id3" id="4">CreateDefaultValueCallback</pc> thread that is using the object.</source>
            <target xml:space="preserve">The value returned by <pc dataRefEnd="id2" dataRefStart="id1" id="2">CreateDefaultValueCallback</pc> is always associated with the current UI <pc dataRefEnd="id4" dataRefStart="id3" id="4">CreateDefaultValueCallback</pc> thread that is using the object.</target>
          </segment>
        </unit>
        <unit id="232">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;strong&gt;</data>
            <data id="id20">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="232">
            <source xml:space="preserve">To define metadata that specifies a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, you must call <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**PropertyMetadata.Create**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to return a metadata instance; the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> constructors do not have a signature that includes a <pc dataRefEnd="id20" dataRefStart="id19" id="8">CreateDefaultValueCallback</pc> parameter.</source>
            <target xml:space="preserve">To define metadata that specifies a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, you must call <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**PropertyMetadata.Create**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to return a metadata instance; the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> constructors do not have a signature that includes a <pc dataRefEnd="id20" dataRefStart="id19" id="8">CreateDefaultValueCallback</pc> parameter.</target>
          </segment>
        </unit>
        <unit id="233">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;strong&gt;</data>
            <data id="id14">&lt;/strong&gt;</data>
            <data id="id15">&lt;strong&gt;</data>
            <data id="id16">&lt;/strong&gt;</data>
            <data id="id17">&lt;strong&gt;</data>
            <data id="id18">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="233">
            <source xml:space="preserve">The typical implementation pattern for a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is to create a new <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> class, set the specific property value of each property of the <pc dataRefEnd="id14" dataRefStart="id13" id="6">DependencyObject</pc> to the intended default, and then return the new class as an <pc dataRefEnd="id16" dataRefStart="id15" id="8">Object</pc> reference via the return value of the <pc dataRefEnd="id18" dataRefStart="id17" id="10">CreateDefaultValueCallback</pc> method.</source>
            <target xml:space="preserve">The typical implementation pattern for a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CreateDefaultValueCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is to create a new <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> class, set the specific property value of each property of the <pc dataRefEnd="id14" dataRefStart="id13" id="6">DependencyObject</pc> to the intended default, and then return the new class as an <pc dataRefEnd="id16" dataRefStart="id15" id="8">Object</pc> reference via the return value of the <pc dataRefEnd="id18" dataRefStart="id17" id="10">CreateDefaultValueCallback</pc> method.</target>
          </segment>
        </unit>
        <unit id="234">
          <segment state="initial" id="234">
            <source xml:space="preserve">Property-changed callback method</source>
            <target xml:space="preserve">Property-changed callback method</target>
          </segment>
        </unit>
        <unit id="235">
          <segment state="initial" id="235">
            <source xml:space="preserve">You can define a property-changed callback method to define your property's interactions with other dependency properties, or to set an internal property or state of your object whenever the property changes.</source>
            <target xml:space="preserve">You can define a property-changed callback method to define your property's interactions with other dependency properties, or to set an internal property or state of your object whenever the property changes.</target>
          </segment>
        </unit>
        <unit id="236">
          <segment state="initial" id="236">
            <source xml:space="preserve">If your callback is invoked, the property system has determined that there is an effective property value change.</source>
            <target xml:space="preserve">If your callback is invoked, the property system has determined that there is an effective property value change.</target>
          </segment>
        </unit>
        <unit id="237">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="237">
            <source xml:space="preserve">Because the callback method is static, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">d</pc> parameter of the callback is important because it tells you which instance of the class has reported a change.</source>
            <target xml:space="preserve">Because the callback method is static, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">d</pc> parameter of the callback is important because it tells you which instance of the class has reported a change.</target>
          </segment>
        </unit>
        <unit id="238">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;em&gt;</data>
            <data id="id8">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="238">
            <source xml:space="preserve">A typical implementation uses the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**NewValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property of the event data and processes that value in some manner, usually by performing some other change on the object passed as <pc dataRefEnd="id8" dataRefStart="id7" id="4">d</pc>.</source>
            <target xml:space="preserve">A typical implementation uses the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**NewValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property of the event data and processes that value in some manner, usually by performing some other change on the object passed as <pc dataRefEnd="id8" dataRefStart="id7" id="4">d</pc>.</target>
          </segment>
        </unit>
        <unit id="239">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="239">
            <source xml:space="preserve">Additional responses to a property change are to reject the value reported by <pc dataRefEnd="id2" dataRefStart="id1" id="2">NewValue</pc>, to restore <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**OldValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, or to set the value to a programmatic constraint applied to the <pc dataRefEnd="id10" dataRefStart="id9" id="6">NewValue</pc>.</source>
            <target xml:space="preserve">Additional responses to a property change are to reject the value reported by <pc dataRefEnd="id2" dataRefStart="id1" id="2">NewValue</pc>, to restore <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**OldValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, or to set the value to a programmatic constraint applied to the <pc dataRefEnd="id10" dataRefStart="id9" id="6">NewValue</pc>.</target>
          </segment>
        </unit>
        <unit id="240">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="240">
            <source xml:space="preserve">This next example shows a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyChangedCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> implementation.</source>
            <target xml:space="preserve">This next example shows a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyChangedCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> implementation.</target>
          </segment>
        </unit>
        <unit id="241">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="241">
            <source xml:space="preserve">It implements the method you saw referenced in the previous <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> examples, as part of the construction arguments for the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">It implements the method you saw referenced in the previous <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> examples, as part of the construction arguments for the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="242">
          <segment state="initial" id="242">
            <source xml:space="preserve">The scenario addressed by this callback is that the class also has a calculated read-only property named "HasLabelValue" (implementation not shown).</source>
            <target xml:space="preserve">The scenario addressed by this callback is that the class also has a calculated read-only property named "HasLabelValue" (implementation not shown).</target>
          </segment>
        </unit>
        <unit id="243">
          <segment state="initial" id="243">
            <source xml:space="preserve">Whenever the "Label" property gets reevaluated, this callback method is invoked, and the callback enables the dependent calculated value to remain in synchronization with changes to the dependency property.</source>
            <target xml:space="preserve">Whenever the "Label" property gets reevaluated, this callback method is invoked, and the callback enables the dependent calculated value to remain in synchronization with changes to the dependency property.</target>
          </segment>
        </unit>
        <unit id="244">
          <segment state="initial" id="244">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="245">
          <segment state="initial" id="245">
            <source xml:space="preserve">Property changed behavior for structures and enumerations</source>
            <target xml:space="preserve">Property changed behavior for structures and enumerations</target>
          </segment>
        </unit>
        <unit id="246">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="246">
            <source xml:space="preserve">If the type of a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is an enumeration or a structure, the callback may be invoked even if the internal values of the structure or the enumeration value did not change.</source>
            <target xml:space="preserve">If the type of a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is an enumeration or a structure, the callback may be invoked even if the internal values of the structure or the enumeration value did not change.</target>
          </segment>
        </unit>
        <unit id="247">
          <segment state="initial" id="247">
            <source xml:space="preserve">This is different from a system primitive such as a string where it only is invoked if the value changed.</source>
            <target xml:space="preserve">This is different from a system primitive such as a string where it only is invoked if the value changed.</target>
          </segment>
        </unit>
        <unit id="248">
          <segment state="initial" id="248">
            <source xml:space="preserve">This is a side effect of box and unbox operations on these values that is done internally.</source>
            <target xml:space="preserve">This is a side effect of box and unbox operations on these values that is done internally.</target>
          </segment>
        </unit>
        <unit id="249">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="249">
            <source xml:space="preserve">If you have a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyChangedCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method for a property where your value is an enumeration or structure, you need to compare the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**OldValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**NewValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> by casting the values yourself and using the overloaded comparison operators that are available to the now-cast values.</source>
            <target xml:space="preserve">If you have a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyChangedCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method for a property where your value is an enumeration or structure, you need to compare the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**OldValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**NewValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> by casting the values yourself and using the overloaded comparison operators that are available to the now-cast values.</target>
          </segment>
        </unit>
        <unit id="250">
          <segment state="initial" id="250">
            <source xml:space="preserve">Or, if no such operator is available (which might be the case for a custom structure), you may need to compare the individual values.</source>
            <target xml:space="preserve">Or, if no such operator is available (which might be the case for a custom structure), you may need to compare the individual values.</target>
          </segment>
        </unit>
        <unit id="251">
          <segment state="initial" id="251">
            <source xml:space="preserve">You would typically choose to do nothing if the result is that the values have not changed.</source>
            <target xml:space="preserve">You would typically choose to do nothing if the result is that the values have not changed.</target>
          </segment>
        </unit>
        <unit id="252">
          <segment state="initial" id="252">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="253">
          <segment state="initial" id="253">
            <source xml:space="preserve">Best practices</source>
            <target xml:space="preserve">Best practices</target>
          </segment>
        </unit>
        <unit id="254">
          <segment state="initial" id="254">
            <source xml:space="preserve">Keep the following considerations in mind as best practices when as you define your custom dependency property.</source>
            <target xml:space="preserve">Keep the following considerations in mind as best practices when as you define your custom dependency property.</target>
          </segment>
        </unit>
        <unit id="255">
          <segment state="initial" id="255">
            <source xml:space="preserve">DependencyObject and threading</source>
            <target xml:space="preserve">DependencyObject and threading</target>
          </segment>
        </unit>
        <unit id="256">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="256">
            <source xml:space="preserve">All <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instances must be created on the UI thread which is associated with the current <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Window**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> that is shown by a Windows Runtime app.</source>
            <target xml:space="preserve">All <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instances must be created on the UI thread which is associated with the current <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Window**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> that is shown by a Windows Runtime app.</target>
          </segment>
        </unit>
        <unit id="257">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="257">
            <source xml:space="preserve">Although each <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyObject</pc> must be created on the main UI thread, the objects can be accessed using a dispatcher reference from other threads, by calling <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Dispatcher**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Although each <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyObject</pc> must be created on the main UI thread, the objects can be accessed using a dispatcher reference from other threads, by calling <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Dispatcher**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="258">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="258">
            <source xml:space="preserve">The threading aspects of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> are relevant because it generally means that only code that runs on the UI thread can change or even read the value of a dependency property.</source>
            <target xml:space="preserve">The threading aspects of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> are relevant because it generally means that only code that runs on the UI thread can change or even read the value of a dependency property.</target>
          </segment>
        </unit>
        <unit id="259">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="259">
            <source xml:space="preserve">Threading issues can usually be avoided in typical UI code that makes correct use of <pc dataRefEnd="id2" dataRefStart="id1" id="2">async</pc> patterns and background worker threads.</source>
            <target xml:space="preserve">Threading issues can usually be avoided in typical UI code that makes correct use of <pc dataRefEnd="id2" dataRefStart="id1" id="2">async</pc> patterns and background worker threads.</target>
          </segment>
        </unit>
        <unit id="260">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="260">
            <source xml:space="preserve">You typically only run into <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyObject</pc>-related threading issues if you are defining your own <pc dataRefEnd="id4" dataRefStart="id3" id="4">DependencyObject</pc> types and you attempt to use them for data sources or other scenarios where a <pc dataRefEnd="id6" dataRefStart="id5" id="6">DependencyObject</pc> isn't necessarily appropriate.</source>
            <target xml:space="preserve">You typically only run into <pc dataRefEnd="id2" dataRefStart="id1" id="2">DependencyObject</pc>-related threading issues if you are defining your own <pc dataRefEnd="id4" dataRefStart="id3" id="4">DependencyObject</pc> types and you attempt to use them for data sources or other scenarios where a <pc dataRefEnd="id6" dataRefStart="id5" id="6">DependencyObject</pc> isn't necessarily appropriate.</target>
          </segment>
        </unit>
        <unit id="261">
          <segment state="initial" id="261">
            <source xml:space="preserve">Avoiding unintentional singletons</source>
            <target xml:space="preserve">Avoiding unintentional singletons</target>
          </segment>
        </unit>
        <unit id="262">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="262">
            <source xml:space="preserve">An unintentional singleton can happen if you are declaring a dependency property that takes a reference type, and you call a constructor for that reference type as part of the code that establishes your <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">An unintentional singleton can happen if you are declaring a dependency property that takes a reference type, and you call a constructor for that reference type as part of the code that establishes your <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PropertyMetadata**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="263">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="263">
            <source xml:space="preserve">What happens is that all usages of the dependency property share just one instance of <pc dataRefEnd="id2" dataRefStart="id1" id="2">PropertyMetadata</pc> and thus try to share the single reference type you constructed.</source>
            <target xml:space="preserve">What happens is that all usages of the dependency property share just one instance of <pc dataRefEnd="id2" dataRefStart="id1" id="2">PropertyMetadata</pc> and thus try to share the single reference type you constructed.</target>
          </segment>
        </unit>
        <unit id="264">
          <segment state="initial" id="264">
            <source xml:space="preserve">Any subproperties of that value type that you set through your dependency property then propagate to other objects in ways you probably don't intend.</source>
            <target xml:space="preserve">Any subproperties of that value type that you set through your dependency property then propagate to other objects in ways you probably don't intend.</target>
          </segment>
        </unit>
        <unit id="265">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="265">
            <source xml:space="preserve">You can use class constructors to set initial values for a reference-type dependency property if you want a non-null value, but be aware that this would be considered a local value for purposes of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Dependency properties overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">You can use class constructors to set initial values for a reference-type dependency property if you want a non-null value, but be aware that this would be considered a local value for purposes of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Dependency properties overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="266">
          <segment state="initial" id="266">
            <source xml:space="preserve">It might be more appropriate to use a template for this purpose, if your class supports templates.</source>
            <target xml:space="preserve">It might be more appropriate to use a template for this purpose, if your class supports templates.</target>
          </segment>
        </unit>
        <unit id="267">
          <segment state="initial" id="267">
            <source xml:space="preserve">Another way to avoid a singleton pattern, but still provide a useful default, is to expose a static property on the reference type that provides a suitable default for the values of that class.</source>
            <target xml:space="preserve">Another way to avoid a singleton pattern, but still provide a useful default, is to expose a static property on the reference type that provides a suitable default for the values of that class.</target>
          </segment>
        </unit>
        <unit id="268">
          <segment state="initial" id="268">
            <source xml:space="preserve">Collection-type dependency properties</source>
            <target xml:space="preserve">Collection-type dependency properties</target>
          </segment>
        </unit>
        <unit id="269">
          <segment state="initial" id="269">
            <source xml:space="preserve">Collection-type dependency properties have some additional implementation issues to consider.</source>
            <target xml:space="preserve">Collection-type dependency properties have some additional implementation issues to consider.</target>
          </segment>
        </unit>
        <unit id="270">
          <segment state="initial" id="270">
            <source xml:space="preserve">Collection-type dependency properties are relatively rare in the Windows Runtime API.</source>
            <target xml:space="preserve">Collection-type dependency properties are relatively rare in the Windows Runtime API.</target>
          </segment>
        </unit>
        <unit id="271">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="271">
            <source xml:space="preserve">In most cases, you can use collections where the items are a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> subclass, but the collection property itself is implemented as a conventional CLR or C++ property.</source>
            <target xml:space="preserve">In most cases, you can use collections where the items are a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> subclass, but the collection property itself is implemented as a conventional CLR or C++ property.</target>
          </segment>
        </unit>
        <unit id="272">
          <segment state="initial" id="272">
            <source xml:space="preserve">This is because collections do not necessarily suit some typical scenarios where dependency properties are involved.</source>
            <target xml:space="preserve">This is because collections do not necessarily suit some typical scenarios where dependency properties are involved.</target>
          </segment>
        </unit>
        <unit id="273">
          <segment state="initial" id="273">
            <source xml:space="preserve">For example:</source>
            <target xml:space="preserve">For example:</target>
          </segment>
        </unit>
        <unit id="274">
          <segment state="initial" id="274">
            <source xml:space="preserve">You do not typically animate a collection.</source>
            <target xml:space="preserve">You do not typically animate a collection.</target>
          </segment>
        </unit>
        <unit id="275">
          <segment state="initial" id="275">
            <source xml:space="preserve">You do not typically prepopulate the items in a collection with styles or a template.</source>
            <target xml:space="preserve">You do not typically prepopulate the items in a collection with styles or a template.</target>
          </segment>
        </unit>
        <unit id="276">
          <segment state="initial" id="276">
            <source xml:space="preserve">Although binding to collections is a major scenario, a collection does not need to be a dependency property to be a binding source.</source>
            <target xml:space="preserve">Although binding to collections is a major scenario, a collection does not need to be a dependency property to be a binding source.</target>
          </segment>
        </unit>
        <unit id="277">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="277">
            <source xml:space="preserve">For binding targets, it is more typical to use subclasses of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemsControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DataTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to support collection items, or to use view-model patterns.</source>
            <target xml:space="preserve">For binding targets, it is more typical to use subclasses of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemsControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DataTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to support collection items, or to use view-model patterns.</target>
          </segment>
        </unit>
        <unit id="278">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="278">
            <source xml:space="preserve">For more info about binding to and from collections, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Data binding in depth</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info about binding to and from collections, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Data binding in depth</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="279">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="279">
            <source xml:space="preserve">Notifications for collection changes are better addressed through interfaces such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">INotifyPropertyChanged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="4">INotifyCollectionChanged</pc>, or by deriving the collection type from <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ObservableCollection**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Notifications for collection changes are better addressed through interfaces such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">INotifyPropertyChanged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="4">INotifyCollectionChanged</pc>, or by deriving the collection type from <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ObservableCollection**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="280">
          <segment state="initial" id="280">
            <source xml:space="preserve">Nevertheless, scenarios for collection-type dependency properties do exist.</source>
            <target xml:space="preserve">Nevertheless, scenarios for collection-type dependency properties do exist.</target>
          </segment>
        </unit>
        <unit id="281">
          <segment state="initial" id="281">
            <source xml:space="preserve">The next three sections provide some guidance on how to implement a collection-type dependency property.</source>
            <target xml:space="preserve">The next three sections provide some guidance on how to implement a collection-type dependency property.</target>
          </segment>
        </unit>
        <unit id="282">
          <segment state="initial" id="282">
            <source xml:space="preserve">Initializing the collection</source>
            <target xml:space="preserve">Initializing the collection</target>
          </segment>
        </unit>
        <unit id="283">
          <segment state="initial" id="283">
            <source xml:space="preserve">When you create a dependency property, you can establish a default value by means of dependency property metadata.</source>
            <target xml:space="preserve">When you create a dependency property, you can establish a default value by means of dependency property metadata.</target>
          </segment>
        </unit>
        <unit id="284">
          <segment state="initial" id="284">
            <source xml:space="preserve">But be careful to not use a singleton static collection as the default value.</source>
            <target xml:space="preserve">But be careful to not use a singleton static collection as the default value.</target>
          </segment>
        </unit>
        <unit id="285">
          <segment state="initial" id="285">
            <source xml:space="preserve">Instead, you must deliberately set the collection value to a unique (instance) collection as part of class-constructor logic for the owner class of the collection property.</source>
            <target xml:space="preserve">Instead, you must deliberately set the collection value to a unique (instance) collection as part of class-constructor logic for the owner class of the collection property.</target>
          </segment>
        </unit>
        <unit id="286">
          <segment state="initial" id="286">
            <source xml:space="preserve">Change notifications</source>
            <target xml:space="preserve">Change notifications</target>
          </segment>
        </unit>
        <unit id="287">
          <segment state="initial" id="287">
            <source xml:space="preserve">Defining the collection as a dependency property does not automatically provide change notification for the items in the collection by virtue of the property system invoking the "PropertyChanged" callback method.</source>
            <target xml:space="preserve">Defining the collection as a dependency property does not automatically provide change notification for the items in the collection by virtue of the property system invoking the "PropertyChanged" callback method.</target>
          </segment>
        </unit>
        <unit id="288">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="288">
            <source xml:space="preserve">If you want notifications for collections or collection items—for example, for a data-binding scenario— implement the <pc dataRefEnd="id2" dataRefStart="id1" id="2">INotifyPropertyChanged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="4">INotifyCollectionChanged</pc> interface.</source>
            <target xml:space="preserve">If you want notifications for collections or collection items—for example, for a data-binding scenario— implement the <pc dataRefEnd="id2" dataRefStart="id1" id="2">INotifyPropertyChanged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="4">INotifyCollectionChanged</pc> interface.</target>
          </segment>
        </unit>
        <unit id="289">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="289">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Data binding in depth</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Data binding in depth</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="290">
          <segment state="initial" id="290">
            <source xml:space="preserve">Dependency property security considerations</source>
            <target xml:space="preserve">Dependency property security considerations</target>
          </segment>
        </unit>
        <unit id="291">
          <segment state="initial" id="291">
            <source xml:space="preserve">Declare dependency properties as public properties.</source>
            <target xml:space="preserve">Declare dependency properties as public properties.</target>
          </segment>
        </unit>
        <unit id="292">
          <segment state="initial" id="292">
            <source xml:space="preserve">Declare dependency property identifiers as public static read-only members.</source>
            <target xml:space="preserve">Declare dependency property identifiers as public static read-only members.</target>
          </segment>
        </unit>
        <unit id="293">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="293">
            <source xml:space="preserve">Even if you attempt to declare other access levels permitted by a language (such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">protected</pc>), a dependency property can always be accessed through the identifier in combination with the property-system APIs.</source>
            <target xml:space="preserve">Even if you attempt to declare other access levels permitted by a language (such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">protected</pc>), a dependency property can always be accessed through the identifier in combination with the property-system APIs.</target>
          </segment>
        </unit>
        <unit id="294">
          <segment state="initial" id="294">
            <source xml:space="preserve">Declaring the dependency property identifier as internal or private will not work, because then the property system cannot operate properly.</source>
            <target xml:space="preserve">Declaring the dependency property identifier as internal or private will not work, because then the property system cannot operate properly.</target>
          </segment>
        </unit>
        <unit id="295">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="295">
            <source xml:space="preserve">Wrapper properties are really just for convenience, Security mechanisms applied to the wrappers can be bypassed by calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instead.</source>
            <target xml:space="preserve">Wrapper properties are really just for convenience, Security mechanisms applied to the wrappers can be bypassed by calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instead.</target>
          </segment>
        </unit>
        <unit id="296">
          <segment state="initial" id="296">
            <source xml:space="preserve">So keep wrapper properties public; otherwise you just make your property harder for legitimate callers to use without providing any real security benefit.</source>
            <target xml:space="preserve">So keep wrapper properties public; otherwise you just make your property harder for legitimate callers to use without providing any real security benefit.</target>
          </segment>
        </unit>
        <unit id="297">
          <segment state="initial" id="297">
            <source xml:space="preserve">The Windows Runtime does not provide a way to register a custom dependency property as read-only.</source>
            <target xml:space="preserve">The Windows Runtime does not provide a way to register a custom dependency property as read-only.</target>
          </segment>
        </unit>
        <unit id="298">
          <segment state="initial" id="298">
            <source xml:space="preserve">Dependency properties and class constructors</source>
            <target xml:space="preserve">Dependency properties and class constructors</target>
          </segment>
        </unit>
        <unit id="299">
          <segment state="initial" id="299">
            <source xml:space="preserve">There is a general principle that class constructors should not call virtual methods.</source>
            <target xml:space="preserve">There is a general principle that class constructors should not call virtual methods.</target>
          </segment>
        </unit>
        <unit id="300">
          <segment state="initial" id="300">
            <source xml:space="preserve">This is because constructors can be called to accomplish base initialization of a derived class constructor, and entering the virtual method through the constructor might occur when the object instance being constructed is not yet completely initialized.</source>
            <target xml:space="preserve">This is because constructors can be called to accomplish base initialization of a derived class constructor, and entering the virtual method through the constructor might occur when the object instance being constructed is not yet completely initialized.</target>
          </segment>
        </unit>
        <unit id="301">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="301">
            <source xml:space="preserve">When you derive from any class that already derives from <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, remember that the property system itself calls and exposes virtual methods internally as part of its services.</source>
            <target xml:space="preserve">When you derive from any class that already derives from <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, remember that the property system itself calls and exposes virtual methods internally as part of its services.</target>
          </segment>
        </unit>
        <unit id="302">
          <segment state="initial" id="302">
            <source xml:space="preserve">To avoid potential problems with run-time initialization, don't set dependency property values within constructors of classes.</source>
            <target xml:space="preserve">To avoid potential problems with run-time initialization, don't set dependency property values within constructors of classes.</target>
          </segment>
        </unit>
        <unit id="303">
          <segment state="initial" id="303">
            <source xml:space="preserve">Registering the dependency properties for C++/CX apps</source>
            <target xml:space="preserve">Registering the dependency properties for C++/CX apps</target>
          </segment>
        </unit>
        <unit id="304">
          <segment state="initial" id="304">
            <source xml:space="preserve">The implementation for registering a property in C++/CX is trickier than C\#C\#, both because of the separation into header and implementation file and also because initialization at the root scope of the implementation file is a bad practice.</source>
            <target xml:space="preserve">The implementation for registering a property in C++/CX is trickier than C\#C\#, both because of the separation into header and implementation file and also because initialization at the root scope of the implementation file is a bad practice.</target>
          </segment>
        </unit>
        <unit id="305">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="305">
            <source xml:space="preserve">(Visual C++ component extensions (C++/CX) puts static initializer code from the root scope directly into <pc dataRefEnd="id2" dataRefStart="id1" id="2">DllMain</pc>, whereas C\# compilers assign the static initializers to classes and thus avoid <pc dataRefEnd="id4" dataRefStart="id3" id="4">DllMain</pc> load lock issues.).</source>
            <target xml:space="preserve">(Visual C++ component extensions (C++/CX) puts static initializer code from the root scope directly into <pc dataRefEnd="id2" dataRefStart="id1" id="2">DllMain</pc>, whereas C\# compilers assign the static initializers to classes and thus avoid <pc dataRefEnd="id4" dataRefStart="id3" id="4">DllMain</pc> load lock issues.).</target>
          </segment>
        </unit>
        <unit id="306">
          <segment state="initial" id="306">
            <source xml:space="preserve">The best practice here is to declare a helper function that does all your dependency property registration for a class, one function per class.</source>
            <target xml:space="preserve">The best practice here is to declare a helper function that does all your dependency property registration for a class, one function per class.</target>
          </segment>
        </unit>
        <unit id="307">
          <segment state="initial" id="307">
            <source xml:space="preserve">Then for each custom class your app consumes, you'll have to reference the helper registration function that's exposed by each custom class you want to use.</source>
            <target xml:space="preserve">Then for each custom class your app consumes, you'll have to reference the helper registration function that's exposed by each custom class you want to use.</target>
          </segment>
        </unit>
        <unit id="308">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="308">
            <source xml:space="preserve">Call each helper registration function once as part of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Application constructor**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> (<pc dataRefEnd="id8" dataRefStart="id7" id="4">App::App()</pc>), prior to <pc dataRefEnd="id10" dataRefStart="id9" id="6">InitializeComponent</pc>.</source>
            <target xml:space="preserve">Call each helper registration function once as part of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Application constructor**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> (<pc dataRefEnd="id8" dataRefStart="id7" id="4">App::App()</pc>), prior to <pc dataRefEnd="id10" dataRefStart="id9" id="6">InitializeComponent</pc>.</target>
          </segment>
        </unit>
        <unit id="309">
          <segment state="initial" id="309">
            <source xml:space="preserve">That constructor only runs when the app is really referenced for the first time, it won't run again if a suspended app resumes, for example.</source>
            <target xml:space="preserve">That constructor only runs when the app is really referenced for the first time, it won't run again if a suspended app resumes, for example.</target>
          </segment>
        </unit>
        <unit id="310">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="310">
            <source xml:space="preserve">Also, as seen in the previous C++ registration example, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nullptr</pc> check around each <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> call is important: it's insurance that no caller of the function can register the property twice.</source>
            <target xml:space="preserve">Also, as seen in the previous C++ registration example, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nullptr</pc> check around each <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Register**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> call is important: it's insurance that no caller of the function can register the property twice.</target>
          </segment>
        </unit>
        <unit id="311">
          <segment state="initial" id="311">
            <source xml:space="preserve">A second registration call would probably crash your app without such a check because the property name would be a duplicate.</source>
            <target xml:space="preserve">A second registration call would probably crash your app without such a check because the property name would be a duplicate.</target>
          </segment>
        </unit>
        <unit id="312">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="312">
            <source xml:space="preserve">You can see this implementation pattern in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">XAML user and custom controls sample</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> if you look at the code for the C++/CX version of the sample.</source>
            <target xml:space="preserve">You can see this implementation pattern in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">XAML user and custom controls sample</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> if you look at the code for the C++/CX version of the sample.</target>
          </segment>
        </unit>
        <unit id="313">
          <segment state="initial" id="313">
            <source xml:space="preserve">Related topics</source>
            <target xml:space="preserve">Related topics</target>
          </segment>
        </unit>
        <unit id="314">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="314">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DependencyObject**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DependencyObject**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="315">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="315">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DependencyProperty.Register**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DependencyProperty.Register**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="316">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="316">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Dependency properties overview</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Dependency properties overview</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="317">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="317">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">XAML user and custom controls sample</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">XAML user and custom controls sample</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>