<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">53aa1138567bbb0d9d241783157c919df37402ac</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Getting started: Getting around in Visual Studio</source>
            <target xml:space="preserve">Getting started: Getting around in Visual Studio</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Getting around in Microsoft Visual Studio</source>
            <target xml:space="preserve">Getting around in Microsoft Visual Studio</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">Let's now get back to the project that we created earlier, and look at how you might find your way around the Microsoft Visual Studio integrated development environment (IDE).</source>
            <target xml:space="preserve">Let's now get back to the project that we created earlier, and look at how you might find your way around the Microsoft Visual Studio integrated development environment (IDE).</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">If you are an Xcode developer, the default view below should be familiar, with source files in the left pane, the editor (either the UI or source code) in the center pane, and controls and their properties in the right pane.</source>
            <target xml:space="preserve">If you are an Xcode developer, the default view below should be familiar, with source files in the left pane, the editor (either the UI or source code) in the center pane, and controls and their properties in the right pane.</target>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">xcode development environment</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">xcode development environment</pc>
						</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">Microsoft Visual Studio looks very similar, although the default view has the controls on the left side in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Toolbox</pc>.</source>
            <target xml:space="preserve">Microsoft Visual Studio looks very similar, although the default view has the controls on the left side in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Toolbox</pc>.</target>
          </segment>
        </unit>
        <unit id="109">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="109">
            <source xml:space="preserve">The source files are in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc> on the right side, and properties are in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Properties</pc> under the <pc dataRefEnd="id6" dataRefStart="id5" id="6">Solution Explorer</pc> pane, like this:</source>
            <target xml:space="preserve">The source files are in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc> on the right side, and properties are in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Properties</pc> under the <pc dataRefEnd="id6" dataRefStart="id5" id="6">Solution Explorer</pc> pane, like this:</target>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">visual studio development environment</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">visual studio development environment</pc>
						</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">If this feels a little alien to you, you'll be pleased to know you can rearrange the panes in Visual Studio to place the source files on the left of the screen and the toolbox on the right.</source>
            <target xml:space="preserve">If this feels a little alien to you, you'll be pleased to know you can rearrange the panes in Visual Studio to place the source files on the left of the screen and the toolbox on the right.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">In fact, you can click and drag the title bar of any pane to reposition it, and Visual Studio will display a shaded box telling you where it will be docked once you release it.</source>
            <target xml:space="preserve">In fact, you can click and drag the title bar of any pane to reposition it, and Visual Studio will display a shaded box telling you where it will be docked once you release it.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Many panes also have a small drawing pin icon in their title bar.</source>
            <target xml:space="preserve">Many panes also have a small drawing pin icon in their title bar.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">This allows you to pin the panel as-is, locking it in place.</source>
            <target xml:space="preserve">This allows you to pin the panel as-is, locking it in place.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">Unpin the pane, and it can be collapsed to save space: useful if your monitor is on the smaller side.</source>
            <target xml:space="preserve">Unpin the pane, and it can be collapsed to save space: useful if your monitor is on the smaller side.</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">If you mess things up (don't worry, we've all done it), select <pc dataRefEnd="id2" dataRefStart="id1" id="2">Reset Window Layout</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Window</pc> menu to restore order.</source>
            <target xml:space="preserve">If you mess things up (don't worry, we've all done it), select <pc dataRefEnd="id2" dataRefStart="id1" id="2">Reset Window Layout</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Window</pc> menu to restore order.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">Adding controls, setting their properties, and responding to events</source>
            <target xml:space="preserve">Adding controls, setting their properties, and responding to events</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">Let's now add some controls to your project.</source>
            <target xml:space="preserve">Let's now add some controls to your project.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">We'll then change some of their properties, and write some code to respond to one of the control's events.</source>
            <target xml:space="preserve">We'll then change some of their properties, and write some code to respond to one of the control's events.</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">To add controls in Xcode, you open up the desired .xib file or the Storyboard and then drag and drop controls, such as a<pc dataRefEnd="id2" dataRefStart="id1" id="2">Round Rect Button</pc> or a <pc dataRefEnd="id4" dataRefStart="id3" id="4">Label</pc>, as shown below:</source>
            <target xml:space="preserve">To add controls in Xcode, you open up the desired .xib file or the Storyboard and then drag and drop controls, such as a<pc dataRefEnd="id2" dataRefStart="id1" id="2">Round Rect Button</pc> or a <pc dataRefEnd="id4" dataRefStart="id3" id="4">Label</pc>, as shown below:</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">designing ui in xcode</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">designing ui in xcode</pc>
						</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Let's do something similar in Visual Studio.</source>
            <target xml:space="preserve">Let's do something similar in Visual Studio.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Toolbox</pc>, drag the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Button</pc> control, and then drop it onto the MainPage.xaml file's design surface.</source>
            <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Toolbox</pc>, drag the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Button</pc> control, and then drop it onto the MainPage.xaml file's design surface.</target>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source xml:space="preserve">Do the same with the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> control, so it looks like this:</source>
            <target xml:space="preserve">Do the same with the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> control, so it looks like this:</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">designing ui in visual studio</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">designing ui in visual studio</pc>
						</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">Unlike Xcode, which hides the layout and binding information inside a .xib or Storyboard file, Visual Studio encourages you to edit the XAML files used to store these details it its rich, editable, declarative, XML-like language.</source>
            <target xml:space="preserve">Unlike Xcode, which hides the layout and binding information inside a .xib or Storyboard file, Visual Studio encourages you to edit the XAML files used to store these details it its rich, editable, declarative, XML-like language.</target>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source xml:space="preserve">For more info about Extensible Application Markup Language (XAML), see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">XAML overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info about Extensible Application Markup Language (XAML), see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">XAML overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">For now, know that everything displayed in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> pane is defined in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">XAML</pc> pane.</source>
            <target xml:space="preserve">For now, know that everything displayed in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> pane is defined in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">XAML</pc> pane.</target>
          </segment>
        </unit>
        <unit id="129">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="129">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">XAML</pc> pane allows for fine control where necessary, and as you learn more about it, you can quickly develop user interface code manually.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">XAML</pc> pane allows for fine control where necessary, and as you learn more about it, you can quickly develop user interface code manually.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">For now, however, let's focus on just the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">Properties</pc> panes.</source>
            <target xml:space="preserve">For now, however, let's focus on just the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">Properties</pc> panes.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">Let's change the button's details.</source>
            <target xml:space="preserve">Let's change the button's details.</target>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source xml:space="preserve">As you will know, to change the button's name in Xcode, you would change the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Title</pc> field in its properties panel.</source>
            <target xml:space="preserve">As you will know, to change the button's name in Xcode, you would change the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Title</pc> field in its properties panel.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">When using Visual Studio you do something very similar.</source>
            <target xml:space="preserve">When using Visual Studio you do something very similar.</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> pane, tap the button to give it focus.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> pane, tap the button to give it focus.</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">Then in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties</pc> pane, alter the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Content</pc> value from "Button" to "Press Me".</source>
            <target xml:space="preserve">Then in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties</pc> pane, alter the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Content</pc> value from "Button" to "Press Me".</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">Next, update the name of the button control, by changing the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Name</pc> value from "&lt;No Name&gt;" to "myButton", as shown here:</source>
            <target xml:space="preserve">Next, update the name of the button control, by changing the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Name</pc> value from "&lt;No Name&gt;" to "myButton", as shown here:</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">button properties window in visual studio</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">button properties window in visual studio</pc>
						</target>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source xml:space="preserve">Now, let's write some code to change the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> control's contents to "Hello, World!"</source>
            <target xml:space="preserve">Now, let's write some code to change the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> control's contents to "Hello, World!"</target>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source xml:space="preserve">after the user taps the button.</source>
            <target xml:space="preserve">after the user taps the button.</target>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source xml:space="preserve">In Xcode, you would associate an event with a control by writing code and then associating that code with the control, often by control-dragging the button into the source code, like this:</source>
            <target xml:space="preserve">In Xcode, you would associate an event with a control by writing code and then associating that code with the control, often by control-dragging the button into the source code, like this:</target>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">wiring a button to an event in xcode</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">wiring a button to an event in xcode</pc>
						</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">Visual Studio is similar.</source>
            <target xml:space="preserve">Visual Studio is similar.</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">At the top right of <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties</pc> is a lightning bolt button.</source>
            <target xml:space="preserve">At the top right of <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties</pc> is a lightning bolt button.</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">This is where the possible events associated with the selected control are listed, like this:</source>
            <target xml:space="preserve">This is where the possible events associated with the selected control are listed, like this:</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">button events list in visual studio</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">button events list in visual studio</pc>
						</target>
          </segment>
        </unit>
        <unit id="146">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="146">
            <source xml:space="preserve">To add code for the button's click event, first select the button in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> pane.</source>
            <target xml:space="preserve">To add code for the button's click event, first select the button in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> pane.</target>
          </segment>
        </unit>
        <unit id="147">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="147">
            <source xml:space="preserve">Next, click the lightning bolt button, and double-click the empty box next to the name <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc>.</source>
            <target xml:space="preserve">Next, click the lightning bolt button, and double-click the empty box next to the name <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc>.</target>
          </segment>
        </unit>
        <unit id="148">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="148">
            <source xml:space="preserve">Visual Studio then adds the event "myButton\_Click" to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc> box, and then adds and displays the corresponding event handler in the MainPage.xaml.cs file, like this.</source>
            <target xml:space="preserve">Visual Studio then adds the event "myButton\_Click" to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc> box, and then adds and displays the corresponding event handler in the MainPage.xaml.cs file, like this.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">Let's now hook-up the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> control.</source>
            <target xml:space="preserve">Let's now hook-up the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> control.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">In Xcode, you would control-drag the button to the source code file to associate the control with its definition, like this.</source>
            <target xml:space="preserve">In Xcode, you would control-drag the button to the source code file to associate the control with its definition, like this.</target>
          </segment>
        </unit>
        <unit id="151">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="151">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">wiring a label to its definition in xcode</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">wiring a label to its definition in xcode</pc>
						</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">In Visual Studio, you don't need associated the control as this is always done for you.</source>
            <target xml:space="preserve">In Visual Studio, you don't need associated the control as this is always done for you.</target>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source xml:space="preserve">Let's change some of the properties though:</source>
            <target xml:space="preserve">Let's change some of the properties though:</target>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source xml:space="preserve">Tap the MainPage.xaml file tab.</source>
            <target xml:space="preserve">Tap the MainPage.xaml file tab.</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> pane, tap the <pc dataRefEnd="id4" dataRefStart="id3" id="4">TextBlock</pc> control.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Design</pc> pane, tap the <pc dataRefEnd="id4" dataRefStart="id3" id="4">TextBlock</pc> control.</target>
          </segment>
        </unit>
        <unit id="156">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="156">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties</pc> pane, tap the wrench button to display its properties.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties</pc> pane, tap the wrench button to display its properties.</target>
          </segment>
        </unit>
        <unit id="157">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="157">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Name</pc> box, change "&lt;No Name&gt;" to "myLabel".</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Name</pc> box, change "&lt;No Name&gt;" to "myLabel".</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">label properties window in visual studio</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">label properties window in visual studio</pc>
						</target>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source xml:space="preserve">Let's now add some code to the button's click event.</source>
            <target xml:space="preserve">Let's now add some code to the button's click event.</target>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source xml:space="preserve">To do this, tap the MainPage.xaml.cs file, and add the following code to the myButton\_Click event handler.</source>
            <target xml:space="preserve">To do this, tap the MainPage.xaml.cs file, and add the following code to the myButton\_Click event handler.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">This is similar to what you would write in Swift:</source>
            <target xml:space="preserve">This is similar to what you would write in Swift:</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">Finally, to run the app, select the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc> (or just press F5).</source>
            <target xml:space="preserve">Finally, to run the app, select the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc> (or just press F5).</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">After the app starts, click the "Press Me" button, and see the label's contents change from "TextBlock" to "Hello, World!", as shown in the following figure.</source>
            <target xml:space="preserve">After the app starts, click the "Press Me" button, and see the label's contents change from "TextBlock" to "Hello, World!", as shown in the following figure.</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">results of running the first walkthrough: hello, world!</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">results of running the first walkthrough: hello, world!</pc>
						</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">To quit the app, return to Visual Studio, tap the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop Debugging</pc> (or just press SHIFT + F5).</source>
            <target xml:space="preserve">To quit the app, return to Visual Studio, tap the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop Debugging</pc> (or just press SHIFT + F5).</target>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source xml:space="preserve">Notice that Visual Studio lets you try the app in many different devices, to check how it will perform in each.</source>
            <target xml:space="preserve">Notice that Visual Studio lets you try the app in many different devices, to check how it will perform in each.</target>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source xml:space="preserve">Next step</source>
            <target xml:space="preserve">Next step</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Getting started: Common Controls</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Getting started: Common Controls</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>