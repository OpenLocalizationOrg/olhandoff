<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">bf63c274137f7fcdab8b09cf169ca9d0f44ea880</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Windows Runtime 8.x to UWP case study: QuizGame peer-to-peer sample app</source>
            <target xml:space="preserve">Windows Runtime 8.x to UWP case study: QuizGame peer-to-peer sample app</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">This topic presents a case study of porting a functioning peer-to-peer quiz game WinRT 8.1 sample app to a Windows 10 Universal Windows Platform (UWP) app.</source>
            <target xml:space="preserve">This topic presents a case study of porting a functioning peer-to-peer quiz game WinRT 8.1 sample app to a Windows 10 Universal Windows Platform (UWP) app.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">A Universal 8.1 app is one that builds two versions of the same app: one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</source>
            <target xml:space="preserve">A Universal 8.1 app is one that builds two versions of the same app: one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">The WinRT 8.1 version of QuizGame uses a Universal Windows app project arrangement, but it takes a different approach and it builds a functionally distinct app for the two platforms.</source>
            <target xml:space="preserve">The WinRT 8.1 version of QuizGame uses a Universal Windows app project arrangement, but it takes a different approach and it builds a functionally distinct app for the two platforms.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">The Windows 8.1 app package serves as the host for a quiz game session, while the Windows Phone 8.1 app package plays the role of the client to the host.</source>
            <target xml:space="preserve">The Windows 8.1 app package serves as the host for a quiz game session, while the Windows Phone 8.1 app package plays the role of the client to the host.</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">The two halves of the quiz game session communicate via peer-to-peer networking.</source>
            <target xml:space="preserve">The two halves of the quiz game session communicate via peer-to-peer networking.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Tailoring the two halves to PC, and phone, respectively makes good sense.</source>
            <target xml:space="preserve">Tailoring the two halves to PC, and phone, respectively makes good sense.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">But, wouldn't it be even better if you could run both the host and the client on just about any device of your choosing?</source>
            <target xml:space="preserve">But, wouldn't it be even better if you could run both the host and the client on just about any device of your choosing?</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">In this case study, we'll port both apps to Windows 10 where they will each build into a single app package that users can install onto a wide range of devices.</source>
            <target xml:space="preserve">In this case study, we'll port both apps to Windows 10 where they will each build into a single app package that users can install onto a wide range of devices.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">The app uses patterns that make use of views and view models.</source>
            <target xml:space="preserve">The app uses patterns that make use of views and view models.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">As a result of this clean separation, the porting process for this app is very straightforward, as you'll see.</source>
            <target xml:space="preserve">As a result of this clean separation, the porting process for this app is very straightforward, as you'll see.</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  This sample assumes your network is configured to send and receive custom UDP group multicast packets (most home networks are, although your work network may not be).</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  This sample assumes your network is configured to send and receive custom UDP group multicast packets (most home networks are, although your work network may not be).</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">The sample also sends and receives TCP packets.</source>
            <target xml:space="preserve">The sample also sends and receives TCP packets.</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening QuizGame10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening QuizGame10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">Downloads</source>
            <target xml:space="preserve">Downloads</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the QuizGame Universal 8.1 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the QuizGame Universal 8.1 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the QuizGame10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the QuizGame10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">The WinRT 8.1 solution</source>
            <target xml:space="preserve">The WinRT 8.1 solution</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">Here’s what QuizGame—the app that we're going to port—looks like.</source>
            <target xml:space="preserve">Here’s what QuizGame—the app that we're going to port—looks like.</target>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the quizgame host app running on windows</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the quizgame host app running on windows</pc>
						</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">The QuizGame host app running on Windows</source>
            <target xml:space="preserve">The QuizGame host app running on Windows</target>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the quizgame client app running on windows phone</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the quizgame client app running on windows phone</pc>
						</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">The QuizGame client app running on Windows Phone</source>
            <target xml:space="preserve">The QuizGame client app running on Windows Phone</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">A walkthrough of QuizGame in use</source>
            <target xml:space="preserve">A walkthrough of QuizGame in use</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">This is a short hypothetical account of the app in use, but it provides useful info should you want to try out the app for yourself over your wireless network.</source>
            <target xml:space="preserve">This is a short hypothetical account of the app in use, but it provides useful info should you want to try out the app for yourself over your wireless network.</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">A fun quiz game is taking place in a bar.</source>
            <target xml:space="preserve">A fun quiz game is taking place in a bar.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">There's a big TV in the bar that everyone can see.</source>
            <target xml:space="preserve">There's a big TV in the bar that everyone can see.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">The quizmaster has a PC whose output is being shown on the TV.</source>
            <target xml:space="preserve">The quizmaster has a PC whose output is being shown on the TV.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">That PC has "the host app" running on it.</source>
            <target xml:space="preserve">That PC has "the host app" running on it.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Anyone who wants to take part in the quiz just needs to install "the client app" on their phone or Surface.</source>
            <target xml:space="preserve">Anyone who wants to take part in the quiz just needs to install "the client app" on their phone or Surface.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">The host app is in lobby mode, and on the big TV, it's advertising that it's ready for client apps to connect.</source>
            <target xml:space="preserve">The host app is in lobby mode, and on the big TV, it's advertising that it's ready for client apps to connect.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">Joan launches the client app on her mobile device.</source>
            <target xml:space="preserve">Joan launches the client app on her mobile device.</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">She types her name into the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Player name</pc> text box and taps <pc dataRefEnd="id4" dataRefStart="id3" id="4">Join game</pc>.</source>
            <target xml:space="preserve">She types her name into the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Player name</pc> text box and taps <pc dataRefEnd="id4" dataRefStart="id3" id="4">Join game</pc>.</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">The host app acknowledges that Joan has joined by displaying her name, and Joan’s client app indicates that it's waiting for the game to begin.</source>
            <target xml:space="preserve">The host app acknowledges that Joan has joined by displaying her name, and Joan’s client app indicates that it's waiting for the game to begin.</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">Next, Maxwell goes through those same steps on his mobile device.</source>
            <target xml:space="preserve">Next, Maxwell goes through those same steps on his mobile device.</target>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source xml:space="preserve">The quizmaster clicks <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start game</pc> and the host app shows a question and the possible answers (it also shows a list of the joined players in normal fontweight, colored gray).</source>
            <target xml:space="preserve">The quizmaster clicks <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start game</pc> and the host app shows a question and the possible answers (it also shows a list of the joined players in normal fontweight, colored gray).</target>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source xml:space="preserve">Simultaneously, the answers appear displayed on buttons on joined client devices.</source>
            <target xml:space="preserve">Simultaneously, the answers appear displayed on buttons on joined client devices.</target>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source xml:space="preserve">Joan taps the button with the answer "1975" on it whereupon all her buttons become disabled.</source>
            <target xml:space="preserve">Joan taps the button with the answer "1975" on it whereupon all her buttons become disabled.</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">On the host app, Joan’s name is painted green (and becomes bold) in acknowledgment of the receipt of her answer.</source>
            <target xml:space="preserve">On the host app, Joan’s name is painted green (and becomes bold) in acknowledgment of the receipt of her answer.</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">Maxwell answers, also.</source>
            <target xml:space="preserve">Maxwell answers, also.</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">The quizmaster, noting that all players' names are green, clicks <pc dataRefEnd="id2" dataRefStart="id1" id="2">Next question</pc>.</source>
            <target xml:space="preserve">The quizmaster, noting that all players' names are green, clicks <pc dataRefEnd="id2" dataRefStart="id1" id="2">Next question</pc>.</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">Questions continue to be asked and answered in this same cycle.</source>
            <target xml:space="preserve">Questions continue to be asked and answered in this same cycle.</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">When the last question is being shown on the host app, <pc dataRefEnd="id2" dataRefStart="id1" id="2">Show results</pc> is the content of the button, and not <pc dataRefEnd="id4" dataRefStart="id3" id="4">Next question</pc>.</source>
            <target xml:space="preserve">When the last question is being shown on the host app, <pc dataRefEnd="id2" dataRefStart="id1" id="2">Show results</pc> is the content of the button, and not <pc dataRefEnd="id4" dataRefStart="id3" id="4">Next question</pc>.</target>
          </segment>
        </unit>
        <unit id="146">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="146">
            <source xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="2">Show results</pc> is clicked, the results are shown.</source>
            <target xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="2">Show results</pc> is clicked, the results are shown.</target>
          </segment>
        </unit>
        <unit id="147">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="147">
            <source xml:space="preserve">Clicking <pc dataRefEnd="id2" dataRefStart="id1" id="2">Return to lobby</pc> returns to the beginning of the game lifecycle with the exception that joined players remain joined.</source>
            <target xml:space="preserve">Clicking <pc dataRefEnd="id2" dataRefStart="id1" id="2">Return to lobby</pc> returns to the beginning of the game lifecycle with the exception that joined players remain joined.</target>
          </segment>
        </unit>
        <unit id="148">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="148">
            <source xml:space="preserve">But, going back to the lobby gives new players a chance to join, and even a convenient time for joined players to leave (although a joined player can leave at any time by tapping <pc dataRefEnd="id2" dataRefStart="id1" id="2">Leave game</pc>).</source>
            <target xml:space="preserve">But, going back to the lobby gives new players a chance to join, and even a convenient time for joined players to leave (although a joined player can leave at any time by tapping <pc dataRefEnd="id2" dataRefStart="id1" id="2">Leave game</pc>).</target>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source xml:space="preserve">Local test mode</source>
            <target xml:space="preserve">Local test mode</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">To try out the app and its interactions on a single PC instead of distributed across devices, you can build the host app in local test mode.</source>
            <target xml:space="preserve">To try out the app and its interactions on a single PC instead of distributed across devices, you can build the host app in local test mode.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">This mode completely bypasses use of the network.</source>
            <target xml:space="preserve">This mode completely bypasses use of the network.</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">Instead, the UI of the host app displays the host portion to the left of the window and, to the right, two copies of the client app UI stacked vertically (note that, in this version, the local test mode UI is fixed for a PC display; it does not adapt to small devices).</source>
            <target xml:space="preserve">Instead, the UI of the host app displays the host portion to the left of the window and, to the right, two copies of the client app UI stacked vertically (note that, in this version, the local test mode UI is fixed for a PC display; it does not adapt to small devices).</target>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source xml:space="preserve">These segments of UI, all in the same app, communicate with one another via a mock client communicator, which simulates the interactions that would otherwise take place over the network.</source>
            <target xml:space="preserve">These segments of UI, all in the same app, communicate with one another via a mock client communicator, which simulates the interactions that would otherwise take place over the network.</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">To activate local test mode, define <pc dataRefEnd="id2" dataRefStart="id1" id="2">LOCALTESTMODEON</pc> (in project properties) as a conditional compilation symbol, and rebuild.</source>
            <target xml:space="preserve">To activate local test mode, define <pc dataRefEnd="id2" dataRefStart="id1" id="2">LOCALTESTMODEON</pc> (in project properties) as a conditional compilation symbol, and rebuild.</target>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source xml:space="preserve">Porting to a Windows 10 project</source>
            <target xml:space="preserve">Porting to a Windows 10 project</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">QuizGame has the following pieces.</source>
            <target xml:space="preserve">QuizGame has the following pieces.</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">P2PHelper.</source>
            <target xml:space="preserve">P2PHelper.</target>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source xml:space="preserve">This is a portable class library that contains the peer-to-peer networking logic.</source>
            <target xml:space="preserve">This is a portable class library that contains the peer-to-peer networking logic.</target>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source xml:space="preserve">QuizGame.Windows.</source>
            <target xml:space="preserve">QuizGame.Windows.</target>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source xml:space="preserve">This is the project that builds the app package for the host app, which targets Windows 8.1.</source>
            <target xml:space="preserve">This is the project that builds the app package for the host app, which targets Windows 8.1.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">QuizGame.WindowsPhone.</source>
            <target xml:space="preserve">QuizGame.WindowsPhone.</target>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source xml:space="preserve">This is the project that builds the app package for the client app, which targets Windows Phone 8.1.</source>
            <target xml:space="preserve">This is the project that builds the app package for the client app, which targets Windows Phone 8.1.</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">QuizGame.Shared.</source>
            <target xml:space="preserve">QuizGame.Shared.</target>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source xml:space="preserve">This is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</source>
            <target xml:space="preserve">This is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">For this case study, we have the usual options described in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">If you have a Universal 8.1 app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> with respect to what devices to support.</source>
            <target xml:space="preserve">For this case study, we have the usual options described in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">If you have a Universal 8.1 app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> with respect to what devices to support.</target>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source xml:space="preserve">Based on those options, we'll port QuizGame.Windows to a new Windows 10 project called QuizGameHost.</source>
            <target xml:space="preserve">Based on those options, we'll port QuizGame.Windows to a new Windows 10 project called QuizGameHost.</target>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source xml:space="preserve">And, we'll port QuizGame.WindowsPhone to a new Windows 10 project called QuizGameClient.</source>
            <target xml:space="preserve">And, we'll port QuizGame.WindowsPhone to a new Windows 10 project called QuizGameClient.</target>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source xml:space="preserve">These projects will target the universal device family, so they will run on any device.</source>
            <target xml:space="preserve">These projects will target the universal device family, so they will run on any device.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">And, we'll keep the QuizGame.Shared source files, etc, in their own folder, and we'll link those shared files into the two new projects.</source>
            <target xml:space="preserve">And, we'll keep the QuizGame.Shared source files, etc, in their own folder, and we'll link those shared files into the two new projects.</target>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source xml:space="preserve">Just like before, we'll keep everything in one solution and we'll name it QuizGame10.</source>
            <target xml:space="preserve">Just like before, we'll keep everything in one solution and we'll name it QuizGame10.</target>
          </segment>
        </unit>
        <unit id="171">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="171">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The QuizGame10 solution</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The QuizGame10 solution</pc>
						</target>
          </segment>
        </unit>
        <unit id="172">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="172">
            <source xml:space="preserve">Create a new solution (<pc dataRefEnd="id2" dataRefStart="id1" id="2">New Project</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Other Project Types</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Visual Studio Solutions</pc>) and name it QuizGame10.</source>
            <target xml:space="preserve">Create a new solution (<pc dataRefEnd="id2" dataRefStart="id1" id="2">New Project</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Other Project Types</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Visual Studio Solutions</pc>) and name it QuizGame10.</target>
          </segment>
        </unit>
        <unit id="173">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="173">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">P2PHelper</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">P2PHelper</pc>
						</target>
          </segment>
        </unit>
        <unit id="174">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="174">
            <source xml:space="preserve">In the solution, create a new Windows 10 class library project (<pc dataRefEnd="id2" dataRefStart="id1" id="2">New Project</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Windows Universal</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Class Library (Windows Universal)</pc>) and name it P2PHelper.</source>
            <target xml:space="preserve">In the solution, create a new Windows 10 class library project (<pc dataRefEnd="id2" dataRefStart="id1" id="2">New Project</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Windows Universal</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Class Library (Windows Universal)</pc>) and name it P2PHelper.</target>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source xml:space="preserve">Delete Class1.cs from the new project.</source>
            <target xml:space="preserve">Delete Class1.cs from the new project.</target>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source xml:space="preserve">Copy P2PSession.cs, P2PSessionClient.cs, and P2PSessionHost.cs into the new project's folder and include the copied files in the new project.</source>
            <target xml:space="preserve">Copy P2PSession.cs, P2PSessionClient.cs, and P2PSessionHost.cs into the new project's folder and include the copied files in the new project.</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">The project will build without needing further changes.</source>
            <target xml:space="preserve">The project will build without needing further changes.</target>
          </segment>
        </unit>
        <unit id="178">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="178">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Shared files</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Shared files</pc>
						</target>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source xml:space="preserve">Copy the folders Common, Model, View, and ViewModel from \\QuizGame.Shared\\ to \\QuizGame10\\.</source>
            <target xml:space="preserve">Copy the folders Common, Model, View, and ViewModel from \\QuizGame.Shared\\ to \\QuizGame10\\.</target>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source xml:space="preserve">Common, Model, View, and ViewModel are what we'll mean when we refer to the shared folders on disk.</source>
            <target xml:space="preserve">Common, Model, View, and ViewModel are what we'll mean when we refer to the shared folders on disk.</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">QuizGameHost</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">QuizGameHost</pc>
						</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">Create a new Windows 10 app project (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Add</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">New Project</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Windows Universal</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">Blank Application (Windows Universal)</pc>) and name it QuizGameHost.</source>
            <target xml:space="preserve">Create a new Windows 10 app project (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Add</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">New Project</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Windows Universal</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">Blank Application (Windows Universal)</pc>) and name it QuizGameHost.</target>
          </segment>
        </unit>
        <unit id="183">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="183">
            <source xml:space="preserve">Add a reference to P2PHelper (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Add Reference</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Projects</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Solution</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">P2PHelper</pc>).</source>
            <target xml:space="preserve">Add a reference to P2PHelper (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Add Reference</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Projects</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Solution</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">P2PHelper</pc>).</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, create a new folder for each of the shared folders on disk.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, create a new folder for each of the shared folders on disk.</target>
          </segment>
        </unit>
        <unit id="185">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="185">
            <source xml:space="preserve">In turn, right-click each folder you just created and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Existing Item</pc> and navigate up a folder.</source>
            <target xml:space="preserve">In turn, right-click each folder you just created and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Existing Item</pc> and navigate up a folder.</target>
          </segment>
        </unit>
        <unit id="186">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="186">
            <source xml:space="preserve">Open the appropriate shared folder, select all files, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add As Link</pc>.</source>
            <target xml:space="preserve">Open the appropriate shared folder, select all files, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add As Link</pc>.</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">Copy MainPage.xaml from \\QuizGame.Windows\\ to \\QuizGameHost\\ and change the namespace to QuizGameHost.</source>
            <target xml:space="preserve">Copy MainPage.xaml from \\QuizGame.Windows\\ to \\QuizGameHost\\ and change the namespace to QuizGameHost.</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">Copy App.xaml from \\QuizGame.Shared\\ to \\QuizGameHost\\ and change the namespace to QuizGameHost.</source>
            <target xml:space="preserve">Copy App.xaml from \\QuizGame.Shared\\ to \\QuizGameHost\\ and change the namespace to QuizGameHost.</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">Instead of overwriting app.xaml.cs, we'll keep the version in the new project and just make one targeted change to it to support local test mode.</source>
            <target xml:space="preserve">Instead of overwriting app.xaml.cs, we'll keep the version in the new project and just make one targeted change to it to support local test mode.</target>
          </segment>
        </unit>
        <unit id="190">
          <segment state="initial" id="190">
            <source xml:space="preserve">In app.xaml.cs, replace this line of code:</source>
            <target xml:space="preserve">In app.xaml.cs, replace this line of code:</target>
          </segment>
        </unit>
        <unit id="191">
          <segment state="initial" id="191">
            <source xml:space="preserve">with this:</source>
            <target xml:space="preserve">with this:</target>
          </segment>
        </unit>
        <unit id="192">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="192">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc>
							<pc dataRefEnd="id4" dataRefStart="id3" id="2"></pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc>
							<pc dataRefEnd="id4" dataRefStart="id3" id="2"></pc>
						</target>
          </segment>
        </unit>
        <unit id="193">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="193">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Build</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">conditional compilation symbols</pc>, add LOCALTESTMODEON.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">Properties</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Build</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">conditional compilation symbols</pc>, add LOCALTESTMODEON.</target>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source xml:space="preserve">You'll now be able to go back to the code you added to app.xaml.cs and resolve the TestView type.</source>
            <target xml:space="preserve">You'll now be able to go back to the code you added to app.xaml.cs and resolve the TestView type.</target>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source xml:space="preserve">In package.appxmanifest, change the capability name from internetClient to internetClientServer.</source>
            <target xml:space="preserve">In package.appxmanifest, change the capability name from internetClient to internetClientServer.</target>
          </segment>
        </unit>
        <unit id="196">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="196">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">QuizGameClient</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">QuizGameClient</pc>
						</target>
          </segment>
        </unit>
        <unit id="197">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="197">
            <source xml:space="preserve">Create a new Windows 10 app project (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Add</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">New Project</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Windows Universal</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">Blank Application (Windows Universal)</pc>) and name it QuizGameClient.</source>
            <target xml:space="preserve">Create a new Windows 10 app project (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Add</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">New Project</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Windows Universal</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">Blank Application (Windows Universal)</pc>) and name it QuizGameClient.</target>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source xml:space="preserve">Add a reference to P2PHelper (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Add Reference</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Projects</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Solution</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">P2PHelper</pc>).</source>
            <target xml:space="preserve">Add a reference to P2PHelper (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Add Reference</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Projects</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Solution</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">P2PHelper</pc>).</target>
          </segment>
        </unit>
        <unit id="199">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="199">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, create a new folder for each of the shared folders on disk.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, create a new folder for each of the shared folders on disk.</target>
          </segment>
        </unit>
        <unit id="200">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="200">
            <source xml:space="preserve">In turn, right-click each folder you just created and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Existing Item</pc> and navigate up a folder.</source>
            <target xml:space="preserve">In turn, right-click each folder you just created and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Existing Item</pc> and navigate up a folder.</target>
          </segment>
        </unit>
        <unit id="201">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="201">
            <source xml:space="preserve">Open the appropriate shared folder, select all files, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add As Link</pc>.</source>
            <target xml:space="preserve">Open the appropriate shared folder, select all files, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add As Link</pc>.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">Copy MainPage.xaml from \\QuizGame.WindowsPhone\\ to \\QuizGameClient\\ and change the namespace to QuizGameClient.</source>
            <target xml:space="preserve">Copy MainPage.xaml from \\QuizGame.WindowsPhone\\ to \\QuizGameClient\\ and change the namespace to QuizGameClient.</target>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source xml:space="preserve">Copy App.xaml from \\QuizGame.Shared\\ to \\QuizGameClient\\ and change the namespace to QuizGameClient.</source>
            <target xml:space="preserve">Copy App.xaml from \\QuizGame.Shared\\ to \\QuizGameClient\\ and change the namespace to QuizGameClient.</target>
          </segment>
        </unit>
        <unit id="204">
          <segment state="initial" id="204">
            <source xml:space="preserve">In package.appxmanifest, change the capability name from internetClient to internetClientServer.</source>
            <target xml:space="preserve">In package.appxmanifest, change the capability name from internetClient to internetClientServer.</target>
          </segment>
        </unit>
        <unit id="205">
          <segment state="initial" id="205">
            <source xml:space="preserve">You'll now be able to build and run.</source>
            <target xml:space="preserve">You'll now be able to build and run.</target>
          </segment>
        </unit>
        <unit id="206">
          <segment state="initial" id="206">
            <source xml:space="preserve">Adaptive UI</source>
            <target xml:space="preserve">Adaptive UI</target>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source xml:space="preserve">The QuizGameHost Windows 10 app looks fine when the app is running in a wide window (which is only possible on a device with a large screen).</source>
            <target xml:space="preserve">The QuizGameHost Windows 10 app looks fine when the app is running in a wide window (which is only possible on a device with a large screen).</target>
          </segment>
        </unit>
        <unit id="208">
          <segment state="initial" id="208">
            <source xml:space="preserve">When the app's window is narrow, though (which happens on a small device, and can also happen on a large device), the UI is squashed so much that it's unreadable.</source>
            <target xml:space="preserve">When the app's window is narrow, though (which happens on a small device, and can also happen on a large device), the UI is squashed so much that it's unreadable.</target>
          </segment>
        </unit>
        <unit id="209">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="209">
            <source xml:space="preserve">We can use the adaptive Visual State Manager feature to remedy this, as we explained in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Case study: Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">We can use the adaptive Visual State Manager feature to remedy this, as we explained in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Case study: Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="210">
          <segment state="initial" id="210">
            <source xml:space="preserve">First, set properties on visual elements so that, by default, the UI is laid out in the narrow state.</source>
            <target xml:space="preserve">First, set properties on visual elements so that, by default, the UI is laid out in the narrow state.</target>
          </segment>
        </unit>
        <unit id="211">
          <segment state="initial" id="211">
            <source xml:space="preserve">All of these changes take place in \\View\\HostView.xaml.</source>
            <target xml:space="preserve">All of these changes take place in \\View\\HostView.xaml.</target>
          </segment>
        </unit>
        <unit id="212">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="212">
            <source xml:space="preserve">In the main <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc>, change the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Height</pc> of the first <pc dataRefEnd="id6" dataRefStart="id5" id="6">RowDefinition</pc> from "140" to "Auto".</source>
            <target xml:space="preserve">In the main <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc>, change the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Height</pc> of the first <pc dataRefEnd="id6" dataRefStart="id5" id="6">RowDefinition</pc> from "140" to "Auto".</target>
          </segment>
        </unit>
        <unit id="213">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="213">
            <source xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc> that contains the <pc dataRefEnd="id4" dataRefStart="id3" id="4">TextBlock</pc> named <pc dataRefEnd="id6" dataRefStart="id5" id="6">pageTitle</pc>, set <pc dataRefEnd="id8" dataRefStart="id7" id="8">x:Name="pageTitleGrid"</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="10">Height="60"</pc>.</source>
            <target xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc> that contains the <pc dataRefEnd="id4" dataRefStart="id3" id="4">TextBlock</pc> named <pc dataRefEnd="id6" dataRefStart="id5" id="6">pageTitle</pc>, set <pc dataRefEnd="id8" dataRefStart="id7" id="8">x:Name="pageTitleGrid"</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="10">Height="60"</pc>.</target>
          </segment>
        </unit>
        <unit id="214">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="214">
            <source xml:space="preserve">These first two steps are so that we can effectively control the height of that <pc dataRefEnd="id2" dataRefStart="id1" id="2">RowDefinition</pc> via a setter in a visual state.</source>
            <target xml:space="preserve">These first two steps are so that we can effectively control the height of that <pc dataRefEnd="id2" dataRefStart="id1" id="2">RowDefinition</pc> via a setter in a visual state.</target>
          </segment>
        </unit>
        <unit id="215">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="215">
            <source xml:space="preserve">On <pc dataRefEnd="id2" dataRefStart="id1" id="2">pageTitle</pc>, set <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin="-30,0,0,0"</pc>.</source>
            <target xml:space="preserve">On <pc dataRefEnd="id2" dataRefStart="id1" id="2">pageTitle</pc>, set <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin="-30,0,0,0"</pc>.</target>
          </segment>
        </unit>
        <unit id="216">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="216">
            <source xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc> indicated by the comment <pc dataRefEnd="id4" dataRefStart="id3" id="4">`, set </pc>x:Name="contentGrid"<pc dataRefEnd="id6" dataRefStart="id5" id="6"> and </pc>Margin="-18,12,0,0"`.</source>
            <target xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc> indicated by the comment <pc dataRefEnd="id4" dataRefStart="id3" id="4">`, set </pc>x:Name="contentGrid"<pc dataRefEnd="id6" dataRefStart="id5" id="6"> and </pc>Margin="-18,12,0,0"`.</target>
          </segment>
        </unit>
        <unit id="217">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="217">
            <source xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> immediately above the comment <pc dataRefEnd="id4" dataRefStart="id3" id="4">`, set </pc>Margin="0,0,0,24"`.</source>
            <target xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> immediately above the comment <pc dataRefEnd="id4" dataRefStart="id3" id="4">`, set </pc>Margin="0,0,0,24"`.</target>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source xml:space="preserve">In the default <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> style (the first resource in the file), change the <pc dataRefEnd="id4" dataRefStart="id3" id="4">FontSize</pc> setter's value to "15".</source>
            <target xml:space="preserve">In the default <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> style (the first resource in the file), change the <pc dataRefEnd="id4" dataRefStart="id3" id="4">FontSize</pc> setter's value to "15".</target>
          </segment>
        </unit>
        <unit id="219">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="219">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">OptionContentControlStyle</pc>, change the <pc dataRefEnd="id4" dataRefStart="id3" id="4">FontSize</pc> setter's value to "20".</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">OptionContentControlStyle</pc>, change the <pc dataRefEnd="id4" dataRefStart="id3" id="4">FontSize</pc> setter's value to "20".</target>
          </segment>
        </unit>
        <unit id="220">
          <segment state="initial" id="220">
            <source xml:space="preserve">This step and the previous one will give us a good type ramp that will work well on all devices.</source>
            <target xml:space="preserve">This step and the previous one will give us a good type ramp that will work well on all devices.</target>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source xml:space="preserve">These are much more flexible sizes than the "30" we were using for the Windows 8.1 app.</source>
            <target xml:space="preserve">These are much more flexible sizes than the "30" we were using for the Windows 8.1 app.</target>
          </segment>
        </unit>
        <unit id="222">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="222">
            <source xml:space="preserve">Finally, add the appropriate Visual State Manager markup to the root <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc>.</source>
            <target xml:space="preserve">Finally, add the appropriate Visual State Manager markup to the root <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc>.</target>
          </segment>
        </unit>
        <unit id="223">
          <segment state="initial" id="223">
            <source xml:space="preserve">Universal styling</source>
            <target xml:space="preserve">Universal styling</target>
          </segment>
        </unit>
        <unit id="224">
          <segment state="initial" id="224">
            <source xml:space="preserve">You'll notice that in Windows 10, the buttons don't have the same touch-target padding in their template.</source>
            <target xml:space="preserve">You'll notice that in Windows 10, the buttons don't have the same touch-target padding in their template.</target>
          </segment>
        </unit>
        <unit id="225">
          <segment state="initial" id="225">
            <source xml:space="preserve">Two small changes will remedy that.</source>
            <target xml:space="preserve">Two small changes will remedy that.</target>
          </segment>
        </unit>
        <unit id="226">
          <segment state="initial" id="226">
            <source xml:space="preserve">First, add this markup to app.xaml in both QuizGameHost and QuizGameClient.</source>
            <target xml:space="preserve">First, add this markup to app.xaml in both QuizGameHost and QuizGameClient.</target>
          </segment>
        </unit>
        <unit id="227">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="227">
            <source xml:space="preserve">And second, add this setter to <pc dataRefEnd="id2" dataRefStart="id1" id="2">OptionButtonStyle</pc> in \\View\\ClientView.xaml.</source>
            <target xml:space="preserve">And second, add this setter to <pc dataRefEnd="id2" dataRefStart="id1" id="2">OptionButtonStyle</pc> in \\View\\ClientView.xaml.</target>
          </segment>
        </unit>
        <unit id="228">
          <segment state="initial" id="228">
            <source xml:space="preserve">With that last tweak, the app will behave and look just the same as it did before the port, with the additional value that it will now run everywhere.</source>
            <target xml:space="preserve">With that last tweak, the app will behave and look just the same as it did before the port, with the additional value that it will now run everywhere.</target>
          </segment>
        </unit>
        <unit id="229">
          <segment state="initial" id="229">
            <source xml:space="preserve">Conclusion</source>
            <target xml:space="preserve">Conclusion</target>
          </segment>
        </unit>
        <unit id="230">
          <segment state="initial" id="230">
            <source xml:space="preserve">The app that we ported in this case study was a relatively complex one involving several projects, a class library, and quite a large amount of code and user interface.</source>
            <target xml:space="preserve">The app that we ported in this case study was a relatively complex one involving several projects, a class library, and quite a large amount of code and user interface.</target>
          </segment>
        </unit>
        <unit id="231">
          <segment state="initial" id="231">
            <source xml:space="preserve">Even so, the port was straightforward.</source>
            <target xml:space="preserve">Even so, the port was straightforward.</target>
          </segment>
        </unit>
        <unit id="232">
          <segment state="initial" id="232">
            <source xml:space="preserve">Some of the ease of porting is directly attributable to the similarity between the Windows 10 developer platform and the Windows 8.1 and Windows Phone 8.1 platforms.</source>
            <target xml:space="preserve">Some of the ease of porting is directly attributable to the similarity between the Windows 10 developer platform and the Windows 8.1 and Windows Phone 8.1 platforms.</target>
          </segment>
        </unit>
        <unit id="233">
          <segment state="initial" id="233">
            <source xml:space="preserve">Some is due to the way the original app was designed to keep the models, the view models, and the views separate.</source>
            <target xml:space="preserve">Some is due to the way the original app was designed to keep the models, the view models, and the views separate.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>