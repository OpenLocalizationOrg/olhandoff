<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">0ec2875d4a647b4e1ab96105f0542f67d8d32174</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Receive data</source>
            <target xml:space="preserve">Receive data</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">This article explains how to receive content in your Universal Windows Platform (UWP) app shared from another app using Share contract.</source>
            <target xml:space="preserve">This article explains how to receive content in your Universal Windows Platform (UWP) app shared from another app using Share contract.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">This Share contract allows your app to be presented as an option when the user invokes Share.</source>
            <target xml:space="preserve">This Share contract allows your app to be presented as an option when the user invokes Share.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">Declare your app as a share target</source>
            <target xml:space="preserve">Declare your app as a share target</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">The system displays a list of possible target apps when a user invokes Share.</source>
            <target xml:space="preserve">The system displays a list of possible target apps when a user invokes Share.</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">In order to appear on the list, your app need to declare that it supports the Share contract.</source>
            <target xml:space="preserve">In order to appear on the list, your app need to declare that it supports the Share contract.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">This lets the system know that your app is available to receive content.</source>
            <target xml:space="preserve">This lets the system know that your app is available to receive content.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">Open the manifest file.</source>
            <target xml:space="preserve">Open the manifest file.</target>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source xml:space="preserve">It should be called something like <pc dataRefEnd="id2" dataRefStart="id1" id="2">package.appxmanifest</pc>.</source>
            <target xml:space="preserve">It should be called something like <pc dataRefEnd="id2" dataRefStart="id1" id="2">package.appxmanifest</pc>.</target>
          </segment>
        </unit>
        <unit id="112">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="112">
            <source xml:space="preserve">Open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Declarations</pc> tab.</source>
            <target xml:space="preserve">Open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Declarations</pc> tab.</target>
          </segment>
        </unit>
        <unit id="113">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="113">
            <source xml:space="preserve">Choose <pc dataRefEnd="id2" dataRefStart="id1" id="2">Share Target</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Available Declarations</pc> list and click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add</pc>.</source>
            <target xml:space="preserve">Choose <pc dataRefEnd="id2" dataRefStart="id1" id="2">Share Target</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Available Declarations</pc> list and click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add</pc>.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">Choose file types and formats</source>
            <target xml:space="preserve">Choose file types and formats</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">Next, decide what file types and data formats you support.</source>
            <target xml:space="preserve">Next, decide what file types and data formats you support.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">The Share APIs support several standard formats, such as Text, HTML, and Bitmap.</source>
            <target xml:space="preserve">The Share APIs support several standard formats, such as Text, HTML, and Bitmap.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">You can also specify custom file types and data formats.</source>
            <target xml:space="preserve">You can also specify custom file types and data formats.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">If you do, remember that source apps have to know what those types and formats are, otherwise those apps can't use the formats to share data.</source>
            <target xml:space="preserve">If you do, remember that source apps have to know what those types and formats are, otherwise those apps can't use the formats to share data.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">Only register for formats your app can handle.</source>
            <target xml:space="preserve">Only register for formats your app can handle.</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">Only target apps that support the data being shared appear when the user invokes share.</source>
            <target xml:space="preserve">Only target apps that support the data being shared appear when the user invokes share.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">To set file types:</source>
            <target xml:space="preserve">To set file types:</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Open the manifest file.</source>
            <target xml:space="preserve">Open the manifest file.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">It should be called something like <pc dataRefEnd="id2" dataRefStart="id1" id="2">package.appxmanifest</pc>.</source>
            <target xml:space="preserve">It should be called something like <pc dataRefEnd="id2" dataRefStart="id1" id="2">package.appxmanifest</pc>.</target>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Supported File Types</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Declarations</pc> page, click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add New</pc>.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Supported File Types</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Declarations</pc> page, click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add New</pc>.</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">Type the file name extension that you want to support.</source>
            <target xml:space="preserve">Type the file name extension that you want to support.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">For example, .docx.</source>
            <target xml:space="preserve">For example, .docx.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">You need to include the period.</source>
            <target xml:space="preserve">You need to include the period.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">If you want to support all file types, check the <pc dataRefEnd="id2" dataRefStart="id1" id="2">SupportsAnyFileType</pc> box.</source>
            <target xml:space="preserve">If you want to support all file types, check the <pc dataRefEnd="id2" dataRefStart="id1" id="2">SupportsAnyFileType</pc> box.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">To set data formats:</source>
            <target xml:space="preserve">To set data formats:</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">Open the manifest file.</source>
            <target xml:space="preserve">Open the manifest file.</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">Open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Data Formats</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Declarations</pc> page and click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add New</pc>.</source>
            <target xml:space="preserve">Open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Data Formats</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Declarations</pc> page and click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add New</pc>.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Type the name of the data format you support.</source>
            <target xml:space="preserve">Type the name of the data format you support.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">For example, "Text".</source>
            <target xml:space="preserve">For example, "Text".</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">Handle share activation</source>
            <target xml:space="preserve">Handle share activation</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">When a user selects your app (usually by selecting it from a list of available target apps in the share UI), an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Application.OnShareTargetActivated**[onsharetargetactivated]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event is raised.</source>
            <target xml:space="preserve">When a user selects your app (usually by selecting it from a list of available target apps in the share UI), an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Application.OnShareTargetActivated**[onsharetargetactivated]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event is raised.</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">Your app needs to handle this event to process the data the user wants to share.</source>
            <target xml:space="preserve">Your app needs to handle this event to process the data the user wants to share.</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">Note that if your app is running when it is activated as a Share target, the existing instance of your app is terminated and a new instance of your app is launched to handle the contract.</source>
            <target xml:space="preserve">Note that if your app is running when it is activated as a Share target, the existing instance of your app is terminated and a new instance of your app is launched to handle the contract.</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">The data that the user wants to share is contained in a ShareOperation object.</source>
            <target xml:space="preserve">The data that the user wants to share is contained in a ShareOperation object.</target>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source xml:space="preserve">You can use this object to check the format of the data it contains.</source>
            <target xml:space="preserve">You can use this object to check the format of the data it contains.</target>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source xml:space="preserve">Report sharing status</source>
            <target xml:space="preserve">Report sharing status</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">In some cases, it can take time for your app to process the data it wants to share.</source>
            <target xml:space="preserve">In some cases, it can take time for your app to process the data it wants to share.</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">Examples include users sharing collections of files or images.</source>
            <target xml:space="preserve">Examples include users sharing collections of files or images.</target>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source xml:space="preserve">These items are larger than a simple text string, so they take longer to process.</source>
            <target xml:space="preserve">These items are larger than a simple text string, so they take longer to process.</target>
          </segment>
        </unit>
        <unit id="144">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="144">
            <source xml:space="preserve">After calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ReportStarted**[reportstarted]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, don't expect any more user interaction with your app.</source>
            <target xml:space="preserve">After calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ReportStarted**[reportstarted]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, don't expect any more user interaction with your app.</target>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source xml:space="preserve">As a result, you shouldn't call it unless your app is at a point where it can be dismissed by the user.</source>
            <target xml:space="preserve">As a result, you shouldn't call it unless your app is at a point where it can be dismissed by the user.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">With an extended share, it's possible that the user might dismiss the source app before your app has all the data from the DataPackage object.</source>
            <target xml:space="preserve">With an extended share, it's possible that the user might dismiss the source app before your app has all the data from the DataPackage object.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">As a result, we recommend that you let the system know when your app has acquired the data it needs.</source>
            <target xml:space="preserve">As a result, we recommend that you let the system know when your app has acquired the data it needs.</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">This way, the system can suspend or terminate the source app as necessary.</source>
            <target xml:space="preserve">This way, the system can suspend or terminate the source app as necessary.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">If something goes wrong, call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ReportError**[reporterror]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to send an error message to the system.</source>
            <target xml:space="preserve">If something goes wrong, call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ReportError**[reporterror]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to send an error message to the system.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">The user will see the message when they check on the status of the share.</source>
            <target xml:space="preserve">The user will see the message when they check on the status of the share.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">At that point, your app is shut down and the share is ended.</source>
            <target xml:space="preserve">At that point, your app is shut down and the share is ended.</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">The user will need to start again to share the content to your app.</source>
            <target xml:space="preserve">The user will need to start again to share the content to your app.</target>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source xml:space="preserve">Depending on your scenario, you may decide that a particular error isn't serious enough to end the share operation.</source>
            <target xml:space="preserve">Depending on your scenario, you may decide that a particular error isn't serious enough to end the share operation.</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">In that case, you can choose to not call <pc dataRefEnd="id2" dataRefStart="id1" id="2">ReportError</pc> and to continue with the share.</source>
            <target xml:space="preserve">In that case, you can choose to not call <pc dataRefEnd="id2" dataRefStart="id1" id="2">ReportError</pc> and to continue with the share.</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">Finally, when your app has successfully processed the shared content, you should call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ReportCompleted**[reportcompleted]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to let the system know.</source>
            <target xml:space="preserve">Finally, when your app has successfully processed the shared content, you should call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ReportCompleted**[reportcompleted]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to let the system know.</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">When you use these methods, you usually call them in the order just described, and you don't call them more than once.</source>
            <target xml:space="preserve">When you use these methods, you usually call them in the order just described, and you don't call them more than once.</target>
          </segment>
        </unit>
        <unit id="157">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="157">
            <source xml:space="preserve">However, there are times when a target app can call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ReportDataRetrieved**[reportdataretrieved]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> before <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ReportStarted**[reportstarted]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">However, there are times when a target app can call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ReportDataRetrieved**[reportdataretrieved]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> before <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ReportStarted**[reportstarted]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">For example, the app might retrieve the data as part of a task in the activation handler, but not call <pc dataRefEnd="id2" dataRefStart="id1" id="2">ReportStarted</pc> until the user clicks a Share button.</source>
            <target xml:space="preserve">For example, the app might retrieve the data as part of a task in the activation handler, but not call <pc dataRefEnd="id2" dataRefStart="id1" id="2">ReportStarted</pc> until the user clicks a Share button.</target>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source xml:space="preserve">Return a QuickLink if sharing was successful</source>
            <target xml:space="preserve">Return a QuickLink if sharing was successful</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">When a user selects your app to receive content, we recommend that you create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**QuickLink**[quicklink]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">When a user selects your app to receive content, we recommend that you create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**QuickLink**[quicklink]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="161">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="161">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> is like a shortcut that makes it easier for users to share information with your app.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> is like a shortcut that makes it easier for users to share information with your app.</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">For example, you could create a <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> that opens a new mail message pre-configured with a friend's email address.</source>
            <target xml:space="preserve">For example, you could create a <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> that opens a new mail message pre-configured with a friend's email address.</target>
          </segment>
        </unit>
        <unit id="163">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="163">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> must have a title, an icon, and an Id.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> must have a title, an icon, and an Id.</target>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source xml:space="preserve">The title (like "Email Mom") and icon appear when the user taps the Share charm.</source>
            <target xml:space="preserve">The title (like "Email Mom") and icon appear when the user taps the Share charm.</target>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source xml:space="preserve">The Id is what your app uses to access any custom information, such as an email address or login credentials.</source>
            <target xml:space="preserve">The Id is what your app uses to access any custom information, such as an email address or login credentials.</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">When your app creates a <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc>, the app returns the <pc dataRefEnd="id4" dataRefStart="id3" id="4">QuickLink</pc> to the system by calling <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ReportCompleted**[reportcompleted]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">When your app creates a <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc>, the app returns the <pc dataRefEnd="id4" dataRefStart="id3" id="4">QuickLink</pc> to the system by calling <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ReportCompleted**[reportcompleted]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> does not actually store data.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> does not actually store data.</target>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source xml:space="preserve">Instead, it contains an identifier that, when selected, is sent to your app.</source>
            <target xml:space="preserve">Instead, it contains an identifier that, when selected, is sent to your app.</target>
          </segment>
        </unit>
        <unit id="169">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="169">
            <source xml:space="preserve">Your app is responsible for storing the Id of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> and the corresponding user data.</source>
            <target xml:space="preserve">Your app is responsible for storing the Id of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc> and the corresponding user data.</target>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source xml:space="preserve">When the user taps the <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc>, you can get its Id through the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ShareOperation.QuickLinkId**[quicklinkid]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property.</source>
            <target xml:space="preserve">When the user taps the <pc dataRefEnd="id2" dataRefStart="id1" id="2">QuickLink</pc>, you can get its Id through the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ShareOperation.QuickLinkId**[quicklinkid]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property.</target>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source xml:space="preserve">Related topics</source>
            <target xml:space="preserve">Related topics</target>
          </segment>
        </unit>
        <unit id="172">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="172">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Share data</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Share data</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>