<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">941aead4b3a389c79271b42fcc6db108451e6877</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Create a "Hello, world" app (JS)</source>
            <target xml:space="preserve">Create a "Hello, world" app (JS)</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">This tutorial teaches you how to use JavaScript and HTML to create a simple "Hello, world" app that targets the Universal Windows Platform (UWP) on Windows 10.</source>
            <target xml:space="preserve">This tutorial teaches you how to use JavaScript and HTML to create a simple "Hello, world" app that targets the Universal Windows Platform (UWP) on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <segment state="initial" id="103">
            <source xml:space="preserve">With a single project in Microsoft Visual Studio, you can build an app that runs on any Windows 10 device.</source>
            <target xml:space="preserve">With a single project in Microsoft Visual Studio, you can build an app that runs on any Windows 10 device.</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Here we focus on creating an app that runs equally well on desktop and mobile devices.</source>
            <target xml:space="preserve">Here we focus on creating an app that runs equally well on desktop and mobile devices.</target>
          </segment>
        </unit>
        <unit id="105">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="105">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Important</pc>   This tutorial is for use with Microsoft Visual Studio 2015 and Windows 10.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Important</pc>   This tutorial is for use with Microsoft Visual Studio 2015 and Windows 10.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">It won't work correctly with earlier versions.</source>
            <target xml:space="preserve">It won't work correctly with earlier versions.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">Here you'll learn how to:</source>
            <target xml:space="preserve">Here you'll learn how to:</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">Create a new project</source>
            <target xml:space="preserve">Create a new project</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Add HTML content to your start page</source>
            <target xml:space="preserve">Add HTML content to your start page</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">Handle touch, pen, and mouse input</source>
            <target xml:space="preserve">Handle touch, pen, and mouse input</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">Run the project on the local desktop and on the phone emulator in Visual Studio.</source>
            <target xml:space="preserve">Run the project on the local desktop and on the phone emulator in Visual Studio.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">Create your own custom styles</source>
            <target xml:space="preserve">Create your own custom styles</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Use a Windows Library for JavaScript control</source>
            <target xml:space="preserve">Use a Windows Library for JavaScript control</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">Before you start...</source>
            <target xml:space="preserve">Before you start...</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">We're going to jump right into the steps you use to create a simple universal app.</source>
            <target xml:space="preserve">We're going to jump right into the steps you use to create a simple universal app.</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">So we strongly recommend that you read and understand the overview information in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">What's new in Windows 10</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">What's a Universal Windows app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> before you start this tutorial.</source>
            <target xml:space="preserve">So we strongly recommend that you read and understand the overview information in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">What's new in Windows 10</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">What's a Universal Windows app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> before you start this tutorial.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">To complete this tutorial, you need Windows 10 and Visual Studio 2015.</source>
            <target xml:space="preserve">To complete this tutorial, you need Windows 10 and Visual Studio 2015.</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Get set up</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for more info.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Get set up</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for more info.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">We also assume you're using the default window layout in Visual Studio.</source>
            <target xml:space="preserve">We also assume you're using the default window layout in Visual Studio.</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">If you change the default layout, you can reset it in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Window</pc> menu by using the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Reset Window Layout</pc> command.</source>
            <target xml:space="preserve">If you change the default layout, you can reset it in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Window</pc> menu by using the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Reset Window Layout</pc> command.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">Step 1: Create a new project in Visual Studio</source>
            <target xml:space="preserve">Step 1: Create a new project in Visual Studio</target>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source xml:space="preserve">Let's create a new app named <pc dataRefEnd="id2" dataRefStart="id1" id="2">HelloWorld</pc>.</source>
            <target xml:space="preserve">Let's create a new app named <pc dataRefEnd="id2" dataRefStart="id1" id="2">HelloWorld</pc>.</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">Here's how:</source>
            <target xml:space="preserve">Here's how:</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">Launch Visual Studio 2015.</source>
            <target xml:space="preserve">Launch Visual Studio 2015.</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">The Visual Studio 2015 start screen appears.</source>
            <target xml:space="preserve">The Visual Studio 2015 start screen appears.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">(From now on, we'll refer to Visual Studio 2015 simply as Visual Studio .)</source>
            <target xml:space="preserve">(From now on, we'll refer to Visual Studio 2015 simply as Visual Studio .)</target>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">File</pc> menu, select <pc dataRefEnd="id4" dataRefStart="id3" id="4">New</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Project</pc>.</source>
            <target xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2">File</pc> menu, select <pc dataRefEnd="id4" dataRefStart="id3" id="4">New</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Project</pc>.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">New Project</pc> dialog appears.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">New Project</pc> dialog appears.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">The left pane of the dialog lets you pick the type of templates to display.</source>
            <target xml:space="preserve">The left pane of the dialog lets you pick the type of templates to display.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">In the left pane, expand <pc dataRefEnd="id2" dataRefStart="id1" id="2">Installed &gt; Templates &gt; JavaScript &gt; Windows</pc>, then pick the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Universal</pc> template group.</source>
            <target xml:space="preserve">In the left pane, expand <pc dataRefEnd="id2" dataRefStart="id1" id="2">Installed &gt; Templates &gt; JavaScript &gt; Windows</pc>, then pick the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Universal</pc> template group.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">The dialog's center pane displays a list of project templates for Universal Windows Platform (UWP) apps.</source>
            <target xml:space="preserve">The dialog's center pane displays a list of project templates for Universal Windows Platform (UWP) apps.</target>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The New Project window </pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The New Project window </pc>
						</target>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source xml:space="preserve">For this tutorial, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> template.</source>
            <target xml:space="preserve">For this tutorial, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> template.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">This template creates a minimal UWP app that compiles and runs, but contains no user interface controls or data.</source>
            <target xml:space="preserve">This template creates a minimal UWP app that compiles and runs, but contains no user interface controls or data.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">You add controls and data to the app over the course of this tutorials.</source>
            <target xml:space="preserve">You add controls and data to the app over the course of this tutorials.</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">In the center pane, select the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App (Universal Windows)</pc> template.</source>
            <target xml:space="preserve">In the center pane, select the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App (Universal Windows)</pc> template.</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> template creates a minimal UWP app that compiles and runs, but contains no user-interface controls or data.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> template creates a minimal UWP app that compiles and runs, but contains no user-interface controls or data.</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">You add controls to the app over the course of this tutorial.</source>
            <target xml:space="preserve">You add controls to the app over the course of this tutorial.</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Name</pc> text box, type "HelloWorld".</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Name</pc> text box, type "HelloWorld".</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="2">OK</pc> to create the project.</source>
            <target xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="2">OK</pc> to create the project.</target>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source xml:space="preserve">Visual Studio creates your project and displays it in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>.</source>
            <target xml:space="preserve">Visual Studio creates your project and displays it in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>.</target>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Visual Studio Solution Explorer for the HelloWorld project</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Visual Studio Solution Explorer for the HelloWorld project</pc>
						</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">Although the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> is a minimal template, it still contains a handful of files:</source>
            <target xml:space="preserve">Although the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank App</pc> is a minimal template, it still contains a handful of files:</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">A manifest file (package.appxmanifest) that describes your app (its name, description, tile, start page, splash screen, and so on) and lists the files that your app contains.</source>
            <target xml:space="preserve">A manifest file (package.appxmanifest) that describes your app (its name, description, tile, start page, splash screen, and so on) and lists the files that your app contains.</target>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source xml:space="preserve">A set of logo images (images/Square150x150Logo.scale-200.png, images/Square44x44Logo.scale-200.png, and images/Wide310x150Logo.scale-200.png)to display in the start menu.</source>
            <target xml:space="preserve">A set of logo images (images/Square150x150Logo.scale-200.png, images/Square44x44Logo.scale-200.png, and images/Wide310x150Logo.scale-200.png)to display in the start menu.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">An image (images/StoreLogo.png) to represent your app in the Windows Store.</source>
            <target xml:space="preserve">An image (images/StoreLogo.png) to represent your app in the Windows Store.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">A splash screen (images/SplashScreen.scale-200.png) to show when your app starts.</source>
            <target xml:space="preserve">A splash screen (images/SplashScreen.scale-200.png) to show when your app starts.</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">A start page (default.html) and an accompanying JavaScript file (default.js) that run when your app starts.</source>
            <target xml:space="preserve">A start page (default.html) and an accompanying JavaScript file (default.js) that run when your app starts.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">To view and edit the files, double-click the file in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>.</source>
            <target xml:space="preserve">To view and edit the files, double-click the file in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">These files are essential to all UWP apps using JavaScript.</source>
            <target xml:space="preserve">These files are essential to all UWP apps using JavaScript.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">Any project that you create in Visual Studio contains them.</source>
            <target xml:space="preserve">Any project that you create in Visual Studio contains them.</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">Step 2: Launch the app</source>
            <target xml:space="preserve">Step 2: Launch the app</target>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source xml:space="preserve">At this point, you've created a very simple app.</source>
            <target xml:space="preserve">At this point, you've created a very simple app.</target>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source xml:space="preserve">This is a good time to build, deploy, and launch your app and see what it looks like.</source>
            <target xml:space="preserve">This is a good time to build, deploy, and launch your app and see what it looks like.</target>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source xml:space="preserve">You can debug your app on the local machine, in a simulator or emulator, or on a remote device.</source>
            <target xml:space="preserve">You can debug your app on the local machine, in a simulator or emulator, or on a remote device.</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">Here's the target device menu in Visual Studio.</source>
            <target xml:space="preserve">Here's the target device menu in Visual Studio.</target>
          </segment>
        </unit>
        <unit id="157">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="157">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Drop-down list of device targets for debugging your app</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Drop-down list of device targets for debugging your app</pc>
						</target>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source xml:space="preserve">Start the app on a Desktop device</source>
            <target xml:space="preserve">Start the app on a Desktop device</target>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source xml:space="preserve">By default, the app runs on the local machine.</source>
            <target xml:space="preserve">By default, the app runs on the local machine.</target>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source xml:space="preserve">The target device menu provides several options for debugging your app on devices from the desktop device family.</source>
            <target xml:space="preserve">The target device menu provides several options for debugging your app on devices from the desktop device family.</target>
          </segment>
        </unit>
        <unit id="161">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="161">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Simulator</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Simulator</pc>
						</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Local Machine</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Local Machine</pc>
						</target>
          </segment>
        </unit>
        <unit id="163">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="163">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Remote Machine</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Remote Machine</pc>
						</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To start debugging on the local machine</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To start debugging on the local machine</pc>
						</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">In the target device menu (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Start debugging menu</pc>) on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Standard</pc> toolbar, make sure that <pc dataRefEnd="id6" dataRefStart="id5" id="6">Local Machine</pc> is selected.</source>
            <target xml:space="preserve">In the target device menu (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Start debugging menu</pc>) on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Standard</pc> toolbar, make sure that <pc dataRefEnd="id6" dataRefStart="id5" id="6">Local Machine</pc> is selected.</target>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source xml:space="preserve">(It's the default selection.)</source>
            <target xml:space="preserve">(It's the default selection.)</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Start debugging button</pc>) on the toolbar.</source>
            <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Start debugging button</pc>) on the toolbar.</target>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="169">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="169">
            <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc>.</source>
            <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc>.</target>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source xml:space="preserve">Press F5.</source>
            <target xml:space="preserve">Press F5.</target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">The app opens in a window, and a default splash screen appears first.</source>
            <target xml:space="preserve">The app opens in a window, and a default splash screen appears first.</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">The splash screen is defined by an image (SplashScreen.png) and a background color (specified in your app's manifest file).</source>
            <target xml:space="preserve">The splash screen is defined by an image (SplashScreen.png) and a background color (specified in your app's manifest file).</target>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source xml:space="preserve">The splash screen disappears, and then your app appears.</source>
            <target xml:space="preserve">The splash screen disappears, and then your app appears.</target>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source xml:space="preserve">It contains a black screen with the text "Content goes here".</source>
            <target xml:space="preserve">It contains a black screen with the text "Content goes here".</target>
          </segment>
        </unit>
        <unit id="176">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="176">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The HelloWorld app on a PC</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The HelloWorld app on a PC</pc>
						</target>
          </segment>
        </unit>
        <unit id="177">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="177">
            <source xml:space="preserve">Press the Windows key to open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu, then show all apps.</source>
            <target xml:space="preserve">Press the Windows key to open the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu, then show all apps.</target>
          </segment>
        </unit>
        <unit id="178">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="178">
            <source xml:space="preserve">Notice that deploying the app locally adds its tile to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu.</source>
            <target xml:space="preserve">Notice that deploying the app locally adds its tile to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu.</target>
          </segment>
        </unit>
        <unit id="179">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="179">
            <source xml:space="preserve">To run the app again (not in debugging mode), tap or click its tile in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu.</source>
            <target xml:space="preserve">To run the app again (not in debugging mode), tap or click its tile in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start</pc> menu.</target>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source xml:space="preserve">It doesn't do much—yet—but congratulations, you've built your first UWP app!</source>
            <target xml:space="preserve">It doesn't do much—yet—but congratulations, you've built your first UWP app!</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To stop debugging</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To stop debugging</pc>
						</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Stop Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop debugging button</pc>) in the toolbar.</source>
            <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Stop Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop debugging button</pc>) in the toolbar.</target>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop debugging</pc>.</source>
            <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Stop debugging</pc>.</target>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">Close the app window.</source>
            <target xml:space="preserve">Close the app window.</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">Start the app on a mobile device emulator</source>
            <target xml:space="preserve">Start the app on a mobile device emulator</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</source>
            <target xml:space="preserve">Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</source>
            <target xml:space="preserve">In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</target>
          </segment>
        </unit>
        <unit id="190">
          <segment state="initial" id="190">
            <source xml:space="preserve">You can choose among emulators for devices with different memory and display configurations.</source>
            <target xml:space="preserve">You can choose among emulators for devices with different memory and display configurations.</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Device</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Device</pc>
						</target>
          </segment>
        </unit>
        <unit id="192">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="192">
            <source xml:space="preserve">**Emulator <pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc> WVGA 4 inch 512MB**</source>
            <target xml:space="preserve">**Emulator <pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc> WVGA 4 inch 512MB**</target>
          </segment>
        </unit>
        <unit id="193">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="193">
            <source xml:space="preserve">**Emulator <pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc> WVGA 4 inch 1GB**</source>
            <target xml:space="preserve">**Emulator <pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc> WVGA 4 inch 1GB**</target>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source xml:space="preserve">etc... (Various emulators in other configurations)</source>
            <target xml:space="preserve">etc... (Various emulators in other configurations)</target>
          </segment>
        </unit>
        <unit id="195">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="195">
            <source xml:space="preserve">It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc> option.</source>
            <target xml:space="preserve">It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc> option.</target>
          </segment>
        </unit>
        <unit id="196">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="196">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To start debugging on a mobile device emulator</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To start debugging on a mobile device emulator</pc>
						</target>
          </segment>
        </unit>
        <unit id="197">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="197">
            <source xml:space="preserve">In the target device menu (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Start debugging menu</pc>) on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="6">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc>.</source>
            <target xml:space="preserve">In the target device menu (<pc dataRefEnd="id2" dataRefStart="id1" id="2">Start debugging menu</pc>) on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="6">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc>.</target>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Start debugging button</pc>) in the toolbar.</source>
            <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start Debugging</pc> button (<pc dataRefEnd="id4" dataRefStart="id3" id="4">Start debugging button</pc>) in the toolbar.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">–or–</source>
            <target xml:space="preserve">–or–</target>
          </segment>
        </unit>
        <unit id="200">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="200">
            <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc>.</source>
            <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start Debugging</pc>.</target>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source xml:space="preserve">Visual Studio starts the selected emulator and then deploys and starts your app.</source>
            <target xml:space="preserve">Visual Studio starts the selected emulator and then deploys and starts your app.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">On the mobile device emulator, the app looks like this.</source>
            <target xml:space="preserve">On the mobile device emulator, the app looks like this.</target>
          </segment>
        </unit>
        <unit id="203">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="203">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Initial app screen on mobile device</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Initial app screen on mobile device</pc>
						</target>
          </segment>
        </unit>
        <unit id="204">
          <segment state="initial" id="204">
            <source xml:space="preserve">Step 3: Modify your start page</source>
            <target xml:space="preserve">Step 3: Modify your start page</target>
          </segment>
        </unit>
        <unit id="205">
          <segment state="initial" id="205">
            <source xml:space="preserve">One of the files that Visual Studio created for you is default.html, your app's start page.</source>
            <target xml:space="preserve">One of the files that Visual Studio created for you is default.html, your app's start page.</target>
          </segment>
        </unit>
        <unit id="206">
          <segment state="initial" id="206">
            <source xml:space="preserve">When the app runs, it displays the content of its start page.</source>
            <target xml:space="preserve">When the app runs, it displays the content of its start page.</target>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source xml:space="preserve">The start page also contains references to the app's code files and style sheets.</source>
            <target xml:space="preserve">The start page also contains references to the app's code files and style sheets.</target>
          </segment>
        </unit>
        <unit id="208">
          <segment state="initial" id="208">
            <source xml:space="preserve">Here's the start page that Visual Studio created for you:</source>
            <target xml:space="preserve">Here's the start page that Visual Studio created for you:</target>
          </segment>
        </unit>
        <unit id="209">
          <segment state="initial" id="209">
            <source xml:space="preserve">Let's add some new content to your default.html file.</source>
            <target xml:space="preserve">Let's add some new content to your default.html file.</target>
          </segment>
        </unit>
        <unit id="210">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="210">
            <source xml:space="preserve">Just as you would add content to any other HTML file, you add your content inside the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**body**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element.</source>
            <target xml:space="preserve">Just as you would add content to any other HTML file, you add your content inside the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**body**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element.</target>
          </segment>
        </unit>
        <unit id="211">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="211">
            <source xml:space="preserve">You can use HTML5 elements to create your app (with a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">few exceptions</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">You can use HTML5 elements to create your app (with a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">few exceptions</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="212">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id25">&lt;link&gt;</data>
            <data id="id26">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="212">
            <source xml:space="preserve">That means you can use HTML5 elements like <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**h1**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**p**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>, and <pc dataRefEnd="id26" dataRefStart="id25" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**img**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">That means you can use HTML5 elements like <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**h1**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**p**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>, and <pc dataRefEnd="id26" dataRefStart="id25" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**img**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="213">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="213">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To modify your start page</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To modify your start page</pc>
						</target>
          </segment>
        </unit>
        <unit id="214">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="214">
            <source xml:space="preserve">Replace the existing content in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**body**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element with a first-level heading that says "Hello, world!", some text that asks the user's name, an <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**input**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> element to accept the user's name, a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, and a <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> element.</source>
            <target xml:space="preserve">Replace the existing content in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**body**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element with a first-level heading that says "Hello, world!", some text that asks the user's name, an <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**input**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> element to accept the user's name, a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, and a <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> element.</target>
          </segment>
        </unit>
        <unit id="215">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="215">
            <source xml:space="preserve">Assign IDs to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">input</pc>, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">button</pc>, and the <pc dataRefEnd="id6" dataRefStart="id5" id="6">div</pc>.</source>
            <target xml:space="preserve">Assign IDs to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">input</pc>, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">button</pc>, and the <pc dataRefEnd="id6" dataRefStart="id5" id="6">div</pc>.</target>
          </segment>
        </unit>
        <unit id="216">
          <segment state="initial" id="216">
            <source xml:space="preserve">Run the app on the local machine.</source>
            <target xml:space="preserve">Run the app on the local machine.</target>
          </segment>
        </unit>
        <unit id="217">
          <segment state="initial" id="217">
            <source xml:space="preserve">It look like this.</source>
            <target xml:space="preserve">It look like this.</target>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The HelloWorld app with new content</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The HelloWorld app with new content</pc>
						</target>
          </segment>
        </unit>
        <unit id="219">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="219">
            <source xml:space="preserve">You can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**input**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element, but right now, clicking the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> doesn't do anything.</source>
            <target xml:space="preserve">You can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**input**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element, but right now, clicking the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> doesn't do anything.</target>
          </segment>
        </unit>
        <unit id="220">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="220">
            <source xml:space="preserve">Some objects, such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">button</pc>, can send messages when certain events occur.</source>
            <target xml:space="preserve">Some objects, such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">button</pc>, can send messages when certain events occur.</target>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source xml:space="preserve">These event messages give you the opportunity to take some action in response to the event.</source>
            <target xml:space="preserve">These event messages give you the opportunity to take some action in response to the event.</target>
          </segment>
        </unit>
        <unit id="222">
          <segment state="initial" id="222">
            <source xml:space="preserve">You put code to respond to the event in an event handler method.</source>
            <target xml:space="preserve">You put code to respond to the event in an event handler method.</target>
          </segment>
        </unit>
        <unit id="223">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="223">
            <source xml:space="preserve">In the next steps, we create an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that displays a personalized greeting.</source>
            <target xml:space="preserve">In the next steps, we create an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that displays a personalized greeting.</target>
          </segment>
        </unit>
        <unit id="224">
          <segment state="initial" id="224">
            <source xml:space="preserve">We add our event handler code to our default.js file.</source>
            <target xml:space="preserve">We add our event handler code to our default.js file.</target>
          </segment>
        </unit>
        <unit id="225">
          <segment state="initial" id="225">
            <source xml:space="preserve">Step 4: Create an event handler</source>
            <target xml:space="preserve">Step 4: Create an event handler</target>
          </segment>
        </unit>
        <unit id="226">
          <segment state="initial" id="226">
            <source xml:space="preserve">When we created our new project, Visual Studio created a /js/default.js file for us.</source>
            <target xml:space="preserve">When we created our new project, Visual Studio created a /js/default.js file for us.</target>
          </segment>
        </unit>
        <unit id="227">
          <segment state="initial" id="227">
            <source xml:space="preserve">This file contains code for handling your app's life cycle.</source>
            <target xml:space="preserve">This file contains code for handling your app's life cycle.</target>
          </segment>
        </unit>
        <unit id="228">
          <segment state="initial" id="228">
            <source xml:space="preserve">It's also where you write additional code that provides interactivity for your default.html file.</source>
            <target xml:space="preserve">It's also where you write additional code that provides interactivity for your default.html file.</target>
          </segment>
        </unit>
        <unit id="229">
          <segment state="initial" id="229">
            <source xml:space="preserve">Open the default.js file.</source>
            <target xml:space="preserve">Open the default.js file.</target>
          </segment>
        </unit>
        <unit id="230">
          <segment state="initial" id="230">
            <source xml:space="preserve">Before we start adding our own code, let's take a look at the first and the last few lines of code in the file:</source>
            <target xml:space="preserve">Before we start adding our own code, let's take a look at the first and the last few lines of code in the file:</target>
          </segment>
        </unit>
        <unit id="231">
          <segment state="initial" id="231">
            <source xml:space="preserve">You might be wondering what's going on here.</source>
            <target xml:space="preserve">You might be wondering what's going on here.</target>
          </segment>
        </unit>
        <unit id="232">
          <segment state="initial" id="232">
            <source xml:space="preserve">These lines of code wrap the rest of the default.js code in a self-executing anonymous function.</source>
            <target xml:space="preserve">These lines of code wrap the rest of the default.js code in a self-executing anonymous function.</target>
          </segment>
        </unit>
        <unit id="233">
          <segment state="initial" id="233">
            <source xml:space="preserve">A self-executing anonymous function makes it easier to avoid naming conflicts or situations where you accidently modify a value that you didn't intend to modify.</source>
            <target xml:space="preserve">A self-executing anonymous function makes it easier to avoid naming conflicts or situations where you accidently modify a value that you didn't intend to modify.</target>
          </segment>
        </unit>
        <unit id="234">
          <segment state="initial" id="234">
            <source xml:space="preserve">It also keeps unnecessary identifiers out of the global namespace, which helps performance.</source>
            <target xml:space="preserve">It also keeps unnecessary identifiers out of the global namespace, which helps performance.</target>
          </segment>
        </unit>
        <unit id="235">
          <segment state="initial" id="235">
            <source xml:space="preserve">It looks a little strange, but it's a good programming practice.</source>
            <target xml:space="preserve">It looks a little strange, but it's a good programming practice.</target>
          </segment>
        </unit>
        <unit id="236">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="236">
            <source xml:space="preserve">The next line of code turns on <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">strict mode</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for your JavaScript code.</source>
            <target xml:space="preserve">The next line of code turns on <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">strict mode</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for your JavaScript code.</target>
          </segment>
        </unit>
        <unit id="237">
          <segment state="initial" id="237">
            <source xml:space="preserve">Strict mode provides additional error checking for your code.</source>
            <target xml:space="preserve">Strict mode provides additional error checking for your code.</target>
          </segment>
        </unit>
        <unit id="238">
          <segment state="initial" id="238">
            <source xml:space="preserve">For example, it prevents you from using implicitly declared variables or assigning a value to a read-only property.</source>
            <target xml:space="preserve">For example, it prevents you from using implicitly declared variables or assigning a value to a read-only property.</target>
          </segment>
        </unit>
        <unit id="239">
          <segment state="initial" id="239">
            <source xml:space="preserve">Take a look at the rest of the code in default.js.</source>
            <target xml:space="preserve">Take a look at the rest of the code in default.js.</target>
          </segment>
        </unit>
        <unit id="240">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="240">
            <source xml:space="preserve">It handles your app's <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**activated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**checkpoint**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> events.</source>
            <target xml:space="preserve">It handles your app's <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**activated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**checkpoint**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> events.</target>
          </segment>
        </unit>
        <unit id="241">
          <segment state="initial" id="241">
            <source xml:space="preserve">We go into more detail about these events later.</source>
            <target xml:space="preserve">We go into more detail about these events later.</target>
          </segment>
        </unit>
        <unit id="242">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="242">
            <source xml:space="preserve">For now, just know that the <pc dataRefEnd="id2" dataRefStart="id1" id="2">activated</pc> event fires when your app starts.</source>
            <target xml:space="preserve">For now, just know that the <pc dataRefEnd="id2" dataRefStart="id1" id="2">activated</pc> event fires when your app starts.</target>
          </segment>
        </unit>
        <unit id="243">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="243">
            <source xml:space="preserve">Let's define an event handler for your <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Let's define an event handler for your <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="244">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
            <data id="id11">&lt;link&gt;</data>
            <data id="id12">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="244">
            <source xml:space="preserve">Our new event handler gets the user's name from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nameInput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**input**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control and uses it to output a greeting to the <pc dataRefEnd="id10" dataRefStart="id9" id="6">greetingOutput</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> element that you created in the last section.</source>
            <target xml:space="preserve">Our new event handler gets the user's name from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nameInput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**input**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control and uses it to output a greeting to the <pc dataRefEnd="id10" dataRefStart="id9" id="6">greetingOutput</pc> <pc dataRefEnd="id12" dataRefStart="id11" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> element that you created in the last section.</target>
          </segment>
        </unit>
        <unit id="245">
          <segment state="initial" id="245">
            <source xml:space="preserve">Using events that work for touch, mouse, and pen input</source>
            <target xml:space="preserve">Using events that work for touch, mouse, and pen input</target>
          </segment>
        </unit>
        <unit id="246">
          <segment state="initial" id="246">
            <source xml:space="preserve">In a UWP app, you don’t need to worry about the differences between touch, mouse, and other forms of pointer input.</source>
            <target xml:space="preserve">In a UWP app, you don’t need to worry about the differences between touch, mouse, and other forms of pointer input.</target>
          </segment>
        </unit>
        <unit id="247">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="247">
            <source xml:space="preserve">You can just use events that you know, like <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and they work for all forms of input.</source>
            <target xml:space="preserve">You can just use events that you know, like <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and they work for all forms of input.</target>
          </segment>
        </unit>
        <unit id="248">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
            <data id="id5">&lt;em&gt;</data>
            <data id="id6">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="248">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Tip</pc>   Your app can also use the new <pc dataRefEnd="id4" dataRefStart="id3" id="3">MSPointer\</pc>* and <pc dataRefEnd="id6" dataRefStart="id5" id="5">MSGesture\</pc>* events, which work for touch, mouse, and pen input and can provide additional info about the device that triggered the event.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Tip</pc>   Your app can also use the new <pc dataRefEnd="id4" dataRefStart="id3" id="3">MSPointer\</pc>* and <pc dataRefEnd="id6" dataRefStart="id5" id="5">MSGesture\</pc>* events, which work for touch, mouse, and pen input and can provide additional info about the device that triggered the event.</target>
          </segment>
        </unit>
        <unit id="249">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="249">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Responding to user interaction</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">Gestures, manipulations, and interactions</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Responding to user interaction</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">Gestures, manipulations, and interactions</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="250">
          <segment state="initial" id="250">
            <source xml:space="preserve">Let's go ahead and create the event handler.</source>
            <target xml:space="preserve">Let's go ahead and create the event handler.</target>
          </segment>
        </unit>
        <unit id="251">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="251">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To create the event handler</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To create the event handler</pc>
						</target>
          </segment>
        </unit>
        <unit id="252">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;code&gt;</data>
            <data id="id20">&lt;/code&gt;</data>
            <data id="id21">&lt;code&gt;</data>
            <data id="id22">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="252">
            <source xml:space="preserve">In default.js, after the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**app.oncheckpoint**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler and before the call to <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**app.start**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, create a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> event handler function named <pc dataRefEnd="id20" dataRefStart="id19" id="8">buttonClickHandler</pc> that takes a single parameter named <pc dataRefEnd="id22" dataRefStart="id21" id="10">eventInfo</pc>.</source>
            <target xml:space="preserve">In default.js, after the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**app.oncheckpoint**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler and before the call to <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**app.start**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, create a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> event handler function named <pc dataRefEnd="id20" dataRefStart="id19" id="8">buttonClickHandler</pc> that takes a single parameter named <pc dataRefEnd="id22" dataRefStart="id21" id="10">eventInfo</pc>.</target>
          </segment>
        </unit>
        <unit id="253">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="253">
            <source xml:space="preserve">Inside our event handler, retrieve the user's name from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nameInput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**input**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control and use it to create a greeting.</source>
            <target xml:space="preserve">Inside our event handler, retrieve the user's name from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">nameInput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**input**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control and use it to create a greeting.</target>
          </segment>
        </unit>
        <unit id="254">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="254">
            <source xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">greetingOutput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to display the result.</source>
            <target xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">greetingOutput</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to display the result.</target>
          </segment>
        </unit>
        <unit id="255">
          <segment state="initial" id="255">
            <source xml:space="preserve">You added your event handler to default.js.</source>
            <target xml:space="preserve">You added your event handler to default.js.</target>
          </segment>
        </unit>
        <unit id="256">
          <segment state="initial" id="256">
            <source xml:space="preserve">Now you need to register it.</source>
            <target xml:space="preserve">Now you need to register it.</target>
          </segment>
        </unit>
        <unit id="257">
          <segment state="initial" id="257">
            <source xml:space="preserve">Step 5: Register the event handler when your app launches</source>
            <target xml:space="preserve">Step 5: Register the event handler when your app launches</target>
          </segment>
        </unit>
        <unit id="258">
          <segment state="initial" id="258">
            <source xml:space="preserve">The only thing we need to do now is register the event handler with the button.</source>
            <target xml:space="preserve">The only thing we need to do now is register the event handler with the button.</target>
          </segment>
        </unit>
        <unit id="259">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="259">
            <source xml:space="preserve">The recommended way to register an event handler is to call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**addEventListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> from our code.</source>
            <target xml:space="preserve">The recommended way to register an event handler is to call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**addEventListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> from our code.</target>
          </segment>
        </unit>
        <unit id="260">
          <segment state="initial" id="260">
            <source xml:space="preserve">A good place to register the event handler is when our app is activated.</source>
            <target xml:space="preserve">A good place to register the event handler is when our app is activated.</target>
          </segment>
        </unit>
        <unit id="261">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="261">
            <source xml:space="preserve">Fortunately, Visual Studio generated some code for us in our default.js file that handles our app's activation: the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**app.onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler.</source>
            <target xml:space="preserve">Fortunately, Visual Studio generated some code for us in our default.js file that handles our app's activation: the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**app.onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler.</target>
          </segment>
        </unit>
        <unit id="262">
          <segment state="initial" id="262">
            <source xml:space="preserve">Let's take a look at this code.</source>
            <target xml:space="preserve">Let's take a look at this code.</target>
          </segment>
        </unit>
        <unit id="263">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="263">
            <source xml:space="preserve">Inside the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> handler, the code checks to see what type of activation occurred.</source>
            <target xml:space="preserve">Inside the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> handler, the code checks to see what type of activation occurred.</target>
          </segment>
        </unit>
        <unit id="264">
          <segment state="initial" id="264">
            <source xml:space="preserve">There are many different types of activations.</source>
            <target xml:space="preserve">There are many different types of activations.</target>
          </segment>
        </unit>
        <unit id="265">
          <segment state="initial" id="265">
            <source xml:space="preserve">For example, your app is activated when the user launches your app and when the user wants to open a file that is associated with your app.</source>
            <target xml:space="preserve">For example, your app is activated when the user launches your app and when the user wants to open a file that is associated with your app.</target>
          </segment>
        </unit>
        <unit id="266">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="266">
            <source xml:space="preserve">(For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">App lifecycle</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></source>
            <target xml:space="preserve">(For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">App lifecycle</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></target>
          </segment>
        </unit>
        <unit id="267">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="267">
            <source xml:space="preserve">We're interested in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**launch**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> activation.</source>
            <target xml:space="preserve">We're interested in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**launch**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> activation.</target>
          </segment>
        </unit>
        <unit id="268">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="268">
            <source xml:space="preserve">An app is <pc dataRefEnd="id2" dataRefStart="id1" id="2">launched</pc> whenever it is not running and then a user activates it.</source>
            <target xml:space="preserve">An app is <pc dataRefEnd="id2" dataRefStart="id1" id="2">launched</pc> whenever it is not running and then a user activates it.</target>
          </segment>
        </unit>
        <unit id="269">
          <segment state="initial" id="269">
            <source xml:space="preserve">If the activation is a launch activation, the code checks to see how the app was shut down the last time it ran.</source>
            <target xml:space="preserve">If the activation is a launch activation, the code checks to see how the app was shut down the last time it ran.</target>
          </segment>
        </unit>
        <unit id="270">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="270">
            <source xml:space="preserve">Then it calls <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Then it calls <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="271">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="271">
            <source xml:space="preserve">It calls <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> regardless of whether the app had been shut down in the past or whether this is the very first time it's being launched.</source>
            <target xml:space="preserve">It calls <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> regardless of whether the app had been shut down in the past or whether this is the very first time it's being launched.</target>
          </segment>
        </unit>
        <unit id="272">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="272">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">WinJS.UI.processAll</pc> is enclosed in a call to the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**setPromise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method, which makes sure the splash screen isn't taken down until the app's page is ready.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">WinJS.UI.processAll</pc> is enclosed in a call to the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**setPromise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method, which makes sure the splash screen isn't taken down until the app's page is ready.</target>
          </segment>
        </unit>
        <unit id="273">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="273">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Tip</pc>   The <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> function scans your default.html file for WinJS controls and initializes them.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Tip</pc>   The <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> function scans your default.html file for WinJS controls and initializes them.</target>
          </segment>
        </unit>
        <unit id="274">
          <segment state="initial" id="274">
            <source xml:space="preserve">So far, we haven't added any of these controls, but it's a good idea to leave this code in case you want to add them later.</source>
            <target xml:space="preserve">So far, we haven't added any of these controls, but it's a good idea to leave this code in case you want to add them later.</target>
          </segment>
        </unit>
        <unit id="275">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="275">
            <source xml:space="preserve">A good place to register event handlers for non-WinJS controls is just after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">A good place to register event handlers for non-WinJS controls is just after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="276">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="276">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To register your event handler</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">To register your event handler</pc>
						</target>
          </segment>
        </unit>
        <unit id="277">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="277">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler in default.js, retrieve <pc dataRefEnd="id8" dataRefStart="id7" id="4">helloButton</pc> and use <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**addEventListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> to register our event handler for the <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> event.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler in default.js, retrieve <pc dataRefEnd="id8" dataRefStart="id7" id="4">helloButton</pc> and use <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**addEventListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> to register our event handler for the <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> event.</target>
          </segment>
        </unit>
        <unit id="278">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="278">
            <source xml:space="preserve">Add this code after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Add this code after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="279">
          <segment state="initial" id="279">
            <source xml:space="preserve">Here's the complete code for our updated default.js file:</source>
            <target xml:space="preserve">Here's the complete code for our updated default.js file:</target>
          </segment>
        </unit>
        <unit id="280">
          <segment state="initial" id="280">
            <source xml:space="preserve">Run the app.</source>
            <target xml:space="preserve">Run the app.</target>
          </segment>
        </unit>
        <unit id="281">
          <segment state="initial" id="281">
            <source xml:space="preserve">When you enter your name in the text box and click the button, the app displays a personalized greeting.</source>
            <target xml:space="preserve">When you enter your name in the text box and click the button, the app displays a personalized greeting.</target>
          </segment>
        </unit>
        <unit id="282">
          <segment state="initial" id="282">
            <source xml:space="preserve">Here's how it looks on the local machine and in the emulator.</source>
            <target xml:space="preserve">Here's how it looks on the local machine and in the emulator.</target>
          </segment>
        </unit>
        <unit id="283">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="283">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">A personalized greeting from the HelloWorld app</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">A personalized greeting from the HelloWorld app</pc>
						</target>
          </segment>
        </unit>
        <unit id="284">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="284">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">A personalized greeting from the HelloWorld app</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">A personalized greeting from the HelloWorld app</pc>
						</target>
          </segment>
        </unit>
        <unit id="285">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="285">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   If you're curious as to why we use <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**addEventListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> to register our event in code rather than setting the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**onclick**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> event in our HTML, see <pc dataRefEnd="id16" dataRefStart="id15" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">Coding basic apps</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc> for a detailed explanation.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   If you're curious as to why we use <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**addEventListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> to register our event in code rather than setting the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**onclick**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> event in our HTML, see <pc dataRefEnd="id16" dataRefStart="id15" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">Coding basic apps</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc> for a detailed explanation.</target>
          </segment>
        </unit>
        <unit id="286">
          <segment state="initial" id="286">
            <source xml:space="preserve">Step 6: Add a Windows Library for JavaScript control</source>
            <target xml:space="preserve">Step 6: Add a Windows Library for JavaScript control</target>
          </segment>
        </unit>
        <unit id="287">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="287">
            <source xml:space="preserve">In addition to standard HTML controls, your app can use any of the controls in the Windows Library for JavaScript, such as the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.DatePicker**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WinJS.UI.FlipView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**WinjS.UI.ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, and <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**WinJS.UI.Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> controls.</source>
            <target xml:space="preserve">In addition to standard HTML controls, your app can use any of the controls in the Windows Library for JavaScript, such as the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.DatePicker**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WinJS.UI.FlipView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**WinjS.UI.ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, and <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**WinJS.UI.Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> controls.</target>
          </segment>
        </unit>
        <unit id="288">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="288">
            <source xml:space="preserve">Unlike HTML controls, WinJS controls don't have dedicated markup elements: you can't create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control by adding a <pc dataRefEnd="id8" dataRefStart="id7" id="4">&lt;rating /&gt;</pc> element, for example.</source>
            <target xml:space="preserve">Unlike HTML controls, WinJS controls don't have dedicated markup elements: you can't create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control by adding a <pc dataRefEnd="id8" dataRefStart="id7" id="4">&lt;rating /&gt;</pc> element, for example.</target>
          </segment>
        </unit>
        <unit id="289">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="289">
            <source xml:space="preserve">To add a WinJS control, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element and use the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**data-win-control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> attribute to specify the type of control you want.</source>
            <target xml:space="preserve">To add a WinJS control, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element and use the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**data-win-control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> attribute to specify the type of control you want.</target>
          </segment>
        </unit>
        <unit id="290">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="290">
            <source xml:space="preserve">To add a <pc dataRefEnd="id2" dataRefStart="id1" id="2">Rating</pc> control, you set the attribute to "WinJS.UI.Rating".</source>
            <target xml:space="preserve">To add a <pc dataRefEnd="id2" dataRefStart="id1" id="2">Rating</pc> control, you set the attribute to "WinJS.UI.Rating".</target>
          </segment>
        </unit>
        <unit id="291">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="291">
            <source xml:space="preserve">Let's add a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control to your app.</source>
            <target xml:space="preserve">Let's add a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control to your app.</target>
          </segment>
        </unit>
        <unit id="292">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="292">
            <source xml:space="preserve">In your default.html file, add a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**label**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control after the <pc dataRefEnd="id14" dataRefStart="id13" id="6">greetingOutput</pc> <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">In your default.html file, add a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**label**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control after the <pc dataRefEnd="id14" dataRefStart="id13" id="6">greetingOutput</pc> <pc dataRefEnd="id16" dataRefStart="id15" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="293">
          <segment state="initial" id="293">
            <source xml:space="preserve">Run the app on the local machine.</source>
            <target xml:space="preserve">Run the app on the local machine.</target>
          </segment>
        </unit>
        <unit id="294">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="294">
            <source xml:space="preserve">Notice the new <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control.</source>
            <target xml:space="preserve">Notice the new <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control.</target>
          </segment>
        </unit>
        <unit id="295">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="295">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The Hello, world app, with a Windows Library for JavaScript control</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The Hello, world app, with a Windows Library for JavaScript control</pc>
						</target>
          </segment>
        </unit>
        <unit id="296">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="296">
            <source xml:space="preserve">Right now, clicking the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control changes the rating, but it doesn't do anything else.</source>
            <target xml:space="preserve">Right now, clicking the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control changes the rating, but it doesn't do anything else.</target>
          </segment>
        </unit>
        <unit id="297">
          <segment state="initial" id="297">
            <source xml:space="preserve">Let's use an event handler to do something when the user changes the rating.</source>
            <target xml:space="preserve">Let's use an event handler to do something when the user changes the rating.</target>
          </segment>
        </unit>
        <unit id="298">
          <segment state="initial" id="298">
            <source xml:space="preserve">Step 7: Register an event handler for a Windows Library for JavaScript control</source>
            <target xml:space="preserve">Step 7: Register an event handler for a Windows Library for JavaScript control</target>
          </segment>
        </unit>
        <unit id="299">
          <segment state="initial" id="299">
            <source xml:space="preserve">Registering an event handler for a WinJS control is a little different than registering an event handler for a standard HTML control.</source>
            <target xml:space="preserve">Registering an event handler for a WinJS control is a little different than registering an event handler for a standard HTML control.</target>
          </segment>
        </unit>
        <unit id="300">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="300">
            <source xml:space="preserve">Earlier, we mentioned that the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler calls <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method to initialize WinJS in your markup.</source>
            <target xml:space="preserve">Earlier, we mentioned that the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler calls <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method to initialize WinJS in your markup.</target>
          </segment>
        </unit>
        <unit id="301">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="301">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">WinJS.UI.processAll</pc> is enclosed in a call to the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**setPromise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">WinJS.UI.processAll</pc> is enclosed in a call to the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**setPromise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method.</target>
          </segment>
        </unit>
        <unit id="302">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="302">
            <source xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> were a standard HTML control, you could add your event handler after this call to <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> were a standard HTML control, you could add your event handler after this call to <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="303">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="303">
            <source xml:space="preserve">But it's a little more complicated for a WinJS control like our <pc dataRefEnd="id2" dataRefStart="id1" id="2">Rating</pc>.</source>
            <target xml:space="preserve">But it's a little more complicated for a WinJS control like our <pc dataRefEnd="id2" dataRefStart="id1" id="2">Rating</pc>.</target>
          </segment>
        </unit>
        <unit id="304">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="304">
            <source xml:space="preserve">Because <pc dataRefEnd="id2" dataRefStart="id1" id="2">WinJS.UI.processAll</pc> creates the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Rating</pc> control for us, we can't add the event handler to <pc dataRefEnd="id6" dataRefStart="id5" id="6">Rating</pc> until after <pc dataRefEnd="id8" dataRefStart="id7" id="8">WinJS.UI.processAll</pc> has finished its processing.</source>
            <target xml:space="preserve">Because <pc dataRefEnd="id2" dataRefStart="id1" id="2">WinJS.UI.processAll</pc> creates the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Rating</pc> control for us, we can't add the event handler to <pc dataRefEnd="id6" dataRefStart="id5" id="6">Rating</pc> until after <pc dataRefEnd="id8" dataRefStart="id7" id="8">WinJS.UI.processAll</pc> has finished its processing.</target>
          </segment>
        </unit>
        <unit id="305">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="305">
            <source xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> were a typical method, we could register the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> event handler right after we call it.</source>
            <target xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> were a typical method, we could register the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> event handler right after we call it.</target>
          </segment>
        </unit>
        <unit id="306">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="306">
            <source xml:space="preserve">But the <pc dataRefEnd="id2" dataRefStart="id1" id="2">WinJS.UI.processAll</pc> method is asynchronous, so any code that follows it might run before <pc dataRefEnd="id4" dataRefStart="id3" id="4">WinJS.UI.processAll</pc> completes.</source>
            <target xml:space="preserve">But the <pc dataRefEnd="id2" dataRefStart="id1" id="2">WinJS.UI.processAll</pc> method is asynchronous, so any code that follows it might run before <pc dataRefEnd="id4" dataRefStart="id3" id="4">WinJS.UI.processAll</pc> completes.</target>
          </segment>
        </unit>
        <unit id="307">
          <segment state="initial" id="307">
            <source xml:space="preserve">So, what do we do?</source>
            <target xml:space="preserve">So, what do we do?</target>
          </segment>
        </unit>
        <unit id="308">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="308">
            <source xml:space="preserve">We use a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Promise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object to receive notification when <pc dataRefEnd="id8" dataRefStart="id7" id="4">WinJS.UI.processAll</pc> completes.</source>
            <target xml:space="preserve">We use a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Promise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object to receive notification when <pc dataRefEnd="id8" dataRefStart="id7" id="4">WinJS.UI.processAll</pc> completes.</target>
          </segment>
        </unit>
        <unit id="309">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="309">
            <source xml:space="preserve">Like all asynchronous WinJS methods, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> returns a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Promise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> object.</source>
            <target xml:space="preserve">Like all asynchronous WinJS methods, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> returns a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Promise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> object.</target>
          </segment>
        </unit>
        <unit id="310">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="310">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">Promise</pc> is a "promise" that something will happen in the future; when that thing happens, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Promise</pc> is said to have completed.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">Promise</pc> is a "promise" that something will happen in the future; when that thing happens, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Promise</pc> is said to have completed.</target>
          </segment>
        </unit>
        <unit id="311">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="311">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Promise**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> objects have a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**then**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> method that takes a "completed" function as a parameter.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Promise**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> objects have a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**then**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> method that takes a "completed" function as a parameter.</target>
          </segment>
        </unit>
        <unit id="312">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="312">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Promise</pc> calls this function when it completes.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Promise</pc> calls this function when it completes.</target>
          </segment>
        </unit>
        <unit id="313">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="313">
            <source xml:space="preserve">By adding your code to a "completed" function and passing it to the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Promise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object's <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**then**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method, you can be sure your code executes after <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> is complete.</source>
            <target xml:space="preserve">By adding your code to a "completed" function and passing it to the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Promise**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object's <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**then**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method, you can be sure your code executes after <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> is complete.</target>
          </segment>
        </unit>
        <unit id="314">
          <segment state="initial" id="314">
            <source xml:space="preserve">Let's output the rating value when the user selects a rating.</source>
            <target xml:space="preserve">Let's output the rating value when the user selects a rating.</target>
          </segment>
        </unit>
        <unit id="315">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="315">
            <source xml:space="preserve">In your default.html file, create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element to display the rating value and give it the <pc dataRefEnd="id8" dataRefStart="id7" id="4">id</pc> "ratingOutput".</source>
            <target xml:space="preserve">In your default.html file, create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element to display the rating value and give it the <pc dataRefEnd="id8" dataRefStart="id7" id="4">id</pc> "ratingOutput".</target>
          </segment>
        </unit>
        <unit id="316">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="316">
            <source xml:space="preserve">In our default.js file, create an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control's <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**change**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> event named <pc dataRefEnd="id14" dataRefStart="id13" id="6">ratingChanged</pc>.</source>
            <target xml:space="preserve">In our default.js file, create an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control's <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**change**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> event named <pc dataRefEnd="id14" dataRefStart="id13" id="6">ratingChanged</pc>.</target>
          </segment>
        </unit>
        <unit id="317">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="317">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**eventInfo**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> parameter contains a <pc dataRefEnd="id8" dataRefStart="id7" id="4">detail.tentativeRating</pc> property that provides the new user rating.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**eventInfo**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> parameter contains a <pc dataRefEnd="id8" dataRefStart="id7" id="4">detail.tentativeRating</pc> property that provides the new user rating.</target>
          </segment>
        </unit>
        <unit id="318">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="318">
            <source xml:space="preserve">Retrieve this value and display it in the output <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Retrieve this value and display it in the output <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**div**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="319">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;code&gt;</data>
            <data id="id20">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="319">
            <source xml:space="preserve">Update the code in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler that calls <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> by adding a call to the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**then**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> method and passing it a <pc dataRefEnd="id20" dataRefStart="id19" id="8">completed</pc> function.</source>
            <target xml:space="preserve">Update the code in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler that calls <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> by adding a call to the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**then**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> method and passing it a <pc dataRefEnd="id20" dataRefStart="id19" id="8">completed</pc> function.</target>
          </segment>
        </unit>
        <unit id="320">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="320">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">completed</pc> function, retrieve the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ratingControlDiv</pc> element that hosts the <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> control.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">completed</pc> function, retrieve the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ratingControlDiv</pc> element that hosts the <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> control.</target>
          </segment>
        </unit>
        <unit id="321">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="321">
            <source xml:space="preserve">Then use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**winControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property to retrieve the actual <pc dataRefEnd="id8" dataRefStart="id7" id="4">Rating</pc> control.</source>
            <target xml:space="preserve">Then use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**winControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property to retrieve the actual <pc dataRefEnd="id8" dataRefStart="id7" id="4">Rating</pc> control.</target>
          </segment>
        </unit>
        <unit id="322">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="322">
            <source xml:space="preserve">(This example defines the <pc dataRefEnd="id2" dataRefStart="id1" id="2">completed</pc> function inline.)</source>
            <target xml:space="preserve">(This example defines the <pc dataRefEnd="id2" dataRefStart="id1" id="2">completed</pc> function inline.)</target>
          </segment>
        </unit>
        <unit id="323">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="323">
            <source xml:space="preserve">While it's fine to register event handlers for HTML controls after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, it's also OK to register them inside your <pc dataRefEnd="id8" dataRefStart="id7" id="4">completed</pc> function.</source>
            <target xml:space="preserve">While it's fine to register event handlers for HTML controls after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WinJS.UI.processAll**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, it's also OK to register them inside your <pc dataRefEnd="id8" dataRefStart="id7" id="4">completed</pc> function.</target>
          </segment>
        </unit>
        <unit id="324">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="324">
            <source xml:space="preserve">For simplicity, let's go ahead and move all your event handler registrations inside the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**then**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler.</source>
            <target xml:space="preserve">For simplicity, let's go ahead and move all your event handler registrations inside the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**then**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler.</target>
          </segment>
        </unit>
        <unit id="325">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="325">
            <source xml:space="preserve">Here's the updated <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler:</source>
            <target xml:space="preserve">Here's the updated <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**onactivated**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event handler:</target>
          </segment>
        </unit>
        <unit id="326">
          <segment state="initial" id="326">
            <source xml:space="preserve">Run the app.</source>
            <target xml:space="preserve">Run the app.</target>
          </segment>
        </unit>
        <unit id="327">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="327">
            <source xml:space="preserve">When you select a rating value, it outputs the numeric value below the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control.</source>
            <target xml:space="preserve">When you select a rating value, it outputs the numeric value below the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Rating**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control.</target>
          </segment>
        </unit>
        <unit id="328">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="328">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The completed Hello world app on a PC</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The completed Hello world app on a PC</pc>
						</target>
          </segment>
        </unit>
        <unit id="329">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="329">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The completed Hello world app on a phone</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">The completed Hello world app on a phone</pc>
						</target>
          </segment>
        </unit>
        <unit id="330">
          <segment state="initial" id="330">
            <source xml:space="preserve">Summary</source>
            <target xml:space="preserve">Summary</target>
          </segment>
        </unit>
        <unit id="331">
          <segment state="initial" id="331">
            <source xml:space="preserve">Congratulations, you've created your first app for Windows 10 and the UWP using JavaScript and HTML!</source>
            <target xml:space="preserve">Congratulations, you've created your first app for Windows 10 and the UWP using JavaScript and HTML!</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>