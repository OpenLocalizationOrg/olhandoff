<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">ece006b1536428140f17872724ef4fa8a18ad243</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Windows Phone Silverlight to UWP case study: Bookstore1</source>
            <target xml:space="preserve">Windows Phone Silverlight to UWP case study: Bookstore1</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 Universal Windows Platform (UWP) app.</source>
            <target xml:space="preserve">This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 Universal Windows Platform (UWP) app.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
            <target xml:space="preserve">With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
          </segment>
        </unit>
        <unit id="106">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="106">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Guide to UWP apps</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Guide to UWP apps</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source xml:space="preserve">The app we'll port consists of a <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> bound to a view model.</source>
            <target xml:space="preserve">The app we'll port consists of a <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> bound to a view model.</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">The view model has a list of books that shows title, author, and book cover.</source>
            <target xml:space="preserve">The view model has a list of books that shows title, author, and book cover.</target>
          </segment>
        </unit>
        <unit id="109">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="109">
            <source xml:space="preserve">The book cover images have <pc dataRefEnd="id2" dataRefStart="id1" id="2">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="8">Do not copy</pc>.</source>
            <target xml:space="preserve">The book cover images have <pc dataRefEnd="id2" dataRefStart="id1" id="2">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="8">Do not copy</pc>.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">The previous topics in this section describe the differences between the platforms, and they give details and guidance on the porting process for various aspects of an app from XAML markup, through binding to a view model, down to accessing data.</source>
            <target xml:space="preserve">The previous topics in this section describe the differences between the platforms, and they give details and guidance on the porting process for various aspects of an app from XAML markup, through binding to a view model, down to accessing data.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">A case study aims to complement that guidance by showing it in action in a real example.</source>
            <target xml:space="preserve">A case study aims to complement that guidance by showing it in action in a real example.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">The case studies assume you've read the guidance, which they do not repeat.</source>
            <target xml:space="preserve">The case studies assume you've read the guidance, which they do not repeat.</target>
          </segment>
        </unit>
        <unit id="113">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="113">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening Bookstore1Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening Bookstore1Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">Downloads</source>
            <target xml:space="preserve">Downloads</target>
          </segment>
        </unit>
        <unit id="115">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="115">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore1WPSL8 Windows Phone Silverlight app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore1WPSL8 Windows Phone Silverlight app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore1Universal\_10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore1Universal\_10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">The Windows Phone Silverlight app</source>
            <target xml:space="preserve">The Windows Phone Silverlight app</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">Here’s what Bookstore1WPSL8—the app that we're going to port—looks like.</source>
            <target xml:space="preserve">Here’s what Bookstore1WPSL8—the app that we're going to port—looks like.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">It's just a vertically-scrolling list box of books beneath the heading of the app's name and page title.</source>
            <target xml:space="preserve">It's just a vertically-scrolling list box of books beneath the heading of the app's name and page title.</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">how bookstore1wpsl8 looks</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">how bookstore1wpsl8 looks</pc>
						</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">Porting to a Windows 10 project</source>
            <target xml:space="preserve">Porting to a Windows 10 project</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">It's a very quick task to create a new project in Visual Studio, copy files over to it from Bookstore1WPSL8, and include the copied files in the new project.</source>
            <target xml:space="preserve">It's a very quick task to create a new project in Visual Studio, copy files over to it from Bookstore1WPSL8, and include the copied files in the new project.</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">Start by creating a new Blank Application (Windows Universal) project.</source>
            <target xml:space="preserve">Start by creating a new Blank Application (Windows Universal) project.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">Name it Bookstore1Universal\_10.</source>
            <target xml:space="preserve">Name it Bookstore1Universal\_10.</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">These are the files to copy over from Bookstore1WPSL8 to Bookstore1Universal\_10.</source>
            <target xml:space="preserve">These are the files to copy over from Bookstore1WPSL8 to Bookstore1Universal\_10.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
            <target xml:space="preserve">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source xml:space="preserve">After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</source>
            <target xml:space="preserve">After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</source>
            <target xml:space="preserve">Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">That command is what we mean by "including" files or folders in a project.</source>
            <target xml:space="preserve">That command is what we mean by "including" files or folders in a project.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">Each time you copy a file or folder, click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc> and then include the file or folder in the project.</source>
            <target xml:space="preserve">Each time you copy a file or folder, click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc> and then include the file or folder in the project.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">There's no need to do this for files that you're replacing in the destination.</source>
            <target xml:space="preserve">There's no need to do this for files that you're replacing in the destination.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
            <target xml:space="preserve">Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">Copy MainPage.xaml and replace the file in the destination.</source>
            <target xml:space="preserve">Copy MainPage.xaml and replace the file in the destination.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</source>
            <target xml:space="preserve">We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">Edit the source code and markup files that you just copied and change any references to the Bookstore1WPSL8 namespace to Bookstore1Universal\_10.</source>
            <target xml:space="preserve">Edit the source code and markup files that you just copied and change any references to the Bookstore1WPSL8 namespace to Bookstore1Universal\_10.</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature.</source>
            <target xml:space="preserve">A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature.</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">In the imperative code in the view model source file, these porting changes are needed:</source>
            <target xml:space="preserve">In the imperative code in the view model source file, these porting changes are needed:</target>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">System.ComponentModel.DesignerProperties</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">DesignMode</pc> and then use the <pc dataRefEnd="id6" dataRefStart="id5" id="6">Resolve</pc> command on it.</source>
            <target xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">System.ComponentModel.DesignerProperties</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">DesignMode</pc> and then use the <pc dataRefEnd="id6" dataRefStart="id5" id="6">Resolve</pc> command on it.</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">Delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">IsInDesignTool</pc> property and use IntelliSense to add the correct property name: <pc dataRefEnd="id4" dataRefStart="id3" id="4">DesignModeEnabled</pc>.</source>
            <target xml:space="preserve">Delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">IsInDesignTool</pc> property and use IntelliSense to add the correct property name: <pc dataRefEnd="id4" dataRefStart="id3" id="4">DesignModeEnabled</pc>.</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resolve</pc> command on <pc dataRefEnd="id4" dataRefStart="id3" id="4">ImageSource</pc>.</source>
            <target xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resolve</pc> command on <pc dataRefEnd="id4" dataRefStart="id3" id="4">ImageSource</pc>.</target>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resolve</pc> command on <pc dataRefEnd="id4" dataRefStart="id3" id="4">BitmapImage</pc>.</source>
            <target xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resolve</pc> command on <pc dataRefEnd="id4" dataRefStart="id3" id="4">BitmapImage</pc>.</target>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source xml:space="preserve">Delete using <pc dataRefEnd="id2" dataRefStart="id1" id="2">System.Windows.Media;</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">using System.Windows.Media.Imaging;</pc>.</source>
            <target xml:space="preserve">Delete using <pc dataRefEnd="id2" dataRefStart="id1" id="2">System.Windows.Media;</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">using System.Windows.Media.Imaging;</pc>.</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">Change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Bookstore1Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE1WPSL8" to "BOOKSTORE1UNIVERSAL".</source>
            <target xml:space="preserve">Change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Bookstore1Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE1WPSL8" to "BOOKSTORE1UNIVERSAL".</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">In MainPage.xaml, these porting changes are needed:</source>
            <target xml:space="preserve">In MainPage.xaml, these porting changes are needed:</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone:PhoneApplicationPage</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Page</pc> (don't forget the occurrences in property element syntax).</source>
            <target xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone:PhoneApplicationPage</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Page</pc> (don't forget the occurrences in property element syntax).</target>
          </segment>
        </unit>
        <unit id="146">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="146">
            <source xml:space="preserve">Delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">shell</pc> namespace prefix declarations.</source>
            <target xml:space="preserve">Delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">shell</pc> namespace prefix declarations.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</source>
            <target xml:space="preserve">Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">We can choose to correct markup compilation errors very cheaply if we want to see results soonest, even if that means temporarily removing markup.</source>
            <target xml:space="preserve">We can choose to correct markup compilation errors very cheaply if we want to see results soonest, even if that means temporarily removing markup.</target>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source xml:space="preserve">But, let's keep a record of the debt we accrue by doing so.</source>
            <target xml:space="preserve">But, let's keep a record of the debt we accrue by doing so.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">Here it is in this case.</source>
            <target xml:space="preserve">Here it is in this case.</target>
          </segment>
        </unit>
        <unit id="151">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="151">
            <source xml:space="preserve">In the root <pc dataRefEnd="id2" dataRefStart="id1" id="2">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage.xaml</pc>, delete <pc dataRefEnd="id6" dataRefStart="id5" id="6">SupportedOrientations="Portrait"</pc>.</source>
            <target xml:space="preserve">In the root <pc dataRefEnd="id2" dataRefStart="id1" id="2">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage.xaml</pc>, delete <pc dataRefEnd="id6" dataRefStart="id5" id="6">SupportedOrientations="Portrait"</pc>.</target>
          </segment>
        </unit>
        <unit id="152">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="152">
            <source xml:space="preserve">In the root <pc dataRefEnd="id2" dataRefStart="id1" id="2">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage.xaml</pc>, delete <pc dataRefEnd="id6" dataRefStart="id5" id="6">Orientation="Portrait"</pc>.</source>
            <target xml:space="preserve">In the root <pc dataRefEnd="id2" dataRefStart="id1" id="2">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage.xaml</pc>, delete <pc dataRefEnd="id6" dataRefStart="id5" id="6">Orientation="Portrait"</pc>.</target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">In the root <pc dataRefEnd="id2" dataRefStart="id1" id="2">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage.xaml</pc>, delete <pc dataRefEnd="id6" dataRefStart="id5" id="6">shell:SystemTray.IsVisible="True"</pc>.</source>
            <target xml:space="preserve">In the root <pc dataRefEnd="id2" dataRefStart="id1" id="2">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage.xaml</pc>, delete <pc dataRefEnd="id6" dataRefStart="id5" id="6">shell:SystemTray.IsVisible="True"</pc>.</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc> data template, delete the references to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">PhoneTextExtraLargeStyle</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">PhoneTextSubtleStyle</pc> <pc dataRefEnd="id8" dataRefStart="id7" id="8">TextBlock</pc> styles.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc> data template, delete the references to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">PhoneTextExtraLargeStyle</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">PhoneTextSubtleStyle</pc> <pc dataRefEnd="id8" dataRefStart="id7" id="8">TextBlock</pc> styles.</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanel</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4">StackPanel</pc>, delete the references to the <pc dataRefEnd="id6" dataRefStart="id5" id="6">PhoneTextNormalStyle</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="8">PhoneTextTitle1Style</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="10">TextBlock</pc> styles.</source>
            <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanel</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="4">StackPanel</pc>, delete the references to the <pc dataRefEnd="id6" dataRefStart="id5" id="6">PhoneTextNormalStyle</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="8">PhoneTextTitle1Style</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="10">TextBlock</pc> styles.</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">Let's work on the UI for the mobile device family first, and we can consider other form factors after that.</source>
            <target xml:space="preserve">Let's work on the UI for the mobile device family first, and we can consider other form factors after that.</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">You can build and run the app now.</source>
            <target xml:space="preserve">You can build and run the app now.</target>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source xml:space="preserve">Here's how it looks on the mobile emulator.</source>
            <target xml:space="preserve">Here's how it looks on the mobile emulator.</target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the uwp app on mobile with initial source code changes</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the uwp app on mobile with initial source code changes</pc>
						</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">The view and the view model are working together correctly, and the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> is functioning.</source>
            <target xml:space="preserve">The view and the view model are working together correctly, and the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> is functioning.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">We mostly just need to fix the styling and get the images to show up.</source>
            <target xml:space="preserve">We mostly just need to fix the styling and get the images to show up.</target>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source xml:space="preserve">Paying off the debt items, and some initial styling</source>
            <target xml:space="preserve">Paying off the debt items, and some initial styling</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">By default, all orientations are supported.</source>
            <target xml:space="preserve">By default, all orientations are supported.</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">The Windows Phone Silverlight app explicitly constrains itself to portrait-only, though, so debt items \#1 and \#2 are paid off by going into the app package manifest in the new project and checking <pc dataRefEnd="id2" dataRefStart="id1" id="2">Portrait</pc> under <pc dataRefEnd="id4" dataRefStart="id3" id="4">Supported orientations</pc>.</source>
            <target xml:space="preserve">The Windows Phone Silverlight app explicitly constrains itself to portrait-only, though, so debt items \#1 and \#2 are paid off by going into the app package manifest in the new project and checking <pc dataRefEnd="id2" dataRefStart="id1" id="2">Portrait</pc> under <pc dataRefEnd="id4" dataRefStart="id3" id="4">Supported orientations</pc>.</target>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source xml:space="preserve">For this app, item \#3 is not a debt since the status bar (formerly called the system tray) is shown by default.</source>
            <target xml:space="preserve">For this app, item \#3 is not a debt since the status bar (formerly called the system tray) is shown by default.</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">For items \#4 and \#5, we need to find four Universal Windows Platform (UWP) <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> styles that correspond to the Windows Phone Silverlight styles that we were using.</source>
            <target xml:space="preserve">For items \#4 and \#5, we need to find four Universal Windows Platform (UWP) <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> styles that correspond to the Windows Phone Silverlight styles that we were using.</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">You can run the Windows Phone Silverlight app in the emulator and compare it side-by-side with the illustration in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Text</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> section.</source>
            <target xml:space="preserve">You can run the Windows Phone Silverlight app in the emulator and compare it side-by-side with the illustration in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Text</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> section.</target>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source xml:space="preserve">From doing that, and from looking at the properties of the Windows Phone Silverlight system styles, we can make this table.</source>
            <target xml:space="preserve">From doing that, and from looking at the properties of the Windows Phone Silverlight system styles, we can make this table.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">Windows Phone Silverlight style key</source>
            <target xml:space="preserve">Windows Phone Silverlight style key</target>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source xml:space="preserve">UWP style key</source>
            <target xml:space="preserve">UWP style key</target>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source xml:space="preserve">PhoneTextExtraLargeStyle</source>
            <target xml:space="preserve">PhoneTextExtraLargeStyle</target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">TitleTextBlockStyle</source>
            <target xml:space="preserve">TitleTextBlockStyle</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">PhoneTextSubtleStyle</source>
            <target xml:space="preserve">PhoneTextSubtleStyle</target>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source xml:space="preserve">SubtitleTextBlockStyle</source>
            <target xml:space="preserve">SubtitleTextBlockStyle</target>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source xml:space="preserve">PhoneTextNormalStyle</source>
            <target xml:space="preserve">PhoneTextNormalStyle</target>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source xml:space="preserve">CaptionTextBlockStyle</source>
            <target xml:space="preserve">CaptionTextBlockStyle</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">PhoneTextTitle1Style</source>
            <target xml:space="preserve">PhoneTextTitle1Style</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">HeaderTextBlockStyle</source>
            <target xml:space="preserve">HeaderTextBlockStyle</target>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source xml:space="preserve">To set those styles, you can just type them into the markup editor or you can use the Visual Studio XAML Tools and set them without typing a thing.</source>
            <target xml:space="preserve">To set those styles, you can just type them into the markup editor or you can use the Visual Studio XAML Tools and set them without typing a thing.</target>
          </segment>
        </unit>
        <unit id="180">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="180">
            <source xml:space="preserve">To do that, you right-click a <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Edit Style</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Apply Resource</pc>.</source>
            <target xml:space="preserve">To do that, you right-click a <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="4">Edit Style</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Apply Resource</pc>.</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">To do that with the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc>s in the item template, right click the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListBox</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Edit Additional Templates</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">Edit Generated Items (ItemTemplate)</pc>.</source>
            <target xml:space="preserve">To do that with the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc>s in the item template, right click the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListBox</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Edit Additional Templates</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">Edit Generated Items (ItemTemplate)</pc>.</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">There is an 80% opaque white background behind the items, because the default style of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> control sets its background to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListBoxBackgroundThemeBrush</pc> system resource.</source>
            <target xml:space="preserve">There is an 80% opaque white background behind the items, because the default style of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> control sets its background to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListBoxBackgroundThemeBrush</pc> system resource.</target>
          </segment>
        </unit>
        <unit id="183">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="183">
            <source xml:space="preserve">Set <pc dataRefEnd="id2" dataRefStart="id1" id="2">Background="Transparent"</pc> on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListBox</pc> to clear that background.</source>
            <target xml:space="preserve">Set <pc dataRefEnd="id2" dataRefStart="id1" id="2">Background="Transparent"</pc> on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListBox</pc> to clear that background.</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">To left-align the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc>s in the item template, edit it again the same way as described above and set a <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> of <pc dataRefEnd="id6" dataRefStart="id5" id="6">"9.6,0"</pc> on both <pc dataRefEnd="id8" dataRefStart="id7" id="8">TextBlock</pc>s.</source>
            <target xml:space="preserve">To left-align the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc>s in the item template, edit it again the same way as described above and set a <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> of <pc dataRefEnd="id6" dataRefStart="id5" id="6">"9.6,0"</pc> on both <pc dataRefEnd="id8" dataRefStart="id7" id="8">TextBlock</pc>s.</target>
          </segment>
        </unit>
        <unit id="185">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="185">
            <source xml:space="preserve">After that is done, because of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">changes related to view pixels</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, we need to go through and multiply any fixed size dimension that we haven’t yet changed (margins, width, height, etc) by 0.8.</source>
            <target xml:space="preserve">After that is done, because of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">changes related to view pixels</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, we need to go through and multiply any fixed size dimension that we haven’t yet changed (margins, width, height, etc) by 0.8.</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">So, for example, the images should change from 70x70px to 56x56px.</source>
            <target xml:space="preserve">So, for example, the images should change from 70x70px to 56x56px.</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">But, let’s get those images to render before we show the results of our styling.</source>
            <target xml:space="preserve">But, let’s get those images to render before we show the results of our styling.</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">Binding an Image to a view model</source>
            <target xml:space="preserve">Binding an Image to a view model</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">In Bookstore1WPSL8, we did this:</source>
            <target xml:space="preserve">In Bookstore1WPSL8, we did this:</target>
          </segment>
        </unit>
        <unit id="190">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="190">
            <source xml:space="preserve">In Bookstore1Universal, we use the ms-appx <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">URI scheme</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">In Bookstore1Universal, we use the ms-appx <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">URI scheme</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">So that we can keep the rest of our code the same, we can use a different overload of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">System.Uri</pc> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.</source>
            <target xml:space="preserve">So that we can keep the rest of our code the same, we can use a different overload of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">System.Uri</pc> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.</target>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source xml:space="preserve">Like this:</source>
            <target xml:space="preserve">Like this:</target>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source xml:space="preserve">Universal styling</source>
            <target xml:space="preserve">Universal styling</target>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source xml:space="preserve">Now, we just need to make some final styling tweaks and confirm that the app looks good on desktop (and other) form factors as well as mobile.</source>
            <target xml:space="preserve">Now, we just need to make some final styling tweaks and confirm that the app looks good on desktop (and other) form factors as well as mobile.</target>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source xml:space="preserve">The steps are below.</source>
            <target xml:space="preserve">The steps are below.</target>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source xml:space="preserve">And you can use the links at the top of this topic to download the projects and see the results of all the changes between here and the end of the case study.</source>
            <target xml:space="preserve">And you can use the links at the top of this topic to download the projects and see the results of all the changes between here and the end of the case study.</target>
          </segment>
        </unit>
        <unit id="197">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="197">
            <source xml:space="preserve">To tighten up the spacing between items, find the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc> data template in MainPage.xaml and delete the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> attribute from the root <pc dataRefEnd="id6" dataRefStart="id5" id="6">Grid</pc>.</source>
            <target xml:space="preserve">To tighten up the spacing between items, find the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc> data template in MainPage.xaml and delete the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> attribute from the root <pc dataRefEnd="id6" dataRefStart="id5" id="6">Grid</pc>.</target>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source xml:space="preserve">If you want to give the page title a little more breathing room, you can reset the bottom margin of <pc dataRefEnd="id2" dataRefStart="id1" id="2">-5.6</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">0</pc> on the page title <pc dataRefEnd="id6" dataRefStart="id5" id="6">TextBlock</pc>.</source>
            <target xml:space="preserve">If you want to give the page title a little more breathing room, you can reset the bottom margin of <pc dataRefEnd="id2" dataRefStart="id1" id="2">-5.6</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">0</pc> on the page title <pc dataRefEnd="id6" dataRefStart="id5" id="6">TextBlock</pc>.</target>
          </segment>
        </unit>
        <unit id="199">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="199">
            <source xml:space="preserve">Now, we need to set <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>'s Background to the correct default value so that the app looks appropriate when running on all devices no matter what the theme is.</source>
            <target xml:space="preserve">Now, we need to set <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>'s Background to the correct default value so that the app looks appropriate when running on all devices no matter what the theme is.</target>
          </segment>
        </unit>
        <unit id="200">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="200">
            <source xml:space="preserve">Change it from <pc dataRefEnd="id2" dataRefStart="id1" id="2">"Transparent"</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">"{ThemeResource ApplicationPageBackgroundThemeBrush}"</pc>.</source>
            <target xml:space="preserve">Change it from <pc dataRefEnd="id2" dataRefStart="id1" id="2">"Transparent"</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">"{ThemeResource ApplicationPageBackgroundThemeBrush}"</pc>.</target>
          </segment>
        </unit>
        <unit id="201">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="201">
            <source xml:space="preserve">With a more sophisticated app, this would be the point at which we'd use the guidance in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Porting for form factor and user experience</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and really make optimal use of the form factor of each of the many devices the app can now run on.</source>
            <target xml:space="preserve">With a more sophisticated app, this would be the point at which we'd use the guidance in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Porting for form factor and user experience</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and really make optimal use of the form factor of each of the many devices the app can now run on.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">But, for this simple app, we can stop here and see how the app looks after that last sequence of styling operations.</source>
            <target xml:space="preserve">But, for this simple app, we can stop here and see how the app looks after that last sequence of styling operations.</target>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source xml:space="preserve">It actually looks the same on mobile and desktop devices, although it's not making best use of space on wide form factors (but we'll investigate how to do that in a later case study).</source>
            <target xml:space="preserve">It actually looks the same on mobile and desktop devices, although it's not making best use of space on wide form factors (but we'll investigate how to do that in a later case study).</target>
          </segment>
        </unit>
        <unit id="204">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="204">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Theme changes</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to see how to control the theme of your app.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Theme changes</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to see how to control the theme of your app.</target>
          </segment>
        </unit>
        <unit id="205">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="205">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app</pc>
						</target>
          </segment>
        </unit>
        <unit id="206">
          <segment state="initial" id="206">
            <source xml:space="preserve">The ported Windows 10 app running on a Mobile device</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Mobile device</target>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source xml:space="preserve">An optional adjustment to the list box for Mobile devices</source>
            <target xml:space="preserve">An optional adjustment to the list box for Mobile devices</target>
          </segment>
        </unit>
        <unit id="208">
          <segment state="initial" id="208">
            <source xml:space="preserve">When the app is running on a Mobile device, the background of a list box is light by default in both themes.</source>
            <target xml:space="preserve">When the app is running on a Mobile device, the background of a list box is light by default in both themes.</target>
          </segment>
        </unit>
        <unit id="209">
          <segment state="initial" id="209">
            <source xml:space="preserve">That may be the style that you prefer and, if so, then there's nothing more to do.</source>
            <target xml:space="preserve">That may be the style that you prefer and, if so, then there's nothing more to do.</target>
          </segment>
        </unit>
        <unit id="210">
          <segment state="initial" id="210">
            <source xml:space="preserve">But, controls are designed so that you can customize their look while leaving their behavior unaffected.</source>
            <target xml:space="preserve">But, controls are designed so that you can customize their look while leaving their behavior unaffected.</target>
          </segment>
        </unit>
        <unit id="211">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="211">
            <source xml:space="preserve">So, if you want the list box to be dark in the dark theme—the way the original app looked—then follow <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">these instructions</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">So, if you want the list box to be dark in the dark theme—the way the original app looked—then follow <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">these instructions</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="212">
          <segment state="initial" id="212">
            <source xml:space="preserve">Conclusion</source>
            <target xml:space="preserve">Conclusion</target>
          </segment>
        </unit>
        <unit id="213">
          <segment state="initial" id="213">
            <source xml:space="preserve">This case study showed the process of porting a very simple app—arguably an unrealistically simple one.</source>
            <target xml:space="preserve">This case study showed the process of porting a very simple app—arguably an unrealistically simple one.</target>
          </segment>
        </unit>
        <unit id="214">
          <segment state="initial" id="214">
            <source xml:space="preserve">For instance, list controls can be used for selection or for establishing a context for navigation; the app navigates to a page with more details about the item that was tapped.</source>
            <target xml:space="preserve">For instance, list controls can be used for selection or for establishing a context for navigation; the app navigates to a page with more details about the item that was tapped.</target>
          </segment>
        </unit>
        <unit id="215">
          <segment state="initial" id="215">
            <source xml:space="preserve">This particular app does nothing with the user's selection, and it has no navigation.</source>
            <target xml:space="preserve">This particular app does nothing with the user's selection, and it has no navigation.</target>
          </segment>
        </unit>
        <unit id="216">
          <segment state="initial" id="216">
            <source xml:space="preserve">Even so, the case study served to break the ice, to introduce the porting process, and to demonstrate important techniques that you can use in real UWP apps.</source>
            <target xml:space="preserve">Even so, the case study served to break the ice, to introduce the porting process, and to demonstrate important techniques that you can use in real UWP apps.</target>
          </segment>
        </unit>
        <unit id="217">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="217">
            <source xml:space="preserve">The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, in which we look at accessing and displaying grouped data.</source>
            <target xml:space="preserve">The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, in which we look at accessing and displaying grouped data.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>