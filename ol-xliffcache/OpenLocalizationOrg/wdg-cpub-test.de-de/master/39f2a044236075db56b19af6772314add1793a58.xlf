<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">39f2a044236075db56b19af6772314add1793a58</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Windows Runtime 8.x to UWP case study: Bookstore2</source>
            <target xml:space="preserve">Windows Runtime 8.x to UWP case study: Bookstore2</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source xml:space="preserve">This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>—begins with a Universal 8.1 app that displays grouped data in a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control.</source>
            <target xml:space="preserve">This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>—begins with a Universal 8.1 app that displays grouped data in a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control.</target>
          </segment>
        </unit>
        <unit id="105">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="105">
            <source xml:space="preserve">In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="2">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">SemanticZoom</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
            <target xml:space="preserve">In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="2">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">SemanticZoom</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">The jump list affords much quicker navigation than scrolling through the list of books.</source>
            <target xml:space="preserve">The jump list affords much quicker navigation than scrolling through the list of books.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</source>
            <target xml:space="preserve">We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Downloads</source>
            <target xml:space="preserve">Downloads</target>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore2\_81 Universal 8.1 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore2\_81 Universal 8.1 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore2Universal\_10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore2Universal\_10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">The Universal 8.1 app</source>
            <target xml:space="preserve">The Universal 8.1 app</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Here’s what Bookstore2\_81—the app that we're going to port—looks like.</source>
            <target xml:space="preserve">Here’s what Bookstore2\_81—the app that we're going to port—looks like.</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">It's a horizontally-scrolling (vertically-scrolling on Windows Phone) <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> showing books grouped by author.</source>
            <target xml:space="preserve">It's a horizontally-scrolling (vertically-scrolling on Windows Phone) <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> showing books grouped by author.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">You can zoom out to the jump list and from there you can navigate back into any group.</source>
            <target xml:space="preserve">You can zoom out to the jump list and from there you can navigate back into any group.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</source>
            <target xml:space="preserve">There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">As we'll see, both of these pieces port easily from WinRT 8.1 technology to Windows 10.</source>
            <target xml:space="preserve">As we'll see, both of these pieces port easily from WinRT 8.1 technology to Windows 10.</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">bookstore2\-81 on windows, zoomed-in view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">bookstore2\-81 on windows, zoomed-in view</pc>
						</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">Bookstore2\_81 on Windows, zoomed-in view</source>
            <target xml:space="preserve">Bookstore2\_81 on Windows, zoomed-in view</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">bookstore2\-81 on windows, zoomed-out view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">bookstore2\-81 on windows, zoomed-out view</pc>
						</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">Bookstore2\_81 on Windows, zoomed-out view</source>
            <target xml:space="preserve">Bookstore2\_81 on Windows, zoomed-out view</target>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">bookstore2\-81 on windows phone, zoomed-in view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">bookstore2\-81 on windows phone, zoomed-in view</pc>
						</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">Bookstore2\_81 on Windows Phone, zoomed-in view</source>
            <target xml:space="preserve">Bookstore2\_81 on Windows Phone, zoomed-in view</target>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">bookstore2\-81 on windows phone, zoomed-out view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">bookstore2\-81 on windows phone, zoomed-out view</pc>
						</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">Bookstore2\_81 on Windows Phone, zoomed-out view</source>
            <target xml:space="preserve">Bookstore2\_81 on Windows Phone, zoomed-out view</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">Porting to a Windows 10 project</source>
            <target xml:space="preserve">Porting to a Windows 10 project</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">The Bookstore2\_81 solution is an 8.1 Universal App project.</source>
            <target xml:space="preserve">The Bookstore2\_81 solution is an 8.1 Universal App project.</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">The Bookstore2\_81.Windows project builds the app package for Windows 8.1, and the Bookstore2\_81.WindowsPhone project builds the app package for Windows Phone 8.1.</source>
            <target xml:space="preserve">The Bookstore2\_81.Windows project builds the app package for Windows 8.1, and the Bookstore2\_81.WindowsPhone project builds the app package for Windows Phone 8.1.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">Bookstore2\_81.Shared is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</source>
            <target xml:space="preserve">Bookstore2\_81.Shared is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">Just like with the previous case study, the option we'll take (of the ones described in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">If you have a Universal 8.1 app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is to port the contents of the Shared project to a Windows 10 that targets the Universal device family.</source>
            <target xml:space="preserve">Just like with the previous case study, the option we'll take (of the ones described in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">If you have a Universal 8.1 app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is to port the contents of the Shared project to a Windows 10 that targets the Universal device family.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">Begin by creating a new Blank Application (Windows Universal) project.</source>
            <target xml:space="preserve">Begin by creating a new Blank Application (Windows Universal) project.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Name it Bookstore2Universal\_10.</source>
            <target xml:space="preserve">Name it Bookstore2Universal\_10.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">These are the files to copy over from Bookstore2\_81 to Bookstore2Universal\_10.</source>
            <target xml:space="preserve">These are the files to copy over from Bookstore2\_81 to Bookstore2Universal\_10.</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">From the Shared project</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">From the Shared project</pc>
						</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
            <target xml:space="preserve">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</source>
            <target xml:space="preserve">After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</source>
            <target xml:space="preserve">Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">That command is what we mean by "including" files or folders in a project.</source>
            <target xml:space="preserve">That command is what we mean by "including" files or folders in a project.</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">Each time you copy a file or folder, each copy, click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc> and then include the file or folder in the project.</source>
            <target xml:space="preserve">Each time you copy a file or folder, each copy, click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc> and then include the file or folder in the project.</target>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source xml:space="preserve">There's no need to do this for files that you're replacing in the destination.</source>
            <target xml:space="preserve">There's no need to do this for files that you're replacing in the destination.</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
            <target xml:space="preserve">Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">Copy MainPage.xaml and replace the file in the destination.</source>
            <target xml:space="preserve">Copy MainPage.xaml and replace the file in the destination.</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">From the Windows project</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">From the Windows project</pc>
						</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">Copy BookstoreStyles.xaml.</source>
            <target xml:space="preserve">Copy BookstoreStyles.xaml.</target>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source xml:space="preserve">We'll use this one as a good starting-point because all the resource keys in this file will resolve in a Windows 10 app; some of those in the equivalent WindowsPhone file will not.</source>
            <target xml:space="preserve">We'll use this one as a good starting-point because all the resource keys in this file will resolve in a Windows 10 app; some of those in the equivalent WindowsPhone file will not.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">Copy SeZoUC.xaml and SeZoUC.xaml.cs.</source>
            <target xml:space="preserve">Copy SeZoUC.xaml and SeZoUC.xaml.cs.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">We'll start with the Windows version of this view, which is appropriate for wide windows, and then later we'll make it adapt to smaller windows and, consequently, smaller devices.</source>
            <target xml:space="preserve">We'll start with the Windows version of this view, which is appropriate for wide windows, and then later we'll make it adapt to smaller windows and, consequently, smaller devices.</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">Edit the source code and markup files that you just copied and change any references to the Bookstore2\_81 namespace to Bookstore2Universal\_10.</source>
            <target xml:space="preserve">Edit the source code and markup files that you just copied and change any references to the Bookstore2\_81 namespace to Bookstore2Universal\_10.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature.</source>
            <target xml:space="preserve">A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">No code changes are needed in the view model, nor in any other imperative code.</source>
            <target xml:space="preserve">No code changes are needed in the view model, nor in any other imperative code.</target>
          </segment>
        </unit>
        <unit id="151">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="151">
            <source xml:space="preserve">But, just to make it easier to see which version of the app is running, change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Bookstore2Universal\_10.BookstoreViewModel.AppName</pc> property from "Bookstore2\_81" to "BOOKSTORE2UNIVERSAL\_10".</source>
            <target xml:space="preserve">But, just to make it easier to see which version of the app is running, change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Bookstore2Universal\_10.BookstoreViewModel.AppName</pc> property from "Bookstore2\_81" to "BOOKSTORE2UNIVERSAL\_10".</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">Right now, you can build and run.</source>
            <target xml:space="preserve">Right now, you can build and run.</target>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source xml:space="preserve">Here's how our new UWP app looks after having done no work yet to port it to Windows 10.</source>
            <target xml:space="preserve">Here's how our new UWP app looks after having done no work yet to port it to Windows 10.</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the windows 10 app with initial source code changes running on a desktop device, zoomed-in view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the windows 10 app with initial source code changes running on a desktop device, zoomed-in view</pc>
						</target>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source xml:space="preserve">The Windows 10 app with initial source code changes running on a Desktop device, zoomed-in view</source>
            <target xml:space="preserve">The Windows 10 app with initial source code changes running on a Desktop device, zoomed-in view</target>
          </segment>
        </unit>
        <unit id="156">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="156">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the windows 10 app with initial source code changes running on a desktop device, zoomed-out view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the windows 10 app with initial source code changes running on a desktop device, zoomed-out view</pc>
						</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">The Windows 10 app with initial source code changes running on a Desktop device, zoomed-out view</source>
            <target xml:space="preserve">The Windows 10 app with initial source code changes running on a Desktop device, zoomed-out view</target>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source xml:space="preserve">The view model and the zoomed-in and zoomed-out views are working together correctly, although there are issues that make that a little hard to see.</source>
            <target xml:space="preserve">The view model and the zoomed-in and zoomed-out views are working together correctly, although there are issues that make that a little hard to see.</target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">One issue is that the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> doesn't scroll.</source>
            <target xml:space="preserve">One issue is that the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> doesn't scroll.</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">This is because, in Windows 10, the default style of a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> causes it to be laid out vertically (and the Windows 10 design guidelines recommend that we use it that way in new and in ported apps).</source>
            <target xml:space="preserve">This is because, in Windows 10, the default style of a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> causes it to be laid out vertically (and the Windows 10 design guidelines recommend that we use it that way in new and in ported apps).</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">But, horizontal scrolling settings in the custom items panel template that we copied from the Bookstore2\_81 project (which was designed for the 8.1 app) are in conflict with vertical scrolling settings in the Windows 10 default style that is being applied as a result of us having ported to a Windows 10 app.</source>
            <target xml:space="preserve">But, horizontal scrolling settings in the custom items panel template that we copied from the Bookstore2\_81 project (which was designed for the 8.1 app) are in conflict with vertical scrolling settings in the Windows 10 default style that is being applied as a result of us having ported to a Windows 10 app.</target>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source xml:space="preserve">A second thing is that the app doesn't yet adapt its user-interface to give the best experience in different-sized windows and on small devices.</source>
            <target xml:space="preserve">A second thing is that the app doesn't yet adapt its user-interface to give the best experience in different-sized windows and on small devices.</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">And, thirdly, the correct styles and brushes are not yet being used, resulting in much of the text being invisible (including the group headers that you can click to zoom out).</source>
            <target xml:space="preserve">And, thirdly, the correct styles and brushes are not yet being used, resulting in much of the text being invisible (including the group headers that you can click to zoom out).</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">So, in the next three sections (<pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">SemanticZoom and GridView design changes</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">Adaptive UI</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">Universal styling</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> we'll remedy those three issues.</source>
            <target xml:space="preserve">So, in the next three sections (<pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">SemanticZoom and GridView design changes</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">Adaptive UI</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">Universal styling</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> we'll remedy those three issues.</target>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source xml:space="preserve">SemanticZoom and GridView design changes</source>
            <target xml:space="preserve">SemanticZoom and GridView design changes</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">The design changes in Windows 10 to the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control are described in the section <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">SemanticZoom changes</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The design changes in Windows 10 to the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control are described in the section <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">SemanticZoom changes</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source xml:space="preserve">We have no work to do in this section in response to those changes.</source>
            <target xml:space="preserve">We have no work to do in this section in response to those changes.</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">The changes to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> are described in the section <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">GridView/ListView changes</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The changes to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> are described in the section <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">GridView/ListView changes</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">We have some very minor adjustments to make to adapt to those changes, as described below.</source>
            <target xml:space="preserve">We have some very minor adjustments to make to adapt to those changes, as described below.</target>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source xml:space="preserve">In SeZoUC.xaml, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedInItemsPanelTemplate</pc>, set <pc dataRefEnd="id4" dataRefStart="id3" id="4">Orientation="Horizontal"</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">GroupPadding="0,0,0,20"</pc>.</source>
            <target xml:space="preserve">In SeZoUC.xaml, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedInItemsPanelTemplate</pc>, set <pc dataRefEnd="id4" dataRefStart="id3" id="4">Orientation="Horizontal"</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">GroupPadding="0,0,0,20"</pc>.</target>
          </segment>
        </unit>
        <unit id="171">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="171">
            <source xml:space="preserve">In SeZoUC.xaml, delete <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedOutItemsPanelTemplate</pc> and remove the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ItemsPanel</pc> attribute from the zoomed-out view.</source>
            <target xml:space="preserve">In SeZoUC.xaml, delete <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedOutItemsPanelTemplate</pc> and remove the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ItemsPanel</pc> attribute from the zoomed-out view.</target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">And that's it!</source>
            <target xml:space="preserve">And that's it!</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">Adaptive UI</source>
            <target xml:space="preserve">Adaptive UI</target>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source xml:space="preserve">After that change, the UI layout that SeZoUC.xaml gives us is great for when the app is running in a wide window (which is only possible on a device with a large screen).</source>
            <target xml:space="preserve">After that change, the UI layout that SeZoUC.xaml gives us is great for when the app is running in a wide window (which is only possible on a device with a large screen).</target>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source xml:space="preserve">When the app's window is narrow, though (which happens on a small device, and can also happen on a large device), the UI that we had in the Windows Phone Store app is arguably most appropriate.</source>
            <target xml:space="preserve">When the app's window is narrow, though (which happens on a small device, and can also happen on a large device), the UI that we had in the Windows Phone Store app is arguably most appropriate.</target>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source xml:space="preserve">We can use the adaptive Visual State Manager feature to achieve this.</source>
            <target xml:space="preserve">We can use the adaptive Visual State Manager feature to achieve this.</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the smaller templates that we were using in the Windows Phone Store app.</source>
            <target xml:space="preserve">We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the smaller templates that we were using in the Windows Phone Store app.</target>
          </segment>
        </unit>
        <unit id="178">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="178">
            <source xml:space="preserve">Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">effective pixels</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</source>
            <target xml:space="preserve">Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">effective pixels</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</target>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source xml:space="preserve">We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</source>
            <target xml:space="preserve">We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</target>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source xml:space="preserve">We're triggering on window width in this case, but it's possible to trigger on window height, too.</source>
            <target xml:space="preserve">We're triggering on window width in this case, but it's possible to trigger on window height, too.</target>
          </segment>
        </unit>
        <unit id="181">
          <segment state="initial" id="181">
            <source xml:space="preserve">A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</source>
            <target xml:space="preserve">A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</target>
          </segment>
        </unit>
        <unit id="182">
          <segment state="initial" id="182">
            <source xml:space="preserve">Phones are typically smaller than 548 epx so on a small device like that we'd remain in the default narrow layout.</source>
            <target xml:space="preserve">Phones are typically smaller than 548 epx so on a small device like that we'd remain in the default narrow layout.</target>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source xml:space="preserve">On a PC, the window will launch by default wide enough to trigger the switch to the wide state.</source>
            <target xml:space="preserve">On a PC, the window will launch by default wide enough to trigger the switch to the wide state.</target>
          </segment>
        </unit>
        <unit id="184">
          <segment state="initial" id="184">
            <source xml:space="preserve">From there, you'll be able to drag the window narrow enough to display two columns of the 250x250-sized items.</source>
            <target xml:space="preserve">From there, you'll be able to drag the window narrow enough to display two columns of the 250x250-sized items.</target>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source xml:space="preserve">A little narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</source>
            <target xml:space="preserve">A little narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">So, what properties do we need to set—and change—to achieve these two different layouts?</source>
            <target xml:space="preserve">So, what properties do we need to set—and change—to achieve these two different layouts?</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">There are two alternatives and each entails a different approach.</source>
            <target xml:space="preserve">There are two alternatives and each entails a different approach.</target>
          </segment>
        </unit>
        <unit id="188">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="188">
            <source xml:space="preserve">We can put two <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> controls in our markup.</source>
            <target xml:space="preserve">We can put two <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> controls in our markup.</target>
          </segment>
        </unit>
        <unit id="189">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="189">
            <source xml:space="preserve">One would be a copy of the markup that we were using in the Windows Store app (using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> controls inside it), and collapsed by default.</source>
            <target xml:space="preserve">One would be a copy of the markup that we were using in the Windows Store app (using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> controls inside it), and collapsed by default.</target>
          </segment>
        </unit>
        <unit id="190">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="190">
            <source xml:space="preserve">The other would be a copy of the markup that we were using in the Windows Phone Store app (using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> controls inside it), and visible by default.</source>
            <target xml:space="preserve">The other would be a copy of the markup that we were using in the Windows Phone Store app (using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> controls inside it), and visible by default.</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">The visual state would switch the visibility properties of the two <pc dataRefEnd="id2" dataRefStart="id1" id="2">SemanticZoom</pc> controls.</source>
            <target xml:space="preserve">The visual state would switch the visibility properties of the two <pc dataRefEnd="id2" dataRefStart="id1" id="2">SemanticZoom</pc> controls.</target>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source xml:space="preserve">This would require very little effort to achieve but this not, in general, a high-performance technique.</source>
            <target xml:space="preserve">This would require very little effort to achieve but this not, in general, a high-performance technique.</target>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source xml:space="preserve">So, if you use it, you should profile your app and make sure it is still meeting your performance goals.</source>
            <target xml:space="preserve">So, if you use it, you should profile your app and make sure it is still meeting your performance goals.</target>
          </segment>
        </unit>
        <unit id="194">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="194">
            <source xml:space="preserve">We can use a single <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> containing <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> controls.</source>
            <target xml:space="preserve">We can use a single <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> containing <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> controls.</target>
          </segment>
        </unit>
        <unit id="195">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="195">
            <source xml:space="preserve">To achieve our two layouts, in the wide visual state, we would change the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListView</pc> controls, including the templates that are applied to them, to cause them to lay out in the same way as a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> does.</source>
            <target xml:space="preserve">To achieve our two layouts, in the wide visual state, we would change the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListView</pc> controls, including the templates that are applied to them, to cause them to lay out in the same way as a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> does.</target>
          </segment>
        </unit>
        <unit id="196">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="196">
            <source xml:space="preserve">This might perform better, but there are so many small differences between the various styles and templates of <pc dataRefEnd="id2" dataRefStart="id1" id="2">GridView</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListView</pc> and between their various item types that this is the more difficult solution to achieve.</source>
            <target xml:space="preserve">This might perform better, but there are so many small differences between the various styles and templates of <pc dataRefEnd="id2" dataRefStart="id1" id="2">GridView</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListView</pc> and between their various item types that this is the more difficult solution to achieve.</target>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source xml:space="preserve">This solution is also tightly coupled to the way the default styles and templates are designed at this moment in time, giving us a solution that's fragile and sensitive to any future changes to the defaults.</source>
            <target xml:space="preserve">This solution is also tightly coupled to the way the default styles and templates are designed at this moment in time, giving us a solution that's fragile and sensitive to any future changes to the defaults.</target>
          </segment>
        </unit>
        <unit id="198">
          <segment state="initial" id="198">
            <source xml:space="preserve">In this case study, we're going to go with the first alternative.</source>
            <target xml:space="preserve">In this case study, we're going to go with the first alternative.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">But, if you like, you can try the second one and see if that works better for you.</source>
            <target xml:space="preserve">But, if you like, you can try the second one and see if that works better for you.</target>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source xml:space="preserve">Here are the steps to take to implement that first alternative.</source>
            <target xml:space="preserve">Here are the steps to take to implement that first alternative.</target>
          </segment>
        </unit>
        <unit id="201">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="201">
            <source xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> in the markup in your new project, set <pc dataRefEnd="id8" dataRefStart="id7" id="4">x:Name="wideSeZo"</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="6">Visibility="Collapsed"</pc>.</source>
            <target xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> in the markup in your new project, set <pc dataRefEnd="id8" dataRefStart="id7" id="4">x:Name="wideSeZo"</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="6">Visibility="Collapsed"</pc>.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">Go back to the Bookstore2\_81.WindowsPhone project and open SeZoUC.xaml.</source>
            <target xml:space="preserve">Go back to the Bookstore2\_81.WindowsPhone project and open SeZoUC.xaml.</target>
          </segment>
        </unit>
        <unit id="203">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="203">
            <source xml:space="preserve">Copy the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element markup out of that file and paste it immediately after <pc dataRefEnd="id8" dataRefStart="id7" id="4">wideSeZo</pc> in your new project.</source>
            <target xml:space="preserve">Copy the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> element markup out of that file and paste it immediately after <pc dataRefEnd="id8" dataRefStart="id7" id="4">wideSeZo</pc> in your new project.</target>
          </segment>
        </unit>
        <unit id="204">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="204">
            <source xml:space="preserve">Set <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Name="narrowSeZo"</pc> on element that you just pasted.</source>
            <target xml:space="preserve">Set <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Name="narrowSeZo"</pc> on element that you just pasted.</target>
          </segment>
        </unit>
        <unit id="205">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="205">
            <source xml:space="preserve">But <pc dataRefEnd="id2" dataRefStart="id1" id="2">narrowSeZo</pc> needs a couple of styles that we haven't copied yet.</source>
            <target xml:space="preserve">But <pc dataRefEnd="id2" dataRefStart="id1" id="2">narrowSeZo</pc> needs a couple of styles that we haven't copied yet.</target>
          </segment>
        </unit>
        <unit id="206">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="206">
            <source xml:space="preserve">Again in Bookstore2\_81.WindowsPhone, copy the two styles (<pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderContainerStyle</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">ZoomedOutAuthorItemContainerStyle</pc>) out of SeZoUC.xaml and paste them into BookstoreStyles.xaml in your new project.</source>
            <target xml:space="preserve">Again in Bookstore2\_81.WindowsPhone, copy the two styles (<pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderContainerStyle</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">ZoomedOutAuthorItemContainerStyle</pc>) out of SeZoUC.xaml and paste them into BookstoreStyles.xaml in your new project.</target>
          </segment>
        </unit>
        <unit id="207">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="207">
            <source xml:space="preserve">You now have two <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> elements in your new SeZoUC.xaml.</source>
            <target xml:space="preserve">You now have two <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> elements in your new SeZoUC.xaml.</target>
          </segment>
        </unit>
        <unit id="208">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="208">
            <source xml:space="preserve">Wrap those two elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc>.</source>
            <target xml:space="preserve">Wrap those two elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc>.</target>
          </segment>
        </unit>
        <unit id="209">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="209">
            <source xml:space="preserve">In BookstoreStyles.xaml in your new project, append the word <pc dataRefEnd="id2" dataRefStart="id1" id="2">Wide</pc> to these three resource keys (and to their references in SeZoUC.xaml, but only to the references inside <pc dataRefEnd="id4" dataRefStart="id3" id="4">wideSeZo</pc>): <pc dataRefEnd="id6" dataRefStart="id5" id="6">AuthorGroupHeaderTemplate</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="8">ZoomedOutAuthorTemplate</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="10">BookTemplate</pc>.</source>
            <target xml:space="preserve">In BookstoreStyles.xaml in your new project, append the word <pc dataRefEnd="id2" dataRefStart="id1" id="2">Wide</pc> to these three resource keys (and to their references in SeZoUC.xaml, but only to the references inside <pc dataRefEnd="id4" dataRefStart="id3" id="4">wideSeZo</pc>): <pc dataRefEnd="id6" dataRefStart="id5" id="6">AuthorGroupHeaderTemplate</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="8">ZoomedOutAuthorTemplate</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="10">BookTemplate</pc>.</target>
          </segment>
        </unit>
        <unit id="210">
          <segment state="initial" id="210">
            <source xml:space="preserve">In the Bookstore2\_81.WindowsPhone project, open BookstoreStyles.xaml.</source>
            <target xml:space="preserve">In the Bookstore2\_81.WindowsPhone project, open BookstoreStyles.xaml.</target>
          </segment>
        </unit>
        <unit id="211">
          <segment state="initial" id="211">
            <source xml:space="preserve">From this file, copy those same three resources (mentioned above), and the two jump list item converters, and the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives, and paste them all into BookstoreStyles.xaml in your new project.</source>
            <target xml:space="preserve">From this file, copy those same three resources (mentioned above), and the two jump list item converters, and the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives, and paste them all into BookstoreStyles.xaml in your new project.</target>
          </segment>
        </unit>
        <unit id="212">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="212">
            <source xml:space="preserve">Finally, in SeZoUC.xaml in your new project, add the appropriate Visual State Manager markup to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc> that you added above.</source>
            <target xml:space="preserve">Finally, in SeZoUC.xaml in your new project, add the appropriate Visual State Manager markup to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Grid</pc> that you added above.</target>
          </segment>
        </unit>
        <unit id="213">
          <segment state="initial" id="213">
            <source xml:space="preserve">Universal styling</source>
            <target xml:space="preserve">Universal styling</target>
          </segment>
        </unit>
        <unit id="214">
          <segment state="initial" id="214">
            <source xml:space="preserve">Now, let's fix up some styling issues, including one that we introduced above while copying from the old project.</source>
            <target xml:space="preserve">Now, let's fix up some styling issues, including one that we introduced above while copying from the old project.</target>
          </segment>
        </unit>
        <unit id="215">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="215">
            <source xml:space="preserve">In MainPage.xaml, change <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>'s Background to <pc dataRefEnd="id4" dataRefStart="id3" id="4">"{ThemeResource ApplicationPageBackgroundThemeBrush}"</pc>.</source>
            <target xml:space="preserve">In MainPage.xaml, change <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>'s Background to <pc dataRefEnd="id4" dataRefStart="id3" id="4">"{ThemeResource ApplicationPageBackgroundThemeBrush}"</pc>.</target>
          </segment>
        </unit>
        <unit id="216">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="216">
            <source xml:space="preserve">In BookstoreStyles.xaml, set the value of the resource <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanelMargin</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">0</pc> (or whatever value looks good to you).</source>
            <target xml:space="preserve">In BookstoreStyles.xaml, set the value of the resource <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanelMargin</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">0</pc> (or whatever value looks good to you).</target>
          </segment>
        </unit>
        <unit id="217">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="217">
            <source xml:space="preserve">In SeZoUC.xaml, set the Margin of <pc dataRefEnd="id2" dataRefStart="id1" id="2">wideSeZo</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">0</pc> (or whatever value looks good to you).</source>
            <target xml:space="preserve">In SeZoUC.xaml, set the Margin of <pc dataRefEnd="id2" dataRefStart="id1" id="2">wideSeZo</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">0</pc> (or whatever value looks good to you).</target>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source xml:space="preserve">In BookstoreStyles.xaml, remove the Margin attribute from <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplateWide</pc>.</source>
            <target xml:space="preserve">In BookstoreStyles.xaml, remove the Margin attribute from <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplateWide</pc>.</target>
          </segment>
        </unit>
        <unit id="219">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="219">
            <source xml:space="preserve">Remove the FontFamily attribute from <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc> and from <pc dataRefEnd="id4" dataRefStart="id3" id="4">ZoomedOutAuthorTemplate</pc>.</source>
            <target xml:space="preserve">Remove the FontFamily attribute from <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc> and from <pc dataRefEnd="id4" dataRefStart="id3" id="4">ZoomedOutAuthorTemplate</pc>.</target>
          </segment>
        </unit>
        <unit id="220">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="220">
            <source xml:space="preserve">Bookstore2\_81 used the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplateTitleTextBlockStyle</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">BookTemplateAuthorTextBlockStyle</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">PageTitleTextBlockStyle</pc> resource keys as an indirection so that a single key had different implementations in the two apps.</source>
            <target xml:space="preserve">Bookstore2\_81 used the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplateTitleTextBlockStyle</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">BookTemplateAuthorTextBlockStyle</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">PageTitleTextBlockStyle</pc> resource keys as an indirection so that a single key had different implementations in the two apps.</target>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source xml:space="preserve">We don't need that indirection any more; we can just reference system styles directly.</source>
            <target xml:space="preserve">We don't need that indirection any more; we can just reference system styles directly.</target>
          </segment>
        </unit>
        <unit id="222">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="222">
            <source xml:space="preserve">So, replace those references throughout the app with <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitleTextBlockStyle</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">CaptionTextBlockStyle</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">HeaderTextBlockStyle</pc> respectively.</source>
            <target xml:space="preserve">So, replace those references throughout the app with <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitleTextBlockStyle</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">CaptionTextBlockStyle</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">HeaderTextBlockStyle</pc> respectively.</target>
          </segment>
        </unit>
        <unit id="223">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="223">
            <source xml:space="preserve">You can use the Visual Studio <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature to do this quickly and accurately.</source>
            <target xml:space="preserve">You can use the Visual Studio <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature to do this quickly and accurately.</target>
          </segment>
        </unit>
        <unit id="224">
          <segment state="initial" id="224">
            <source xml:space="preserve">You can then delete those three unused resources.</source>
            <target xml:space="preserve">You can then delete those three unused resources.</target>
          </segment>
        </unit>
        <unit id="225">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="225">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc>, replace <pc dataRefEnd="id4" dataRefStart="id3" id="4">PhoneAccentBrush</pc> with <pc dataRefEnd="id6" dataRefStart="id5" id="6">SystemControlBackgroundAccentBrush</pc>, and set <pc dataRefEnd="id8" dataRefStart="id7" id="8">Foreground="White"</pc> on the <pc dataRefEnd="id10" dataRefStart="id9" id="10">TextBlock</pc> so that it looks correct when running on the mobile device family.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc>, replace <pc dataRefEnd="id4" dataRefStart="id3" id="4">PhoneAccentBrush</pc> with <pc dataRefEnd="id6" dataRefStart="id5" id="6">SystemControlBackgroundAccentBrush</pc>, and set <pc dataRefEnd="id8" dataRefStart="id7" id="8">Foreground="White"</pc> on the <pc dataRefEnd="id10" dataRefStart="id9" id="10">TextBlock</pc> so that it looks correct when running on the mobile device family.</target>
          </segment>
        </unit>
        <unit id="226">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="226">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplateWide</pc>, copy the Foreground attribute from the second <pc dataRefEnd="id4" dataRefStart="id3" id="4">TextBlock</pc> to the first.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplateWide</pc>, copy the Foreground attribute from the second <pc dataRefEnd="id4" dataRefStart="id3" id="4">TextBlock</pc> to the first.</target>
          </segment>
        </unit>
        <unit id="227">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="227">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedOutAuthorTemplateWide</pc>, change the reference to <pc dataRefEnd="id4" dataRefStart="id3" id="4">SubheaderTextBlockStyle</pc> (which is now a little too big) to a reference to <pc dataRefEnd="id6" dataRefStart="id5" id="6">SubtitleTextBlockStyle</pc>.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedOutAuthorTemplateWide</pc>, change the reference to <pc dataRefEnd="id4" dataRefStart="id3" id="4">SubheaderTextBlockStyle</pc> (which is now a little too big) to a reference to <pc dataRefEnd="id6" dataRefStart="id5" id="6">SubtitleTextBlockStyle</pc>.</target>
          </segment>
        </unit>
        <unit id="228">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="228">
            <source xml:space="preserve">The zoomed-out view (the jump list) no longer overlays the zoomed-in view in the new platform, so we can remove the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Background</pc> attribute from the zoomed-out view of <pc dataRefEnd="id4" dataRefStart="id3" id="4">narrowSeZo</pc>.</source>
            <target xml:space="preserve">The zoomed-out view (the jump list) no longer overlays the zoomed-in view in the new platform, so we can remove the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Background</pc> attribute from the zoomed-out view of <pc dataRefEnd="id4" dataRefStart="id3" id="4">narrowSeZo</pc>.</target>
          </segment>
        </unit>
        <unit id="229">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="229">
            <source xml:space="preserve">So that all the styles and templates are in one file, move <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedInItemsPanelTemplate</pc> out of SeZoUC.xaml and into BookstoreStyles.xaml.</source>
            <target xml:space="preserve">So that all the styles and templates are in one file, move <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedInItemsPanelTemplate</pc> out of SeZoUC.xaml and into BookstoreStyles.xaml.</target>
          </segment>
        </unit>
        <unit id="230">
          <segment state="initial" id="230">
            <source xml:space="preserve">That last sequence of styling operations leaves the app looking like this.</source>
            <target xml:space="preserve">That last sequence of styling operations leaves the app looking like this.</target>
          </segment>
        </unit>
        <unit id="231">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="231">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</pc>
						</target>
          </segment>
        </unit>
        <unit id="232">
          <segment state="initial" id="232">
            <source xml:space="preserve">The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window</target>
          </segment>
        </unit>
        <unit id="233">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="233">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</pc>
						</target>
          </segment>
        </unit>
        <unit id="234">
          <segment state="initial" id="234">
            <source xml:space="preserve">The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</target>
          </segment>
        </unit>
        <unit id="235">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="235">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a mobile device, zoomed-in view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a mobile device, zoomed-in view</pc>
						</target>
          </segment>
        </unit>
        <unit id="236">
          <segment state="initial" id="236">
            <source xml:space="preserve">The ported Windows 10 app running on a Mobile device, zoomed-in view</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Mobile device, zoomed-in view</target>
          </segment>
        </unit>
        <unit id="237">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="237">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a mobile device, zoomed-out view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a mobile device, zoomed-out view</pc>
						</target>
          </segment>
        </unit>
        <unit id="238">
          <segment state="initial" id="238">
            <source xml:space="preserve">The ported Windows 10 app running on a Mobile device, zoomed-out view</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Mobile device, zoomed-out view</target>
          </segment>
        </unit>
        <unit id="239">
          <segment state="initial" id="239">
            <source xml:space="preserve">Conclusion</source>
            <target xml:space="preserve">Conclusion</target>
          </segment>
        </unit>
        <unit id="240">
          <segment state="initial" id="240">
            <source xml:space="preserve">This case study involved a more ambitious user interface than the previous one.</source>
            <target xml:space="preserve">This case study involved a more ambitious user interface than the previous one.</target>
          </segment>
        </unit>
        <unit id="241">
          <segment state="initial" id="241">
            <source xml:space="preserve">As with the previous case study, this particular view model required no work at all, and our efforts went primarily into refactoring the user interface.</source>
            <target xml:space="preserve">As with the previous case study, this particular view model required no work at all, and our efforts went primarily into refactoring the user interface.</target>
          </segment>
        </unit>
        <unit id="242">
          <segment state="initial" id="242">
            <source xml:space="preserve">Some of the changes were a necessary result of combining two projects into one while still supporting many form factors (in fact, many more than we could before).</source>
            <target xml:space="preserve">Some of the changes were a necessary result of combining two projects into one while still supporting many form factors (in fact, many more than we could before).</target>
          </segment>
        </unit>
        <unit id="243">
          <segment state="initial" id="243">
            <source xml:space="preserve">A few of the changes were to do with changes that have been made to the platform.</source>
            <target xml:space="preserve">A few of the changes were to do with changes that have been made to the platform.</target>
          </segment>
        </unit>
        <unit id="244">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="244">
            <source xml:space="preserve">The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">QuizGame</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, in which we look at accessing and displaying grouped data.</source>
            <target xml:space="preserve">The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">QuizGame</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, in which we look at accessing and displaying grouped data.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>