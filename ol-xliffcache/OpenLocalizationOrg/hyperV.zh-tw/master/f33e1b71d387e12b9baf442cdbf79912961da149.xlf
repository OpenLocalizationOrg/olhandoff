<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">f33e1b71d387e12b9baf442cdbf79912961da149</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source>ms.ContentId: 347fa279-d588-4094-90ec-8c2fc241f5b6</source>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source>title: Manage Windows Server Containers with Docker</source>
          </segment>
        </unit>
        <unit id="103">
          <segment state="initial" id="103">
            <source>Quick Start: Windows Server Containers and Docker</source>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source>This article will walk through the fundamentals of managing windows Server Containers with Docker.</source>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source>Items covered will include creating Windows Server Containers and Windows Server Container Images, removing Windows Server Containers and Container Images and finally deploying an application into a Windows Server Container.</source>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source>The lessons learned in this walkthrough should enable you to begin exploring deployment and management of Windows Server Containers using Docker.</source>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source>Have questions?</source>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source>Ask them on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Windows Containers forum</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="109">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="109">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Note:</pc> Windows Containers created with PowerShell can not currently be managed with Docker and visa versa.</source>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source>To create containers with PowerShell, see  <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Quick Start: Windows Server Containers and PowerShell</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
            <data id="id5">&lt;linkText&gt;</data>
            <data id="id6">&lt;/linkText&gt;</data>
            <data id="id7">&lt;title&gt;</data>
            <data id="id8">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="2">
              </pc> If you want to know more, <pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId2">read the FAQ</pc><pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId3"></pc><pc dataRefEnd="id10" dataRefStart="id9" id="4CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source>Prerequisites</source>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source>In order to complete this walkthrough the following items need to be in place.</source>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source>Windows Server 2016 TP3 or later configured with the Windows Server Container Feature.</source>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source>If you have completed the setup guide, this is the VM that was created in Azure or Hyper-V.</source>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source>This system must be connected to a network and able to access the internet.</source>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id7">&lt;linkText&gt;</data>
            <data id="id8">&lt;/linkText&gt;</data>
            <data id="id9">&lt;title&gt;</data>
            <data id="id10">&lt;/title&gt;</data>
            <data id="id11">&lt;link&gt;</data>
            <data id="id12">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source>If you need to configure the container feature, see the following guides: <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Container Setup in Azure</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId2">Container Setup in Hyper-V</pc><pc dataRefEnd="id10" dataRefStart="id9" id="4CapsExtId3"></pc><pc dataRefEnd="id12" dataRefStart="id11" id="4CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source>Basic Container Management with Docker</source>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source>This first example will walk through the basics of creating and removing Windows Server Containers and Windows Server Container Images with Docker.</source>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source>To begin the walk through, log into your Windows Server Container Host System, you will see a Windows command prompt.</source>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source>Start a PowerShell session by typing <pc dataRefEnd="id2" dataRefStart="id1" id="2">powershell</pc>.</source>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source>You will know that you are in a PowerShell session when the prompt changes from <pc dataRefEnd="id2" dataRefStart="id1" id="2">C:\directory&gt;</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">PS C:\directory&gt;</pc>.</source>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source>This quick start will be focused on Docker commands however some steps such as managing firewall rules and copying files will be run with PowerShell commands.</source>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source>Work through this walkthrough from a PowerShell session.</source>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source>Next make sure that your system has a valid IP Address using <pc dataRefEnd="id2" dataRefStart="id1" id="2">ipconfig</pc> and take note of this address for later use.</source>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source>If you are working from an Azure VM instead of using <pc dataRefEnd="id2" dataRefStart="id1" id="2">ipconfig</pc> you will need to get the public IP address of the Azure Virtual Machine.</source>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source>Step 1 - Create a New Container</source>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source>Before creating a Windows Server Container with Docker you will need the name or ID of an exsisitng Windows Server Container image.</source>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source>To see all images loaded on the container host use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker images</pc> command.</source>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source>Now, use <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker run</pc> To create a new Windows Server Container.</source>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source>This command as seen below will instruct the Docker daemon to create a new container named ‘dockerdemo’ from the image ‘windowsservercore’ and open an interactive (-it) console session (cmd) with the container.</source>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source>When the command completes you will be working in a console session on the container.</source>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source>Working in a container is almost identical to working with Windows installed on a virtual or physical machine.</source>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source>You can run commands such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">ipconfig</pc> to return the IP address of the container, <pc dataRefEnd="id4" dataRefStart="id3" id="4">mkdir</pc> to create a new directory, or <pc dataRefEnd="id6" dataRefStart="id5" id="6">powershell</pc> to start a PowerShell session.</source>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source>Go ahead and make a change to the container such as creating a file or folder.</source>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source>For example, the following command will create a file which contains network configuration data about the container.</source>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source>You can read the contents of the file to ensure the command completed successfully.</source>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source>Notice that the IP address contained in the text file matches that of the container.</source>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source>Now that the container has been modified, run the following to stop the console session placing you back in the console session of the container host.</source>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source>Finally to see a list of containers on the container host use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker ps –a</pc> command.</source>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source>Notice from the output that a container named 'dockerdemo' has been created.</source>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source>Step 2 - Create a New Container Image</source>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source>An image can now be made from this container.</source>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source>This image will behave like a snapshot of the container and can be re-deployed many times.</source>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source>To create a new image run the following.</source>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source>This command instructs the Docker engine to create a new image named 'newcontainerimage' that will include all changes made to the 'deckerdemo' container.</source>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source>To see all images on the host, run <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker images</pc>.</source>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source>Notice that a new image has been created with the name 'newcontainerimage'.</source>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source>Step 3 - Create New Container From Image</source>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source>Now that you have a custom container image, deploy a new container named 'newcontainer' from 'newcontainerimage' and open an interactive shell session with the container.</source>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source>Take a look at the c:\ drive of this new container and notice that the ipconfig.txt file is present.</source>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source>Exit the newly created container to return to the container hosts console session.</source>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source>This exercise has shown that an image taken from a modified container will include all modifications.</source>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source>While the example here was a simple file modification, the same would apply if you were to install software into the container such as a web server.</source>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source>Using these methods, custom images can be created that will deploy application ready containers.</source>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source>Step 4 - Remove Containers and Images</source>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source>To remove a container after it is no longer needed use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker rm</pc> command.</source>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source>The following command will remove the container name 'newcontainer'.</source>
          </segment>
        </unit>
        <unit id="161">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="161">
            <source>To remove container images when they are no longer needed use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker rmi</pc> command.</source>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source>You cannot remove an image if it is referenced by an existing container.</source>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source>The following command removes the container image named 'newcontainerimage'.</source>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source>Host a Web Server in a Container</source>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source>This next example will demonstrate a more practical use case for Windows Server Containers.</source>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source>The steps included in this exercise will guide you through creating a web server container image that can be used for deploying web applications hosted inside of a Windows Server Container.</source>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source>Step 1 - Download Web Server Software</source>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source>Before creating a container image the web server software will need to be downloaded and staged on the container host.</source>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source>We will be using the nginx for Windows software for this example.</source>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc> that this step will require the container host to be connected to the internet.</source>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source>If this step produces a connectivity or name resolution error check the network configuration of the container host.</source>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source>Run the following command on the container host to create the directory structure that will be used for this example.</source>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source>Run this command on the container host to download the nginx software to 'c:\nginx-1.9.3.zip'.</source>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source>Finally the following command will extract the nginx software to 'C:\build\nginx\source'.</source>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source>Step 2 - Create Web Server Image</source>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source>In the previous example, you manually created, updated and captured a container image.</source>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source>This example will demonstrate an automated method for creating container images using a Dockerfile.</source>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source>Dockerfiles contain instructions that the Docker engine uses to build and modify a container, and then commit the container to a container image.</source>
          </segment>
        </unit>
        <unit id="179">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="179">
            <source>For more information on dockerfiles, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Dockerfile reference</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source>Use the following command to create an empty dockerfile.</source>
          </segment>
        </unit>
        <unit id="181">
          <segment state="initial" id="181">
            <source>Open the dockerfile with notepad.</source>
          </segment>
        </unit>
        <unit id="182">
          <segment state="initial" id="182">
            <source>Copy and paste the following text into notepad, save the file and close notepad.</source>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source>At this point the dockerfile will be in 'c:\build\nginx' and the nginx software extracted to 'c:\build\nginx\source'.</source>
          </segment>
        </unit>
        <unit id="184">
          <segment state="initial" id="184">
            <source>You are now ready to build the web server container image based on the instructions in the dockerfile.</source>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source>To do this, run the following command on the container host.</source>
          </segment>
        </unit>
        <unit id="186">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="186">
            <source>This command instructs the docker engine to use the dockerfile located at <pc dataRefEnd="id2" dataRefStart="id1" id="2">C:\build\nginx</pc> to create an image named 'nginx_windows'.</source>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source>The output will look similar to this:</source>
          </segment>
        </unit>
        <unit id="188">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="188">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="189">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="189">
            <source>When completed, take a look at the images on the host using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker images</pc> command.</source>
          </segment>
        </unit>
        <unit id="190">
          <segment state="initial" id="190">
            <source>You should see a new image named 'nginx_windows'.</source>
          </segment>
        </unit>
        <unit id="191">
          <segment state="initial" id="191">
            <source>Step 3 – Configure Networking for Container Application</source>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source>Because you will be hosting a website inside of a container a few networking related configurations need to be made.</source>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source>First a firewall rule needs to be created on the container host that will allow access to the website.</source>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source>In this example we will be accessing the site through port 80.</source>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source>Run the following script to create this firewall rule.</source>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source>This script can be copied into the VM.</source>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source>Next if you are working from Azure and have not already created a Virtual Machine endpoint you will need to create one now.</source>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source>For more information on Azure VM Endpoints see this article: <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Set up Azure VM Endpoints</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source>Step 4 - Deploy Web Server Ready Container</source>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source>To deploy a Windows Server Container based off of the 'nginx_windows' container run the following command.</source>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source>This will create a new container named 'nginxcontainer' and start an console session on the container.</source>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source>The –p 80:80 portion of this command creates a port mapping between port 80 on the host to port 80 on the container.</source>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source>Once working inside the container, the nginx web server can be started and web content staged.</source>
          </segment>
        </unit>
        <unit id="204">
          <segment state="initial" id="204">
            <source>To start the nginx web server, change to the nginx installation directory.</source>
          </segment>
        </unit>
        <unit id="205">
          <segment state="initial" id="205">
            <source>Start the nginx web server.</source>
          </segment>
        </unit>
        <unit id="206">
          <segment state="initial" id="206">
            <source>Step 5 – Access the Container Hosted Website</source>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source>With the web server container created, you can now checkout the application hosted in the container.</source>
          </segment>
        </unit>
        <unit id="208">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="208">
            <source>To do so, open up a browser on different machine and enter <pc dataRefEnd="id2" dataRefStart="id1" id="2">http://containerhost-ipaddress</pc>.</source>
          </segment>
        </unit>
        <unit id="209">
          <segment state="initial" id="209">
            <source>Notice here that you will be browsing to the IP Address of the Container Host and not the container itself.</source>
          </segment>
        </unit>
        <unit id="210">
          <segment state="initial" id="210">
            <source>If you are working from an Azure Virtual Machine this will be the public IP address or Cloud Service name.</source>
          </segment>
        </unit>
        <unit id="211">
          <segment state="initial" id="211">
            <source>If everything has been correctly configured, you will see the nginx welcome page.</source>
          </segment>
        </unit>
        <unit id="212">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="212">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="213">
          <segment state="initial" id="213">
            <source>At this point, feel free to update the website.</source>
          </segment>
        </unit>
        <unit id="214">
          <segment state="initial" id="214">
            <source>Copy in your own sample website, or run the following command in the container to replace the nginx welcome page with a ‘Hello World’ web page.</source>
          </segment>
        </unit>
        <unit id="215">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="215">
            <source>After the website has been updated, navigate back to <pc dataRefEnd="id2" dataRefStart="id1" id="2">http://containerhost-ipaddress</pc>.</source>
          </segment>
        </unit>
        <unit id="216">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="216">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="217">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="217">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Note:</pc> If you would like to change the Docker Daemon settings (such as to change the port it listens to, to connect to a container remotely), you will need to edit the file "C:\ProgramData\docker\runDockerDaemon.cmd" in the container, and then you will need to restart the service with PowerShell, using <pc dataRefEnd="id4" dataRefStart="id3" id="3">Restart-Service docker</pc>.</source>
          </segment>
        </unit>
        <unit id="218">
          <segment state="initial" id="218">
            <source>Video Walkthrough</source>
          </segment>
        </unit>
        <unit id="219">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="219">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="2">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="220">
          <segment state="initial" id="220">
            <source>Next Steps</source>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source>Now that you have containers set up and an introduction to the tools, go build your own containerized apps.</source>
          </segment>
        </unit>
        <unit id="222">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="222">
            <source>Remember, this is a <pc dataRefEnd="id2" dataRefStart="id1" id="2">preview</pc> there are bugs and we have a lot of work in progress.</source>
          </segment>
        </unit>
        <unit id="223">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="223">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">This page</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc> contains many of our known issues.</source>
          </segment>
        </unit>
        <unit id="224">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id7">&lt;linkText&gt;</data>
            <data id="id8">&lt;/linkText&gt;</data>
            <data id="id9">&lt;title&gt;</data>
            <data id="id10">&lt;/title&gt;</data>
            <data id="id11">&lt;link&gt;</data>
            <data id="id12">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="224">
            <source>Be aware that there are some known Docker commands that <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">don't work</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc> and some that only <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId2">partially work</pc><pc dataRefEnd="id10" dataRefStart="id9" id="4CapsExtId3"></pc><pc dataRefEnd="id12" dataRefStart="id11" id="4CapsExtId1"></pc></source>
          </segment>
        </unit>
        <unit id="225">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="225">
            <source>We are also monitoring the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">forums</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc> very closely.</source>
          </segment>
        </unit>
        <unit id="226">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="226">
            <source>There are also pre-made samples on <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">GitHub</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="227">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="227">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">Back to Container Home</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="228">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="228">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">Known Issues for Current Release</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc>
            </source>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>