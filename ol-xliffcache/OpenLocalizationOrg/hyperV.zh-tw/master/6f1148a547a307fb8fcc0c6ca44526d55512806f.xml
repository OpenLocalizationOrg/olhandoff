{
  "nodes": [
    {
      "content": "Receive messages with EventProcessorHost",
      "pos": [
        3,
        43
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept> is a .NET class that simplifies receiving events from Event Hubs by managing persistent checkpoints and parallel receives from those Event Hubs.",
      "pos": [
        45,
        212
      ]
    },
    {
      "content": "Using <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>, you can split events across multiple receivers, even when hosted in different nodes.",
      "pos": [
        213,
        327
      ]
    },
    {
      "content": "This example shows how to use <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept> for a single receiver.",
      "pos": [
        328,
        403
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>Scaled out event processing<ept id=\"p1\">][]</ept> sample shows how to use <bpt id=\"p2\">[</bpt>EventProcessorHost<ept id=\"p2\">][]</ept> with multiple receivers.",
      "pos": [
        404,
        511
      ]
    },
    {
      "pos": [
        513,
        596
      ],
      "content": "In order to use <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>, you must have an <bpt id=\"p2\">[</bpt>Azure Storage account<ept id=\"p2\">][]</ept>:"
    },
    {
      "pos": [
        601,
        687
      ],
      "content": "Log on to the <bpt id=\"p1\">[</bpt>Azure classic portal<ept id=\"p1\">][]</ept>, and click <bpt id=\"p2\">**</bpt>NEW<ept id=\"p2\">**</ept> at the bottom of the screen."
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Data Services<ept id=\"p1\">**</ept>, then <bpt id=\"p2\">**</bpt>Storage<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>Quick Create<ept id=\"p3\">**</ept>, and then type a name for your storage account.",
      "pos": [
        692,
        804
      ]
    },
    {
      "content": "Select your desired region, and then click <bpt id=\"p1\">**</bpt>Create Storage Account<ept id=\"p1\">**</ept>.",
      "pos": [
        805,
        875
      ]
    },
    {
      "pos": [
        893,
        972
      ],
      "content": "Click the newly created storage account, and then click <bpt id=\"p1\">**</bpt>Manage Access Keys<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Copy the access key to use later in this tutorial.",
      "pos": [
        991,
        1041
      ]
    },
    {
      "content": "In Visual Studio, create a new Visual C# Desktop App project using the <bpt id=\"p1\">**</bpt>Console  Application<ept id=\"p1\">**</ept> project template.",
      "pos": [
        1046,
        1159
      ]
    },
    {
      "content": "Name the project <bpt id=\"p1\">**</bpt>Receiver<ept id=\"p1\">**</ept>.",
      "pos": [
        1160,
        1190
      ]
    },
    {
      "pos": [
        1208,
        1297
      ],
      "content": "In Solution Explorer, right-click the solution, and then click <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        1303,
        1352
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept> dialog box appears."
    },
    {
      "pos": [
        1357,
        1477
      ],
      "content": "Search for <ph id=\"ph1\">`Microsoft Azure Service Bus Event Hub - EventProcessorHost`</ph>, click <bpt id=\"p1\">**</bpt>Install<ept id=\"p1\">**</ept>, and accept the terms of use."
    },
    {
      "pos": [
        1496,
        1720
      ],
      "content": "This downloads, installs, and adds a reference to the <bpt id=\"p1\">[</bpt>Azure Service Bus Event Hub - EventProcessorHost NuGet package<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>, with all its dependencies."
    },
    {
      "content": "Right-click the <bpt id=\"p1\">**</bpt>Receiver<ept id=\"p1\">**</ept> project, click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Class<ept id=\"p3\">**</ept>.",
      "pos": [
        1725,
        1803
      ]
    },
    {
      "content": "Name the new class <bpt id=\"p1\">**</bpt>SimpleEventProcessor<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept> to create the class.",
      "pos": [
        1804,
        1891
      ]
    },
    {
      "content": "Add the following statements at the top of the SimpleEventProcessor.cs file:",
      "pos": [
        1896,
        1972
      ]
    },
    {
      "content": "Then, substitute the following code for the body of the class:",
      "pos": [
        2101,
        2163
      ]
    },
    {
      "content": "This class will be called by the <bpt id=\"p1\">**</bpt>EventProcessorHost<ept id=\"p1\">**</ept> to process events received from the Event Hub.",
      "pos": [
        3814,
        3916
      ]
    },
    {
      "content": "Note that the <ph id=\"ph1\">`SimpleEventProcessor`</ph> class uses a stopwatch to periodically call the checkpoint method on the <bpt id=\"p1\">**</bpt>EventProcessorHost<ept id=\"p1\">**</ept> context.",
      "pos": [
        3917,
        4058
      ]
    },
    {
      "content": "This ensures that, if the receiver is restarted, it will lose no more than five minutes of processing work.",
      "pos": [
        4059,
        4166
      ]
    },
    {
      "pos": [
        4171,
        4257
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Program<ept id=\"p1\">**</ept> class, add the following <ph id=\"ph1\">`using`</ph> statements at the top of the file:"
    },
    {
      "pos": [
        4387,
        4581
      ],
      "content": "Then, modify the <ph id=\"ph1\">`Main`</ph> method in the <ph id=\"ph2\">`Program`</ph> class as follows, substituting the Event Hub name and connection string, and the storage account and key that you copied in the previous sections:"
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This tutorial uses a single instance of <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>.",
      "pos": [
        5762,
        5838
      ]
    },
    {
      "content": "To increase throughput, it is recommended that you run multiple instances of <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>, as shown in the <bpt id=\"p2\">[</bpt>Scaled out event processing<ept id=\"p2\">][]</ept> sample.",
      "pos": [
        5839,
        5995
      ]
    },
    {
      "content": "In those cases, the various instances automatically coordinate with each other in order to load balance the received events.",
      "pos": [
        5996,
        6120
      ]
    },
    {
      "content": "If you want multiple receivers to each process <bpt id=\"p1\">*</bpt>all<ept id=\"p1\">*</ept> the events, you must use the <bpt id=\"p2\">**</bpt>ConsumerGroup<ept id=\"p2\">**</ept> concept.",
      "pos": [
        6121,
        6229
      ]
    },
    {
      "content": "When receiving events from different machines, it might be useful to specify names for <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept> instances based on the machines (or roles) in which they are deployed.",
      "pos": [
        6230,
        6410
      ]
    },
    {
      "content": "For more information about these topics, see the <bpt id=\"p1\">[</bpt>Event Hubs Overview<ept id=\"p1\">][]</ept> and <bpt id=\"p2\">[</bpt>Event Hubs Programming Guide<ept id=\"p2\">][]</ept> topics.",
      "pos": [
        6411,
        6528
      ]
    }
  ],
  "content": "## Receive messages with EventProcessorHost\n\n[EventProcessorHost][] is a .NET class that simplifies receiving events from Event Hubs by managing persistent checkpoints and parallel receives from those Event Hubs. Using [EventProcessorHost][], you can split events across multiple receivers, even when hosted in different nodes. This example shows how to use [EventProcessorHost][] for a single receiver. The [Scaled out event processing][] sample shows how to use [EventProcessorHost][] with multiple receivers.\n\nIn order to use [EventProcessorHost][], you must have an [Azure Storage account][]:\n\n1. Log on to the [Azure classic portal][], and click **NEW** at the bottom of the screen.\n\n2. Click **Data Services**, then **Storage**, then **Quick Create**, and then type a name for your storage account. Select your desired region, and then click **Create Storage Account**.\n\n    ![][11]\n\n3. Click the newly created storage account, and then click **Manage Access Keys**:\n\n    ![][12]\n\n    Copy the access key to use later in this tutorial.\n\n4. In Visual Studio, create a new Visual C# Desktop App project using the **Console  Application** project template. Name the project **Receiver**.\n\n    ![][14]\n\n5. In Solution Explorer, right-click the solution, and then click **Manage NuGet Packages**.\n\n    The **Manage NuGet Packages** dialog box appears.\n\n6. Search for `Microsoft Azure Service Bus Event Hub - EventProcessorHost`, click **Install**, and accept the terms of use.\n\n    ![][13]\n\n    This downloads, installs, and adds a reference to the [Azure Service Bus Event Hub - EventProcessorHost NuGet package](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost), with all its dependencies.\n\n7. Right-click the **Receiver** project, click **Add**, and then click **Class**. Name the new class **SimpleEventProcessor**, and then click **OK** to create the class.\n\n8. Add the following statements at the top of the SimpleEventProcessor.cs file:\n\n    ```\n    using Microsoft.ServiceBus.Messaging;\n    using System.Diagnostics;\n    using System.Threading.Tasks;\n    ```\n\n    Then, substitute the following code for the body of the class:\n\n    ```\n    class SimpleEventProcessor : IEventProcessor\n    {\n        Stopwatch checkpointStopWatch;\n\n        async Task IEventProcessor.CloseAsync(PartitionContext context, CloseReason reason)\n        {\n            Console.WriteLine(\"Processor Shutting Down. Partition '{0}', Reason: '{1}'.\", context.Lease.PartitionId, reason);\n            if (reason == CloseReason.Shutdown)\n            {\n                await context.CheckpointAsync();\n            }\n        }\n\n        Task IEventProcessor.OpenAsync(PartitionContext context)\n        {\n            Console.WriteLine(\"SimpleEventProcessor initialized.  Partition: '{0}', Offset: '{1}'\", context.Lease.PartitionId, context.Lease.Offset);\n            this.checkpointStopWatch = new Stopwatch();\n            this.checkpointStopWatch.Start();\n            return Task.FromResult<object>(null);\n        }\n\n        async Task IEventProcessor.ProcessEventsAsync(PartitionContext context, IEnumerable<EventData> messages)\n        {\n            foreach (EventData eventData in messages)\n            {\n                string data = Encoding.UTF8.GetString(eventData.GetBytes());\n\n                Console.WriteLine(string.Format(\"Message received.  Partition: '{0}', Data: '{1}'\",\n                    context.Lease.PartitionId, data));\n            }\n\n            //Call checkpoint every 5 minutes, so that worker can resume processing from 5 minutes back if it restarts.\n            if (this.checkpointStopWatch.Elapsed > TimeSpan.FromMinutes(5))\n            {\n                await context.CheckpointAsync();\n                this.checkpointStopWatch.Restart();\n            }\n        }\n    }\n    ````\n\n    This class will be called by the **EventProcessorHost** to process events received from the Event Hub. Note that the `SimpleEventProcessor` class uses a stopwatch to periodically call the checkpoint method on the **EventProcessorHost** context. This ensures that, if the receiver is restarted, it will lose no more than five minutes of processing work.\n\n9. In the **Program** class, add the following `using` statements at the top of the file:\n\n    ```\n    using Microsoft.ServiceBus.Messaging;\n    using Microsoft.Threading;\n    using System.Threading.Tasks;\n    ```\n\n    Then, modify the `Main` method in the `Program` class as follows, substituting the Event Hub name and connection string, and the storage account and key that you copied in the previous sections:\n\n    ```\n    static void Main(string[] args)\n    {\n      string eventHubConnectionString = \"{event hub connection string}\";\n      string eventHubName = \"{event hub name}\";\n      string storageAccountName = \"{storage account name}\";\n      string storageAccountKey = \"{storage account key}\";\n      string storageConnectionString = string.Format(\"DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}\", storageAccountName, storageAccountKey);\n\n      string eventProcessorHostName = Guid.NewGuid().ToString();\n      EventProcessorHost eventProcessorHost = new EventProcessorHost(eventProcessorHostName, eventHubName, EventHubConsumerGroup.DefaultGroupName, eventHubConnectionString, storageConnectionString);\n      Console.WriteLine(\"Registering EventProcessor...\");\n      var options = new EventProcessorOptions();\n      options.ExceptionReceived += (sender, e) => { Console.WriteLine(e.Exception); };\n      eventProcessorHost.RegisterEventProcessorAsync<SimpleEventProcessor>(options).Wait();\n\n      Console.WriteLine(\"Receiving. Press enter key to stop worker.\");\n      Console.ReadLine();\n      eventProcessorHost.UnregisterEventProcessorAsync().Wait();\n    }\n    ````\n\n> [AZURE.NOTE] This tutorial uses a single instance of [EventProcessorHost][]. To increase throughput, it is recommended that you run multiple instances of [EventProcessorHost][], as shown in the [Scaled out event processing][] sample. In those cases, the various instances automatically coordinate with each other in order to load balance the received events. If you want multiple receivers to each process *all* the events, you must use the **ConsumerGroup** concept. When receiving events from different machines, it might be useful to specify names for [EventProcessorHost][] instances based on the machines (or roles) in which they are deployed. For more information about these topics, see the [Event Hubs Overview][] and [Event Hubs Programming Guide][] topics.\n\n<!-- Links -->\n[Event Hubs Overview]: event-hubs-overview.md\n[Event Hubs Programming Guide]: event-hubs-programming-guide.md\n[Scaled out event processing]: https://code.msdn.microsoft.com/Service-Bus-Event-Hub-45f43fc3\n[Azure Storage account]: ../storage/storage-create-storage-account.md\n[EventProcessorHost]: http://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.eventprocessorhost(v=azure.95).aspx\n[Azure classic portal]: http://manage.windowsazure.com\n\n<!-- Images -->\n\n[11]: ./media/service-bus-event-hubs-getstarted/create-eph-csharp2.png\n[12]: ./media/service-bus-event-hubs-getstarted/create-eph-csharp3.png\n[13]: ./media/service-bus-event-hubs-getstarted/create-eph-csharp1.png\n[14]: ./media/service-bus-event-hubs-getstarted/create-sender-csharp1.png\n\n"
}