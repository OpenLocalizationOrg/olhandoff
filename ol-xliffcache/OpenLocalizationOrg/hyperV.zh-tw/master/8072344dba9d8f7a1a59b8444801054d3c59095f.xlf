<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">8072344dba9d8f7a1a59b8444801054d3c59095f</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="main">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.ContentId: d0a07897-5fd2-41a5-856d-dc8b499c6783</source>
          <target xml:space="preserve">ms.ContentId: d0a07897-5fd2-41a5-856d-dc8b499c6783</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Manage Windows Server Containers with PowerShell</source>
          <target xml:space="preserve">title: Manage Windows Server Containers with PowerShell</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">Quick Start: Windows Server Containers and PowerShell</source>
          <target xml:space="preserve">Quick Start: Windows Server Containers and PowerShell</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">This article will walk through the fundamentals of managing Windows Server Containers with PowerShell.</source>
          <target xml:space="preserve">This article will walk through the fundamentals of managing Windows Server Containers with PowerShell.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">Items covered will include creating Windows Server Containers and Windows Server Container Images, removing Windows Server Containers and Container Images and finally deploying an application into a Windows Server Container.</source>
          <target xml:space="preserve">Items covered will include creating Windows Server Containers and Windows Server Container Images, removing Windows Server Containers and Container Images and finally deploying an application into a Windows Server Container.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">The lessons learned in this walkthrough should enable you to begin exploring deployment and management of Windows Server Containers using PowerShell.</source>
          <target xml:space="preserve">The lessons learned in this walkthrough should enable you to begin exploring deployment and management of Windows Server Containers using PowerShell.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Have questions?</source>
          <target xml:space="preserve">Have questions?</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://social.msdn.microsoft.com/Forums/en-US/home?forum=windowscontainers)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Ask them on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Containers forum</pc>.</source>
          <target xml:space="preserve">Ask them on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Containers forum</pc>.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc> Windows Server Containers created with PowerShell can not currently be managed with Docker and visa versa.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc> Windows Server Containers created with PowerShell can not currently be managed with Docker and visa versa.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./manage_docker.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create containers with Docker instead, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quick Start: Windows Server Containers and Docker</pc>.</source>
          <target xml:space="preserve">To create containers with Docker instead, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quick Start: Windows Server Containers and Docker</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">&lt;br /&gt;</data>
          <data id="id2">&lt;br /&gt;</data>
          <data id="id3">[</data>
          <data id="id4">](../about/faq.md#WhydoIhavetopickbetweenDockerandPowerShellforWindowsServerContainermanagement)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" /> If you want to know more, <pc dataRefEnd="id4" dataRefStart="id3" id="p1">read the FAQ</pc>.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" /> If you want to know more, <pc dataRefEnd="id4" dataRefStart="id3" id="p1">read the FAQ</pc>.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Prerequisites</source>
          <target xml:space="preserve">Prerequisites</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">In order to complete this walkthrough the following items need to be in place.</source>
          <target xml:space="preserve">In order to complete this walkthrough the following items need to be in place.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Windows Server 2016 TP3 or later configured with the Windows Server Containers Feature.</source>
          <target xml:space="preserve">Windows Server 2016 TP3 or later configured with the Windows Server Containers Feature.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">If you have completed the setup guide, this is the VM that was created in Azure or Hyper-V.</source>
          <target xml:space="preserve">If you have completed the setup guide, this is the VM that was created in Azure or Hyper-V.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">This system must be connected to a network and able to access the internet.</source>
          <target xml:space="preserve">This system must be connected to a network and able to access the internet.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./azure_setup.md)</data>
          <data id="id3">[</data>
          <data id="id4">](./container_setup.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you need to configure the container feature, see the following guides: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Container Setup in Azure</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Container Setup in Hyper-V</pc>.</source>
          <target xml:space="preserve">If you need to configure the container feature, see the following guides: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Container Setup in Azure</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Container Setup in Hyper-V</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Basic Container Management with PowerShell</source>
          <target xml:space="preserve">Basic Container Management with PowerShell</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">This first example will walk through the basics of creating and removing Windows Server Containers and Windows Server Container Images with PowerShell.</source>
          <target xml:space="preserve">This first example will walk through the basics of creating and removing Windows Server Containers and Windows Server Container Images with PowerShell.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">To begin the walk through, log into your Windows Server Container Host System, you will see a Windows command prompt.</source>
          <target xml:space="preserve">To begin the walk through, log into your Windows Server Container Host System, you will see a Windows command prompt.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">`powershell`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Start a PowerShell session by typing <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">Start a PowerShell session by typing <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">`C:\directory&gt;`</data>
          <data id="id2">`PS C:\directory&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You will know that you are in a PowerShell session when the prompt changes from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</source>
          <target xml:space="preserve">You will know that you are in a PowerShell session when the prompt changes from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">`Get-Command`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use <ph dataRef="id1" id="ph1" /> to see the available commands in the containers module</source>
          <target xml:space="preserve">Use <ph dataRef="id1" id="ph1" /> to see the available commands in the containers module</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">`ipconfig`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Next make sure that your system has a valid IP Address using <ph dataRef="id1" id="ph1" /> and take note of this address for later use.</source>
          <target xml:space="preserve">Next make sure that your system has a valid IP Address using <ph dataRef="id1" id="ph1" /> and take note of this address for later use.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">`ipconfig`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you are working from an Azure VM instead of using <ph dataRef="id1" id="ph1" /> you will need to get the public IP address of the Azure Virtual Machine.</source>
          <target xml:space="preserve">If you are working from an Azure VM instead of using <ph dataRef="id1" id="ph1" /> you will need to get the public IP address of the Azure Virtual Machine.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Step 1 - Create a New Container</source>
          <target xml:space="preserve">Step 1 - Create a New Container</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Before creating a Windows Server Container you will need the name of a Container Image and the name of a virtual switch that will be attached to the new container.</source>
          <target xml:space="preserve">Before creating a Windows Server Container you will need the name of a Container Image and the name of a virtual switch that will be attached to the new container.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">`Get-ContainerImage`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use the <ph dataRef="id1" id="ph1" /> command to return a list of container images loaded on the host.</source>
          <target xml:space="preserve">Use the <ph dataRef="id1" id="ph1" /> command to return a list of container images loaded on the host.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">Take note of the image name that you will use to create the container.</source>
          <target xml:space="preserve">Take note of the image name that you will use to create the container.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">`Get-VMSwitch`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use the <ph dataRef="id1" id="ph1" /> command to return a list of switches available on the host.</source>
          <target xml:space="preserve">Use the <ph dataRef="id1" id="ph1" /> command to return a list of switches available on the host.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Take note of the switch name that will be used with the container.</source>
          <target xml:space="preserve">Take note of the switch name that will be used with the container.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Run the following command to create a container.</source>
          <target xml:space="preserve">Run the following command to create a container.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">`New-Container`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When running <ph dataRef="id1" id="ph1" /> you will name the container, specify the container image, and select the network switch to use with the container.</source>
          <target xml:space="preserve">When running <ph dataRef="id1" id="ph1" /> you will name the container, specify the container image, and select the network switch to use with the container.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">Notice in this example that the output is placed in a variable $container.</source>
          <target xml:space="preserve">Notice in this example that the output is placed in a variable $container.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">This will be helpful later in this exercise.</source>
          <target xml:space="preserve">This will be helpful later in this exercise.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">`Get-Container`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To see a list of containers on the host and verify that the container was created, use the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">To see a list of containers on the host and verify that the container was created, use the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Notice that a container has been created with the name of MyContainer, however it has not been started.</source>
          <target xml:space="preserve">Notice that a container has been created with the name of MyContainer, however it has not been started.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">`Start-Container`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To start the container, use <ph dataRef="id1" id="ph1" /> proivding the name of the container.</source>
          <target xml:space="preserve">To start the container, use <ph dataRef="id1" id="ph1" /> proivding the name of the container.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">`Invoke-Command`</data>
          <data id="id2">`Enter-PSSession`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can interact with containers using PowerShell remoting commands such as <ph dataRef="id1" id="ph1" />, or <ph dataRef="id2" id="ph2" />.</source>
          <target xml:space="preserve">You can interact with containers using PowerShell remoting commands such as <ph dataRef="id1" id="ph1" />, or <ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">`Enter-PSSession`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The example below creates a remote PowerShell session into the container using the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">The example below creates a remote PowerShell session into the container using the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">This command needs the container id in order to create the remote session.</source>
          <target xml:space="preserve">This command needs the container id in order to create the remote session.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">`$container`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The container id was stored in the <ph dataRef="id1" id="ph1" /> variable when the container was created.</source>
          <target xml:space="preserve">The container id was stored in the <ph dataRef="id1" id="ph1" /> variable when the container was created.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">`[2446380e-629]`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Notice that once the remote session has been created the command prompt will change to include the first 11 characters of the container id <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">Notice that once the remote session has been created the command prompt will change to include the first 11 characters of the container id <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">A container can be managed very much like a physical or virtual machine.</source>
          <target xml:space="preserve">A container can be managed very much like a physical or virtual machine.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">`ipconfig`</data>
          <data id="id2">`mkdir`</data>
          <data id="id3">`Get-ChildItem`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Command such as <ph dataRef="id1" id="ph1" /> to return the IP address of the container, <ph dataRef="id2" id="ph2" /> to create a directory in the container and PowerShell commands like <ph dataRef="id3" id="ph3" /> all work.</source>
          <target xml:space="preserve">Command such as <ph dataRef="id1" id="ph1" /> to return the IP address of the container, <ph dataRef="id2" id="ph2" /> to create a directory in the container and PowerShell commands like <ph dataRef="id3" id="ph3" /> all work.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">Go ahead and make a change to the container such as creating a file or folder.</source>
          <target xml:space="preserve">Go ahead and make a change to the container such as creating a file or folder.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">For example, the following command will create a file which contains network configuration data about the container.</source>
          <target xml:space="preserve">For example, the following command will create a file which contains network configuration data about the container.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">You can read the contents of the file to ensure the command completed successfully.</source>
          <target xml:space="preserve">You can read the contents of the file to ensure the command completed successfully.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Notice that the IP address contained in the text file matches that of the container.</source>
          <target xml:space="preserve">Notice that the IP address contained in the text file matches that of the container.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Now that the container has been modified, exit the remote PowerShell session.</source>
          <target xml:space="preserve">Now that the container has been modified, exit the remote PowerShell session.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">`Stop-Container`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Stop the container by providing the container name to the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">Stop the container by providing the container name to the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">When this command has completed, you will be back in control of the container host.</source>
          <target xml:space="preserve">When this command has completed, you will be back in control of the container host.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">Step 2 - Create a New Container Image</source>
          <target xml:space="preserve">Step 2 - Create a New Container Image</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">An image can now be made from this container.</source>
          <target xml:space="preserve">An image can now be made from this container.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">This image will behave like a snapshot of the container and can be re-deployed many times.</source>
          <target xml:space="preserve">This image will behave like a snapshot of the container and can be re-deployed many times.</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">`New-ContainerImage`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create a new image named 'newimage' use the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">To create a new image named 'newimage' use the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">When using this command you will specify the container to capture, a name for the new image, and additional metadata as seen below.</source>
          <target xml:space="preserve">When using this command you will specify the container to capture, a name for the new image, and additional metadata as seen below.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">`Get-ContainerImage`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use <ph dataRef="id1" id="ph1" /> to return a list of Container Images.</source>
          <target xml:space="preserve">Use <ph dataRef="id1" id="ph1" /> to return a list of Container Images.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">Notice that a new image with the name 'newimage' has been created.</source>
          <target xml:space="preserve">Notice that a new image with the name 'newimage' has been created.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">Step 3 - Create New Container From Image</source>
          <target xml:space="preserve">Step 3 - Create New Container From Image</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">Now that you have created a customized container image, go ahead and deploy a new container from this image.</source>
          <target xml:space="preserve">Now that you have created a customized container image, go ahead and deploy a new container from this image.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">Create a container named 'newcontainer' from the container image named 'newimage', output the result to a variable named '$newcontainer'.</source>
          <target xml:space="preserve">Create a container named 'newcontainer' from the container image named 'newimage', output the result to a variable named '$newcontainer'.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">Start the new container.</source>
          <target xml:space="preserve">Start the new container.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">Create a remote PowerShell session with the container.</source>
          <target xml:space="preserve">Create a remote PowerShell session with the container.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">Finally notice that this new container contains the ipconfig.txt file created earlier in this exercise.</source>
          <target xml:space="preserve">Finally notice that this new container contains the ipconfig.txt file created earlier in this exercise.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">Once you are done working with this container, exit the remote PowerShell session.</source>
          <target xml:space="preserve">Once you are done working with this container, exit the remote PowerShell session.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">This exercise has shown that an image taken from a modified container will include all modifications.</source>
          <target xml:space="preserve">This exercise has shown that an image taken from a modified container will include all modifications.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">While the example here was a simple file modification, the same would apply if you were to install software into the container such as a web server.</source>
          <target xml:space="preserve">While the example here was a simple file modification, the same would apply if you were to install software into the container such as a web server.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">Using these methods, custom images can be created that will deploy application ready containers.</source>
          <target xml:space="preserve">Using these methods, custom images can be created that will deploy application ready containers.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">Step 4 - Remove Containers and Container Images</source>
          <target xml:space="preserve">Step 4 - Remove Containers and Container Images</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">To stop all running containers run the command below.</source>
          <target xml:space="preserve">To stop all running containers run the command below.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">If any containers are in a stopped state when you run this command, you receive a warning, which is ok.</source>
          <target xml:space="preserve">If any containers are in a stopped state when you run this command, you receive a warning, which is ok.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">Run the following to remove all containers.</source>
          <target xml:space="preserve">Run the following to remove all containers.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">To remove the container image named 'newimage', run the following.</source>
          <target xml:space="preserve">To remove the container image named 'newimage', run the following.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">Host a Web Server in a Container</source>
          <target xml:space="preserve">Host a Web Server in a Container</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">This next example will demonstrate a more practical use case for Windows Server Containers.</source>
          <target xml:space="preserve">This next example will demonstrate a more practical use case for Windows Server Containers.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">The steps included in this exercise will guide you through creating a web server container image that can be used for deploying web applications hosted inside of a Windows Server Container.</source>
          <target xml:space="preserve">The steps included in this exercise will guide you through creating a web server container image that can be used for deploying web applications hosted inside of a Windows Server Container.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">Step 1 – Create Container from the Windows Server Core OS Image</source>
          <target xml:space="preserve">Step 1 – Create Container from the Windows Server Core OS Image</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">To create a web server container image, you first need to deploy and start a container from the Windows Server Core OS image.</source>
          <target xml:space="preserve">To create a web server container image, you first need to deploy and start a container from the Windows Server Core OS image.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Start the container.</source>
          <target xml:space="preserve">Start the container.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">When the container is up, create a remote PowerShell session with the container.</source>
          <target xml:space="preserve">When the container is up, create a remote PowerShell session with the container.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">Step 2 - Install Web Server Software</source>
          <target xml:space="preserve">Step 2 - Install Web Server Software</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">The next step is to install the web server software.</source>
          <target xml:space="preserve">The next step is to install the web server software.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">This example will use nginx for Windows.</source>
          <target xml:space="preserve">This example will use nginx for Windows.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">Use the following commands to automatically download and extract the nginx software to c:\nginx-1.9.3.</source>
          <target xml:space="preserve">Use the following commands to automatically download and extract the nginx software to c:\nginx-1.9.3.</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> that this step will require the container host to be connected to the internet.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> that this step will require the container host to be connected to the internet.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">If this step produces a connectivity or name resolution error check the network configuration of the container host.</source>
          <target xml:space="preserve">If this step produces a connectivity or name resolution error check the network configuration of the container host.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">Download the nginx software.</source>
          <target xml:space="preserve">Download the nginx software.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">Extract the nginx software.</source>
          <target xml:space="preserve">Extract the nginx software.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">This is all that needs to be completed for the nginx software installation.</source>
          <target xml:space="preserve">This is all that needs to be completed for the nginx software installation.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">Exit the remote PowerShell session.</source>
          <target xml:space="preserve">Exit the remote PowerShell session.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">Stop the container using the following command.</source>
          <target xml:space="preserve">Stop the container using the following command.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source xml:space="preserve">Step 3 - Create Image from Web Server Container</source>
          <target xml:space="preserve">Step 3 - Create Image from Web Server Container</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">With the container modified to include the nginx web server software, you can now create an image from this container.</source>
          <target xml:space="preserve">With the container modified to include the nginx web server software, you can now create an image from this container.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">To do so, run the following command:</source>
          <target xml:space="preserve">To do so, run the following command:</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">`Get-ContainerImage`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When completed, use the <ph dataRef="id1" id="ph1" /> command to validate that the image has been created.</source>
          <target xml:space="preserve">When completed, use the <ph dataRef="id1" id="ph1" /> command to validate that the image has been created.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Step 4 - Deploy Web Server Ready Container</source>
          <target xml:space="preserve">Step 4 - Deploy Web Server Ready Container</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">`New-Container`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To deploy a Windows Server Container based off of the 'nginxwindows' image, use the <ph dataRef="id1" id="ph1" /> PowerShell command.</source>
          <target xml:space="preserve">To deploy a Windows Server Container based off of the 'nginxwindows' image, use the <ph dataRef="id1" id="ph1" /> PowerShell command.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">Start the container.</source>
          <target xml:space="preserve">Start the container.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">Create a remote PowerShell session with the new container.</source>
          <target xml:space="preserve">Create a remote PowerShell session with the new container.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source xml:space="preserve">Once working inside the container, the nginx web server can be started and web content staged.</source>
          <target xml:space="preserve">Once working inside the container, the nginx web server can be started and web content staged.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">To start the nginx web server, change to the nginx installation directory.</source>
          <target xml:space="preserve">To start the nginx web server, change to the nginx installation directory.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">Start the nginx web server.</source>
          <target xml:space="preserve">Start the nginx web server.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">And exit this PS-Session.</source>
          <target xml:space="preserve">And exit this PS-Session.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">The web server will keep running.</source>
          <target xml:space="preserve">The web server will keep running.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Step 5 - Configure Container Networking</source>
          <target xml:space="preserve">Step 5 - Configure Container Networking</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">Depending on the configuration of the container host and network, a container will either receive an IP address from a DHCP server or the container host itself using network address translation (NAT).</source>
          <target xml:space="preserve">Depending on the configuration of the container host and network, a container will either receive an IP address from a DHCP server or the container host itself using network address translation (NAT).</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">This guided walk through is configured to use NAT.</source>
          <target xml:space="preserve">This guided walk through is configured to use NAT.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">In this configuration a port from the container is mapped to a port on the container host.</source>
          <target xml:space="preserve">In this configuration a port from the container is mapped to a port on the container host.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">The application hosted in the container is then accessed through the IP address / name of the container host.</source>
          <target xml:space="preserve">The application hosted in the container is then accessed through the IP address / name of the container host.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source xml:space="preserve">For example if port 80 from the container was mapped to port 55534 on the container host, a typical http request to the application would look like this http://contianerhost:55534.</source>
          <target xml:space="preserve">For example if port 80 from the container was mapped to port 55534 on the container host, a typical http request to the application would look like this http://contianerhost:55534.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">This allows a container host to run many containers and allow for the applications in these containers to respond to requests using the same port.</source>
          <target xml:space="preserve">This allows a container host to run many containers and allow for the applications in these containers to respond to requests using the same port.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source xml:space="preserve">For this lab we need to create this port mapping.</source>
          <target xml:space="preserve">For this lab we need to create this port mapping.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">In order to do so we will need to know the IP address of the container and the internal (application) and external (container host) ports that will be configured.</source>
          <target xml:space="preserve">In order to do so we will need to know the IP address of the container and the internal (application) and external (container host) ports that will be configured.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source xml:space="preserve">For this example let’s keep it simple and map port 80 from the container to port 80 of the host.</source>
          <target xml:space="preserve">For this example let’s keep it simple and map port 80 from the container to port 80 of the host.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">`Add-NetNatStaticMapping`</data>
          <data id="id2">`–InternalIPAddress`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Using the <ph dataRef="id1" id="ph1" /> command, the <ph dataRef="id2" id="ph2" /> will be the IP address of the container which for this walkthrough should be ‘172.16.0.2’.</source>
          <target xml:space="preserve">Using the <ph dataRef="id1" id="ph1" /> command, the <ph dataRef="id2" id="ph2" /> will be the IP address of the container which for this walkthrough should be ‘172.16.0.2’.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source xml:space="preserve">When the port mapping has been created you will also need to configure an inbound firewall rule for the configured port.</source>
          <target xml:space="preserve">When the port mapping has been created you will also need to configure an inbound firewall rule for the configured port.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source xml:space="preserve">To do so for port 80 run the following command.</source>
          <target xml:space="preserve">To do so for port 80 run the following command.</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source xml:space="preserve">This script can be copied into the VM.</source>
          <target xml:space="preserve">This script can be copied into the VM.</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source xml:space="preserve">Next if you are working from Azure and have not already created a Virtual Machine endpoint you will need to create one now.</source>
          <target xml:space="preserve">Next if you are working from Azure and have not already created a Virtual Machine endpoint you will need to create one now.</target>
        </segment>
      </unit>
      <unit id="221">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]( https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-set-up-endpoints/)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information on Azure VM Endpoints see this article: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set up Azure VM Endpoints</pc>.</source>
          <target xml:space="preserve">For more information on Azure VM Endpoints see this article: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set up Azure VM Endpoints</pc>.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source xml:space="preserve">Step 6 – Access the Container Hosted Website</source>
          <target xml:space="preserve">Step 6 – Access the Container Hosted Website</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source xml:space="preserve">With the web server container created, you can now checkout the application hosted in the container.</source>
          <target xml:space="preserve">With the web server container created, you can now checkout the application hosted in the container.</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">`http://containerhost-ipaddress`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To do so, open up a browser on different machine and enter <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">To do so, open up a browser on different machine and enter <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source xml:space="preserve">Notice here that you will be browsing to the IP Address of the Container Host and not the container itself.</source>
          <target xml:space="preserve">Notice here that you will be browsing to the IP Address of the Container Host and not the container itself.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source xml:space="preserve">If you are working from an Azure Virtual Machine this will be the public IP address or Cloud Service name.</source>
          <target xml:space="preserve">If you are working from an Azure Virtual Machine this will be the public IP address or Cloud Service name.</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source xml:space="preserve">If everything has been correctly configured, you will see the nginx welcome page.</source>
          <target xml:space="preserve">If everything has been correctly configured, you will see the nginx welcome page.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source xml:space="preserve">At this point, feel free to update the website.</source>
          <target xml:space="preserve">At this point, feel free to update the website.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source xml:space="preserve">Copy in your own sample website, or use a simple ‘Hello World’ sample site that has been created for this demo.</source>
          <target xml:space="preserve">Copy in your own sample website, or use a simple ‘Hello World’ sample site that has been created for this demo.</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source xml:space="preserve">To use the sample you will first need to re-establish a remote PS session with the container.</source>
          <target xml:space="preserve">To use the sample you will first need to re-establish a remote PS session with the container.</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source xml:space="preserve">You will first need to re-create the remote PS session with the container.</source>
          <target xml:space="preserve">You will first need to re-create the remote PS session with the container.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source xml:space="preserve">Then run the following command to download and replace the index.html file.</source>
          <target xml:space="preserve">Then run the following command to download and replace the index.html file.</target>
        </segment>
      </unit>
      <unit id="233">
        <originalData>
          <data id="id1">`http://containerhost-ipaddress`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">After the website has been updated, navigate back to <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">After the website has been updated, navigate back to <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source xml:space="preserve">Video Walkthrough</source>
          <target xml:space="preserve">Video Walkthrough</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source xml:space="preserve">Next Steps</source>
          <target xml:space="preserve">Next Steps</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source xml:space="preserve">Now that you have containers set up and an introduction to the tools, go build your own containerized apps.</source>
          <target xml:space="preserve">Now that you have containers set up and an introduction to the tools, go build your own containerized apps.</target>
        </segment>
      </unit>
      <unit id="237">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../reference/powershell_overview.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Here is a more complete <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PowerShell reference</pc>.</source>
          <target xml:space="preserve">Here is a more complete <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PowerShell reference</pc>.</target>
        </segment>
      </unit>
      <unit id="238">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Remember, this is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">preview</pc> there are bugs and we have a lot of work in progress.</source>
          <target xml:space="preserve">Remember, this is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">preview</pc> there are bugs and we have a lot of work in progress.</target>
        </segment>
      </unit>
      <unit id="239">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../about/work_in_progress.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">This page</pc> contains many of our known issues.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">This page</pc> contains many of our known issues.</target>
        </segment>
      </unit>
      <unit id="240">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://social.msdn.microsoft.com/Forums/en-US/home?forum=windowscontainers)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We are also monitoring the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">forums</pc> very closely.</source>
          <target xml:space="preserve">We are also monitoring the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">forums</pc> very closely.</target>
        </segment>
      </unit>
      <unit id="241">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://github.com/Microsoft/Virtualization-Documentation/tree/master/windows-server-container-samples)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There are also pre-made samples on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GitHub</pc>.</source>
          <target xml:space="preserve">There are also pre-made samples on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GitHub</pc>.</target>
        </segment>
      </unit>
      <unit id="242">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../containers_welcome.md)</data>
          <data id="id3">
          </data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Back to Container Home</pc>
						<ph dataRef="id3" id="ph1" />
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Back to Container Home</pc>
						<ph dataRef="id3" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="243">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../about/work_in_progress.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Known Issues for Current Release</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Known Issues for Current Release</pc>
					</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source xml:space="preserve">Test -test -test</source>
          <target xml:space="preserve">Test -test -test</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>