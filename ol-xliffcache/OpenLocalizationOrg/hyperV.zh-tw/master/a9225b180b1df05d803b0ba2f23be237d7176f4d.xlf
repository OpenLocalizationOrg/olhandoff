<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">a9225b180b1df05d803b0ba2f23be237d7176f4d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source>ms.ContentId: 4981828d-1a08-4d8c-a99d-874a926a153f</source>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source>title: PowerShell to Docker Comparison</source>
          </segment>
        </unit>
        <unit id="103">
          <segment state="initial" id="103">
            <source>PowerShell to Docker comparison for managing Windows Server Containers</source>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source>There are many ways to manage Windows Server Containers using both in-box Windows tools (PowerShell, in this preview) and Open Source management tools such as Docker.</source>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source>Guides outlining both individually available here:</source>
          </segment>
        </unit>
        <unit id="106">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="106">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">Manage Windows Server Containers with Docker</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">Manage Windows Server Containers with PowerShell</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source>This page is a more in depth reference comparing the Docker tools and PowerShell management tools.</source>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source>PowerShell for containers versus Hyper-V VMs</source>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source>You can create, run, and interact with Windows Server Containers using PowerShell cmdlets.</source>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source>Everything you need to get going is available in-box.</source>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source>If you’ve used Hyper-V PowerShell, the design of the cmdlets should be pretty familiar to you.</source>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source>A lot of the workflow is similar to how you’d manage a virtual machine using the Hyper-V module.</source>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
            <data id="id11">&lt;code&gt;</data>
            <data id="id12">&lt;/code&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
            <data id="id15">&lt;code&gt;</data>
            <data id="id16">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source>Instead of <pc dataRefEnd="id2" dataRefStart="id1" id="2">New-VM</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">Get-VM</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="6">Start-VM</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="8">Stop-VM</pc>, you have <pc dataRefEnd="id10" dataRefStart="id9" id="10">New-Container</pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="12">Get-Container</pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="14">Start-Container</pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="16">Stop-Container</pc>.</source>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source>There are quite a few container-specific cmdlets and parameters, but the general lifecycle and management of a Windows container looks roughly like that of a Hyper-V VM.</source>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source>How does PowerShell management compare to Docker?</source>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source>The Containers PowerShell cmdlets expose an API that isn’t quite the same as Docker's; as a general rule, the cmdlets are more granular in operation.</source>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source>Some Docker commands have pretty straightforward parallels in PowerShell:</source>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source>Docker command</source>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source>PowerShell Cmdlet</source>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker ps -a</pc>
            </source>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Get-Container</pc>
            </source>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker images</pc>
            </source>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Get-ContainerImage</pc>
            </source>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker rm</pc>
            </source>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Remove-Container</pc>
            </source>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker rmi</pc>
            </source>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Remove-ContainerImage</pc>
            </source>
          </segment>
        </unit>
        <unit id="129">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="129">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker create</pc>
            </source>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">New-Container</pc>
            </source>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker commit &lt;container ID&gt;</pc>
            </source>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">New-ContainerImage -Container &lt;container&gt;</pc>
            </source>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker load &lt;tarball&gt;</pc>
            </source>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Import-ContainerImage &lt;AppX package&gt;</pc>
            </source>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker save</pc>
            </source>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Export-ContainerImage</pc>
            </source>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker start</pc>
            </source>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Start-Container</pc>
            </source>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">docker stop</pc>
            </source>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Stop-Container</pc>
            </source>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source>The PowerShell cmdlets are not an exact perfect parity, and there are a fair number of commands that we’re not providing PowerShell replacements for* (notably <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker build</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">docker cp</pc>).</source>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source>But what might leap out at you is that there’s no single one-line replacement for <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker run</pc>.</source>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source>\* Subject to change.</source>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source>But I need docker run! What’s going on?</source>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source>We’re doing a couple things here to provide a slightly more familiar interaction model for users who know their way around PowerShell already.</source>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source>Of course, if you’re used to the way docker operates, this will be a bit of a mental shift.</source>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source>The lifecycle of a container in the PowerShell model is slightly different.</source>
          </segment>
        </unit>
        <unit id="148">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="148">
            <source>In the Containers PowerShell module, we expose the more granular operations of <pc dataRefEnd="id2" dataRefStart="id1" id="2">New-Container</pc> (which creates a new container that’s stopped) and <pc dataRefEnd="id4" dataRefStart="id3" id="4">Start-Container</pc>.</source>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source>In between creating and starting the container, you can also configure the container’s settings; for TP3, the only other configuration we’re planning to expose is the ability to set the network connection for the container.</source>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source>using the (Add/Remove/Connect/Disconnect/Get/Set)-ContainerNetworkAdapter cmdlets.</source>
          </segment>
        </unit>
        <unit id="151">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="151">
            <source>You can’t currently pass a command to be run inside the container on start. However, you can still get an interactive PowerShell session to a running container using <pc dataRefEnd="id2" dataRefStart="id1" id="2">Enter-PSSession -ContainerId &lt;ID of a running container&gt;</pc>, and you can execute a command inside a running container using <pc dataRefEnd="id4" dataRefStart="id3" id="4">Invoke-Command -ContainerId &lt;container id&gt; -ScriptBlock { code to run inside the container }</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="6">Invoke-Command -ContainerId &lt;container id&gt; -FilePath &lt;path to script&gt;</pc>.</source>
          </segment>
        </unit>
        <unit id="152">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="152">
            <source>Both of these commands allow the optional <pc dataRefEnd="id2" dataRefStart="id1" id="2">-RunAsAdministrator</pc> flag for high privilige actions.</source>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source>Caveats and known issues</source>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source>Right now, the Containers cmdlets have no knowledge about any containers or images created through Docker, and Docker does not know anything about containers and images created through the PowerShell.</source>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source>If you created it in Docker, manage it with Docker; if you created it through PowerShell, manage it through PowerShell.</source>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source>We have quite a bit of work we'd like to do to improve the end user experience -- better error messages, better progress reporting, invalid event strings, and so forth.</source>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source>If you happen to run into a situation where you wish you were getting more or better info, please feel free to send suggestions to the forums.</source>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source>A quick runthrough</source>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source>Here is a walk through of some common workflows.</source>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source>This assumes you've installed an OS container image named "ServerDatacenterCore" and created a virtual switch named "Virtual Switch" (using New-VMSwitch).</source>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source>Build your own sample</source>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source>You can see all the Containers cmdlets using <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-Command -Module Containers</pc>.</source>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source>There are several other cmdlets that are not described here, which we'll leave to you to learn about on your own.</source>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc> This won't return the <pc dataRefEnd="id4" dataRefStart="id3" id="3">Enter-PSSession</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="5">Invoke-Command</pc> cmdlets, which are part of core PowerShell.</source>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source>You can also get help about any cmdlet using <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-Help [cmdlet name]</pc>, or equivalently <pc dataRefEnd="id4" dataRefStart="id3" id="4">[cmdlet name] -?</pc>.</source>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source>Today, the help output is auto-generated and just tells you the syntax for commands; we will be adding further documentation as we get closer to finalizing the cmdlet design.</source>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source>A nicer way to discover the syntax is the PowerShell ISE, which you may not have looked at before if you haven't used PowerShell very much.</source>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source>If you're running on a SKU that permits it, try starting the ISE, opening the Commands pane, and choosing the "Containers" module, which will show you a graphical representation of the cmdlets and their parameter sets.</source>
          </segment>
        </unit>
        <unit id="169">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="169">
            <source>PS: Just to prove it can be done, here's a PowerShell function that composes some of the cmdlets we've seen already into an ersatz <pc dataRefEnd="id2" dataRefStart="id1" id="2">docker run</pc>.</source>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source>(To be clear, this is a proof of concept, not under active development.)</source>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source>Docker</source>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source>Windows Server Containers can be managed with Docker commands.</source>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source>While Windows containers should be comparable to their Linux counterparts and have the same management experience through Docker, there are some Docker commands that simply don't make sense with a Windows container.</source>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source>Others simply haven't been tested (we're getting there).</source>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source>In an effort to not duplicate the API documentation available in Docker, here is a link to their management APIs.</source>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source>Their walkthroughs are fantastic.</source>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source>We're tracking things that do and don't work in the Docker APIs in our Work in Progress document.</source>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>