{
  "nodes": [
    {
      "content": "Working with the App Service Mobile Apps managed client library (Windows | Xamarin) | Microsoft Azure",
      "pos": [
        27,
        128
      ]
    },
    {
      "content": "Learn how to use a .NET client for Azure App Service Mobile Apps with Windows and Xamarin apps.",
      "pos": [
        147,
        242
      ]
    },
    {
      "content": "How to use the managed client for Azure Mobile Apps",
      "pos": [
        571,
        622
      ]
    },
    {
      "content": "Overview",
      "pos": [
        750,
        758
      ]
    },
    {
      "content": "This guide shows you how to perform common scenarios using the managed client library for Azure App Service Mobile Apps for Windows and Xamarin apps.",
      "pos": [
        760,
        909
      ]
    },
    {
      "content": "If",
      "pos": [
        910,
        912
      ]
    },
    {
      "content": "you are new to Mobile Apps, you should consider first completing the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Mobile Apps quickstart]</ept> tutorial.",
      "pos": [
        913,
        1022
      ]
    },
    {
      "content": "In this guide, we focus on the client-side",
      "pos": [
        1023,
        1065
      ]
    },
    {
      "content": "managed SDK.",
      "pos": [
        1066,
        1078
      ]
    },
    {
      "content": "To learn more about the server-side SDKs for Mobile Apps, see the HOWTO documentation for the <bpt id=\"p1\">[</bpt>.NET Server SDK<ept id=\"p1\">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept>",
      "pos": [
        1079,
        1250
      ]
    },
    {
      "content": "or the <bpt id=\"p1\">[</bpt>Node.js Server SDK<ept id=\"p1\">](app-service-mobile-node-backend-how-to-use-server-sdk.md)</ept>.",
      "pos": [
        1251,
        1337
      ]
    },
    {
      "content": "Reference documentation",
      "pos": [
        1342,
        1365
      ]
    },
    {
      "content": "The reference documentation for the client SDK is located here: <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Mobile Apps .NET Client Reference]</ept>.",
      "pos": [
        1367,
        1473
      ]
    },
    {
      "content": "You can also find several client samples in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure-Samples GitHub Repository]</ept>.",
      "pos": [
        1474,
        1556
      ]
    },
    {
      "pos": [
        1560,
        1603
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"setup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Setup and Prerequisites"
    },
    {
      "content": "We assume that you have already created and published your Mobile App backend project, which includes at one table.",
      "pos": [
        1605,
        1720
      ]
    },
    {
      "content": "In the code used in this topic, the",
      "pos": [
        1722,
        1757
      ]
    },
    {
      "content": "table is named <ph id=\"ph1\">`TodoItem`</ph> and it will have the following columns: <ph id=\"ph2\">`Id`</ph>, <ph id=\"ph3\">`Text`</ph>, and <ph id=\"ph4\">`Complete`</ph>.",
      "pos": [
        1758,
        1853
      ]
    },
    {
      "content": "This is the same table created when you complete the",
      "pos": [
        1854,
        1906
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Mobile Apps quickstart]</ept>.",
      "pos": [
        1907,
        1938
      ]
    },
    {
      "content": "The corresponding typed client-side type in C# is the following:",
      "pos": [
        1940,
        2004
      ]
    },
    {
      "pos": [
        2266,
        2387
      ],
      "content": "Note that the <bpt id=\"p1\">[</bpt><ept id=\"p1\">JsonPropertyAttribute]</ept> is used to define the <bpt id=\"p2\">*</bpt>PropertyName<ept id=\"p2\">*</ept> mapping between the client type and the table."
    },
    {
      "content": "To learn how to create new tables in your Mobile Apps backend, see the information in the <bpt id=\"p1\">[</bpt>.NET Server SDK HOWTO<ept id=\"p1\">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#define-table-controller)</ept>",
      "pos": [
        2389,
        2586
      ]
    },
    {
      "content": "or the <bpt id=\"p1\">[</bpt>Node.js Server SDK HOWTO<ept id=\"p1\">](app-service-mobile-node-backend-how-to-use-server-sdk.md#howto-dynamicschema)</ept>.",
      "pos": [
        2587,
        2699
      ]
    },
    {
      "content": "If you",
      "pos": [
        2700,
        2706
      ]
    },
    {
      "content": "created your Mobile App backend in the Azure Portal using the QuickStart, you can also use the <bpt id=\"p1\">**</bpt>Easy tables<ept id=\"p1\">**</ept> setting in the <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure portal]</ept>.",
      "pos": [
        2707,
        2848
      ]
    },
    {
      "pos": [
        2853,
        2928
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"symbolsource\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Work with debug symbols in Visual Studio"
    },
    {
      "content": "The symbols for the Microsoft.Azure.Mobile namespace are available on <bpt id=\"p1\">[</bpt><ept id=\"p1\">SymbolSource]</ept>.",
      "pos": [
        2930,
        3015
      ]
    },
    {
      "content": "Refer to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">SymbolSource instructions]</ept>\nto integrate SymbolSource with Visual Studio.",
      "pos": [
        3017,
        3103
      ]
    },
    {
      "pos": [
        3107,
        3163
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create the Mobile App client"
    },
    {
      "pos": [
        3165,
        3272
      ],
      "content": "The following code creates the <bpt id=\"p1\">[</bpt><ept id=\"p1\">MobileServiceClient]</ept> object that is used to access your Mobile App backend."
    },
    {
      "content": "In the code above, replace <ph id=\"ph1\">`MOBILE_APP_URL`</ph> with the URL of the Mobile App backend, which is found in the blade for your Mobile App backend in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept>.",
      "pos": [
        3351,
        3513
      ]
    },
    {
      "content": "It is normal and recommended that the client instance be a Singleton.",
      "pos": [
        3514,
        3583
      ]
    },
    {
      "content": "Work with Tables",
      "pos": [
        3588,
        3604
      ]
    },
    {
      "content": "The following section details how to search and retrieve records and modify the data within the table.",
      "pos": [
        3606,
        3708
      ]
    },
    {
      "content": "The following",
      "pos": [
        3710,
        3723
      ]
    },
    {
      "content": "topics are covered:",
      "pos": [
        3724,
        3743
      ]
    },
    {
      "content": "Create a table reference",
      "pos": [
        3748,
        3772
      ]
    },
    {
      "content": "Query data",
      "pos": [
        3793,
        3803
      ]
    },
    {
      "content": "Filter returned data",
      "pos": [
        3819,
        3839
      ]
    },
    {
      "content": "Sort returned data",
      "pos": [
        3856,
        3874
      ]
    },
    {
      "content": "Return data in pages",
      "pos": [
        3889,
        3909
      ]
    },
    {
      "content": "Select specific columns",
      "pos": [
        3923,
        3946
      ]
    },
    {
      "content": "Look up a record by Id",
      "pos": [
        3963,
        3985
      ]
    },
    {
      "content": "Dealing with untyped queries",
      "pos": [
        4002,
        4030
      ]
    },
    {
      "content": "Inserting data",
      "pos": [
        4052,
        4066
      ]
    },
    {
      "content": "Updating data",
      "pos": [
        4083,
        4096
      ]
    },
    {
      "content": "Deleting data",
      "pos": [
        4112,
        4125
      ]
    },
    {
      "content": "Conflict Resolution and Optimistic Concurrency",
      "pos": [
        4141,
        4187
      ]
    },
    {
      "content": "Binding to a Windows User Interface",
      "pos": [
        4216,
        4251
      ]
    },
    {
      "pos": [
        4267,
        4327
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"instantiating\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create a table reference"
    },
    {
      "content": "All of the code that accesses or modifies data in a backend table calls functions on the <ph id=\"ph1\">`MobileServiceTable`</ph> object.",
      "pos": [
        4329,
        4446
      ]
    },
    {
      "content": "You get a reference to the table by calling the",
      "pos": [
        4447,
        4494
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">GetTable]</ept> method on an instance of the <ph id=\"ph1\">`MobileServiceClient`</ph>, as follows:",
      "pos": [
        4495,
        4569
      ]
    },
    {
      "content": "This is the typed serialization model.",
      "pos": [
        4647,
        4685
      ]
    },
    {
      "content": "An untyped serialization model is also supported.",
      "pos": [
        4686,
        4735
      ]
    },
    {
      "content": "The following <bpt id=\"p1\">[</bpt><ept id=\"p1\">creates a reference to an untyped table]</ept>:",
      "pos": [
        4736,
        4792
      ]
    },
    {
      "content": "In untyped queries, you must specify the underlying OData query string.",
      "pos": [
        4905,
        4976
      ]
    },
    {
      "pos": [
        4981,
        5043
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"querying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Query data from your Mobile App"
    },
    {
      "content": "This section describes how to issue queries to the Mobile App backend, which includes the following functionality:",
      "pos": [
        5045,
        5159
      ]
    },
    {
      "content": "Filter returned data",
      "pos": [
        5164,
        5184
      ]
    },
    {
      "content": "Sort returned data",
      "pos": [
        5189,
        5207
      ]
    },
    {
      "content": "Return data in pages",
      "pos": [
        5212,
        5232
      ]
    },
    {
      "content": "Select specific columns",
      "pos": [
        5237,
        5260
      ]
    },
    {
      "content": "Look up data by ID",
      "pos": [
        5265,
        5283
      ]
    },
    {
      "pos": [
        5287,
        5562
      ],
      "content": "[AZURE.NOTE] A server-driven page size is enforced to prevent all rows from being returned. This keeps default requests\nfor large data sets from negatively impacting the service.  To return more than 50 rows, use the `Take` method, as\ndescribed in [Return data in pages].",
      "leadings": [
        "",
        "> ",
        "> "
      ],
      "nodes": [
        {
          "content": "[AZURE.NOTE] A server-driven page size is enforced to prevent all rows from being returned. This keeps default requests",
          "pos": [
            0,
            119
          ],
          "nodes": [
            {
              "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> A server-driven page size is enforced to prevent all rows from being returned.",
              "pos": [
                0,
                91
              ]
            },
            {
              "content": "This keeps default requests",
              "pos": [
                92,
                119
              ]
            }
          ]
        },
        {
          "content": "for large data sets from negatively impacting the service.  To return more than 50 rows, use the `Take` method, as",
          "pos": [
            120,
            234
          ],
          "nodes": [
            {
              "content": "for large data sets from negatively impacting the service.",
              "pos": [
                0,
                58
              ]
            },
            {
              "content": "To return more than 50 rows, use the <ph id=\"ph1\">`Take`</ph> method, as",
              "pos": [
                60,
                114
              ]
            }
          ]
        },
        {
          "content": "described in <bpt id=\"p1\">[</bpt><ept id=\"p1\">Return data in pages]</ept>.",
          "pos": [
            235,
            271
          ]
        }
      ]
    },
    {
      "pos": [
        5567,
        5619
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"filtering\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Filter returned data"
    },
    {
      "content": "The following code illustrates how to filter data by including a <ph id=\"ph1\">`Where`</ph> clause in a query.",
      "pos": [
        5621,
        5712
      ]
    },
    {
      "content": "It returns all items from",
      "pos": [
        5713,
        5738
      ]
    },
    {
      "content": "<ph id=\"ph1\">`todoTable`</ph> whose <ph id=\"ph2\">`Complete`</ph> property is equal to <ph id=\"ph3\">`false`</ph>.",
      "pos": [
        5739,
        5797
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt><ept id=\"p1\">Where]</ept> function applies a row filtering predicate to",
      "pos": [
        5798,
        5855
      ]
    },
    {
      "content": "the query against the table.",
      "pos": [
        5856,
        5884
      ]
    },
    {
      "content": "You can view the URI of the request sent to the backend by using message inspection software, such as browser developer",
      "pos": [
        6088,
        6207
      ]
    },
    {
      "content": "tools or <bpt id=\"p1\">[</bpt><ept id=\"p1\">Fiddler]</ept>.",
      "pos": [
        6208,
        6227
      ]
    },
    {
      "content": "If you look at the request URI below, notice that the query string is modified:",
      "pos": [
        6228,
        6307
      ]
    },
    {
      "content": "This OData request is translated into an SQL query by the Server SDK that is similar to this:",
      "pos": [
        6372,
        6465
      ]
    },
    {
      "content": "The function which is passed to the <ph id=\"ph1\">`Where`</ph> method can have an arbitrary number of conditions.",
      "pos": [
        6533,
        6627
      ]
    },
    {
      "content": "For example, the line below:",
      "pos": [
        6628,
        6656
      ]
    },
    {
      "content": "Would be translated into an SQL query by the Server SDK that is similar to this:",
      "pos": [
        6876,
        6956
      ]
    },
    {
      "pos": [
        7058,
        7159
      ],
      "content": "The <ph id=\"ph1\">`WHERE`</ph> statement above will find items with <ph id=\"ph2\">`Complete`</ph> status set to false with non-null <ph id=\"ph3\">`Text`</ph>."
    },
    {
      "content": "This query can also be split into multiple clauses:",
      "pos": [
        7161,
        7212
      ]
    },
    {
      "content": "The two methods are equivalent and may be used interchangeably.",
      "pos": [
        7384,
        7447
      ]
    },
    {
      "content": "The former option&amp;mdash;of concatenating",
      "pos": [
        7449,
        7489
      ]
    },
    {
      "content": "multiple predicates in one query&amp;mdash;is more compact and recommended.",
      "pos": [
        7490,
        7561
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`Where`</ph> clause supports operations that be translated into the OData subset.",
      "pos": [
        7563,
        7643
      ]
    },
    {
      "content": "This includes relational",
      "pos": [
        7644,
        7668
      ]
    },
    {
      "content": "operators (==, !=, &lt;, &lt;=, &gt;, &gt;=), arithmetic operators (+, -, /, *, %),",
      "pos": [
        7669,
        7740
      ]
    },
    {
      "content": "number precision (Math.Floor, Math.Ceiling), string functions (Length, Substring, Replace, IndexOf, StartsWith,",
      "pos": [
        7741,
        7852
      ]
    },
    {
      "content": "EndsWith), date properties (Year, Month, Day, Hour, Minute, Second), access properties of an object, and",
      "pos": [
        7853,
        7957
      ]
    },
    {
      "content": "expressions combining all of these.",
      "pos": [
        7958,
        7993
      ]
    },
    {
      "content": "When considering what the Server SDK supports, you can consider",
      "pos": [
        7995,
        8058
      ]
    },
    {
      "content": "the <bpt id=\"p1\">[</bpt><ept id=\"p1\">OData v3 Documentation]</ept>.",
      "pos": [
        8059,
        8088
      ]
    },
    {
      "pos": [
        8093,
        8141
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"sorting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Sort returned data"
    },
    {
      "content": "The following code illustrates how to sort data by including an <bpt id=\"p1\">[</bpt><ept id=\"p1\">OrderBy]</ept> or <bpt id=\"p2\">[</bpt><ept id=\"p2\">OrderByDescending]</ept> function",
      "pos": [
        8143,
        8248
      ]
    },
    {
      "content": "in the query.",
      "pos": [
        8249,
        8262
      ]
    },
    {
      "content": "It returns items from <ph id=\"ph1\">`todoTable`</ph> sorted ascending by the <ph id=\"ph2\">`Text`</ph> field.",
      "pos": [
        8263,
        8334
      ]
    },
    {
      "pos": [
        8786,
        8835
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"paging\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Return data in pages"
    },
    {
      "content": "By default, the backend returns only the first 50 rows.",
      "pos": [
        8837,
        8892
      ]
    },
    {
      "content": "You can increase the number of returned rows by calling the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Take]</ept> method.",
      "pos": [
        8893,
        8967
      ]
    },
    {
      "content": "Use <ph id=\"ph1\">`Take`</ph> along with the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Skip]</ept> method",
      "pos": [
        8968,
        9007
      ]
    },
    {
      "content": "to request a specific \"page\" of the total dataset returned by the query.",
      "pos": [
        9008,
        9080
      ]
    },
    {
      "content": "The following query, when executed, returns the top three items in the table.",
      "pos": [
        9081,
        9158
      ]
    },
    {
      "content": "The following revised query skips the first three results and returns the next three after that.",
      "pos": [
        9362,
        9458
      ]
    },
    {
      "content": "This is effectively the second \"page\" of data, where the page size is three items.",
      "pos": [
        9459,
        9541
      ]
    },
    {
      "content": "You can also use the <bpt id=\"p1\">[</bpt><ept id=\"p1\">IncludeTotalCount]</ept> method to ensure that the query will get the total count for <ph id=\"ph1\">&lt;i&gt;</ph>all<ph id=\"ph2\">&lt;/i&gt;</ph> the records that would have been returned, ignoring any take",
      "pos": [
        9801,
        9974
      ]
    },
    {
      "content": "paging/limit clause specified:",
      "pos": [
        9975,
        10005
      ]
    },
    {
      "content": "This is a simplified scenario of passing hard-coded paging values to the <ph id=\"ph1\">`Take`</ph> and <ph id=\"ph2\">`Skip`</ph> methods.",
      "pos": [
        10047,
        10146
      ]
    },
    {
      "content": "In a real-world app, you can use queries similar to the above with a pager",
      "pos": [
        10147,
        10221
      ]
    },
    {
      "content": "control or comparable UI to let users navigate to previous and next pages.",
      "pos": [
        10222,
        10296
      ]
    },
    {
      "pos": [
        10299,
        10552
      ],
      "content": "[AZURE.NOTE]To override the 50 row limit in a Mobile App backend, you must also apply the [EnableQueryAttribute] to the public GET method and specify the paging behavior. When\napplied to the method, the following sets the maximum returned rows to 1000:",
      "leadings": [
        "",
        ">"
      ],
      "nodes": [
        {
          "content": "[AZURE.NOTE]To override the 50 row limit in a Mobile App backend, you must also apply the [EnableQueryAttribute] to the public GET method and specify the paging behavior. When",
          "pos": [
            0,
            175
          ],
          "nodes": [
            {
              "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>To override the 50 row limit in a Mobile App backend, you must also apply the <bpt id=\"p1\">[</bpt><ept id=\"p1\">EnableQueryAttribute]</ept> to the public GET method and specify the paging behavior.",
              "pos": [
                0,
                170
              ]
            },
            {
              "content": "When",
              "pos": [
                171,
                175
              ]
            }
          ]
        },
        {
          "content": "applied to the method, the following sets the maximum returned rows to 1000:",
          "pos": [
            176,
            252
          ]
        }
      ]
    },
    {
      "content": "[EnableQuery(MaxTop=1000)]",
      "pos": [
        10560,
        10586
      ]
    },
    {
      "pos": [
        10592,
        10647
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"selecting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Select specific columns"
    },
    {
      "content": "You can specify which set of properties to include in the results by adding a <bpt id=\"p1\">[</bpt><ept id=\"p1\">Select]</ept> clause to your query.",
      "pos": [
        10649,
        10757
      ]
    },
    {
      "content": "For example, the following code shows how to select just one field",
      "pos": [
        10758,
        10824
      ]
    },
    {
      "content": "and also how to select and format multiple fields:",
      "pos": [
        10825,
        10875
      ]
    },
    {
      "content": "All the functions described so far are additive, so we can just keep calling them and we'll each time affect more of the query.",
      "pos": [
        11452,
        11579
      ]
    },
    {
      "content": "One more example:",
      "pos": [
        11580,
        11597
      ]
    },
    {
      "pos": [
        11894,
        11944
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"lookingup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Look up data by ID"
    },
    {
      "pos": [
        11946,
        12043
      ],
      "content": "The <bpt id=\"p1\">[</bpt><ept id=\"p1\">LookupAsync]</ept> function can be used to look up objects from the database with a particular ID."
    },
    {
      "pos": [
        12230,
        12290
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"untypedqueries\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Execute untyped queries"
    },
    {
      "pos": [
        12292,
        12449
      ],
      "content": "When executing a query using an untyped table object, you must explicitly specify the OData query string by calling <bpt id=\"p1\">[</bpt><ept id=\"p1\">ReadAsync]</ept>, as in the following example:"
    },
    {
      "content": "You get back JSON values that you can use like a property bag.",
      "pos": [
        12590,
        12652
      ]
    },
    {
      "content": "For more information on JToken and Newtonsoft Json.NET, see the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Json.NET]</ept> site.",
      "pos": [
        12653,
        12733
      ]
    },
    {
      "pos": [
        12739,
        12808
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"inserting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Insert data into a Mobile App backend"
    },
    {
      "content": "All client types must contain a member named <bpt id=\"p1\">**</bpt>Id<ept id=\"p1\">**</ept>, which is by default a string.",
      "pos": [
        12810,
        12892
      ]
    },
    {
      "content": "This <bpt id=\"p1\">**</bpt>Id<ept id=\"p1\">**</ept> is required to perform CRUD operations and for offline.",
      "pos": [
        12893,
        12960
      ]
    },
    {
      "content": "The following",
      "pos": [
        12961,
        12974
      ]
    },
    {
      "content": "code illustrates how to use the <bpt id=\"p1\">[</bpt><ept id=\"p1\">InsertAsync]</ept> method to insert new rows into a table.",
      "pos": [
        12975,
        13060
      ]
    },
    {
      "content": "The parameter contains the data to be inserted as a .NET object.",
      "pos": [
        13061,
        13125
      ]
    },
    {
      "content": "If a unique custom ID value is not included in the <ph id=\"ph1\">`todoItem`</ph> passed to the <ph id=\"ph2\">`todoTable.InsertAsync`</ph> call, a value for ID is generated by the server and is set in",
      "pos": [
        13171,
        13332
      ]
    },
    {
      "content": "the <ph id=\"ph1\">`todoItem`</ph> object returned to the client.",
      "pos": [
        13333,
        13378
      ]
    },
    {
      "content": "To insert untyped data, you may take advantage of Json.NET as shown below.",
      "pos": [
        13380,
        13454
      ]
    },
    {
      "content": "Here is an example using an email address as a unique string id.",
      "pos": [
        13603,
        13667
      ]
    },
    {
      "content": "Working with ID values",
      "pos": [
        13864,
        13886
      ]
    },
    {
      "content": "Mobile Apps supports unique custom string values for the table's <bpt id=\"p1\">**</bpt>id<ept id=\"p1\">**</ept> column.",
      "pos": [
        13888,
        13967
      ]
    },
    {
      "content": "This allows applications to use custom values such as email addresses or user names for the ID.",
      "pos": [
        13968,
        14063
      ]
    },
    {
      "content": "String IDs provide you with the following benefits:",
      "pos": [
        14065,
        14116
      ]
    },
    {
      "content": "IDs are generated without making a round-trip to the database.",
      "pos": [
        14120,
        14182
      ]
    },
    {
      "content": "Records are easier to merge from different tables or databases.",
      "pos": [
        14185,
        14248
      ]
    },
    {
      "content": "IDs values can integrate better with an application's logic.",
      "pos": [
        14251,
        14311
      ]
    },
    {
      "content": "When a string ID value is not set on an inserted record, the Mobile App backend generates a unique value for the ID.",
      "pos": [
        14313,
        14429
      ]
    },
    {
      "content": "You can use the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Guid.NewGuid]</ept> method",
      "pos": [
        14430,
        14467
      ]
    },
    {
      "content": "to generate your own ID values, either on the client or in the backend.",
      "pos": [
        14468,
        14539
      ]
    },
    {
      "pos": [
        14625,
        14692
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"modifying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Modify data in a Mobile App backend"
    },
    {
      "content": "The following code illustrates how to use the <bpt id=\"p1\">[</bpt><ept id=\"p1\">UpdateAsync]</ept> method to update an existing record with the same ID with new information.",
      "pos": [
        14694,
        14828
      ]
    },
    {
      "content": "The",
      "pos": [
        14829,
        14832
      ]
    },
    {
      "content": "parameter contains the data to be updated as a .NET object.",
      "pos": [
        14833,
        14892
      ]
    },
    {
      "pos": [
        14938,
        15010
      ],
      "content": "To insert untyped data, you may take advantage of <bpt id=\"p1\">[</bpt><ept id=\"p1\">Json.NET]</ept> as follows:"
    },
    {
      "content": "An <ph id=\"ph1\">`id`</ph> field must be specified when making an update.",
      "pos": [
        15217,
        15271
      ]
    },
    {
      "content": "This is how the backend identifies which instance to update.",
      "pos": [
        15272,
        15332
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`id`</ph> field can be obtained from the",
      "pos": [
        15333,
        15372
      ]
    },
    {
      "content": "result of the <ph id=\"ph1\">`InsertAsync`</ph> call.",
      "pos": [
        15373,
        15406
      ]
    },
    {
      "content": "An <ph id=\"ph1\">`ArgumentException`</ph> is raised if you try to update an item without providing the <ph id=\"ph2\">`id`</ph> value.",
      "pos": [
        15407,
        15502
      ]
    },
    {
      "pos": [
        15507,
        15573
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"deleting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Delete data in a Mobile App backend"
    },
    {
      "content": "The following code illustrates how to use the <bpt id=\"p1\">[</bpt><ept id=\"p1\">DeleteAsync]</ept> method to delete an existing instance.",
      "pos": [
        15575,
        15673
      ]
    },
    {
      "content": "The instance is identified by the <ph id=\"ph1\">`id`</ph> field set on the <ph id=\"ph2\">`todoItem`</ph>.",
      "pos": [
        15674,
        15741
      ]
    },
    {
      "content": "To delete untyped data, you may take advantage of Json.NET as follows:",
      "pos": [
        15787,
        15857
      ]
    },
    {
      "content": "Note that when you make a delete request, an ID must be specified.",
      "pos": [
        15983,
        16049
      ]
    },
    {
      "content": "Other properties are not passed to the service or are ignored at the service.",
      "pos": [
        16050,
        16127
      ]
    },
    {
      "content": "The result of a",
      "pos": [
        16128,
        16143
      ]
    },
    {
      "content": "<ph id=\"ph1\">`DeleteAsync`</ph> call is usually <ph id=\"ph2\">`null`</ph>.",
      "pos": [
        16144,
        16181
      ]
    },
    {
      "content": "The ID to pass in can be obtained from the result of the <ph id=\"ph1\">`InsertAsync`</ph> call.",
      "pos": [
        16182,
        16258
      ]
    },
    {
      "content": "A <ph id=\"ph1\">`MobileServiceInvalidOperationException`</ph> is",
      "pos": [
        16259,
        16304
      ]
    },
    {
      "content": "thrown when you try to delete an item without specifying the <ph id=\"ph1\">`id`</ph> field.",
      "pos": [
        16305,
        16377
      ]
    },
    {
      "pos": [
        16382,
        16476
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"optimisticconcurrency\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Use Optimistic Concurrency for conflict resolution"
    },
    {
      "content": "Two or more clients may write changes to the same item at the same time.",
      "pos": [
        16478,
        16550
      ]
    },
    {
      "content": "Without any conflict detection, the last write would overwrite any previous updates even",
      "pos": [
        16551,
        16639
      ]
    },
    {
      "content": "if this was not the desired result.",
      "pos": [
        16640,
        16675
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>Optimistic concurrency control<ept id=\"p1\">*</ept> assumes that each transaction can commit and therefore does not use any resource locking.",
      "pos": [
        16676,
        16798
      ]
    },
    {
      "content": "Before",
      "pos": [
        16799,
        16805
      ]
    },
    {
      "content": "committing a transaction, optimistic concurrency control verifies that no other transaction has modified the data.",
      "pos": [
        16806,
        16920
      ]
    },
    {
      "content": "If the data has been modified, the committing",
      "pos": [
        16921,
        16966
      ]
    },
    {
      "content": "transaction is rolled back.",
      "pos": [
        16967,
        16994
      ]
    },
    {
      "content": "Mobile Apps supports optimistic concurrency control by tracking changes to each item using the <ph id=\"ph1\">`version`</ph> system property column that is defined for each table",
      "pos": [
        16996,
        17154
      ]
    },
    {
      "content": "in your Mobile App backend.",
      "pos": [
        17155,
        17182
      ]
    },
    {
      "content": "Each time a record is updated, Mobile Apps sets the <ph id=\"ph1\">`version`</ph> property for that record to a new value.",
      "pos": [
        17183,
        17285
      ]
    },
    {
      "content": "During each update request,",
      "pos": [
        17286,
        17313
      ]
    },
    {
      "content": "the <ph id=\"ph1\">`\\version`</ph> property of the record included with the request is compared to the same property for the record on the server.",
      "pos": [
        17314,
        17440
      ]
    },
    {
      "content": "If the version passed with the",
      "pos": [
        17441,
        17471
      ]
    },
    {
      "content": "request does not match the backend, then the client library raises a <ph id=\"ph1\">`MobileServicePreconditionFailedException&lt;T&gt;`</ph> exception.",
      "pos": [
        17472,
        17597
      ]
    },
    {
      "content": "The type included with the exception",
      "pos": [
        17598,
        17634
      ]
    },
    {
      "content": "is the record from the backend containing the servers version of the record.",
      "pos": [
        17635,
        17711
      ]
    },
    {
      "content": "The application can then use this information to decide whether to execute the update",
      "pos": [
        17712,
        17797
      ]
    },
    {
      "content": "request again with the correct <ph id=\"ph1\">`version`</ph> value from the backend to commit changes.",
      "pos": [
        17798,
        17880
      ]
    },
    {
      "content": "Define a column on the table class for the <ph id=\"ph1\">`version`</ph> system property to enable optimistic concurrency.",
      "pos": [
        17882,
        17984
      ]
    },
    {
      "content": "for example:",
      "pos": [
        17985,
        17997
      ]
    },
    {
      "pos": [
        18406,
        18550
      ],
      "content": "Applications using untyped tables enable optimistic concurrency by setting the <ph id=\"ph1\">`Version`</ph> flag on the <ph id=\"ph2\">`SystemProperties`</ph> of the table as follows."
    },
    {
      "content": "In addition to enabling optimistic concurrency, you must also catch the <ph id=\"ph1\">`MobileServicePreconditionFailedException&lt;T&gt;`</ph> exception in your code when calling <bpt id=\"p1\">[</bpt><ept id=\"p1\">UpdateAsync]</ept>.",
      "pos": [
        18684,
        18852
      ]
    },
    {
      "content": "Resolve the conflict by applying the correct <ph id=\"ph1\">`version`</ph> to the updated record and call <bpt id=\"p1\">[</bpt><ept id=\"p1\">UpdateAsync]</ept> with the resolved record.",
      "pos": [
        18853,
        18978
      ]
    },
    {
      "content": "The following code shows how to resolve",
      "pos": [
        18979,
        19018
      ]
    },
    {
      "content": "a write conflict once detected:",
      "pos": [
        19019,
        19050
      ]
    },
    {
      "pos": [
        20931,
        21008
      ],
      "content": "For more information, see the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Offline Data Sync in Azure Mobile Apps]</ept> topic."
    },
    {
      "pos": [
        21013,
        21092
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"binding\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Bind Mobile Apps data to a Windows user interface"
    },
    {
      "content": "This section shows how to display returned data objects using UI elements in a Windows app.",
      "pos": [
        21094,
        21185
      ]
    },
    {
      "content": "You can run the following example code to",
      "pos": [
        21186,
        21227
      ]
    },
    {
      "content": "bind to the source of the list with a query for incomplete items in <ph id=\"ph1\">`todoTable`</ph> and display it in a very simple list.",
      "pos": [
        21228,
        21345
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">MobileServiceCollection]</ept>\ncreates a Mobile Apps-aware binding collection.",
      "pos": [
        21347,
        21420
      ]
    },
    {
      "content": "Some controls in the managed runtime support an interface called <bpt id=\"p1\">[</bpt><ept id=\"p1\">ISupportIncrementalLoading]</ept>.",
      "pos": [
        21841,
        21935
      ]
    },
    {
      "content": "This interface allows controls to request extra",
      "pos": [
        21936,
        21983
      ]
    },
    {
      "content": "data when the user scrolls.",
      "pos": [
        21984,
        22011
      ]
    },
    {
      "content": "There is built-in support for this interface for universal Windows apps via <bpt id=\"p1\">[</bpt><ept id=\"p1\">MobileServiceIncrementalLoadingCollection]</ept>,",
      "pos": [
        22012,
        22132
      ]
    },
    {
      "content": "which automatically handles the calls from the controls.",
      "pos": [
        22133,
        22189
      ]
    },
    {
      "content": "To use <ph id=\"ph1\">`MobileServiceIncrementalLoadingCollection`</ph> in Windows apps, do the following:",
      "pos": [
        22190,
        22275
      ]
    },
    {
      "content": "To use the new collection on Windows Phone 8 and \"Silverlight\" apps, use the <ph id=\"ph1\">`ToCollection`</ph> extension methods on <ph id=\"ph2\">`IMobileServiceTableQuery&lt;T&gt;`</ph>",
      "pos": [
        22513,
        22655
      ]
    },
    {
      "content": "and <ph id=\"ph1\">`IMobileServiceTable&lt;T&gt;`</ph>.",
      "pos": [
        22656,
        22685
      ]
    },
    {
      "content": "To actually load data, call <ph id=\"ph1\">`LoadMoreItemsAsync()`</ph>.",
      "pos": [
        22686,
        22737
      ]
    },
    {
      "content": "When you use the collection created by calling <ph id=\"ph1\">`ToCollectionAsync`</ph> or <ph id=\"ph2\">`ToCollection`</ph>, you get a collection which can be bound to UI controls.",
      "pos": [
        22904,
        23045
      ]
    },
    {
      "content": "This collection is paging-aware, i.e., a control can ask the collection to \"load more items\", and the collection will do it for the control.",
      "pos": [
        23046,
        23186
      ]
    },
    {
      "content": "At that point there is no user code involved, the control will start the flow.",
      "pos": [
        23187,
        23265
      ]
    },
    {
      "content": "However, since the collection is loading data from the network,",
      "pos": [
        23266,
        23329
      ]
    },
    {
      "content": "it's expected that some times this loading will fail.",
      "pos": [
        23330,
        23383
      ]
    },
    {
      "content": "To handle such failures, you may override the <ph id=\"ph1\">`OnException`</ph> method on",
      "pos": [
        23384,
        23453
      ]
    },
    {
      "content": "<ph id=\"ph1\">`MobileServiceIncrementalLoadingCollection`</ph> to handle exceptions resulting from calls to <ph id=\"ph2\">`LoadMoreItemsAsync`</ph> performed by controls.",
      "pos": [
        23454,
        23586
      ]
    },
    {
      "content": "Finally, imagine that your table has many fields, but you only want to display some of them in your control.",
      "pos": [
        23588,
        23696
      ]
    },
    {
      "content": "You may use the guidance in the",
      "pos": [
        23697,
        23728
      ]
    },
    {
      "content": "section \"<bpt id=\"p1\">[</bpt>Select specific columns<ept id=\"p1\">](#selecting)</ept>\" above to select specific columns to display in the UI.",
      "pos": [
        23729,
        23831
      ]
    },
    {
      "pos": [
        23835,
        23882
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"#customapi\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Work with a custom API"
    },
    {
      "content": "A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.",
      "pos": [
        23884,
        24035
      ]
    },
    {
      "content": "By using a",
      "pos": [
        24036,
        24046
      ]
    },
    {
      "content": "custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.",
      "pos": [
        24047,
        24203
      ]
    },
    {
      "content": "You call a custom API by calling one of the <bpt id=\"p1\">[</bpt><ept id=\"p1\">InvokeApiAsync]</ept> method overloads on the client.",
      "pos": [
        24205,
        24297
      ]
    },
    {
      "content": "For example, the following line of code sends a POST request to",
      "pos": [
        24298,
        24361
      ]
    },
    {
      "content": "the <bpt id=\"p1\">**</bpt>completeAll<ept id=\"p1\">**</ept> API on the backend:",
      "pos": [
        24362,
        24401
      ]
    },
    {
      "content": "Note that this a typed method call, which requires that the <bpt id=\"p1\">**</bpt>MarkAllResult<ept id=\"p1\">**</ept> return type be defined.",
      "pos": [
        24519,
        24620
      ]
    },
    {
      "content": "Both typed and untyped methods are supported.",
      "pos": [
        24621,
        24666
      ]
    },
    {
      "pos": [
        24671,
        24718
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"authentication\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Authenticate users"
    },
    {
      "content": "Mobile Apps supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account,",
      "pos": [
        24720,
        24866
      ]
    },
    {
      "content": "Twitter, and Azure Active Directory.",
      "pos": [
        24867,
        24903
      ]
    },
    {
      "content": "You can set permissions on tables to restrict access for specific operations to only authenticated users.",
      "pos": [
        24904,
        25009
      ]
    },
    {
      "content": "You",
      "pos": [
        25010,
        25013
      ]
    },
    {
      "content": "can also use the identity of authenticated users to implement authorization rules in server scripts.",
      "pos": [
        25014,
        25114
      ]
    },
    {
      "content": "For more information, see the tutorial",
      "pos": [
        25115,
        25153
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Add authentication to your app]</ept>.",
      "pos": [
        25154,
        25187
      ]
    },
    {
      "content": "Two authentication flows are supported: a <bpt id=\"p1\">_</bpt>server flow<ept id=\"p1\">_</ept> and a <bpt id=\"p2\">_</bpt>client flow<ept id=\"p2\">_</ept>.",
      "pos": [
        25189,
        25265
      ]
    },
    {
      "content": "The server flow provides the simplest authentication experience, as it",
      "pos": [
        25266,
        25336
      ]
    },
    {
      "content": "relies on the provider's web authentication interface.",
      "pos": [
        25337,
        25391
      ]
    },
    {
      "content": "The client flow allows for deeper integration with device-specific capabilities as it relies",
      "pos": [
        25392,
        25484
      ]
    },
    {
      "content": "on provider-specific device-specific SDKs.",
      "pos": [
        25485,
        25527
      ]
    },
    {
      "content": "In either case, you must register your app with your identity provider.",
      "pos": [
        25529,
        25600
      ]
    },
    {
      "content": "Your identity provider will provide a client ID and a client secret.",
      "pos": [
        25602,
        25670
      ]
    },
    {
      "content": "You",
      "pos": [
        25672,
        25675
      ]
    },
    {
      "content": "must then configure Azure App Service Authentication / Authorization with the client ID and cleint secret provided by your identity provider.",
      "pos": [
        25676,
        25817
      ]
    },
    {
      "content": "For",
      "pos": [
        25819,
        25822
      ]
    },
    {
      "content": "more information, follow the detailed instructions in the tutorial <bpt id=\"p1\">[</bpt><ept id=\"p1\">Add authentication to your app]</ept>.",
      "pos": [
        25823,
        25923
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"serverflow\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Server flow",
      "pos": [
        25928,
        25964
      ]
    },
    {
      "content": "Once you have registered your identity provider, call the MobileServiceCleint.[LoginAsync method] with the <bpt id=\"p1\">[</bpt><ept id=\"p1\">MobileServiceAuthenticationProvider]</ept> value",
      "pos": [
        25965,
        26115
      ]
    },
    {
      "content": "of your provider.",
      "pos": [
        26116,
        26133
      ]
    },
    {
      "content": "For example, the following code initiates a server flow sign-in by using Facebook.",
      "pos": [
        26134,
        26216
      ]
    },
    {
      "pos": [
        26950,
        27104
      ],
      "content": "If you are using an identity provider other than Facebook, change the value of <bpt id=\"p1\">[</bpt><ept id=\"p1\">MobileServiceAuthenticationProvider]</ept> above to the value for your provider."
    },
    {
      "content": "In a server flow, Azure App Service manages the OAuth 2.0 authentication flow by displaying the sign-in page of the selected provider and generating an App Service",
      "pos": [
        27106,
        27269
      ]
    },
    {
      "content": "authentication token after successful sign-on with the identity provider.",
      "pos": [
        27270,
        27343
      ]
    },
    {
      "content": "The [LoginAsync method] returns a <bpt id=\"p1\">[</bpt><ept id=\"p1\">MobileServiceUser]</ept>, which provides both the <bpt id=\"p2\">[</bpt><ept id=\"p2\">UserId]</ept>\nof the authenticated user and the <bpt id=\"p3\">[</bpt><ept id=\"p3\">MobileServiceAuthenticationToken]</ept>, as a JSON web token (JWT).",
      "pos": [
        27344,
        27528
      ]
    },
    {
      "content": "This token can be cached and re-used until it expires.",
      "pos": [
        27529,
        27583
      ]
    },
    {
      "content": "For more",
      "pos": [
        27584,
        27592
      ]
    },
    {
      "content": "information, see <bpt id=\"p1\">[</bpt>Caching the authentication token<ept id=\"p1\">](#caching)</ept>.",
      "pos": [
        27593,
        27655
      ]
    },
    {
      "pos": [
        27660,
        27697
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"client-flow\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Client flow"
    },
    {
      "content": "Your app can also independently contact the identity provider and then provide the returned token to App Service for authentication.",
      "pos": [
        27699,
        27831
      ]
    },
    {
      "content": "This client flow enables you",
      "pos": [
        27832,
        27860
      ]
    },
    {
      "content": "to provide a single sign-in experience for users or to retrieve additional user data from the identity provider.",
      "pos": [
        27861,
        27973
      ]
    },
    {
      "content": "Single sign-in using a token from Facebook or Google",
      "pos": [
        27979,
        28031
      ]
    },
    {
      "content": "In the most simplified form, you can use the client flow as shown in this snippet for Facebook or Google.",
      "pos": [
        28033,
        28138
      ]
    },
    {
      "content": "Single sign-in using Microsoft Account with the Live SDK",
      "pos": [
        29208,
        29264
      ]
    },
    {
      "content": "To be able to authenticate users, you must register your app at the Microsoft account Developer Center.",
      "pos": [
        29266,
        29369
      ]
    },
    {
      "content": "You must then connect this registration with",
      "pos": [
        29370,
        29414
      ]
    },
    {
      "content": "your Mobile App backend.",
      "pos": [
        29415,
        29439
      ]
    },
    {
      "content": "Complete the steps in <bpt id=\"p1\">[</bpt><ept id=\"p1\">Register your app to use a Microsoft account login]</ept> to create a Microsoft account registration and",
      "pos": [
        29440,
        29561
      ]
    },
    {
      "content": "connect it to your Mobile App backend.",
      "pos": [
        29562,
        29600
      ]
    },
    {
      "content": "If you have both Windows Store and Windows Phone 8/Silverlight versions of your app, register the",
      "pos": [
        29601,
        29698
      ]
    },
    {
      "content": "Windows Store version first.",
      "pos": [
        29699,
        29727
      ]
    },
    {
      "content": "The following code authenticates using Live SDK and uses the returned token to sign-in to your Mobile App backend.",
      "pos": [
        29729,
        29843
      ]
    },
    {
      "pos": [
        32085,
        32162
      ],
      "content": "Refer to the documentation for more information about the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Windows Live SDK]</ept>."
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"caching\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Caching the authentication token",
      "pos": [
        32167,
        32221
      ]
    },
    {
      "content": "In some cases, the call to the login method can be avoided after the first time the user authenticates.",
      "pos": [
        32222,
        32325
      ]
    },
    {
      "content": "You can use <bpt id=\"p1\">[</bpt><ept id=\"p1\">PasswordVault]</ept> for",
      "pos": [
        32326,
        32357
      ]
    },
    {
      "content": "Windows Store apps to cache the current user identity the first time they log in and every subsequent time you check whether you already",
      "pos": [
        32358,
        32494
      ]
    },
    {
      "content": "have the user identity in our cache.",
      "pos": [
        32495,
        32531
      ]
    },
    {
      "content": "When the cache is empty, you still need to send the user through the login process.",
      "pos": [
        32532,
        32615
      ]
    },
    {
      "pos": [
        33514,
        33653
      ],
      "content": "For Windows Phone apps, you may encrypt and cache data using the <bpt id=\"p1\">[</bpt><ept id=\"p1\">ProtectedData]</ept> class and store sensitive information in isolated storage."
    },
    {
      "content": "--&gt;",
      "pos": [
        33655,
        33658
      ]
    },
    {
      "pos": [
        33664,
        33750
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"adal\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Authenticate users with the Active Directory Authentication Library"
    },
    {
      "content": "You can use the Active Directory Authentication Library (ADAL) to sign users into your application using Azure Active Directory.",
      "pos": [
        33752,
        33880
      ]
    },
    {
      "content": "This is",
      "pos": [
        33881,
        33888
      ]
    },
    {
      "content": "often preferable to using the <ph id=\"ph1\">`loginAsync()`</ph> methods, as it provides a more native UX feel and allows for additional customization.",
      "pos": [
        33889,
        34020
      ]
    },
    {
      "content": "Configure your mobile app backend for AAD sign-in by followin the <bpt id=\"p1\">[</bpt><ept id=\"p1\">How to configure App Service for Active Directory login]</ept> tutorial.",
      "pos": [
        34025,
        34158
      ]
    },
    {
      "content": "Make sure to complete the optional step of registering a native client application.",
      "pos": [
        34159,
        34242
      ]
    },
    {
      "content": "In Visual Studio or Xamarin Studio, open your project and add a reference to the <ph id=\"ph1\">`Microsoft.IdentityModel.CLients.ActiveDirectory`</ph>",
      "pos": [
        34247,
        34377
      ]
    },
    {
      "content": "NuGet package.",
      "pos": [
        34378,
        34392
      ]
    },
    {
      "content": "When searching, include prerelease versions.",
      "pos": [
        34393,
        34437
      ]
    },
    {
      "content": "Add the below code to your application, according to the platform you are using.",
      "pos": [
        34442,
        34522
      ]
    },
    {
      "content": "In each, make the following replacements:",
      "pos": [
        34523,
        34564
      ]
    },
    {
      "pos": [
        34568,
        34857
      ],
      "content": "Replace **INSERT-AUTHORITY-HERE** with the name of the tenant in which you provisioned your application. The format should be\nhttps://login.windows.net/contoso.onmicrosoft.com. This value can be copied out of the Domain tab in your Azure Active Directory\nin the [Azure Classic portal].",
      "leadings": [
        "",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "Replace **INSERT-AUTHORITY-HERE** with the name of the tenant in which you provisioned your application. The format should be",
          "pos": [
            0,
            125
          ],
          "nodes": [
            {
              "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-AUTHORITY-HERE<ept id=\"p1\">**</ept> with the name of the tenant in which you provisioned your application.",
              "pos": [
                0,
                104
              ]
            },
            {
              "content": "The format should be",
              "pos": [
                105,
                125
              ]
            }
          ]
        },
        {
          "content": "https://login.windows.net/contoso.onmicrosoft.com. This value can be copied out of the Domain tab in your Azure Active Directory",
          "pos": [
            126,
            254
          ],
          "nodes": [
            {
              "content": "https://login.windows.net/contoso.onmicrosoft.com.",
              "pos": [
                0,
                50
              ]
            },
            {
              "content": "This value can be copied out of the Domain tab in your Azure Active Directory",
              "pos": [
                51,
                128
              ]
            }
          ]
        },
        {
          "content": "in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Classic portal]</ept>.",
          "pos": [
            255,
            285
          ]
        }
      ]
    },
    {
      "pos": [
        34861,
        35049
      ],
      "content": "Replace **INSERT-RESOURCE-ID-HERE** with the client ID for your mobile app backend. You can obtain this from the **Advanced**\ntab under **Azure Active Directory Settings** in the portal.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Replace **INSERT-RESOURCE-ID-HERE** with the client ID for your mobile app backend. You can obtain this from the **Advanced**",
          "pos": [
            0,
            125
          ],
          "nodes": [
            {
              "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-RESOURCE-ID-HERE<ept id=\"p1\">**</ept> with the client ID for your mobile app backend.",
              "pos": [
                0,
                83
              ]
            },
            {
              "content": "You can obtain this from the <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept>",
              "pos": [
                84,
                125
              ]
            }
          ]
        },
        {
          "content": "tab under <bpt id=\"p1\">**</bpt>Azure Active Directory Settings<ept id=\"p1\">**</ept> in the portal.",
          "pos": [
            126,
            186
          ]
        }
      ]
    },
    {
      "pos": [
        35053,
        35152
      ],
      "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-CLIENT-ID-HERE<ept id=\"p1\">**</ept> with the client ID you copied from the native client application."
    },
    {
      "pos": [
        35156,
        35351
      ],
      "content": "Replace **INSERT-REDIRECT-URI-HERE** with your site's _/.auth/login/done_ endpoint, using the HTTPS scheme. This value should be\nsimilar to _https://contoso.azurewebsites.net/.auth/login/done_.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Replace **INSERT-REDIRECT-URI-HERE** with your site's _/.auth/login/done_ endpoint, using the HTTPS scheme. This value should be",
          "pos": [
            0,
            128
          ],
          "nodes": [
            {
              "content": "Replace <bpt id=\"p1\">**</bpt>INSERT-REDIRECT-URI-HERE<ept id=\"p1\">**</ept> with your site's <bpt id=\"p2\">_</bpt>/.auth/login/done<ept id=\"p2\">_</ept> endpoint, using the HTTPS scheme.",
              "pos": [
                0,
                107
              ]
            },
            {
              "content": "This value should be",
              "pos": [
                108,
                128
              ]
            }
          ]
        },
        {
          "content": "similar to <bpt id=\"p1\">_</bpt>https://contoso.azurewebsites.net/.auth/login/done<ept id=\"p1\">_</ept>.",
          "pos": [
            129,
            193
          ]
        }
      ]
    },
    {
      "content": "The code needed for each platform follows:",
      "pos": [
        35353,
        35395
      ]
    },
    {
      "content": "Windows:",
      "pos": [
        35399,
        35407
      ]
    },
    {
      "content": "Xamarin.iOS",
      "pos": [
        36694,
        36705
      ]
    },
    {
      "content": "Xamarin.Android",
      "pos": [
        37641,
        37656
      ]
    },
    {
      "pos": [
        38993,
        39039
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"pushnotifications\"&gt;</ph>Push Notifications"
    },
    {
      "content": "The following topics cover Push Notifications:",
      "pos": [
        39041,
        39087
      ]
    },
    {
      "content": "Register for Push Notifications",
      "pos": [
        39092,
        39123
      ]
    },
    {
      "content": "Obtain a Windows Store package SID",
      "pos": [
        39148,
        39182
      ]
    },
    {
      "content": "Register with Cross-platform templates",
      "pos": [
        39201,
        39239
      ]
    },
    {
      "pos": [
        39262,
        39333
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"register-for-push\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Register for Push Notifications"
    },
    {
      "content": "The Mobile Apps client enables you to register for push notifications with Azure Notification Hubs.",
      "pos": [
        39335,
        39434
      ]
    },
    {
      "content": "When registering, you obtain a handle that you obtain from the",
      "pos": [
        39435,
        39497
      ]
    },
    {
      "content": "platform-specific Push Notification Service (PNS).",
      "pos": [
        39498,
        39548
      ]
    },
    {
      "content": "You then provide this value along with any tags when you create the registration.",
      "pos": [
        39549,
        39630
      ]
    },
    {
      "content": "The following code registers your",
      "pos": [
        39631,
        39664
      ]
    },
    {
      "content": "Windows app for push notifications with the Windows Notification Service (WNS):",
      "pos": [
        39665,
        39744
      ]
    },
    {
      "content": "If you are pushing to WNS, then you MUST obtain a Windows Store package SID (see below).",
      "pos": [
        40105,
        40193
      ]
    },
    {
      "content": "Note that in this example, two tags are included with the registration.",
      "pos": [
        40194,
        40265
      ]
    },
    {
      "content": "For more",
      "pos": [
        40266,
        40274
      ]
    },
    {
      "content": "information on Windows apps, including how to register for template registrations,  see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Add push notifications to your app]</ept>.",
      "pos": [
        40275,
        40400
      ]
    },
    {
      "content": "Note that requesting tags from the client is not supported.",
      "pos": [
        40402,
        40461
      ]
    },
    {
      "content": "Tag Requests are silently dropped from registration.",
      "pos": [
        40463,
        40515
      ]
    },
    {
      "content": "If you wish to register your device with tags,",
      "pos": [
        40517,
        40563
      ]
    },
    {
      "content": "create a Custom API that uses the Notification Hubs API to perform the registration on your behalf.",
      "pos": [
        40564,
        40663
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Call the Custom API<ept id=\"p1\">](#customapi)</ept> instead of the",
      "pos": [
        40665,
        40713
      ]
    },
    {
      "content": "<ph id=\"ph1\">`RegisterNativeAsync()`</ph> method.",
      "pos": [
        40714,
        40745
      ]
    },
    {
      "pos": [
        40750,
        40818
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"package-sid\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Obtain a Windows Store package SID"
    },
    {
      "content": "A package SID is needed for enabling push notifications in Windows Store apps.",
      "pos": [
        40820,
        40898
      ]
    },
    {
      "content": "The package SID is also used for other things (such as Windows Single Sign-in).",
      "pos": [
        40900,
        40979
      ]
    },
    {
      "content": "You",
      "pos": [
        40981,
        40984
      ]
    },
    {
      "content": "need to register your application with the Windows Store in order to receive a package SID.",
      "pos": [
        40985,
        41076
      ]
    },
    {
      "content": "To obtain this value:",
      "pos": [
        41078,
        41099
      ]
    },
    {
      "pos": [
        41104,
        41237
      ],
      "content": "In Visual Studio Solution Explorer, right-click the Windows Store app project, click <bpt id=\"p1\">**</bpt>Store<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Associate App with the Store...<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        41241,
        41388
      ],
      "content": "In the wizard, click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>, sign in with your Microsoft account, type a name for your app in <bpt id=\"p2\">**</bpt>Reserve a new app name<ept id=\"p2\">**</ept>, then click <bpt id=\"p3\">**</bpt>Reserve<ept id=\"p3\">**</ept>."
    },
    {
      "content": "After the app registration is successfully created, select the new app name, click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Associate<ept id=\"p2\">**</ept>.",
      "pos": [
        41392,
        41514
      ]
    },
    {
      "content": "This adds the required Windows Store registration information to the application manifest.",
      "pos": [
        41515,
        41605
      ]
    },
    {
      "content": "Log into the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Windows Dev Center]</ept> using your Microsoft Account.",
      "pos": [
        41609,
        41672
      ]
    },
    {
      "content": "Under <bpt id=\"p1\">**</bpt>My apps<ept id=\"p1\">**</ept>, click the app registration you just created.",
      "pos": [
        41673,
        41736
      ]
    },
    {
      "pos": [
        41740,
        41835
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>App management<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>App identity<ept id=\"p2\">**</ept>, and then scroll down to find your <bpt id=\"p3\">**</bpt>Package SID<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Many uses of the package SID treat it as a URI, in which case you will need to use <bpt id=\"p1\">_</bpt>ms-app://<ept id=\"p1\">_</ept> as the scheme.",
      "pos": [
        41837,
        41946
      ]
    },
    {
      "content": "Make note of the version of your package SID formed by concatenating this value as a prefix.",
      "pos": [
        41947,
        42039
      ]
    },
    {
      "content": "Xamarin apps require some additional code to be able to register an app running on iOS or Android app with the Apple Push Notification Service (APNS) and Google",
      "pos": [
        42041,
        42201
      ]
    },
    {
      "content": "Cloud Messaging (GCM) services, respectively.",
      "pos": [
        42202,
        42247
      ]
    },
    {
      "content": "For more information see the topic for your platform:",
      "pos": [
        42248,
        42301
      ]
    },
    {
      "content": "Xamarin.Android",
      "pos": [
        42306,
        42321
      ]
    },
    {
      "content": "Xamarin.iOS",
      "pos": [
        42391,
        42402
      ]
    },
    {
      "pos": [
        42469,
        42566
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"register-xplat\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Register push templates to send cross-platform notifications"
    },
    {
      "pos": [
        42568,
        42655
      ],
      "content": "To register templates, use the <ph id=\"ph1\">`RegisterAsync()`</ph> method with the templates, as follows:"
    },
    {
      "content": "Your templates will be of type JObject and can contain multiple templates in the following JSON format:",
      "pos": [
        42772,
        42875
      ]
    },
    {
      "pos": [
        43615,
        43675
      ],
      "content": "The method <bpt id=\"p1\">**</bpt>RegisterAsync()<ept id=\"p1\">**</ept> also accepts Secondary Tiles:"
    },
    {
      "content": "Note that all tags will be stripped away for security.",
      "pos": [
        43787,
        43841
      ]
    },
    {
      "content": "To add tags to installations or templates within installations, see",
      "pos": [
        43842,
        43909
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Work with the .NET backend server SDK for Azure Mobile Apps]</ept>.",
      "pos": [
        43910,
        43972
      ]
    },
    {
      "pos": [
        43974,
        44072
      ],
      "content": "To send notifications utilizing these registered templates, refer to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Notification Hubs APIs]</ept>."
    },
    {
      "pos": [
        44076,
        44115
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"misc\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Miscellaneous Topics"
    },
    {
      "pos": [
        44120,
        44162
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"errors\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Handle errors"
    },
    {
      "content": "When an error occurs in the backend, the client SDK will raise a <ph id=\"ph1\">`MobileServiceInvalidOperationException`</ph>.",
      "pos": [
        44164,
        44270
      ]
    },
    {
      "content": "The following example shows",
      "pos": [
        44272,
        44299
      ]
    },
    {
      "content": "how to handle an exception that is returned by the backend:",
      "pos": [
        44300,
        44359
      ]
    },
    {
      "content": "Another example of dealing with error conditions can be found in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Mobile Apps Files Sample]</ept> - the <bpt id=\"p2\">[</bpt><ept id=\"p2\">LoggingHandler]</ept>\nexample provides a logging delegate handler (see below) to log the requests being made to the backend.",
      "pos": [
        44831,
        45052
      ]
    },
    {
      "content": "This provides",
      "pos": [
        45054,
        45067
      ]
    },
    {
      "content": "an easier way to debug Xamarin applications rather than relying on Fiddler.",
      "pos": [
        45068,
        45143
      ]
    },
    {
      "pos": [
        45148,
        45203
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"headers\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Customize request headers"
    },
    {
      "content": "To support your specific app scenario, you might need to customize communication with the Mobile App backend.",
      "pos": [
        45205,
        45314
      ]
    },
    {
      "content": "For example, you may want to add a",
      "pos": [
        45315,
        45349
      ]
    },
    {
      "content": "custom header to every outgoing request or even change responses status codes.",
      "pos": [
        45350,
        45428
      ]
    },
    {
      "content": "You can do this by providing a custom <bpt id=\"p1\">[</bpt><ept id=\"p1\">DelegatingHandler]</ept>, as in",
      "pos": [
        45429,
        45493
      ]
    },
    {
      "content": "the following example:",
      "pos": [
        45494,
        45516
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Working with the App Service Mobile Apps managed client library (Windows | Xamarin) | Microsoft Azure\"\n    description=\"Learn how to use a .NET client for Azure App Service Mobile Apps with Windows and Xamarin apps.\"\n    services=\"app-service\\mobile\"\n    documentationCenter=\"\"\n    authors=\"ggailey777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-mobile\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-multiple\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.date=\"03/08/2016\"\n    ms.author=\"glenga\"/>\n\n# How to use the managed client for Azure Mobile Apps\n\n[AZURE.INCLUDE [app-service-mobile-selector-client-library](../../includes/app-service-mobile-selector-client-library.md)]\n\n##Overview\n\nThis guide shows you how to perform common scenarios using the managed client library for Azure App Service Mobile Apps for Windows and Xamarin apps. If\nyou are new to Mobile Apps, you should consider first completing the [Azure Mobile Apps quickstart] tutorial. In this guide, we focus on the client-side\nmanaged SDK. To learn more about the server-side SDKs for Mobile Apps, see the HOWTO documentation for the [.NET Server SDK](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)\nor the [Node.js Server SDK](app-service-mobile-node-backend-how-to-use-server-sdk.md).\n\n## Reference documentation\n\nThe reference documentation for the client SDK is located here: [Azure Mobile Apps .NET Client Reference].\nYou can also find several client samples in the [Azure-Samples GitHub Repository].\n\n##<a name=\"setup\"></a>Setup and Prerequisites\n\nWe assume that you have already created and published your Mobile App backend project, which includes at one table.  In the code used in this topic, the\ntable is named `TodoItem` and it will have the following columns: `Id`, `Text`, and `Complete`. This is the same table created when you complete the\n[Azure Mobile Apps quickstart].\n\nThe corresponding typed client-side type in C# is the following:\n\n    public class TodoItem\n    {\n        public string Id { get; set; }\n\n        [JsonProperty(PropertyName = \"text\")]\n        public string Text { get; set; }\n\n        [JsonProperty(PropertyName = \"complete\")]\n        public bool Complete { get; set; }\n    }\n\nNote that the [JsonPropertyAttribute] is used to define the *PropertyName* mapping between the client type and the table.\n\nTo learn how to create new tables in your Mobile Apps backend, see the information in the [.NET Server SDK HOWTO](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#define-table-controller)\nor the [Node.js Server SDK HOWTO](app-service-mobile-node-backend-how-to-use-server-sdk.md#howto-dynamicschema). If you\ncreated your Mobile App backend in the Azure Portal using the QuickStart, you can also use the **Easy tables** setting in the [Azure portal].\n\n###<a name=\"symbolsource\"></a>How to: Work with debug symbols in Visual Studio\n\nThe symbols for the Microsoft.Azure.Mobile namespace are available on [SymbolSource].  Refer to the [SymbolSource instructions]\nto integrate SymbolSource with Visual Studio.\n\n##<a name=\"create-client\"></a>Create the Mobile App client\n\nThe following code creates the [MobileServiceClient] object that is used to access your Mobile App backend.\n\n    MobileServiceClient client = new MobileServiceClient(\"MOBILE_APP_URL\");\n\nIn the code above, replace `MOBILE_APP_URL` with the URL of the Mobile App backend, which is found in the blade for your Mobile App backend in the [Azure portal].\nIt is normal and recommended that the client instance be a Singleton.\n\n## Work with Tables\n\nThe following section details how to search and retrieve records and modify the data within the table.  The following\ntopics are covered:\n\n* [Create a table reference](#instantiating)\n* [Query data](#querying)\n* [Filter returned data](#filtering)\n* [Sort returned data](#sorting)\n* [Return data in pages](#paging)\n* [Select specific columns](#selecting)\n* [Look up a record by Id](#lookingup)\n* [Dealing with untyped queries](#untypedqueries)\n* [Inserting data](#inserting)\n* [Updating data](#updating)\n* [Deleting data](#deleting)\n* [Conflict Resolution and Optimistic Concurrency](#optimisticconcurrency)\n* [Binding to a Windows User Interface](#binding)\n\n###<a name=\"instantiating\"></a>How to: Create a table reference\n\nAll of the code that accesses or modifies data in a backend table calls functions on the `MobileServiceTable` object. You get a reference to the table by calling the\n[GetTable] method on an instance of the `MobileServiceClient`, as follows:\n\n    IMobileServiceTable<TodoItem> todoTable = client.GetTable<TodoItem>();\n\nThis is the typed serialization model. An untyped serialization model is also supported. The following [creates a reference to an untyped table]:\n\n    // Get an untyped table reference\n    IMobileServiceTable untypedTodoTable = client.GetTable(\"TodoItem\");\n\nIn untyped queries, you must specify the underlying OData query string.\n\n###<a name=\"querying\"></a>How to: Query data from your Mobile App\n\nThis section describes how to issue queries to the Mobile App backend, which includes the following functionality:\n\n- [Filter returned data]\n- [Sort returned data]\n- [Return data in pages]\n- [Select specific columns]\n- [Look up data by ID]\n\n>[AZURE.NOTE] A server-driven page size is enforced to prevent all rows from being returned. This keeps default requests\n> for large data sets from negatively impacting the service.  To return more than 50 rows, use the `Take` method, as\n> described in [Return data in pages].\n\n###<a name=\"filtering\"></a>How to: Filter returned data\n\nThe following code illustrates how to filter data by including a `Where` clause in a query. It returns all items from\n`todoTable` whose `Complete` property is equal to `false`. The [Where] function applies a row filtering predicate to\nthe query against the table.\n\n    // This query filters out completed TodoItems and items without a timestamp.\n    List<TodoItem> items = await todoTable\n       .Where(todoItem => todoItem.Complete == false)\n       .ToListAsync();\n\nYou can view the URI of the request sent to the backend by using message inspection software, such as browser developer\ntools or [Fiddler]. If you look at the request URI below, notice that the query string is modified:\n\n    GET /tables/todoitem?$filter=(complete+eq+false) HTTP/1.1\n\nThis OData request is translated into an SQL query by the Server SDK that is similar to this:\n\n    SELECT *\n    FROM TodoItem\n    WHERE ISNULL(complete, 0) = 0\n\nThe function which is passed to the `Where` method can have an arbitrary number of conditions. For example, the line below:\n\n    // This query filters out completed TodoItems where Text isn't null\n    List<TodoItem> items = await todoTable\n       .Where(todoItem => todoItem.Complete == false && todoItem.Text != null)\n       .ToListAsync();\n\nWould be translated into an SQL query by the Server SDK that is similar to this:\n\n    SELECT *\n    FROM TodoItem\n    WHERE ISNULL(complete, 0) = 0\n          AND ISNULL(text, 0) = 0\n\nThe `WHERE` statement above will find items with `Complete` status set to false with non-null `Text`.\n\nThis query can also be split into multiple clauses:\n\n    List<TodoItem> items = await todoTable\n       .Where(todoItem => todoItem.Complete == false)\n       .Where(todoItem => todoItem.Text != null)\n       .ToListAsync();\n\nThe two methods are equivalent and may be used interchangeably.  The former option&mdash;of concatenating\nmultiple predicates in one query&mdash;is more compact and recommended.\n\nThe `Where` clause supports operations that be translated into the OData subset. This includes relational\noperators (==, !=, <, <=, >, >=), arithmetic operators (+, -, /, *, %),\nnumber precision (Math.Floor, Math.Ceiling), string functions (Length, Substring, Replace, IndexOf, StartsWith,\nEndsWith), date properties (Year, Month, Day, Hour, Minute, Second), access properties of an object, and\nexpressions combining all of these.  When considering what the Server SDK supports, you can consider\nthe [OData v3 Documentation].\n\n###<a name=\"sorting\"></a>How to: Sort returned data\n\nThe following code illustrates how to sort data by including an [OrderBy] or [OrderByDescending] function\nin the query. It returns items from `todoTable` sorted ascending by the `Text` field.\n\n    // Sort items in ascending order by Text field\n    MobileServiceTableQuery<TodoItem> query = todoTable\n                    .OrderBy(todoItem => todoItem.Text)\n    List<TodoItem> items = await query.ToListAsync();\n\n    // Sort items in descending order by Text field\n    MobileServiceTableQuery<TodoItem> query = todoTable\n                    .OrderByDescending(todoItem => todoItem.Text)\n    List<TodoItem> items = await query.ToListAsync();\n\n###<a name=\"paging\"></a>How to: Return data in pages\n\nBy default, the backend returns only the first 50 rows. You can increase the number of returned rows by calling the [Take] method. Use `Take` along with the [Skip] method\nto request a specific \"page\" of the total dataset returned by the query. The following query, when executed, returns the top three items in the table.\n\n    // Define a filtered query that returns the top 3 items.\n    MobileServiceTableQuery<TodoItem> query = todoTable\n                    .Take(3);\n    List<TodoItem> items = await query.ToListAsync();\n\nThe following revised query skips the first three results and returns the next three after that. This is effectively the second \"page\" of data, where the page size is three items.\n\n    // Define a filtered query that skips the top 3 items and returns the next 3 items.\n    MobileServiceTableQuery<TodoItem> query = todoTable\n                    .Skip(3)\n                    .Take(3);\n    List<TodoItem> items = await query.ToListAsync();\n\nYou can also use the [IncludeTotalCount] method to ensure that the query will get the total count for <i>all</i> the records that would have been returned, ignoring any take\npaging/limit clause specified:\n\n    query = query.IncludeTotalCount();\n\nThis is a simplified scenario of passing hard-coded paging values to the `Take` and `Skip` methods. In a real-world app, you can use queries similar to the above with a pager\ncontrol or comparable UI to let users navigate to previous and next pages.\n\n>[AZURE.NOTE]To override the 50 row limit in a Mobile App backend, you must also apply the [EnableQueryAttribute] to the public GET method and specify the paging behavior. When\n>applied to the method, the following sets the maximum returned rows to 1000:\n>\n>    [EnableQuery(MaxTop=1000)]\n\n### <a name=\"selecting\"></a>How to: Select specific columns\n\nYou can specify which set of properties to include in the results by adding a [Select] clause to your query. For example, the following code shows how to select just one field\nand also how to select and format multiple fields:\n\n    // Select one field -- just the Text\n    MobileServiceTableQuery<TodoItem> query = todoTable\n                    .Select(todoItem => todoItem.Text);\n    List<string> items = await query.ToListAsync();\n\n    // Select multiple fields -- both Complete and Text info\n    MobileServiceTableQuery<TodoItem> query = todoTable\n                    .Select(todoItem => string.Format(\"{0} -- {1}\",\n                        todoItem.Text.PadRight(30), todoItem.Complete ?\n                        \"Now complete!\" : \"Incomplete!\"));\n    List<string> items = await query.ToListAsync();\n\nAll the functions described so far are additive, so we can just keep calling them and we'll each time affect more of the query. One more example:\n\n    MobileServiceTableQuery<TodoItem> query = todoTable\n                    .Where(todoItem => todoItem.Complete == false)\n                    .Select(todoItem => todoItem.Text)\n                    .Skip(3).\n                    .Take(3);\n    List<string> items = await query.ToListAsync();\n\n### <a name=\"lookingup\"></a>How to: Look up data by ID\n\nThe [LookupAsync] function can be used to look up objects from the database with a particular ID.\n\n    // This query filters out the item with the ID of 37BBF396-11F0-4B39-85C8-B319C729AF6D\n    TodoItem item = await todoTable.LookupAsync(\"37BBF396-11F0-4B39-85C8-B319C729AF6D\");\n\n### <a name=\"untypedqueries\"></a>How to: Execute untyped queries\n\nWhen executing a query using an untyped table object, you must explicitly specify the OData query string by calling [ReadAsync], as in the following example:\n\n    // Lookup untyped data using OData\n    JToken untypedItems = await untypedTodoTable.ReadAsync(\"$filter=complete eq 0&$orderby=text\");\n\nYou get back JSON values that you can use like a property bag. For more information on JToken and Newtonsoft Json.NET, see the [Json.NET] site.\n\n### <a name=\"inserting\"></a>How to: Insert data into a Mobile App backend\n\nAll client types must contain a member named **Id**, which is by default a string. This **Id** is required to perform CRUD operations and for offline. The following\ncode illustrates how to use the [InsertAsync] method to insert new rows into a table. The parameter contains the data to be inserted as a .NET object.\n\n    await todoTable.InsertAsync(todoItem);\n\nIf a unique custom ID value is not included in the `todoItem` passed to the `todoTable.InsertAsync` call, a value for ID is generated by the server and is set in\nthe `todoItem` object returned to the client.\n\nTo insert untyped data, you may take advantage of Json.NET as shown below.\n\n    JObject jo = new JObject();\n    jo.Add(\"Text\", \"Hello World\");\n    jo.Add(\"Complete\", false);\n    var inserted = await table.InsertAsync(jo);\n\nHere is an example using an email address as a unique string id.\n\n    JObject jo = new JObject();\n    jo.Add(\"id\", \"myemail@emaildomain.com\");\n    jo.Add(\"Text\", \"Hello World\");\n    jo.Add(\"Complete\", false);\n    var inserted = await table.InsertAsync(jo);\n\n###Working with ID values\n\nMobile Apps supports unique custom string values for the table's **id** column. This allows applications to use custom values such as email addresses or user names for the ID.\n\nString IDs provide you with the following benefits:\n\n* IDs are generated without making a round-trip to the database.\n* Records are easier to merge from different tables or databases.\n* IDs values can integrate better with an application's logic.\n\nWhen a string ID value is not set on an inserted record, the Mobile App backend generates a unique value for the ID. You can use the [Guid.NewGuid] method\nto generate your own ID values, either on the client or in the backend.\n\n    JObject jo = new JObject();\n    jo.Add(\"id\", Guid.NewGuid().ToString(\"N\"));\n\n###<a name=\"modifying\"></a>How to: Modify data in a Mobile App backend\n\nThe following code illustrates how to use the [UpdateAsync] method to update an existing record with the same ID with new information. The\nparameter contains the data to be updated as a .NET object.\n\n    await todoTable.UpdateAsync(todoItem);\n\nTo insert untyped data, you may take advantage of [Json.NET] as follows:\n\n    JObject jo = new JObject();\n    jo.Add(\"id\", \"37BBF396-11F0-4B39-85C8-B319C729AF6D\");\n    jo.Add(\"Text\", \"Hello World\");\n    jo.Add(\"Complete\", false);\n    var inserted = await table.UpdateAsync(jo);\n\nAn `id` field must be specified when making an update. This is how the backend identifies which instance to update. The `id` field can be obtained from the\nresult of the `InsertAsync` call. An `ArgumentException` is raised if you try to update an item without providing the `id` value.\n\n###<a name=\"deleting\"></a>How to: Delete data in a Mobile App backend\n\nThe following code illustrates how to use the [DeleteAsync] method to delete an existing instance. The instance is identified by the `id` field set on the `todoItem`.\n\n    await todoTable.DeleteAsync(todoItem);\n\nTo delete untyped data, you may take advantage of Json.NET as follows:\n\n    JObject jo = new JObject();\n    jo.Add(\"id\", \"37BBF396-11F0-4B39-85C8-B319C729AF6D\");\n    await table.DeleteAsync(jo);\n\nNote that when you make a delete request, an ID must be specified. Other properties are not passed to the service or are ignored at the service. The result of a\n`DeleteAsync` call is usually `null`. The ID to pass in can be obtained from the result of the `InsertAsync` call. A `MobileServiceInvalidOperationException` is\nthrown when you try to delete an item without specifying the `id` field.\n\n###<a name=\"optimisticconcurrency\"></a>How to: Use Optimistic Concurrency for conflict resolution\n\nTwo or more clients may write changes to the same item at the same time. Without any conflict detection, the last write would overwrite any previous updates even\nif this was not the desired result. *Optimistic concurrency control* assumes that each transaction can commit and therefore does not use any resource locking. Before\ncommitting a transaction, optimistic concurrency control verifies that no other transaction has modified the data. If the data has been modified, the committing\ntransaction is rolled back.\n\nMobile Apps supports optimistic concurrency control by tracking changes to each item using the `version` system property column that is defined for each table\nin your Mobile App backend. Each time a record is updated, Mobile Apps sets the `version` property for that record to a new value. During each update request,\nthe `\\version` property of the record included with the request is compared to the same property for the record on the server. If the version passed with the\nrequest does not match the backend, then the client library raises a `MobileServicePreconditionFailedException<T>` exception. The type included with the exception\nis the record from the backend containing the servers version of the record. The application can then use this information to decide whether to execute the update\nrequest again with the correct `version` value from the backend to commit changes.\n\nDefine a column on the table class for the `version` system property to enable optimistic concurrency. for example:\n\n    public class TodoItem\n    {\n        public string Id { get; set; }\n\n        [JsonProperty(PropertyName = \"text\")]\n        public string Text { get; set; }\n\n        [JsonProperty(PropertyName = \"complete\")]\n        public bool Complete { get; set; }\n\n        // *** Enable Optimistic Concurrency *** //\n        [JsonProperty(PropertyName = \"version\")]\n        public byte[] Version { set; get; }\n    }\n\n\nApplications using untyped tables enable optimistic concurrency by setting the `Version` flag on the `SystemProperties` of the table as follows.\n\n    //Enable optimistic concurrency by retrieving version\n    todoTable.SystemProperties |= MobileServiceSystemProperties.Version;\n\nIn addition to enabling optimistic concurrency, you must also catch the `MobileServicePreconditionFailedException<T>` exception in your code when calling [UpdateAsync].\nResolve the conflict by applying the correct `version` to the updated record and call [UpdateAsync] with the resolved record. The following code shows how to resolve\na write conflict once detected:\n\n    private async void UpdateToDoItem(TodoItem item)\n    {\n        MobileServicePreconditionFailedException<TodoItem> exception = null;\n\n        try\n        {\n            //update at the remote table\n            await todoTable.UpdateAsync(item);\n        }\n        catch (MobileServicePreconditionFailedException<TodoItem> writeException)\n        {\n            exception = writeException;\n        }\n\n        if (exception != null)\n        {\n            // Conflict detected, the item has changed since the last query\n            // Resolve the conflict between the local and server item\n            await ResolveConflict(item, exception.Item);\n        }\n    }\n\n\n    private async Task ResolveConflict(TodoItem localItem, TodoItem serverItem)\n    {\n        //Ask user to choose the resoltion between versions\n        MessageDialog msgDialog = new MessageDialog(\n            String.Format(\"Server Text: \\\"{0}\\\" \\nLocal Text: \\\"{1}\\\"\\n\",\n            serverItem.Text, localItem.Text),\n            \"CONFLICT DETECTED - Select a resolution:\");\n\n        UICommand localBtn = new UICommand(\"Commit Local Text\");\n        UICommand ServerBtn = new UICommand(\"Leave Server Text\");\n        msgDialog.Commands.Add(localBtn);\n        msgDialog.Commands.Add(ServerBtn);\n\n        localBtn.Invoked = async (IUICommand command) =>\n        {\n            // To resolve the conflict, update the version of the item being committed. Otherwise, you will keep\n            // catching a MobileServicePreConditionFailedException.\n            localItem.Version = serverItem.Version;\n\n            // Updating recursively here just in case another change happened while the user was making a decision\n            UpdateToDoItem(localItem);\n        };\n\n        ServerBtn.Invoked = async (IUICommand command) =>\n        {\n            RefreshTodoItems();\n        };\n\n        await msgDialog.ShowAsync();\n    }\n\nFor more information, see the [Offline Data Sync in Azure Mobile Apps] topic.\n\n###<a name=\"binding\"></a>How to: Bind Mobile Apps data to a Windows user interface\n\nThis section shows how to display returned data objects using UI elements in a Windows app. You can run the following example code to\nbind to the source of the list with a query for incomplete items in `todoTable` and display it in a very simple list.  [MobileServiceCollection]\ncreates a Mobile Apps-aware binding collection.\n\n    // This query filters out completed TodoItems.\n    MobileServiceCollection<TodoItem, TodoItem> items = await todoTable\n        .Where(todoItem => todoItem.Complete == false)\n        .ToCollectionAsync();\n\n    // itemsControl is an IEnumerable that could be bound to a UI list control\n    IEnumerable itemsControl  = items;\n\n    // Bind this to a ListBox\n    ListBox lb = new ListBox();\n    lb.ItemsSource = items;\n\nSome controls in the managed runtime support an interface called [ISupportIncrementalLoading]. This interface allows controls to request extra\ndata when the user scrolls. There is built-in support for this interface for universal Windows apps via [MobileServiceIncrementalLoadingCollection],\nwhich automatically handles the calls from the controls. To use `MobileServiceIncrementalLoadingCollection` in Windows apps, do the following:\n\n    MobileServiceIncrementalLoadingCollection<TodoItem,TodoItem> items;\n    items = todoTable.Where(todoItem => todoItem.Complete == false).ToIncrementalLoadingCollection();\n\n    ListBox lb = new ListBox();\n    lb.ItemsSource = items;\n\nTo use the new collection on Windows Phone 8 and \"Silverlight\" apps, use the `ToCollection` extension methods on `IMobileServiceTableQuery<T>`\nand `IMobileServiceTable<T>`. To actually load data, call `LoadMoreItemsAsync()`.\n\n    MobileServiceCollection<TodoItem, TodoItem> items = todoTable.Where(todoItem => todoItem.Complete==false).ToCollection();\n    await items.LoadMoreItemsAsync();\n\nWhen you use the collection created by calling `ToCollectionAsync` or `ToCollection`, you get a collection which can be bound to UI controls.\nThis collection is paging-aware, i.e., a control can ask the collection to \"load more items\", and the collection will do it for the control.\nAt that point there is no user code involved, the control will start the flow. However, since the collection is loading data from the network,\nit's expected that some times this loading will fail. To handle such failures, you may override the `OnException` method on\n`MobileServiceIncrementalLoadingCollection` to handle exceptions resulting from calls to `LoadMoreItemsAsync` performed by controls.\n\nFinally, imagine that your table has many fields, but you only want to display some of them in your control. You may use the guidance in the\nsection \"[Select specific columns](#selecting)\" above to select specific columns to display in the UI.\n\n##<a name=\"#customapi\"></a>Work with a custom API\n\nA custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation. By using a\ncustom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.\n\nYou call a custom API by calling one of the [InvokeApiAsync] method overloads on the client. For example, the following line of code sends a POST request to\nthe **completeAll** API on the backend:\n\n    var result = await client.InvokeApiAsync<MarkAllResult>(\"completeAll\", System.Net.Http.HttpMethod.Post, null);\n\nNote that this a typed method call, which requires that the **MarkAllResult** return type be defined. Both typed and untyped methods are supported.\n\n\n##<a name=\"authentication\"></a>Authenticate users\n\nMobile Apps supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account,\nTwitter, and Azure Active Directory. You can set permissions on tables to restrict access for specific operations to only authenticated users. You\ncan also use the identity of authenticated users to implement authorization rules in server scripts. For more information, see the tutorial\n[Add authentication to your app].\n\nTwo authentication flows are supported: a _server flow_ and a _client flow_. The server flow provides the simplest authentication experience, as it\nrelies on the provider's web authentication interface. The client flow allows for deeper integration with device-specific capabilities as it relies\non provider-specific device-specific SDKs.\n\nIn either case, you must register your app with your identity provider.  Your identity provider will provide a client ID and a client secret.  You\nmust then configure Azure App Service Authentication / Authorization with the client ID and cleint secret provided by your identity provider.  For\nmore information, follow the detailed instructions in the tutorial [Add authentication to your app].\n\n###<a name=\"serverflow\"></a>Server flow\nOnce you have registered your identity provider, call the MobileServiceCleint.[LoginAsync method] with the [MobileServiceAuthenticationProvider] value\nof your provider. For example, the following code initiates a server flow sign-in by using Facebook.\n\n    private MobileServiceUser user;\n    private async System.Threading.Tasks.Task Authenticate()\n    {\n        while (user == null)\n        {\n            string message;\n            try\n            {\n                user = await client\n                    .LoginAsync(MobileServiceAuthenticationProvider.Facebook);\n                message =\n                    string.Format(\"You are now logged in - {0}\", user.UserId);\n            }\n            catch (InvalidOperationException)\n            {\n                message = \"You must log in. Login Required\";\n            }\n\n            var dialog = new MessageDialog(message);\n            dialog.Commands.Add(new UICommand(\"OK\"));\n            await dialog.ShowAsync();\n        }\n    }\n\nIf you are using an identity provider other than Facebook, change the value of [MobileServiceAuthenticationProvider] above to the value for your provider.\n\nIn a server flow, Azure App Service manages the OAuth 2.0 authentication flow by displaying the sign-in page of the selected provider and generating an App Service\nauthentication token after successful sign-on with the identity provider. The [LoginAsync method] returns a [MobileServiceUser], which provides both the [UserId]\nof the authenticated user and the [MobileServiceAuthenticationToken], as a JSON web token (JWT). This token can be cached and re-used until it expires. For more\ninformation, see [Caching the authentication token](#caching).\n\n###<a name=\"client-flow\"></a>Client flow\n\nYour app can also independently contact the identity provider and then provide the returned token to App Service for authentication. This client flow enables you\nto provide a single sign-in experience for users or to retrieve additional user data from the identity provider.\n\n####Single sign-in using a token from Facebook or Google\n\nIn the most simplified form, you can use the client flow as shown in this snippet for Facebook or Google.\n\n    var token = new JObject();\n    // Replace access_token_value with actual value of your access token obtained\n    // using the Facebook or Google SDK.\n    token.Add(\"access_token\", \"access_token_value\");\n\n    private MobileServiceUser user;\n    private async System.Threading.Tasks.Task Authenticate()\n    {\n        while (user == null)\n        {\n            string message;\n            try\n            {\n                // Change MobileServiceAuthenticationProvider.Facebook\n                // to MobileServiceAuthenticationProvider.Google if using Google auth.\n                user = await client.LoginAsync(MobileServiceAuthenticationProvider.Facebook, token);\n                message = string.Format(\"You are now logged in - {0}\", user.UserId);\n            }\n            catch (InvalidOperationException)\n            {\n                message = \"You must log in. Login Required\";\n            }\n\n            var dialog = new MessageDialog(message);\n            dialog.Commands.Add(new UICommand(\"OK\"));\n            await dialog.ShowAsync();\n        }\n    }\n\n####Single sign-in using Microsoft Account with the Live SDK\n\nTo be able to authenticate users, you must register your app at the Microsoft account Developer Center. You must then connect this registration with\nyour Mobile App backend. Complete the steps in [Register your app to use a Microsoft account login] to create a Microsoft account registration and\nconnect it to your Mobile App backend. If you have both Windows Store and Windows Phone 8/Silverlight versions of your app, register the\nWindows Store version first.\n\nThe following code authenticates using Live SDK and uses the returned token to sign-in to your Mobile App backend.\n\n    private LiveConnectSession session;\n    //private static string clientId = \"<microsoft-account-client-id>\";\n    private async System.Threading.Tasks.Task AuthenticateAsync()\n    {\n\n        // Get the URL the Mobile App backend.\n        var serviceUrl = App.MobileService.ApplicationUri.AbsoluteUri;\n\n        // Create the authentication client for Windows Store using the service URL.\n        LiveAuthClient liveIdClient = new LiveAuthClient(serviceUrl);\n        //// Create the authentication client for Windows Phone using the client ID of the registration.\n        //LiveAuthClient liveIdClient = new LiveAuthClient(clientId);\n\n        while (session == null)\n        {\n            // Request the authentication token from the Live authentication service.\n            // The wl.basic scope should always be requested.  Other scopes can be added\n            LiveLoginResult result = await liveIdClient.LoginAsync(new string[] { \"wl.basic\" });\n            if (result.Status == LiveConnectSessionStatus.Connected)\n            {\n                session = result.Session;\n\n                // Get information about the logged-in user.\n                LiveConnectClient client = new LiveConnectClient(session);\n                LiveOperationResult meResult = await client.GetAsync(\"me\");\n\n                // Use the Microsoft account auth token to sign in to App Service.\n                MobileServiceUser loginResult = await App.MobileService\n                    .LoginWithMicrosoftAccountAsync(result.Session.AuthenticationToken);\n\n                // Display a personalized sign-in greeting.\n                string title = string.Format(\"Welcome {0}!\", meResult.Result[\"first_name\"]);\n                var message = string.Format(\"You are now logged in - {0}\", loginResult.UserId);\n                var dialog = new MessageDialog(message, title);\n                dialog.Commands.Add(new UICommand(\"OK\"));\n                await dialog.ShowAsync();\n            }\n            else\n            {\n                session = null;\n                var dialog = new MessageDialog(\"You must log in.\", \"Login Required\");\n                dialog.Commands.Add(new UICommand(\"OK\"));\n                await dialog.ShowAsync();\n            }\n        }\n    }\n\nRefer to the documentation for more information about the [Windows Live SDK].\n\n###<a name=\"caching\"></a>Caching the authentication token\nIn some cases, the call to the login method can be avoided after the first time the user authenticates. You can use [PasswordVault] for\nWindows Store apps to cache the current user identity the first time they log in and every subsequent time you check whether you already\nhave the user identity in our cache. When the cache is empty, you still need to send the user through the login process.\n\n    // After logging in\n    PasswordVault vault = new PasswordVault();\n    vault.Add(new PasswordCredential(\"Facebook\", user.UserId, user.MobileServiceAuthenticationToken));\n\n    // Log in\n    var creds = vault.FindAllByResource(\"Facebook\").FirstOrDefault();\n    if (creds != null)\n    {\n        user = new MobileServiceUser(creds.UserName);\n        user.MobileServiceAuthenticationToken = vault.Retrieve(\"Facebook\", creds.UserName).Password;\n    }\n    else\n    {\n        // Regular login flow\n        user = new MobileServiceuser( await client\n            .LoginAsync(MobileServiceAuthenticationProvider.Facebook, token);\n        var token = new JObject();\n        // Replace access_token_value with actual value of your access token\n        token.Add(\"access_token\", \"access_token_value\");\n    }\n\n     // Log out\n    client.Logout();\n    vault.Remove(vault.Retrieve(\"Facebook\", user.UserId));\n\n\nFor Windows Phone apps, you may encrypt and cache data using the [ProtectedData] class and store sensitive information in isolated storage.\n\n-->\n\n### <a name=\"adal\"></a>Authenticate users with the Active Directory Authentication Library\n\nYou can use the Active Directory Authentication Library (ADAL) to sign users into your application using Azure Active Directory. This is\noften preferable to using the `loginAsync()` methods, as it provides a more native UX feel and allows for additional customization.\n\n1. Configure your mobile app backend for AAD sign-in by followin the [How to configure App Service for Active Directory login] tutorial.\nMake sure to complete the optional step of registering a native client application.\n\n2. In Visual Studio or Xamarin Studio, open your project and add a reference to the `Microsoft.IdentityModel.CLients.ActiveDirectory`\nNuGet package. When searching, include prerelease versions.\n\n3. Add the below code to your application, according to the platform you are using. In each, make the following replacements:\n\n* Replace **INSERT-AUTHORITY-HERE** with the name of the tenant in which you provisioned your application. The format should be\n  https://login.windows.net/contoso.onmicrosoft.com. This value can be copied out of the Domain tab in your Azure Active Directory\n  in the [Azure Classic portal].\n\n* Replace **INSERT-RESOURCE-ID-HERE** with the client ID for your mobile app backend. You can obtain this from the **Advanced**\n  tab under **Azure Active Directory Settings** in the portal.\n\n* Replace **INSERT-CLIENT-ID-HERE** with the client ID you copied from the native client application.\n\n* Replace **INSERT-REDIRECT-URI-HERE** with your site's _/.auth/login/done_ endpoint, using the HTTPS scheme. This value should be\n  similar to _https://contoso.azurewebsites.net/.auth/login/done_.\n\nThe code needed for each platform follows:\n\n**Windows:**\n\n    private MobileServiceUser user;\n    private async Task AuthenticateAsync()\n    {\n        string authority = \"INSERT-AUTHORITY-HERE\";\n        string resourceId = \"INSERT-RESOURCE-ID-HERE\";\n        string clientId = \"INSERT-CLIENT-ID-HERE\";\n        string redirectUri = \"INSERT-REDIRECT-URI-HERE\";\n        while (user == null)\n        {\n            string message;\n            try\n            {\n                AuthenticationContext ac = new AuthenticationContext(authority);\n                AuthenticationResult ar = await ac.AcquireTokenAsync(resourceId, clientId, new Uri(redirectUri), new PlatformParameters(PromptBehavior.Auto, false) );\n                JObject payload = new JObject();\n                payload[\"access_token\"] = ar.AccessToken;\n                user = await App.MobileService.LoginAsync(MobileServiceAuthenticationProvider.WindowsAzureActiveDirectory, payload);\n                message = string.Format(\"You are now logged in - {0}\", user.UserId);\n            }\n            catch (InvalidOperationException)\n            {\n                message = \"You must log in. Login Required\";\n            }\n            var dialog = new MessageDialog(message);\n            dialog.Commands.Add(new UICommand(\"OK\"));\n            await dialog.ShowAsync();\n        }\n    }\n\n**Xamarin.iOS**\n\n    private MobileServiceUser user;\n    private async Task AuthenticateAsync(UIViewController view)\n    {\n        string authority = \"INSERT-AUTHORITY-HERE\";\n        string resourceId = \"INSERT-RESOURCE-ID-HERE\";\n        string clientId = \"INSERT-CLIENT-ID-HERE\";\n        string redirectUri = \"INSERT-REDIRECT-URI-HERE\";\n        try\n        {\n            AuthenticationContext ac = new AuthenticationContext(authority);\n            AuthenticationResult ar = await ac.AcquireTokenAsync(resourceId, clientId, new Uri(redirectUri), new PlatformParameters(view));\n            JObject payload = new JObject();\n            payload[\"access_token\"] = ar.AccessToken;\n            user = await client.LoginAsync(MobileServiceAuthenticationProvider.WindowsAzureActiveDirectory, payload);\n        }\n        catch (Exception ex)\n        {\n            Console.Error.WriteLine(@\"ERROR - AUTHENTICATION FAILED {0}\", ex.Message);\n        }\n    }\n\n**Xamarin.Android**\n\n    private MobileServiceUser user;\n    private async Task AuthenticateAsync()\n    {\n        string authority = \"INSERT-AUTHORITY-HERE\";\n        string resourceId = \"INSERT-RESOURCE-ID-HERE\";\n        string clientId = \"INSERT-CLIENT-ID-HERE\";\n        string redirectUri = \"INSERT-REDIRECT-URI-HERE\";\n        try\n        {\n            AuthenticationContext ac = new AuthenticationContext(authority);\n            AuthenticationResult ar = await ac.AcquireTokenAsync(resourceId, clientId, new Uri(redirectUri), new PlatformParameters(this));\n            JObject payload = new JObject();\n            payload[\"access_token\"] = ar.AccessToken;\n            user = await client.LoginAsync(MobileServiceAuthenticationProvider.WindowsAzureActiveDirectory, payload);\n        }\n        catch (Exception ex)\n        {\n            AlertDialog.Builder builder = new AlertDialog.Builder(this);\n            builder.SetMessage(ex.Message);\n            builder.SetTitle(\"You must log in. Login Required\");\n            builder.Create().Show();\n        }\n    }\n    protected override void OnActivityResult(int requestCode, Result resultCode, Intent data)\n    {\n        base.OnActivityResult(requestCode, resultCode, data);\n        AuthenticationAgentContinuationHelper.SetAuthenticationAgentContinuationEventArgs(requestCode, resultCode, data);\n    }\n\n##<a name=\"pushnotifications\">Push Notifications\n\nThe following topics cover Push Notifications:\n\n* [Register for Push Notifications](#register-for-push)\n* [Obtain a Windows Store package SID](#package-sid)\n* [Register with Cross-platform templates](#register-xplat)\n\n###<a name=\"register-for-push\"></a>How to: Register for Push Notifications\n\nThe Mobile Apps client enables you to register for push notifications with Azure Notification Hubs. When registering, you obtain a handle that you obtain from the\nplatform-specific Push Notification Service (PNS). You then provide this value along with any tags when you create the registration. The following code registers your\nWindows app for push notifications with the Windows Notification Service (WNS):\n\n    private async void InitNotificationsAsync()\n    {\n        // Request a push notification channel.\n        var channel =await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();\n\n        // Register for notifications using the new channel.\n        await MobileService.GetPush().RegisterNativeAsync(channel.Uri, null);\n    }\n\nIf you are pushing to WNS, then you MUST obtain a Windows Store package SID (see below). Note that in this example, two tags are included with the registration. For more\ninformation on Windows apps, including how to register for template registrations,  see [Add push notifications to your app].\n\nNote that requesting tags from the client is not supported.  Tag Requests are silently dropped from registration.  If you wish to register your device with tags,\ncreate a Custom API that uses the Notification Hubs API to perform the registration on your behalf.  [Call the Custom API](#customapi) instead of the\n`RegisterNativeAsync()` method.\n\n###<a name=\"package-sid\"></a>How to: Obtain a Windows Store package SID\n\nA package SID is needed for enabling push notifications in Windows Store apps.  The package SID is also used for other things (such as Windows Single Sign-in).  You\nneed to register your application with the Windows Store in order to receive a package SID.\n\nTo obtain this value:\n\n1. In Visual Studio Solution Explorer, right-click the Windows Store app project, click **Store** > **Associate App with the Store...**.\n2. In the wizard, click **Next**, sign in with your Microsoft account, type a name for your app in **Reserve a new app name**, then click **Reserve**.\n3. After the app registration is successfully created, select the new app name, click **Next**, and then click **Associate**. This adds the required Windows Store registration information to the application manifest.\n4. Log into the [Windows Dev Center] using your Microsoft Account. Under **My apps**, click the app registration you just created.\n5. Click **App management** > **App identity**, and then scroll down to find your **Package SID**.\n\nMany uses of the package SID treat it as a URI, in which case you will need to use _ms-app://_ as the scheme. Make note of the version of your package SID formed by concatenating this value as a prefix.\n\nXamarin apps require some additional code to be able to register an app running on iOS or Android app with the Apple Push Notification Service (APNS) and Google\nCloud Messaging (GCM) services, respectively. For more information see the topic for your platform:\n\n* [Xamarin.Android](app-service-mobile-xamarin-android-get-started-push.md#add-push)\n* [Xamarin.iOS](app-service-mobile-xamarin-ios-get-started-push.md#add-push)\n\n###<a name=\"register-xplat\"></a>How to: Register push templates to send cross-platform notifications\n\nTo register templates, use the `RegisterAsync()` method with the templates, as follows:\n\n        JObject templates = myTemplates();\n        MobileService.GetPush().RegisterAsync(channel.Uri, templates);\n\nYour templates will be of type JObject and can contain multiple templates in the following JSON format:\n\n        public JObject myTemplates()\n        {\n            // single template for Windows Notification Service toast\n            var template = \"<toast><visual><binding template=\\\"ToastText01\\\"><text id=\\\"1\\\">$(message)</text></binding></visual></toast>\";\n\n            var templates = new JObject\n            {\n                [\"generic-message\"] = new JObject\n                {\n                    [\"body\"] = template,\n                    [\"headers\"] = new JObject\n                    {\n                        [\"X-WNS-Type\"] = \"wns/toast\"\n                    },\n                    [\"tags\"] = new JArray()\n                },\n                [\"more-templates\"] = new JObject {...}\n            };\n            return templates;\n        }\n\nThe method **RegisterAsync()** also accepts Secondary Tiles:\n\n        MobileService.GetPush().RegisterAsync(string channelUri, JObject templates, JObject secondaryTiles);\n\nNote that all tags will be stripped away for security. To add tags to installations or templates within installations, see\n[Work with the .NET backend server SDK for Azure Mobile Apps].\n\nTo send notifications utilizing these registered templates, refer to the [Notification Hubs APIs].\n\n##<a name=\"misc\"></a>Miscellaneous Topics\n\n###<a name=\"errors\"></a>How to: Handle errors\n\nWhen an error occurs in the backend, the client SDK will raise a `MobileServiceInvalidOperationException`.  The following example shows\nhow to handle an exception that is returned by the backend:\n\n    private async void InsertTodoItem(TodoItem todoItem)\n    {\n        // This code inserts a new TodoItem into the database. When the operation completes\n        // and App Service has assigned an Id, the item is added to the CollectionView\n        try\n        {\n            await todoTable.InsertAsync(todoItem);\n            items.Add(todoItem);\n        }\n        catch (MobileServiceInvalidOperationException e)\n        {\n            // Handle error\n        }\n    }\n\nAnother example of dealing with error conditions can be found in the [Mobile Apps Files Sample] - the [LoggingHandler]\nexample provides a logging delegate handler (see below) to log the requests being made to the backend.  This provides\nan easier way to debug Xamarin applications rather than relying on Fiddler.\n\n###<a name=\"headers\"></a>How to: Customize request headers\n\nTo support your specific app scenario, you might need to customize communication with the Mobile App backend. For example, you may want to add a\ncustom header to every outgoing request or even change responses status codes. You can do this by providing a custom [DelegatingHandler], as in\nthe following example:\n\n    public async Task CallClientWithHandler()\n    {\n        HttpResponseMessage[]\n        MobileServiceClient client = new MobileServiceClient(\"AppUrl\",\n            new MyHandler()\n            );\n        IMobileServiceTable<TodoItem> todoTable = client.GetTable<TodoItem>();\n        var newItem = new TodoItem { Text = \"Hello world\", Complete = false };\n        await todoTable.InsertAsync(newItem);\n    }\n\n    public class MyHandler : DelegatingHandler\n    {\n        protected override async Task<HttpResponseMessage>\n            SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n        {\n            // Change the request-side here based on the HttpRequestMessage\n            request.Headers.Add(\"x-my-header\", \"my value\");\n\n            // Do the request\n            var response = await base.SendAsync(request, cancellationToken);\n\n            // Change the response-side here based on the HttpResponseMessage\n\n            // Return the modified response\n            return response;\n        }\n    }\n\n\n<!-- Anchors. -->\n[Filter returned data]: #filtering\n[Sort returned data]: #sorting\n[Return data in pages]: #paging\n[Select specific columns]: #selecting\n[Look up data by ID]: #lookingup\n\n<!-- Images. -->\n\n<!-- Internal URLs. -->\n[Azure Mobile Apps quickstart]: app-service-mobile-windows-store-dotnet-get-started.md\n[Add authentication to your app]: app-service-mobile-windows-store-dotnet-get-started-users.md\n[Work with .NET backend SDK]: app-service-mobile-dotnet-backend-how-to-use-server-sdk.md\n[Work with the .NET backend server SDK for Azure Mobile Apps]: app-service-mobile-dotnet-backend-how-to-use-server-sdk.md\n[How to use the Node.js backend SDK]: app-service-mobile-node-backend-how-to-use-server-sdk.md\n[How to: Define a table controller]: app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#how-to-define-a-table-controller\n[Define Tables using a Dynamic Schema]: app-service-mobile-node-backend-how-to-use-server-sdk.md#TableOperations\n[Offline Data Sync in Azure Mobile Apps]: app-service-mobile-offline-data-sync.md\n[Add push notifications to your app]: app-service-mobile-windows-store-dotnet-get-started-push.md\n[Register your app to use a Microsoft account login]: app-service-mobile-how-to-configure-microsoft-authentication.md\n[How to configure App Service for Active Directory login]: app-service-mobile-how-to-configure-active-directory-authentication.md\n\n<!-- Microsoft URLs. -->\n[Azure Mobile Apps .NET Client Reference]: https://msdn.microsoft.com/en-us/library/azure/mt419521(v=azure.10).aspx\n[MobileServiceClient]: https://msdn.microsoft.com/en-us/library/azure/microsoft.windowsazure.mobileservices.mobileserviceclient(v=azure.10).aspx\n[MobileServiceCollection]: https://msdn.microsoft.com/en-us/library/azure/dn250636(v=azure.10).aspx\n[MobileServiceIncrementalLoadingCollection]: https://msdn.microsoft.com/en-us/library/azure/dn268408(v=azure.10).aspx\n[MobileServiceAuthenticationProvider]: http://msdn.microsoft.com/library/windowsazure/microsoft.windowsazure.mobileservices.mobileserviceauthenticationprovider(v=azure.10).aspx\n[MobileServiceUser]: http://msdn.microsoft.com/library/windowsazure/microsoft.windowsazure.mobileservices.mobileserviceuser(v=azure.10).aspx\n[MobileServiceAuthenticationToken]: http://msdn.microsoft.com/library/windowsazure/microsoft.windowsazure.mobileservices.mobileserviceuser.mobileserviceauthenticationtoken(v=azure.10).aspx\n[GetTable]: https://msdn.microsoft.com/en-us/library/azure/jj554275(v=azure.10).aspx\n[creates a reference to an untyped table]: https://msdn.microsoft.com/en-us/library/azure/jj554278(v=azure.10).aspx\n[DeleteAsync]: https://msdn.microsoft.com/en-us/library/azure/dn296407(v=azure.10).aspx\n[IncludeTotalCount]: https://msdn.microsoft.com/en-us/library/azure/dn250560(v=azure.10).aspx\n[InsertAsync]: https://msdn.microsoft.com/en-us/library/azure/dn296400(v=azure.10).aspx\n[InvokeApiAsync]: https://msdn.microsoft.com/en-us/library/azure/dn268343(v=azure.10).aspx\n[LoginAsync]: https://msdn.microsoft.com/en-us/library/azure/dn296411(v=azure.10).aspx\n[LookupAsync]: https://msdn.microsoft.com/en-us/library/azure/jj871654(v=azure.10).aspx\n[OrderBy]: https://msdn.microsoft.com/en-us/library/azure/dn250572(v=azure.10).aspx\n[OrderByDescending]: https://msdn.microsoft.com/en-us/library/azure/dn250568(v=azure.10).aspx\n[ReadAsync]: https://msdn.microsoft.com/en-us/library/azure/mt691741(v=azure.10).aspx\n[Take]: https://msdn.microsoft.com/en-us/library/azure/dn250574(v=azure.10).aspx\n[Select]: https://msdn.microsoft.com/en-us/library/azure/dn250569(v=azure.10).aspx\n[Skip]: https://msdn.microsoft.com/en-us/library/azure/dn250573(v=azure.10).aspx\n[UpdateAsync]: https://msdn.microsoft.com/en-us/library/azure/dn250536.(v=azure.10)aspx\n[UserID]: http://msdn.microsoft.com/library/windowsazure/microsoft.windowsazure.mobileservices.mobileserviceuser.userid(v=azure.10).aspx\n[Where]: https://msdn.microsoft.com/en-us/library/azure/dn250579(v=azure.10).aspx\n[Azure portal]: https://portal.azure.com/\n[Azure Classic portal]: https://manage.windowsazure.com/\n[EnableQueryAttribute]: https://msdn.microsoft.com/library/system.web.http.odata.enablequeryattribute.aspx\n[Guid.NewGuid]: https://msdn.microsoft.com/en-us/library/system.guid.newguid(v=vs.110).aspx\n[ISupportIncrementalLoading]: http://msdn.microsoft.com/library/windows/apps/Hh701916.aspx\n[Windows Dev Center]: https://dev.windows.com/en-us/overview\n[DelegatingHandler]: https://msdn.microsoft.com/library/system.net.http.delegatinghandler(v=vs.110).aspx\n[Windows Live SDK]: https://msdn.microsoft.com/en-us/library/bb404787.aspx\n[PasswordVault]: http://msdn.microsoft.com/library/windows/apps/windows.security.credentials.passwordvault.aspx\n[ProtectedData]: http://msdn.microsoft.com/library/system.security.cryptography.protecteddata%28VS.95%29.aspx\n[Notification Hubs APIs]: https://msdn.microsoft.com/library/azure/dn495101.aspx\n[Mobile Apps Files Sample]: https://github.com/Azure-Samples/app-service-mobile-dotnet-todo-list-files\n[LoggingHandler]: https://github.com/Azure-Samples/app-service-mobile-dotnet-todo-list-files/blob/master/src/client/MobileAppsFilesSample/Helpers/LoggingHandler.cs#L63\n[Azure-Samples GitHub Repository]: https://github.com/Azure-Samples\n\n<!-- External URLs -->\n[JsonPropertyAttribute]: http://www.newtonsoft.com/json/help/html/Properties_T_Newtonsoft_Json_JsonPropertyAttribute.htm\n[OData v3 Documentation]: http://www.odata.org/documentation/odata-version-3-0/\n[Fiddler]: http://www.telerik.com/fiddler\n[Json.NET]: http://www.newtonsoft.com/json\n[SymbolSource]: http://www.symbolsource.org/\n[SymbolSource instructions]: http://www.symbolsource.org/Public/Wiki/Using\n\n"
}