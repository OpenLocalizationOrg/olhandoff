<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">175fe300a03c01dfc6e8e1d2cf000e8612a7bec4</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source>Make a new management service</source>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source>This document introduces VM Services built on Hyper-V sockets and how to get started using them.</source>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source>What is a VM Service?</source>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source>VM Services are services that span the Hyper-V host and virtual machines running on the host.</source>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source>Hyper-V now (Windows 10 and Server 2016+) provides a non-network connection which allows you to create services spanning the host/virtual machine boundary while preserving Hyper-V’s fundamental requirements around tenant/hoster isolation, control, and diagnosable.</source>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source>Hyper-V will continue to provide a base set of in-box services (integration services) for basics (such as time sync) and for common requests we receive, but now anyone can write and deploy a VM service as needed.</source>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source>PowerShell Direct is an in-box example of a VM Service.</source>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source>What is a Hyper-V socket?</source>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source>Hyper-V sockets are TCP-like sockets with no dependence on networking.</source>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source>Using Hyper-V sockets, services can run independently of the networking stack and all data flow stays on host memory.</source>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source>System Requirements</source>
          </segment>
        </unit>
        <unit id="113">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="113">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Supported Host OS</pc>
            </source>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source>Windows 10</source>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source>Windows Server Technical Preview 3</source>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source>Future releases (Server 2016 +)</source>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Supported Guest OS</pc>
            </source>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source>Windows 10</source>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source>Windows Server Technical Preview 3</source>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source>Future releases (Server 2016 +)</source>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source>Linux</source>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source>Capabilities and Limitations</source>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source>Kernel mode or user mode</source>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source>Data stream only</source>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source>No block memory so not the best for backup/video</source>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source>Getting started</source>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source>This guide assumes you're familiar with socket programming in C/C++.</source>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source>Step 1 - Register your service on the Hyper-V host</source>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source>In order to use a custom service integrated with Hyper-V, the new service must be registered with the Hyper-V Host's registry.</source>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source>By registering the service in the registry, you get:</source>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source>WMI management for enable, disable, and listing available services</source>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source>Onto the list of services allowed to communicate with virtual machines directly.</source>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">* Registry location and information *</pc>
            </source>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source>In this registry location, you'll see several GUIDS.</source>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source>Those are our in-box services.</source>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source>Information in the registry per service:</source>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Service GUID</pc>
            </source>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">ElementName (REG_SZ)</pc> -- this is the service's friendly name</source>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source>To register your own service, create a new registry key using your own GUID and friendly name.</source>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source>The registry entry will look like this:</source>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">* Tip: *</pc>  To generate a GUID in PowerShell and copy it to the clipboard, run:</source>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source>Step 2 - Create a simple host-side service</source>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source>Step 3 - Create a simple guest-side service</source>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source>More information about AF_HYPERV</source>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source>Since Hyper-V sockets do not depend on a networking stack, TCP/IP, DNS, etc. the socket end point needed a non-IP, not hostname, format that still describes the connection.</source>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source>In lieu of an IP or hostname, AF_HYPERV endpoints rely heavily on two GUIDS:</source>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source>VM ID – this is the unique ID assigned per VM.</source>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source>A VM’s ID can be found using the following PowerShell snippet.</source>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source>Service ID – GUID under which the service is registered in the Hyper-V host registry.</source>
          </segment>
        </unit>
        <unit id="150">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="150">
            <source>See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Registering a New Service</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source>For connections from a service on the host to the service on a VM:</source>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source>VMID and Service ID</source>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source>For connections from a service on a VM to the service on the host:</source>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source>Zero GUID and Service ID</source>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source>Supported socket commands</source>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source>Socket()</source>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source>Bind()</source>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source>Connect ()</source>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source>Send()</source>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source>Listen()</source>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source>Accept()</source>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>