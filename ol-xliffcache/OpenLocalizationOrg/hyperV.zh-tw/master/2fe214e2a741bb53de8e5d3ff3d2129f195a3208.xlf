<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">2fe214e2a741bb53de8e5d3ff3d2129f195a3208</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source>PowerShell Snippets</source>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source>PowerShell is an awesome scripting, automation, and management tool for Hyper-V.  Here is a toolbox for exploring some of the cool things it can do!</source>
          </segment>
        </unit>
        <unit id="103">
          <segment state="initial" id="103">
            <source>All Hyper-V management requires running as administrator so assume all scripts and snippets must be run as administrator from a Hyper-V Administrator account.</source>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source>If you aren't sure if you have the right permissions, type <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-VM</pc> and if it runs with no errors, you're ready to go.</source>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source>PowerShell Direct tools</source>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source>All of the scripts and snippets in this section will rely on the following basics.</source>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Requirements</pc> :</source>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source>PowerShell Direct.</source>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source>Windows 10 guest and host OS.</source>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Common Variables</pc> :</source>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">$VMName</pc> -- this is a string with the VMName.</source>
          </segment>
        </unit>
        <unit id="112">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="112">
            <source>See a list of available VMs with <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-VM</pc></source>
          </segment>
        </unit>
        <unit id="113">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="113">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">$cred</pc> -- Credential for the guest OS.</source>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source>Can be populated using <pc dataRefEnd="id2" dataRefStart="id1" id="2">$cred = Get-Credential</pc></source>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source>Check if the guest has booted</source>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source>Hyper-V Manager doesn't give you visibility into the guest operating system which often makes it difficult to know whether the guest OS has booted.</source>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source>Use this command to check whether the guest has booted.</source>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Outcome</pc>
            </source>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source>Prints a friendly message declaring the state of the guest OS.</source>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source>Script locking until the guest has booted</source>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source>The following function waits uses the same principle to wait until PowerShell is available in the guest (meaning the OS has booted and most services are running) then returns.</source>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Outcome</pc>
            </source>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source>Prints a friendly message and locks until the connection to the VM succeeds.</source>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source>Succeeds silently.</source>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source>Script locking until the guest has a network</source>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source>With PowerShell Direct it is possible to get connected to a PowerShell session inside a virtual machine before the virtual machine has received an IP address.</source>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">* Outcome *</pc>
            </source>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source>Locks until a DHCP lease is recieved.</source>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source>Since this script is not looking for a specific subnet or IP address, it works no matter what network configuration you're using.</source>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source>Succeeds silently.</source>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source>Managing credentials with PowerShell</source>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source>Hyper-V scripts frequently require handling credentials for one or more virtual machines, Hyper-V host, or both.</source>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source>There are multiple ways you can achieve this when working with PowerShell Direct or standard PowerShell remoting:</source>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source>The first (and simplest) way is to have the same user credentials be valid in the host and the guest or local and remote host.</source>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source>This is quite easy if you are logging in with your Microsoft account - or if you are in a domain environment.</source>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source>In this scenario you can just run <pc dataRefEnd="id2" dataRefStart="id1" id="2">Invoke-Command -VMName "test" {get-process}</pc>.</source>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source>Let PowerShell prompt you for credentials</source>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source>If your credentials do not match you will automatically get a credential prompt allowing you to provide the appropriate credentials for the virtual machine.</source>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source>Store credentials in a variable for reuse.</source>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source>Running a simple command like this:</source>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source>And then running something like this:</source>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source>Will mean that you only get prompted once per script/PowerShell session for your credentials.</source>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source>Code your credentials into your scripts.</source>
          </segment>
        </unit>
        <unit id="144">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="144">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Don't do this for any real workload or system</pc>
            </source>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source>Warning:  _Do not do this in a production system.</source>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source>Do not do this with real passwords._</source>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source>You can hand craft a PSCredential object with some code like this:</source>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source>Grossly insecure - but useful for testing.</source>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source>Now you get no prompts at all in this session.</source>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>