{
  "nodes": [
    {
      "content": "Send messages to Event Hubs",
      "pos": [
        3,
        30
      ]
    },
    {
      "pos": [
        32,
        314
      ],
      "content": "The Java client library for Event Hubs is available for use in Maven projects from the <bpt id=\"p1\">[</bpt>Maven Central Repository<ept id=\"p1\">](https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22azure-eventhubs%22)</ept>, and can be referenced using the following dependency declaration inside your Maven project file:"
    },
    {
      "pos": [
        494,
        803
      ],
      "content": "For different types of build environments, you can explicitly obtain the latest released JAR files from the <bpt id=\"p1\">[</bpt>Maven Central Repository<ept id=\"p1\">](https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22azure-eventhubs%22)</ept> or from <bpt id=\"p2\">[</bpt>the release distribution point on GitHub<ept id=\"p2\">](https://github.com/Azure/azure-event-hubs/releases)</ept>."
    },
    {
      "pos": [
        807,
        1077
      ],
      "content": "For a simple event publisher, import the <bpt id=\"p1\">*</bpt>com.microsoft.azure.eventhubs<ept id=\"p1\">*</ept> package for the Event Hubs client classes and the <bpt id=\"p2\">*</bpt>com.microsoft.azure.servicebus<ept id=\"p2\">*</ept> package for utility classes such as common exceptions that are shared with the Azure Service Bus messaging client."
    },
    {
      "content": "For the following sample, first create a new Maven project for a console/shell application in your favorite Java development environment.",
      "pos": [
        1080,
        1217
      ]
    },
    {
      "content": "The class will be called <ph id=\"ph1\">```Send```</ph>.",
      "pos": [
        1218,
        1254
      ]
    },
    {
      "content": "Replace the namespace and Event Hub names with the values used when you created the Event Hub.",
      "pos": [
        1646,
        1740
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`sasKeyName`</ph> and <ph id=\"ph2\">`sasKey`</ph> correspond to the name and key of the Send rule you created earlier.",
      "pos": [
        1741,
        1839
      ]
    },
    {
      "content": "With that information, you create a connection string.",
      "pos": [
        1840,
        1894
      ]
    },
    {
      "content": "Then, create a singular event by turning a string into its UTF-8 byte encoding.",
      "pos": [
        2285,
        2364
      ]
    },
    {
      "content": "We then create a new Event Hubs client instance from the connection string and send the message.",
      "pos": [
        2365,
        2461
      ]
    }
  ],
  "content": "## Send messages to Event Hubs\n\nThe Java client library for Event Hubs is available for use in Maven projects from the [Maven Central Repository](https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22azure-eventhubs%22), and can be referenced using the following dependency declaration inside your Maven project file:    \n\n``` XML\n<dependency> \n    <groupId>com.microsoft.azure</groupId> \n    <artifactId>azure-eventhubs-clients</artifactId> \n    <version>0.6.0</version> \n</dependency>   \n ```\n \nFor different types of build environments, you can explicitly obtain the latest released JAR files from the [Maven Central Repository](https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22azure-eventhubs%22) or from [the release distribution point on GitHub](https://github.com/Azure/azure-event-hubs/releases).  \n\nFor a simple event publisher, import the *com.microsoft.azure.eventhubs* package for the Event Hubs client classes and the *com.microsoft.azure.servicebus* package for utility classes such as common exceptions that are shared with the Azure Service Bus messaging client. \n\nFor the following sample, first create a new Maven project for a console/shell application in your favorite Java development environment. The class will be called ```Send```.     \n\n``` Java\n\nimport java.io.IOException;\nimport java.nio.charset.*;\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\n\nimport com.microsoft.azure.eventhubs.*;\nimport com.microsoft.azure.servicebus.*;\n\npublic class Send\n{\n    public static void main(String[] args) \n            throws ServiceBusException, ExecutionException, InterruptedException, IOException\n    {\n```\n\nReplace the namespace and Event Hub names with the values used when you created the Event Hub. The `sasKeyName` and `sasKey` correspond to the name and key of the Send rule you created earlier. With that information, you create a connection string.\n\n``` Java\n    final String namespaceName = \"----ServiceBusNamespaceName-----\";\n    final String eventHubName = \"----EventHubName-----\";\n    final String sasKeyName = \"-----SharedAccessSignatureKeyName-----\";\n    final String sasKey = \"---SharedAccessSignatureKey----\";\n    ConnectionStringBuilder connStr = new ConnectionStringBuilder(namespaceName, eventHubName, sasKeyName, sasKey);\n```\n\nThen, create a singular event by turning a string into its UTF-8 byte encoding. We then create a new Event Hubs client instance from the connection string and send the message.   \n\n``` Java \n                \n    byte[] payloadBytes = \"Test AMQP message from JMS\".getBytes(\"UTF-8\");\n    EventData sendEvent = new EventData(payloadBytes);\n    \n    EventHubClient ehClient = EventHubClient.createFromConnectionStringSync(connStr.toString());\n    ehClient.sendSync(sendEvent);\n    }\n}\n\n``` \n"
}