{
  "nodes": [
    {
      "content": "Logic apps as callable endpoints",
      "pos": [
        26,
        58
      ]
    },
    {
      "content": "How to create and configure the HTTP listener and use it in a logic app in Azure App Service",
      "pos": [
        76,
        168
      ]
    },
    {
      "content": "Logic apps as callable endpoints",
      "pos": [
        497,
        529
      ]
    },
    {
      "content": "The previous schema version of Logic apps (<bpt id=\"p1\">*</bpt>2014-12-01-preview<ept id=\"p1\">*</ept>) required an API app called <bpt id=\"p2\">**</bpt>HTTP Listener<ept id=\"p2\">**</ept> to expose an HTTP endpoint that could be synchronously called.",
      "pos": [
        531,
        703
      ]
    },
    {
      "content": "With the latest schema (<bpt id=\"p1\">*</bpt>2015-08-01-preview<ept id=\"p1\">*</ept>) Logic apps natively can expose a synchronous HTTP endpoint.",
      "pos": [
        704,
        809
      ]
    },
    {
      "content": "Adding a trigger to your definition",
      "pos": [
        814,
        849
      ]
    },
    {
      "content": "The first step is to add a trigger to your Logic app definition that can receive incoming requests.",
      "pos": [
        850,
        949
      ]
    },
    {
      "content": "There are 3 types of triggers that can receive requests:",
      "pos": [
        950,
        1006
      ]
    },
    {
      "content": "manual",
      "pos": [
        1009,
        1015
      ]
    },
    {
      "content": "apiConnectionWebhook",
      "pos": [
        1018,
        1038
      ]
    },
    {
      "content": "httpWebhook",
      "pos": [
        1041,
        1052
      ]
    },
    {
      "content": "For the remainder of the article, we will use <bpt id=\"p1\">**</bpt>manual<ept id=\"p1\">**</ept> as the example, but all of the principals apply identically to the other 2 types of triggers.",
      "pos": [
        1054,
        1204
      ]
    },
    {
      "content": "Adding this trigger to your workflow definition will make it look like:",
      "pos": [
        1205,
        1276
      ]
    },
    {
      "content": "This will create an endpoint that you can call at a URL that is like:",
      "pos": [
        1519,
        1588
      ]
    },
    {
      "content": "You can get this endpoint in the user interface, or, by calling:",
      "pos": [
        1722,
        1786
      ]
    },
    {
      "content": "Calling the Logic app trigger's endpoint",
      "pos": [
        1939,
        1979
      ]
    },
    {
      "content": "Once you have the endpoint of your trigger, you can save that in your backend system and call it via a <ph id=\"ph1\">`POST`</ph> to the full URL.",
      "pos": [
        1980,
        2106
      ]
    },
    {
      "content": "You can include additional query parameters, headers, and any content in your body.",
      "pos": [
        2107,
        2190
      ]
    },
    {
      "content": "If the content-type is <ph id=\"ph1\">`application/json`</ph> then you will be able to reference properties from inside the request.",
      "pos": [
        2192,
        2304
      ]
    },
    {
      "content": "Otherwise, it will be treated as a single Binary unit that can be passed to other APIs but cannot be referenced inside.",
      "pos": [
        2305,
        2424
      ]
    },
    {
      "content": "Referencing the content of the incoming request",
      "pos": [
        2429,
        2476
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`@triggerOutputs()`</ph> function will output the contents of the incoming request.",
      "pos": [
        2477,
        2559
      ]
    },
    {
      "content": "For example, it would look like:",
      "pos": [
        2560,
        2592
      ]
    },
    {
      "pos": [
        2726,
        2811
      ],
      "content": "You can use the <ph id=\"ph1\">`@triggerBody()`</ph> shortcut to access the <ph id=\"ph2\">`body`</ph> property specifically."
    },
    {
      "pos": [
        2814,
        2986
      ],
      "content": "This is a slight difference from the <bpt id=\"p1\">*</bpt>2014-12-01-preview<ept id=\"p1\">*</ept> version where you would access the body of an HTTP Listener via a function like: <ph id=\"ph1\">`@triggerOutputs().body.Content`</ph>."
    },
    {
      "content": "Responding to the request",
      "pos": [
        2992,
        3017
      ]
    },
    {
      "content": "For some requests that start a Logic app, you may want to respond with some content to the caller.",
      "pos": [
        3018,
        3116
      ]
    },
    {
      "content": "There is a new action type called <bpt id=\"p1\">**</bpt>response<ept id=\"p1\">**</ept> that can be used to construct the status code, body and headers for your response.",
      "pos": [
        3117,
        3246
      ]
    },
    {
      "content": "Note that if no <bpt id=\"p1\">**</bpt>response<ept id=\"p1\">**</ept> shape is present, the Logic app endpoint will <bpt id=\"p2\">*</bpt>immediately<ept id=\"p2\">*</ept> respond with <bpt id=\"p3\">**</bpt>202 Accepted<ept id=\"p3\">**</ept> (this in the equivalent of <bpt id=\"p4\">*</bpt>Send response automatically<ept id=\"p4\">*</ept> in the HTTP Listener).",
      "pos": [
        3247,
        3445
      ]
    },
    {
      "content": "Responses have the following:",
      "pos": [
        3803,
        3832
      ]
    },
    {
      "content": "property",
      "pos": [
        3836,
        3844
      ]
    },
    {
      "content": "Description",
      "pos": [
        3847,
        3858
      ]
    },
    {
      "content": "statusCode",
      "pos": [
        3890,
        3900
      ]
    },
    {
      "content": "The HTTP status code to respond to the incoming request.",
      "pos": [
        3903,
        3959
      ]
    },
    {
      "content": "It can be any valid status code that starts with 2xx, 4xx, or 5xx.",
      "pos": [
        3960,
        4026
      ]
    },
    {
      "content": "3xx status codes are not permitted.",
      "pos": [
        4027,
        4062
      ]
    },
    {
      "content": "body",
      "pos": [
        4068,
        4072
      ]
    },
    {
      "content": "A body object that can be a string, a JSON object, or even binary content referenced from a previous step.",
      "pos": [
        4075,
        4181
      ]
    },
    {
      "content": "headers",
      "pos": [
        4187,
        4194
      ]
    },
    {
      "content": "You can define any number of headers to be included in the response",
      "pos": [
        4197,
        4264
      ]
    },
    {
      "content": "All of the steps in the Logic app that are required for the response must complete within <bpt id=\"p1\">*</bpt>60 seconds<ept id=\"p1\">*</ept> for the original request to receive the request.",
      "pos": [
        4269,
        4420
      ]
    },
    {
      "content": "If no response action is reached within 60 seconds then the incoming request will time out and receive a <bpt id=\"p1\">**</bpt>408 Client timeout<ept id=\"p1\">**</ept> HTTP response.",
      "pos": [
        4421,
        4563
      ]
    },
    {
      "content": "Advanced endpoint configuration",
      "pos": [
        4569,
        4600
      ]
    },
    {
      "content": "Logic apps have built in support for the direct access endpoint and always use the <ph id=\"ph1\">`POST`</ph> method for starting the run.",
      "pos": [
        4601,
        4719
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>HTTP Listener<ept id=\"p1\">**</ept> API app previously also supported changing the URL segments and the HTTP method.",
      "pos": [
        4720,
        4822
      ]
    },
    {
      "content": "You could even set up additional security or a custom domain by adding it to the API app host (the Web app that hosted the API app).",
      "pos": [
        4823,
        4955
      ]
    },
    {
      "pos": [
        4958,
        5017
      ],
      "content": "This functionality is available through <bpt id=\"p1\">**</bpt>API management<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Change the method of the request",
      "pos": [
        5021,
        5053
      ]
    },
    {
      "content": "Change the URL segments of the request",
      "pos": [
        5131,
        5169
      ]
    },
    {
      "pos": [
        5263,
        5350
      ],
      "content": "Set up your API management domains on the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab in the classic Azure portal"
    },
    {
      "pos": [
        5353,
        5418
      ],
      "content": "Set up policy to check for Basic authentication (<bpt id=\"p1\">**</bpt>link needed<ept id=\"p1\">**</ept>)"
    },
    {
      "content": "Summary of migration from 2014-12-01-preview",
      "pos": [
        5423,
        5467
      ]
    },
    {
      "content": "2014-12-01-preview",
      "pos": [
        5472,
        5490
      ]
    },
    {
      "content": "2015-08-01-preview",
      "pos": [
        5493,
        5511
      ]
    },
    {
      "pos": [
        5561,
        5595
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>HTTP Listener<ept id=\"p1\">**</ept> API app"
    },
    {
      "pos": [
        5598,
        5647
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>Manual trigger<ept id=\"p1\">**</ept> (no API app required)"
    },
    {
      "pos": [
        5652,
        5706
      ],
      "content": "HTTP Listener setting \"<bpt id=\"p1\">*</bpt>Sends response automatically<ept id=\"p1\">*</ept>\""
    },
    {
      "pos": [
        5709,
        5779
      ],
      "content": "Either include a <bpt id=\"p1\">**</bpt>response<ept id=\"p1\">**</ept> action or not in the workflow definition"
    },
    {
      "content": "Configure basic or OAuth authentication",
      "pos": [
        5784,
        5823
      ]
    },
    {
      "content": "via API management",
      "pos": [
        5826,
        5844
      ]
    },
    {
      "content": "Configure HTTP method",
      "pos": [
        5849,
        5870
      ]
    },
    {
      "content": "via API management",
      "pos": [
        5873,
        5891
      ]
    },
    {
      "content": "Configure relative path",
      "pos": [
        5896,
        5919
      ]
    },
    {
      "content": "via API management",
      "pos": [
        5922,
        5940
      ]
    },
    {
      "pos": [
        5945,
        6010
      ],
      "content": "Reference the incoming Body via  <ph id=\"ph1\">`@triggerOutputs().body.Content`</ph>"
    },
    {
      "pos": [
        6013,
        6051
      ],
      "content": "Reference via <ph id=\"ph1\">`@triggerOutputs().body`</ph>"
    },
    {
      "pos": [
        6056,
        6106
      ],
      "content": "<bpt id=\"p1\">**</bpt>Send HTTP response<ept id=\"p1\">**</ept> action on the HTTP Listener"
    },
    {
      "pos": [
        6109,
        6167
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>Respond to HTTP request<ept id=\"p1\">**</ept> (no API app required)"
    }
  ],
  "content": "<properties\n   pageTitle=\"Logic apps as callable endpoints\"\n   description=\"How to create and configure the HTTP listener and use it in a logic app in Azure App Service\"\n   services=\"app-service\\logic\"\n   documentationCenter=\".net,nodejs,java\"\n   authors=\"anuragdalmia\"\n   manager=\"dwrede\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"app-service-logic\"\n   ms.devlang=\"multiple\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"integration\"\n   ms.date=\"02/17/2016\"\n   ms.author=\"stepsic\"/>\n\n\n# Logic apps as callable endpoints\n\nThe previous schema version of Logic apps (*2014-12-01-preview*) required an API app called **HTTP Listener** to expose an HTTP endpoint that could be synchronously called. With the latest schema (*2015-08-01-preview*) Logic apps natively can expose a synchronous HTTP endpoint.\n\n## Adding a trigger to your definition\nThe first step is to add a trigger to your Logic app definition that can receive incoming requests. There are 3 types of triggers that can receive requests:\n* manual\n* apiConnectionWebhook\n* httpWebhook\n\nFor the remainder of the article, we will use **manual** as the example, but all of the principals apply identically to the other 2 types of triggers. Adding this trigger to your workflow definition will make it look like:\n\n```\n{\n    \"$schema\": \"http://schema.management.azure.com/providers/Microsoft.Logic/schemas/2015-08-01-preview/workflowdefinition.json#\",\n    \"triggers\" : {\n        \"myendpointtrigger\" : {\n            \"type\" : \"manual\"\n        }\n    }\n}\n```\n\nThis will create an endpoint that you can call at a URL that is like:\n \n```\nhttps://prod-03.brazilsouth.logic.azure.com:443/workflows/080cb66c52ea4e9cabe0abf4e197deff/triggers/myendpointtrigger?...\n```\n\nYou can get this endpoint in the user interface, or, by calling:\n\n```\nPOST https://management.azure.com/{resourceID of your logic app}/triggers/myendpointtrigger/listCallbackURL?api-version=2015-08-01-preview\n```\n\n## Calling the Logic app trigger's endpoint\nOnce you have the endpoint of your trigger, you can save that in your backend system and call it via a `POST` to the full URL. You can include additional query parameters, headers, and any content in your body.\n\nIf the content-type is `application/json` then you will be able to reference properties from inside the request. Otherwise, it will be treated as a single Binary unit that can be passed to other APIs but cannot be referenced inside.\n\n## Referencing the content of the incoming request\nThe `@triggerOutputs()` function will output the contents of the incoming request. For example, it would look like:\n\n```\n{\n    \"headers\" : {\n        \"content-type\" : \"application/json\"\n    },\n    \"body\" : {\n        \"myprop\" : \"a value\"\n    }\n}\n```\n\nYou can use the `@triggerBody()` shortcut to access the `body` property specifically. \n\nThis is a slight difference from the *2014-12-01-preview* version where you would access the body of an HTTP Listener via a function like: `@triggerOutputs().body.Content`. \n\n## Responding to the request\nFor some requests that start a Logic app, you may want to respond with some content to the caller. There is a new action type called **response** that can be used to construct the status code, body and headers for your response. Note that if no **response** shape is present, the Logic app endpoint will *immediately* respond with **202 Accepted** (this in the equivalent of *Send response automatically* in the HTTP Listener).\n\n```\n\"myresponse\" : {\n    \"type\" : \"response\",\n    \"inputs\" : {\n        \"statusCode\" : 200,\n        \"body\" : {\n            \"contentFieldOne\" : \"value100\",\n            \"anotherField\" : 10.001\n        },\n        \"headers\" : {\n            \"x-ms-date\" : \"@utcnow()\",\n            \"Content-type\" : \"application/json\"\n        }\n    },\n    \"conditions\" : []\n}\n```\n\nResponses have the following:\n\n| property | Description |\n| -------- | ----------- |\n| statusCode | The HTTP status code to respond to the incoming request. It can be any valid status code that starts with 2xx, 4xx, or 5xx. 3xx status codes are not permitted. | \n| body | A body object that can be a string, a JSON object, or even binary content referenced from a previous step. | \n| headers | You can define any number of headers to be included in the response | \n\nAll of the steps in the Logic app that are required for the response must complete within *60 seconds* for the original request to receive the request. If no response action is reached within 60 seconds then the incoming request will time out and receive a **408 Client timeout** HTTP response. \n\n## Advanced endpoint configuration\nLogic apps have built in support for the direct access endpoint and always use the `POST` method for starting the run. The **HTTP Listener** API app previously also supported changing the URL segments and the HTTP method. You could even set up additional security or a custom domain by adding it to the API app host (the Web app that hosted the API app). \n\nThis functionality is available through **API management**:\n* [Change the method of the request](https://msdn.microsoft.com/library/azure/dn894085.aspx#SetRequestMethod)\n* [Change the URL segments of the request](https://msdn.microsoft.com/library/azure/7406a8ce-5f9c-4fae-9b0f-e574befb2ee9#RewriteURL)\n* Set up your API management domains on the **Configure** tab in the classic Azure portal\n* Set up policy to check for Basic authentication (**link needed**)\n\n## Summary of migration from 2014-12-01-preview\n\n|  2014-12-01-preview | 2015-08-01-preview |\n|---------------------|--------------------|\n| Click on **HTTP Listener** API app | Click on **Manual trigger** (no API app required) |\n| HTTP Listener setting \"*Sends response automatically*\" | Either include a **response** action or not in the workflow definition |\n| Configure basic or OAuth authentication | via API management |\n| Configure HTTP method | via API management |\n| Configure relative path | via API management |\n| Reference the incoming Body via  `@triggerOutputs().body.Content` | Reference via `@triggerOutputs().body` |\n| **Send HTTP response** action on the HTTP Listener | Click on **Respond to HTTP request** (no API app required)\n"
}