<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pl-pl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">870d737095245a753b8fc6c104021f0978b6e844</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Get started with API Apps and ASP.NET in Azure App Service | Microsoft Azure</source>
          <target state="new">Get started with API Apps and ASP.NET in Azure App Service | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to create, deploy, and consume an ASP.NET API app in Azure App Service, by using Visual Studio 2015.</source>
          <target state="new">Learn how to create, deploy, and consume an ASP.NET API app in Azure App Service, by using Visual Studio 2015.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get started with API Apps and ASP.NET in Azure App Service</source>
          <target state="new">Get started with API Apps and ASP.NET in Azure App Service</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this tutorial, you create an <bpt id="p1">[</bpt>App Service API app<ept id="p1">](app-service-api-apps-why-best-platform.md)</ept>, deploy an ASP.NET Web API to the API app, and consume the API app from an ASP.NET MVC client.</source>
          <target state="new">In this tutorial, you create an <bpt id="p1">[</bpt>App Service API app<ept id="p1">](app-service-api-apps-why-best-platform.md)</ept>, deploy an ASP.NET Web API to the API app, and consume the API app from an ASP.NET MVC client.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The tutorial assumes that you are familiar with ASP.NET but have no prior experience with Microsoft Azure.</source>
          <target state="new">The tutorial assumes that you are familiar with ASP.NET but have no prior experience with Microsoft Azure.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>On completing the tutorial, you'll have a Web API and client application up and running in the cloud.</source>
          <target state="new">On completing the tutorial, you'll have a Web API and client application up and running in the cloud.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The sample application is a simple contacts list.</source>
          <target state="new">The sample application is a simple contacts list.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following illustration shows how the MVC app displays data received from the API.</source>
          <target state="new">The following illustration shows how the MVC app displays data received from the API.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>What you'll learn</source>
          <target state="new">What you'll learn</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Three features of Azure App service are particularly helpful for developing and hosting APIs:</source>
          <target state="new">Three features of Azure App service are particularly helpful for developing and hosting APIs:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Integrated support for API metadata</source>
          <target state="new">Integrated support for API metadata</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CORS support</source>
          <target state="new">CORS support</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Authentication and authorization support</source>
          <target state="new">Authentication and authorization support</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is the first tutorial in a series that introduces these features.</source>
          <target state="new">This is the first tutorial in a series that introduces these features.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This tutorial focuses on API metadata, the second focuses on CORS, and the third and fourth focus on authentication and authorization.</source>
          <target state="new">This tutorial focuses on API metadata, the second focuses on CORS, and the third and fourth focus on authentication and authorization.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In these tutorials, you'll learn:</source>
          <target state="new">In these tutorials, you'll learn:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>How to prepare your machine for Azure development by installing the Azure SDK for .NET.</source>
          <target state="new">How to prepare your machine for Azure development by installing the Azure SDK for .NET.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>How to work with API apps and web apps in Azure App Service by using tools built into Visual Studio 2015.</source>
          <target state="new">How to work with API apps and web apps in Azure App Service by using tools built into Visual Studio 2015.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>How to automate API discovery by using the Swashbuckle NuGet package to dynamically generate Swagger API definition JSON.</source>
          <target state="new">How to automate API discovery by using the Swashbuckle NuGet package to dynamically generate Swagger API definition JSON.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>How to use automatically generated client code to consume an API app from a .NET client.</source>
          <target state="new">How to use automatically generated client code to consume an API app from a .NET client.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>How to use the Azure portal to configure the endpoint for API app metadata.</source>
          <target state="new">How to use the Azure portal to configure the endpoint for API app metadata.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>How to use CORS to call an API app from a JavaScript client when the client is from a different domain than the API.</source>
          <target state="new">How to use CORS to call an API app from a JavaScript client when the client is from a different domain than the API.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>How to use Azure Active Directory to protect an API from unauthenticated access.</source>
          <target state="new">How to use Azure Active Directory to protect an API from unauthenticated access.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>How to consume a protected API for users logged in to Azure Active Directory.</source>
          <target state="new">How to consume a protected API for users logged in to Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>How to consume a protected API by using a service principal.</source>
          <target state="new">How to consume a protected API by using a service principal.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>ASP.NET Web API</source>
          <target state="new">ASP.NET Web API</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The tutorial assumes that you are familiar with ASP.NET Web API; if you need an introduction, see <bpt id="p1">[</bpt>Getting Started with ASP.NET Web API 2<ept id="p1">](http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api)</ept>.</source>
          <target state="new">The tutorial assumes that you are familiar with ASP.NET Web API; if you need an introduction, see <bpt id="p1">[</bpt>Getting Started with ASP.NET Web API 2<ept id="p1">](http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015</source>
          <target state="new">Visual Studio 2015</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The instructions and screen shots assume you're using Visual Studio 2015, but the same guidance works for Visual Studio 2013.</source>
          <target state="new">The instructions and screen shots assume you're using Visual Studio 2015, but the same guidance works for Visual Studio 2013.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Azure account</source>
          <target state="new">Azure account</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You need an Azure account to complete the tutorial.</source>
          <target state="new">You need an Azure account to complete the tutorial.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can:</source>
          <target state="new">You can:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Open an Azure account for free<ept id="p1">](/pricing/free-trial/?WT.mc_id=A261C142F)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Open an Azure account for free<ept id="p1">](/pricing/free-trial/?WT.mc_id=A261C142F)</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You get credits that can be used to try out paid Azure services.</source>
          <target state="new">You get credits that can be used to try out paid Azure services.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Even after the credits are used up, you can keep the account and use free Azure services and features, such as the Web Apps feature in Azure App Service.</source>
          <target state="new">Even after the credits are used up, you can keep the account and use free Azure services and features, such as the Web Apps feature in Azure App Service.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Activate Visual Studio subscriber benefits<ept id="p1">](/pricing/member-offers/msdn-benefits-details/?WT.mc_id=A261C142F)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Activate Visual Studio subscriber benefits<ept id="p1">](/pricing/member-offers/msdn-benefits-details/?WT.mc_id=A261C142F)</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Your MSDN subscription gives you credits every month that you can use for paid Azure services.</source>
          <target state="new">Your MSDN subscription gives you credits every month that you can use for paid Azure services.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you want to get started with Azure App Service before you sign up for an Azure account, go to <bpt id="p1">[</bpt>Try App Service<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=523751)</ept>.</source>
          <target state="new">If you want to get started with Azure App Service before you sign up for an Azure account, go to <bpt id="p1">[</bpt>Try App Service<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=523751)</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There, you can immediately create a short-lived starter  app in App Service — no credit card required, and no commitments.</source>
          <target state="new">There, you can immediately create a short-lived starter  app in App Service — no credit card required, and no commitments.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This tutorial requires version 2.8.1 or later of the Azure SDK for .NET.</source>
          <target state="new">This tutorial requires version 2.8.1 or later of the Azure SDK for .NET.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Overview of the sample application</source>
          <target state="new">Overview of the sample application</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The code that you'll deploy to an API app and a web app for this tutorial is in the <bpt id="p1">[</bpt>Azure-Samples/app-service-api-dotnet-contact-list<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept> GitHub repository.</source>
          <target state="new">The code that you'll deploy to an API app and a web app for this tutorial is in the <bpt id="p1">[</bpt>Azure-Samples/app-service-api-dotnet-contact-list<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept> GitHub repository.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The ContactsList Visual Studio solution includes the following projects:</source>
          <target state="new">The ContactsList Visual Studio solution includes the following projects:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ContactsList.API<ept id="p1">**</ept> - An ASP.NET Web API project that returns a list of names and email addresses.</source>
          <target state="new"><bpt id="p1">**</bpt>ContactsList.API<ept id="p1">**</ept> - An ASP.NET Web API project that returns a list of names and email addresses.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The initial call to the Get method returns 3 hard-coded contacts, then subsequent calls to Put, Post, and Delete methods save changes in a local JSON file.</source>
          <target state="new">The initial call to the Get method returns 3 hard-coded contacts, then subsequent calls to Put, Post, and Delete methods save changes in a local JSON file.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ContactsList.MVC<ept id="p1">**</ept> - An ASP.NET MVC client for the ContactsList API.</source>
          <target state="new"><bpt id="p1">**</bpt>ContactsList.MVC<ept id="p1">**</ept> - An ASP.NET MVC client for the ContactsList API.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ContactsList.Angular<ept id="p1">**</ept> - A simple AngularJS UI client for the ContactsList API.</source>
          <target state="new"><bpt id="p1">**</bpt>ContactsList.Angular<ept id="p1">**</ept> - A simple AngularJS UI client for the ContactsList API.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Demonstrates how to call an unprotected (no authentication) API app.</source>
          <target state="new">Demonstrates how to call an unprotected (no authentication) API app.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ContactsList.Angular.AAD<ept id="p1">**</ept> - An AngularJS client that shows how to use Azure Active Directory to authenticate users.</source>
          <target state="new"><bpt id="p1">**</bpt>ContactsList.Angular.AAD<ept id="p1">**</ept> - An AngularJS client that shows how to use Azure Active Directory to authenticate users.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CompanyContacts.API<ept id="p1">**</ept> - An ASP.NET Web API project that returns a hardcoded list of contacts in response to a Get request.</source>
          <target state="new"><bpt id="p1">**</bpt>CompanyContacts.API<ept id="p1">**</ept> - An ASP.NET Web API project that returns a hardcoded list of contacts in response to a Get request.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Called by the <bpt id="p1">**</bpt>ContactsList.API<ept id="p1">**</ept> Get method to demonstrate how to call an API by using service-to-service (service principal) authentication.</source>
          <target state="new">Called by the <bpt id="p1">**</bpt>ContactsList.API<ept id="p1">**</ept> Get method to demonstrate how to call an API by using service-to-service (service principal) authentication.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Download the sample application</source>
          <target state="new">Download the sample application</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Download the <bpt id="p1">[</bpt>Azure-Samples/app-service-api-dotnet-contact-list<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept> repository.</source>
          <target state="new">Download the <bpt id="p1">[</bpt>Azure-Samples/app-service-api-dotnet-contact-list<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept> repository.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can <bpt id="p1">[</bpt>Download a .zip file<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list/archive/master.zip)</ept> or clone the repository on your local machine.</source>
          <target state="new">You can <bpt id="p1">[</bpt>Download a .zip file<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list/archive/master.zip)</ept> or clone the repository on your local machine.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Open the ContactsList solution in Visual Studio 2015 or 2013.</source>
          <target state="new">Open the ContactsList solution in Visual Studio 2015 or 2013.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Build the solution to restore the NuGet packages.</source>
          <target state="new">Build the solution to restore the NuGet packages.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use Swagger metadata and UI</source>
          <target state="new">Use Swagger metadata and UI</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Support for <bpt id="p1">[</bpt>Swagger<ept id="p1">](http://swagger.io/)</ept> 2.0 API metadata is built into Azure App Service.</source>
          <target state="new">Support for <bpt id="p1">[</bpt>Swagger<ept id="p1">](http://swagger.io/)</ept> 2.0 API metadata is built into Azure App Service.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each API app can define a URL endpoint that returns metadata for the API in Swagger JSON format.</source>
          <target state="new">Each API app can define a URL endpoint that returns metadata for the API in Swagger JSON format.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The metadata returned from that endpoint can be used to generate client code that makes it easier to consume the API.</source>
          <target state="new">The metadata returned from that endpoint can be used to generate client code that makes it easier to consume the API.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In this section of the tutorial, you'll see how to automatically generate metadata for an ASP.NET Web API project, and you'll run an API test tool.</source>
          <target state="new">In this section of the tutorial, you'll see how to automatically generate metadata for an ASP.NET Web API project, and you'll run an API test tool.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For these tasks you won't use Azure App Service yet; you'll see later how API Apps makes use of the metadata.</source>
          <target state="new">For these tasks you won't use Azure App Service yet; you'll see later how API Apps makes use of the metadata.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To provide Swagger 2.0 metadata for an ASP.NET Web API project, you can install the <bpt id="p1">[</bpt>Swashbuckle<ept id="p1">](https://www.nuget.org/packages/Swashbuckle)</ept> NuGet package.</source>
          <target state="new">To provide Swagger 2.0 metadata for an ASP.NET Web API project, you can install the <bpt id="p1">[</bpt>Swashbuckle<ept id="p1">](https://www.nuget.org/packages/Swashbuckle)</ept> NuGet package.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Swashbuckle uses Reflection to dynamically generate metadata.</source>
          <target state="new">Swashbuckle uses Reflection to dynamically generate metadata.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The Swashbuckle NuGet package is already installed in the ContactsList.API project that you downloaded, and it is already installed when you create a new project by using the <bpt id="p1">**</bpt>Azure API App<ept id="p1">**</ept> project template.</source>
          <target state="new">The Swashbuckle NuGet package is already installed in the ContactsList.API project that you downloaded, and it is already installed when you create a new project by using the <bpt id="p1">**</bpt>Azure API App<ept id="p1">**</ept> project template.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>(In Visual Studio: <bpt id="p1">**</bpt>File &gt; New &gt; Project &gt; ASP.NET Web Application &gt; Azure API App<ept id="p1">**</ept>.)</source>
          <target state="new">(In Visual Studio: <bpt id="p1">**</bpt>File &gt; New &gt; Project &gt; ASP.NET Web Application &gt; Azure API App<ept id="p1">**</ept>.)</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In this section of the tutorial you take a look at the generated Swagger 2.0 metadata, and then you try out a test UI that is based on the Swagger metadata.</source>
          <target state="new">In this section of the tutorial you take a look at the generated Swagger 2.0 metadata, and then you try out a test UI that is based on the Swagger metadata.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Set the ContactsList.API project as the startup project.</source>
          <target state="new">Set the ContactsList.API project as the startup project.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>(Not the CompanyContacts.API project; that project is used in one of the later tutorials.)</source>
          <target state="new">(Not the CompanyContacts.API project; that project is used in one of the later tutorials.)</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Press F5 to run the project in debug mode.</source>
          <target state="new">Press F5 to run the project in debug mode.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The browser opens and shows the 403 Forbidden page.</source>
          <target state="new">The browser opens and shows the 403 Forbidden page.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In your browser address bar, add <ph id="ph1">`swagger/docs/v1`</ph> to the end of the line, and then press Return.</source>
          <target state="new">In your browser address bar, add <ph id="ph1">`swagger/docs/v1`</ph> to the end of the line, and then press Return.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>(The URL will be <ph id="ph1">`http://localhost:51864/swagger/docs/v1`</ph>.)</source>
          <target state="new">(The URL will be <ph id="ph1">`http://localhost:51864/swagger/docs/v1`</ph>.)</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This is the default URL used by Swashbuckle to return Swagger 2.0 JSON metadata for the API.</source>
          <target state="new">This is the default URL used by Swashbuckle to return Swagger 2.0 JSON metadata for the API.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you're using Internet Explorer, the browser prompts you to download a v1.json file.</source>
          <target state="new">If you're using Internet Explorer, the browser prompts you to download a v1.json file.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you're using Chrome or Edge, the browser displays the JSON in the browser window.</source>
          <target state="new">If you're using Chrome or Edge, the browser displays the JSON in the browser window.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following sample shows the first section of the Swagger metadata for the API, with the definition for the Get method.</source>
          <target state="new">The following sample shows the first section of the Swagger metadata for the API, with the definition for the Get method.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This metadata is what drives the Swagger UI that you'll use in the following steps, and you'll use it in a later section of the tutorial to automatically generate client code.</source>
          <target state="new">This metadata is what drives the Swagger UI that you'll use in the following steps, and you'll use it in a later section of the tutorial to automatically generate client code.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Close the browser.</source>
          <target state="new">Close the browser.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In the ContactsList.API project in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the <bpt id="p2">*</bpt>App_Start\SwaggerConfig.cs<ept id="p2">*</ept> file, then scroll down to the following code and uncomment it.</source>
          <target state="new">In the ContactsList.API project in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the <bpt id="p2">*</bpt>App_Start\SwaggerConfig.cs<ept id="p2">*</ept> file, then scroll down to the following code and uncomment it.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The SwaggerConfig.cs file is created when you install the Swashbuckle package in a project.</source>
          <target state="new">The SwaggerConfig.cs file is created when you install the Swashbuckle package in a project.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The file provides a number of ways to configure Swashbuckle.</source>
          <target state="new">The file provides a number of ways to configure Swashbuckle.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The code you've uncommented enables the Swagger UI that you'll use in the following steps.</source>
          <target state="new">The code you've uncommented enables the Swagger UI that you'll use in the following steps.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you create a Web API project by using the API app project template this code is commented out by default as a security measure.</source>
          <target state="new">When you create a Web API project by using the API app project template this code is commented out by default as a security measure.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Run the project again.</source>
          <target state="new">Run the project again.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In your browser address bar, add <ph id="ph1">`swagger`</ph> to the end of the line, and then press Return.</source>
          <target state="new">In your browser address bar, add <ph id="ph1">`swagger`</ph> to the end of the line, and then press Return.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>(The URL will be <ph id="ph1">`http://localhost:51864/swagger`</ph>.)</source>
          <target state="new">(The URL will be <ph id="ph1">`http://localhost:51864/swagger`</ph>.)</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When the Swagger UI page appears, click <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> to see the methods available.</source>
          <target state="new">When the Swagger UI page appears, click <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> to see the methods available.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Get &gt; Try it out<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Get &gt; Try it out<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The Swagger UI calls the ContactsList Get method and displays the JSON results.</source>
          <target state="new">The Swagger UI calls the ContactsList Get method and displays the JSON results.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Post<ept id="p1">**</ept>, and then click the box under <bpt id="p2">**</bpt>Model Schema<ept id="p2">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Post<ept id="p1">**</ept>, and then click the box under <bpt id="p2">**</bpt>Model Schema<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Clicking the model schema prefills the input box where you can specify the parameter value for the Post method.</source>
          <target state="new">Clicking the model schema prefills the input box where you can specify the parameter value for the Post method.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Change the JSON in the <ph id="ph1">`contact`</ph> parameter input box so that it looks like the following example, or substitute your own name and email address:</source>
          <target state="new">Change the JSON in the <ph id="ph1">`contact`</ph> parameter input box so that it looks like the following example, or substitute your own name and email address:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Try it out<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Try it out<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The ContactsList API returns an HTTP 200 and a response body that confirms what was added.</source>
          <target state="new">The ContactsList API returns an HTTP 200 and a response body that confirms what was added.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Get &gt; Try it out<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Get &gt; Try it out<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The Get method response now includes the new contact.</source>
          <target state="new">The Get method response now includes the new contact.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Try also the Put, Delete, and Get by ID methods, and then close the browser.</source>
          <target state="new">Try also the Put, Delete, and Get by ID methods, and then close the browser.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Swashbuckle works with any ASP.NET Web API project.</source>
          <target state="new">Swashbuckle works with any ASP.NET Web API project.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you want to add Swagger metadata generation to an existing project, just install the Swashbuckle package.</source>
          <target state="new">If you want to add Swagger metadata generation to an existing project, just install the Swashbuckle package.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you want to create a new project to be deployed as an App Service API app, use the ASP.NET <bpt id="p1">**</bpt>Azure API App<ept id="p1">**</ept> project template, shown in the following illustration.</source>
          <target state="new">If you want to create a new project to be deployed as an App Service API app, use the ASP.NET <bpt id="p1">**</bpt>Azure API App<ept id="p1">**</ept> project template, shown in the following illustration.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This template creates a Web API project with Swashbuckle installed.</source>
          <target state="new">This template creates a Web API project with Swashbuckle installed.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> By default, Swashbuckle may generate duplicate Swagger operation IDs for your controller methods.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> By default, Swashbuckle may generate duplicate Swagger operation IDs for your controller methods.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This happens if your controller has overloaded HTTP methods, for example: <ph id="ph1">`Get()`</ph> and <ph id="ph2">`Get(id)`</ph>.</source>
          <target state="new">This happens if your controller has overloaded HTTP methods, for example: <ph id="ph1">`Get()`</ph> and <ph id="ph2">`Get(id)`</ph>.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For information about how to handle overloads, see <bpt id="p1">[</bpt>Customize Swashbuckle-generated API definitions<ept id="p1">](app-service-api-dotnet-swashbuckle-customize.md)</ept>.</source>
          <target state="new">For information about how to handle overloads, see <bpt id="p1">[</bpt>Customize Swashbuckle-generated API definitions<ept id="p1">](app-service-api-dotnet-swashbuckle-customize.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If you create a Web API project in Visual Studio by using the Azure API App template, code that generates unique operation IDs is automatically added to the <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file.</source>
          <target state="new">If you create a Web API project in Visual Studio by using the Azure API App template, code that generates unique operation IDs is automatically added to the <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Create an API app in Azure and deploy the ContactsList.API project to it</source>
          <target state="new">Create an API app in Azure and deploy the ContactsList.API project to it</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In this section you use Azure tools that are integrated into the Visual Studio <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard to create a new API app in Azure.</source>
          <target state="new">In this section you use Azure tools that are integrated into the Visual Studio <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard to create a new API app in Azure.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Then you deploy the ContactsList.API project to the new API app and call the API by running the Swagger UI again, this time while it runs in the cloud.</source>
          <target state="new">Then you deploy the ContactsList.API project to the new API app and call the API by running the Swagger UI again, this time while it runs in the cloud.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the ContactsList.API project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the ContactsList.API project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Microsoft Azure App Service<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Microsoft Azure App Service<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Sign in to your Azure account if you have not already done so, or refresh your credentials if they're expired.</source>
          <target state="new">Sign in to your Azure account if you have not already done so, or refresh your credentials if they're expired.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In the App Service dialog box, choose the Azure <bpt id="p1">**</bpt>Subscription<ept id="p1">**</ept> you want to use, and then click <bpt id="p2">**</bpt>New<ept id="p2">**</ept>.</source>
          <target state="new">In the App Service dialog box, choose the Azure <bpt id="p1">**</bpt>Subscription<ept id="p1">**</ept> you want to use, and then click <bpt id="p2">**</bpt>New<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Hosting<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Create App Service<ept id="p2">**</ept> dialog box, click <bpt id="p3">**</bpt>Change Type<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>API App<ept id="p4">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Hosting<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Create App Service<ept id="p2">**</ept> dialog box, click <bpt id="p3">**</bpt>Change Type<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>API App<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Enter an <bpt id="p1">**</bpt>API App Name<ept id="p1">**</ept> that is unique in the <bpt id="p2">*</bpt>azurewebsites.net<ept id="p2">*</ept> domain.</source>
          <target state="new">Enter an <bpt id="p1">**</bpt>API App Name<ept id="p1">**</ept> that is unique in the <bpt id="p2">*</bpt>azurewebsites.net<ept id="p2">*</ept> domain.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Visual Studio proposes a unique name by appending a date-time string to the project name.</source>
          <target state="new">Visual Studio proposes a unique name by appending a date-time string to the project name.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can accept that name if you prefer.</source>
          <target state="new">You can accept that name if you prefer.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If you enter a name that someone else has already used, you'll see a red exclamation mark to the right instead of a green check mark, and you'll need to enter a different name.</source>
          <target state="new">If you enter a name that someone else has already used, you'll see a red exclamation mark to the right instead of a green check mark, and you'll need to enter a different name.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Azure will use this name as the prefix for your application's URL.</source>
          <target state="new">Azure will use this name as the prefix for your application's URL.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The complete URL will consist of this name plus <bpt id="p1">*</bpt>.azurewebsites.net<ept id="p1">*</ept>.</source>
          <target state="new">The complete URL will consist of this name plus <bpt id="p1">*</bpt>.azurewebsites.net<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For example, if the name is <ph id="ph1">`ContactsListAPI`</ph>, the URL will be <ph id="ph2">`contactslistapi.azurewebsites.net`</ph>.</source>
          <target state="new">For example, if the name is <ph id="ph1">`ContactsListAPI`</ph>, the URL will be <ph id="ph2">`contactslistapi.azurewebsites.net`</ph>.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Resource Group<ept id="p1">**</ept> drop-down, Enter "ContactsListGroup" or another name if you prefer.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Resource Group<ept id="p1">**</ept> drop-down, Enter "ContactsListGroup" or another name if you prefer.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This box lets you select an existing <bpt id="p1">[</bpt>resource group<ept id="p1">](../azure-preview-portal-using-resource-groups.md)</ept> or create a new one by typing in a name that is different from any existing resource group in your subscription.</source>
          <target state="new">This box lets you select an existing <bpt id="p1">[</bpt>resource group<ept id="p1">](../azure-preview-portal-using-resource-groups.md)</ept> or create a new one by typing in a name that is different from any existing resource group in your subscription.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For this tutorial it's best to create a new one because that will make it easy to delete in one step all the Azure resources that you create for the tutorial.</source>
          <target state="new">For this tutorial it's best to create a new one because that will make it easy to delete in one step all the Azure resources that you create for the tutorial.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>New<ept id="p1">**</ept> button next to the <bpt id="p2">**</bpt>App Service Plan<ept id="p2">**</ept> drop-down.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>New<ept id="p1">**</ept> button next to the <bpt id="p2">**</bpt>App Service Plan<ept id="p2">**</ept> drop-down.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For information about App Service plans, see <bpt id="p1">[</bpt>App Service plans overview<ept id="p1">](../app-service/azure-web-sites-web-hosting-plans-in-depth-overview.md)</ept>.</source>
          <target state="new">For information about App Service plans, see <bpt id="p1">[</bpt>App Service plans overview<ept id="p1">](../app-service/azure-web-sites-web-hosting-plans-in-depth-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Configure App Service Plan<ept id="p1">**</ept> dialog, enter "ContactsListPlan" or another name if you prefer.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Configure App Service Plan<ept id="p1">**</ept> dialog, enter "ContactsListPlan" or another name if you prefer.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Location<ept id="p1">**</ept> drop-down list, choose the location that is closest to you.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Location<ept id="p1">**</ept> drop-down list, choose the location that is closest to you.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This setting specifies which Azure datacenter your app will run in.</source>
          <target state="new">This setting specifies which Azure datacenter your app will run in.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For this tutorial, you can select any region and it won't make a noticeable difference.</source>
          <target state="new">For this tutorial, you can select any region and it won't make a noticeable difference.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>But for a production app, you want your server to be as close as possible to the clients that are accessing it in order to minimize <bpt id="p1">[</bpt>latency<ept id="p1">](http://www.bing.com/search?q=web%20latency%20introduction&amp;qs=n&amp;form=QBRE&amp;pq=web%20latency%20introduction&amp;sc=1-24&amp;sp=-1&amp;sk=&amp;cvid=eefff99dfc864d25a75a83740f1e0090)</ept>.</source>
          <target state="new">But for a production app, you want your server to be as close as possible to the clients that are accessing it in order to minimize <bpt id="p1">[</bpt>latency<ept id="p1">](http://www.bing.com/search?q=web%20latency%20introduction&amp;qs=n&amp;form=QBRE&amp;pq=web%20latency%20introduction&amp;sc=1-24&amp;sp=-1&amp;sk=&amp;cvid=eefff99dfc864d25a75a83740f1e0090)</ept>.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> drop-down, click <bpt id="p2">**</bpt>Free<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Size<ept id="p1">**</ept> drop-down, click <bpt id="p2">**</bpt>Free<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For this tutorial, The free pricing tier will provide sufficient performance.</source>
          <target state="new">For this tutorial, The free pricing tier will provide sufficient performance.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Configure App Service Plan<ept id="p1">**</ept> dialog, click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Configure App Service Plan<ept id="p1">**</ept> dialog, click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Create App Service<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Create App Service<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Visual Studio creates the API app and creates a publish profile that has all of the required settings for the new API app.</source>
          <target state="new">Visual Studio creates the API app and creates a publish profile that has all of the required settings for the new API app.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In the following steps you use the new publish profile to deploy the project.</source>
          <target state="new">In the following steps you use the new publish profile to deploy the project.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> There are other ways to create API apps in Azure App Service.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> There are other ways to create API apps in Azure App Service.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>In Visual Studio the same dialogs are available while you're creating a new project.</source>
          <target state="new">In Visual Studio the same dialogs are available while you're creating a new project.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>You can also create API apps by using the Azure portal, <bpt id="p1">[</bpt>Azure cmdlets for Windows PowerShell<ept id="p1">](../powershell-install-configure.md)</ept>, or the <bpt id="p2">[</bpt>cross-platform command-line interface<ept id="p2">](../xplat-cli.md)</ept>.</source>
          <target state="new">You can also create API apps by using the Azure portal, <bpt id="p1">[</bpt>Azure cmdlets for Windows PowerShell<ept id="p1">](../powershell-install-configure.md)</ept>, or the <bpt id="p2">[</bpt>cross-platform command-line interface<ept id="p2">](../xplat-cli.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Publish<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Publish<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Visual Studio deploys the ContactsList.API project to the new API app and opens a browser to the URL of the API app.</source>
          <target state="new">Visual Studio deploys the ContactsList.API project to the new API app and opens a browser to the URL of the API app.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A "successfully created" page appears in the browser.</source>
          <target state="new">A "successfully created" page appears in the browser.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Add "swagger" to the URL in the browser's address bar, and then press Enter.</source>
          <target state="new">Add "swagger" to the URL in the browser's address bar, and then press Enter.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>(The URL will be <ph id="ph1">`http://{apiappname}.azurewebsites.net/swagger`</ph>.)</source>
          <target state="new">(The URL will be <ph id="ph1">`http://{apiappname}.azurewebsites.net/swagger`</ph>.)</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The browser displays the same Swagger UI that you saw earlier, but it is now running in the cloud.</source>
          <target state="new">The browser displays the same Swagger UI that you saw earlier, but it is now running in the cloud.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Try out the Get method, and you see that you're back to the default 3 contacts, because the changes you made earlier were saved in a local file; any changes you make now will be saved in the file system of the Azure API app.</source>
          <target state="new">Try out the Get method, and you see that you're back to the default 3 contacts, because the changes you made earlier were saved in a local file; any changes you make now will be saved in the file system of the Azure API app.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>.</source>
          <target state="new">Open the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Browse &gt; API Apps &gt; {your new API app}<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Browse &gt; API Apps &gt; {your new API app}<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept>, and then in the <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept> blade find the API section and click <bpt id="p3">**</bpt>API Definition<ept id="p3">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept>, and then in the <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept> blade find the API section and click <bpt id="p3">**</bpt>API Definition<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The API Definition blade lets you specify the URL that returns Swagger 2.0 metadata in JSON format.</source>
          <target state="new">The API Definition blade lets you specify the URL that returns Swagger 2.0 metadata in JSON format.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When Visual Studio creates the API app, it sets the API definition URL to the default value that you saw earlier, which is the API app's base URL plus <ph id="ph1">`/swagger/docs/v1`</ph>.</source>
          <target state="new">When Visual Studio creates the API app, it sets the API definition URL to the default value that you saw earlier, which is the API app's base URL plus <ph id="ph1">`/swagger/docs/v1`</ph>.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>When you select an API app to generate client code for it, Visual Studio retrieves the metadata from this URL.</source>
          <target state="new">When you select an API app to generate client code for it, Visual Studio retrieves the metadata from this URL.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>API definition URL in Azure Resource Manager tooling</source>
          <target state="new">API definition URL in Azure Resource Manager tooling</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You can also configure the API definition URL for an API app by using Azure Resource Manager tooling such as Azure PowerShell, CLI or <bpt id="p1">[</bpt>Resource Explorer<ept id="p1">](https://resources.azure.com/)</ept>.</source>
          <target state="new">You can also configure the API definition URL for an API app by using Azure Resource Manager tooling such as Azure PowerShell, CLI or <bpt id="p1">[</bpt>Resource Explorer<ept id="p1">](https://resources.azure.com/)</ept>.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">`apiDefinition`</ph> property on the Microsoft.Web/sites/config resource type for your</source>
          <target state="new">Set the <ph id="ph1">`apiDefinition`</ph> property on the Microsoft.Web/sites/config resource type for your</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>/web resource.</source>
          <target state="new">/web resource.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>For example, in <bpt id="p1">**</bpt>Resource Explorer<ept id="p1">**</ept>, go to <bpt id="p2">**</bpt>subscriptions &gt; {your subscription} &gt; resourceGroups &gt; {your resource group} &gt; providers &gt; Microsoft.Web &gt; sites &gt; {your site} &gt; config &gt; web<ept id="p2">**</ept>, and you'll see the cors property:</source>
          <target state="new">For example, in <bpt id="p1">**</bpt>Resource Explorer<ept id="p1">**</ept>, go to <bpt id="p2">**</bpt>subscriptions &gt; {your subscription} &gt; resourceGroups &gt; {your resource group} &gt; providers &gt; Microsoft.Web &gt; sites &gt; {your site} &gt; config &gt; web<ept id="p2">**</ept>, and you'll see the cors property:</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="codegen"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Consume from a .NET client by using generated client code</source>
          <target state="new"><ph id="ph1">&lt;a id="codegen"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Consume from a .NET client by using generated client code</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>One of the advantages of integrating Swagger into Azure API apps is automatic code generation.</source>
          <target state="new">One of the advantages of integrating Swagger into Azure API apps is automatic code generation.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Generated client classes make it easier to write code that calls an API app.</source>
          <target state="new">Generated client classes make it easier to write code that calls an API app.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>In this section you see how to consume an API app from an ASP.NET MVC web app.</source>
          <target state="new">In this section you see how to consume an API app from an ASP.NET MVC web app.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You'll run the MVC client and Web API locally first, then deploy the client to a new web app in Azure App Service and run it in the cloud.</source>
          <target state="new">You'll run the MVC client and Web API locally first, then deploy the client to a new web app in Azure App Service and run it in the cloud.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Generate client code</source>
          <target state="new">Generate client code</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You can generate client code for an API app by using Visual Studio or from the command line.</source>
          <target state="new">You can generate client code for an API app by using Visual Studio or from the command line.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For this tutorial you'll use Visual Studio.</source>
          <target state="new">For this tutorial you'll use Visual Studio.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>For information about how to do it from the command line, see the readme file of the <bpt id="p1">[</bpt>Azure/autorest<ept id="p1">](https://github.com/azure/autorest)</ept> repository on GitHub.com.</source>
          <target state="new">For information about how to do it from the command line, see the readme file of the <bpt id="p1">[</bpt>Azure/autorest<ept id="p1">](https://github.com/azure/autorest)</ept> repository on GitHub.com.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The ContactsList.MVC project already has the generated client code, but you'll delete it and regenerate it to make your own API app's URL be the default target URL.</source>
          <target state="new">The ContactsList.MVC project already has the generated client code, but you'll delete it and regenerate it to make your own API app's URL be the default target URL.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>In Visual Studio <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, in the ContactsList.MVC project, delete the <bpt id="p2">*</bpt>ContactsList.API<ept id="p2">*</ept> folder.</source>
          <target state="new">In Visual Studio <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, in the ContactsList.MVC project, delete the <bpt id="p2">*</bpt>ContactsList.API<ept id="p2">*</ept> folder.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>This folder was created by using the code generation process that you're about to go through.</source>
          <target state="new">This folder was created by using the code generation process that you're about to go through.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Right-click the ContactsList.MVC project, and then click <bpt id="p1">**</bpt>Add &gt; REST API Client<ept id="p1">**</ept>.</source>
          <target state="new">Right-click the ContactsList.MVC project, and then click <bpt id="p1">**</bpt>Add &gt; REST API Client<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add REST APi Client<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>Download from Microsoft Azure API App<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Browse<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Add REST APi Client<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>Download from Microsoft Azure API App<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Browse<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, expand the <bpt id="p2">**</bpt>ContactsListGroup<ept id="p2">**</ept> resource group and select your API app, and then click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, expand the <bpt id="p2">**</bpt>ContactsListGroup<ept id="p2">**</ept> resource group and select your API app, and then click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This dialog box gives more than one way to organize API apps in the list, in case you have too many to scroll through.</source>
          <target state="new">This dialog box gives more than one way to organize API apps in the list, in case you have too many to scroll through.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>It also lets you enter a search string to filter API apps by name.</source>
          <target state="new">It also lets you enter a search string to filter API apps by name.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If you don't see the API app in the list, chances are that when you were creating the API app you accidentally omitted the step that changed the type from web app to API app.</source>
          <target state="new">If you don't see the API app in the list, chances are that when you were creating the API app you accidentally omitted the step that changed the type from web app to API app.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In that case, you can create a new API app by repeating the steps you did earlier.</source>
          <target state="new">In that case, you can create a new API app by repeating the steps you did earlier.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You'll need to choose a different name for the API app, unless you go to the portal and delete the web app first.</source>
          <target state="new">You'll need to choose a different name for the API app, unless you go to the portal and delete the web app first.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Notice that when you return to the <bpt id="p1">**</bpt>Add REST API Client<ept id="p1">**</ept> dialog, the text box has been filled in with the API definition URL value that you saw earlier in the portal.</source>
          <target state="new">Notice that when you return to the <bpt id="p1">**</bpt>Add REST API Client<ept id="p1">**</ept> dialog, the text box has been filled in with the API definition URL value that you saw earlier in the portal.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>As an alternative, you could enter the URL directly instead of going through the browse dialog.</source>
          <target state="new">As an alternative, you could enter the URL directly instead of going through the browse dialog.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For example, if you deployed your API to a web app and it doesn't show up in the browse dialog, you can manually enter the URL that returns Swagger metadata here.</source>
          <target state="new">For example, if you deployed your API to a web app and it doesn't show up in the browse dialog, you can manually enter the URL that returns Swagger metadata here.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Notice also the <bpt id="p1">**</bpt>Select an existing Swagger metadata file<ept id="p1">**</ept> option.</source>
          <target state="new">Notice also the <bpt id="p1">**</bpt>Select an existing Swagger metadata file<ept id="p1">**</ept> option.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If you want to generate code before deploying to Azure, you could run locally, download the Swagger JSON file, and select it here.</source>
          <target state="new">If you want to generate code before deploying to Azure, you could run locally, download the Swagger JSON file, and select it here.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add REST API Client<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Add REST API Client<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Visual Studio creates a folder named after the API app and generates client classes.</source>
          <target state="new">Visual Studio creates a folder named after the API app and generates client classes.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>Controllers\ContactsController.cs<ept id="p1">*</ept> to see the code that calls the API by using the generated client.</source>
          <target state="new">Open <bpt id="p1">*</bpt>Controllers\ContactsController.cs<ept id="p1">*</ept> to see the code that calls the API by using the generated client.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The following snippet shows how to instantiate the client object and call the Get method.</source>
          <target state="new">The following snippet shows how to instantiate the client object and call the Get method.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This code passes in to the local IIS Express URL of thet API project to the client class constructor so that you can run the MVC web project and the API project locally.</source>
          <target state="new">This code passes in to the local IIS Express URL of thet API project to the client class constructor so that you can run the MVC web project and the API project locally.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If you omit the constructor parameter, the default endpoint is the URL that you generated the code from.</source>
          <target state="new">If you omit the constructor parameter, the default endpoint is the URL that you generated the code from.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Your client class will be generated with a different name based on your API app name; change this code so that the type name matches what was generated in your project.</source>
          <target state="new">Your client class will be generated with a different name based on your API app name; change this code so that the type name matches what was generated in your project.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For example, if you named your API App ContactsListAPIContoso, the code would look like the following example:</source>
          <target state="new">For example, if you named your API App ContactsListAPIContoso, the code would look like the following example:</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Build the solution.</source>
          <target state="new">Build the solution.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The controller and views of the MVC project look similar to controller and views that have been scaffolded for Entity Framework because that's how they were created -- by scaffolding an Entity Framework data model and then making minor changes to use the REST API client instead of an Entity Framework database context.</source>
          <target state="new">The controller and views of the MVC project look similar to controller and views that have been scaffolded for Entity Framework because that's how they were created -- by scaffolding an Entity Framework data model and then making minor changes to use the REST API client instead of an Entity Framework database context.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Run locally</source>
          <target state="new">Run locally</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Set the ContactsList.API and ContactsList.MVC projects as startup projects, with ContactsList.API starting before ContactsList.MVC.</source>
          <target state="new">Set the ContactsList.API and ContactsList.MVC projects as startup projects, with ContactsList.API starting before ContactsList.MVC.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>(Right-click the solution, click <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Multiple startup projects<ept id="p2">**</ept>, and set each project to <bpt id="p3">**</bpt>Start<ept id="p3">**</ept>.</source>
          <target state="new">(Right-click the solution, click <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Multiple startup projects<ept id="p2">**</ept>, and set each project to <bpt id="p3">**</bpt>Start<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Use the up/down arrow icons to ensure that ContactsList.API is first in the list.)</source>
          <target state="new">Use the up/down arrow icons to ensure that ContactsList.API is first in the list.)</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Press F5 to start the projects.</source>
          <target state="new">Press F5 to start the projects.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>One browser displays the 403 page for the API and one displays the home page of the MVC app.</source>
          <target state="new">One browser displays the 403 page for the API and one displays the home page of the MVC app.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> in the menu bar of the browser that displays the MVC app's home page.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> in the menu bar of the browser that displays the MVC app's home page.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The MVC UI displays the contacts that are stored locally, and you can use the UI to add and delete contacts.</source>
          <target state="new">The MVC UI displays the contacts that are stored locally, and you can use the UI to add and delete contacts.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Create a web app in Azure and deploy the ContactsList.MVC project to it</source>
          <target state="new">Create a web app in Azure and deploy the ContactsList.MVC project to it</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In this section you use the same method to create a web app that you did earlier to create an API app, and the same method to deploy a web project to the Azure web app.</source>
          <target state="new">In this section you use the same method to create a web app that you did earlier to create an API app, and the same method to deploy a web project to the Azure web app.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Change the MVC project to point to the Azure API app</source>
          <target state="new">Change the MVC project to point to the Azure API app</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Before deploying to Azure, change the API endpoint in the MVC project so that when the code is deployed it will call the Azure API app that you created earlier instead of localhost.</source>
          <target state="new">Before deploying to Azure, change the API endpoint in the MVC project so that when the code is deployed it will call the Azure API app that you created earlier instead of localhost.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In the ContactsList.MVC project, open <bpt id="p1">*</bpt>Controllers\ContactsController.cs<ept id="p1">*</ept>.</source>
          <target state="new">In the ContactsList.MVC project, open <bpt id="p1">*</bpt>Controllers\ContactsController.cs<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Comment out the line that sets the API base URL to the localhost URL, uncomment the line that has no constructor parrameter.</source>
          <target state="new">Comment out the line that sets the API base URL to the localhost URL, uncomment the line that has no constructor parrameter.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The code now looks like the following example, except that in both lines the class name reflects the name of your API app that you generated the code from.</source>
          <target state="new">The code now looks like the following example, except that in both lines the class name reflects the name of your API app that you generated the code from.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The default target URL is your Azure API app because you generated the code from there; if you used a different method to generate the code you might have to specify the Azure API app URL the same way you specified the local URL.</source>
          <target state="new">The default target URL is your Azure API app because you generated the code from there; if you used a different method to generate the code you might have to specify the Azure API app URL the same way you specified the local URL.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Create a web app to host the MVC site</source>
          <target state="new">Create a web app to host the MVC site</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the ContactsList.MVC project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the ContactsList.MVC project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard, click the <bpt id="p2">**</bpt>Profile<ept id="p2">**</ept> tab.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard, click the <bpt id="p2">**</bpt>Profile<ept id="p2">**</ept> tab.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Microsoft Azure App Service<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Microsoft Azure App Service<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>New<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>New<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Hosting<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Create App Service<ept id="p2">**</ept> dialog box, click <bpt id="p3">**</bpt>Change Type<ept id="p3">**</ept>, and make sure the type is <bpt id="p4">**</bpt>Web App<ept id="p4">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Hosting<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Create App Service<ept id="p2">**</ept> dialog box, click <bpt id="p3">**</bpt>Change Type<ept id="p3">**</ept>, and make sure the type is <bpt id="p4">**</bpt>Web App<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Enter a <bpt id="p1">**</bpt>Web App Name<ept id="p1">**</ept> that is unique in the <bpt id="p2">*</bpt>azurewebsites.net<ept id="p2">*</ept> domain.</source>
          <target state="new">Enter a <bpt id="p1">**</bpt>Web App Name<ept id="p1">**</ept> that is unique in the <bpt id="p2">*</bpt>azurewebsites.net<ept id="p2">*</ept> domain.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Choose the Azure <bpt id="p1">**</bpt>Subscription<ept id="p1">**</ept> you want to work with.</source>
          <target state="new">Choose the Azure <bpt id="p1">**</bpt>Subscription<ept id="p1">**</ept> you want to work with.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Resource Group<ept id="p1">**</ept> drop-down, choose the same resource group you created earlier.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Resource Group<ept id="p1">**</ept> drop-down, choose the same resource group you created earlier.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App Service Plan<ept id="p1">**</ept> drop-down, choose the same plan you created earlier.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App Service Plan<ept id="p1">**</ept> drop-down, choose the same plan you created earlier.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Visual Studio creates the web app, creates a publish profile for it, and displays the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard.</source>
          <target state="new">Visual Studio creates the web app, creates a publish profile for it, and displays the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Deploy the ContactsList.Web project to the new web app</source>
          <target state="new">Deploy the ContactsList.Web project to the new web app</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Publish<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Publish<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Visual Studio deploys the ContactsList.MVC project to the new web app and opens a browser to the URL of the web app.</source>
          <target state="new">Visual Studio deploys the ContactsList.MVC project to the new web app and opens a browser to the URL of the web app.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The same MVC UI appears that you saw running locally, except now it is showing the contacts that are stored in the Azure API app's file system.</source>
          <target state="new">The same MVC UI appears that you saw running locally, except now it is showing the contacts that are stored in the Azure API app's file system.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>In this tutorial, you've seen how to create API apps, deploy code to them, and consume them from .NET clients.</source>
          <target state="new">In this tutorial, you've seen how to create API apps, deploy code to them, and consume them from .NET clients.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The next tutorial in the API Apps getting started series shows how to <bpt id="p1">[</bpt>consume API apps from JavaScript clients, using CORS<ept id="p1">](app-service-api-cors-consume-javascript.md)</ept>.</source>
          <target state="new">The next tutorial in the API Apps getting started series shows how to <bpt id="p1">[</bpt>consume API apps from JavaScript clients, using CORS<ept id="p1">](app-service-api-cors-consume-javascript.md)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>