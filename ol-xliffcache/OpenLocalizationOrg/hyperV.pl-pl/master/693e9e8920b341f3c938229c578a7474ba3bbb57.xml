{
  "nodes": [
    {
      "content": "How to work with the .NET backend server SDK for Mobile Apps | Azure App Service",
      "pos": [
        27,
        107
      ]
    },
    {
      "content": "Learn how to work with the .NET backend server SDK for Azure App Service Mobile Apps.",
      "pos": [
        126,
        211
      ]
    },
    {
      "content": "Work with the .NET backend server SDK for Azure Mobile Apps",
      "pos": [
        670,
        729
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        846,
        852
      ]
    },
    {
      "content": "This topic shows you how to use the .NET backend server SDK in key Azure App Service Mobile Apps scenarios.",
      "pos": [
        972,
        1079
      ]
    },
    {
      "content": "The Azure Mobile Apps SDK helps you work with mobile clients from your ASP.NET application.",
      "pos": [
        1080,
        1171
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> The <bpt id=\"p1\">[</bpt>.NET server SDK for Azure Mobile Apps<ept id=\"p1\">](https://github.com/Azure/azure-mobile-apps-net-server)</ept> is open source on GitHub.",
      "pos": [
        1174,
        1310
      ]
    },
    {
      "content": "The repository contains the entire server SDK unit test suite as well as some sample projects.",
      "pos": [
        1311,
        1405
      ]
    },
    {
      "content": "Reference documentation",
      "pos": [
        1410,
        1433
      ]
    },
    {
      "pos": [
        1435,
        1590
      ],
      "content": "The reference documentation for the server SDK is located here: <bpt id=\"p1\">[</bpt>Azure Mobile Apps .NET Reference<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn961176.aspx)</ept>."
    },
    {
      "pos": [
        1595,
        1677
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create a .NET backend for your mobile application"
    },
    {
      "content": "If you are starting a new project, you can create an App Service application using either the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept> or Visual Studio.",
      "pos": [
        1679,
        1805
      ]
    },
    {
      "content": "This section will help you use one of these to create a new mobile application backend which hosts a simple todo list API.",
      "pos": [
        1806,
        1928
      ]
    },
    {
      "content": "You can run this locally or publish the project to your cloud-based App Service mobile app.",
      "pos": [
        1929,
        2020
      ]
    },
    {
      "pos": [
        2022,
        2154
      ],
      "content": "If you are adding mobile capabilities to an existing project, see the <bpt id=\"p1\">[</bpt>Download and initialize the SDK<ept id=\"p1\">](#install-sdk)</ept> section below."
    },
    {
      "content": "Create a .NET backend using the Azure portal",
      "pos": [
        2160,
        2204
      ]
    },
    {
      "content": "You can create a new mobile application right in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept>.",
      "pos": [
        2206,
        2274
      ]
    },
    {
      "content": "You can either follow the steps below, or create a new client and server together by following the <bpt id=\"p1\">[</bpt>Create a mobile app<ept id=\"p1\">](app-service-mobile-ios-get-started.md)</ept> tutorial.",
      "pos": [
        2275,
        2444
      ]
    },
    {
      "content": "&amp;nbsp;&amp;nbsp;9.",
      "pos": [
        2590,
        2604
      ]
    },
    {
      "content": "Back in the <bpt id=\"p1\">_</bpt>Get started<ept id=\"p1\">_</ept> blade, under <bpt id=\"p2\">**</bpt>Create a table API<ept id=\"p2\">**</ept>, choose <bpt id=\"p3\">**</bpt>C#<ept id=\"p3\">**</ept> as your <bpt id=\"p4\">**</bpt>Backend language<ept id=\"p4\">**</ept>.",
      "pos": [
        2605,
        2711
      ]
    },
    {
      "content": "&amp;nbsp;&amp;nbsp;10.",
      "pos": [
        2713,
        2728
      ]
    },
    {
      "content": "Click Download, extract the compressed project files to your local computer, and open the solution in Visual Studio.",
      "pos": [
        2729,
        2845
      ]
    },
    {
      "content": "Create a .NET backend using Visual Studio 2013 and Visual Studio 2015",
      "pos": [
        2851,
        2920
      ]
    },
    {
      "content": "In order to create a Mobile Apps project in Visual Studio, you will need to install the <bpt id=\"p1\">[</bpt>Azure SDK for .NET<ept id=\"p1\">](https://azure.microsoft.com/downloads/)</ept>, version 2.8.1 or later.",
      "pos": [
        2922,
        3095
      ]
    },
    {
      "content": "Once you have installed the SDK, create a new ASP.NET application:",
      "pos": [
        3096,
        3162
      ]
    },
    {
      "pos": [
        3167,
        3240
      ],
      "content": "Open the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog (from <bpt id=\"p2\">*</bpt>File<ept id=\"p2\">*</ept> &gt; <bpt id=\"p3\">**</bpt>New<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>Project...<ept id=\"p4\">**</ept>)."
    },
    {
      "pos": [
        3245,
        3302
      ],
      "content": "Expand <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept>, and select <bpt id=\"p3\">**</bpt>Web<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        3307,
        3342
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>ASP.NET Web Application<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Fill in the project name.",
      "pos": [
        3347,
        3372
      ]
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        3373,
        3391
      ]
    },
    {
      "content": "Under <bpt id=\"p1\">_</bpt>ASP.NET 4.5.2 Templates<ept id=\"p1\">_</ept>, select <bpt id=\"p2\">**</bpt>Azure Mobile App<ept id=\"p2\">**</ept>.",
      "pos": [
        3396,
        3457
      ]
    },
    {
      "content": "Check <bpt id=\"p1\">**</bpt>Host in the cloud<ept id=\"p1\">**</ept> to create a new mobile app in the cloud to which you can publish this project.",
      "pos": [
        3458,
        3564
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        3569,
        3582
      ]
    },
    {
      "content": "Your application will be created and appear in the Solution Explorer.",
      "pos": [
        3583,
        3652
      ]
    },
    {
      "pos": [
        3657,
        3722
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"install-sdk\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Download and initialize the SDK"
    },
    {
      "content": "The SDK is available on <bpt id=\"p1\">[</bpt><ept id=\"p1\">NuGet.org]</ept>.",
      "pos": [
        3724,
        3760
      ]
    },
    {
      "content": "This package includes the base functionality required to get started using the SDK.",
      "pos": [
        3761,
        3844
      ]
    },
    {
      "content": "To initialize the SDK, you need to perform actions on the <bpt id=\"p1\">**</bpt>HttpConfiguration<ept id=\"p1\">**</ept> object.",
      "pos": [
        3845,
        3932
      ]
    },
    {
      "content": "Install the SDK",
      "pos": [
        3938,
        3953
      ]
    },
    {
      "pos": [
        3955,
        4202
      ],
      "content": "To install the SDK, right-click on the server project in Visual Studio, select <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept>, search for the <bpt id=\"p2\">[</bpt>Microsoft.Azure.Mobile.Server<ept id=\"p2\">](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server/)</ept> package, then click <bpt id=\"p3\">**</bpt>Install<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        4209,
        4274
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"server-project-setup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Initialize the server project"
    },
    {
      "content": "A .NET backend server project is initialized similar to other ASP.NET projects, by including an OWIN startup class.",
      "pos": [
        4276,
        4391
      ]
    },
    {
      "content": "Ensure that you have referenced the NuGet package <ph id=\"ph1\">`Microsoft.Owin.Host.SystemWeb`</ph>.",
      "pos": [
        4392,
        4474
      ]
    },
    {
      "content": "To add this class in Visual Studio, right-click on your server project and select <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> -&gt; <bpt id=\"p2\">**</bpt>New Item<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>Web<ept id=\"p3\">**</ept> -&gt; <bpt id=\"p4\">**</bpt>General<ept id=\"p4\">**</ept> -&gt; <bpt id=\"p5\">**</bpt>OWIN Startup class<ept id=\"p5\">**</ept>.",
      "pos": [
        4475,
        4636
      ]
    },
    {
      "content": "This will generate a class with the following attribute:",
      "pos": [
        4638,
        4694
      ]
    },
    {
      "content": "In the <ph id=\"ph1\">`Configuration()`</ph> method of your OWIN startup class, set up the server project using an <bpt id=\"p1\">**</bpt>HttpConfiguration<ept id=\"p1\">**</ept> object which represents the configuration options for the service.",
      "pos": [
        4771,
        4954
      ]
    },
    {
      "content": "The following example initialize the server project, with no added features:",
      "pos": [
        4955,
        5031
      ]
    },
    {
      "content": "To enable individual features, you must call extension methods on the <bpt id=\"p1\">**</bpt>MobileAppConfiguration<ept id=\"p1\">**</ept> object before calling <bpt id=\"p2\">**</bpt>ApplyTo<ept id=\"p2\">**</ept>.",
      "pos": [
        5333,
        5464
      ]
    },
    {
      "content": "For example, the following code adds the default routes to all API controllers that have the attribute <ph id=\"ph1\">`[MobileAppController]`</ph> during initialization:",
      "pos": [
        5465,
        5614
      ]
    },
    {
      "pos": [
        5705,
        5800
      ],
      "content": "Note that <ph id=\"ph1\">`MapApiControllers`</ph> only maps controllers with the attribute <ph id=\"ph2\">`[MobileAppController]`</ph>."
    },
    {
      "content": "Many of the feature extension methods are available via additional NuGet packages you can include, which are described in the section below.",
      "pos": [
        5802,
        5942
      ]
    },
    {
      "content": "The server quickstart from the Azure portal calls <bpt id=\"p1\">**</bpt>UseDefaultConfiguration()<ept id=\"p1\">**</ept>.",
      "pos": [
        5945,
        6025
      ]
    },
    {
      "content": "This equivalent to the following setup:",
      "pos": [
        6026,
        6065
      ]
    },
    {
      "content": "SDK extensions",
      "pos": [
        6703,
        6717
      ]
    },
    {
      "content": "The following NuGet-based extension packages provide various mobile features that can be used by your application.",
      "pos": [
        6719,
        6833
      ]
    },
    {
      "content": "You enable extensions during initialization by using the <bpt id=\"p1\">**</bpt>MobileAppConfiguration<ept id=\"p1\">**</ept> object.",
      "pos": [
        6834,
        6925
      ]
    },
    {
      "pos": [
        6929,
        7343
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Quickstart]  \n   Supports the basic Mobile Apps setup. Added to the configuration by calling the **UseDefaultConfiguration** extension method during initialization. This extension includes following extensions: Notifications, Authentication, Entity, Tables, Crossdomain and Home packages. This is equivalent to the quickstart server project that you download from the Azure portal.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Quickstart]</ept>  \n   Supports the basic Mobile Apps setup.",
          "pos": [
            0,
            85
          ]
        },
        {
          "content": "Added to the configuration by calling the <bpt id=\"p1\">**</bpt>UseDefaultConfiguration<ept id=\"p1\">**</ept> extension method during initialization.",
          "pos": [
            86,
            195
          ]
        },
        {
          "content": "This extension includes following extensions: Notifications, Authentication, Entity, Tables, Crossdomain and Home packages.",
          "pos": [
            196,
            319
          ]
        },
        {
          "content": "This is equivalent to the quickstart server project that you download from the Azure portal.",
          "pos": [
            320,
            412
          ]
        }
      ]
    },
    {
      "pos": [
        7347,
        7633
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Home](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Home/)   \n  Implements the default *this mobile app is up and running page* for the web site root. Add to the configuration by calling the **AddMobileAppHomeController** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Microsoft.Azure.Mobile.Server.Home<ept id=\"p1\">](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Home/)</ept><ph id=\"ph1\"> </ph>",
          "pos": [
            0,
            104
          ]
        },
        {
          "content": "  Implements the default *this mobile app is up and running page* for the web site root. Add to the configuration by calling the **AddMobileAppHomeController** extension method.",
          "pos": [
            107,
            284
          ],
          "nodes": [
            {
              "content": "Implements the default <bpt id=\"p1\">*</bpt>this mobile app is up and running page<ept id=\"p1\">*</ept> for the web site root.",
              "pos": [
                2,
                88
              ]
            },
            {
              "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddMobileAppHomeController<ept id=\"p1\">**</ept> extension method.",
              "pos": [
                89,
                177
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        7637,
        7892
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Tables](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Tables/)  \n  includes classes for working with data and sets-up the data pipeline. Add to the configuration by calling the **AddTables** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Microsoft.Azure.Mobile.Server.Tables",
          "pos": [
            1,
            37
          ]
        },
        {
          "content": "  includes classes for working with data and sets-up the data pipeline. Add to the configuration by calling the **AddTables** extension method.",
          "pos": [
            110,
            253
          ],
          "nodes": [
            {
              "content": "includes classes for working with data and sets-up the data pipeline.",
              "pos": [
                2,
                71
              ]
            },
            {
              "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddTables<ept id=\"p1\">**</ept> extension method.",
              "pos": [
                72,
                143
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        7896,
        8166
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Entity](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Entity/)   \n  Enables the Entity Framework to access data in the SQL Database. Add to the configuration by calling the **AddTablesWithEntityFramework** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Microsoft.Azure.Mobile.Server.Entity<ept id=\"p1\">](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Entity/)</ept><ph id=\"ph1\"> </ph>",
          "pos": [
            0,
            108
          ]
        },
        {
          "content": "  Enables the Entity Framework to access data in the SQL Database. Add to the configuration by calling the **AddTablesWithEntityFramework** extension method.",
          "pos": [
            111,
            268
          ],
          "nodes": [
            {
              "content": "Enables the Entity Framework to access data in the SQL Database.",
              "pos": [
                2,
                66
              ]
            },
            {
              "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddTablesWithEntityFramework<ept id=\"p1\">**</ept> extension method.",
              "pos": [
                67,
                157
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        8170,
        8444
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Authentication]  \n  Enables authentication and sets-up the OWIN middleware used to validate tokens. Add to the configuration by calling the **AddAppServiceAuthentication** and **IAppBuilder**.**UseMobileAppAuthentication** extension methods.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Authentication]</ept>  \n  Enables authentication and sets-up the OWIN middleware used to validate tokens.",
          "pos": [
            0,
            130
          ]
        },
        {
          "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddAppServiceAuthentication<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>IAppBuilder<ept id=\"p2\">**</ept>.<bpt id=\"p3\">**</bpt>UseMobileAppAuthentication<ept id=\"p3\">**</ept> extension methods.",
          "pos": [
            131,
            272
          ]
        }
      ]
    },
    {
      "pos": [
        8448,
        8649
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Notifications]\n  Enables push notifications and defines a push registration endpoint. Add to the configuration by calling the **AddPushNotifications** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Notifications]</ept>\n  Enables push notifications and defines a push registration endpoint.",
          "pos": [
            0,
            116
          ]
        },
        {
          "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddPushNotifications<ept id=\"p1\">**</ept> extension method.",
          "pos": [
            117,
            199
          ]
        }
      ]
    },
    {
      "pos": [
        8653,
        8952
      ],
      "content": "[Microsoft.Azure.Mobile.Server.CrossDomain](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.CrossDomain/)  \n  Creates a controller that serves data to legacy web browsers from your Mobile App. Add to the configuration by calling the **MapLegacyCrossDomainController** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Microsoft.Azure.Mobile.Server.CrossDomain",
          "pos": [
            1,
            42
          ]
        },
        {
          "content": "  Creates a controller that serves data to legacy web browsers from your Mobile App. Add to the configuration by calling the **MapLegacyCrossDomainController** extension method.",
          "pos": [
            120,
            297
          ],
          "nodes": [
            {
              "content": "Creates a controller that serves data to legacy web browsers from your Mobile App.",
              "pos": [
                2,
                84
              ]
            },
            {
              "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>MapLegacyCrossDomainController<ept id=\"p1\">**</ept> extension method.",
              "pos": [
                85,
                177
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        8956,
        9180
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Login] \n   Provides preview support for custom authentication via the MobileAppLoginHandler.CreateToken() method. This is a static method and does not need to be enabled in the configuration.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Login]</ept> \n   Provides preview support for custom authentication via the MobileAppLoginHandler.CreateToken() method.",
          "pos": [
            0,
            144
          ]
        },
        {
          "content": "This is a static method and does not need to be enabled in the configuration.",
          "pos": [
            145,
            222
          ]
        }
      ]
    },
    {
      "content": "How to: Publish the server project",
      "pos": [
        9185,
        9219
      ]
    },
    {
      "pos": [
        9359,
        9500
      ],
      "content": "You can also use any of the other methods covered in the <bpt id=\"p1\">[</bpt>Azure App Service deployment documentation<ept id=\"p1\">](../app-service-web/web-site-deploy.md)</ept>."
    },
    {
      "content": "How to: Define a table controller",
      "pos": [
        9505,
        9538
      ]
    },
    {
      "content": "A table controller provides access to entity data in a table-based data store, such as SQL Database or Azure Table storage.",
      "pos": [
        9540,
        9663
      ]
    },
    {
      "content": "Table controllers inherit from the <bpt id=\"p1\">**</bpt>TableController<ept id=\"p1\">**</ept> generic class, where the generic type is an entity in the model that represents the table schema, as follows:",
      "pos": [
        9664,
        9828
      ]
    },
    {
      "content": "Table controllers are initialized by using the <bpt id=\"p1\">**</bpt>AddTables<ept id=\"p1\">**</ept> extension method.",
      "pos": [
        9923,
        10001
      ]
    },
    {
      "content": "This adds routes under <ph id=\"ph1\">`/tables/`</ph> for all subclasses of <ph id=\"ph2\">`TableController`</ph>.",
      "pos": [
        10002,
        10076
      ]
    },
    {
      "content": "The following example initializes a table controller that uses Entity Framework for data access:",
      "pos": [
        10079,
        10175
      ]
    },
    {
      "pos": [
        10344,
        10552
      ],
      "content": "For an example of a table controller that uses Entity Framework to access data from an Azure SQL Database, see the <bpt id=\"p1\">**</bpt>TodoItemController<ept id=\"p1\">**</ept> class in the quickstart server project download from the Azure portal."
    },
    {
      "content": "How to: Define a custom API controller",
      "pos": [
        10557,
        10595
      ]
    },
    {
      "content": "The custom API controller provides the most basic functionality to your Mobile App backend by exposing an endpoint.",
      "pos": [
        10597,
        10712
      ]
    },
    {
      "content": "You can register a mobile-specific API controller using the attribute <ph id=\"ph1\">`MobileAppControllerAttribute`</ph>.",
      "pos": [
        10713,
        10814
      ]
    },
    {
      "content": "This attribute registers the route and also sets up the Mobile Apps JSON serializer.",
      "pos": [
        10815,
        10899
      ]
    },
    {
      "pos": [
        10905,
        11058
      ],
      "content": "In Visual Studio, right-click the Controllers folder, then click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Controller<ept id=\"p2\">**</ept>, select <bpt id=\"p3\">**</bpt>Web API 2 Controller&amp;mdash;Empty<ept id=\"p3\">**</ept> and click <bpt id=\"p4\">**</bpt>Add<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Supply a <bpt id=\"p1\">**</bpt>Controller name<ept id=\"p1\">**</ept>, such as <ph id=\"ph1\">`CustomController`</ph>, and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.",
      "pos": [
        11063,
        11139
      ]
    },
    {
      "content": "This creates a new <bpt id=\"p1\">**</bpt>CustomController<ept id=\"p1\">**</ept> class that inherits from <bpt id=\"p2\">**</bpt>ApiController<ept id=\"p2\">**</ept>.",
      "pos": [
        11140,
        11223
      ]
    },
    {
      "content": "In the new controller class file, add the following using statement:",
      "pos": [
        11231,
        11299
      ]
    },
    {
      "pos": [
        11357,
        11468
      ],
      "content": "Apply the <bpt id=\"p1\">**</bpt>MobileAppControllerAttribute<ept id=\"p1\">**</ept> to the API controller class definition, as in the following example:"
    },
    {
      "pos": [
        11599,
        11726
      ],
      "content": "In App_Start/Startup.MobileApp.cs file, add a call to the  <bpt id=\"p1\">**</bpt>MapApiControllers<ept id=\"p1\">**</ept> extension method, as in the following example:"
    },
    {
      "pos": [
        11837,
        11973
      ],
      "content": "Note that you do not need to call <bpt id=\"p1\">**</bpt>MapApiControllers<ept id=\"p1\">**</ept> if you instead call <bpt id=\"p2\">**</bpt>UseDefaultConfiguration<ept id=\"p2\">**</ept>, which initializes all features."
    },
    {
      "pos": [
        11976,
        12165
      ],
      "content": "Any controller that does not have <bpt id=\"p1\">**</bpt>MobileAppControllerAttribute<ept id=\"p1\">**</ept> applied can still be accessed by clients, but it may not be correctly consumed by clients using any Mobile App client SDK."
    },
    {
      "content": "How to: Add authentication to a server project",
      "pos": [
        12172,
        12218
      ]
    },
    {
      "content": "You can add authentication to your server project by extending the <bpt id=\"p1\">**</bpt>MobileAppConfiguration<ept id=\"p1\">**</ept> object and configuring OWIN middleware.",
      "pos": [
        12220,
        12353
      ]
    },
    {
      "content": "When you install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Quickstart]</ept> package and call the <bpt id=\"p2\">**</bpt>UseDefaultConfiguration<ept id=\"p2\">**</ept> extension method, you can skip to step 3.",
      "pos": [
        12354,
        12508
      ]
    },
    {
      "pos": [
        12513,
        12598
      ],
      "content": "In Visual Studio, install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Authentication]</ept> package."
    },
    {
      "pos": [
        12604,
        12716
      ],
      "content": "In the Startup.cs project file, add the following line of code at the beginning of the <bpt id=\"p1\">**</bpt>Configuration<ept id=\"p1\">**</ept> method:"
    },
    {
      "content": "This adds the OWIN middleware component that enables your Azure Mobile App to validate tokens issued by the associated App Service gateway.",
      "pos": [
        12771,
        12910
      ]
    },
    {
      "content": "Add the <ph id=\"ph1\">`[Authorize]`</ph> attribute to any controller or method that requires authentication.",
      "pos": [
        12915,
        13004
      ]
    },
    {
      "content": "Users must now be authenticated to access that endpoint or specific APIs.",
      "pos": [
        13005,
        13078
      ]
    },
    {
      "pos": [
        13080,
        13234
      ],
      "content": "To learn about how to authenticate clients to your Mobile Apps backend, see <bpt id=\"p1\">[</bpt>Add authentication to your app<ept id=\"p1\">](app-service-mobile-ios-get-started-users.md)</ept>."
    },
    {
      "pos": [
        13239,
        13319
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"custom-auth\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Use custom authentication for your application"
    },
    {
      "content": "You can choose to provide your own login system if you do not wish to use one of the App Service Authentication/Authorization providers.",
      "pos": [
        13321,
        13457
      ]
    },
    {
      "content": "To do so, install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Login]</ept> package.",
      "pos": [
        13458,
        13526
      ]
    },
    {
      "content": "You will need to provide your own logic for determining if a user should be signed in.",
      "pos": [
        13528,
        13614
      ]
    },
    {
      "content": "For example, you might check against salted and hashed passwords in a database.",
      "pos": [
        13615,
        13694
      ]
    },
    {
      "content": "In the example below, the <ph id=\"ph1\">`isValidAssertion()`</ph> method is responsible for these checks and is defined elsewhere.",
      "pos": [
        13695,
        13806
      ]
    },
    {
      "content": "The custom authentication is exposed by creating a new ApiController and exposing register and login actions like the one below.",
      "pos": [
        13809,
        13937
      ]
    },
    {
      "content": "The client can attempt login by collecting the relevant information from the user and submitting an HTTPS POST to the API with the user information in the body.",
      "pos": [
        13938,
        14098
      ]
    },
    {
      "content": "Once that information is validated, a token can be issued using the <ph id=\"ph1\">`MobileAppLoginHandler.CreateToken()`</ph> method.",
      "pos": [
        14099,
        14212
      ]
    },
    {
      "content": "An example login action might be:",
      "pos": [
        14215,
        14248
      ]
    },
    {
      "content": "In the above, LoginResult and LoginResultUser are just simple objects exposing the properties shown.",
      "pos": [
        15168,
        15268
      ]
    },
    {
      "content": "The client expects login responses to come back as JSON objects of the form:",
      "pos": [
        15269,
        15345
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`MobileAppLoginHandler.CreateToken()`</ph> method includes an <bpt id=\"p1\">_</bpt>audience<ept id=\"p1\">_</ept> and an <bpt id=\"p2\">_</bpt>issuer<ept id=\"p2\">_</ept> parameter.",
      "pos": [
        15487,
        15585
      ]
    },
    {
      "content": "Both of these are typically set to the URL of your application root, using the HTTPS scheme.",
      "pos": [
        15586,
        15678
      ]
    },
    {
      "content": "Similarly you should set <bpt id=\"p1\">_</bpt>secretKey<ept id=\"p1\">_</ept> to be the value of your application's signing key.",
      "pos": [
        15679,
        15766
      ]
    },
    {
      "content": "This is a sensitive value that should never be shared or included in a client.",
      "pos": [
        15767,
        15845
      ]
    },
    {
      "content": "You can obtain this value while hosted in App Service by referencing the <bpt id=\"p1\">_</bpt>WEBSITE_AUTH_SIGNING_KEY<ept id=\"p1\">_</ept> environment variable.",
      "pos": [
        15846,
        15967
      ]
    },
    {
      "content": "If needed in a local debugging context, follow the instructions in the <bpt id=\"p1\">[</bpt>Local debugging with authentication<ept id=\"p1\">](#local-debug)</ept> section to retrieve the key and store it as an application setting.",
      "pos": [
        15968,
        16158
      ]
    },
    {
      "content": "You also need to provide a lifetime for the issued token, as well as any claims you would like included.",
      "pos": [
        16160,
        16264
      ]
    },
    {
      "content": "It is required that you provide a subject claim, as shown in the example code.",
      "pos": [
        16265,
        16343
      ]
    },
    {
      "content": "How to: Add push notifications to a server project",
      "pos": [
        16348,
        16398
      ]
    },
    {
      "content": "You can add push notifications to your server project by extending the <bpt id=\"p1\">**</bpt>MobileAppConfiguration<ept id=\"p1\">**</ept> object and creating a Notification Hubs client.",
      "pos": [
        16400,
        16545
      ]
    },
    {
      "content": "When you install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Quickstart]</ept> package and call the <bpt id=\"p2\">**</bpt>UseDefaultConfiguration<ept id=\"p2\">**</ept> extension method, you can skip down to step 3.",
      "pos": [
        16546,
        16705
      ]
    },
    {
      "content": "In Visual Studio, right-click the server project and click <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept>, search for Microsoft.Azure.Mobile.Server.Notifications`, then click <bpt id=\"p2\">**</bpt>Install<ept id=\"p2\">**</ept>.",
      "pos": [
        16710,
        16876
      ]
    },
    {
      "content": "This installs the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Notifications]</ept> package.",
      "pos": [
        16877,
        16949
      ]
    },
    {
      "pos": [
        16955,
        17083
      ],
      "content": "Repeat this step to install the <ph id=\"ph1\">`Microsoft.Azure.NotificationHubs`</ph> package, which includes the Notification Hubs client library."
    },
    {
      "pos": [
        17089,
        17242
      ],
      "content": "In App_Start/Startup.MobileApp.cs, and add a call to the <bpt id=\"p1\">**</bpt>AddPushNotifications<ept id=\"p1\">**</ept> extension method during initialization, which looks like the following:"
    },
    {
      "content": "This creates the push notification registration endpoint in your server project.",
      "pos": [
        17385,
        17465
      ]
    },
    {
      "content": "This endpoint is used by clients to register with the associated notification hub.",
      "pos": [
        17466,
        17548
      ]
    },
    {
      "content": "Now you need to add the Notification Hub client that is used to send notifications.",
      "pos": [
        17549,
        17632
      ]
    },
    {
      "content": "In a controller from which you want to send push notifications, add the following using statement:",
      "pos": [
        17637,
        17735
      ]
    },
    {
      "content": "Add the following code that creates a Notification Hubs client:",
      "pos": [
        17831,
        17894
      ]
    },
    {
      "content": "At this point, you can use the Notification Hubs client to send push notifications to registered devices.",
      "pos": [
        18620,
        18725
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Add push notifications to your app<ept id=\"p1\">](app-service-mobile-ios-get-started-push.md)</ept>.",
      "pos": [
        18726,
        18833
      ]
    },
    {
      "content": "To learn more about all that you can do with Notification Hubs, see <bpt id=\"p1\">[</bpt>Notification Hubs Overview<ept id=\"p1\">](../notification-hubs/notification-hubs-overview.md)</ept>.",
      "pos": [
        18834,
        18983
      ]
    },
    {
      "pos": [
        18987,
        19070
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"tags\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Add tags to a device installation to enable push-to-tags"
    },
    {
      "content": "Following the above <bpt id=\"p1\">**</bpt>How to: Define a custom API controller<ept id=\"p1\">**</ept>, you will want to set up a custom API on your backend to work with Notification Hubs to add tags to a specific device installation.",
      "pos": [
        19072,
        19266
      ]
    },
    {
      "content": "Make sure you pass along the Installation ID stored on the client local storage and the tags you want to add (optional, since you can also specify tags directly on your backend).",
      "pos": [
        19267,
        19445
      ]
    },
    {
      "content": "The following snippet should be added to your controller to work with Notification Hubs to add a tag to a device Installation ID.",
      "pos": [
        19446,
        19575
      ]
    },
    {
      "pos": [
        19577,
        19751
      ],
      "content": "Using <bpt id=\"p1\">[</bpt>Azure Notification Hubs NuGet<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)</ept> (<bpt id=\"p2\">[</bpt>reference<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/mt414893.aspx)</ept>):"
    },
    {
      "pos": [
        20130,
        20244
      ],
      "content": "To push to these tags, work with <bpt id=\"p1\">[</bpt>Notification Hubs APIs<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn495101.aspx)</ept>."
    },
    {
      "content": "You can also stand up your custom API to register device installations with Notification Hubs directly on your backend.",
      "pos": [
        20246,
        20365
      ]
    },
    {
      "content": "How to: Debug and troubleshoot the .NET Server SDK",
      "pos": [
        20370,
        20420
      ]
    },
    {
      "content": "Azure App Service provides several debugging and troubleshooting techniques for ASP.NET applications:",
      "pos": [
        20422,
        20523
      ]
    },
    {
      "content": "Monitoring an Azure App Service",
      "pos": [
        20528,
        20559
      ]
    },
    {
      "content": "Enable Diagnostic Logging in Azure App Service",
      "pos": [
        20605,
        20651
      ]
    },
    {
      "content": "Toubleshoot an Azure App Service in Visual Studio",
      "pos": [
        20711,
        20760
      ]
    },
    {
      "content": "Logging",
      "pos": [
        20834,
        20841
      ]
    },
    {
      "content": "You can write to App Service diagnostic logs by using the standard ASP.NET trace writing:",
      "pos": [
        20843,
        20932
      ]
    },
    {
      "pos": [
        21064,
        21125
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"local-debug\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Local debugging with authentication"
    },
    {
      "content": "You can run your application locally to test changes before publishing them to the cloud.",
      "pos": [
        21127,
        21216
      ]
    },
    {
      "content": "For many apps, this is just a matter of pressing <bpt id=\"p1\">*</bpt>F5<ept id=\"p1\">*</ept> while in Visual Studio.",
      "pos": [
        21217,
        21294
      ]
    },
    {
      "content": "However, there are some additional considerations when using authentication.",
      "pos": [
        21295,
        21371
      ]
    },
    {
      "content": "You must have a cloud-based mobile app with App Service Authentication/Authorization configured, and your client must have the cloud endpoint specified as the alternate login host.",
      "pos": [
        21373,
        21553
      ]
    },
    {
      "content": "Please see the documentation for your chosen client platform (<bpt id=\"p1\">[</bpt>iOS<ept id=\"p1\">](app-service-mobile-ios-how-to-use-client-library.md)</ept>, <bpt id=\"p2\">[</bpt>Windows/Xamarin<ept id=\"p2\">](app-service-mobile-dotnet-how-to-use-client-library.md)</ept>) for the specific steps required.",
      "pos": [
        21554,
        21783
      ]
    },
    {
      "content": "Ensure that your application has <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Authentication]</ept> installed.",
      "pos": [
        21785,
        21875
      ]
    },
    {
      "content": "Then, in your application's OWIN startup class, add the following, after <ph id=\"ph1\">`MobileAppConfiguration`</ph> has been applied to your <ph id=\"ph2\">`HttpConfiguration`</ph>:",
      "pos": [
        21876,
        22019
      ]
    },
    {
      "content": "In the above example, you should configure the <bpt id=\"p1\">_</bpt>authAudience<ept id=\"p1\">_</ept> and <bpt id=\"p2\">_</bpt>authIssuer<ept id=\"p2\">_</ept> application settings within your Web.config file to each be the URL of your application root, using the HTTPS scheme.",
      "pos": [
        22442,
        22638
      ]
    },
    {
      "content": "Similarly you should set <bpt id=\"p1\">_</bpt>authSigningKey<ept id=\"p1\">_</ept> to be the value of your application's signing key.",
      "pos": [
        22639,
        22731
      ]
    },
    {
      "content": "This is a sensitive value that should never be shared or included in a client.",
      "pos": [
        22732,
        22810
      ]
    },
    {
      "content": "To obtain it, navigate to your app within the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept> and click <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept>.",
      "pos": [
        22811,
        22892
      ]
    },
    {
      "content": "Then select <bpt id=\"p1\">**</bpt>Kudu<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>Go<ept id=\"p2\">**</ept>.",
      "pos": [
        22893,
        22931
      ]
    },
    {
      "content": "This will take you to the Kudu management endpoint for your site.",
      "pos": [
        22932,
        22997
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Environment<ept id=\"p1\">**</ept> and find the value under <bpt id=\"p2\">_</bpt>WEBSITE_AUTH_SIGNING_KEY<ept id=\"p2\">_</ept>.",
      "pos": [
        22998,
        23072
      ]
    },
    {
      "content": "This is the value you should use for <bpt id=\"p1\">_</bpt>authSigningKey<ept id=\"p1\">_</ept> in your local app config.",
      "pos": [
        23073,
        23152
      ]
    },
    {
      "content": "Your locally-running server is now equipped to validate tokens which the client obtains from the cloud-based endpoint.",
      "pos": [
        23154,
        23272
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to work with the .NET backend server SDK for Mobile Apps | Azure App Service\"\n    description=\"Learn how to work with the .NET backend server SDK for Azure App Service Mobile Apps.\"\n    keywords=\"app service, azure app service, mobile app, mobile service, scale, scalable, app deployment, azure app deployment\"\n    services=\"app-service\\mobile\"\n    documentationCenter=\"\"\n    authors=\"ggailey777\" \n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-mobile\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-multiple\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.date=\"12/03/2015\"\n    ms.author=\"glenga\"/>\n\n# Work with the .NET backend server SDK for Azure Mobile Apps\n\n[AZURE.INCLUDE [app-service-mobile-selector-server-sdk](../../includes/app-service-mobile-selector-server-sdk.md)]\n&nbsp;\n\n[AZURE.INCLUDE [app-service-mobile-note-mobile-services](../../includes/app-service-mobile-note-mobile-services.md)]\n\nThis topic shows you how to use the .NET backend server SDK in key Azure App Service Mobile Apps scenarios. The Azure Mobile Apps SDK helps you work with mobile clients from your ASP.NET application.\n\n>[AZURE.TIP] The [.NET server SDK for Azure Mobile Apps](https://github.com/Azure/azure-mobile-apps-net-server) is open source on GitHub. The repository contains the entire server SDK unit test suite as well as some sample projects.\n\n## Reference documentation\n\nThe reference documentation for the server SDK is located here: [Azure Mobile Apps .NET Reference](https://msdn.microsoft.com/library/azure/dn961176.aspx).\n\n## <a name=\"create-app\"></a>How to: Create a .NET backend for your mobile application\n\nIf you are starting a new project, you can create an App Service application using either the [Azure portal] or Visual Studio. This section will help you use one of these to create a new mobile application backend which hosts a simple todo list API. You can run this locally or publish the project to your cloud-based App Service mobile app.\n\nIf you are adding mobile capabilities to an existing project, see the [Download and initialize the SDK](#install-sdk) section below.\n\n### Create a .NET backend using the Azure portal\n\nYou can create a new mobile application right in the [Azure portal]. You can either follow the steps below, or create a new client and server together by following the [Create a mobile app](app-service-mobile-ios-get-started.md) tutorial.\n\n[AZURE.INCLUDE [app-service-mobile-dotnet-backend-create-new-service](../../includes/app-service-mobile-dotnet-backend-create-new-service.md)]\n\n&nbsp;&nbsp;9. Back in the _Get started_ blade, under **Create a table API**, choose **C#** as your **Backend language**.\n\n&nbsp;&nbsp;10. Click Download, extract the compressed project files to your local computer, and open the solution in Visual Studio.\n\n### Create a .NET backend using Visual Studio 2013 and Visual Studio 2015\n\nIn order to create a Mobile Apps project in Visual Studio, you will need to install the [Azure SDK for .NET](https://azure.microsoft.com/downloads/), version 2.8.1 or later. Once you have installed the SDK, create a new ASP.NET application:\n\n1. Open the **New Project** dialog (from *File* > **New** > **Project...**).\n\n2. Expand **Templates** > **Visual C#**, and select **Web**.\n\n3. Select **ASP.NET Web Application**.\n\n4. Fill in the project name. Then click **OK**.\n\n5. Under _ASP.NET 4.5.2 Templates_, select **Azure Mobile App**. Check **Host in the cloud** to create a new mobile app in the cloud to which you can publish this project.\n\n6. Click **OK**. Your application will be created and appear in the Solution Explorer.\n\n## <a name=\"install-sdk\"></a>How to: Download and initialize the SDK\n\nThe SDK is available on [NuGet.org]. This package includes the base functionality required to get started using the SDK. To initialize the SDK, you need to perform actions on the **HttpConfiguration** object. \n\n###Install the SDK\n\nTo install the SDK, right-click on the server project in Visual Studio, select **Manage NuGet Packages**, search for the [Microsoft.Azure.Mobile.Server](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server/) package, then click **Install**.  \n\n###<a name=\"server-project-setup\"></a> Initialize the server project\n\nA .NET backend server project is initialized similar to other ASP.NET projects, by including an OWIN startup class. Ensure that you have referenced the NuGet package `Microsoft.Owin.Host.SystemWeb`. To add this class in Visual Studio, right-click on your server project and select **Add** -> **New Item**, then **Web** -> **General** -> **OWIN Startup class**.\n\nThis will generate a class with the following attribute:\n\n    [assembly: OwinStartup(typeof(YourServiceName.YourStartupClassName))]\n\nIn the `Configuration()` method of your OWIN startup class, set up the server project using an **HttpConfiguration** object which represents the configuration options for the service. The following example initialize the server project, with no added features: \n\n    // in OWIN startup class\n    public void Configuration(IAppBuilder app)\n    {\n        HttpConfiguration config = new HttpConfiguration();\n       \n        new MobileAppConfiguration()\n            // no added features\n            .ApplyTo(config);  \n        \n        app.UseWebApi(config);\n    }\n\nTo enable individual features, you must call extension methods on the **MobileAppConfiguration** object before calling **ApplyTo**. For example, the following code adds the default routes to all API controllers that have the attribute `[MobileAppController]` during initialization:\n\n    new MobileAppConfiguration()\n        .MapApiControllers()\n        .ApplyTo(config);\n\nNote that `MapApiControllers` only maps controllers with the attribute `[MobileAppController]`.\n\nMany of the feature extension methods are available via additional NuGet packages you can include, which are described in the section below. \n\nThe server quickstart from the Azure portal calls **UseDefaultConfiguration()**. This equivalent to the following setup:\n    \n        new MobileAppConfiguration()\n            .AddMobileAppHomeController()             // from the Home package\n            .MapApiControllers()\n            .AddTables(                               // from the Tables package\n                new MobileAppTableConfiguration()\n                    .MapTableControllers()\n                    .AddEntityFramework()             // from the Entity package\n                )\n            .AddPushNotifications()                   // from the Notifications package\n            .MapLegacyCrossDomainController()         // from the CrossDomain package\n            .ApplyTo(config);\n\n\n### SDK extensions\n\nThe following NuGet-based extension packages provide various mobile features that can be used by your application. You enable extensions during initialization by using the **MobileAppConfiguration** object.\n\n- [Microsoft.Azure.Mobile.Server.Quickstart]  \n     Supports the basic Mobile Apps setup. Added to the configuration by calling the **UseDefaultConfiguration** extension method during initialization. This extension includes following extensions: Notifications, Authentication, Entity, Tables, Crossdomain and Home packages. This is equivalent to the quickstart server project that you download from the Azure portal.\n\n- [Microsoft.Azure.Mobile.Server.Home](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Home/)   \n    Implements the default *this mobile app is up and running page* for the web site root. Add to the configuration by calling the **AddMobileAppHomeController** extension method.\n\n- [Microsoft.Azure.Mobile.Server.Tables](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Tables/)  \n    includes classes for working with data and sets-up the data pipeline. Add to the configuration by calling the **AddTables** extension method.\n\n- [Microsoft.Azure.Mobile.Server.Entity](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Entity/)   \n    Enables the Entity Framework to access data in the SQL Database. Add to the configuration by calling the **AddTablesWithEntityFramework** extension method.\n\n- [Microsoft.Azure.Mobile.Server.Authentication]  \n    Enables authentication and sets-up the OWIN middleware used to validate tokens. Add to the configuration by calling the **AddAppServiceAuthentication** and **IAppBuilder**.**UseMobileAppAuthentication** extension methods.\n\n- [Microsoft.Azure.Mobile.Server.Notifications]\n    Enables push notifications and defines a push registration endpoint. Add to the configuration by calling the **AddPushNotifications** extension method.\n\n- [Microsoft.Azure.Mobile.Server.CrossDomain](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.CrossDomain/)  \n    Creates a controller that serves data to legacy web browsers from your Mobile App. Add to the configuration by calling the **MapLegacyCrossDomainController** extension method.\n\n- [Microsoft.Azure.Mobile.Server.Login] \n     Provides preview support for custom authentication via the MobileAppLoginHandler.CreateToken() method. This is a static method and does not need to be enabled in the configuration.\n\n## How to: Publish the server project\n\n[AZURE.INCLUDE [app-service-mobile-dotnet-backend-publish-service](../../includes/app-service-mobile-dotnet-backend-publish-service.md)]\n\nYou can also use any of the other methods covered in the [Azure App Service deployment documentation](../app-service-web/web-site-deploy.md).\n\n## How to: Define a table controller\n\nA table controller provides access to entity data in a table-based data store, such as SQL Database or Azure Table storage. Table controllers inherit from the **TableController** generic class, where the generic type is an entity in the model that represents the table schema, as follows:\n\n    public class TodoItemController : TableController<TodoItem>\n    {  \n        //...\n    }\n\nTable controllers are initialized by using the **AddTables** extension method. This adds routes under `/tables/` for all subclasses of `TableController`. \n\nThe following example initializes a table controller that uses Entity Framework for data access:\n\n    new MobileAppConfiguration().AddTables(\n        new MobileAppTableConfiguration()\n        .MapTableControllers()\n        .AddEntityFramework()).ApplyTo(config);\n \nFor an example of a table controller that uses Entity Framework to access data from an Azure SQL Database, see the **TodoItemController** class in the quickstart server project download from the Azure portal.\n\n## How to: Define a custom API controller\n\nThe custom API controller provides the most basic functionality to your Mobile App backend by exposing an endpoint. You can register a mobile-specific API controller using the attribute `MobileAppControllerAttribute`. This attribute registers the route and also sets up the Mobile Apps JSON serializer. \n\n1. In Visual Studio, right-click the Controllers folder, then click **Add** > **Controller**, select **Web API 2 Controller&mdash;Empty** and click **Add**.\n\n2. Supply a **Controller name**, such as `CustomController`, and click **Add**. This creates a new **CustomController** class that inherits from **ApiController**.   \n\n3. In the new controller class file, add the following using statement:\n\n        using Microsoft.Azure.Mobile.Server.Config;\n\n4. Apply the **MobileAppControllerAttribute** to the API controller class definition, as in the following example:\n\n        [MobileAppController] \n        public class CustomController : ApiController\n        {\n              //...\n        }\n\n4. In App_Start/Startup.MobileApp.cs file, add a call to the  **MapApiControllers** extension method, as in the following example:\n\n        new MobileAppConfiguration()\n            .MapApiControllers()\n            .ApplyTo(config);\n    \n    Note that you do not need to call **MapApiControllers** if you instead call **UseDefaultConfiguration**, which initializes all features. \n\nAny controller that does not have **MobileAppControllerAttribute** applied can still be accessed by clients, but it may not be correctly consumed by clients using any Mobile App client SDK. \n\n\n## How to: Add authentication to a server project\n\nYou can add authentication to your server project by extending the **MobileAppConfiguration** object and configuring OWIN middleware. When you install the [Microsoft.Azure.Mobile.Server.Quickstart] package and call the **UseDefaultConfiguration** extension method, you can skip to step 3.\n\n1. In Visual Studio, install the [Microsoft.Azure.Mobile.Server.Authentication] package. \n\n2. In the Startup.cs project file, add the following line of code at the beginning of the **Configuration** method:\n\n        app.UseMobileAppAuthentication(config);\n\n    This adds the OWIN middleware component that enables your Azure Mobile App to validate tokens issued by the associated App Service gateway.\n\n3. Add the `[Authorize]` attribute to any controller or method that requires authentication. Users must now be authenticated to access that endpoint or specific APIs.\n\nTo learn about how to authenticate clients to your Mobile Apps backend, see [Add authentication to your app](app-service-mobile-ios-get-started-users.md).\n\n## <a name=\"custom-auth\"></a>How to: Use custom authentication for your application\n\nYou can choose to provide your own login system if you do not wish to use one of the App Service Authentication/Authorization providers. To do so, install the [Microsoft.Azure.Mobile.Server.Login] package.\n\nYou will need to provide your own logic for determining if a user should be signed in. For example, you might check against salted and hashed passwords in a database. In the example below, the `isValidAssertion()` method is responsible for these checks and is defined elsewhere. \n\nThe custom authentication is exposed by creating a new ApiController and exposing register and login actions like the one below. The client can attempt login by collecting the relevant information from the user and submitting an HTTPS POST to the API with the user information in the body. Once that information is validated, a token can be issued using the `MobileAppLoginHandler.CreateToken()` method. \n\nAn example login action might be:\n\n        public HttpResponseMessage Post([FromBody] JObject assertion)\n        {\n            if (isValidAssertion(assertion)) // user-defined function, checks against a database\n            {\n                JwtSecurityToken token = MobileAppLoginHandler.CreateToken(new Claim[] { new Claim(JwtRegisteredClaimNames.Sub, assertion[\"username\"]) },\n                    mySigningKey,\n                    myAppURL,\n                    myAppURL,\n                    TimeSpan.FromHours(24) );\n                return this.Request.CreateResponse(HttpStatusCode.OK, new LoginResult()\n                {\n                    AuthenticationToken = token.RawData,\n                    User = new LoginResultUser() { UserId = userName.ToString() }\n                });\n            }\n            else // user assertion was not valid\n            {\n                return this.Request.CreateUnauthorizedResponse();\n            }\n        }\n\nIn the above, LoginResult and LoginResultUser are just simple objects exposing the properties shown. The client expects login responses to come back as JSON objects of the form:\n\n        {\n            \"authenticationToken\": \"<token>\",\n            \"user\": {\n                \"userId\": \"<userId>\"\n            }\n        }\n\nThe `MobileAppLoginHandler.CreateToken()` method includes an _audience_ and an _issuer_ parameter. Both of these are typically set to the URL of your application root, using the HTTPS scheme. Similarly you should set _secretKey_ to be the value of your application's signing key. This is a sensitive value that should never be shared or included in a client. You can obtain this value while hosted in App Service by referencing the _WEBSITE_AUTH_SIGNING_KEY_ environment variable. If needed in a local debugging context, follow the instructions in the [Local debugging with authentication](#local-debug) section to retrieve the key and store it as an application setting.\n\nYou also need to provide a lifetime for the issued token, as well as any claims you would like included. It is required that you provide a subject claim, as shown in the example code.\n\n## How to: Add push notifications to a server project\n\nYou can add push notifications to your server project by extending the **MobileAppConfiguration** object and creating a Notification Hubs client. When you install the [Microsoft.Azure.Mobile.Server.Quickstart] package and call the **UseDefaultConfiguration** extension method, you can skip down to step 3.\n\n1. In Visual Studio, right-click the server project and click **Manage NuGet Packages**, search for Microsoft.Azure.Mobile.Server.Notifications`, then click **Install**. This installs the [Microsoft.Azure.Mobile.Server.Notifications] package.\n \n3. Repeat this step to install the `Microsoft.Azure.NotificationHubs` package, which includes the Notification Hubs client library. \n\n2. In App_Start/Startup.MobileApp.cs, and add a call to the **AddPushNotifications** extension method during initialization, which looks like the following:\n\n        new MobileAppConfiguration()\n            // other features...\n            .AddPushNotifications()\n            .ApplyTo(config);\n\n    This creates the push notification registration endpoint in your server project. This endpoint is used by clients to register with the associated notification hub. Now you need to add the Notification Hub client that is used to send notifications.\n\n3. In a controller from which you want to send push notifications, add the following using statement:\n\n        using System.Collections.Generic;\n        using Microsoft.Azure.NotificationHubs;\n\n4. Add the following code that creates a Notification Hubs client:\n\n        // Get the settings for the server project.\n        HttpConfiguration config = this.Configuration;\n        MobileAppSettingsDictionary settings = \n            config.GetMobileAppSettingsProvider().GetMobileAppSettings();\n        \n        // Get the Notification Hubs credentials for the Mobile App.\n        string notificationHubName = settings.NotificationHubName;\n        string notificationHubConnection = settings\n            .Connections[MobileAppSettingsKeys.NotificationHubConnectionString].ConnectionString;\n\n        // Create a new Notification Hub client.\n        NotificationHubClient hub = NotificationHubClient\n        .CreateClientFromConnectionString(notificationHubConnection, notificationHubName);\n\nAt this point, you can use the Notification Hubs client to send push notifications to registered devices. For more information, see [Add push notifications to your app](app-service-mobile-ios-get-started-push.md). To learn more about all that you can do with Notification Hubs, see [Notification Hubs Overview](../notification-hubs/notification-hubs-overview.md).\n\n##<a name=\"tags\"></a>How to: Add tags to a device installation to enable push-to-tags\n\nFollowing the above **How to: Define a custom API controller**, you will want to set up a custom API on your backend to work with Notification Hubs to add tags to a specific device installation. Make sure you pass along the Installation ID stored on the client local storage and the tags you want to add (optional, since you can also specify tags directly on your backend). The following snippet should be added to your controller to work with Notification Hubs to add a tag to a device Installation ID.\n\nUsing [Azure Notification Hubs NuGet](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/) ([reference](https://msdn.microsoft.com/library/azure/mt414893.aspx)):\n\n        var hub = NotificationHubClient.CreateClientFromConnectionString(\"my-connection-string\", \"my-hub\");\n\n        hub.PatchInstallation(\"my-installation-id\", new[]\n        {\n            new PartialUpdateOperation\n            {\n                Operation = UpdateOperationType.Add,\n                Path = \"/tags\",\n                Value = \"{my-tag}\"\n            }\n        });\n\nTo push to these tags, work with [Notification Hubs APIs](https://msdn.microsoft.com/library/azure/dn495101.aspx).\n\nYou can also stand up your custom API to register device installations with Notification Hubs directly on your backend.\n\n## How to: Debug and troubleshoot the .NET Server SDK\n\nAzure App Service provides several debugging and troubleshooting techniques for ASP.NET applications:\n\n- [Monitoring an Azure App Service](../app-service-web/web-sites-monitor.md)\n- [Enable Diagnostic Logging in Azure App Service](../app-service-web/web-sites-enable-diagnostic-log.md)\n- [Toubleshoot an Azure App Service in Visual Studio](../app-service-web/web-sites-dotnet-troubleshoot-visual-studio.md)\n\n### Logging\n\nYou can write to App Service diagnostic logs by using the standard ASP.NET trace writing:\n\n        ITraceWriter traceWriter = this.Configuration.Services.GetTraceWriter();\n        traceWriter.Info(\"Hello, World\");  \n\n### <a name=\"local-debug\"></a>Local debugging with authentication\n\nYou can run your application locally to test changes before publishing them to the cloud. For many apps, this is just a matter of pressing *F5* while in Visual Studio. However, there are some additional considerations when using authentication.\n\nYou must have a cloud-based mobile app with App Service Authentication/Authorization configured, and your client must have the cloud endpoint specified as the alternate login host. Please see the documentation for your chosen client platform ([iOS](app-service-mobile-ios-how-to-use-client-library.md), [Windows/Xamarin](app-service-mobile-dotnet-how-to-use-client-library.md)) for the specific steps required.\n\nEnsure that your application has [Microsoft.Azure.Mobile.Server.Authentication] installed. Then, in your application's OWIN startup class, add the following, after `MobileAppConfiguration` has been applied to your `HttpConfiguration`:\n        \n        app.UseAppServiceAuthentication(new AppServiceAuthenticationOptions()\n        {\n            SigningKey = ConfigurationManager.AppSettings[\"authSigningKey\"],\n            ValidAudiences = new[] { ConfigurationManager.AppSettings[\"authAudience\"] },\n            ValidIssuers = new[] { ConfigurationManager.AppSettings[\"authIssuer\"] },\n            TokenHandler = config.GetMobileAppTokenHandler()\n        });\n\nIn the above example, you should configure the _authAudience_ and _authIssuer_ application settings within your Web.config file to each be the URL of your application root, using the HTTPS scheme. Similarly you should set _authSigningKey_ to be the value of your application's signing key. This is a sensitive value that should never be shared or included in a client. To obtain it, navigate to your app within the [Azure portal] and click **Tools**. Then select **Kudu** and click **Go**. This will take you to the Kudu management endpoint for your site. Click **Environment** and find the value under _WEBSITE_AUTH_SIGNING_KEY_. This is the value you should use for _authSigningKey_ in your local app config.\n\nYour locally-running server is now equipped to validate tokens which the client obtains from the cloud-based endpoint.\n\n\n[Azure portal]: https://portal.azure.com\n[NuGet.org]: http://www.nuget.org/\n[Microsoft.Azure.Mobile.Server.Quickstart]: http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Quickstart/\n[Microsoft.Azure.Mobile.Server.Authentication]: http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Authentication/\n[Microsoft.Azure.Mobile.Server.Login]: http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Login/\n[Microsoft.Azure.Mobile.Server.Notifications]: http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Notifications/\n\n\n"
}