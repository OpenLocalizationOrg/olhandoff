{
  "nodes": [
    {
      "content": "How to work with the Node.js backend server SDK for Mobile Apps | Azure App Service",
      "pos": [
        27,
        110
      ]
    },
    {
      "content": "Learn how to work with the Node.js backend server SDK for Azure App Service Mobile Apps.",
      "pos": [
        129,
        217
      ]
    },
    {
      "content": "How to use the Azure Mobile Apps Node.js SDK",
      "pos": [
        548,
        592
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        709,
        715
      ]
    },
    {
      "content": "This article provides detailed information and examples showing how to work with a Node.js backend in Azure App Service Mobile Apps.",
      "pos": [
        835,
        967
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This SDK is in PREVIEW.",
      "pos": [
        971,
        1007
      ]
    },
    {
      "content": "As a result, we do not recommend that you use this SDK in production.",
      "pos": [
        1009,
        1078
      ]
    },
    {
      "content": "The examples in this document use v2.0.0-beta1 of <bpt id=\"p1\">[</bpt><ept id=\"p1\">azure-mobile-apps]</ept>.",
      "pos": [
        1080,
        1150
      ]
    },
    {
      "pos": [
        1155,
        1194
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"Introduction\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Introduction"
    },
    {
      "content": "Azure App Service Mobile Apps provides the capability to add a mobile-optimized data access Web API to a web application.",
      "pos": [
        1196,
        1317
      ]
    },
    {
      "content": "The Azure App",
      "pos": [
        1319,
        1332
      ]
    },
    {
      "content": "Service Mobile Apps SDK is provided for ASP.NET and Node.js web applications.",
      "pos": [
        1333,
        1410
      ]
    },
    {
      "content": "The SDK provides the following operations:",
      "pos": [
        1412,
        1454
      ]
    },
    {
      "content": "Table operations (Read, Insert, Update, Delete) for data access",
      "pos": [
        1458,
        1521
      ]
    },
    {
      "content": "Custom API operations",
      "pos": [
        1524,
        1545
      ]
    },
    {
      "content": "Both operations provide for authentication across all identity providers allowed by Azure App Service, including social identity",
      "pos": [
        1547,
        1675
      ]
    },
    {
      "content": "providers such as Facebook, Twitter, Google and Microsoft as well as Azure Active Directory for enterprise identity.",
      "pos": [
        1676,
        1792
      ]
    },
    {
      "pos": [
        1794,
        1870
      ],
      "content": "You can find samples for each use case in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">samples directory on GitHub]</ept>."
    },
    {
      "pos": [
        1876,
        1974
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-cmdline-basicapp\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create a Basic Node.js backend using the Command Line"
    },
    {
      "content": "Every Azure App Service Mobile App Node.js backend starts as an ExpressJS application.",
      "pos": [
        1976,
        2062
      ]
    },
    {
      "content": "ExpressJS is the most popular web service framework",
      "pos": [
        2064,
        2115
      ]
    },
    {
      "content": "available for Node.js.",
      "pos": [
        2116,
        2138
      ]
    },
    {
      "content": "You can create a basic <bpt id=\"p1\">[</bpt><ept id=\"p1\">Express]</ept> application as follows:",
      "pos": [
        2140,
        2196
      ]
    },
    {
      "content": "In a command or PowerShell window, create a new directory for your project.",
      "pos": [
        2201,
        2276
      ]
    },
    {
      "content": "Run npm init to initialize the package structure.",
      "pos": [
        2305,
        2354
      ]
    },
    {
      "content": "The npm init command will ask a set of questions to initialize the project.",
      "pos": [
        2398,
        2473
      ]
    },
    {
      "content": "See the example output below",
      "pos": [
        2475,
        2503
      ]
    },
    {
      "content": "The npm init output",
      "pos": [
        2511,
        2530
      ]
    },
    {
      "content": "Install the express and azure-mobile-apps libraries from the npm repository.",
      "pos": [
        2539,
        2615
      ]
    },
    {
      "content": "Create an app.js file to implement the basic mobile server.",
      "pos": [
        2674,
        2733
      ]
    },
    {
      "content": "This application creates a simple mobile-optimized WebAPI with a single endpoint (<ph id=\"ph1\">`/tables/TodoItem`</ph>) that provides",
      "pos": [
        3154,
        3269
      ]
    },
    {
      "content": "unauthenticated access to an underlying SQL data store using a dynamic schema.",
      "pos": [
        3270,
        3348
      ]
    },
    {
      "content": "It is suitable for following the",
      "pos": [
        3350,
        3382
      ]
    },
    {
      "content": "client library quick starts:",
      "pos": [
        3383,
        3411
      ]
    },
    {
      "content": "Android Client QuickStart",
      "pos": [
        3416,
        3441
      ]
    },
    {
      "content": "iOS Client QuickStart",
      "pos": [
        3446,
        3467
      ]
    },
    {
      "content": "Windows Store Client QuickStart",
      "pos": [
        3472,
        3503
      ]
    },
    {
      "content": "Xamarin.iOS Client QuickStart",
      "pos": [
        3508,
        3537
      ]
    },
    {
      "content": "Xamarin.Android Client QuickStart",
      "pos": [
        3542,
        3575
      ]
    },
    {
      "content": "Xamarin.Forms Client QuickStart",
      "pos": [
        3580,
        3611
      ]
    },
    {
      "pos": [
        3615,
        3699
      ],
      "content": "You can find the code for this basic application in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">basicapp sample on GitHub]</ept>."
    },
    {
      "pos": [
        3705,
        3794
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-vs2015-basicapp\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create a Node backend with Visual Studio 2015"
    },
    {
      "content": "Visual Studio 2015 requires an extension to develop Node.js applications within the IDE.",
      "pos": [
        3796,
        3884
      ]
    },
    {
      "content": "To start, download and install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js Tools 1.1 for Visual Studio]</ept>.",
      "pos": [
        3886,
        3959
      ]
    },
    {
      "content": "Once the Node.js Tools for Visual Studio are installed, create an Express 4.x application:",
      "pos": [
        3961,
        4051
      ]
    },
    {
      "pos": [
        4056,
        4131
      ],
      "content": "Open the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog (from <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>New<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>Project...<ept id=\"p4\">**</ept>)."
    },
    {
      "pos": [
        4136,
        4188
      ],
      "content": "Expand <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>JavaScript<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Node.js<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        4193,
        4250
      ],
      "content": "Select the <bpt id=\"p1\">**</bpt>Basic Azure Node.js Express 4 Application<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Fill in the project name.",
      "pos": [
        4255,
        4280
      ]
    },
    {
      "content": "Click on <bpt id=\"p1\">*</bpt>OK<ept id=\"p1\">*</ept>.",
      "pos": [
        4282,
        4296
      ]
    },
    {
      "content": "Visual Studio 2015 New Project",
      "pos": [
        4304,
        4334
      ]
    },
    {
      "pos": [
        4343,
        4418
      ],
      "content": "Right-click on the <bpt id=\"p1\">**</bpt>npm<ept id=\"p1\">**</ept> node and select <bpt id=\"p2\">**</bpt>Install New npm packages...<ept id=\"p2\">**</ept>."
    },
    {
      "content": "You may need to refresh the npm catalog on creating your first Node.js application.",
      "pos": [
        4423,
        4506
      ]
    },
    {
      "content": "If this is required, you will be prompted - click on <bpt id=\"p1\">**</bpt>Refresh<ept id=\"p1\">**</ept>.",
      "pos": [
        4508,
        4573
      ]
    },
    {
      "content": "Enter <bpt id=\"p1\">_</bpt>azure-mobile-apps<ept id=\"p1\">_</ept> in the search box.",
      "pos": [
        4578,
        4622
      ]
    },
    {
      "content": "Click on the <bpt id=\"p1\">**</bpt>azure-mobile-apps 2.0.0<ept id=\"p1\">**</ept> package, then click on <bpt id=\"p2\">**</bpt>Install Package<ept id=\"p2\">**</ept>.",
      "pos": [
        4624,
        4708
      ]
    },
    {
      "content": "Install New npm packages",
      "pos": [
        4716,
        4740
      ]
    },
    {
      "pos": [
        4749,
        4768
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Open the <bpt id=\"p1\">_</bpt>app.js<ept id=\"p1\">_</ept> file to add support for the Azure Mobile Apps SDK.",
      "pos": [
        4773,
        4841
      ]
    },
    {
      "content": "At line 6 at the bottom of the library require statements, add the following code:",
      "pos": [
        4843,
        4925
      ]
    },
    {
      "content": "At approximately line 27 after the other app.use statements, add the following code:",
      "pos": [
        5041,
        5125
      ]
    },
    {
      "content": "Save the file.",
      "pos": [
        5317,
        5331
      ]
    },
    {
      "content": "Either run the application locally (the API will be served on http://localhost:3000) or publish to Azure.",
      "pos": [
        5337,
        5442
      ]
    },
    {
      "pos": [
        5448,
        5552
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"download-quickstart\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Download the Node.js backend quickstart code project using Git"
    },
    {
      "content": "When you create a new Node.js Mobile App backend by using the portal <bpt id=\"p1\">**</bpt>Quick start<ept id=\"p1\">**</ept> blade, a new Node.js project is created for you and deployed to your site.",
      "pos": [
        5554,
        5713
      ]
    },
    {
      "content": "You can add tables and APIs and edit code files for the Node.js backend in the portal.",
      "pos": [
        5714,
        5800
      ]
    },
    {
      "content": "You can also use one of a variety of deployment tools to download the backend project so that you can add or modify tables and APIs, then republish the project.",
      "pos": [
        5801,
        5961
      ]
    },
    {
      "content": "For more information, see the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure App Service Deployment Guide]</ept>.",
      "pos": [
        5962,
        6029
      ]
    },
    {
      "content": "the following procedure uses a Git repository to download the quickstart project code.",
      "pos": [
        6030,
        6116
      ]
    },
    {
      "content": "Install Git, if you haven't already done so.",
      "pos": [
        6121,
        6165
      ]
    },
    {
      "content": "The steps required to install Git vary between operating systems.",
      "pos": [
        6166,
        6231
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Installing Git<ept id=\"p1\">](http://git-scm.com/book/en/Getting-Started-Installing-Git)</ept> for operating system specific distributions and installation guidance.",
      "pos": [
        6232,
        6382
      ]
    },
    {
      "pos": [
        6387,
        6607
      ],
      "content": "Follow the steps in <bpt id=\"p1\">[</bpt>Enable the web app repository<ept id=\"p1\">](../app-service-web/web-sites-publish-source-control.md#Step4)</ept> to enable the Git repository for your backend site, making a note of the deployment username and password."
    },
    {
      "pos": [
        6612,
        6699
      ],
      "content": "In the blade for your Mobile App backend, make a note of the <bpt id=\"p1\">**</bpt>Git clone URL<ept id=\"p1\">**</ept> setting."
    },
    {
      "pos": [
        6705,
        6861
      ],
      "content": "Execute the <ph id=\"ph1\">`git clone`</ph> command in a Git-aware command-line tool using the Git clone URL, entering your password when required, as in the following example:"
    },
    {
      "content": "Browse to local directory, which in the above example is /todolist, and notice that project files have been downloaded.",
      "pos": [
        6952,
        7071
      ]
    },
    {
      "content": "In the /tables subfolder you will find a todoitem.json file, which defines permissions on the table, and todoitem.js file, which defines that CRUD operation scripts for the table.",
      "pos": [
        7072,
        7251
      ]
    },
    {
      "content": "After you have made changes to project files, execute the following commands to add, commit, then upload the changes to the site:",
      "pos": [
        7256,
        7385
      ]
    },
    {
      "pos": [
        7476,
        7565
      ],
      "content": "When you add new files to the project, you first need to execute the <ph id=\"ph1\">`git add .`</ph> command."
    },
    {
      "content": "The site is republished every time a new set of commits is pushed to the site.",
      "pos": [
        7567,
        7645
      ]
    },
    {
      "pos": [
        7651,
        7733
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-publish-to-azure\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Publish your Node.js backend to Azure"
    },
    {
      "content": "Microsoft Azure provides many mechanisms for publishing your Azure App Service Mobile Apps Node.js backend to the Azure service.",
      "pos": [
        7735,
        7863
      ]
    },
    {
      "content": "These include utilizing deployment tools integrated into Visual Studio, command-line tools and continuous deployment options based on source control.",
      "pos": [
        7865,
        8014
      ]
    },
    {
      "content": "For more information on this topic, refer to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure App Service Deployment Guide]</ept>.",
      "pos": [
        8016,
        8102
      ]
    },
    {
      "content": "Azure App Service has specific advice for Node.js application that you should review before deploying:",
      "pos": [
        8104,
        8206
      ]
    },
    {
      "pos": [
        8210,
        8243
      ],
      "content": "How to <bpt id=\"p1\">[</bpt><ept id=\"p1\">specify the Node Version]</ept>"
    },
    {
      "pos": [
        8246,
        8271
      ],
      "content": "How to <bpt id=\"p1\">[</bpt><ept id=\"p1\">use Node modules]</ept>"
    },
    {
      "pos": [
        8276,
        8322
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"TableOperations\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Table operations"
    },
    {
      "content": "The azure-mobile-apps Node.js Server SDK provides mechanisms to expose data tables stored in Azure SQL Database as a WebAPI.",
      "pos": [
        8324,
        8448
      ]
    },
    {
      "content": "Five operations are provided.",
      "pos": [
        8450,
        8479
      ]
    },
    {
      "content": "Operation",
      "pos": [
        8483,
        8492
      ]
    },
    {
      "content": "Description",
      "pos": [
        8495,
        8506
      ]
    },
    {
      "pos": [
        8539,
        8562
      ],
      "content": "GET /tables/<bpt id=\"p1\">_</bpt>tablename<ept id=\"p1\">_</ept>"
    },
    {
      "content": "Get all records in the table",
      "pos": [
        8565,
        8593
      ]
    },
    {
      "pos": [
        8598,
        8625
      ],
      "content": "GET /tables/<bpt id=\"p1\">_</bpt>tablename<ept id=\"p1\">_</ept>/:id"
    },
    {
      "content": "Get a specific record in the table",
      "pos": [
        8628,
        8662
      ]
    },
    {
      "pos": [
        8667,
        8691
      ],
      "content": "POST /tables/<bpt id=\"p1\">_</bpt>tablename<ept id=\"p1\">_</ept>"
    },
    {
      "content": "Create a new record in the table",
      "pos": [
        8694,
        8726
      ]
    },
    {
      "pos": [
        8731,
        8760
      ],
      "content": "PATCH /tables/<bpt id=\"p1\">_</bpt>tablename<ept id=\"p1\">_</ept>/:id"
    },
    {
      "content": "Update an existing record in the table",
      "pos": [
        8763,
        8801
      ]
    },
    {
      "pos": [
        8806,
        8836
      ],
      "content": "DELETE /tables/<bpt id=\"p1\">_</bpt>tablename<ept id=\"p1\">_</ept>/:id"
    },
    {
      "content": "Delete a record in the table",
      "pos": [
        8839,
        8867
      ]
    },
    {
      "pos": [
        8871,
        8960
      ],
      "content": "This WebAPI supports <bpt id=\"p1\">[</bpt><ept id=\"p1\">OData]</ept> and extends the table schema to support <bpt id=\"p2\">[</bpt><ept id=\"p2\">offline data sync]</ept>."
    },
    {
      "pos": [
        8966,
        9044
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-dynamicschema\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Define tables using a dynamic schema"
    },
    {
      "content": "Before a table can be used, it must be defined.",
      "pos": [
        9046,
        9093
      ]
    },
    {
      "content": "Tables can be defined with a static schema (where the developer defines the columns within the schema) or dynamically (where the SDK controls the schema based on incoming requests).",
      "pos": [
        9095,
        9276
      ]
    },
    {
      "content": "In addition, the developer can control specific aspects of the WebAPI by adding Javascript code to the definition.",
      "pos": [
        9277,
        9391
      ]
    },
    {
      "content": "As a best practice, you should define each table in a Javascript file in the tables directory, then use the tables.import() method to import the tables.",
      "pos": [
        9393,
        9545
      ]
    },
    {
      "content": "Extending the basic-app, the app.js file would be adjusted:",
      "pos": [
        9546,
        9605
      ]
    },
    {
      "content": "Define the table in ./tables/TodoItem.js:",
      "pos": [
        10154,
        10195
      ]
    },
    {
      "content": "Tables use dynamic schema by default.",
      "pos": [
        10382,
        10419
      ]
    },
    {
      "content": "To turn off dynamic schema globally, set the App Setting <bpt id=\"p1\">**</bpt>MS_DynamicSchema<ept id=\"p1\">**</ept> to false within the Azure Portal.",
      "pos": [
        10421,
        10532
      ]
    },
    {
      "pos": [
        10534,
        10597
      ],
      "content": "You can find a complete example in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">todo sample on GitHub]</ept>."
    },
    {
      "pos": [
        10603,
        10679
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-staticschema\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Define tables using a static schema"
    },
    {
      "content": "You can explicitly define the columns to expose via the WebAPI.",
      "pos": [
        10681,
        10744
      ]
    },
    {
      "content": "The azure-mobile-apps Node.js SDK will automatically add any additional columns required for offline data sync to the list that you provide.",
      "pos": [
        10746,
        10886
      ]
    },
    {
      "content": "For example, the QuickStart client applications require a table with two columns: text (a string) and complete (a boolean).",
      "pos": [
        10888,
        11011
      ]
    },
    {
      "content": "This can be defined in the table definition JavaScript file (located in the tables directory) as follows:",
      "pos": [
        11013,
        11118
      ]
    },
    {
      "content": "If you define tables statically, then you must also call the tables.initialize() method to create the database schema on startup.",
      "pos": [
        11442,
        11571
      ]
    },
    {
      "content": "The tables.initialize() method returns a <bpt id=\"p1\">[</bpt><ept id=\"p1\">Promise]</ept> - this is used to ensure that the web service does not serve requests prior to the database being initialized.",
      "pos": [
        11573,
        11734
      ]
    },
    {
      "pos": [
        11740,
        11850
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-sqlexpress-setup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Use SQL Express as a development data store on your local machine"
    },
    {
      "content": "The Azure Mobile Apps The AzureMobile Apps Node SDK provides three options for serving data out of the box: SDK provides three options for serving data out of the box:",
      "pos": [
        11852,
        12019
      ]
    },
    {
      "pos": [
        12023,
        12090
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>memory<ept id=\"p1\">**</ept> driver to provide a non-persistent example store"
    },
    {
      "pos": [
        12093,
        12169
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>mssql<ept id=\"p1\">**</ept> driver to provide a SQL Express data store for development"
    },
    {
      "pos": [
        12172,
        12255
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>mssql<ept id=\"p1\">**</ept> driver to provide an Azure SQL Database data store for production"
    },
    {
      "content": "The Azure Mobile Apps Node.js SDK uses the <bpt id=\"p1\">[</bpt><ept id=\"p1\">mssql Node.js package]</ept> to establish and use a connection to both SQL Express and SQL Database.",
      "pos": [
        12257,
        12395
      ]
    },
    {
      "content": "This package requires that you enable TCP connections on your SQL Express instance.",
      "pos": [
        12397,
        12480
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> The memory driver does not provide a complete set of facilities for testing.",
      "pos": [
        12484,
        12572
      ]
    },
    {
      "content": "If you wish to test your backend locally,",
      "pos": [
        12574,
        12615
      ]
    },
    {
      "content": "we recommend the use of a SQL Express data store and the mssql driver.",
      "pos": [
        12616,
        12686
      ]
    },
    {
      "content": "Download and install <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft SQL Server 2014 Express]</ept>.",
      "pos": [
        12691,
        12748
      ]
    },
    {
      "content": "Ensure you install the SQL Server 2014 Express with Tools edition.",
      "pos": [
        12750,
        12816
      ]
    },
    {
      "content": "Unless you explicitly",
      "pos": [
        12818,
        12839
      ]
    },
    {
      "content": "require 64 Bit support, the 32 Bit version will consume less memory when running.",
      "pos": [
        12840,
        12921
      ]
    },
    {
      "content": "Run the SQL Server 2014 Configuration Manager.",
      "pos": [
        12926,
        12972
      ]
    },
    {
      "pos": [
        12979,
        13059
      ],
      "content": "Expand the <bpt id=\"p1\">**</bpt>SQL Server Network Configuration<ept id=\"p1\">**</ept> node in the left hand tree menu."
    },
    {
      "pos": [
        13065,
        13103
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>Protocols for SQLEXPRESS<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Right-click on <bpt id=\"p1\">**</bpt>TCP/IP<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Enable<ept id=\"p2\">**</ept>.",
      "pos": [
        13109,
        13157
      ]
    },
    {
      "content": "Click on <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> in the pop-up dialog.",
      "pos": [
        13159,
        13196
      ]
    },
    {
      "pos": [
        13202,
        13254
      ],
      "content": "Right-click on <bpt id=\"p1\">**</bpt>TCP/IP<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        13260,
        13294
      ],
      "content": "Click on the <bpt id=\"p1\">**</bpt>IP Addresses<ept id=\"p1\">**</ept> tab."
    },
    {
      "content": "Find the <bpt id=\"p1\">**</bpt>IPAll<ept id=\"p1\">**</ept> node.",
      "pos": [
        13300,
        13324
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>TCP Port<ept id=\"p1\">**</ept> field, enter <bpt id=\"p2\">**</bpt>1433<ept id=\"p2\">**</ept>.",
      "pos": [
        13326,
        13368
      ]
    },
    {
      "content": "Click on <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        13423,
        13439
      ]
    },
    {
      "content": "Click on <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> in the pop-up dialog.",
      "pos": [
        13441,
        13478
      ]
    },
    {
      "pos": [
        13484,
        13544
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>SQL Server Services<ept id=\"p1\">**</ept> in the left hand tree menu."
    },
    {
      "pos": [
        13550,
        13615
      ],
      "content": "Right-click on <bpt id=\"p1\">**</bpt>SQL Server (SQLEXPRESS)<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Restart<ept id=\"p2\">**</ept>"
    },
    {
      "content": "Close the SQL Server 2014 Configuration Manager.",
      "pos": [
        13622,
        13670
      ]
    },
    {
      "content": "Run the SQL Server 2014 Management Studio and connect to your local SQL Express instance",
      "pos": [
        13675,
        13763
      ]
    },
    {
      "pos": [
        13770,
        13847
      ],
      "content": "Right-click on your instance in the Object Explorer and select <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>"
    },
    {
      "pos": [
        13853,
        13882
      ],
      "content": "Select the <bpt id=\"p1\">**</bpt>Security<ept id=\"p1\">**</ept> page."
    },
    {
      "pos": [
        13888,
        13957
      ],
      "content": "Ensure the <bpt id=\"p1\">**</bpt>SQL Server and Windows Authentication mode<ept id=\"p1\">**</ept> is selected"
    },
    {
      "pos": [
        13963,
        13978
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>"
    },
    {
      "content": "Configure SQL Express Authentication",
      "pos": [
        13990,
        14026
      ]
    },
    {
      "pos": [
        14037,
        14092
      ],
      "content": "Expand <bpt id=\"p1\">**</bpt>Security<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Logins<ept id=\"p2\">**</ept> in the Object Explorer"
    },
    {
      "pos": [
        14098,
        14151
      ],
      "content": "Right-click on <bpt id=\"p1\">**</bpt>Logins<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>New Login...<ept id=\"p2\">**</ept>"
    },
    {
      "content": "Enter a Login name.",
      "pos": [
        14157,
        14176
      ]
    },
    {
      "content": "Select <bpt id=\"p1\">**</bpt>SQL Server authentication<ept id=\"p1\">**</ept>.",
      "pos": [
        14178,
        14215
      ]
    },
    {
      "content": "Enter a Password, then enter the same password in <bpt id=\"p1\">**</bpt>Confirm password<ept id=\"p1\">**</ept>.",
      "pos": [
        14217,
        14288
      ]
    },
    {
      "content": "Note that the password must meet Windows complexity requirement.",
      "pos": [
        14290,
        14354
      ]
    },
    {
      "pos": [
        14360,
        14375
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>"
    },
    {
      "content": "Add a new user to SQL Express",
      "pos": [
        14387,
        14416
      ]
    },
    {
      "pos": [
        14427,
        14482
      ],
      "content": "Right-click on your new login and select <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>"
    },
    {
      "pos": [
        14489,
        14521
      ],
      "content": "Select the <bpt id=\"p1\">**</bpt>Server Roles<ept id=\"p1\">**</ept> page"
    },
    {
      "pos": [
        14528,
        14579
      ],
      "content": "Check the box next to the <bpt id=\"p1\">**</bpt>dbcreator<ept id=\"p1\">**</ept> server role"
    },
    {
      "pos": [
        14586,
        14601
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>"
    },
    {
      "content": "Close the SQL Server 2015 Management Studio",
      "pos": [
        14608,
        14651
      ]
    },
    {
      "content": "Ensure you record the username and password you selected.",
      "pos": [
        14653,
        14710
      ]
    },
    {
      "content": "You may need to assign additional server roles or permissions depending on your specific database requirements.",
      "pos": [
        14712,
        14823
      ]
    },
    {
      "content": "The Node.js application will read the <bpt id=\"p1\">**</bpt>SQLCONNSTR_MS_TableConnectionString<ept id=\"p1\">**</ept> environment variable to read the connection string for this database.",
      "pos": [
        14825,
        14972
      ]
    },
    {
      "content": "You can set this within your environment.",
      "pos": [
        14974,
        15015
      ]
    },
    {
      "content": "For example, you can use PowerShell to set this environment variable:",
      "pos": [
        15017,
        15086
      ]
    },
    {
      "content": "Note that you must access the database through a TCP/IP connection and provide a username and password for the connection.",
      "pos": [
        15225,
        15347
      ]
    },
    {
      "pos": [
        15353,
        15441
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-config-localdev\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Configure your project for local development"
    },
    {
      "content": "Azure Mobile Apps reads a JavaScript file called <bpt id=\"p1\">_</bpt>azureMobile.js<ept id=\"p1\">_</ept> from the local filesystem.",
      "pos": [
        15443,
        15535
      ]
    },
    {
      "content": "You should not use this file to configure the Azure Mobile Apps SDK in production - use App Settings within the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Portal]</ept> instead.",
      "pos": [
        15537,
        15672
      ]
    },
    {
      "content": "The <bpt id=\"p1\">_</bpt>azureMobile.js<ept id=\"p1\">_</ept> file should export a configuration object.",
      "pos": [
        15674,
        15737
      ]
    },
    {
      "content": "The most common settings are:",
      "pos": [
        15739,
        15768
      ]
    },
    {
      "content": "Database Settings",
      "pos": [
        15772,
        15789
      ]
    },
    {
      "content": "Diagnostic Logging Settings",
      "pos": [
        15792,
        15819
      ]
    },
    {
      "content": "Alternate CORS Settings",
      "pos": [
        15822,
        15845
      ]
    },
    {
      "pos": [
        15847,
        15936
      ],
      "content": "An example <bpt id=\"p1\">_</bpt>azureMobile.js<ept id=\"p1\">_</ept> file implementing the database settings given above is below:"
    },
    {
      "content": "We recommend that you add <bpt id=\"p1\">_</bpt>azureMobile.js<ept id=\"p1\">_</ept> to your <bpt id=\"p2\">_</bpt>.gitignore<ept id=\"p2\">_</ept> file (or other source code control ignore file) to prevent passwords from",
      "pos": [
        16292,
        16429
      ]
    },
    {
      "content": "being stored in the cloud.",
      "pos": [
        16430,
        16456
      ]
    },
    {
      "content": "Always configure production settings in App Settings within the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Portal]</ept>.",
      "pos": [
        16458,
        16537
      ]
    },
    {
      "pos": [
        16543,
        16618
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-appsettings\"&gt;</ph><ph id=\"ph2\">&lt;a&gt;</ph>App Settings for configuring your Mobile App"
    },
    {
      "content": "Most settings in the <bpt id=\"p1\">_</bpt>azureMobile.js<ept id=\"p1\">_</ept> file have an equivalent App Setting in the <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure Portal]</ept>.",
      "pos": [
        16620,
        16716
      ]
    },
    {
      "content": "Use the following list to configure your",
      "pos": [
        16718,
        16758
      ]
    },
    {
      "content": "app in App Settings:",
      "pos": [
        16759,
        16779
      ]
    },
    {
      "content": "App Setting",
      "pos": [
        16783,
        16794
      ]
    },
    {
      "pos": [
        16813,
        16837
      ],
      "content": "<bpt id=\"p1\">_</bpt>azureMobile.js<ept id=\"p1\">_</ept> Setting"
    },
    {
      "content": "Description",
      "pos": [
        16841,
        16852
      ]
    },
    {
      "content": "Valid Values",
      "pos": [
        16885,
        16897
      ]
    },
    {
      "content": "MS_MobileAppName",
      "pos": [
        17085,
        17101
      ]
    },
    {
      "content": "name",
      "pos": [
        17113,
        17117
      ]
    },
    {
      "content": "The name of the app",
      "pos": [
        17141,
        17160
      ]
    },
    {
      "content": "string",
      "pos": [
        17185,
        17191
      ]
    },
    {
      "content": "MS_MobileLoggingLevel",
      "pos": [
        17235,
        17256
      ]
    },
    {
      "content": "logging.level",
      "pos": [
        17263,
        17276
      ]
    },
    {
      "content": "Minimum log level of messages to log",
      "pos": [
        17291,
        17327
      ]
    },
    {
      "content": "error, warning, info, verbose, debug, silly",
      "pos": [
        17335,
        17378
      ]
    },
    {
      "content": "MS_DebugMode",
      "pos": [
        17385,
        17397
      ]
    },
    {
      "content": "debug",
      "pos": [
        17413,
        17418
      ]
    },
    {
      "content": "Enable or Disable debug mode",
      "pos": [
        17441,
        17469
      ]
    },
    {
      "content": "true, false",
      "pos": [
        17485,
        17496
      ]
    },
    {
      "content": "MS_TableSchema",
      "pos": [
        17535,
        17549
      ]
    },
    {
      "content": "data.schema",
      "pos": [
        17563,
        17574
      ]
    },
    {
      "content": "Default schema name for SQL tables",
      "pos": [
        17591,
        17625
      ]
    },
    {
      "content": "string (default: dbo)",
      "pos": [
        17635,
        17656
      ]
    },
    {
      "content": "MS_DynamicSchema",
      "pos": [
        17685,
        17701
      ]
    },
    {
      "content": "data.dynamicSchema",
      "pos": [
        17713,
        17731
      ]
    },
    {
      "content": "Enable or Disable debug mode",
      "pos": [
        17741,
        17769
      ]
    },
    {
      "content": "true, false",
      "pos": [
        17785,
        17796
      ]
    },
    {
      "content": "MS_DisableVersionHeader",
      "pos": [
        17835,
        17858
      ]
    },
    {
      "content": "version (set to undefined)",
      "pos": [
        17863,
        17889
      ]
    },
    {
      "content": "Disables the X-ZUMO-Server-Version header",
      "pos": [
        17891,
        17932
      ]
    },
    {
      "content": "true, false",
      "pos": [
        17935,
        17946
      ]
    },
    {
      "content": "MS_SkipVersionCheck",
      "pos": [
        17985,
        18004
      ]
    },
    {
      "content": "skipversioncheck",
      "pos": [
        18013,
        18029
      ]
    },
    {
      "content": "Disables the client API version check",
      "pos": [
        18041,
        18078
      ]
    },
    {
      "content": "true, false",
      "pos": [
        18085,
        18096
      ]
    },
    {
      "content": "To set an App Setting:",
      "pos": [
        18132,
        18154
      ]
    },
    {
      "pos": [
        18159,
        18187
      ],
      "content": "Log into the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Portal]</ept>."
    },
    {
      "pos": [
        18191,
        18278
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>All resources<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>App Services<ept id=\"p2\">**</ept> then click on the name of your Mobile App."
    },
    {
      "pos": [
        18282,
        18361
      ],
      "content": "The Settings blade will open by default - if it doesn't, click on <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        18365,
        18419
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>Application settings<ept id=\"p1\">**</ept> in the GENERAL menu."
    },
    {
      "content": "Scroll to the App Settings section.",
      "pos": [
        18423,
        18458
      ]
    },
    {
      "content": "If your app setting already exists, click on the value of the app setting to edit the value.",
      "pos": [
        18462,
        18554
      ]
    },
    {
      "content": "If you app setting does not exist, enter the App Setting in the Key box and the value in the Value box.",
      "pos": [
        18558,
        18661
      ]
    },
    {
      "pos": [
        18665,
        18706
      ],
      "content": "Once you are complete, click on <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Changing most app settings will require a service restart.",
      "pos": [
        18708,
        18766
      ]
    },
    {
      "pos": [
        18772,
        18859
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-use-sqlazure\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Use SQL Database as your production data store"
    },
    {
      "content": "Using Azure SQL Database as a data store is identical across all Azure App Service application types.",
      "pos": [
        19004,
        19105
      ]
    },
    {
      "content": "If you have not done so already, follow these steps to create a new Mobile App backend.",
      "pos": [
        19106,
        19193
      ]
    },
    {
      "pos": [
        19198,
        19226
      ],
      "content": "Log into the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Portal]</ept>."
    },
    {
      "pos": [
        19231,
        19373
      ],
      "content": "In the top left of the window, click the <bpt id=\"p1\">**</bpt>+NEW<ept id=\"p1\">**</ept> button &gt; <bpt id=\"p2\">**</bpt>Web + Mobile<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Mobile App<ept id=\"p3\">**</ept>, then provide a name for your Mobile App backend."
    },
    {
      "pos": [
        19378,
        19441
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Resource Group<ept id=\"p1\">**</ept> box, enter the same name as your app."
    },
    {
      "content": "The Default App Service plan will be selected.",
      "pos": [
        19446,
        19492
      ]
    },
    {
      "content": "If you wish to change your App Service plan, you can do so by clicking on the App Service Plan &gt; <bpt id=\"p1\">**</bpt>+ Create New<ept id=\"p1\">**</ept>.",
      "pos": [
        19494,
        19608
      ]
    },
    {
      "content": "Provide a name of the new App Service plan and select an appropriate location.",
      "pos": [
        19610,
        19688
      ]
    },
    {
      "content": "Click the Pricing tier and select an appropriate pricing tier for the service.",
      "pos": [
        19690,
        19768
      ]
    },
    {
      "content": "Select <bpt id=\"p1\">**</bpt>View all<ept id=\"p1\">**</ept> to view more pricing options, such as <bpt id=\"p2\">**</bpt>Free<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Shared<ept id=\"p3\">**</ept>.",
      "pos": [
        19769,
        19851
      ]
    },
    {
      "content": "Once you have selected the pricing tier, click the <bpt id=\"p1\">**</bpt>Select<ept id=\"p1\">**</ept> button.",
      "pos": [
        19853,
        19922
      ]
    },
    {
      "content": "Back in the <bpt id=\"p1\">**</bpt>App Service plan<ept id=\"p1\">**</ept> blade, click <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.",
      "pos": [
        19924,
        19977
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>.",
      "pos": [
        19982,
        19999
      ]
    },
    {
      "content": "This creates a Mobile App backend where you will later deploy your server project.",
      "pos": [
        20000,
        20082
      ]
    },
    {
      "content": "Provisioning a Mobile App backend can take a couple of minutes.",
      "pos": [
        20084,
        20147
      ]
    },
    {
      "content": "Once the Mobile App backend is provisioned, the portal will open the <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> blade for the Mobile App backend.",
      "pos": [
        20149,
        20264
      ]
    },
    {
      "content": "Once the Mobile App backend is created, you can choose to either connect an existing SQL database to your Mobile App backend or create a new SQL database.",
      "pos": [
        20266,
        20420
      ]
    },
    {
      "content": "In this section, we will create a new SQL database.",
      "pos": [
        20422,
        20473
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you already have a database in the same location as the new mobile app backend, you can instead choose <bpt id=\"p1\">**</bpt>Use an existing database<ept id=\"p1\">**</ept> and then select that database.",
      "pos": [
        20477,
        20655
      ]
    },
    {
      "content": "The use of a database in a different location is not recommended because of additional bandwidth costs and higher latencies.",
      "pos": [
        20656,
        20780
      ]
    },
    {
      "pos": [
        20785,
        20874
      ],
      "content": "In the new Mobile App backend, click <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Mobile App<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Data<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>+Add<ept id=\"p4\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Add data connection<ept id=\"p1\">**</ept> blade, click <bpt id=\"p2\">**</bpt>SQL Database - Configure required settings<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Create a new database<ept id=\"p3\">**</ept>.",
      "pos": [
        20879,
        20998
      ]
    },
    {
      "content": "Enter the name of the new database in the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> field.",
      "pos": [
        21000,
        21057
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Server<ept id=\"p1\">**</ept>.",
      "pos": [
        21062,
        21079
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>New server<ept id=\"p1\">**</ept> blade, enter a unique server name in the <bpt id=\"p2\">**</bpt>Server name<ept id=\"p2\">**</ept> field, and provide a suitable <bpt id=\"p3\">**</bpt>Server admin login<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>Password<ept id=\"p4\">**</ept>.",
      "pos": [
        21081,
        21230
      ]
    },
    {
      "content": "Ensure <bpt id=\"p1\">**</bpt>Allow azure services to access server<ept id=\"p1\">**</ept> is checked.",
      "pos": [
        21232,
        21292
      ]
    },
    {
      "content": "Click on <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        21294,
        21310
      ]
    },
    {
      "content": "Create an Azure SQL Database",
      "pos": [
        21318,
        21346
      ]
    },
    {
      "pos": [
        21355,
        21402
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>New database<ept id=\"p1\">**</ept> blade, click on <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Back on the <bpt id=\"p1\">**</bpt>Add data connection<ept id=\"p1\">**</ept> blade, select <bpt id=\"p2\">**</bpt>Connection string<ept id=\"p2\">**</ept>, enter the login and password that you just provided when creating the database.",
      "pos": [
        21408,
        21560
      ]
    },
    {
      "content": "If you use an existing database, provide the login credentials for that database.",
      "pos": [
        21562,
        21643
      ]
    },
    {
      "content": "Once entered, click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        21645,
        21672
      ]
    },
    {
      "pos": [
        21678,
        21766
      ],
      "content": "Back on the <bpt id=\"p1\">**</bpt>Add data connection<ept id=\"p1\">**</ept> blade again, click on <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept> to create the database."
    },
    {
      "content": "Creation of the database can take a few minutes.",
      "pos": [
        21804,
        21852
      ]
    },
    {
      "content": "Use the <bpt id=\"p1\">**</bpt>Notifications<ept id=\"p1\">**</ept> area to monitor the progress of the deployment.",
      "pos": [
        21854,
        21927
      ]
    },
    {
      "content": "Do not progress until the database has been deployed sucessfully.",
      "pos": [
        21929,
        21994
      ]
    },
    {
      "content": "Once successfully deployed, a Connection String will be created for the SQL Database instance in your Mobile backend App Settings.",
      "pos": [
        21996,
        22126
      ]
    },
    {
      "content": "You can see this app setting in the <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Application settings<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Connection strings<ept id=\"p3\">**</ept>.",
      "pos": [
        22128,
        22229
      ]
    },
    {
      "pos": [
        22235,
        22318
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-tables-auth\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Require Authentication for access to tables"
    },
    {
      "content": "If you wish to use App Service Authentication with the tables endpoint, you must configure App Service Authentication in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Portal]</ept> first.",
      "pos": [
        22320,
        22466
      ]
    },
    {
      "content": "For",
      "pos": [
        22468,
        22471
      ]
    },
    {
      "content": "more details about configuring authentication in an Azure App Service, review the Configuration Guide for the identity provider you intend to use:",
      "pos": [
        22472,
        22618
      ]
    },
    {
      "content": "How to configure Azure Active Directory Authentication",
      "pos": [
        22623,
        22677
      ]
    },
    {
      "content": "How to configure Facebook Authentication",
      "pos": [
        22682,
        22722
      ]
    },
    {
      "content": "How to configure Google Authentication",
      "pos": [
        22727,
        22765
      ]
    },
    {
      "content": "How to configure Microsoft Authentication",
      "pos": [
        22770,
        22811
      ]
    },
    {
      "content": "How to configure Twitter Authentication",
      "pos": [
        22816,
        22855
      ]
    },
    {
      "content": "Each table has an access property that can be used to control access to the table.",
      "pos": [
        22858,
        22940
      ]
    },
    {
      "content": "The following sample shows a statically defined table with authentication required.",
      "pos": [
        22942,
        23025
      ]
    },
    {
      "content": "The access property can take one of three values",
      "pos": [
        23436,
        23484
      ]
    },
    {
      "pos": [
        23490,
        23586
      ],
      "content": "<bpt id=\"p1\">*</bpt>anonymous<ept id=\"p1\">*</ept> indicates that the client application is allowed to read data without authentication"
    },
    {
      "pos": [
        23591,
        23700
      ],
      "content": "<bpt id=\"p1\">*</bpt>authenticated<ept id=\"p1\">*</ept> indicates that the client application must send a valid authentication token with the request"
    },
    {
      "pos": [
        23705,
        23763
      ],
      "content": "<bpt id=\"p1\">*</bpt>disabled<ept id=\"p1\">*</ept> indicates that this table is currently disabled"
    },
    {
      "content": "If the access property is undefined, unauthenticated access is allowed.",
      "pos": [
        23765,
        23836
      ]
    },
    {
      "pos": [
        23842,
        23929
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-tables-disabled\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Disable access to specific table operations"
    },
    {
      "content": "In addition to appearing on the table, the access property can be used to control individual operations.",
      "pos": [
        23931,
        24035
      ]
    },
    {
      "content": "There are four operations:",
      "pos": [
        24037,
        24063
      ]
    },
    {
      "pos": [
        24069,
        24117
      ],
      "content": "<bpt id=\"p1\">*</bpt>read<ept id=\"p1\">*</ept> is the RESTful GET operation on the table"
    },
    {
      "pos": [
        24122,
        24173
      ],
      "content": "<bpt id=\"p1\">*</bpt>insert<ept id=\"p1\">*</ept> is the RESTful POST operation on the table"
    },
    {
      "pos": [
        24178,
        24230
      ],
      "content": "<bpt id=\"p1\">*</bpt>update<ept id=\"p1\">*</ept> is the RESTful PATCH operation on the table"
    },
    {
      "pos": [
        24235,
        24288
      ],
      "content": "<bpt id=\"p1\">*</bpt>delete<ept id=\"p1\">*</ept> is the RESTful DELETE operation on the table"
    },
    {
      "content": "For example, you may wish to provide a read-only unauthenticated table.",
      "pos": [
        24290,
        24361
      ]
    },
    {
      "content": "This can be provided by the following table definition:",
      "pos": [
        24363,
        24418
      ]
    },
    {
      "pos": [
        24756,
        24848
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-tables-query\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Adjust the query that is used with table operations"
    },
    {
      "content": "A common requirement for table operations is to provide a restricted view of the data.",
      "pos": [
        24850,
        24936
      ]
    },
    {
      "content": "For example, you may provide a table that is",
      "pos": [
        24938,
        24982
      ]
    },
    {
      "content": "tagged with the authenticated user ID such that the user can only read or update their own records.",
      "pos": [
        24983,
        25082
      ]
    },
    {
      "content": "The following table definition",
      "pos": [
        25084,
        25114
      ]
    },
    {
      "content": "will provide this functionality:",
      "pos": [
        25115,
        25147
      ]
    },
    {
      "content": "Operations that normally execute a query will have a query property that you can adjust with a where clause.",
      "pos": [
        25970,
        26078
      ]
    },
    {
      "content": "The query property is",
      "pos": [
        26082,
        26103
      ]
    },
    {
      "content": "a <bpt id=\"p1\">[</bpt><ept id=\"p1\">QueryJS]</ept> object that is used to convert an OData query to something that the data backend can process.",
      "pos": [
        26104,
        26209
      ]
    },
    {
      "content": "For simple equality cases",
      "pos": [
        26211,
        26236
      ]
    },
    {
      "content": "(like the one above), a map can be used.",
      "pos": [
        26237,
        26277
      ]
    },
    {
      "content": "It is also relatively easy to add specific SQL clauses:",
      "pos": [
        26278,
        26333
      ]
    },
    {
      "pos": [
        26390,
        26468
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-tables-softdelete\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Configure Soft Delete on a table"
    },
    {
      "content": "Soft Delete does not actually delete records.",
      "pos": [
        26470,
        26515
      ]
    },
    {
      "content": "Instead it marks them as deleted within the database by setting the deleted column to true.",
      "pos": [
        26517,
        26608
      ]
    },
    {
      "content": "The Azure Mobile Apps SDK automatically removes soft-deleted records from results unless the Mobile Client SDK uses IncludeDeleted().",
      "pos": [
        26610,
        26743
      ]
    },
    {
      "content": "To configure a table for soft delete, set the softDelete property in the table definition file.",
      "pos": [
        26745,
        26840
      ]
    },
    {
      "content": "An example might be:",
      "pos": [
        26842,
        26862
      ]
    },
    {
      "content": "You will need to establish a mechanism for purging records - either from a client application, via a WebJob or through a custom mechanism.",
      "pos": [
        27330,
        27468
      ]
    },
    {
      "pos": [
        27474,
        27545
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-tables-seeding\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Seed your database with data"
    },
    {
      "content": "When creating a new application, you may wish to seed a table with data.",
      "pos": [
        27547,
        27619
      ]
    },
    {
      "content": "This can be done within the table definition JavaScript file as",
      "pos": [
        27621,
        27684
      ]
    },
    {
      "content": "follows:",
      "pos": [
        27685,
        27693
      ]
    },
    {
      "content": "It is important to note that seeding of data is only done when the table is created by the Azure Mobile Apps SDK.",
      "pos": [
        28224,
        28337
      ]
    },
    {
      "content": "If the table already",
      "pos": [
        28339,
        28359
      ]
    },
    {
      "content": "exists within the database, no data is injected into the table.",
      "pos": [
        28360,
        28423
      ]
    },
    {
      "content": "If dynamic schema is turned on, then the schema will be inferred from",
      "pos": [
        28425,
        28494
      ]
    },
    {
      "content": "the seeded data.",
      "pos": [
        28495,
        28511
      ]
    },
    {
      "content": "We recommend that you explicitly call the initialize() method to create the table when the service starts running.",
      "pos": [
        28513,
        28627
      ]
    },
    {
      "pos": [
        28632,
        28667
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"CustomAPI\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Custom APIs"
    },
    {
      "content": "In addition to the data access API via the /tables endpoint, Azure Mobile Apps can provide custom API coverage.",
      "pos": [
        28669,
        28780
      ]
    },
    {
      "content": "Custom APIs are defined in",
      "pos": [
        28782,
        28808
      ]
    },
    {
      "content": "a similar way to the table definitions and can access all the same facilities, including authentication.",
      "pos": [
        28809,
        28913
      ]
    },
    {
      "content": "If you wish to use App Service Authentication with a Custom API, you must configure App Service Authentication in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Portal]</ept> first.",
      "pos": [
        28915,
        29054
      ]
    },
    {
      "content": "For",
      "pos": [
        29056,
        29059
      ]
    },
    {
      "content": "more details about configuring authentication in an  Azure App Service, review the Configuration Guide for the identity provider you intend to use:",
      "pos": [
        29060,
        29207
      ]
    },
    {
      "content": "How to configure Azure Active Directory Authentication",
      "pos": [
        29212,
        29266
      ]
    },
    {
      "content": "How to configure Facebook Authentication",
      "pos": [
        29271,
        29311
      ]
    },
    {
      "content": "How to configure Google Authentication",
      "pos": [
        29316,
        29354
      ]
    },
    {
      "content": "How to configure Microsoft Authentication",
      "pos": [
        29359,
        29400
      ]
    },
    {
      "content": "How to configure Twitter Authentication",
      "pos": [
        29405,
        29444
      ]
    },
    {
      "pos": [
        29451,
        29521
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-customapi-basic\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Define a simple custom API"
    },
    {
      "content": "Custom APIs are defined in much the same way as the Tables API.",
      "pos": [
        29523,
        29586
      ]
    },
    {
      "pos": [
        29591,
        29618
      ],
      "content": "Create an <bpt id=\"p1\">**</bpt>api<ept id=\"p1\">**</ept> directory"
    },
    {
      "pos": [
        29622,
        29688
      ],
      "content": "Create an API definition JavaScript file in the <bpt id=\"p1\">**</bpt>api<ept id=\"p1\">**</ept> directory."
    },
    {
      "pos": [
        29692,
        29746
      ],
      "content": "Use the import method to import the <bpt id=\"p1\">**</bpt>api<ept id=\"p1\">**</ept> directory."
    },
    {
      "content": "Here is the prototype api definition based on the basic-app sample we used earlier.",
      "pos": [
        29748,
        29831
      ]
    },
    {
      "content": "Let's take a simple API that will return the server date using the <bpt id=\"p1\">_</bpt>Date.now()<ept id=\"p1\">_</ept> method.",
      "pos": [
        30207,
        30294
      ]
    },
    {
      "content": "Here is the api/date.js file:",
      "pos": [
        30296,
        30325
      ]
    },
    {
      "content": "Each parameter is one of the standard RESTful verbs - GET, POST, PATCH or DELETE.",
      "pos": [
        30548,
        30629
      ]
    },
    {
      "content": "The method is a standard <bpt id=\"p1\">[</bpt><ept id=\"p1\">ExpressJS Middleware]</ept> function that sends the required output.",
      "pos": [
        30631,
        30719
      ]
    },
    {
      "pos": [
        30725,
        30817
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-customapi-auth\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Require authentication for access to a custom API"
    },
    {
      "content": "Azure Mobile Apps SDK implements authentication in the same way for both the tables endpoint and custom APIs.",
      "pos": [
        30819,
        30928
      ]
    },
    {
      "content": "To add authentication to the API developed in the previous section, add an <bpt id=\"p1\">**</bpt>access<ept id=\"p1\">**</ept> property:",
      "pos": [
        30930,
        31025
      ]
    },
    {
      "content": "You can also specify authentication on specific operations:",
      "pos": [
        31324,
        31383
      ]
    },
    {
      "content": "The same token that is used for the tables endpoint must be used for custom APIs requiring authentication.",
      "pos": [
        31690,
        31796
      ]
    },
    {
      "pos": [
        31801,
        31854
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"Debugging\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Debugging and troubleshooting"
    },
    {
      "content": "The Azure App Service provides several debugging and troubleshooting techniques for Node.js applications.",
      "pos": [
        31856,
        31961
      ]
    },
    {
      "content": "All of these techniques are available.",
      "pos": [
        31962,
        32000
      ]
    },
    {
      "content": "Monitoring an Azure App Service",
      "pos": [
        32005,
        32036
      ]
    },
    {
      "content": "Enable Diagnostic Logging in Azure App Service",
      "pos": [
        32041,
        32087
      ]
    },
    {
      "content": "Toubleshoot an Azure App Service in Visual Studio",
      "pos": [
        32092,
        32141
      ]
    },
    {
      "pos": [
        32148,
        32238
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"howto-diagnostic-logs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Write to the Azure Mobile Apps diagnostic logs"
    },
    {
      "content": "Node.js applications have access to a wide range of diagnostic log tools.",
      "pos": [
        32240,
        32313
      ]
    },
    {
      "content": "Internally, the Azure Mobile Apps Node.js SDK uses <bpt id=\"p1\">[</bpt><ept id=\"p1\">Winston]</ept> for diagnostic logging.",
      "pos": [
        32315,
        32399
      ]
    },
    {
      "content": "This is automatically enabled by enabling debug mode or by setting the <bpt id=\"p1\">**</bpt>MS_DebugMode<ept id=\"p1\">**</ept> app setting to true in the <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure Portal]</ept>.",
      "pos": [
        32401,
        32531
      ]
    },
    {
      "content": "Logs generated will appear in the Diagnostic Logs on the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Portal]</ept>.",
      "pos": [
        32533,
        32605
      ]
    },
    {
      "pos": [
        32610,
        32675
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"in-portal-editing\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>In-portal code editing experience"
    },
    {
      "content": "Special tooling in the Azure portal makes it easy to work with a Node.js backend project without having to download the code project.",
      "pos": [
        32677,
        32810
      ]
    },
    {
      "content": "Easy Tables and Easy APIs in the portal let you create and work with tables and custom APIs right in the portal.",
      "pos": [
        32811,
        32923
      ]
    },
    {
      "content": "You can even edit table operation and API scripts right in the portal using the Visual Studio Team Services \"Monaco\" editor.",
      "pos": [
        32924,
        33048
      ]
    },
    {
      "pos": [
        33054,
        33134
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"work-easy-tables\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Work with Easy Tables in the Azure portal"
    },
    {
      "content": "When you click <bpt id=\"p1\">**</bpt>Easy tables<ept id=\"p1\">**</ept> in your backend site settings, you can add a new table or modify or delete an existing table.",
      "pos": [
        33136,
        33260
      ]
    },
    {
      "content": "You can also see data in the table.",
      "pos": [
        33261,
        33296
      ]
    },
    {
      "content": "Work with Easy Tables",
      "pos": [
        33300,
        33321
      ]
    },
    {
      "content": "The following commands are available on the command bar for a table:",
      "pos": [
        33415,
        33483
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Change permissions<ept id=\"p1\">**</ept> - modify the the permission for read, insert, update and delete operations on the table.",
      "pos": [
        33487,
        33598
      ]
    },
    {
      "content": "Options are to allow anonymous access, to require authentication, or to disable all access to the operation.",
      "pos": [
        33599,
        33707
      ]
    },
    {
      "content": "This modifies the table.json project code file.",
      "pos": [
        33708,
        33755
      ]
    },
    {
      "pos": [
        33758,
        33858
      ],
      "content": "<bpt id=\"p1\">**</bpt>Edit script<ept id=\"p1\">**</ept> - the script file for the table is opened in the Visual Studio Team Services editor."
    },
    {
      "pos": [
        33861,
        33929
      ],
      "content": "<bpt id=\"p1\">**</bpt>Manage schema<ept id=\"p1\">**</ept> - add or delete columns or change the table index."
    },
    {
      "pos": [
        33932,
        34037
      ],
      "content": "<bpt id=\"p1\">**</bpt>Clear table<ept id=\"p1\">**</ept> - truncates an existing table be deleting all data rows but leaving the schema unchanged."
    },
    {
      "pos": [
        34040,
        34089
      ],
      "content": "<bpt id=\"p1\">**</bpt>Delete rows<ept id=\"p1\">**</ept> - delete individual rows of data."
    },
    {
      "pos": [
        34092,
        34174
      ],
      "content": "<bpt id=\"p1\">**</bpt>View streaming logs<ept id=\"p1\">**</ept> - connects you to the streaming log service for your site."
    },
    {
      "pos": [
        34179,
        34255
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"work-easy-apis\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Work with Easy APIs in the Azure portal"
    },
    {
      "pos": [
        34257,
        34400
      ],
      "content": "When you click <bpt id=\"p1\">**</bpt>Easy APIs<ept id=\"p1\">**</ept> in your backend site settings, you can add a new custom API endpoint or modify or delete an existing API endpoint."
    },
    {
      "content": "Work with Easy APIs",
      "pos": [
        34404,
        34423
      ]
    },
    {
      "content": "In the portal, you can change the access permissions for a given HTTP action, edit the API script file in the Visual Studio Team Services editor, or view the streaming logs.",
      "pos": [
        34515,
        34688
      ]
    },
    {
      "pos": [
        34693,
        34769
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"online-editor\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Edit code in Visual Studio Team Services"
    },
    {
      "content": "The Azure portal lets you edit your Node.js backend script files in Visual Studio Team Services without having to download the project to your local computer.",
      "pos": [
        34771,
        34929
      ]
    },
    {
      "content": "To edit script files in the online editor:",
      "pos": [
        34930,
        34972
      ]
    },
    {
      "content": "In your Mobile App backend blade, click <bpt id=\"p1\">**</bpt>All settings<ept id=\"p1\">**</ept> &gt; either <bpt id=\"p2\">**</bpt>Easy tables<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Easy APIs<ept id=\"p3\">**</ept>, click a table or API, then click <bpt id=\"p4\">**</bpt>Edit script<ept id=\"p4\">**</ept>.",
      "pos": [
        34977,
        35126
      ]
    },
    {
      "content": "The script file is opened in the Visual Studio Team Services editor.",
      "pos": [
        35127,
        35195
      ]
    },
    {
      "content": "Visual Studio Team Services code editor",
      "pos": [
        35203,
        35242
      ]
    },
    {
      "content": "Make your changes to the code file in the online editor.",
      "pos": [
        35348,
        35404
      ]
    },
    {
      "content": "Changes are saved automatically as you type.",
      "pos": [
        35405,
        35449
      ]
    },
    {
      "content": "From the editor, you can also execute the code on the site",
      "pos": [
        35451,
        35509
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to work with the Node.js backend server SDK for Mobile Apps | Azure App Service\"\n    description=\"Learn how to work with the Node.js backend server SDK for Azure App Service Mobile Apps.\"\n    services=\"app-service\\mobile\"\n    documentationCenter=\"\"\n    authors=\"adrianhall\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-mobile\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-multiple\"\n    ms.devlang=\"node\"\n    ms.topic=\"article\"\n    ms.date=\"12/02/2015\"\n    ms.author=\"adrianhall\"/>\n\n# How to use the Azure Mobile Apps Node.js SDK\n\n[AZURE.INCLUDE [app-service-mobile-selector-server-sdk](../../includes/app-service-mobile-selector-server-sdk.md)]\n&nbsp;\n\n[AZURE.INCLUDE [app-service-mobile-note-mobile-services](../../includes/app-service-mobile-note-mobile-services.md)]\n\nThis article provides detailed information and examples showing how to work with a Node.js backend in Azure App Service Mobile Apps.\n\n> [AZURE.NOTE] This SDK is in PREVIEW.  As a result, we do not recommend that you use this SDK in production.  The examples in this document use v2.0.0-beta1 of [azure-mobile-apps].\n\n## <a name=\"Introduction\"></a>Introduction\n\nAzure App Service Mobile Apps provides the capability to add a mobile-optimized data access Web API to a web application.  The Azure App\nService Mobile Apps SDK is provided for ASP.NET and Node.js web applications.  The SDK provides the following operations:\n\n- Table operations (Read, Insert, Update, Delete) for data access\n- Custom API operations\n\nBoth operations provide for authentication across all identity providers allowed by Azure App Service, including social identity\nproviders such as Facebook, Twitter, Google and Microsoft as well as Azure Active Directory for enterprise identity.\n\nYou can find samples for each use case in the [samples directory on GitHub].\n\n### <a name=\"howto-cmdline-basicapp\"></a>How to: Create a Basic Node.js backend using the Command Line\n\nEvery Azure App Service Mobile App Node.js backend starts as an ExpressJS application.  ExpressJS is the most popular web service framework\navailable for Node.js.  You can create a basic [Express] application as follows:\n\n1. In a command or PowerShell window, create a new directory for your project.\n\n        mkdir basicapp\n\n2. Run npm init to initialize the package structure.\n\n        cd basicapp\n        npm init\n\n    The npm init command will ask a set of questions to initialize the project.  See the example output below\n\n    ![The npm init output][0]\n\n3. Install the express and azure-mobile-apps libraries from the npm repository.\n\n        npm install --save express azure-mobile-apps\n\n4. Create an app.js file to implement the basic mobile server.\n\n        var express = require('express'),\n            azureMobileApps = require('azure-mobile-apps');\n\n        var app = express(),\n            mobile = azureMobileApps();\n\n        // Define a TodoItem table\n        mobile.tables.add('TodoItem');\n\n        // Add the mobile API so it is accessible as a Web API\n        app.use(mobile);\n\n        // Start listening on HTTP\n        app.listen(process.env.PORT || 3000);\n\nThis application creates a simple mobile-optimized WebAPI with a single endpoint (`/tables/TodoItem`) that provides\nunauthenticated access to an underlying SQL data store using a dynamic schema.  It is suitable for following the\nclient library quick starts:\n\n- [Android Client QuickStart]\n- [iOS Client QuickStart]\n- [Windows Store Client QuickStart]\n- [Xamarin.iOS Client QuickStart]\n- [Xamarin.Android Client QuickStart]\n- [Xamarin.Forms Client QuickStart]\n\n\nYou can find the code for this basic application in the [basicapp sample on GitHub].\n\n### <a name=\"howto-vs2015-basicapp\"></a>How to: Create a Node backend with Visual Studio 2015\n\nVisual Studio 2015 requires an extension to develop Node.js applications within the IDE.  To start, download and install the [Node.js Tools 1.1 for Visual Studio].  Once the Node.js Tools for Visual Studio are installed, create an Express 4.x application:\n\n1. Open the **New Project** dialog (from **File** > **New** > **Project...**).\n\n2. Expand **Templates** > **JavaScript** > **Node.js**.\n\n3. Select the **Basic Azure Node.js Express 4 Application**.\n\n4. Fill in the project name.  Click on *OK*.\n\n    ![Visual Studio 2015 New Project][1]\n\n5. Right-click on the **npm** node and select **Install New npm packages...**.\n\n6. You may need to refresh the npm catalog on creating your first Node.js application.  If this is required, you will be prompted - click on **Refresh**.\n\n7. Enter _azure-mobile-apps_ in the search box.  Click on the **azure-mobile-apps 2.0.0** package, then click on **Install Package**.\n\n    ![Install New npm packages][2]\n\n8. Click on **Close**.\n\n9. Open the _app.js_ file to add support for the Azure Mobile Apps SDK.  At line 6 at the bottom of the library require statements, add the following code:\n\n        var bodyParser = require('body-parser');\n        var azureMobileApps = require('azure-mobile-apps');\n\n    At approximately line 27 after the other app.use statements, add the following code:\n\n        app.use('/users', users);\n\n        // Azure Mobile Apps Initialization\n        var mobile = azureMobileApps();\n        mobile.tables.add('TodoItem');\n        app.use('mobile');\n\n    Save the file.\n\n10. Either run the application locally (the API will be served on http://localhost:3000) or publish to Azure.\n\n### <a name=\"download-quickstart\"></a>How to: Download the Node.js backend quickstart code project using Git\n\nWhen you create a new Node.js Mobile App backend by using the portal **Quick start** blade, a new Node.js project is created for you and deployed to your site. You can add tables and APIs and edit code files for the Node.js backend in the portal. You can also use one of a variety of deployment tools to download the backend project so that you can add or modify tables and APIs, then republish the project. For more information, see the [Azure App Service Deployment Guide]. the following procedure uses a Git repository to download the quickstart project code.\n\n1. Install Git, if you haven't already done so. The steps required to install Git vary between operating systems. See [Installing Git](http://git-scm.com/book/en/Getting-Started-Installing-Git) for operating system specific distributions and installation guidance.\n\n2. Follow the steps in [Enable the web app repository](../app-service-web/web-sites-publish-source-control.md#Step4) to enable the Git repository for your backend site, making a note of the deployment username and password.\n\n3. In the blade for your Mobile App backend, make a note of the **Git clone URL** setting.\n\n4.  Execute the `git clone` command in a Git-aware command-line tool using the Git clone URL, entering your password when required, as in the following example:\n\n        $ git clone https://username@todolist.scm.azurewebsites.net:443/todolist.git\n\n5. Browse to local directory, which in the above example is /todolist, and notice that project files have been downloaded. In the /tables subfolder you will find a todoitem.json file, which defines permissions on the table, and todoitem.js file, which defines that CRUD operation scripts for the table.\n\n6. After you have made changes to project files, execute the following commands to add, commit, then upload the changes to the site:\n\n        $ git commit -m \"updated the table script\"\n        $ git push origin master\n\n    When you add new files to the project, you first need to execute the `git add .` command.\n\nThe site is republished every time a new set of commits is pushed to the site.\n\n### <a name=\"howto-publish-to-azure\"></a>How to: Publish your Node.js backend to Azure\n\nMicrosoft Azure provides many mechanisms for publishing your Azure App Service Mobile Apps Node.js backend to the Azure service.  These include utilizing deployment tools integrated into Visual Studio, command-line tools and continuous deployment options based on source control.  For more information on this topic, refer to the [Azure App Service Deployment Guide].\n\nAzure App Service has specific advice for Node.js application that you should review before deploying:\n\n- How to [specify the Node Version]\n- How to [use Node modules]\n\n## <a name=\"TableOperations\"></a>Table operations\n\nThe azure-mobile-apps Node.js Server SDK provides mechanisms to expose data tables stored in Azure SQL Database as a WebAPI.  Five operations are provided.\n\n| Operation | Description |\n| --------- | ----------- |\n| GET /tables/_tablename_ | Get all records in the table |\n| GET /tables/_tablename_/:id | Get a specific record in the table |\n| POST /tables/_tablename_ | Create a new record in the table |\n| PATCH /tables/_tablename_/:id | Update an existing record in the table |\n| DELETE /tables/_tablename_/:id | Delete a record in the table |\n\nThis WebAPI supports [OData] and extends the table schema to support [offline data sync].\n\n### <a name=\"howto-dynamicschema\"></a>How to: Define tables using a dynamic schema\n\nBefore a table can be used, it must be defined.  Tables can be defined with a static schema (where the developer defines the columns within the schema) or dynamically (where the SDK controls the schema based on incoming requests). In addition, the developer can control specific aspects of the WebAPI by adding Javascript code to the definition.\n\nAs a best practice, you should define each table in a Javascript file in the tables directory, then use the tables.import() method to import the tables.\nExtending the basic-app, the app.js file would be adjusted:\n\n    var express = require('express'),\n        azureMobileApps = require('azure-mobile-apps');\n\n    var app = express(),\n        mobile = azureMobileApps();\n\n    // Define the database schema that is exposed\n    mobile.tables.import('./tables');\n\n    // Provide initialization of any tables that are statically defined\n    mobile.tables.initialize().then(function () {\n        // Add the mobile API so it is accessible as a Web API\n        app.use(mobile);\n\n        // Start listening on HTTP\n        app.listen(process.env.PORT || 3000);\n    });\n\nDefine the table in ./tables/TodoItem.js:\n\n    var azureMobileApps = require('azure-mobile-apps');\n\n    var table = azureMobileApps.table();\n\n    // Additional configuration for the table goes here\n\n    module.exports = table;\n\nTables use dynamic schema by default.  To turn off dynamic schema globally, set the App Setting **MS_DynamicSchema** to false within the Azure Portal.\n\nYou can find a complete example in the [todo sample on GitHub].\n\n### <a name=\"howto-staticschema\"></a>How to: Define tables using a static schema\n\nYou can explicitly define the columns to expose via the WebAPI.  The azure-mobile-apps Node.js SDK will automatically add any additional columns required for offline data sync to the list that you provide.  For example, the QuickStart client applications require a table with two columns: text (a string) and complete (a boolean).  This can be defined in the table definition JavaScript file (located in the tables directory) as follows:\n\n    var azureMobileApps = require('azure-mobile-apps');\n\n    var table = azureMobileApps.table();\n\n    // Define the columns within the table\n    table.columns = {\n        \"text\": \"string\",\n        \"complete\": \"boolean\"\n    };\n\n    // Turn off dynamic schema\n    table.dynamicSchema = false;\n\n    module.exports = table;\n\nIf you define tables statically, then you must also call the tables.initialize() method to create the database schema on startup.  The tables.initialize() method returns a [Promise] - this is used to ensure that the web service does not serve requests prior to the database being initialized.\n\n### <a name=\"howto-sqlexpress-setup\"></a>How to: Use SQL Express as a development data store on your local machine\n\nThe Azure Mobile Apps The AzureMobile Apps Node SDK provides three options for serving data out of the box: SDK provides three options for serving data out of the box:\n\n- Use the **memory** driver to provide a non-persistent example store\n- Use the **mssql** driver to provide a SQL Express data store for development\n- Use the **mssql** driver to provide an Azure SQL Database data store for production\n\nThe Azure Mobile Apps Node.js SDK uses the [mssql Node.js package] to establish and use a connection to both SQL Express and SQL Database.  This package requires that you enable TCP connections on your SQL Express instance.\n\n> [AZURE.TIP] The memory driver does not provide a complete set of facilities for testing.  If you wish to test your backend locally,\nwe recommend the use of a SQL Express data store and the mssql driver.\n\n1. Download and install [Microsoft SQL Server 2014 Express].  Ensure you install the SQL Server 2014 Express with Tools edition.  Unless you explicitly\nrequire 64 Bit support, the 32 Bit version will consume less memory when running.\n\n2. Run the SQL Server 2014 Configuration Manager.\n\n  1. Expand the **SQL Server Network Configuration** node in the left hand tree menu.\n  2. Click on **Protocols for SQLEXPRESS**.\n  3. Right-click on **TCP/IP** and select **Enable**.  Click on **OK** in the pop-up dialog.\n  4. Right-click on **TCP/IP** and select **Properties**.\n  5. Click on the **IP Addresses** tab.\n  6. Find the **IPAll** node.  In the **TCP Port** field, enter **1433**.\n\n         ![Configure SQL Express for TCP/IP][3]\n  7. Click on **OK**.  Click on **OK** in the pop-up dialog.\n  8. Click on **SQL Server Services** in the left hand tree menu.\n  9. Right-click on **SQL Server (SQLEXPRESS)** and select **Restart**\n  10. Close the SQL Server 2014 Configuration Manager.\n\n3. Run the SQL Server 2014 Management Studio and connect to your local SQL Express instance\n\n  1. Right-click on your instance in the Object Explorer and select **Properties**\n  2. Select the **Security** page.\n  3. Ensure the **SQL Server and Windows Authentication mode** is selected\n  4. Click on **OK**\n\n        ![Configure SQL Express Authentication][4]\n\n  5. Expand **Security** > **Logins** in the Object Explorer\n  6. Right-click on **Logins** and select **New Login...**\n  7. Enter a Login name.  Select **SQL Server authentication**.  Enter a Password, then enter the same password in **Confirm password**.  Note that the password must meet Windows complexity requirement.\n  8. Click on **OK**\n\n        ![Add a new user to SQL Express][5]\n\n  9. Right-click on your new login and select **Properties**\n  10. Select the **Server Roles** page\n  11. Check the box next to the **dbcreator** server role\n  12. Click on **OK**\n  13. Close the SQL Server 2015 Management Studio\n\nEnsure you record the username and password you selected.  You may need to assign additional server roles or permissions depending on your specific database requirements.\n\nThe Node.js application will read the **SQLCONNSTR_MS_TableConnectionString** environment variable to read the connection string for this database.  You can set this within your environment.  For example, you can use PowerShell to set this environment variable:\n\n    $env:SQLCONNSTR_MS_TableConnectionString = \"Server=127.0.0.1; Database=mytestdatabase; User Id=azuremobile; Password=T3stPa55word;\"\n\nNote that you must access the database through a TCP/IP connection and provide a username and password for the connection.\n\n### <a name=\"howto-config-localdev\"></a>How to: Configure your project for local development\n\nAzure Mobile Apps reads a JavaScript file called _azureMobile.js_ from the local filesystem.  You should not use this file to configure the Azure Mobile Apps SDK in production - use App Settings within the [Azure Portal] instead.  The _azureMobile.js_ file should export a configuration object.  The most common settings are:\n\n- Database Settings\n- Diagnostic Logging Settings\n- Alternate CORS Settings\n\nAn example _azureMobile.js_ file implementing the database settings given above is below:\n\n    module.exports = {\n        cors: {\n            origins: [ 'localhost' ]\n        },\n        data: {\n            provider: 'mssql',\n            server: '127.0.0.1',\n            database: 'mytestdatabase',\n            user: 'azuremobile',\n            password: 'T3stPa55word'\n        },\n        logging: {\n            level: 'verbose'\n        }\n    };\n\nWe recommend that you add _azureMobile.js_ to your _.gitignore_ file (or other source code control ignore file) to prevent passwords from\nbeing stored in the cloud.  Always configure production settings in App Settings within the [Azure Portal].\n\n### <a name=\"howto-appsettings\"><a>App Settings for configuring your Mobile App\n\nMost settings in the _azureMobile.js_ file have an equivalent App Setting in the [Azure Portal].  Use the following list to configure your\napp in App Settings:\n\n| App Setting                 | _azureMobile.js_ Setting  | Description                               | Valid Values                                |\n| :-------------------------- | :------------------------ | :---------------------------------------- | :------------------------------------------ |\n| **MS_MobileAppName**        | name                      | The name of the app                       | string                                      |\n| **MS_MobileLoggingLevel**   | logging.level             | Minimum log level of messages to log      | error, warning, info, verbose, debug, silly |\n| **MS_DebugMode**            | debug                     | Enable or Disable debug mode              | true, false                                 |\n| **MS_TableSchema**          | data.schema               | Default schema name for SQL tables        | string (default: dbo)                       |\n| **MS_DynamicSchema**        | data.dynamicSchema        | Enable or Disable debug mode              | true, false                                 |\n| **MS_DisableVersionHeader** | version (set to undefined)| Disables the X-ZUMO-Server-Version header | true, false                                 |\n| **MS_SkipVersionCheck**     | skipversioncheck          | Disables the client API version check     | true, false                                 |\n\nTo set an App Setting:\n\n1. Log into the [Azure Portal].\n2. Select **All resources** or **App Services** then click on the name of your Mobile App.\n3. The Settings blade will open by default - if it doesn't, click on **Settings**.\n4. Click on **Application settings** in the GENERAL menu.\n5. Scroll to the App Settings section.\n6. If your app setting already exists, click on the value of the app setting to edit the value.\n7. If you app setting does not exist, enter the App Setting in the Key box and the value in the Value box.\n8. Once you are complete, click on **Save**.\n\nChanging most app settings will require a service restart.\n\n### <a name=\"howto-use-sqlazure\"></a>How to: Use SQL Database as your production data store\n\n<!--- ALTERNATE INCLUDE - we can't use ../includes/app-service-mobile-dotnet-backend-create-new-service.md - slightly different semantics -->\n\nUsing Azure SQL Database as a data store is identical across all Azure App Service application types. If you have not done so already, follow these steps to create a new Mobile App backend.\n\n1. Log into the [Azure Portal].\n\n2. In the top left of the window, click the **+NEW** button > **Web + Mobile** > **Mobile App**, then provide a name for your Mobile App backend.\n\n3. In the **Resource Group** box, enter the same name as your app.\n\n4. The Default App Service plan will be selected.  If you wish to change your App Service plan, you can do so by clicking on the App Service Plan > **+ Create New**.  Provide a name of the new App Service plan and select an appropriate location.  Click the Pricing tier and select an appropriate pricing tier for the service. Select **View all** to view more pricing options, such as **Free** and **Shared**.  Once you have selected the pricing tier, click the **Select** button.  Back in the **App Service plan** blade, click **OK**.\n\n5. Click **Create**. This creates a Mobile App backend where you will later deploy your server project.  Provisioning a Mobile App backend can take a couple of minutes.  Once the Mobile App backend is provisioned, the portal will open the **Settings** blade for the Mobile App backend.\n\nOnce the Mobile App backend is created, you can choose to either connect an existing SQL database to your Mobile App backend or create a new SQL database.  In this section, we will create a new SQL database.\n\n> [AZURE.NOTE] If you already have a database in the same location as the new mobile app backend, you can instead choose **Use an existing database** and then select that database. The use of a database in a different location is not recommended because of additional bandwidth costs and higher latencies.\n\n6. In the new Mobile App backend, click **Settings** > **Mobile App** > **Data** > **+Add**.\n\n7. In the **Add data connection** blade, click **SQL Database - Configure required settings** > **Create a new database**.  Enter the name of the new database in the **Name** field.\n\n8. Click **Server**.  In the **New server** blade, enter a unique server name in the **Server name** field, and provide a suitable **Server admin login** and **Password**.  Ensure **Allow azure services to access server** is checked.  Click on **OK**.\n\n    ![Create an Azure SQL Database][6]\n\n9. On the **New database** blade, click on **OK**.\n\n10. Back on the **Add data connection** blade, select **Connection string**, enter the login and password that you just provided when creating the database.  If you use an existing database, provide the login credentials for that database.  Once entered, click **OK**.\n\n11. Back on the **Add data connection** blade again, click on **OK** to create the database.\n\n<!--- END OF ALTERNATE INCLUDE -->\n\nCreation of the database can take a few minutes.  Use the **Notifications** area to monitor the progress of the deployment.  Do not progress until the database has been deployed sucessfully.  Once successfully deployed, a Connection String will be created for the SQL Database instance in your Mobile backend App Settings.  You can see this app setting in the **Settings** > **Application settings** > **Connection strings**.\n\n### <a name=\"howto-tables-auth\"></a>How to: Require Authentication for access to tables\n\nIf you wish to use App Service Authentication with the tables endpoint, you must configure App Service Authentication in the [Azure Portal] first.  For\nmore details about configuring authentication in an Azure App Service, review the Configuration Guide for the identity provider you intend to use:\n\n- [How to configure Azure Active Directory Authentication]\n- [How to configure Facebook Authentication]\n- [How to configure Google Authentication]\n- [How to configure Microsoft Authentication]\n- [How to configure Twitter Authentication]\n\nEach table has an access property that can be used to control access to the table.  The following sample shows a statically defined table with authentication required.\n\n    var azureMobileApps = require('azure-mobile-apps');\n\n    var table = azureMobileApps.table();\n\n    // Define the columns within the table\n    table.columns = {\n        \"text\": \"string\",\n        \"complete\": \"boolean\"\n    };\n\n    // Turn off dynamic schema\n    table.dynamicSchema = false;\n\n    // Require authentication to access the table\n    table.access = 'authenticated';\n\n    module.exports = table;\n\nThe access property can take one of three values\n\n  - *anonymous* indicates that the client application is allowed to read data without authentication\n  - *authenticated* indicates that the client application must send a valid authentication token with the request\n  - *disabled* indicates that this table is currently disabled\n\nIf the access property is undefined, unauthenticated access is allowed.\n\n### <a name=\"howto-tables-disabled\"></a>How to: Disable access to specific table operations\n\nIn addition to appearing on the table, the access property can be used to control individual operations.  There are four operations:\n\n  - *read* is the RESTful GET operation on the table\n  - *insert* is the RESTful POST operation on the table\n  - *update* is the RESTful PATCH operation on the table\n  - *delete* is the RESTful DELETE operation on the table\n\nFor example, you may wish to provide a read-only unauthenticated table.  This can be provided by the following table definition:\n\n    var azureMobileApps = require('azure-mobile-apps');\n\n    var table = azureMobileApps.table();\n\n    // Read-Only table - only allow READ operations\n    table.read.access = 'anonymous';\n    table.insert.access = 'disabled';\n    table.update.access = 'disabled';\n    table.delete.access = 'disabled';\n\n    module.exports = table;\n\n### <a name=\"howto-tables-query\"></a>How to: Adjust the query that is used with table operations\n\nA common requirement for table operations is to provide a restricted view of the data.  For example, you may provide a table that is\ntagged with the authenticated user ID such that the user can only read or update their own records.  The following table definition\nwill provide this functionality:\n\n    var azureMobileApps = require('azure-mobile-apps');\n\n    var table = azureMobileApps.table();\n\n    // Define a static schema for the table\n    table.columns = {\n        \"userId\": \"string\",\n        \"text\": \"string\",\n        \"complete\": \"boolean\"\n    };\n    table.dynamicSchema = false;\n\n    // Require authentication for this table\n    table.access = 'authenticated';\n\n    // Ensure that only records for the authenticated user are retrieved\n    table.read(function (context) {\n        context.query.where({ userId: context.user.id });\n        return context.execute();\n    });\n\n    // When adding records, add or overwrite the userId with the authenticated user\n    table.insert(function (context) {\n        context.item.userId = context.user.id;\n        return context.execute();\n    }\n\n    module.exports = table;\n\nOperations that normally execute a query will have a query property that you can adjust with a where clause.    The query property is\na [QueryJS] object that is used to convert an OData query to something that the data backend can process.  For simple equality cases\n(like the one above), a map can be used. It is also relatively easy to add specific SQL clauses:\n\n    context.query.where('myfield eq ?', 'value');\n\n### <a name=\"howto-tables-softdelete\"></a>How to: Configure Soft Delete on a table\n\nSoft Delete does not actually delete records.  Instead it marks them as deleted within the database by setting the deleted column to true.  The Azure Mobile Apps SDK automatically removes soft-deleted records from results unless the Mobile Client SDK uses IncludeDeleted().  To configure a table for soft delete, set the softDelete property in the table definition file.  An example might be:\n\n    var azureMobileApps = require('azure-mobile-apps');\n\n    var table = azureMobileApps.table();\n\n    // Define the columns within the table\n    table.columns = {\n        \"text\": \"string\",\n        \"complete\": \"boolean\"\n    };\n\n    // Turn off dynamic schema\n    table.dynamicSchema = false;\n\n    // Turn on Soft Delete\n    table.softDelete = true;\n\n    // Require authentication to access the table\n    table.access = 'authenticated';\n\n    module.exports = table;\n\nYou will need to establish a mechanism for purging records - either from a client application, via a WebJob or through a custom mechanism.\n\n### <a name=\"howto-tables-seeding\"></a>How to: Seed your database with data\n\nWhen creating a new application, you may wish to seed a table with data.  This can be done within the table definition JavaScript file as\nfollows:\n\n    var azureMobileApps = require('azure-mobile-apps');\n\n    var table = azureMobileApps.table();\n\n    // Define the columns within the table\n    table.columns = {\n        \"text\": \"string\",\n        \"complete\": \"boolean\"\n    };\n    table.seed = [\n        { text: 'Example 1', complete: false },\n        { text: 'Example 2', complete: true }\n    ];\n\n    // Turn off dynamic schema\n    table.dynamicSchema = false;\n\n    // Require authentication to access the table\n    table.access = 'authenticated';\n\n    module.exports = table;\n\nIt is important to note that seeding of data is only done when the table is created by the Azure Mobile Apps SDK.  If the table already\nexists within the database, no data is injected into the table.  If dynamic schema is turned on, then the schema will be inferred from\nthe seeded data.\n\nWe recommend that you explicitly call the initialize() method to create the table when the service starts running.\n\n## <a name=\"CustomAPI\"></a>Custom APIs\n\nIn addition to the data access API via the /tables endpoint, Azure Mobile Apps can provide custom API coverage.  Custom APIs are defined in\na similar way to the table definitions and can access all the same facilities, including authentication.\n\nIf you wish to use App Service Authentication with a Custom API, you must configure App Service Authentication in the [Azure Portal] first.  For\nmore details about configuring authentication in an  Azure App Service, review the Configuration Guide for the identity provider you intend to use:\n\n- [How to configure Azure Active Directory Authentication]\n- [How to configure Facebook Authentication]\n- [How to configure Google Authentication]\n- [How to configure Microsoft Authentication]\n- [How to configure Twitter Authentication]\n\n### <a name=\"howto-customapi-basic\"></a>How to: Define a simple custom API\n\nCustom APIs are defined in much the same way as the Tables API.\n\n1. Create an **api** directory\n2. Create an API definition JavaScript file in the **api** directory.\n3. Use the import method to import the **api** directory.\n\nHere is the prototype api definition based on the basic-app sample we used earlier.\n\n    var express = require('express'),\n        azureMobileApps = require('azure-mobile-apps');\n\n    var app = express(),\n        mobile = azureMobileApps();\n\n    // Import the Custom API\n    mobile.api.import('./api');\n\n    // Add the mobile API so it is accessible as a Web API\n    app.use(mobile);\n\n    // Start listening on HTTP\n    app.listen(process.env.PORT || 3000);\n\nLet's take a simple API that will return the server date using the _Date.now()_ method.  Here is the api/date.js file:\n\n    var api = {\n        get: function (req, res, next) {\n            var date = { currentTime: Date.now() };\n            res.status(200).type('application/json').send(date);\n        });\n    };\n\n    module.exports = api;\n\nEach parameter is one of the standard RESTful verbs - GET, POST, PATCH or DELETE.  The method is a standard [ExpressJS Middleware] function that sends the required output.\n\n### <a name=\"howto-customapi-auth\"></a>How to: Require authentication for access to a custom API\n\nAzure Mobile Apps SDK implements authentication in the same way for both the tables endpoint and custom APIs.  To add authentication to the API developed in the previous section, add an **access** property:\n\n    var api = {\n        get: function (req, res, next) {\n            var date = { currentTime: Date.now() };\n            res.status(200).type('application/json').send(date);\n        });\n    };\n    // All methods must be authenticated.\n    api.access = 'authenticated';\n\n    module.exports = api;\n\nYou can also specify authentication on specific operations:\n\n    var api = {\n        get: function (req, res, next) {\n            var date = { currentTime: Date.now() };\n            res.status(200).type('application/json').send(date);\n        });\n    };\n    // The GET methods must be authenticated.\n    api.get.access = 'authenticated';\n\n    module.exports = api;\n\nThe same token that is used for the tables endpoint must be used for custom APIs requiring authentication.\n\n## <a name=\"Debugging\"></a>Debugging and troubleshooting\n\nThe Azure App Service provides several debugging and troubleshooting techniques for Node.js applications.\nAll of these techniques are available.\n\n- [Monitoring an Azure App Service]\n- [Enable Diagnostic Logging in Azure App Service]\n- [Toubleshoot an Azure App Service in Visual Studio]\n\n### <a name=\"howto-diagnostic-logs\"></a>How to: Write to the Azure Mobile Apps diagnostic logs\n\nNode.js applications have access to a wide range of diagnostic log tools.  Internally, the Azure Mobile Apps Node.js SDK uses [Winston] for diagnostic logging.  This is automatically enabled by enabling debug mode or by setting the **MS_DebugMode** app setting to true in the [Azure Portal].  Logs generated will appear in the Diagnostic Logs on the [Azure Portal].\n\n## <a name=\"in-portal-editing\"></a>In-portal code editing experience\n\nSpecial tooling in the Azure portal makes it easy to work with a Node.js backend project without having to download the code project. Easy Tables and Easy APIs in the portal let you create and work with tables and custom APIs right in the portal. You can even edit table operation and API scripts right in the portal using the Visual Studio Team Services \"Monaco\" editor.\n\n### <a name=\"work-easy-tables\"></a>How to: Work with Easy Tables in the Azure portal\n\nWhen you click **Easy tables** in your backend site settings, you can add a new table or modify or delete an existing table. You can also see data in the table.\n\n![Work with Easy Tables](./media/app-service-mobile-node-backend-how-to-use-server-sdk/mobile-apps-easy-tables.png)\n\nThe following commands are available on the command bar for a table:\n\n+ **Change permissions** - modify the the permission for read, insert, update and delete operations on the table. Options are to allow anonymous access, to require authentication, or to disable all access to the operation. This modifies the table.json project code file.\n+ **Edit script** - the script file for the table is opened in the Visual Studio Team Services editor.\n+ **Manage schema** - add or delete columns or change the table index.\n+ **Clear table** - truncates an existing table be deleting all data rows but leaving the schema unchanged.\n+ **Delete rows** - delete individual rows of data.\n+ **View streaming logs** - connects you to the streaming log service for your site.\n\n###<a name=\"work-easy-apis\"></a>How to: Work with Easy APIs in the Azure portal\n\nWhen you click **Easy APIs** in your backend site settings, you can add a new custom API endpoint or modify or delete an existing API endpoint.\n\n![Work with Easy APIs](./media/app-service-mobile-node-backend-how-to-use-server-sdk/mobile-apps-easy-apis.png)\n\nIn the portal, you can change the access permissions for a given HTTP action, edit the API script file in the Visual Studio Team Services editor, or view the streaming logs.\n\n###<a name=\"online-editor\"></a>How to: Edit code in Visual Studio Team Services\n\nThe Azure portal lets you edit your Node.js backend script files in Visual Studio Team Services without having to download the project to your local computer. To edit script files in the online editor:\n\n1. In your Mobile App backend blade, click **All settings** > either **Easy tables** or **Easy APIs**, click a table or API, then click **Edit script**. The script file is opened in the Visual Studio Team Services editor.\n\n    ![Visual Studio Team Services code editor](./media/app-service-mobile-node-backend-how-to-use-server-sdk/mobile-apps-visual-studio-editor.png)\n\n2. Make your changes to the code file in the online editor. Changes are saved automatically as you type.\n\nFrom the editor, you can also execute the code on the site\n\n\n<!-- Images -->\n[0]: ./media/app-service-mobile-node-backend-how-to-use-server-sdk/npm-init.png\n[1]: ./media/app-service-mobile-node-backend-how-to-use-server-sdk/vs2015-new-project.png\n[2]: ./media/app-service-mobile-node-backend-how-to-use-server-sdk/vs2015-install-npm.png\n[3]: ./media/app-service-mobile-node-backend-how-to-use-server-sdk/sqlexpress-config.png\n[4]: ./media/app-service-mobile-node-backend-how-to-use-server-sdk/sqlexpress-authconfig.png\n[5]: ./media/app-service-mobile-node-backend-how-to-use-server-sdk/sqlexpress-newuser-1.png\n[6]: ../../includes/media/app-service-mobile-dotnet-backend-create-new-service/dotnet-backend-create-db.png\n\n<!-- URLs -->\n[Android Client QuickStart]: app-service-mobile-android-get-started.md\n[iOS Client QuickStart]: app-service-mobile-ios-get-started.md\n[Xamarin.iOS Client QuickStart]: app-service-mobile-xamarin-ios-get-started.md\n[Xamarin.Android Client QuickStart]: app-service-mobile-xamarin-android-get-started.md\n[Xamarin.Forms Client QuickStart]: app-service-mobile-xamarin-forms-get-started.md\n[Windows Store Client QuickStart]: app-service-mobile-windows-store-dotnet-get-started.md\n[HTML/Javascript Client QuickStart]: app-service-html-get-started.md\n[offline data sync]: app-service-mobile-offline-data-sync.md\n[How to configure Azure Active Directory Authentication]: app-service-mobile-how-to-configure-active-directory-authentication.md\n[How to configure Facebook Authentication]: app-service-mobile-how-to-configure-facebook-authentication.md\n[How to configure Google Authentication]: app-service-mobile-how-to-configure-google-authentication.md\n[How to configure Microsoft Authentication]: app-service-mobile-how-to-configure-microsoft-authentication.md\n[How to configure Twitter Authentication]: app-service-mobile-how-to-configure-twitter-authentication.md\n[Azure App Service Deployment Guide]: ../app-service-web/web-site-deploy.md\n[Monitoring an Azure App Service]: ../app-service-web/web-sites-monitor.md\n[Enable Diagnostic Logging in Azure App Service]: ../app-service-web/web-sites-enable-diagnostic-log.md\n[Toubleshoot an Azure App Service in Visual Studio]: ../app-service-web/web-sites-dotnet-troubleshoot-visual-studio.md\n[specify the Node Version]: ../nodejs-specify-node-version-azure-apps.md\n[use Node modules]: ../nodejs-use-node-mobiles-azure-apps.md\n[Create a new Azure App Service]: ../app-service-web/\n[azure-mobile-apps]: https://www.npmjs.com/package/azure-mobile-apps\n[Express]: http://expressjs.com/\n\n[Azure Portal]: https://portal.azure.com/\n[OData]: http://www.odata.org\n[Promise]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n[basicapp sample on GitHub]: https://github.com/azure/azure-mobile-apps-node/tree/master/samples/basic-app\n[todo sample on GitHub]: https://github.com/azure/azure-mobile-apps-node/tree/master/samples/todo\n[samples directory on GitHub]: https://github.com/azure/azure-mobile-apps-node/tree/master/samples\n[static-schema sample on GitHub]: https://github.com/azure/azure-mobile-apps-node/tree/master/samples/static-schema\n[QueryJS]: https://github.com/Azure/queryjs\n[Node.js Tools 1.1 for Visual Studio]: https://github.com/Microsoft/nodejstools/releases/tag/v1.1-RC.2.1\n[mssql Node.js package]: https://www.npmjs.com/package/mssql\n[Microsoft SQL Server 2014 Express]: http://www.microsoft.com/en-us/server-cloud/Products/sql-server-editions/sql-server-express.aspx\n[ExpressJS Middleware]: http://expressjs.com/guide/using-middleware.html\n[Winston]: https://github.com/winstonjs/winston\n\n\n"
}