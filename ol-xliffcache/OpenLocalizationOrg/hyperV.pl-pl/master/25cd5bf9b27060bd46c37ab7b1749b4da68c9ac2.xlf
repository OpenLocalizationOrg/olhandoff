<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pl-pl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25cd5bf9b27060bd46c37ab7b1749b4da68c9ac2</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with the App Service Mobile Apps managed client library (Windows | Xamarin) | Microsoft Azure</source>
          <target state="new">Working with the App Service Mobile Apps managed client library (Windows | Xamarin) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use a .NET client for Azure App Service Mobile Apps with Windows and Xamarin apps.</source>
          <target state="new">Learn how to use a .NET client for Azure App Service Mobile Apps with Windows and Xamarin apps.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use the managed client for Azure Mobile Apps</source>
          <target state="new">How to use the managed client for Azure Mobile Apps</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This guide shows you how to perform common scenarios using the managed client library for Azure App Service Mobile Apps for Windows and Xamarin apps.</source>
          <target state="new">This guide shows you how to perform common scenarios using the managed client library for Azure App Service Mobile Apps for Windows and Xamarin apps.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you are new to Mobile Apps, you should consider first completing the <bpt id="p1">[</bpt>Mobile Apps quickstart<ept id="p1">](app-service-mobile-windows-store-dotnet-get-started.md)</ept> tutorial.</source>
          <target state="new">If you are new to Mobile Apps, you should consider first completing the <bpt id="p1">[</bpt>Mobile Apps quickstart<ept id="p1">](app-service-mobile-windows-store-dotnet-get-started.md)</ept> tutorial.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this guide, we focus on the client-side managed SDK.</source>
          <target state="new">In this guide, we focus on the client-side managed SDK.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To learn more about the server-side SDKs for Mobile Apps, see <bpt id="p1">[</bpt>Work with .NET backend SDK<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept> or <bpt id="p2">[</bpt>How to use the Node.js backend SDK<ept id="p2">](app-service-mobile-node-backend-how-to-use-server-sdk.md)</ept>.</source>
          <target state="new">To learn more about the server-side SDKs for Mobile Apps, see <bpt id="p1">[</bpt>Work with .NET backend SDK<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept> or <bpt id="p2">[</bpt>How to use the Node.js backend SDK<ept id="p2">](app-service-mobile-node-backend-how-to-use-server-sdk.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Reference documentation</source>
          <target state="new">Reference documentation</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The reference documentation for the client SDK is located here: <bpt id="p1">[</bpt>Azure Mobile Apps .NET Client Reference<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.mobileservices.aspx)</ept>.</source>
          <target state="new">The reference documentation for the client SDK is located here: <bpt id="p1">[</bpt>Azure Mobile Apps .NET Client Reference<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.mobileservices.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="setup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Setup and Prerequisites</source>
          <target state="new"><ph id="ph1">&lt;a name="setup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Setup and Prerequisites</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>We assume that you have already created and published your Mobile App backend project, which includes at one table.</source>
          <target state="new">We assume that you have already created and published your Mobile App backend project, which includes at one table.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the code used in this topic, the table is named <ph id="ph1">`TodoItem`</ph> and it will have the following columns: <ph id="ph2">`Id`</ph>, <ph id="ph3">`Text`</ph>, and <ph id="ph4">`Complete`</ph>.</source>
          <target state="new">In the code used in this topic, the table is named <ph id="ph1">`TodoItem`</ph> and it will have the following columns: <ph id="ph2">`Id`</ph>, <ph id="ph3">`Text`</ph>, and <ph id="ph4">`Complete`</ph>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is the same table created when you complete the <bpt id="p1">[</bpt>quickstart tutorial<ept id="p1">](app-service-mobile-windows-store-dotnet-get-started.md)</ept></source>
          <target state="new">This is the same table created when you complete the <bpt id="p1">[</bpt>quickstart tutorial<ept id="p1">](app-service-mobile-windows-store-dotnet-get-started.md)</ept></target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The corresponding typed client-side type in C# is the following:</source>
          <target state="new">The corresponding typed client-side type in C# is the following:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt>JsonPropertyAttribute<ept id="p1">](http://www.newtonsoft.com/json/help/html/Properties_T_Newtonsoft_Json_JsonPropertyAttribute.htm)</ept> is used to define the <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> mapping between the client type and the table.</source>
          <target state="new">Note that the <bpt id="p1">[</bpt>JsonPropertyAttribute<ept id="p1">](http://www.newtonsoft.com/json/help/html/Properties_T_Newtonsoft_Json_JsonPropertyAttribute.htm)</ept> is used to define the <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> mapping between the client type and the table.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To learn how to create new tables in your Mobile Apps backend, see <bpt id="p1">[</bpt>How to: Define a table controller<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#how-to-define-a-table-controller)</ept> (.NET backend) or <bpt id="p2">[</bpt>Define Tables using a Dynamic Schema<ept id="p2">](app-service-mobile-node-backend-how-to-use-server-sdk.md#TableOperations)</ept> (Node.js backend).</source>
          <target state="new">To learn how to create new tables in your Mobile Apps backend, see <bpt id="p1">[</bpt>How to: Define a table controller<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#how-to-define-a-table-controller)</ept> (.NET backend) or <bpt id="p2">[</bpt>Define Tables using a Dynamic Schema<ept id="p2">](app-service-mobile-node-backend-how-to-use-server-sdk.md#TableOperations)</ept> (Node.js backend).</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For a Node.js backend, you can also use the <bpt id="p1">**</bpt>Easy tables<ept id="p1">**</ept> setting in the <bpt id="p2">[</bpt>Azure portal<ept id="p2">](https://portal.azure.com)</ept>.</source>
          <target state="new">For a Node.js backend, you can also use the <bpt id="p1">**</bpt>Easy tables<ept id="p1">**</ept> setting in the <bpt id="p2">[</bpt>Azure portal<ept id="p2">](https://portal.azure.com)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="create-client"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create the Mobile App client</source>
          <target state="new"><ph id="ph1">&lt;a name="create-client"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create the Mobile App client</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following code creates the <ph id="ph1">`MobileServiceClient`</ph> object that is used to access your Mobile App backend.</source>
          <target state="new">The following code creates the <ph id="ph1">`MobileServiceClient`</ph> object that is used to access your Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the code above, replace <ph id="ph1">`MOBILE_APP_URL`</ph> with the URL of the Mobile App backend, which is found in the blade for your Mobile App backend in the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com)</ept>.</source>
          <target state="new">In the code above, replace <ph id="ph1">`MOBILE_APP_URL`</ph> with the URL of the Mobile App backend, which is found in the blade for your Mobile App backend in the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="instantiating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create a table reference</source>
          <target state="new"><ph id="ph1">&lt;a name="instantiating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create a table reference</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All of the code that accesses or modifies data in a backend table calls functions on the <ph id="ph1">`MobileServiceTable`</ph> object.</source>
          <target state="new">All of the code that accesses or modifies data in a backend table calls functions on the <ph id="ph1">`MobileServiceTable`</ph> object.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You get a reference to the table by calling the <bpt id="p1">[</bpt>GetTable<ept id="p1">](https://msdn.microsoft.com/library/azure/jj554275.aspx)</ept> method on an instance of the <ph id="ph1">`MobileServiceClient`</ph>, as follows:</source>
          <target state="new">You get a reference to the table by calling the <bpt id="p1">[</bpt>GetTable<ept id="p1">](https://msdn.microsoft.com/library/azure/jj554275.aspx)</ept> method on an instance of the <ph id="ph1">`MobileServiceClient`</ph>, as follows:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is the typed serialization model.</source>
          <target state="new">This is the typed serialization model.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An untyped serialization model is also supported.</source>
          <target state="new">An untyped serialization model is also supported.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following creates a reference to an untyped table:</source>
          <target state="new">The following creates a reference to an untyped table:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In untyped queries, you must specify the underlying OData query string.</source>
          <target state="new">In untyped queries, you must specify the underlying OData query string.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="querying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Query data from your Mobile App</source>
          <target state="new"><ph id="ph1">&lt;a name="querying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Query data from your Mobile App</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This section describes how to issue queries to the Mobile App backend, which includes the following functionality:</source>
          <target state="new">This section describes how to issue queries to the Mobile App backend, which includes the following functionality:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Filter returned data</source>
          <target state="new">Filter returned data</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Sort returned data</source>
          <target state="new">Sort returned data</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Return data in pages</source>
          <target state="new">Return data in pages</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Select specific columns</source>
          <target state="new">Select specific columns</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Look up data by ID</source>
          <target state="new">Look up data by ID</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> A server-driven page size is enforced to prevent all rows from being returned.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> A server-driven page size is enforced to prevent all rows from being returned.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This keeps default requests for large data sets from negatively impacting the service.</source>
          <target state="new">This keeps default requests for large data sets from negatively impacting the service.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To return more than 50 rows, use the <ph id="ph1">`Take`</ph> method, as described in <bpt id="p1">[</bpt><ept id="p1">Return data in pages]</ept>.</source>
          <target state="new">To return more than 50 rows, use the <ph id="ph1">`Take`</ph> method, as described in <bpt id="p1">[</bpt><ept id="p1">Return data in pages]</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="filtering"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Filter returned data</source>
          <target state="new"><ph id="ph1">&lt;a name="filtering"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Filter returned data</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to filter data by including a <ph id="ph1">`Where`</ph> clause in a query.</source>
          <target state="new">The following code illustrates how to filter data by including a <ph id="ph1">`Where`</ph> clause in a query.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It returns all items from <ph id="ph1">`todoTable`</ph> whose <ph id="ph2">`Complete`</ph> property is equal to <ph id="ph3">`false`</ph>.</source>
          <target state="new">It returns all items from <ph id="ph1">`todoTable`</ph> whose <ph id="ph2">`Complete`</ph> property is equal to <ph id="ph3">`false`</ph>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Where`</ph> function applies a row filtering predicate to the query against the table.</source>
          <target state="new">The <ph id="ph1">`Where`</ph> function applies a row filtering predicate to the query against the table.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can view the URI of the request sent to the backend by using message inspection software, such as browser developer tools or <bpt id="p1">[</bpt><ept id="p1">Fiddler]</ept>.</source>
          <target state="new">You can view the URI of the request sent to the backend by using message inspection software, such as browser developer tools or <bpt id="p1">[</bpt><ept id="p1">Fiddler]</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you look at the request URI below,  notice that we are modifying the query string itself:</source>
          <target state="new">If you look at the request URI below,  notice that we are modifying the query string itself:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This request would normally be translated roughly into the following SQL query on the Azure side:</source>
          <target state="new">This request would normally be translated roughly into the following SQL query on the Azure side:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The function which is passed to the <ph id="ph1">`Where`</ph> method can have an arbitrary number of conditions.</source>
          <target state="new">The function which is passed to the <ph id="ph1">`Where`</ph> method can have an arbitrary number of conditions.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, the line below:</source>
          <target state="new">For example, the line below:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Would be roughly translated (for the same request shown before) as</source>
          <target state="new">Would be roughly translated (for the same request shown before) as</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> statement above will find items with <ph id="ph2">`Complete`</ph> status set to false with non-null <ph id="ph3">`Text`</ph>.</source>
          <target state="new">The <ph id="ph1">`where`</ph> statement above will find items with <ph id="ph2">`Complete`</ph> status set to false with non-null <ph id="ph3">`Text`</ph>.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>We also could have written that in multiple lines instead:</source>
          <target state="new">We also could have written that in multiple lines instead:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The two methods are equivalent and may be used interchangeably.</source>
          <target state="new">The two methods are equivalent and may be used interchangeably.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The former option&amp;mdash;of concatenating multiple predicates in one query&amp;mdash;is more compact and recommended.</source>
          <target state="new">The former option&amp;mdash;of concatenating multiple predicates in one query&amp;mdash;is more compact and recommended.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> clause supports operations that be translated into the OData subset.</source>
          <target state="new">The <ph id="ph1">`where`</ph> clause supports operations that be translated into the OData subset.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This includes relational operators (==, !=, &lt;, &lt;=, &gt;, &gt;=), arithmetic operators (+, -, /, *, %), number precision (Math.Floor, Math.Ceiling), string functions (Length, Substring, Replace, IndexOf, StartsWith, EndsWith), date properties (Year, Month, Day, Hour, Minute, Second), access properties of an object, and expressions combining all of these.</source>
          <target state="new">This includes relational operators (==, !=, &lt;, &lt;=, &gt;, &gt;=), arithmetic operators (+, -, /, *, %), number precision (Math.Floor, Math.Ceiling), string functions (Length, Substring, Replace, IndexOf, StartsWith, EndsWith), date properties (Year, Month, Day, Hour, Minute, Second), access properties of an object, and expressions combining all of these.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="sorting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Sort returned data</source>
          <target state="new"><ph id="ph1">&lt;a name="sorting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Sort returned data</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to sort data by including an <ph id="ph1">`OrderBy`</ph> or <ph id="ph2">`OrderByDescending`</ph> function in the query.</source>
          <target state="new">The following code illustrates how to sort data by including an <ph id="ph1">`OrderBy`</ph> or <ph id="ph2">`OrderByDescending`</ph> function in the query.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It returns items from <ph id="ph1">`todoTable`</ph> sorted ascending by the <ph id="ph2">`Text`</ph> field.</source>
          <target state="new">It returns items from <ph id="ph1">`todoTable`</ph> sorted ascending by the <ph id="ph2">`Text`</ph> field.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="paging"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return data in pages</source>
          <target state="new"><ph id="ph1">&lt;a name="paging"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return data in pages</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>By default, the backend returns only the first 50 rows.</source>
          <target state="new">By default, the backend returns only the first 50 rows.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can increase the number of returned rows by calling the <bpt id="p1">[</bpt><ept id="p1">Take]</ept> method.</source>
          <target state="new">You can increase the number of returned rows by calling the <bpt id="p1">[</bpt><ept id="p1">Take]</ept> method.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`Take`</ph> along with the <bpt id="p1">[</bpt><ept id="p1">Skip]</ept> method to request a specific "page" of the total dataset returned by the query.</source>
          <target state="new">Use <ph id="ph1">`Take`</ph> along with the <bpt id="p1">[</bpt><ept id="p1">Skip]</ept> method to request a specific "page" of the total dataset returned by the query.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following query, when executed, returns the top three items in the table.</source>
          <target state="new">The following query, when executed, returns the top three items in the table.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following revised query skips the first three results and returns the next three after that.</source>
          <target state="new">The following revised query skips the first three results and returns the next three after that.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is effectively the second "page" of data, where the page size is three items.</source>
          <target state="new">This is effectively the second "page" of data, where the page size is three items.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">[</bpt><ept id="p1">IncludeTotalCount]</ept> method to ensure that the query will get the total count for <ph id="ph1">&lt;i&gt;</ph>all<ph id="ph2">&lt;/i&gt;</ph> the records that would have been returned, ignoring any take paging/limit clause specified:</source>
          <target state="new">You can also use the <bpt id="p1">[</bpt><ept id="p1">IncludeTotalCount]</ept> method to ensure that the query will get the total count for <ph id="ph1">&lt;i&gt;</ph>all<ph id="ph2">&lt;/i&gt;</ph> the records that would have been returned, ignoring any take paging/limit clause specified:</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is a simplified scenario of passing hard-coded paging values to the <ph id="ph1">`Take`</ph> and <ph id="ph2">`Skip`</ph> methods.</source>
          <target state="new">This is a simplified scenario of passing hard-coded paging values to the <ph id="ph1">`Take`</ph> and <ph id="ph2">`Skip`</ph> methods.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In a real-world app, you can use queries similar to the above with a pager control or comparable UI to let users navigate to previous and next pages.</source>
          <target state="new">In a real-world app, you can use queries similar to the above with a pager control or comparable UI to let users navigate to previous and next pages.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>To override the 50 row limit in a Mobile App backend, you must also apply the <bpt id="p1">[</bpt>EnableQueryAttribute<ept id="p1">](https://msdn.microsoft.com/library/system.web.http.odata.enablequeryattribute.aspx)</ept> to the public GET method and specify the paging behavior.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>To override the 50 row limit in a Mobile App backend, you must also apply the <bpt id="p1">[</bpt>EnableQueryAttribute<ept id="p1">](https://msdn.microsoft.com/library/system.web.http.odata.enablequeryattribute.aspx)</ept> to the public GET method and specify the paging behavior.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When applied to the method, the following sets the maximum returned rows to 1000:</source>
          <target state="new">When applied to the method, the following sets the maximum returned rows to 1000:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="selecting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Select specific columns</source>
          <target state="new"><ph id="ph1">&lt;a name="selecting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Select specific columns</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can specify which set of properties to include in the results by adding a <ph id="ph1">`Select`</ph> clause to your query.</source>
          <target state="new">You can specify which set of properties to include in the results by adding a <ph id="ph1">`Select`</ph> clause to your query.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For example, the following code shows how to select just one field and also how to select and format multiple fields:</source>
          <target state="new">For example, the following code shows how to select just one field and also how to select and format multiple fields:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>All the functions described so far are additive, so we can just keep calling them and we'll each time affect more of the query.</source>
          <target state="new">All the functions described so far are additive, so we can just keep calling them and we'll each time affect more of the query.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>One more example:</source>
          <target state="new">One more example:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="lookingup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Look up data by ID</source>
          <target state="new"><ph id="ph1">&lt;a name="lookingup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Look up data by ID</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LookupAsync`</ph> function can be used to look up objects from the database with a particular ID.</source>
          <target state="new">The <ph id="ph1">`LookupAsync`</ph> function can be used to look up objects from the database with a particular ID.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="lookingup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Execute untyped queries</source>
          <target state="new"><ph id="ph1">&lt;a name="lookingup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Execute untyped queries</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When executing a query using an untyped table object, you must explicitly specify the OData query string, as in the following example:</source>
          <target state="new">When executing a query using an untyped table object, you must explicitly specify the OData query string, as in the following example:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You get back JSON values that you can use like a property bag.</source>
          <target state="new">You get back JSON values that you can use like a property bag.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information on JToken and Json.NET, see <bpt id="p1">[</bpt>Json.NET<ept id="p1">](http://json.codeplex.com/)</ept></source>
          <target state="new">For more information on JToken and Json.NET, see <bpt id="p1">[</bpt>Json.NET<ept id="p1">](http://json.codeplex.com/)</ept></target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="inserting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert data into a Mobile App backend</source>
          <target state="new"><ph id="ph1">&lt;a name="inserting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert data into a Mobile App backend</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>All client types must contain a member named <bpt id="p1">**</bpt>Id<ept id="p1">**</ept>, which is by default a string.</source>
          <target state="new">All client types must contain a member named <bpt id="p1">**</bpt>Id<ept id="p1">**</ept>, which is by default a string.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This <bpt id="p1">**</bpt>Id<ept id="p1">**</ept> is required to perform CRUD operations and for offline.</source>
          <target state="new">This <bpt id="p1">**</bpt>Id<ept id="p1">**</ept> is required to perform CRUD operations and for offline.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to insert new rows into a table.</source>
          <target state="new">The following code illustrates how to insert new rows into a table.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The parameter contains the data to be inserted as a .NET object.</source>
          <target state="new">The parameter contains the data to be inserted as a .NET object.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If a unique custom ID value is not included in the <ph id="ph1">`todoItem`</ph> passed to the <ph id="ph2">`todoTable.InsertAsync`</ph> call, a value for ID is generated by the server and is set in the <ph id="ph3">`todoItem`</ph> object returned to the client.</source>
          <target state="new">If a unique custom ID value is not included in the <ph id="ph1">`todoItem`</ph> passed to the <ph id="ph2">`todoTable.InsertAsync`</ph> call, a value for ID is generated by the server and is set in the <ph id="ph3">`todoItem`</ph> object returned to the client.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To insert untyped data, you may take advantage of Json.NET as shown below.</source>
          <target state="new">To insert untyped data, you may take advantage of Json.NET as shown below.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Here is an example using an email address as a unique string id.</source>
          <target state="new">Here is an example using an email address as a unique string id.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Working with ID values</source>
          <target state="new">Working with ID values</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Mobile Apps supports unique custom string values for the table's <bpt id="p1">**</bpt>id<ept id="p1">**</ept> column.</source>
          <target state="new">Mobile Apps supports unique custom string values for the table's <bpt id="p1">**</bpt>id<ept id="p1">**</ept> column.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This allows applications to use custom values such as email addresses or user names for the ID.</source>
          <target state="new">This allows applications to use custom values such as email addresses or user names for the ID.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>String IDs provide you with the following benefits:</source>
          <target state="new">String IDs provide you with the following benefits:</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>IDs are generated without making a round-trip to the database.</source>
          <target state="new">IDs are generated without making a round-trip to the database.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Records are easier to merge from different tables or databases.</source>
          <target state="new">Records are easier to merge from different tables or databases.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>IDs values can integrate better with an application's logic.</source>
          <target state="new">IDs values can integrate better with an application's logic.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When a string ID value is not set on an inserted record, the Mobile App backend generates a unique value for the ID.</source>
          <target state="new">When a string ID value is not set on an inserted record, the Mobile App backend generates a unique value for the ID.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Guid.NewGuid()`</ph> method To generate your own ID values, either on the client or in the backend.</source>
          <target state="new">You can use the <ph id="ph1">`Guid.NewGuid()`</ph> method To generate your own ID values, either on the client or in the backend.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="modifying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Modify data in a Mobile App backend</source>
          <target state="new"><ph id="ph1">&lt;a name="modifying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Modify data in a Mobile App backend</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to update an existing instance with the same ID with new information.</source>
          <target state="new">The following code illustrates how to update an existing instance with the same ID with new information.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The parameter contains the data to be updated as a .NET object.</source>
          <target state="new">The parameter contains the data to be updated as a .NET object.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To insert untyped data, you may take advantage of Json.NET as follows:</source>
          <target state="new">To insert untyped data, you may take advantage of Json.NET as follows:</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>JObject jo = new JObject();</source>
          <target state="new">JObject jo = new JObject();</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>jo.Add("Id", "37BBF396-11F0-4B39-85C8-B319C729AF6D");</source>
          <target state="new">jo.Add("Id", "37BBF396-11F0-4B39-85C8-B319C729AF6D");</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>jo.Add("Text", "Hello World");</source>
          <target state="new">jo.Add("Text", "Hello World");</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>jo.Add("Complete", false);</source>
          <target state="new">jo.Add("Complete", false);</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>var inserted = await table.UpdateAsync(jo);</source>
          <target state="new">var inserted = await table.UpdateAsync(jo);</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Note that when making an update, an ID must be specified.</source>
          <target state="new">Note that when making an update, an ID must be specified.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This is how the backend identifies which instance to update.</source>
          <target state="new">This is how the backend identifies which instance to update.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The ID can be obtained from the result of the <ph id="ph1">`InsertAsync`</ph> call.</source>
          <target state="new">The ID can be obtained from the result of the <ph id="ph1">`InsertAsync`</ph> call.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When you try to update an item without providing the "Id" value, an <ph id="ph1">`ArgumentException`</ph> is raised.</source>
          <target state="new">When you try to update an item without providing the "Id" value, an <ph id="ph1">`ArgumentException`</ph> is raised.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="deleting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete data in a Mobile App backend</source>
          <target state="new"><ph id="ph1">&lt;a name="deleting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete data in a Mobile App backend</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to delete an existing instance.</source>
          <target state="new">The following code illustrates how to delete an existing instance.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The instance is identified by the "Id" field set on the <ph id="ph1">`todoItem`</ph>.</source>
          <target state="new">The instance is identified by the "Id" field set on the <ph id="ph1">`todoItem`</ph>.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To delete untyped data, you may take advantage of Json.NET as follows:</source>
          <target state="new">To delete untyped data, you may take advantage of Json.NET as follows:</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Note that when you make a delete request, an ID must be specified.</source>
          <target state="new">Note that when you make a delete request, an ID must be specified.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Other properties are not passed to the service or are ignored at the service.</source>
          <target state="new">Other properties are not passed to the service or are ignored at the service.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The result of a <ph id="ph1">`DeleteAsync`</ph> call is usually <ph id="ph2">`null`</ph>.</source>
          <target state="new">The result of a <ph id="ph1">`DeleteAsync`</ph> call is usually <ph id="ph2">`null`</ph>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The ID to pass in can be obtained from the result of the <ph id="ph1">`InsertAsync`</ph> call.</source>
          <target state="new">The ID to pass in can be obtained from the result of the <ph id="ph1">`InsertAsync`</ph> call.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When you try to delete an item without the "Id" field already set, a <ph id="ph1">`MobileServiceInvalidOperationException`</ph> is returned from the backend.</source>
          <target state="new">When you try to delete an item without the "Id" field already set, a <ph id="ph1">`MobileServiceInvalidOperationException`</ph> is returned from the backend.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="#custom-api"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Call a custom API</source>
          <target state="new"><ph id="ph1">&lt;a name="#custom-api"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Call a custom API</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.</source>
          <target state="new">A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.</source>
          <target state="new">By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You call a custom API by calling one of the <bpt id="p1">[</bpt><ept id="p1">InvokeApiAsync]</ept> method overloads on the client.</source>
          <target state="new">You call a custom API by calling one of the <bpt id="p1">[</bpt><ept id="p1">InvokeApiAsync]</ept> method overloads on the client.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For example, the following line of code sends a POST request to the <bpt id="p1">**</bpt>completeAll<ept id="p1">**</ept> API on the backend:</source>
          <target state="new">For example, the following line of code sends a POST request to the <bpt id="p1">**</bpt>completeAll<ept id="p1">**</ept> API on the backend:</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Note that this a typed method call, which requires that the <bpt id="p1">**</bpt>MarkAllResult<ept id="p1">**</ept> return type be defined.</source>
          <target state="new">Note that this a typed method call, which requires that the <bpt id="p1">**</bpt>MarkAllResult<ept id="p1">**</ept> return type be defined.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Both typed and untyped methods are supported.</source>
          <target state="new">Both typed and untyped methods are supported.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This is an almost trivial example as it is typed, sends no payload, has no query parameters, and doesn't change the request headers.</source>
          <target state="new">This is an almost trivial example as it is typed, sends no payload, has no query parameters, and doesn't change the request headers.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For more realistic examples and a more a complete discussion of <bpt id="p1">[</bpt><ept id="p1">InvokeApiAsync]</ept>, see <bpt id="p2">[</bpt><ept id="p2">Custom API in Azure Mobile Services Client SDKs]</ept>.</source>
          <target state="new">For more realistic examples and a more a complete discussion of <bpt id="p1">[</bpt><ept id="p1">InvokeApiAsync]</ept>, see <bpt id="p2">[</bpt><ept id="p2">Custom API in Azure Mobile Services Client SDKs]</ept>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>How to: Register for push notifications</source>
          <target state="new">How to: Register for push notifications</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The Mobile Apps client enables you to register for push notifications with Azure Notification Hubs.</source>
          <target state="new">The Mobile Apps client enables you to register for push notifications with Azure Notification Hubs.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When registering, you obtain a handle that you obtain from the platform-specific Push Notification Service (PNS).</source>
          <target state="new">When registering, you obtain a handle that you obtain from the platform-specific Push Notification Service (PNS).</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You then provide this value along with any tags when you create the registration.</source>
          <target state="new">You then provide this value along with any tags when you create the registration.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following code registers your Windows app for push notifications with the Windows Notification Service (WNS):</source>
          <target state="new">The following code registers your Windows app for push notifications with the Windows Notification Service (WNS):</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Note that in this example, two tags are included with the registration.</source>
          <target state="new">Note that in this example, two tags are included with the registration.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information on Windows apps, including how to register for template registrations, see <bpt id="p1">[</bpt>Add push notifications to your app<ept id="p1">](app-service-mobile-windows-store-dotnet-get-started-push.md)</ept>.</source>
          <target state="new">For more information on Windows apps, including how to register for template registrations, see <bpt id="p1">[</bpt>Add push notifications to your app<ept id="p1">](app-service-mobile-windows-store-dotnet-get-started-push.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Xamarin apps require some additional code to be able to register an app running on iOS or Android app with the Apple Push Notification Service (APNS) and Google Cloud Messaging (GCM) services, respectively.</source>
          <target state="new">Xamarin apps require some additional code to be able to register an app running on iOS or Android app with the Apple Push Notification Service (APNS) and Google Cloud Messaging (GCM) services, respectively.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">**</bpt>Add push notifications to your app<ept id="p1">**</ept> (<bpt id="p2">[</bpt>Xamarin.iOS<ept id="p2">](partner-xamarin-mobile-services-ios-get-started-push.md#add-push)</ept> | <bpt id="p3">[</bpt>Xamarin.Android<ept id="p3">](partner-xamarin-mobile-services-android-get-started-push.md#add-push)</ept>).</source>
          <target state="new">For more information see <bpt id="p1">**</bpt>Add push notifications to your app<ept id="p1">**</ept> (<bpt id="p2">[</bpt>Xamarin.iOS<ept id="p2">](partner-xamarin-mobile-services-ios-get-started-push.md#add-push)</ept> | <bpt id="p3">[</bpt>Xamarin.Android<ept id="p3">](partner-xamarin-mobile-services-android-get-started-push.md#add-push)</ept>).</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>How to: Register push templates to send cross-platform notifications</source>
          <target state="new">How to: Register push templates to send cross-platform notifications</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>To register templates, simply pass along templates with your <bpt id="p1">**</bpt>MobileService.GetPush().RegisterAsync()<ept id="p1">**</ept> method in your client app.</source>
          <target state="new">To register templates, simply pass along templates with your <bpt id="p1">**</bpt>MobileService.GetPush().RegisterAsync()<ept id="p1">**</ept> method in your client app.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Your templates will be of type JObject and can contain multiple templates in the following JSON format:</source>
          <target state="new">Your templates will be of type JObject and can contain multiple templates in the following JSON format:</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The method <bpt id="p1">**</bpt>RegisterAsync()<ept id="p1">**</ept> also accepts Secondary Tiles:</source>
          <target state="new">The method <bpt id="p1">**</bpt>RegisterAsync()<ept id="p1">**</ept> also accepts Secondary Tiles:</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Note that all tags will be stripped away for security.</source>
          <target state="new">Note that all tags will be stripped away for security.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To add tags to installations or templates within installations, see <bpt id="p1">[</bpt><ept id="p1">Work with the .NET backend server SDK for Azure Mobile Apps]</ept>.</source>
          <target state="new">To add tags to installations or templates within installations, see <bpt id="p1">[</bpt><ept id="p1">Work with the .NET backend server SDK for Azure Mobile Apps]</ept>.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>To send notifications utilizing these registered templates, work with <bpt id="p1">[</bpt>Notification Hubs APIs<ept id="p1">](https://msdn.microsoft.com/library/azure/dn495101.aspx)</ept>.</source>
          <target state="new">To send notifications utilizing these registered templates, work with <bpt id="p1">[</bpt>Notification Hubs APIs<ept id="p1">](https://msdn.microsoft.com/library/azure/dn495101.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="optimisticconcurrency"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Use Optimistic Concurrency</source>
          <target state="new"><ph id="ph1">&lt;a name="optimisticconcurrency"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Use Optimistic Concurrency</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Two or more clients may write changes to the same item, at the same time, in some scenarios.</source>
          <target state="new">Two or more clients may write changes to the same item, at the same time, in some scenarios.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Without any conflict detection, the last write would overwrite any previous updates even if this was not the desired result.</source>
          <target state="new">Without any conflict detection, the last write would overwrite any previous updates even if this was not the desired result.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Optimistic concurrency control<ept id="p1">*</ept> assumes that each transaction can commit and therefore does not use any resource locking.</source>
          <target state="new"><bpt id="p1">*</bpt>Optimistic concurrency control<ept id="p1">*</ept> assumes that each transaction can commit and therefore does not use any resource locking.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Before committing a transaction, optimistic concurrency control verifies that no other transaction has modified the data.</source>
          <target state="new">Before committing a transaction, optimistic concurrency control verifies that no other transaction has modified the data.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If the data has been modified, the committing transaction is rolled back.</source>
          <target state="new">If the data has been modified, the committing transaction is rolled back.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Mobile Apps supports optimistic concurrency control by tracking changes to each item using the <ph id="ph1">`__version`</ph> system property column that is defined for each table in your Mobile App backend.</source>
          <target state="new">Mobile Apps supports optimistic concurrency control by tracking changes to each item using the <ph id="ph1">`__version`</ph> system property column that is defined for each table in your Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Each time a record is updated, Mobile Apps sets the <ph id="ph1">`__version`</ph> property for that record to a new value.</source>
          <target state="new">Each time a record is updated, Mobile Apps sets the <ph id="ph1">`__version`</ph> property for that record to a new value.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>During each update request, the <ph id="ph1">`__version`</ph> property of the record included with the request is compared to the same property for the record on the server.</source>
          <target state="new">During each update request, the <ph id="ph1">`__version`</ph> property of the record included with the request is compared to the same property for the record on the server.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If the version passed with the request does not match the backend, then the client library raises a <ph id="ph1">`MobileServicePreconditionFailedException&lt;T&gt;`</ph>.</source>
          <target state="new">If the version passed with the request does not match the backend, then the client library raises a <ph id="ph1">`MobileServicePreconditionFailedException&lt;T&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The type included with the exception is the record from the backend containing the server's version of the record.</source>
          <target state="new">The type included with the exception is the record from the backend containing the server's version of the record.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The application can then use this information to decide whether to execute the update request again with the correct <ph id="ph1">`__version`</ph> value from the backend to commit changes.</source>
          <target state="new">The application can then use this information to decide whether to execute the update request again with the correct <ph id="ph1">`__version`</ph> value from the backend to commit changes.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>To enable optimistic concurrency the application defines a column on the table class for the <ph id="ph1">`__version`</ph> system property.</source>
          <target state="new">To enable optimistic concurrency the application defines a column on the table class for the <ph id="ph1">`__version`</ph> system property.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The following definition provides an example.</source>
          <target state="new">The following definition provides an example.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Applications using untyped tables enable optimistic concurrency by setting the <ph id="ph1">`Version`</ph> flag on the <ph id="ph2">`SystemProperties`</ph> of the table as follows.</source>
          <target state="new">Applications using untyped tables enable optimistic concurrency by setting the <ph id="ph1">`Version`</ph> flag on the <ph id="ph2">`SystemProperties`</ph> of the table as follows.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following code shows how to resolve a write conflict once detected.</source>
          <target state="new">The following code shows how to resolve a write conflict once detected.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The correct <ph id="ph1">`__version`</ph> value must be included in the <ph id="ph2">`UpdateAsync()`</ph> call to commit a resolution.</source>
          <target state="new">The correct <ph id="ph1">`__version`</ph> value must be included in the <ph id="ph2">`UpdateAsync()`</ph> call to commit a resolution.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Offline Data Sync in Azure Mobile Apps<ept id="p1">](app-service-mobile-offline-data-sync.md)</ept>.</source>
          <target state="new">For more information, see the <bpt id="p1">[</bpt>Offline Data Sync in Azure Mobile Apps<ept id="p1">](app-service-mobile-offline-data-sync.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="binding"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Bind Mobile Apps data to a Windows user interface</source>
          <target state="new"><ph id="ph1">&lt;a name="binding"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Bind Mobile Apps data to a Windows user interface</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This section shows how to display returned data objects using UI elements in a Windows app.</source>
          <target state="new">This section shows how to display returned data objects using UI elements in a Windows app.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>To query incomplete items in <ph id="ph1">`todoTable`</ph> and display it in a very simple list, you can run the following example code to bind the source of the list with a query.</source>
          <target state="new">To query incomplete items in <ph id="ph1">`todoTable`</ph> and display it in a very simple list, you can run the following example code to bind the source of the list with a query.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`MobileServiceCollection`</ph> creates a Mobile Apps-aware binding collection.</source>
          <target state="new">Using <ph id="ph1">`MobileServiceCollection`</ph> creates a Mobile Apps-aware binding collection.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Some controls in the managed runtime support an interface called <bpt id="p1">[</bpt>ISupportIncrementalLoading<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</source>
          <target state="new">Some controls in the managed runtime support an interface called <bpt id="p1">[</bpt>ISupportIncrementalLoading<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This interface allows controls to request extra data when the user scrolls.</source>
          <target state="new">This interface allows controls to request extra data when the user scrolls.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>There is built-in support for this interface for universal Windows 8.1 apps via <ph id="ph1">`MobileServiceIncrementalLoadingCollection`</ph>, which automatically handles the calls from the controls.</source>
          <target state="new">There is built-in support for this interface for universal Windows 8.1 apps via <ph id="ph1">`MobileServiceIncrementalLoadingCollection`</ph>, which automatically handles the calls from the controls.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`MobileServiceIncrementalLoadingCollection`</ph> in Windows apps, do the following:</source>
          <target state="new">To use <ph id="ph1">`MobileServiceIncrementalLoadingCollection`</ph> in Windows apps, do the following:</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>To use the new collection on Windows Phone 8 and "Silverlight" apps, use the <ph id="ph1">`ToCollection`</ph> extension methods on <ph id="ph2">`IMobileServiceTableQuery&lt;T&gt;`</ph> and <ph id="ph3">`IMobileServiceTable&lt;T&gt;`</ph>.</source>
          <target state="new">To use the new collection on Windows Phone 8 and "Silverlight" apps, use the <ph id="ph1">`ToCollection`</ph> extension methods on <ph id="ph2">`IMobileServiceTableQuery&lt;T&gt;`</ph> and <ph id="ph3">`IMobileServiceTable&lt;T&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>To actually load data, call <ph id="ph1">`LoadMoreItemsAsync()`</ph>.</source>
          <target state="new">To actually load data, call <ph id="ph1">`LoadMoreItemsAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>When you use the collection created by calling <ph id="ph1">`ToCollectionAsync`</ph> or <ph id="ph2">`ToCollection`</ph>, you get a collection which can be bound to UI controls.</source>
          <target state="new">When you use the collection created by calling <ph id="ph1">`ToCollectionAsync`</ph> or <ph id="ph2">`ToCollection`</ph>, you get a collection which can be bound to UI controls.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This collection is paging-aware, i.e., a control can ask the collection to "load more items", and the collection will do it for the control.</source>
          <target state="new">This collection is paging-aware, i.e., a control can ask the collection to "load more items", and the collection will do it for the control.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>At that point there is no user code involved, the control will start the flow.</source>
          <target state="new">At that point there is no user code involved, the control will start the flow.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>However, since the collection is loading data from the network, it's expected that some times this loading will fail.</source>
          <target state="new">However, since the collection is loading data from the network, it's expected that some times this loading will fail.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To handle such failures, you may override the <ph id="ph1">`OnException`</ph> method on <ph id="ph2">`MobileServiceIncrementalLoadingCollection`</ph> to handle exceptions resulting from calls to <ph id="ph3">`LoadMoreItemsAsync`</ph> performed by controls.</source>
          <target state="new">To handle such failures, you may override the <ph id="ph1">`OnException`</ph> method on <ph id="ph2">`MobileServiceIncrementalLoadingCollection`</ph> to handle exceptions resulting from calls to <ph id="ph3">`LoadMoreItemsAsync`</ph> performed by controls.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Finally, imagine that your table has many fields, but you only want to display some of them in your control.</source>
          <target state="new">Finally, imagine that your table has many fields, but you only want to display some of them in your control.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You may use the guidance in the section "<bpt id="p1">[</bpt>Select specific columns<ept id="p1">](#selecting)</ept>" above to select specific columns to display in the UI.</source>
          <target state="new">You may use the guidance in the section "<bpt id="p1">[</bpt>Select specific columns<ept id="p1">](#selecting)</ept>" above to select specific columns to display in the UI.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="package-sid"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Obtain a Windows Store package SID</source>
          <target state="new"><ph id="ph1">&lt;a name="package-sid"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Obtain a Windows Store package SID</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>For Windows apps, a package SID is needed for enabling push notifications and certain authentication modes.</source>
          <target state="new">For Windows apps, a package SID is needed for enabling push notifications and certain authentication modes.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>To obtain this value:</source>
          <target state="new">To obtain this value:</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>In Visual Studio Solution Explorer, right-click the Windows Store app project, click <bpt id="p1">**</bpt>Store<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>Associate App with the Store...<ept id="p2">**</ept>.</source>
          <target state="new">In Visual Studio Solution Explorer, right-click the Windows Store app project, click <bpt id="p1">**</bpt>Store<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>Associate App with the Store...<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In the wizard, click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>, sign in with your Microsoft account, type a name for your app in <bpt id="p2">**</bpt>Reserve a new app name<ept id="p2">**</ept>, then click <bpt id="p3">**</bpt>Reserve<ept id="p3">**</ept>.</source>
          <target state="new">In the wizard, click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>, sign in with your Microsoft account, type a name for your app in <bpt id="p2">**</bpt>Reserve a new app name<ept id="p2">**</ept>, then click <bpt id="p3">**</bpt>Reserve<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>After the app registration is successfully created, select the new app name, click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Associate<ept id="p2">**</ept>.</source>
          <target state="new">After the app registration is successfully created, select the new app name, click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Associate<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>This adds the required Windows Store registration information to the application manifest.</source>
          <target state="new">This adds the required Windows Store registration information to the application manifest.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Log into the <bpt id="p1">[</bpt>Windows Dev Center<ept id="p1">](https://dev.windows.com/en-us/overview)</ept> using your Microsoft Account.</source>
          <target state="new">Log into the <bpt id="p1">[</bpt>Windows Dev Center<ept id="p1">](https://dev.windows.com/en-us/overview)</ept> using your Microsoft Account.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>My apps<ept id="p1">**</ept>, click the app registration you just created.</source>
          <target state="new">Under <bpt id="p1">**</bpt>My apps<ept id="p1">**</ept>, click the app registration you just created.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>App management<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>App identity<ept id="p2">**</ept>, and then scroll down to find your <bpt id="p3">**</bpt>Package SID<ept id="p3">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>App management<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>App identity<ept id="p2">**</ept>, and then scroll down to find your <bpt id="p3">**</bpt>Package SID<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Many uses of the package SID treat it as a URI, in which case you will need to use <bpt id="p1">_</bpt>ms-app://<ept id="p1">_</ept> as the scheme.</source>
          <target state="new">Many uses of the package SID treat it as a URI, in which case you will need to use <bpt id="p1">_</bpt>ms-app://<ept id="p1">_</ept> as the scheme.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Make note of the version of your package SID formed by concatenating this value as a prefix.</source>
          <target state="new">Make note of the version of your package SID formed by concatenating this value as a prefix.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="errors"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Handle errors</source>
          <target state="new"><ph id="ph1">&lt;a name="errors"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Handle errors</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The following example shows you how to handle an exception that is returned by the backend:</source>
          <target state="new">The following example shows you how to handle an exception that is returned by the backend:</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="unit-testing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Design unit tests</source>
          <target state="new"><ph id="ph1">&lt;a name="unit-testing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Design unit tests</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`MobileServiceClient.GetTable`</ph> and the queries are interfaces.</source>
          <target state="new">The value returned by <ph id="ph1">`MobileServiceClient.GetTable`</ph> and the queries are interfaces.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>That makes them easily "mockable" for testing purposes, so you could create a <ph id="ph1">`MyMockTable : IMobileServiceTable&lt;TodoItem&gt;`</ph> that implements your testing logic.</source>
          <target state="new">That makes them easily "mockable" for testing purposes, so you could create a <ph id="ph1">`MyMockTable : IMobileServiceTable&lt;TodoItem&gt;`</ph> that implements your testing logic.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="customizing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize the client</source>
          <target state="new"><ph id="ph1">&lt;a name="customizing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize the client</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This section shows ways in which you can customize the request headers and customize the serialization of JSON objects in the response.</source>
          <target state="new">This section shows ways in which you can customize the request headers and customize the serialization of JSON objects in the response.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="headers"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize request headers</source>
          <target state="new"><ph id="ph1">&lt;a name="headers"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize request headers</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>To support your specific app scenario, you might need to customize communication with the Mobile App backend.</source>
          <target state="new">To support your specific app scenario, you might need to customize communication with the Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For example, you may want to add a custom header to every outgoing request or even change responses status codes.</source>
          <target state="new">For example, you may want to add a custom header to every outgoing request or even change responses status codes.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>You can do this by providing a custom <bpt id="p1">[</bpt><ept id="p1">DelegatingHandler]</ept>, as in the following example:</source>
          <target state="new">You can do this by providing a custom <bpt id="p1">[</bpt><ept id="p1">DelegatingHandler]</ept>, as in the following example:</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This code adds a new <bpt id="p1">**</bpt>x-my-header<ept id="p1">**</ept> header in the request and arbitrarily sets the response code to unavailable.</source>
          <target state="new">This code adds a new <bpt id="p1">**</bpt>x-my-header<ept id="p1">**</ept> header in the request and arbitrarily sets the response code to unavailable.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In a real-world scenario, you would set the response status code based on some custom logic required by your app.</source>
          <target state="new">In a real-world scenario, you would set the response status code based on some custom logic required by your app.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="serialization"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize serialization</source>
          <target state="new"><ph id="ph1">&lt;a name="serialization"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize serialization</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The Mobile Apps client library uses Json.NET to convert a JSON response into .NET objects on the client.</source>
          <target state="new">The Mobile Apps client library uses Json.NET to convert a JSON response into .NET objects on the client.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>You can configure the behavior of this serialization between .NET types and JSON in the messages.</source>
          <target state="new">You can configure the behavior of this serialization between .NET types and JSON in the messages.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ept id="p1">MobileServiceClient]</ept> class exposes a <ph id="ph1">`SerializerSettings`</ph> property of type <bpt id="p2">[</bpt>JsonSerializerSettings<ept id="p2">](http://james.newtonking.com/projects/json/help/?topic=html/T_Newtonsoft_Json_JsonSerializerSettings.htm)</ept></source>
          <target state="new">The <bpt id="p1">[</bpt><ept id="p1">MobileServiceClient]</ept> class exposes a <ph id="ph1">`SerializerSettings`</ph> property of type <bpt id="p2">[</bpt>JsonSerializerSettings<ept id="p2">](http://james.newtonking.com/projects/json/help/?topic=html/T_Newtonsoft_Json_JsonSerializerSettings.htm)</ept></target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Using this property, you may set one of the many Json.NET properties, such as the following:</source>
          <target state="new">Using this property, you may set one of the many Json.NET properties, such as the following:</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>This property converts all properties to lower case during serialization.</source>
          <target state="new">This property converts all properties to lower case during serialization.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>