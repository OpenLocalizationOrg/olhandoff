<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pl-pl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">283acca0ac978266477cd89a563a7e2369641b96</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Send interactive messages from simulated device</source>
          <target state="new">Send interactive messages from simulated device</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you'll modify the simulated device application to send interactive device-to-cloud messages to the IoT hub.</source>
          <target state="new">In this section, you'll modify the simulated device application to send interactive device-to-cloud messages to the IoT hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Visual Studio, in the <bpt id="p1">**</bpt>SimulatedDevice<ept id="p1">**</ept> project, add the following method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class.</source>
          <target state="new">In Visual Studio, in the <bpt id="p1">**</bpt>SimulatedDevice<ept id="p1">**</ept> project, add the following method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This method is very similar to the <ph id="ph1">`SendDeviceToCloudMessagesAsync()`</ph> method that was created in the <bpt id="p1">[</bpt><ept id="p1">Get started with IoT Hub]</ept>, the only differences being that the <ph id="ph2">`MessageId`</ph> system property, and a user property called <ph id="ph3">`messageType`</ph> are now set.</source>
          <target state="new">This method is very similar to the <ph id="ph1">`SendDeviceToCloudMessagesAsync()`</ph> method that was created in the <bpt id="p1">[</bpt><ept id="p1">Get started with IoT Hub]</ept>, the only differences being that the <ph id="ph2">`MessageId`</ph> system property, and a user property called <ph id="ph3">`messageType`</ph> are now set.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MessageId`</ph> property is set to a globally unique id (guid), that will be used to deduplicate message receives.</source>
          <target state="new">The <ph id="ph1">`MessageId`</ph> property is set to a globally unique id (guid), that will be used to deduplicate message receives.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`messageType`</ph> property is used to distinguish interactive from data point messages.</source>
          <target state="new">The <ph id="ph1">`messageType`</ph> property is used to distinguish interactive from data point messages.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This information is passed in message properties, instead that in the message body, so that the event processor in the back end does not have to deserialize the whole message just to perform routing.</source>
          <target state="new">This information is passed in message properties, instead that in the message body, so that the event processor in the back end does not have to deserialize the whole message just to perform routing.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> It is important that the <ph id="ph2">`MessageId`</ph>, used to deduplicate interactive messages, be created in the device, as intermittent network communications (or other failures) could result in multiple retrasmissions of the same message from the device.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> It is important that the <ph id="ph2">`MessageId`</ph>, used to deduplicate interactive messages, be created in the device, as intermittent network communications (or other failures) could result in multiple retrasmissions of the same message from the device.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A semantic message id (e.g. a hash of the relevant message data fields) could also be used, as opposed to a guid.</source>
          <target state="new">A semantic message id (e.g. a hash of the relevant message data fields) could also be used, as opposed to a guid.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add the following method in the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method right before the <ph id="ph1">`Console.ReadLine()`</ph> line:</source>
          <target state="new">Add the following method in the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method right before the <ph id="ph1">`Console.ReadLine()`</ph> line:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> For simplicity's sake, this tutorial does not implement any retry policy.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> For simplicity's sake, this tutorial does not implement any retry policy.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In production code, it is reccommended to implement retry policies (such as exponential backoff), as suggested in the MSDN article [Transient Fault Handling].</source>
          <target state="new">In production code, it is reccommended to implement retry policies (such as exponential backoff), as suggested in the MSDN article [Transient Fault Handling].</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>