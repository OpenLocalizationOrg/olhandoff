<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pl-pl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98f5f71fe24b84c3336b93ae87d50bfe787550b0</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create a simulated device app</source>
          <target state="new">Create a simulated device app</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you'll create a Node.js console app that simulates a device that sends device-to-cloud messages to an IoT hub.</source>
          <target state="new">In this section, you'll create a Node.js console app that simulates a device that sends device-to-cloud messages to an IoT hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create a new empty folder called <bpt id="p1">**</bpt>simulateddevice<ept id="p1">**</ept>.</source>
          <target state="new">Create a new empty folder called <bpt id="p1">**</bpt>simulateddevice<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>simulateddevice<ept id="p1">**</ept> folder, create a new package.json file using the following command at your command-prompt.</source>
          <target state="new">In the <bpt id="p1">**</bpt>simulateddevice<ept id="p1">**</ept> folder, create a new package.json file using the following command at your command-prompt.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Accept all the defaults:</source>
          <target state="new">Accept all the defaults:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>At your command-prompt in the <bpt id="p1">**</bpt>simulateddevice<ept id="p1">**</ept> folder, run the following command to install the <bpt id="p2">**</bpt>azure-iot-device-amqp<ept id="p2">**</ept> package:</source>
          <target state="new">At your command-prompt in the <bpt id="p1">**</bpt>simulateddevice<ept id="p1">**</ept> folder, run the following command to install the <bpt id="p2">**</bpt>azure-iot-device-amqp<ept id="p2">**</ept> package:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using a text editor, create a new <bpt id="p1">**</bpt>SimulatedDevice.js<ept id="p1">**</ept> file in the <bpt id="p2">**</bpt>simulateddevice<ept id="p2">**</ept> folder.</source>
          <target state="new">Using a text editor, create a new <bpt id="p1">**</bpt>SimulatedDevice.js<ept id="p1">**</ept> file in the <bpt id="p2">**</bpt>simulateddevice<ept id="p2">**</ept> folder.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`require`</ph> statements at the start of the <bpt id="p1">**</bpt>SimulatedDevice.js<ept id="p1">**</ept> file:</source>
          <target state="new">Add the following <ph id="ph1">`require`</ph> statements at the start of the <bpt id="p1">**</bpt>SimulatedDevice.js<ept id="p1">**</ept> file:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>connectionString<ept id="p1">**</ept> variable and use it to create a device client.</source>
          <target state="new">Add a <bpt id="p1">**</bpt>connectionString<ept id="p1">**</ept> variable and use it to create a device client.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Replace <bpt id="p1">**</bpt>{youriothubname}<ept id="p1">**</ept> with your IoT hub name, and <bpt id="p2">**</bpt>{yourdeviceid}<ept id="p2">**</ept> and <bpt id="p3">**</bpt>{yourdevicekey}<ept id="p3">**</ept> with the device values you generated in the <bpt id="p4">*</bpt>Create a device identity<ept id="p4">*</ept> section:</source>
          <target state="new">Replace <bpt id="p1">**</bpt>{youriothubname}<ept id="p1">**</ept> with your IoT hub name, and <bpt id="p2">**</bpt>{yourdeviceid}<ept id="p2">**</ept> and <bpt id="p3">**</bpt>{yourdevicekey}<ept id="p3">**</ept> with the device values you generated in the <bpt id="p4">*</bpt>Create a device identity<ept id="p4">*</ept> section:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Add the following function to display output from the application:</source>
          <target state="new">Add the following function to display output from the application:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a callback and use the <bpt id="p1">**</bpt>setInterval<ept id="p1">**</ept> function to send a new message to your IoT hub every second:</source>
          <target state="new">Create a callback and use the <bpt id="p1">**</bpt>setInterval<ept id="p1">**</ept> function to send a new message to your IoT hub every second:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open the connection to your IoT Hub and start sending messages:</source>
          <target state="new">Open the connection to your IoT Hub and start sending messages:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Save and close the <bpt id="p1">**</bpt>SimulatedDevice.js<ept id="p1">**</ept> file.</source>
          <target state="new">Save and close the <bpt id="p1">**</bpt>SimulatedDevice.js<ept id="p1">**</ept> file.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To keep things simple, this tutorial does not implement any retry policy.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To keep things simple, this tutorial does not implement any retry policy.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In production code, you should implement retry policies (such as an exponential backoff), as suggested in the MSDN article <bpt id="p1">[</bpt>Transient Fault Handling<ept id="p1">][lnk-transient-faults]</ept>.</source>
          <target state="new">In production code, you should implement retry policies (such as an exponential backoff), as suggested in the MSDN article <bpt id="p1">[</bpt>Transient Fault Handling<ept id="p1">][lnk-transient-faults]</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>