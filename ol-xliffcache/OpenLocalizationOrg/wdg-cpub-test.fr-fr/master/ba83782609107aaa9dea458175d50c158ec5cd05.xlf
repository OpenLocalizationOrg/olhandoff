<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba83782609107aaa9dea458175d50c158ec5cd05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\winrt-components\walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating a Simple Windows Runtime component and calling it from JavaScript</source>
          <target state="new">Creating a Simple Windows Runtime component and calling it from JavaScript</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This walkthrough shows how you can use the .NET Framework with Visual Basic or C# to create your own Windows Runtime types, packaged in a Windows Runtime component, and how to call the component from your Universal Windows app built for Windows using JavaScript.</source>
          <target state="new">This walkthrough shows how you can use the .NET Framework with Visual Basic or C# to create your own Windows Runtime types, packaged in a Windows Runtime component, and how to call the component from your Universal Windows app built for Windows using JavaScript.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Simple Windows Runtime component and calling it from JavaScript</source>
          <target state="new">Walkthrough: Creating a Simple Windows Runtime component and calling it from JavaScript</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target state="new">\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
          <target state="new">Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This walkthrough shows how you can use the .NET Framework with Visual Basic or C# to create your own Windows Runtime types, packaged in a Windows Runtime component, and how to call the component from your Universal Windows app built for Windows using JavaScript.</source>
          <target state="new">This walkthrough shows how you can use the .NET Framework with Visual Basic or C# to create your own Windows Runtime types, packaged in a Windows Runtime component, and how to call the component from your Universal Windows app built for Windows using JavaScript.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Visual Studio makes it easy to add a Windows Runtime component written with C# or Visual Basic to your app, and to create Windows Runtime types that you can call from JavaScript.</source>
          <target state="new">Visual Studio makes it easy to add a Windows Runtime component written with C# or Visual Basic to your app, and to create Windows Runtime types that you can call from JavaScript.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Internally, your Windows Runtime types can use any .NET Framework functionality that's allowed in a Universal Windows app.</source>
          <target state="new">Internally, your Windows Runtime types can use any .NET Framework functionality that's allowed in a Universal Windows app.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept> and <bpt id="p2">[</bpt>.NET for Windows Store apps overview<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/mt185501.aspx)</ept>.) Externally, the members of your type can expose only Windows Runtime types for their parameters and return values.</source>
          <target state="new">(For more information, see <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept> and <bpt id="p2">[</bpt>.NET for Windows Store apps overview<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/mt185501.aspx)</ept>.) Externally, the members of your type can expose only Windows Runtime types for their parameters and return values.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you build your solution, Visual Studio builds your .NET Framework Windows Runtime Component project and then executes a build step that creates a Windows metadata (.winmd) file.</source>
          <target state="new">When you build your solution, Visual Studio builds your .NET Framework Windows Runtime Component project and then executes a build step that creates a Windows metadata (.winmd) file.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is your Windows Runtime component, which Visual Studio includes in your app.</source>
          <target state="new">This is your Windows Runtime component, which Visual Studio includes in your app.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The .NET Framework automatically maps some commonly used .NET Framework types, such as primitive data types and collection types, to their Windows Runtime equivalents.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The .NET Framework automatically maps some commonly used .NET Framework types, such as primitive data types and collection types, to their Windows Runtime equivalents.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These .NET Framework types can be used in the public interface of a Windows Runtime component, and will appear to users of the component as the corresponding Windows Runtime types.</source>
          <target state="new">These .NET Framework types can be used in the public interface of a Windows Runtime component, and will appear to users of the component as the corresponding Windows Runtime types.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This walkthrough illustrates the following tasks.</source>
          <target state="new">This walkthrough illustrates the following tasks.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After you've completed the first section, which sets up the Windows app with JavaScript, you can complete the remaining sections in any order.</source>
          <target state="new">After you've completed the first section, which sets up the Windows app with JavaScript, you can complete the remaining sections in any order.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Prerequisites:</source>
          <target state="new">Prerequisites:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows 10</source>
          <target state="new">Windows 10</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Microsoft Visual Studio 2015 or Microsoft Visual Studio Community 2015</source>
          <target state="new">Microsoft Visual Studio 2015 or Microsoft Visual Studio Community 2015</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creating a simple Windows Runtime class</source>
          <target state="new">Creating a simple Windows Runtime class</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This section creates a Universal Windows app built for Windows using JavaScript, and adds a Visual Basic or C# Windows Runtime Component project.</source>
          <target state="new">This section creates a Universal Windows app built for Windows using JavaScript, and adds a Visual Basic or C# Windows Runtime Component project.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It shows how to define a managed Windows Runtime type, create an instance of the type from JavaScript, and call static and instance members.</source>
          <target state="new">It shows how to define a managed Windows Runtime type, create an instance of the type from JavaScript, and call static and instance members.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The visual display of the example app is deliberately dull to keep the focus on the component.</source>
          <target state="new">The visual display of the example app is deliberately dull to keep the focus on the component.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Feel free to make it prettier.</source>
          <target state="new">Feel free to make it prettier.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In Visual Studio, create a new JavaScript project: On the menu bar, choose <bpt id="p1">**</bpt>File, New, Project<ept id="p1">**</ept>.</source>
          <target state="new">In Visual Studio, create a new JavaScript project: On the menu bar, choose <bpt id="p1">**</bpt>File, New, Project<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>New Project<ept id="p2">**</ept> dialog box, choose <bpt id="p3">**</bpt>JavaScript<ept id="p3">**</ept>, and then choose <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>, and then <bpt id="p5">**</bpt>Universal<ept id="p5">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>New Project<ept id="p2">**</ept> dialog box, choose <bpt id="p3">**</bpt>JavaScript<ept id="p3">**</ept>, and then choose <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>, and then <bpt id="p5">**</bpt>Universal<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>(If Windows is not available, make sure you're using Windows 8 or later.) Choose the <bpt id="p1">**</bpt>Blank Application<ept id="p1">**</ept> template and enter SampleApp for the project name.</source>
          <target state="new">(If Windows is not available, make sure you're using Windows 8 or later.) Choose the <bpt id="p1">**</bpt>Blank Application<ept id="p1">**</ept> template and enter SampleApp for the project name.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Create the component project: In Solution Explorer, open the shortcut menu for the SampleApp solution and choose <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>New Project<ept id="p2">**</ept> to add a new C# or Visual Basic project to the solution.</source>
          <target state="new">Create the component project: In Solution Explorer, open the shortcut menu for the SampleApp solution and choose <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>New Project<ept id="p2">**</ept> to add a new C# or Visual Basic project to the solution.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>Add New Project<ept id="p2">**</ept> dialog box, choose <bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Visual C#<ept id="p4">**</ept>, and then choose <bpt id="p5">**</bpt>Windows<ept id="p5">**</ept>, and then <bpt id="p6">**</bpt>Universal<ept id="p6">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>Add New Project<ept id="p2">**</ept> dialog box, choose <bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Visual C#<ept id="p4">**</ept>, and then choose <bpt id="p5">**</bpt>Windows<ept id="p5">**</ept>, and then <bpt id="p6">**</bpt>Universal<ept id="p6">**</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Windows Runtime Component<ept id="p1">**</ept> template and enter <bpt id="p2">**</bpt>SampleComponent<ept id="p2">**</ept> for the project name.</source>
          <target state="new">Choose the <bpt id="p1">**</bpt>Windows Runtime Component<ept id="p1">**</ept> template and enter <bpt id="p2">**</bpt>SampleComponent<ept id="p2">**</ept> for the project name.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Change the name of the class to <bpt id="p1">**</bpt>Example<ept id="p1">**</ept>.</source>
          <target state="new">Change the name of the class to <bpt id="p1">**</bpt>Example<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Notice that by default, the class is marked <bpt id="p1">**</bpt>public sealed<ept id="p1">**</ept> (<bpt id="p2">**</bpt>Public NotInheritable<ept id="p2">**</ept> in Visual Basic).</source>
          <target state="new">Notice that by default, the class is marked <bpt id="p1">**</bpt>public sealed<ept id="p1">**</ept> (<bpt id="p2">**</bpt>Public NotInheritable<ept id="p2">**</ept> in Visual Basic).</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>All the Windows Runtime classes you expose from your component must be sealed.</source>
          <target state="new">All the Windows Runtime classes you expose from your component must be sealed.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Add two simple members to the class, a <bpt id="p1">**</bpt>static<ept id="p1">**</ept> method (<bpt id="p2">**</bpt>Shared<ept id="p2">**</ept> method in Visual Basic) and an instance property:</source>
          <target state="new">Add two simple members to the class, a <bpt id="p1">**</bpt>static<ept id="p1">**</ept> method (<bpt id="p2">**</bpt>Shared<ept id="p2">**</ept> method in Visual Basic) and an instance property:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Optional: To enable IntelliSense for the newly added members, in Solution Explorer, open the shortcut menu for the SampleComponent project, and then choose <bpt id="p1">**</bpt>Build<ept id="p1">**</ept>.</source>
          <target state="new">Optional: To enable IntelliSense for the newly added members, in Solution Explorer, open the shortcut menu for the SampleComponent project, and then choose <bpt id="p1">**</bpt>Build<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, in the JavaScript project, open the shortcut menu for <bpt id="p1">**</bpt>References<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept> to open the <bpt id="p3">**</bpt>Reference Manager<ept id="p3">**</ept>.</source>
          <target state="new">In Solution Explorer, in the JavaScript project, open the shortcut menu for <bpt id="p1">**</bpt>References<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept> to open the <bpt id="p3">**</bpt>Reference Manager<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>Solution<ept id="p2">**</ept>.</source>
          <target state="new">Choose <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>Solution<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Select the check box for the SampleComponent project and choose <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to add a reference.</source>
          <target state="new">Select the check box for the SampleComponent project and choose <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to add a reference.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Call the component from JavaScript</source>
          <target state="new">Call the component from JavaScript</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To use the Windows Runtime type from JavaScript, add the following code in the anonymous function in the default.js file (in the js folder of the project) that is provided by the Visual Studio template.</source>
          <target state="new">To use the Windows Runtime type from JavaScript, add the following code in the anonymous function in the default.js file (in the js folder of the project) that is provided by the Visual Studio template.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It should go after the app.oncheckpoint event handler and before the call to app.start.</source>
          <target state="new">It should go after the app.oncheckpoint event handler and before the call to app.start.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Notice that the first letter of each member name is changed from uppercase to lowercase.</source>
          <target state="new">Notice that the first letter of each member name is changed from uppercase to lowercase.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This transformation is part of the support that JavaScript provides to enable the natural use of the Windows Runtime.</source>
          <target state="new">This transformation is part of the support that JavaScript provides to enable the natural use of the Windows Runtime.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Namespaces and class names are Pascal-cased.</source>
          <target state="new">Namespaces and class names are Pascal-cased.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Member names are camel-cased except for event names, which are all lowercase.</source>
          <target state="new">Member names are camel-cased except for event names, which are all lowercase.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Using the Windows Runtime in JavaScript<ept id="p1">](https://msdn.microsoft.com/library/hh710230.aspx)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Using the Windows Runtime in JavaScript<ept id="p1">](https://msdn.microsoft.com/library/hh710230.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The rules for camel casing can be confusing.</source>
          <target state="new">The rules for camel casing can be confusing.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A series of initial uppercase letters normally appears as lowercase, but if three uppercase letters are followed by a lowercase letter, only the first two letters appear in lowercase: for example, a member named IDStringKind appears as idStringKind.</source>
          <target state="new">A series of initial uppercase letters normally appears as lowercase, but if three uppercase letters are followed by a lowercase letter, only the first two letters appear in lowercase: for example, a member named IDStringKind appears as idStringKind.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In Visual Studio, you can build your Windows Runtime component project and then use IntelliSense in your JavaScript project to see the correct casing.</source>
          <target state="new">In Visual Studio, you can build your Windows Runtime component project and then use IntelliSense in your JavaScript project to see the correct casing.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In similar fashion, the .NET Framework provides support to enable the natural use of the Windows Runtime in managed code.</source>
          <target state="new">In similar fashion, the .NET Framework provides support to enable the natural use of the Windows Runtime in managed code.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is discussed in subsequent sections of this article, and in the articles <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept> and <bpt id="p2">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p2">](https://msdn.microsoft.com/library/hh694558.aspx)</ept>.</source>
          <target state="new">This is discussed in subsequent sections of this article, and in the articles <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept> and <bpt id="p2">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p2">](https://msdn.microsoft.com/library/hh694558.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create a simple user interface</source>
          <target state="new">Create a simple user interface</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In your JavaScript project, open the default.html file and update the body as shown in the following code.</source>
          <target state="new">In your JavaScript project, open the default.html file and update the body as shown in the following code.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This code includes the complete set of controls for the example app and specifies the function names for the click events.</source>
          <target state="new">This code includes the complete set of controls for the example app and specifies the function names for the click events.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  When you first run the app, only the Basics1 and Basics2 button are supported.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  When you first run the app, only the Basics1 and Basics2 button are supported.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In your JavaScript project, in the css folder, open default.css.</source>
          <target state="new">In your JavaScript project, in the css folder, open default.css.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Modify the body section as shown, and add styles to control the layout of buttons and the placement of output text.</source>
          <target state="new">Modify the body section as shown, and add styles to control the layout of buttons and the placement of output text.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Now add the event listener registration code by adding a then clause to the processAll call in app.onactivated in default.js.</source>
          <target state="new">Now add the event listener registration code by adding a then clause to the processAll call in app.onactivated in default.js.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Replace the existing line of code that calls setPromise and change it to the following code:</source>
          <target state="new">Replace the existing line of code that calls setPromise and change it to the following code:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This is a better way to add events to HTML controls than adding a click event handler directly in HTML.</source>
          <target state="new">This is a better way to add events to HTML controls than adding a click event handler directly in HTML.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Create a "Hello World" app (JS)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt280216)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Create a "Hello World" app (JS)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt280216)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Build and run the app</source>
          <target state="new">Build and run the app</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Before you build, change the target platform for all projects to ARM, x64, or x86, as appropriate for your computer.</source>
          <target state="new">Before you build, change the target platform for all projects to ARM, x64, or x86, as appropriate for your computer.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To build and run the solution, choose the F5 key.</source>
          <target state="new">To build and run the solution, choose the F5 key.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>(If you get a run-time error message stating that SampleComponent is undefined, the reference to the class library project is missing.)</source>
          <target state="new">(If you get a run-time error message stating that SampleComponent is undefined, the reference to the class library project is missing.)</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Visual Studio first compiles the class library, and then executes an MSBuild task that runs <bpt id="p1">[</bpt>Winmdexp.exe (Windows Runtime Metadata Export Tool)<ept id="p1">](https://msdn.microsoft.com/library/hh925576.aspx)</ept> to create your Windows Runtime component.</source>
          <target state="new">Visual Studio first compiles the class library, and then executes an MSBuild task that runs <bpt id="p1">[</bpt>Winmdexp.exe (Windows Runtime Metadata Export Tool)<ept id="p1">](https://msdn.microsoft.com/library/hh925576.aspx)</ept> to create your Windows Runtime component.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The component is included in a .winmd file that contains both the managed code and the Windows metadata that describes the code.</source>
          <target state="new">The component is included in a .winmd file that contains both the managed code and the Windows metadata that describes the code.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>WinMdExp.exe generates build error messages when you write code that's invalid in a Windows Runtime component, and the error messages are displayed in the Visual Studio IDE.</source>
          <target state="new">WinMdExp.exe generates build error messages when you write code that's invalid in a Windows Runtime component, and the error messages are displayed in the Visual Studio IDE.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Visual Studio adds your component to the app package (.appx file) for your Universal Windows app, and generates the appropriate manifest.</source>
          <target state="new">Visual Studio adds your component to the app package (.appx file) for your Universal Windows app, and generates the appropriate manifest.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Choose the Basics 1 button to assign the return value from the static GetAnswer method to the output area, create an instance of the Example class, and display the value of its SampleProperty property in the output area.</source>
          <target state="new">Choose the Basics 1 button to assign the return value from the static GetAnswer method to the output area, create an instance of the Example class, and display the value of its SampleProperty property in the output area.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The output is shown here:</source>
          <target state="new">The output is shown here:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Choose the Basics 2 button to increment the value of the SampleProperty property and to display the new value in the output area.</source>
          <target state="new">Choose the Basics 2 button to increment the value of the SampleProperty property and to display the new value in the output area.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Primitive types such as strings and numbers can be used as parameter types and return types, and can be passed between managed code and JavaScript.</source>
          <target state="new">Primitive types such as strings and numbers can be used as parameter types and return types, and can be passed between managed code and JavaScript.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Because numbers in JavaScript are stored in double-precision floating-point format, they are converted to .NET Framework numeric types.</source>
          <target state="new">Because numbers in JavaScript are stored in double-precision floating-point format, they are converted to .NET Framework numeric types.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  By default, you can set breakpoints only in your JavaScript code.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  By default, you can set breakpoints only in your JavaScript code.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To debug your Visual Basic or C# code, see Creating Windows Runtime Components in C# and Visual Basic.</source>
          <target state="new">To debug your Visual Basic or C# code, see Creating Windows Runtime Components in C# and Visual Basic.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To stop debugging and close your app, switch from the app to Visual Studio, and choose Shift+F5.</source>
          <target state="new">To stop debugging and close your app, switch from the app to Visual Studio, and choose Shift+F5.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Using the Windows Runtime from JavaScript and managed code</source>
          <target state="new">Using the Windows Runtime from JavaScript and managed code</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The Windows Runtime can be called from either JavaScript or managed code.</source>
          <target state="new">The Windows Runtime can be called from either JavaScript or managed code.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Windows Runtime objects can be passed back and forth between the two, and events can be handled from either side.</source>
          <target state="new">Windows Runtime objects can be passed back and forth between the two, and events can be handled from either side.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, the ways you use Windows Runtime types in the two environments differ in some details, because JavaScript and the .NET Framework support the Windows Runtime differently.</source>
          <target state="new">However, the ways you use Windows Runtime types in the two environments differ in some details, because JavaScript and the .NET Framework support the Windows Runtime differently.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following example demonstrates these differences, using the <bpt id="p1">[</bpt>Windows.Foundation.Collections.PropertySet<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.collections.propertyset.aspx)</ept> class.</source>
          <target state="new">The following example demonstrates these differences, using the <bpt id="p1">[</bpt>Windows.Foundation.Collections.PropertySet<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.collections.propertyset.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In this example, you create an instance of the PropertySet collection in managed code and register an event handler to track changes in the collection.</source>
          <target state="new">In this example, you create an instance of the PropertySet collection in managed code and register an event handler to track changes in the collection.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Then you add JavaScript code that gets the collection, registers its own event handler, and uses the collection.</source>
          <target state="new">Then you add JavaScript code that gets the collection, registers its own event handler, and uses the collection.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Finally, you add a method that makes changes to the collection from managed code and shows JavaScript handling a managed exception.</source>
          <target state="new">Finally, you add a method that makes changes to the collection from managed code and shows JavaScript handling a managed exception.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  In this example, the event is being fired on the UI thread.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  In this example, the event is being fired on the UI thread.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If you fire the event from a background thread, for example in an async call, you will need to do some extra work in order for JavaScript to handle the event.</source>
          <target state="new">If you fire the event from a background thread, for example in an async call, you will need to do some extra work in order for JavaScript to handle the event.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Raising Events in Windows Runtime Components<ept id="p1">](raising-events-in-windows-runtime-components.md)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Raising Events in Windows Runtime Components<ept id="p1">](raising-events-in-windows-runtime-components.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In the SampleComponent project, add a new <bpt id="p1">**</bpt>public sealed<ept id="p1">**</ept> class (<bpt id="p2">**</bpt>Public NotInheritable<ept id="p2">**</ept> class in Visual Basic) named PropertySetStats.</source>
          <target state="new">In the SampleComponent project, add a new <bpt id="p1">**</bpt>public sealed<ept id="p1">**</ept> class (<bpt id="p2">**</bpt>Public NotInheritable<ept id="p2">**</ept> class in Visual Basic) named PropertySetStats.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The class wraps a PropertySet collection and handles its MapChanged event.</source>
          <target state="new">The class wraps a PropertySet collection and handles its MapChanged event.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The event handler tracks the number of changes of each kind that occur, and the DisplayStats method produces a report that is formatted in HTML.</source>
          <target state="new">The event handler tracks the number of changes of each kind that occur, and the DisplayStats method produces a report that is formatted in HTML.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Notice the additional <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement (<bpt id="p2">**</bpt>Imports<ept id="p2">**</ept> statement in Visual Basic); be careful to add this to the existing <bpt id="p3">**</bpt>using<ept id="p3">**</ept> statements rather than overwriting them.</source>
          <target state="new">Notice the additional <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement (<bpt id="p2">**</bpt>Imports<ept id="p2">**</ept> statement in Visual Basic); be careful to add this to the existing <bpt id="p3">**</bpt>using<ept id="p3">**</ept> statements rather than overwriting them.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The event handler follows the familiar .NET Framework event pattern, except that the sender of the event (in this case, the PropertySet object) is cast to the IObservableMap<ph id="ph1">&amp;lt;</ph>string, object<ph id="ph2">&amp;gt;</ph> interface (IObservableMap(Of String, Object) in Visual Basic), which is an instantiation of the Windows Runtime interface <bpt id="p1">[</bpt>IObservableMap<ph id="ph3">&amp;lt;</ph>K, V<ph id="ph4">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br226050.aspx)</ept>. (You can cast the sender to its type if necessary.) Also, the event arguments are presented as an interface rather than as an object.</source>
          <target state="new">The event handler follows the familiar .NET Framework event pattern, except that the sender of the event (in this case, the PropertySet object) is cast to the IObservableMap<ph id="ph1">&amp;lt;</ph>string, object<ph id="ph2">&amp;gt;</ph> interface (IObservableMap(Of String, Object) in Visual Basic), which is an instantiation of the Windows Runtime interface <bpt id="p1">[</bpt>IObservableMap<ph id="ph3">&amp;lt;</ph>K, V<ph id="ph4">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br226050.aspx)</ept>. (You can cast the sender to its type if necessary.) Also, the event arguments are presented as an interface rather than as an object.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In the default.js file, add the Runtime1 function as shown.</source>
          <target state="new">In the default.js file, add the Runtime1 function as shown.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This code creates a PropertySetStats object, gets its PropertySet collection, and adds its own event handler, the onMapChanged function, to handle the MapChanged event.</source>
          <target state="new">This code creates a PropertySetStats object, gets its PropertySet collection, and adds its own event handler, the onMapChanged function, to handle the MapChanged event.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>After making changes to the collection, runtime1 calls the DisplayStats method to show a summary of change types.</source>
          <target state="new">After making changes to the collection, runtime1 calls the DisplayStats method to show a summary of change types.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The way you handle Windows Runtime events in JavaScript is very different from the way you handle them in .NET Framework code.</source>
          <target state="new">The way you handle Windows Runtime events in JavaScript is very different from the way you handle them in .NET Framework code.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The JavaScript event handler takes only one argument.</source>
          <target state="new">The JavaScript event handler takes only one argument.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When you view this object in the Visual Studio debugger, the first property is the sender.</source>
          <target state="new">When you view this object in the Visual Studio debugger, the first property is the sender.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The members of the event argument interface also appear directly on this object.</source>
          <target state="new">The members of the event argument interface also appear directly on this object.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To run the app, choose the F5 key.</source>
          <target state="new">To run the app, choose the F5 key.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If the class is not sealed, you get the error message, "Exporting unsealed type 'SampleComponent.Example' is not currently supported.</source>
          <target state="new">If the class is not sealed, you get the error message, "Exporting unsealed type 'SampleComponent.Example' is not currently supported.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Please mark it as sealed."</source>
          <target state="new">Please mark it as sealed."</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Runtime 1<ept id="p1">**</ept> button.</source>
          <target state="new">Choose the <bpt id="p1">**</bpt>Runtime 1<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The event handler displays changes as elements are added or changed, and at the end the DisplayStats method is called to produce a summary of counts.</source>
          <target state="new">The event handler displays changes as elements are added or changed, and at the end the DisplayStats method is called to produce a summary of counts.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To stop debugging and close the app, switch back to Visual Studio and choose Shift+F5.</source>
          <target state="new">To stop debugging and close the app, switch back to Visual Studio and choose Shift+F5.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To add two more items to the PropertySet collection from managed code, add the following code to the PropertySetStats class:</source>
          <target state="new">To add two more items to the PropertySet collection from managed code, add the following code to the PropertySetStats class:</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This code highlights another difference in the way you use Windows Runtime types in the two environments.</source>
          <target state="new">This code highlights another difference in the way you use Windows Runtime types in the two environments.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If you type this code yourself, you'll notice that IntelliSense doesn't show the insert method you used in the JavaScript code.</source>
          <target state="new">If you type this code yourself, you'll notice that IntelliSense doesn't show the insert method you used in the JavaScript code.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Instead, it shows the Add method commonly seen on collections in the .NET Framework.</source>
          <target state="new">Instead, it shows the Add method commonly seen on collections in the .NET Framework.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This is because some commonly used collection interfaces have different names but similar functionality in the Windows Runtime and the .NET Framework.</source>
          <target state="new">This is because some commonly used collection interfaces have different names but similar functionality in the Windows Runtime and the .NET Framework.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When you use these interfaces in managed code, they appear as their .NET Framework equivalents.</source>
          <target state="new">When you use these interfaces in managed code, they appear as their .NET Framework equivalents.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This is discussed in <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept>.</source>
          <target state="new">This is discussed in <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>When you use the same interfaces in JavaScript, the only change from the Windows Runtime is that uppercase letters at the beginning of member names become lowercase.</source>
          <target state="new">When you use the same interfaces in JavaScript, the only change from the Windows Runtime is that uppercase letters at the beginning of member names become lowercase.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Finally, to call the AddMore method with exception handling, add the runtime2 function to default.js.</source>
          <target state="new">Finally, to call the AddMore method with exception handling, add the runtime2 function to default.js.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Add the event handler registration code the same way you did previously.</source>
          <target state="new">Add the event handler registration code the same way you did previously.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To run the app, choose the F5 key.</source>
          <target state="new">To run the app, choose the F5 key.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Runtime 1<ept id="p1">**</ept> and then <bpt id="p2">**</bpt>Runtime 2<ept id="p2">**</ept>.</source>
          <target state="new">Choose <bpt id="p1">**</bpt>Runtime 1<ept id="p1">**</ept> and then <bpt id="p2">**</bpt>Runtime 2<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The JavaScript event handler reports the first change to the collection.</source>
          <target state="new">The JavaScript event handler reports the first change to the collection.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The second change, however, has a duplicate key.</source>
          <target state="new">The second change, however, has a duplicate key.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Users of .NET Framework dictionaries expect the Add method to throw an exception, and that is what happens.</source>
          <target state="new">Users of .NET Framework dictionaries expect the Add method to throw an exception, and that is what happens.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>JavaScript handles the .NET Framework exception.</source>
          <target state="new">JavaScript handles the .NET Framework exception.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You can't display the exception's message from JavaScript code.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You can't display the exception's message from JavaScript code.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The message text is replaced by a stack trace.</source>
          <target state="new">The message text is replaced by a stack trace.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For more information, see "Throwing exceptions" in Creating Windows Runtime Components in C# and Visual Basic.</source>
          <target state="new">For more information, see "Throwing exceptions" in Creating Windows Runtime Components in C# and Visual Basic.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>By contrast, when JavaScript called the insert method with a duplicate key, the value of the item was changed.</source>
          <target state="new">By contrast, when JavaScript called the insert method with a duplicate key, the value of the item was changed.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This difference in behavior is due to the different ways that JavaScript and the .NET Framework support the Windows Runtime, as explained in <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept>.</source>
          <target state="new">This difference in behavior is due to the different ways that JavaScript and the .NET Framework support the Windows Runtime, as explained in <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Returning managed types from your component</source>
          <target state="new">Returning managed types from your component</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>As discussed previously, you can pass native Windows Runtime types back and forth freely between your JavaScript code and your C# or Visual Basic code.</source>
          <target state="new">As discussed previously, you can pass native Windows Runtime types back and forth freely between your JavaScript code and your C# or Visual Basic code.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Most of the time, the type names and member names will be the same in both cases (except that the member names start with lowercase letters in JavaScript).</source>
          <target state="new">Most of the time, the type names and member names will be the same in both cases (except that the member names start with lowercase letters in JavaScript).</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>However, in the preceding section, the PropertySet class appeared to have different members in managed code.</source>
          <target state="new">However, in the preceding section, the PropertySet class appeared to have different members in managed code.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>(For example, in JavaScript you called the insert method, and in the .NET Framework code you called the Add method.) This section explores the way those differences affect .NET Framework types passed to JavaScript.</source>
          <target state="new">(For example, in JavaScript you called the insert method, and in the .NET Framework code you called the Add method.) This section explores the way those differences affect .NET Framework types passed to JavaScript.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In addition to returning Windows Runtime types that you created in your component or passed to your component from JavaScript, you can return a managed type, created in managed code, to JavaScript as if it were the corresponding Windows Runtime type.</source>
          <target state="new">In addition to returning Windows Runtime types that you created in your component or passed to your component from JavaScript, you can return a managed type, created in managed code, to JavaScript as if it were the corresponding Windows Runtime type.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Even in the first, simple example of a runtime class, the parameters and return types of the members were Visual Basic or C# primitive types, which are .NET Framework types.</source>
          <target state="new">Even in the first, simple example of a runtime class, the parameters and return types of the members were Visual Basic or C# primitive types, which are .NET Framework types.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To demonstrate this for collections, add the following code to the Example class, to create a method that returns a generic dictionary of strings, indexed by integers:</source>
          <target state="new">To demonstrate this for collections, add the following code to the Example class, to create a method that returns a generic dictionary of strings, indexed by integers:</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Notice that the dictionary must be returned as an interface that is implemented by <bpt id="p1">[</bpt>Dictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/xfhwa508.aspx)</ept>, and that maps to a Windows Runtime interface.</source>
          <target state="new">Notice that the dictionary must be returned as an interface that is implemented by <bpt id="p1">[</bpt>Dictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/xfhwa508.aspx)</ept>, and that maps to a Windows Runtime interface.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In this case, the interface is IDictionary<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> (IDictionary(Of Integer, String) in Visual Basic).</source>
          <target state="new">In this case, the interface is IDictionary<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> (IDictionary(Of Integer, String) in Visual Basic).</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>When the Windows Runtime type IMap<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> is passed to managed code, it appears as IDictionary<ph id="ph3">&amp;lt;</ph>int, string<ph id="ph4">&amp;gt;</ph>, and the reverse is true when the managed type is passed to JavaScript.</source>
          <target state="new">When the Windows Runtime type IMap<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> is passed to managed code, it appears as IDictionary<ph id="ph3">&amp;lt;</ph>int, string<ph id="ph4">&amp;gt;</ph>, and the reverse is true when the managed type is passed to JavaScript.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  When a managed type implements multiple interfaces, JavaScript uses the interface that appears first in the list.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  When a managed type implements multiple interfaces, JavaScript uses the interface that appears first in the list.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example, if you return Dictionary<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> to JavaScript code, it appears as IDictionary<ph id="ph3">&amp;lt;</ph>int, string<ph id="ph4">&amp;gt;</ph> no matter which interface you specify as the return type.</source>
          <target state="new">For example, if you return Dictionary<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> to JavaScript code, it appears as IDictionary<ph id="ph3">&amp;lt;</ph>int, string<ph id="ph4">&amp;gt;</ph> no matter which interface you specify as the return type.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This means that if the first interface doesn't include a member that appears on later interfaces, that member isn't visible to JavaScript.</source>
          <target state="new">This means that if the first interface doesn't include a member that appears on later interfaces, that member isn't visible to JavaScript.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To test the new method and use the dictionary, add the returns1 and returns2 functions to default.js:</source>
          <target state="new">To test the new method and use the dictionary, add the returns1 and returns2 functions to default.js:</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Add the event registration code to the same then block as the other event registration code:</source>
          <target state="new">Add the event registration code to the same then block as the other event registration code:</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>There are a few interesting things to observe about this JavaScript code.</source>
          <target state="new">There are a few interesting things to observe about this JavaScript code.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>First of all, it includes a showMap function to display the contents of the dictionary in HTML.</source>
          <target state="new">First of all, it includes a showMap function to display the contents of the dictionary in HTML.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>In the code for showMap, notice the iteration pattern.</source>
          <target state="new">In the code for showMap, notice the iteration pattern.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, there's no First method on the generic IDictionary interface, and the size is returned by a Count property rather than by a Size method.</source>
          <target state="new">In the .NET Framework, there's no First method on the generic IDictionary interface, and the size is returned by a Count property rather than by a Size method.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To JavaScript, IDictionary<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> appears to be the Windows Runtime type IMap<ph id="ph3">&amp;lt;</ph>int, string<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="new">To JavaScript, IDictionary<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> appears to be the Windows Runtime type IMap<ph id="ph3">&amp;lt;</ph>int, string<ph id="ph4">&amp;gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>(See the <bpt id="p1">[</bpt>IMap<ph id="ph1">&amp;lt;</ph>K,V<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br226042.aspx)</ept> interface.)</source>
          <target state="new">(See the <bpt id="p1">[</bpt>IMap<ph id="ph1">&amp;lt;</ph>K,V<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br226042.aspx)</ept> interface.)</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In the returns2 function, as in earlier examples, JavaScript calls the Insert method (insert in JavaScript) to add items to the dictionary.</source>
          <target state="new">In the returns2 function, as in earlier examples, JavaScript calls the Insert method (insert in JavaScript) to add items to the dictionary.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>To run the app, choose the F5 key.</source>
          <target state="new">To run the app, choose the F5 key.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To create and display the initial contents of the dictionary, choose the <bpt id="p1">**</bpt>Returns 1<ept id="p1">**</ept> button.</source>
          <target state="new">To create and display the initial contents of the dictionary, choose the <bpt id="p1">**</bpt>Returns 1<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>To add two more entries to the dictionary, choose the <bpt id="p1">**</bpt>Returns 2<ept id="p1">**</ept> button.</source>
          <target state="new">To add two more entries to the dictionary, choose the <bpt id="p1">**</bpt>Returns 2<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Notice that the entries are displayed in order of insertion, as you would expect from Dictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="new">Notice that the entries are displayed in order of insertion, as you would expect from Dictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If you want them sorted, you can return a SortedDictionary<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> from GetMapOfNames.</source>
          <target state="new">If you want them sorted, you can return a SortedDictionary<ph id="ph1">&amp;lt;</ph>int, string<ph id="ph2">&amp;gt;</ph> from GetMapOfNames.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>(The PropertySet class used in earlier examples has a different internal organization from Dictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph>.)</source>
          <target state="new">(The PropertySet class used in earlier examples has a different internal organization from Dictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph>.)</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Of course, JavaScript is not a strongly typed language, so using strongly typed generic collections can lead to some surprising results.</source>
          <target state="new">Of course, JavaScript is not a strongly typed language, so using strongly typed generic collections can lead to some surprising results.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Returns 2<ept id="p1">**</ept> button again.</source>
          <target state="new">Choose the <bpt id="p1">**</bpt>Returns 2<ept id="p1">**</ept> button again.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>JavaScript obligingly coerces the "7" to a numeric 7, and the numeric 7 that's stored in ct to a string.</source>
          <target state="new">JavaScript obligingly coerces the "7" to a numeric 7, and the numeric 7 that's stored in ct to a string.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>And it coerces the string "forty" to zero.</source>
          <target state="new">And it coerces the string "forty" to zero.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>But that's only the beginning.</source>
          <target state="new">But that's only the beginning.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Returns 2<ept id="p1">**</ept> button a few more times.</source>
          <target state="new">Choose the <bpt id="p1">**</bpt>Returns 2<ept id="p1">**</ept> button a few more times.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>In managed code, the Add method would generate duplicate key exceptions, even if the values were cast to the correct types.</source>
          <target state="new">In managed code, the Add method would generate duplicate key exceptions, even if the values were cast to the correct types.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>In contrast, the Insert method updates the value associated with an existing key and returns a Boolean value that indicates whether a new key was added to the dictionary.</source>
          <target state="new">In contrast, the Insert method updates the value associated with an existing key and returns a Boolean value that indicates whether a new key was added to the dictionary.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This is why the value associated with the key 7 keeps changing.</source>
          <target state="new">This is why the value associated with the key 7 keeps changing.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Another unexpected behavior: If you pass an unassigned JavaScript variable as a string argument, what you get is the string "undefined".</source>
          <target state="new">Another unexpected behavior: If you pass an unassigned JavaScript variable as a string argument, what you get is the string "undefined".</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>In short, be careful when you pass .NET Framework collection types to your JavaScript code.</source>
          <target state="new">In short, be careful when you pass .NET Framework collection types to your JavaScript code.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you have large quantities of text to concatenate, you can do it more efficiently by moving the code into a .NET Framework method and using the StringBuilder class, as shown in the showMap function.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you have large quantities of text to concatenate, you can do it more efficiently by moving the code into a .NET Framework method and using the StringBuilder class, as shown in the showMap function.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Although you can't expose your own generic types from a Windows Runtime component, you can return .NET Framework generic collections for Windows Runtime classes by using code such as the following:</source>
          <target state="new">Although you can't expose your own generic types from a Windows Runtime component, you can return .NET Framework generic collections for Windows Runtime classes by using code such as the following:</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> implements IList<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>, which appears as the Windows Runtime type IVector<ph id="ph5">&amp;lt;</ph>T<ph id="ph6">&amp;gt;</ph> in JavaScript.</source>
          <target state="new">List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> implements IList<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>, which appears as the Windows Runtime type IVector<ph id="ph5">&amp;lt;</ph>T<ph id="ph6">&amp;gt;</ph> in JavaScript.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Declaring events</source>
          <target state="new">Declaring events</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>You can declare events by using the standard .NET Framework event pattern or other patterns used by the Windows Runtime.</source>
          <target state="new">You can declare events by using the standard .NET Framework event pattern or other patterns used by the Windows Runtime.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The .NET Framework supports equivalence between the System.EventHandler<ph id="ph1">&amp;lt;</ph>TEventArgs<ph id="ph2">&amp;gt;</ph> delegate and the Windows Runtime EventHandler<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph> delegate, so using EventHandler<ph id="ph5">&amp;lt;</ph>TEventArgs<ph id="ph6">&amp;gt;</ph> is a good way to implement the standard .NET Framework pattern.</source>
          <target state="new">The .NET Framework supports equivalence between the System.EventHandler<ph id="ph1">&amp;lt;</ph>TEventArgs<ph id="ph2">&amp;gt;</ph> delegate and the Windows Runtime EventHandler<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph> delegate, so using EventHandler<ph id="ph5">&amp;lt;</ph>TEventArgs<ph id="ph6">&amp;gt;</ph> is a good way to implement the standard .NET Framework pattern.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>To see how this works, add the following pair of classes to the SampleComponent project:</source>
          <target state="new">To see how this works, add the following pair of classes to the SampleComponent project:</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>When you expose an event in the Windows Runtime, the event argument class inherits from System.Object.</source>
          <target state="new">When you expose an event in the Windows Runtime, the event argument class inherits from System.Object.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>It doesn't inherit from System.EventArgs, as it would in the .NET Framework, because EventArgs is not a Windows Runtime type.</source>
          <target state="new">It doesn't inherit from System.EventArgs, as it would in the .NET Framework, because EventArgs is not a Windows Runtime type.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If you declare custom event accessors for your event (<bpt id="p1">**</bpt>Custom<ept id="p1">**</ept> keyword in Visual Basic), you must use the Windows Runtime event pattern.</source>
          <target state="new">If you declare custom event accessors for your event (<bpt id="p1">**</bpt>Custom<ept id="p1">**</ept> keyword in Visual Basic), you must use the Windows Runtime event pattern.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Custom events and event accessors in Windows Runtime Components<ept id="p1">](custom-events-and-event-accessors-in-windows-runtime-components.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Custom events and event accessors in Windows Runtime Components<ept id="p1">](custom-events-and-event-accessors-in-windows-runtime-components.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>To handle the Test event, add the events1 function to default.js.</source>
          <target state="new">To handle the Test event, add the events1 function to default.js.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The events1 function creates an event handler function for the Test event, and immediately invokes the OnTest method to raise the event.</source>
          <target state="new">The events1 function creates an event handler function for the Test event, and immediately invokes the OnTest method to raise the event.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If you place a breakpoint in the body of the event handler, you can see that the object passed to the single parameter includes the source object and both members of TestEventArgs.</source>
          <target state="new">If you place a breakpoint in the body of the event handler, you can see that the object passed to the single parameter includes the source object and both members of TestEventArgs.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Add the event registration code to the same then block as the other event registration code:</source>
          <target state="new">Add the event registration code to the same then block as the other event registration code:</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Exposing asynchronous operations</source>
          <target state="new">Exposing asynchronous operations</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The .NET Framework has a rich set of tools for asynchronous processing and parallel processing, based on the Task and generic <bpt id="p1">[</bpt>Task<ph id="ph1">&amp;lt;</ph>TResult<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/dd321424.aspx)</ept> classes.</source>
          <target state="new">The .NET Framework has a rich set of tools for asynchronous processing and parallel processing, based on the Task and generic <bpt id="p1">[</bpt>Task<ph id="ph1">&amp;lt;</ph>TResult<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/dd321424.aspx)</ept> classes.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To expose task-based asynchronous processing in a Windows Runtime component, use the Windows Runtime interfaces <bpt id="p1">[</bpt>IAsyncAction<ept id="p1">](https://msdn.microsoft.com/library/br205781.aspx)</ept>, <bpt id="p2">[</bpt>IAsyncActionWithProgress<ph id="ph1">&amp;lt;</ph>TProgress<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://msdn.microsoft.com/library/br205784.aspx)</ept>, <bpt id="p3">[</bpt>IAsyncOperation<ph id="ph3">&amp;lt;</ph>TResult<ph id="ph4">&amp;gt;</ph><ept id="p3">](https://msdn.microsoft.com/library/br205802.aspx)</ept>, and <bpt id="p4">[</bpt>IAsyncOperationWithProgress<ph id="ph5">&amp;lt;</ph>TResult, TProgress<ph id="ph6">&amp;gt;</ph><ept id="p4">](https://msdn.microsoft.com/library/br205807.aspx)</ept>.</source>
          <target state="new">To expose task-based asynchronous processing in a Windows Runtime component, use the Windows Runtime interfaces <bpt id="p1">[</bpt>IAsyncAction<ept id="p1">](https://msdn.microsoft.com/library/br205781.aspx)</ept>, <bpt id="p2">[</bpt>IAsyncActionWithProgress<ph id="ph1">&amp;lt;</ph>TProgress<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://msdn.microsoft.com/library/br205784.aspx)</ept>, <bpt id="p3">[</bpt>IAsyncOperation<ph id="ph3">&amp;lt;</ph>TResult<ph id="ph4">&amp;gt;</ph><ept id="p3">](https://msdn.microsoft.com/library/br205802.aspx)</ept>, and <bpt id="p4">[</bpt>IAsyncOperationWithProgress<ph id="ph5">&amp;lt;</ph>TResult, TProgress<ph id="ph6">&amp;gt;</ph><ept id="p4">](https://msdn.microsoft.com/library/br205807.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>(In the Windows Runtime, operations return results, but actions do not.)</source>
          <target state="new">(In the Windows Runtime, operations return results, but actions do not.)</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This section demonstrates a cancelable asynchronous operation that reports progress and returns results.</source>
          <target state="new">This section demonstrates a cancelable asynchronous operation that reports progress and returns results.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The GetPrimesInRangeAsync method uses the <bpt id="p1">[</bpt>AsyncInfo<ept id="p1">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.asyncinfo.aspx)</ept> class to generate a task and to connect its cancellation and progress-reporting features to a WinJS.Promise object.</source>
          <target state="new">The GetPrimesInRangeAsync method uses the <bpt id="p1">[</bpt>AsyncInfo<ept id="p1">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.asyncinfo.aspx)</ept> class to generate a task and to connect its cancellation and progress-reporting features to a WinJS.Promise object.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Begin by adding the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statements (<bpt id="p2">**</bpt>Imports<ept id="p2">**</ept> in Visual Basic) to the Example class:</source>
          <target state="new">Begin by adding the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statements (<bpt id="p2">**</bpt>Imports<ept id="p2">**</ept> in Visual Basic) to the Example class:</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Now add the GetPrimesInRangeAsync method to the Example class:</source>
          <target state="new">Now add the GetPrimesInRangeAsync method to the Example class:</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>GetPrimesInRangeAsync is a very simple prime number finder, and that's by design.</source>
          <target state="new">GetPrimesInRangeAsync is a very simple prime number finder, and that's by design.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The focus here is on implementing an asynchronous operation, so simplicity is important, and a slow implementation is an advantage when we're demonstrating cancellation.</source>
          <target state="new">The focus here is on implementing an asynchronous operation, so simplicity is important, and a slow implementation is an advantage when we're demonstrating cancellation.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>GetPrimesInRangeAsync finds primes by brute force: It divides a candidate by all the integers that are less than or equal to its square root, rather than using only the prime numbers.</source>
          <target state="new">GetPrimesInRangeAsync finds primes by brute force: It divides a candidate by all the integers that are less than or equal to its square root, rather than using only the prime numbers.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Stepping through this code:</source>
          <target state="new">Stepping through this code:</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Before starting an asynchronous operation, perform housekeeping activities such as validating parameters and throwing exceptions for invalid input.</source>
          <target state="new">Before starting an asynchronous operation, perform housekeeping activities such as validating parameters and throwing exceptions for invalid input.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The key to this implementation is the <bpt id="p1">[</bpt>AsyncInfo.Run<ph id="ph1">&amp;lt;</ph>TResult, TProgress<ph id="ph2">&amp;gt;</ph>(Func<ph id="ph3">&amp;lt;</ph>CancellationToken, IProgress<ph id="ph4">&amp;lt;</ph>TProgress<ph id="ph5">&amp;gt;</ph>, Task<ph id="ph6">&amp;lt;</ph>TResult<ph id="ph7">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/hh779740.aspx)</ept><ph id="ph8">&amp;gt;</ph>) method, and the delegate that is the method's only parameter.</source>
          <target state="new">The key to this implementation is the <bpt id="p1">[</bpt>AsyncInfo.Run<ph id="ph1">&amp;lt;</ph>TResult, TProgress<ph id="ph2">&amp;gt;</ph>(Func<ph id="ph3">&amp;lt;</ph>CancellationToken, IProgress<ph id="ph4">&amp;lt;</ph>TProgress<ph id="ph5">&amp;gt;</ph>, Task<ph id="ph6">&amp;lt;</ph>TResult<ph id="ph7">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/hh779740.aspx)</ept><ph id="ph8">&amp;gt;</ph>) method, and the delegate that is the method's only parameter.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The delegate must accept a cancellation token and an interface for reporting progress, and must return a started task that uses those parameters.</source>
          <target state="new">The delegate must accept a cancellation token and an interface for reporting progress, and must return a started task that uses those parameters.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>When JavaScript calls the GetPrimesInRangeAsync method, the following steps occur (not necessarily in the order given here):</source>
          <target state="new">When JavaScript calls the GetPrimesInRangeAsync method, the following steps occur (not necessarily in the order given here):</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>WinJS.Promise<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211867.aspx)</ept> object supplies functions to process the returned results, react to cancellation, and handle progress reports.</source>
          <target state="new">The <bpt id="p1">[</bpt>WinJS.Promise<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211867.aspx)</ept> object supplies functions to process the returned results, react to cancellation, and handle progress reports.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The AsyncInfo.Run method creates a cancellation source and an object that implements the IProgress<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> interface.</source>
          <target state="new">The AsyncInfo.Run method creates a cancellation source and an object that implements the IProgress<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> interface.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>To the delegate, it passes both a <bpt id="p1">[</bpt>CancellationToken<ept id="p1">](https://msdn.microsoft.com/library/system.threading.cancellationtoken.aspx)</ept> token from the cancellation source, and the <bpt id="p2">[</bpt>IProgress<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://msdn.microsoft.com/library/hh138298.aspx)</ept> interface.</source>
          <target state="new">To the delegate, it passes both a <bpt id="p1">[</bpt>CancellationToken<ept id="p1">](https://msdn.microsoft.com/library/system.threading.cancellationtoken.aspx)</ept> token from the cancellation source, and the <bpt id="p2">[</bpt>IProgress<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://msdn.microsoft.com/library/hh138298.aspx)</ept> interface.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If the Promise object doesn't supply a function to react to cancellation, AsyncInfo.Run still passes a cancelable token, and cancellation can still occur.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If the Promise object doesn't supply a function to react to cancellation, AsyncInfo.Run still passes a cancelable token, and cancellation can still occur.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>If the Promise object doesn't supply a function to handle progress updates, AsyncInfo.Run still supplies an object that implements IProgress<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph>, but its reports are ignored.</source>
          <target state="new">If the Promise object doesn't supply a function to handle progress updates, AsyncInfo.Run still supplies an object that implements IProgress<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph>, but its reports are ignored.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The delegate uses the <bpt id="p1">[</bpt>Task.Run<ph id="ph1">&amp;lt;</ph>TResult<ph id="ph2">&amp;gt;</ph>(Func<ph id="ph3">&amp;lt;</ph>TResult<ph id="ph4">&amp;gt;</ph>, CancellationToken<ept id="p1">](https://msdn.microsoft.com/library/hh160376.aspx)</ept>) method to create a started task that uses the token and the progress interface.</source>
          <target state="new">The delegate uses the <bpt id="p1">[</bpt>Task.Run<ph id="ph1">&amp;lt;</ph>TResult<ph id="ph2">&amp;gt;</ph>(Func<ph id="ph3">&amp;lt;</ph>TResult<ph id="ph4">&amp;gt;</ph>, CancellationToken<ept id="p1">](https://msdn.microsoft.com/library/hh160376.aspx)</ept>) method to create a started task that uses the token and the progress interface.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The delegate for the started task is provided by a lambda function that computes the desired result.</source>
          <target state="new">The delegate for the started task is provided by a lambda function that computes the desired result.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>More about that in a moment.</source>
          <target state="new">More about that in a moment.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The AsyncInfo.Run method creates an object that implements the <bpt id="p1">[</bpt>IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>TResult, TProgress<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206594.aspx)</ept> interface, connects the Windows Runtime cancellation mechanism with the token source, and connects the Promise object's progress-reporting function with the IProgress<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph> interface.</source>
          <target state="new">The AsyncInfo.Run method creates an object that implements the <bpt id="p1">[</bpt>IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>TResult, TProgress<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206594.aspx)</ept> interface, connects the Windows Runtime cancellation mechanism with the token source, and connects the Promise object's progress-reporting function with the IProgress<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph> interface.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>TResult, TProgress<ph id="ph2">&amp;gt;</ph> interface is returned to JavaScript.</source>
          <target state="new">The IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>TResult, TProgress<ph id="ph2">&amp;gt;</ph> interface is returned to JavaScript.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The lambda function that is represented by the started task doesn't take any arguments.</source>
          <target state="new">The lambda function that is represented by the started task doesn't take any arguments.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Because it's a lambda function, it has access to the token and the IProgress interface.</source>
          <target state="new">Because it's a lambda function, it has access to the token and the IProgress interface.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Each time a candidate number is evaluated, the lambda function:</source>
          <target state="new">Each time a candidate number is evaluated, the lambda function:</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Checks to see whether the next percentage point of progress has been reached.</source>
          <target state="new">Checks to see whether the next percentage point of progress has been reached.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>If it has, the lambda function calls the IProgress<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph>.Report method, and the percentage is passed through to the function that the Promise object specified for reporting progress.</source>
          <target state="new">If it has, the lambda function calls the IProgress<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph>.Report method, and the percentage is passed through to the function that the Promise object specified for reporting progress.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Uses the cancellation token to throw an exception if the operation has been canceled.</source>
          <target state="new">Uses the cancellation token to throw an exception if the operation has been canceled.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>IAsyncInfo.Cancel<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.iasyncinfo.cancel.aspx)</ept> method (which the IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>TResult, TProgress<ph id="ph2">&amp;gt;</ph> interface inherits) has been called, the connection that the AsyncInfo.Run method set up ensures that the cancellation token is notified.</source>
          <target state="new">If the <bpt id="p1">[</bpt>IAsyncInfo.Cancel<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.iasyncinfo.cancel.aspx)</ept> method (which the IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>TResult, TProgress<ph id="ph2">&amp;gt;</ph> interface inherits) has been called, the connection that the AsyncInfo.Run method set up ensures that the cancellation token is notified.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>When the lambda function returns the list of prime numbers, the list is passed to the function that the WinJS.Promise object specified for processing the results.</source>
          <target state="new">When the lambda function returns the list of prime numbers, the list is passed to the function that the WinJS.Promise object specified for processing the results.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>To create the JavaScript promise and set up the cancellation mechanism, add the asyncRun and asyncCancel functions to default.js.</source>
          <target state="new">To create the JavaScript promise and set up the cancellation mechanism, add the asyncRun and asyncCancel functions to default.js.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Don't forget the event registration code the same as you did previously.</source>
          <target state="new">Don't forget the event registration code the same as you did previously.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>By calling the asynchronous GetPrimesInRangeAsync method, the asyncRun function creates a WinJS.Promise object.</source>
          <target state="new">By calling the asynchronous GetPrimesInRangeAsync method, the asyncRun function creates a WinJS.Promise object.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The object's then method takes three functions that process the returned results, react to errors (including cancellation), and handle progress reports.</source>
          <target state="new">The object's then method takes three functions that process the returned results, react to errors (including cancellation), and handle progress reports.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>In this example, the returned results are printed in the output area.</source>
          <target state="new">In this example, the returned results are printed in the output area.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Cancellation or completion resets the buttons that launch and cancel the operation.</source>
          <target state="new">Cancellation or completion resets the buttons that launch and cancel the operation.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Progress reporting updates the progress control.</source>
          <target state="new">Progress reporting updates the progress control.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The asyncCancel function just calls the cancel method of the WinJS.Promise object.</source>
          <target state="new">The asyncCancel function just calls the cancel method of the WinJS.Promise object.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>To run the app, choose the F5 key.</source>
          <target state="new">To run the app, choose the F5 key.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>To start the asynchronous operation, choose the <bpt id="p1">**</bpt>Async<ept id="p1">**</ept> button.</source>
          <target state="new">To start the asynchronous operation, choose the <bpt id="p1">**</bpt>Async<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>What happens next depends on how fast your computer is.</source>
          <target state="new">What happens next depends on how fast your computer is.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If the progress bar zips to completion before you have time to blink, increase the size of the starting number that is passed to GetPrimesInRangeAsync by one or more factors of ten.</source>
          <target state="new">If the progress bar zips to completion before you have time to blink, increase the size of the starting number that is passed to GetPrimesInRangeAsync by one or more factors of ten.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>You can fine-tune the duration of the operation by increasing or decreasing the count of numbers to test, but adding zeros in the middle of the starting number will have a bigger impact.</source>
          <target state="new">You can fine-tune the duration of the operation by increasing or decreasing the count of numbers to test, but adding zeros in the middle of the starting number will have a bigger impact.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>To cancel the operation, choose the <bpt id="p1">**</bpt>Cancel Async<ept id="p1">**</ept> button.</source>
          <target state="new">To cancel the operation, choose the <bpt id="p1">**</bpt>Cancel Async<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>.NET for Windows Store Apps Overview</source>
          <target state="new">.NET for Windows Store Apps Overview</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>.NET for UWP apps</source>
          <target state="new">.NET for UWP apps</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Simple Windows Runtime Component and calling it from JavaScript</source>
          <target state="new">Walkthrough: Creating a Simple Windows Runtime Component and calling it from JavaScript</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>