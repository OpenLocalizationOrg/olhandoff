<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">171682c9e4bf5375a44738a7a225ff499a188740</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\xaml-platform\x-bind-markup-extension.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The xBind markup extension is an alternative to Binding.</source>
          <target state="new">The xBind markup extension is an alternative to Binding.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>xBind lacks some of the features of Binding, but it runs in less time and less memory than Binding and supports better debugging.</source>
          <target state="new">xBind lacks some of the features of Binding, but it runs in less time and less memory than Binding and supports better debugging.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>xBind markup extension</source>
          <target state="new">xBind markup extension</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>{x:Bind} markup extension</source>
          <target state="new">{x:Bind} markup extension</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For general info about using data binding in your app with <bpt id="p2">**</bpt>{x:Bind}<ept id="p2">**</ept> (and for an all-up comparison between <bpt id="p3">**</bpt>{x:Bind}<ept id="p3">**</ept> and <bpt id="p4">**</bpt>{Binding}<ept id="p4">**</ept>), see <bpt id="p5">[</bpt>Data binding in depth<ept id="p5">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For general info about using data binding in your app with <bpt id="p2">**</bpt>{x:Bind}<ept id="p2">**</ept> (and for an all-up comparison between <bpt id="p3">**</bpt>{x:Bind}<ept id="p3">**</ept> and <bpt id="p4">**</bpt>{Binding}<ept id="p4">**</ept>), see <bpt id="p5">[</bpt>Data binding in depth<ept id="p5">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> markup extension—new for Windows 10—is an alternative to <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> markup extension—new for Windows 10—is an alternative to <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> lacks some of the features of <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept>, but it runs in less time and less memory than <bpt id="p3">**</bpt>{Binding}<ept id="p3">**</ept> and supports better debugging.</source>
          <target state="new"><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> lacks some of the features of <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept>, but it runs in less time and less memory than <bpt id="p3">**</bpt>{Binding}<ept id="p3">**</ept> and supports better debugging.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At XAML load time, <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is converted into what you can think of as a binding object, and this object gets a value from a property on a data source.</source>
          <target state="new">At XAML load time, <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is converted into what you can think of as a binding object, and this object gets a value from a property on a data source.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The binding object can optionally be configured to observe changes in the value of the data source property and refresh itself based on those changes.</source>
          <target state="new">The binding object can optionally be configured to observe changes in the value of the data source property and refresh itself based on those changes.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It can also optionally be configured to push changes in its own value back to the source property.</source>
          <target state="new">It can also optionally be configured to push changes in its own value back to the source property.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The binding objects created by <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> and <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept> are largely functionally equivalent.</source>
          <target state="new">The binding objects created by <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> and <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept> are largely functionally equivalent.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>But <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> executes special-purpose code, which it generates at compile-time, and <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept> uses general-purpose runtime object inspection.</source>
          <target state="new">But <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> executes special-purpose code, which it generates at compile-time, and <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept> uses general-purpose runtime object inspection.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Consequently, <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> bindings (often referred-to as compiled bindings) have great performance, provide compile-time validation of your binding expressions, and support debugging by enabling you to set breakpoints in the code files that are generated as the partial class for your page.</source>
          <target state="new">Consequently, <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> bindings (often referred-to as compiled bindings) have great performance, provide compile-time validation of your binding expressions, and support debugging by enabling you to set breakpoints in the code files that are generated as the partial class for your page.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These files can be found in your <ph id="ph1">`obj`</ph> folder, with names like (for C#) <ph id="ph2">`&lt;view name&gt;.g.cs`</ph>.</source>
          <target state="new">These files can be found in your <ph id="ph1">`obj`</ph> folder, with names like (for C#) <ph id="ph2">`&lt;view name&gt;.g.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Sample apps that demonstrate {x:Bind}</source>
          <target state="new">Sample apps that demonstrate {x:Bind}</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>{x:Bind} sample</source>
          <target state="new">{x:Bind} sample</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>QuizGame</source>
          <target state="new">QuizGame</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>XAML UI Basics sample</source>
          <target state="new">XAML UI Basics sample</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>XAML attribute usage</source>
          <target state="new">XAML attribute usage</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="new">Term</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>propertyPath</source>
          <target state="new">propertyPath</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A string that specifies the property path for the binding.</source>
          <target state="new">A string that specifies the property path for the binding.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>More info is in the <bpt id="p1">[</bpt>Property path<ept id="p1">](#property-path)</ept> section below.</source>
          <target state="new">More info is in the <bpt id="p1">[</bpt>Property path<ept id="p1">](#property-path)</ept> section below.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>bindingProperties</source>
          <target state="new">bindingProperties</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>propName<ept id="p1">_</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>value<ept id="p2">_</ept>\[, <bpt id="p3">_</bpt>propName<ept id="p3">_</ept><ph id="ph2">=</ph><bpt id="p4">_</bpt>value<ept id="p4">_</ept>\]*</source>
          <target state="new"><bpt id="p1">_</bpt>propName<ept id="p1">_</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>value<ept id="p2">_</ept>\[, <bpt id="p3">_</bpt>propName<ept id="p3">_</ept><ph id="ph2">=</ph><bpt id="p4">_</bpt>value<ept id="p4">_</ept>\]*</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One or more binding properties that are specified using a name/value pair syntax.</source>
          <target state="new">One or more binding properties that are specified using a name/value pair syntax.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>propName</source>
          <target state="new">propName</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The string name of the property to set on the binding object.</source>
          <target state="new">The string name of the property to set on the binding object.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, "Converter".</source>
          <target state="new">For example, "Converter".</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>value</source>
          <target state="new">value</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The value to set the property to.</source>
          <target state="new">The value to set the property to.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The syntax of the argument depends on the property being set.</source>
          <target state="new">The syntax of the argument depends on the property being set.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Here's an example of a <bpt id="p1">_</bpt>propName<ept id="p1">_</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>value<ept id="p2">_</ept> usage where the value is itself a markup extension: <ph id="ph2">`Converter={StaticResource myConverterClass}`</ph>.</source>
          <target state="new">Here's an example of a <bpt id="p1">_</bpt>propName<ept id="p1">_</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>value<ept id="p2">_</ept> usage where the value is itself a markup extension: <ph id="ph2">`Converter={StaticResource myConverterClass}`</ph>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Properties that you can set with {x:Bind}<ept id="p1">](#properties-you-can-set)</ept> section below.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Properties that you can set with {x:Bind}<ept id="p1">](#properties-you-can-set)</ept> section below.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Property path</source>
          <target state="new">Property path</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>PropertyPath<ept id="p1">*</ept> sets the <bpt id="p2">**</bpt>Path<ept id="p2">**</ept> for an <bpt id="p3">**</bpt>{x:Bind}<ept id="p3">**</ept> expression.</source>
          <target state="new"><bpt id="p1">*</bpt>PropertyPath<ept id="p1">*</ept> sets the <bpt id="p2">**</bpt>Path<ept id="p2">**</ept> for an <bpt id="p3">**</bpt>{x:Bind}<ept id="p3">**</ept> expression.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Path<ept id="p1">**</ept> is a property path specifying the value of the property, sub-property, field, or method that you're binding to (the source).</source>
          <target state="new"><bpt id="p1">**</bpt>Path<ept id="p1">**</ept> is a property path specifying the value of the property, sub-property, field, or method that you're binding to (the source).</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can mention the name of the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> property explicitly: <ph id="ph1">`{Binding Path=...}`</ph>.</source>
          <target state="new">You can mention the name of the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> property explicitly: <ph id="ph1">`{Binding Path=...}`</ph>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Or you can omit it: <ph id="ph1">`{Binding ...}`</ph>.</source>
          <target state="new">Or you can omit it: <ph id="ph1">`{Binding ...}`</ph>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> does not use the <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept> as a default source—instead, it uses the page or user control itself.</source>
          <target state="new"><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> does not use the <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept> as a default source—instead, it uses the page or user control itself.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>So it will look in the code-behind of your page or user control for properties, fields, and methods.</source>
          <target state="new">So it will look in the code-behind of your page or user control for properties, fields, and methods.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To expose your view model to <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept>, you will typically want to add new fields or properties to the code behind for your page or user control.</source>
          <target state="new">To expose your view model to <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept>, you will typically want to add new fields or properties to the code behind for your page or user control.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Steps in a property path are delimited by dots (.), and you can include multiple delimiters to traverse successive sub-properties.</source>
          <target state="new">Steps in a property path are delimited by dots (.), and you can include multiple delimiters to traverse successive sub-properties.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Use the dot delimiter regardless of the programming language used to implement the object being bound to.</source>
          <target state="new">Use the dot delimiter regardless of the programming language used to implement the object being bound to.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example: in a page, <bpt id="p1">**</bpt>Text="{x:Bind Employee.FirstName}"<ept id="p1">**</ept> will look for an <bpt id="p2">**</bpt>Employee<ept id="p2">**</ept> member on the page and then a <bpt id="p3">**</bpt>FirstName<ept id="p3">**</ept> member on the object returned by <bpt id="p4">**</bpt>Employee<ept id="p4">**</ept>.</source>
          <target state="new">For example: in a page, <bpt id="p1">**</bpt>Text="{x:Bind Employee.FirstName}"<ept id="p1">**</ept> will look for an <bpt id="p2">**</bpt>Employee<ept id="p2">**</ept> member on the page and then a <bpt id="p3">**</bpt>FirstName<ept id="p3">**</ept> member on the object returned by <bpt id="p4">**</bpt>Employee<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you are binding an items control to a property that contains an employee's dependents, your property path might be "Employee.Dependents", and the item template of the items control would take care of displaying the items in "Dependents".</source>
          <target state="new">If you are binding an items control to a property that contains an employee's dependents, your property path might be "Employee.Dependents", and the item template of the items control would take care of displaying the items in "Dependents".</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For C++/CX, <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> cannot bind to private fields and properties in the page or data model – you will need to have a public property for it to be bindable.</source>
          <target state="new">For C++/CX, <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> cannot bind to private fields and properties in the page or data model – you will need to have a public property for it to be bindable.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The surface area for binding needs to be exposed as CX classes/interfaces so that we can get the relevant metadata.</source>
          <target state="new">The surface area for binding needs to be exposed as CX classes/interfaces so that we can get the relevant metadata.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\[Bindable\]<ept id="p1">**</ept> attribute should not be needed.</source>
          <target state="new">The <bpt id="p1">**</bpt>\[Bindable\]<ept id="p1">**</ept> attribute should not be needed.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the data source is a collection, then a property path can specify items in the collection by their position or index.</source>
          <target state="new">If the data source is a collection, then a property path can specify items in the collection by their position or index.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, "Teams\[0\].Players", where the literal "\[\]" encloses the "0" that requests the first item in a zero-indexed collection.</source>
          <target state="new">For example, "Teams\[0\].Players", where the literal "\[\]" encloses the "0" that requests the first item in a zero-indexed collection.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To use an indexer, the model needs to implement <bpt id="p1">**</bpt>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> or <bpt id="p2">**</bpt>IVector<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">**</ept> on the type of the property that is going to be indexed.</source>
          <target state="new">To use an indexer, the model needs to implement <bpt id="p1">**</bpt>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> or <bpt id="p2">**</bpt>IVector<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">**</ept> on the type of the property that is going to be indexed.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the type of the indexed property supports <bpt id="p1">**</bpt>INotifyCollectionChanged<ept id="p1">**</ept> or <bpt id="p2">**</bpt>IObservableVector<ept id="p2">**</ept> and the binding is OneWay or TwoWay, then it will register and listen for change notifications on those interfaces.</source>
          <target state="new">If the type of the indexed property supports <bpt id="p1">**</bpt>INotifyCollectionChanged<ept id="p1">**</ept> or <bpt id="p2">**</bpt>IObservableVector<ept id="p2">**</ept> and the binding is OneWay or TwoWay, then it will register and listen for change notifications on those interfaces.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The change detection logic will update based on all collection changes, even if that doesn’t affect the specific indexed value.</source>
          <target state="new">The change detection logic will update based on all collection changes, even if that doesn’t affect the specific indexed value.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is because the listening logic is common across all instances of the collection.</source>
          <target state="new">This is because the listening logic is common across all instances of the collection.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To bind to attached properties, you need to put the class and property name into parentheses after the dot.</source>
          <target state="new">To bind to attached properties, you need to put the class and property name into parentheses after the dot.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example <bpt id="p1">**</bpt>Text="{x:Bind Button22.(Grid.Row)}"<ept id="p1">**</ept>.</source>
          <target state="new">For example <bpt id="p1">**</bpt>Text="{x:Bind Button22.(Grid.Row)}"<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the property is not declared in a Xaml namespace, then you will need to prefix it with a xml namespace, which you should map to a code namespace at the head of the document.</source>
          <target state="new">If the property is not declared in a Xaml namespace, then you will need to prefix it with a xml namespace, which you should map to a code namespace at the head of the document.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Compiled bindings are strongly typed, and will resolve the type of each step in a path.</source>
          <target state="new">Compiled bindings are strongly typed, and will resolve the type of each step in a path.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the type returned doesn’t have the member, it will fail at compile time.</source>
          <target state="new">If the type returned doesn’t have the member, it will fail at compile time.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can specify a cast to tell binding the real type of the object.</source>
          <target state="new">You can specify a cast to tell binding the real type of the object.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the following case, <bpt id="p1">**</bpt>obj<ept id="p1">**</ept> is a property of type object, but contains a text box, so we can use <bpt id="p2">**</bpt>Text="{x:Bind obj.(TextBox.Text)}"<ept id="p2">**</ept>.</source>
          <target state="new">In the following case, <bpt id="p1">**</bpt>obj<ept id="p1">**</ept> is a property of type object, but contains a text box, so we can use <bpt id="p2">**</bpt>Text="{x:Bind obj.(TextBox.Text)}"<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>groups3<ept id="p1">**</ept> field in <bpt id="p2">**</bpt>Text="{x:Bind groups3\[0\].(data:SampleDataGroup.Title)}"<ept id="p2">**</ept> is a dictionary of objects, so you must cast it to <bpt id="p3">**</bpt>data:SampleDataGroup<ept id="p3">**</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>groups3<ept id="p1">**</ept> field in <bpt id="p2">**</bpt>Text="{x:Bind groups3\[0\].(data:SampleDataGroup.Title)}"<ept id="p2">**</ept> is a dictionary of objects, so you must cast it to <bpt id="p3">**</bpt>data:SampleDataGroup<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Note the use of the <bpt id="p1">**</bpt>data:<ept id="p1">**</ept> namespace prefix for mapping the object type to a namespace that isn't part of the default XAML namespace.</source>
          <target state="new">Note the use of the <bpt id="p1">**</bpt>data:<ept id="p1">**</ept> namespace prefix for mapping the object type to a namespace that isn't part of the default XAML namespace.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>With <bpt id="p1">**</bpt>x:Bind<ept id="p1">**</ept>, you do not need to use <bpt id="p2">**</bpt>ElementName=xxx<ept id="p2">**</ept> as part of the binding expression.</source>
          <target state="new">With <bpt id="p1">**</bpt>x:Bind<ept id="p1">**</ept>, you do not need to use <bpt id="p2">**</bpt>ElementName=xxx<ept id="p2">**</ept> as part of the binding expression.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>With <bpt id="p1">**</bpt>x:Bind<ept id="p1">**</ept>, you can use the name of the element as the first part of the path for the binding because named elements become fields within the page or user control that represents the root binding source.</source>
          <target state="new">With <bpt id="p1">**</bpt>x:Bind<ept id="p1">**</ept>, you can use the name of the element as the first part of the path for the binding because named elements become fields within the page or user control that represents the root binding source.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Event binding is a new feature for compiled binding.</source>
          <target state="new">Event binding is a new feature for compiled binding.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It enables you to specify the handler for an event using a binding, rather than it having to be a method on the code behind.</source>
          <target state="new">It enables you to specify the handler for an event using a binding, rather than it having to be a method on the code behind.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example: <bpt id="p1">**</bpt>Click="{x:Bind rootFrame.GoForward}"<ept id="p1">**</ept>.</source>
          <target state="new">For example: <bpt id="p1">**</bpt>Click="{x:Bind rootFrame.GoForward}"<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For events, the target method must not be overloaded and must also:</source>
          <target state="new">For events, the target method must not be overloaded and must also:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Match the signature of the event.</source>
          <target state="new">Match the signature of the event.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>OR have no parameters.</source>
          <target state="new">OR have no parameters.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>OR have the same number of parameters of types that are assignable from the types of the event parameters.</source>
          <target state="new">OR have the same number of parameters of types that are assignable from the types of the event parameters.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In generated code-behind, compiled binding handles the event and routes it to the method on the model, evaluating the path of the binding expression when the event occurs.</source>
          <target state="new">In generated code-behind, compiled binding handles the event and routes it to the method on the model, evaluating the path of the binding expression when the event occurs.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This means that, unlike property bindings, it doesn’t track changes to the model.</source>
          <target state="new">This means that, unlike property bindings, it doesn’t track changes to the model.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more info about the string syntax for a property path, see <bpt id="p1">[</bpt>Property-path syntax<ept id="p1">](property-path-syntax.md)</ept>, keeping in mind the differences described here for <bpt id="p2">**</bpt>{x:Bind}<ept id="p2">**</ept>.</source>
          <target state="new">For more info about the string syntax for a property path, see <bpt id="p1">[</bpt>Property-path syntax<ept id="p1">](property-path-syntax.md)</ept>, keeping in mind the differences described here for <bpt id="p2">**</bpt>{x:Bind}<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Properties that you can set with {x:Bind}</source>
          <target state="new">Properties that you can set with {x:Bind}</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is illustrated with the <bpt id="p2">*</bpt>bindingProperties<ept id="p2">*</ept> placeholder syntax because there are multiple read/write properties that can be set in the markup extension.</source>
          <target state="new"><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is illustrated with the <bpt id="p2">*</bpt>bindingProperties<ept id="p2">*</ept> placeholder syntax because there are multiple read/write properties that can be set in the markup extension.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The properties can be set in any order with comma-separated <bpt id="p1">*</bpt>propName<ept id="p1">*</ept><ph id="ph1">=</ph><bpt id="p2">*</bpt>value<ept id="p2">*</ept> pairs.</source>
          <target state="new">The properties can be set in any order with comma-separated <bpt id="p1">*</bpt>propName<ept id="p1">*</ept><ph id="ph1">=</ph><bpt id="p2">*</bpt>value<ept id="p2">*</ept> pairs.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Note that you cannot include line breaks in the binding expression.</source>
          <target state="new">Note that you cannot include line breaks in the binding expression.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Some of the properties require types that don't have a type conversion, so these require markup extensions of their own nested within the <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept>.</source>
          <target state="new">Some of the properties require types that don't have a type conversion, so these require markup extensions of their own nested within the <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>These properties work in much the same way as the properties of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> class.</source>
          <target state="new">These properties work in much the same way as the properties of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> class.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="new">Property</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="new">Path</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Property path<ept id="p1">](#property-path)</ept> section above.</source>
          <target state="new">See the <bpt id="p1">[</bpt>Property path<ept id="p1">](#property-path)</ept> section above.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Converter</source>
          <target state="new">Converter</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Specifies the converter object that is called by the binding engine.</source>
          <target state="new">Specifies the converter object that is called by the binding engine.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The converter can be set in XAML, but only if you refer to an object instance that you've assigned in a <bpt id="p1">[</bpt>{StaticResource} markup extension<ept id="p1">](staticresource-markup-extension.md)</ept> reference to that object in the resource dictionary.</source>
          <target state="new">The converter can be set in XAML, but only if you refer to an object instance that you've assigned in a <bpt id="p1">[</bpt>{StaticResource} markup extension<ept id="p1">](staticresource-markup-extension.md)</ept> reference to that object in the resource dictionary.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>ConverterLanguage</source>
          <target state="new">ConverterLanguage</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Specifies the culture to be used by the converter.</source>
          <target state="new">Specifies the culture to be used by the converter.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>(If you're setting <bpt id="p1">**</bpt>ConverterLanguage<ept id="p1">**</ept> you should also be setting <bpt id="p2">**</bpt>Converter<ept id="p2">**</ept>.) The culture is set as a standards-based identifier.</source>
          <target state="new">(If you're setting <bpt id="p1">**</bpt>ConverterLanguage<ept id="p1">**</ept> you should also be setting <bpt id="p2">**</bpt>Converter<ept id="p2">**</ept>.) The culture is set as a standards-based identifier.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ConverterLanguage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701880)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ConverterLanguage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701880)</ept>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>ConverterParameter</source>
          <target state="new">ConverterParameter</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Specifies the converter parameter that can be used in converter logic.</source>
          <target state="new">Specifies the converter parameter that can be used in converter logic.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>(If you're setting <bpt id="p1">**</bpt>ConverterParameter<ept id="p1">**</ept> you should also be setting <bpt id="p2">**</bpt>Converter<ept id="p2">**</ept>.) Most converters use simple logic that get all the info they need from the passed value to convert, and don't need a <bpt id="p3">**</bpt>ConverterParameter<ept id="p3">**</ept> value.</source>
          <target state="new">(If you're setting <bpt id="p1">**</bpt>ConverterParameter<ept id="p1">**</ept> you should also be setting <bpt id="p2">**</bpt>Converter<ept id="p2">**</ept>.) Most converters use simple logic that get all the info they need from the passed value to convert, and don't need a <bpt id="p3">**</bpt>ConverterParameter<ept id="p3">**</ept> value.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConverterParameter<ept id="p1">**</ept> parameter is for moderately advanced converter implementations that have more than one logic that keys off what's passed in <bpt id="p2">**</bpt>ConverterParameter<ept id="p2">**</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>ConverterParameter<ept id="p1">**</ept> parameter is for moderately advanced converter implementations that have more than one logic that keys off what's passed in <bpt id="p2">**</bpt>ConverterParameter<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can write a converter that uses values other than strings but this is uncommon, see Remarks in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ConverterParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209827)</ept> for more info.</source>
          <target state="new">You can write a converter that uses values other than strings but this is uncommon, see Remarks in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ConverterParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209827)</ept> for more info.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>FallbackValue</source>
          <target state="new">FallbackValue</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies a value to display when the source or path cannot be resolved.</source>
          <target state="new">Specifies a value to display when the source or path cannot be resolved.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="new">Mode</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Specifies the binding mode, as one of these strings: "OneTime", "OneWay", or "TwoWay".</source>
          <target state="new">Specifies the binding mode, as one of these strings: "OneTime", "OneWay", or "TwoWay".</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The default is "OneTime".</source>
          <target state="new">The default is "OneTime".</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Note that this differs from the default for <bpt id="p1">**</bpt>{Binding}<ept id="p1">**</ept>, which is "OneWay" in most cases.</source>
          <target state="new">Note that this differs from the default for <bpt id="p1">**</bpt>{Binding}<ept id="p1">**</ept>, which is "OneWay" in most cases.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>TargetNullValue</source>
          <target state="new">TargetNullValue</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Specifies a value to display when the source value resolves but is explicitly <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</source>
          <target state="new">Specifies a value to display when the source value resolves but is explicitly <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you're converting markup from <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept> to <bpt id="p3">**</bpt>{x:Bind}<ept id="p3">**</ept>, then be aware of the differences in default values for the <bpt id="p4">**</bpt>Mode<ept id="p4">**</ept> property.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you're converting markup from <bpt id="p2">**</bpt>{Binding}<ept id="p2">**</ept> to <bpt id="p3">**</bpt>{x:Bind}<ept id="p3">**</ept>, then be aware of the differences in default values for the <bpt id="p4">**</bpt>Mode<ept id="p4">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="new">Remarks</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> uses generated code to achieve its benefits, it requires type information at compile time.</source>
          <target state="new">Because <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> uses generated code to achieve its benefits, it requires type information at compile time.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This means that you cannot bind to properties where you do not know the type ahead of time.</source>
          <target state="new">This means that you cannot bind to properties where you do not know the type ahead of time.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Because of this, you cannot use <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> with the <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept> property, which is of type <bpt id="p3">**</bpt>Object<ept id="p3">**</ept>, and is also subject to change at run time.</source>
          <target state="new">Because of this, you cannot use <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> with the <bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept> property, which is of type <bpt id="p3">**</bpt>Object<ept id="p3">**</ept>, and is also subject to change at run time.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>When using <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> with data templates, you must indicate the type being bound to by setting an <bpt id="p2">**</bpt>x:DataType<ept id="p2">**</ept> value, as shown in the example below.</source>
          <target state="new">When using <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> with data templates, you must indicate the type being bound to by setting an <bpt id="p2">**</bpt>x:DataType<ept id="p2">**</ept> value, as shown in the example below.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You can also set the type to an interface or base class type, and then use casts if necessary to formulate a full expression.</source>
          <target state="new">You can also set the type to an interface or base class type, and then use casts if necessary to formulate a full expression.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Compiled bindings depend on code generation.</source>
          <target state="new">Compiled bindings depend on code generation.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>So if you use <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> in a resource dictionary then the resource dictionary needs to have a code-behind class.</source>
          <target state="new">So if you use <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> in a resource dictionary then the resource dictionary needs to have a code-behind class.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Resource dictionaries with {x:Bind}<ept id="p1">](../data-binding/data-binding-in-depth.md#resource-dictionaries-with-x-bind)</ept> for a code example.</source>
          <target state="new">See <bpt id="p1">[</bpt>Resource dictionaries with {x:Bind}<ept id="p1">](../data-binding/data-binding-in-depth.md#resource-dictionaries-with-x-bind)</ept> for a code example.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>   If you set a local value for a property that previously had a <bpt id="p2">**</bpt>{x:Bind}<ept id="p2">**</ept> markup extension to provide a local value, the binding is completely removed.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>   If you set a local value for a property that previously had a <bpt id="p2">**</bpt>{x:Bind}<ept id="p2">**</ept> markup extension to provide a local value, the binding is completely removed.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>   If you need to specify a single curly brace for a value, such as in <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Path<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209830)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ConverterParameter<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209827)</ept>, precede it with a backslash: <ph id="ph1">`\{`</ph>.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>   If you need to specify a single curly brace for a value, such as in <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Path<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209830)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ConverterParameter<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209827)</ept>, precede it with a backslash: <ph id="ph1">`\{`</ph>.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Alternatively, enclose the entire string that contains the braces that need escaping in a secondary quotation set, for example <ph id="ph1">`ConverterParameter='{Mix}'`</ph>.</source>
          <target state="new">Alternatively, enclose the entire string that contains the braces that need escaping in a secondary quotation set, for example <ph id="ph1">`ConverterParameter='{Mix}'`</ph>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Converter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209826)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ConverterLanguage<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701880)</ept> and <bpt id="p5">**</bpt>ConverterLanguage<ept id="p5">**</ept> are all related to the scenario of converting a value or type from the binding source into a type or value that is compatible with the binding target property.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Converter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209826)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ConverterLanguage<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701880)</ept> and <bpt id="p5">**</bpt>ConverterLanguage<ept id="p5">**</ept> are all related to the scenario of converting a value or type from the binding source into a type or value that is compatible with the binding target property.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For more info and examples, see the "Data conversions" section of <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</source>
          <target state="new">For more info and examples, see the "Data conversions" section of <bpt id="p1">[</bpt>Data binding in depth<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept>.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is a markup extension only, with no way to create or manipulate such bindings programmatically.</source>
          <target state="new"><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is a markup extension only, with no way to create or manipulate such bindings programmatically.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more info about markup extensions, see <bpt id="p1">[</bpt>XAML overview<ept id="p1">](xaml-overview.md)</ept>.</source>
          <target state="new">For more info about markup extensions, see <bpt id="p1">[</bpt>XAML overview<ept id="p1">](xaml-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="new">Examples</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This example XAML uses <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> with a <bpt id="p2">**</bpt>ListView.ItemTemplate<ept id="p2">**</ept> property.</source>
          <target state="new">This example XAML uses <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> with a <bpt id="p2">**</bpt>ListView.ItemTemplate<ept id="p2">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Note the declaration of an <bpt id="p1">**</bpt>x:DataType<ept id="p1">**</ept> value.</source>
          <target state="new">Note the declaration of an <bpt id="p1">**</bpt>x:DataType<ept id="p1">**</ept> value.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>