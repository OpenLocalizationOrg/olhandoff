<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74bda267e8a8722d03ffe07faeb7a2a06f096171</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\layout\layouts-with-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XAML gives you a flexible layout system to create a responsive UI.</source>
          <target state="new">XAML gives you a flexible layout system to create a responsive UI.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Define layouts with XAML</source>
          <target state="new">Define layouts with XAML</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Define page layouts with XAML</source>
          <target state="new">Define page layouts with XAML</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XAML gives you a flexible layout system that lets you use automatic sizing, layout panels, visual states, and even separate UI definitions, to create a responsive UI.</source>
          <target state="new">XAML gives you a flexible layout system that lets you use automatic sizing, layout panels, visual states, and even separate UI definitions, to create a responsive UI.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With a flexible design, you can make your app look great on screens with different app window sizes, resolutions, pixel densities, and orientations.</source>
          <target state="new">With a flexible design, you can make your app look great on screens with different app window sizes, resolutions, pixel densities, and orientations.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here, we discuss how to use XAML properties and layout panels to create a responsive UI for your app.</source>
          <target state="new">Here, we discuss how to use XAML properties and layout panels to create a responsive UI for your app.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We build on important info about responsive UI design and techniques found in  Responsive design 101 for Universal Windows Platform (UWP) apps and  UI basics for UWP apps.</source>
          <target state="new">We build on important info about responsive UI design and techniques found in  Responsive design 101 for Universal Windows Platform (UWP) apps and  UI basics for UWP apps.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You should understand what effective pixels are and understand each of these responsive design techniques as described in  Responsive design 101 for UWP apps: Reposition, Resize, Reflow, Reveal, Replace, and Re-architect.</source>
          <target state="new">You should understand what effective pixels are and understand each of these responsive design techniques as described in  Responsive design 101 for UWP apps: Reposition, Resize, Reflow, Reveal, Replace, and Re-architect.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Your app layout begins with the navigation model you choose, like whether to use a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Pivot<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.pivot.aspx)</ept> with the ‘tabs and pivot’ model or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SplitView<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.aspx)</ept> with the ‘nav pane’ model.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Your app layout begins with the navigation model you choose, like whether to use a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Pivot<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.pivot.aspx)</ept> with the ‘tabs and pivot’ model or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SplitView<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.aspx)</ept> with the ‘nav pane’ model.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more info about that, see  Navigation design basics for UWP apps and Navigation.</source>
          <target state="new">For more info about that, see  Navigation design basics for UWP apps and Navigation.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Here, we talk about techniques to make the layout of a single page or group of elements responsive.</source>
          <target state="new">Here, we talk about techniques to make the layout of a single page or group of elements responsive.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This info is applicable regardless of which navigation model you choose for your app.</source>
          <target state="new">This info is applicable regardless of which navigation model you choose for your app.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The XAML framework provides several levels of optimization you can use to create a responsive UI.</source>
          <target state="new">The XAML framework provides several levels of optimization you can use to create a responsive UI.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fluid layout<ept id="p1">**</ept><ph id="ph1">
</ph>  Use layout properties and panels to make your default UI fluid.</source>
          <target state="new"><bpt id="p1">**</bpt>Fluid layout<ept id="p1">**</ept><ph id="ph1">
</ph>  Use layout properties and panels to make your default UI fluid.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The foundation of an adaptive layout is the appropriate use of layout properties and panels to reposition, resize, and reflow content.</source>
          <target state="new">The foundation of an adaptive layout is the appropriate use of layout properties and panels to reposition, resize, and reflow content.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can set a fixed size on an element, or use automatic sizing to let the parent layout panel size it.</source>
          <target state="new">You can set a fixed size on an element, or use automatic sizing to let the parent layout panel size it.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The various <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.panel.aspx)</ept> classes, such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Grid<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>RelativePanel<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept> and <bpt id="p9">[</bpt><bpt id="p10">**</bpt>StackPanel<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept>, provide different ways to size and position their children.</source>
          <target state="new">The various <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Panel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.panel.aspx)</ept> classes, such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Grid<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>RelativePanel<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept> and <bpt id="p9">[</bpt><bpt id="p10">**</bpt>StackPanel<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept>, provide different ways to size and position their children.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Responsive layout<ept id="p1">**</ept><ph id="ph1">
</ph>  Use visual states to make significant alterations to your UI based on window size or other changes.</source>
          <target state="new"><bpt id="p1">**</bpt>Responsive layout<ept id="p1">**</ept><ph id="ph1">
</ph>  Use visual states to make significant alterations to your UI based on window size or other changes.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When your app window grows or shrinks beyond a certain amount, you might want to alter layout properties to reposition, resize, reflow, reveal, or replace sections of your UI.</source>
          <target state="new">When your app window grows or shrinks beyond a certain amount, you might want to alter layout properties to reposition, resize, reflow, reveal, or replace sections of your UI.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can define different visual states for your UI, and apply them when the window size crosses a specified threshold.</source>
          <target state="new">You can define different visual states for your UI, and apply them when the window size crosses a specified threshold.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AdaptiveTrigger<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</ept> provides an easy way to set the threshold where a state is applied.</source>
          <target state="new">An <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AdaptiveTrigger<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</ept> provides an easy way to set the threshold where a state is applied.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tailored layout<ept id="p1">**</ept><ph id="ph1">
</ph>  A tailored layout is optimized for a specific device family or range of screen sizes.</source>
          <target state="new"><bpt id="p1">**</bpt>Tailored layout<ept id="p1">**</ept><ph id="ph1">
</ph>  A tailored layout is optimized for a specific device family or range of screen sizes.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Within the device family, the layout should still respond and adapt to changes within the range of supported windows sizes.</source>
          <target state="new">Within the device family, the layout should still respond and adapt to changes within the range of supported windows sizes.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use separate XAML files to define distinct views for each device family.</source>
          <target state="new">Use separate XAML files to define distinct views for each device family.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can use separate XAML files with the same code file to define per-device family views of the UI.</source>
          <target state="new">You can use separate XAML files with the same code file to define per-device family views of the UI.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use separate XAML and code to provide different implementations for each device family.</source>
          <target state="new">Use separate XAML and code to provide different implementations for each device family.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can provide different implementations of a page (XAML and code), then navigate to a particular implementation based on the device family, screen size, or other factors.</source>
          <target state="new">You can provide different implementations of a page (XAML and code), then navigate to a particular implementation based on the device family, screen size, or other factors.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Layout properties and panels</source>
          <target state="new">Layout properties and panels</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Layout is the process of sizing and positioning objects in your UI.</source>
          <target state="new">Layout is the process of sizing and positioning objects in your UI.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To position visual objects, you must put them in a panel or other container object.</source>
          <target state="new">To position visual objects, you must put them in a panel or other container object.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The XAML framework provides various panel classes, such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>RelativePanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>StackPanel<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept>, which serve as containers and enable you to position and arrange the UI elements within them.</source>
          <target state="new">The XAML framework provides various panel classes, such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>RelativePanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>StackPanel<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept>, which serve as containers and enable you to position and arrange the UI elements within them.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The XAML layout system supports both static and fluid layouts.</source>
          <target state="new">The XAML layout system supports both static and fluid layouts.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In a static layout, you give controls explicit pixel sizes and positions.</source>
          <target state="new">In a static layout, you give controls explicit pixel sizes and positions.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When the user changes the resolution or orientation of their device, the UI doesn't change.</source>
          <target state="new">When the user changes the resolution or orientation of their device, the UI doesn't change.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Static layouts can become stretched, shrunken, or clipped across different form factors and display sizes.</source>
          <target state="new">Static layouts can become stretched, shrunken, or clipped across different form factors and display sizes.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Fluid layouts shrink, grow, and reflow to adapt to the visual space available on a device.</source>
          <target state="new">Fluid layouts shrink, grow, and reflow to adapt to the visual space available on a device.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To create a fluid layout, use automatic or proportional sizing for elements, alignment, margins, and padding, and let layout panels position their children as needed.</source>
          <target state="new">To create a fluid layout, use automatic or proportional sizing for elements, alignment, margins, and padding, and let layout panels position their children as needed.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You arrange child elements by specifying how they should be arranged in relationship to each other, and how they should be sized relative to their content and/or their parent.</source>
          <target state="new">You arrange child elements by specifying how they should be arranged in relationship to each other, and how they should be sized relative to their content and/or their parent.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In practice, you use a combination of static and fluid elements to create your UI.</source>
          <target state="new">In practice, you use a combination of static and fluid elements to create your UI.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You still use static elements and values in some places, but make sure that the overall UI is responsive and adapts to different resolutions, layouts, and views.</source>
          <target state="new">You still use static elements and values in some places, but make sure that the overall UI is responsive and adapts to different resolutions, layouts, and views.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Layout properties</source>
          <target state="new">Layout properties</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To control the size and position of an element, you set its layout properties.</source>
          <target state="new">To control the size and position of an element, you set its layout properties.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here are some common layout properties and their effect.</source>
          <target state="new">Here are some common layout properties and their effect.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Height and Width</source>
          <target state="new">Height and Width</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Height<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.height.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Width<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.width.aspx)</ept> properties to specify the size of an element.</source>
          <target state="new">Set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Height<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.height.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Width<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.width.aspx)</ept> properties to specify the size of an element.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use fixed values measured in effective pixels, or you can use auto or proportional sizing.</source>
          <target state="new">You can use fixed values measured in effective pixels, or you can use auto or proportional sizing.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To get the size of an element at runtime, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ActualHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.actualheight.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.actualwidth.aspx)</ept> properties instead of Height and Width.</source>
          <target state="new">To get the size of an element at runtime, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ActualHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.actualheight.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ActualWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.actualwidth.aspx)</ept> properties instead of Height and Width.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You use auto sizing to let UI elements resize to fit their content or parent container.</source>
          <target state="new">You use auto sizing to let UI elements resize to fit their content or parent container.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also use auto sizing with the rows and columns of a grid.</source>
          <target state="new">You can also use auto sizing with the rows and columns of a grid.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To use auto sizing, set the Height and/or Width of UI elements to <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept>.</source>
          <target state="new">To use auto sizing, set the Height and/or Width of UI elements to <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Whether an element resizes to its content or its container depends on the value of its <bpt id="p2">[</bpt><bpt id="p3">**</bpt>HorizontalAlignment<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>VerticalAlignment<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</ept> properties, and how the parent container handles sizing of its children.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Whether an element resizes to its content or its container depends on the value of its <bpt id="p2">[</bpt><bpt id="p3">**</bpt>HorizontalAlignment<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>VerticalAlignment<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</ept> properties, and how the parent container handles sizing of its children.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Alignment<ept id="p1">]()</ept> and <bpt id="p2">[</bpt>Layout panels<ept id="p2">]()</ept> later in this article.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Alignment<ept id="p1">]()</ept> and <bpt id="p2">[</bpt>Layout panels<ept id="p2">]()</ept> later in this article.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You use proportional sizing, also called <bpt id="p1">*</bpt>star sizing<ept id="p1">*</ept>, to distribute available space among the rows and columns of a grid by weighted proportions.</source>
          <target state="new">You use proportional sizing, also called <bpt id="p1">*</bpt>star sizing<ept id="p1">*</ept>, to distribute available space among the rows and columns of a grid by weighted proportions.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In XAML, star values are expressed as \* (or <bpt id="p1">*</bpt>n<ept id="p1">*</ept>\* for weighted star sizing).</source>
          <target state="new">In XAML, star values are expressed as \* (or <bpt id="p1">*</bpt>n<ept id="p1">*</ept>\* for weighted star sizing).</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, to specify that one column is 5 times wider than the second column in a 2-column layout, use "5<bpt id="p1">*</bpt>" and "<ept id="p1">*</ept>" for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Width<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.columndefinition.width.aspx)</ept> properties in the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ColumnDefinition<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.columndefinition.aspx)</ept> elements.</source>
          <target state="new">For example, to specify that one column is 5 times wider than the second column in a 2-column layout, use "5<bpt id="p1">*</bpt>" and "<ept id="p1">*</ept>" for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Width<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.columndefinition.width.aspx)</ept> properties in the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ColumnDefinition<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.columndefinition.aspx)</ept> elements.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This example combines fixed, auto, and proportional sizing in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept> with 4 columns.</source>
          <target state="new">This example combines fixed, auto, and proportional sizing in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept> with 4 columns.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Column_1</source>
          <target state="new">Column_1</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Auto</source>
          <target state="new">Auto</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The column will size to fit its content.</source>
          <target state="new">The column will size to fit its content.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Column_2</source>
          <target state="new">Column_2</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>After the Auto columns are calculated, the column gets part of the remaining width.</source>
          <target state="new">After the Auto columns are calculated, the column gets part of the remaining width.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Column_2 will be one-half as wide as Column_4.</source>
          <target state="new">Column_2 will be one-half as wide as Column_4.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Column_3</source>
          <target state="new">Column_3</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>44</source>
          <target state="new">44</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The column will be 44 pixels wide.</source>
          <target state="new">The column will be 44 pixels wide.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Column_4</source>
          <target state="new">Column_4</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="new">2</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>After the Auto columns are calculated, the column gets part of the remaining width.</source>
          <target state="new">After the Auto columns are calculated, the column gets part of the remaining width.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Column_4 will be twice as wide as Column_2.</source>
          <target state="new">Column_4 will be twice as wide as Column_2.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The default column width is "*", so you don't need to explicitly set this value for the second column.</source>
          <target state="new">The default column width is "*", so you don't need to explicitly set this value for the second column.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the Visual Studio XAML designer, the result looks like this.</source>
          <target state="new">In the Visual Studio XAML designer, the result looks like this.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A 4 column grid in the Visual Studio designer</source>
          <target state="new">A 4 column grid in the Visual Studio designer</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Size constraints</source>
          <target state="new">Size constraints</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you use auto sizing in your UI, you might still need to place constraints on the size of an element.</source>
          <target state="new">When you use auto sizing in your UI, you might still need to place constraints on the size of an element.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MinWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.minwidth.aspx)</ept><ph id="ph1">/</ph><bpt id="p3">[</bpt><bpt id="p4">**</bpt>MaxWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.maxwidth.aspx)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>MinHeight<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.minheight.aspx)</ept><ph id="ph2">/</ph><bpt id="p7">[</bpt><bpt id="p8">**</bpt>MaxHeight<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.maxheight.aspx)</ept> properties to specify values that constrain the size of an element while allowing fluid resizing.</source>
          <target state="new">You can set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MinWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.minwidth.aspx)</ept><ph id="ph1">/</ph><bpt id="p3">[</bpt><bpt id="p4">**</bpt>MaxWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.maxwidth.aspx)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>MinHeight<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.minheight.aspx)</ept><ph id="ph2">/</ph><bpt id="p7">[</bpt><bpt id="p8">**</bpt>MaxHeight<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.maxheight.aspx)</ept> properties to specify values that constrain the size of an element while allowing fluid resizing.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In a Grid, MinWidth/MaxWidth can also be used with column definitions, and MinHeight/MaxHeight can be used with row definitions.</source>
          <target state="new">In a Grid, MinWidth/MaxWidth can also be used with column definitions, and MinHeight/MaxHeight can be used with row definitions.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Alignment</source>
          <target state="new">Alignment</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HorizontalAlignment<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VerticalAlignment<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</ept> properties to specify how an element should be positioned within its parent container.</source>
          <target state="new">Use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HorizontalAlignment<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VerticalAlignment<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</ept> properties to specify how an element should be positioned within its parent container.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The values for <bpt id="p1">**</bpt>HorizontalAlignment<ept id="p1">**</ept> are <bpt id="p2">**</bpt>Left<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Center<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Right<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Stretch<ept id="p5">**</ept>.</source>
          <target state="new">The values for <bpt id="p1">**</bpt>HorizontalAlignment<ept id="p1">**</ept> are <bpt id="p2">**</bpt>Left<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Center<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Right<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Stretch<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The values for <bpt id="p1">**</bpt>VerticalAlignment<ept id="p1">**</ept> are <bpt id="p2">**</bpt>Top<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Center<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Bottom<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Stretch<ept id="p5">**</ept>.</source>
          <target state="new">The values for <bpt id="p1">**</bpt>VerticalAlignment<ept id="p1">**</ept> are <bpt id="p2">**</bpt>Top<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Center<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Bottom<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Stretch<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>With the <bpt id="p1">**</bpt>Stretch<ept id="p1">**</ept> alignment, elements fill all the space they're provided in the parent container.</source>
          <target state="new">With the <bpt id="p1">**</bpt>Stretch<ept id="p1">**</ept> alignment, elements fill all the space they're provided in the parent container.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Stretch is the default for both alignment properties.</source>
          <target state="new">Stretch is the default for both alignment properties.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, some controls, like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.button.aspx)</ept>, override this value in their default style.</source>
          <target state="new">However, some controls, like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.button.aspx)</ept>, override this value in their default style.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Any element that can have child elements can treat the Stretch value for HorizontalAlignment and VerticalAlignment properties uniquely.</source>
          <target state="new">Any element that can have child elements can treat the Stretch value for HorizontalAlignment and VerticalAlignment properties uniquely.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, an element using the default Stretch values placed in a Grid stretches to fill the cell that contains it.</source>
          <target state="new">For example, an element using the default Stretch values placed in a Grid stretches to fill the cell that contains it.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The same element placed in a Canvas sizes to its content.</source>
          <target state="new">The same element placed in a Canvas sizes to its content.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more info about how each panel handles the Stretch value, see the <bpt id="p1">[</bpt>Layout panels<ept id="p1">](layout-panels.md)</ept> article.</source>
          <target state="new">For more info about how each panel handles the Stretch value, see the <bpt id="p1">[</bpt>Layout panels<ept id="p1">](layout-panels.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more info, see the <bpt id="p1">[</bpt>Alignment, margin, and padding<ept id="p1">](alignment-margin-padding.md)</ept> article, and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>HorizontalAlignment<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>VerticalAlignment<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</ept> reference pages.</source>
          <target state="new">For more info, see the <bpt id="p1">[</bpt>Alignment, margin, and padding<ept id="p1">](alignment-margin-padding.md)</ept> article, and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>HorizontalAlignment<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>VerticalAlignment<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</ept> reference pages.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Controls also have <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HorizontalContentAlignment<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.horizontalcontentalignment.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VerticalContentAlignment<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.verticalcontentalignment.aspx)</ept> properties that you use to specify how they position their content.</source>
          <target state="new">Controls also have <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HorizontalContentAlignment<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.horizontalcontentalignment.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VerticalContentAlignment<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.verticalcontentalignment.aspx)</ept> properties that you use to specify how they position their content.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Not all controls make use of these properties.</source>
          <target state="new">Not all controls make use of these properties.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>They only affect layout behavior for a control when its template uses the properties as the source of a HorizontalAlignment/VerticalAlignment value for presenters or content areas within it.</source>
          <target state="new">They only affect layout behavior for a control when its template uses the properties as the source of a HorizontalAlignment/VerticalAlignment value for presenters or content areas within it.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">[</bpt>TextBlock<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.aspx)</ept>, <bpt id="p2">[</bpt>TextBox<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.aspx)</ept>, and <bpt id="p3">[</bpt>RichTextBlock<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richtextblock.aspx)</ept>, use the <bpt id="p4">**</bpt>TextAlignment<ept id="p4">**</ept> property to control the alignment of text in the control.</source>
          <target state="new">For <bpt id="p1">[</bpt>TextBlock<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.aspx)</ept>, <bpt id="p2">[</bpt>TextBox<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.aspx)</ept>, and <bpt id="p3">[</bpt>RichTextBlock<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richtextblock.aspx)</ept>, use the <bpt id="p4">**</bpt>TextAlignment<ept id="p4">**</ept> property to control the alignment of text in the control.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Margins and padding</source>
          <target state="new">Margins and padding</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Margin<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.margin.aspx)</ept> property to control the amount of empty space around an element.</source>
          <target state="new">Set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Margin<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.margin.aspx)</ept> property to control the amount of empty space around an element.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Margin does not add pixels to the ActualHeight and ActualWidth, and is also not considered part of the element for purposes of hit testing and sourcing input events.</source>
          <target state="new">Margin does not add pixels to the ActualHeight and ActualWidth, and is also not considered part of the element for purposes of hit testing and sourcing input events.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Padding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.padding.aspx)</ept> property to control the amount of space between the inner border of an element and its content.</source>
          <target state="new">Set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Padding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.padding.aspx)</ept> property to control the amount of space between the inner border of an element and its content.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A positive Padding value decreases the content area of the element.</source>
          <target state="new">A positive Padding value decreases the content area of the element.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This diagram shows how Margin and Padding are applied to an element.</source>
          <target state="new">This diagram shows how Margin and Padding are applied to an element.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Margin and padding</source>
          <target state="new">Margin and padding</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The left, right, top, and bottom values for Margin and Padding do not need to be symmetrical, and they can be set to negative values.</source>
          <target state="new">The left, right, top, and bottom values for Margin and Padding do not need to be symmetrical, and they can be set to negative values.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Alignment, margin, and padding<ept id="p1">](alignment-margin-padding.md)</ept>, and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Margin<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.margin.aspx)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Padding<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.padding.aspx)</ept> reference pages.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Alignment, margin, and padding<ept id="p1">](alignment-margin-padding.md)</ept>, and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Margin<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.margin.aspx)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Padding<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.padding.aspx)</ept> reference pages.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Let's look at the effects of Margin and Padding on real controls.</source>
          <target state="new">Let's look at the effects of Margin and Padding on real controls.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Here’s a TextBox inside of a Grid with the default Margin and Padding values of 0.</source>
          <target state="new">Here’s a TextBox inside of a Grid with the default Margin and Padding values of 0.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>TextBox with margin and padding of 0</source>
          <target state="new">TextBox with margin and padding of 0</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Here’s the same TextBox and Grid with Margin and Padding values on the TextBox as shown in this XAML.</source>
          <target state="new">Here’s the same TextBox and Grid with Margin and Padding values on the TextBox as shown in this XAML.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>TextBox with positive margin and padding values</source>
          <target state="new">TextBox with positive margin and padding values</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Visibility</source>
          <target state="new">Visibility</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can reveal or hide an element by setting its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Visibility<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.visibility.aspx)</ept> property to one of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visibility<ept id="p4">**</ept> enumeration<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visibility.aspx)</ept> values: <bpt id="p5">**</bpt>Visible<ept id="p5">**</ept> or <bpt id="p6">**</bpt>Collapsed<ept id="p6">**</ept>.</source>
          <target state="new">You can reveal or hide an element by setting its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Visibility<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.visibility.aspx)</ept> property to one of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visibility<ept id="p4">**</ept> enumeration<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visibility.aspx)</ept> values: <bpt id="p5">**</bpt>Visible<ept id="p5">**</ept> or <bpt id="p6">**</bpt>Collapsed<ept id="p6">**</ept>.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When an element is Collapsed, it doesn't take up any space in the UI layout.</source>
          <target state="new">When an element is Collapsed, it doesn't take up any space in the UI layout.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can change an element's Visibility property in code or in a visual state.</source>
          <target state="new">You can change an element's Visibility property in code or in a visual state.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When the Visibility of an element is changed, all of its child elements are also changed.</source>
          <target state="new">When the Visibility of an element is changed, all of its child elements are also changed.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You can replace sections of your UI by revealing one panel while collapsing another.</source>
          <target state="new">You can replace sections of your UI by revealing one panel while collapsing another.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>When you have elements in your UI that are <bpt id="p2">**</bpt>Collapsed<ept id="p2">**</ept> by default, the objects are still created at startup, even though they aren't visible.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>When you have elements in your UI that are <bpt id="p2">**</bpt>Collapsed<ept id="p2">**</ept> by default, the objects are still created at startup, even though they aren't visible.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can defer loading these elements until they are shown by setting the <bpt id="p1">**</bpt>x:DeferLoadStrategy attribute<ept id="p1">**</ept> to "Lazy".</source>
          <target state="new">You can defer loading these elements until they are shown by setting the <bpt id="p1">**</bpt>x:DeferLoadStrategy attribute<ept id="p1">**</ept> to "Lazy".</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This can improve startup performance.</source>
          <target state="new">This can improve startup performance.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>x:DeferLoadStrategy attribute<ept id="p1">](../xaml-platform/x-deferloadstrategy-attribute.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>x:DeferLoadStrategy attribute<ept id="p1">](../xaml-platform/x-deferloadstrategy-attribute.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Style resources</source>
          <target state="new">Style resources</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You don't have to set each property value individually on a control.</source>
          <target state="new">You don't have to set each property value individually on a control.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>It's typically more efficient to group property values into a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.style.aspx)</ept> resource and apply the Style to a control.</source>
          <target state="new">It's typically more efficient to group property values into a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.style.aspx)</ept> resource and apply the Style to a control.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This is especially true when you need to apply the same property values to many controls.</source>
          <target state="new">This is especially true when you need to apply the same property values to many controls.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more info about using styles, see Styling controls.</source>
          <target state="new">For more info about using styles, see Styling controls.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Layout panels</source>
          <target state="new">Layout panels</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Most app content can be organized into some form of groupings or hierarchies.</source>
          <target state="new">Most app content can be organized into some form of groupings or hierarchies.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You use layout panels to group and arrange UI elements in your app.</source>
          <target state="new">You use layout panels to group and arrange UI elements in your app.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The main thing to consider when choosing a layout panel is how the panel positions and sizes its child elements.</source>
          <target state="new">The main thing to consider when choosing a layout panel is how the panel positions and sizes its child elements.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You might also need to consider how overlapping child elements are layered on top of each other.</source>
          <target state="new">You might also need to consider how overlapping child elements are layered on top of each other.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Here's a comparison of the main features of the panel controls provided in the XAML framework.</source>
          <target state="new">Here's a comparison of the main features of the panel controls provided in the XAML framework.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Panel Control</source>
          <target state="new">Panel Control</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Canvas</source>
          <target state="new">Canvas</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Canvas<ept id="p1">**</ept> doesn’t support fluid UI; you control all aspects of positioning and sizing child elements.</source>
          <target state="new"><bpt id="p1">**</bpt>Canvas<ept id="p1">**</ept> doesn’t support fluid UI; you control all aspects of positioning and sizing child elements.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>You typically use it for special cases like creating graphics or to define small static areas of a larger adaptive UI.</source>
          <target state="new">You typically use it for special cases like creating graphics or to define small static areas of a larger adaptive UI.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can use code or visual states to reposition elements at runtime.</source>
          <target state="new">You can use code or visual states to reposition elements at runtime.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Elements are positioned absolutely using Canvas.Top and Canvas.Left attached properties.</source>
          <target state="new">Elements are positioned absolutely using Canvas.Top and Canvas.Left attached properties.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Layering can be explicitly specified using the Canvas.ZIndex attached property.</source>
          <target state="new">Layering can be explicitly specified using the Canvas.ZIndex attached property.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Stretch values for HorizontalAlignment/VerticalAlignment are ignored.</source>
          <target state="new">Stretch values for HorizontalAlignment/VerticalAlignment are ignored.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If an element's size is not set explicitly, it sizes to its content.</source>
          <target state="new">If an element's size is not set explicitly, it sizes to its content.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Child content is not visually clipped if larger than the panel.</source>
          <target state="new">Child content is not visually clipped if larger than the panel.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Child content is not constrained by the bounds of the panel.</source>
          <target state="new">Child content is not constrained by the bounds of the panel.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Grid</source>
          <target state="new">Grid</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Grid<ept id="p1">**</ept> supports fluid resizing of child elements.</source>
          <target state="new"><bpt id="p1">**</bpt>Grid<ept id="p1">**</ept> supports fluid resizing of child elements.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>You can use code or visual states to reposition and reflow elements.</source>
          <target state="new">You can use code or visual states to reposition and reflow elements.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Elements are arranged in rows and columns using Grid.Row and Grid.Column attached properties.</source>
          <target state="new">Elements are arranged in rows and columns using Grid.Row and Grid.Column attached properties.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Elements can span multiple rows and columns using Grid.RowSpan and Grid.ColumnSpan attached properties.</source>
          <target state="new">Elements can span multiple rows and columns using Grid.RowSpan and Grid.ColumnSpan attached properties.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Stretch values for HorizontalAlignment/VerticalAlignment are respected.</source>
          <target state="new">Stretch values for HorizontalAlignment/VerticalAlignment are respected.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If an element's size is not set explicitly, it stretches to fill the available space in the grid cell.</source>
          <target state="new">If an element's size is not set explicitly, it stretches to fill the available space in the grid cell.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Child content is visually clipped if larger than the panel.</source>
          <target state="new">Child content is visually clipped if larger than the panel.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</source>
          <target state="new">Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>RelativePanel</source>
          <target state="new">RelativePanel</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Elements are arranged in relation to the edge or center of the panel, and in relation to each other.</source>
          <target state="new">Elements are arranged in relation to the edge or center of the panel, and in relation to each other.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Elements are positioned using a variety of attached properties that control panel alignment, sibling alignment, and sibling position.</source>
          <target state="new">Elements are positioned using a variety of attached properties that control panel alignment, sibling alignment, and sibling position.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Stretch values for HorizontalAlignment/VerticalAlignment are ignored unless RelativePanel attached properties for alignment cause stretching (for example, an element is aligned to both the right and left edges of the panel).</source>
          <target state="new">Stretch values for HorizontalAlignment/VerticalAlignment are ignored unless RelativePanel attached properties for alignment cause stretching (for example, an element is aligned to both the right and left edges of the panel).</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If an element's size is not set explicitly and it's not stretched, it sizes to its content.</source>
          <target state="new">If an element's size is not set explicitly and it's not stretched, it sizes to its content.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Child content is visually clipped if larger than the panel.</source>
          <target state="new">Child content is visually clipped if larger than the panel.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</source>
          <target state="new">Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>StackPanel</source>
          <target state="new">StackPanel</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Elements are stacked in a single line either vertically or horizontally.</source>
          <target state="new">Elements are stacked in a single line either vertically or horizontally.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Stretch values for HorizontalAlignment/VerticalAlignment are respected in the direction opposite the Orientation property.</source>
          <target state="new">Stretch values for HorizontalAlignment/VerticalAlignment are respected in the direction opposite the Orientation property.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If an element's size is not set explicitly, it stretches to fill the available width (or height if the Orientation is Horizontal).</source>
          <target state="new">If an element's size is not set explicitly, it stretches to fill the available width (or height if the Orientation is Horizontal).</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In the direction specified by the Orientation property, an element sizes to its content.</source>
          <target state="new">In the direction specified by the Orientation property, an element sizes to its content.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Child content is visually clipped if larger than the panel.</source>
          <target state="new">Child content is visually clipped if larger than the panel.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Content size is not constrained by the bounds of the panel in the direction specified by the Orientation property, so scrollable content stretches beyond the panel bounds and doesn't show scrollbars.</source>
          <target state="new">Content size is not constrained by the bounds of the panel in the direction specified by the Orientation property, so scrollable content stretches beyond the panel bounds and doesn't show scrollbars.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You must explicitly constrain the height (or width) of the child content to make its scrollbars show.</source>
          <target state="new">You must explicitly constrain the height (or width) of the child content to make its scrollbars show.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>VariableSizedWrapGrid</source>
          <target state="new">VariableSizedWrapGrid</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Elements are arranged in rows or columns that automatically wrap to a new row or column when the MaximumRowsOrColumns value is reached.</source>
          <target state="new">Elements are arranged in rows or columns that automatically wrap to a new row or column when the MaximumRowsOrColumns value is reached.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Whether elements are arranged in rows or columns is specified by the Orientation property.</source>
          <target state="new">Whether elements are arranged in rows or columns is specified by the Orientation property.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Elements can span multiple rows and columns using VariableSizedWrapGrid.RowSpan and VariableSizedWrapGrid.ColumnSpan attached properties.</source>
          <target state="new">Elements can span multiple rows and columns using VariableSizedWrapGrid.RowSpan and VariableSizedWrapGrid.ColumnSpan attached properties.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Stretch values for HorizontalAlignment/VerticalAlignment are ignored.</source>
          <target state="new">Stretch values for HorizontalAlignment/VerticalAlignment are ignored.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Elements are sized as specified by the ItemHeight and ItemWidth properties.</source>
          <target state="new">Elements are sized as specified by the ItemHeight and ItemWidth properties.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If these properties are not set, the item in the first cell sizes to its content, and all other cells inherit this size.</source>
          <target state="new">If these properties are not set, the item in the first cell sizes to its content, and all other cells inherit this size.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Child content is visually clipped if larger than the panel.</source>
          <target state="new">Child content is visually clipped if larger than the panel.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</source>
          <target state="new">Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For detailed information and examples of these panels, see <bpt id="p1">[</bpt>Layout panels<ept id="p1">](layout-panels.md)</ept>.</source>
          <target state="new">For detailed information and examples of these panels, see <bpt id="p1">[</bpt>Layout panels<ept id="p1">](layout-panels.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Also, see the <bpt id="p1">[</bpt>Responsive techniques sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=620024)</ept>.</source>
          <target state="new">Also, see the <bpt id="p1">[</bpt>Responsive techniques sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=620024)</ept>.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Layout panels let you organize your UI into logical groups of controls.</source>
          <target state="new">Layout panels let you organize your UI into logical groups of controls.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>When you use them with appropriate property settings, you get some support for automatic resizing, repositioning, and reflowing of UI elements.</source>
          <target state="new">When you use them with appropriate property settings, you get some support for automatic resizing, repositioning, and reflowing of UI elements.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>However, most UI layouts need further modification when there are significant changes to the window size.</source>
          <target state="new">However, most UI layouts need further modification when there are significant changes to the window size.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For this, you can use visual states.</source>
          <target state="new">For this, you can use visual states.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Visual states and state triggers</source>
          <target state="new">Visual states and state triggers</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Use visual states to reposition, resize, reflow, reveal, or replace sections of your UI based on screen size or other factors.</source>
          <target state="new">Use visual states to reposition, resize, reflow, reveal, or replace sections of your UI based on screen size or other factors.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualState<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstate.aspx)</ept> defines property values that are applied to an element when it’s in a particular state.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualState<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstate.aspx)</ept> defines property values that are applied to an element when it’s in a particular state.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>You group visual states in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.aspx)</ept> that applies the appropriate VisualState when the specified conditions are met.</source>
          <target state="new">You group visual states in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.aspx)</ept> that applies the appropriate VisualState when the specified conditions are met.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Set visual states in code</source>
          <target state="new">Set visual states in code</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>To apply a visual state from code, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager.GoToState<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.gotostate.aspx)</ept> method.</source>
          <target state="new">To apply a visual state from code, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager.GoToState<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.gotostate.aspx)</ept> method.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For example, to apply a state when the app window is a particular size, handle the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SizeChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.window.sizechanged.aspx)</ept> event and call <bpt id="p3">**</bpt>GoToState<ept id="p3">**</ept> to apply the appropriate state.</source>
          <target state="new">For example, to apply a state when the app window is a particular size, handle the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SizeChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.window.sizechanged.aspx)</ept> event and call <bpt id="p3">**</bpt>GoToState<ept id="p3">**</ept> to apply the appropriate state.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Here, a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateGroup<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstategroup.aspx)</ept> contains 2 VisualState definitions.</source>
          <target state="new">Here, a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateGroup<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstategroup.aspx)</ept> contains 2 VisualState definitions.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The first, <ph id="ph1">`DefaultState`</ph>, is empty.</source>
          <target state="new">The first, <ph id="ph1">`DefaultState`</ph>, is empty.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>When it's applied, the values defined in the XAML page are applied.</source>
          <target state="new">When it's applied, the values defined in the XAML page are applied.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The second, <ph id="ph1">`WideState`</ph>, changes the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DisplayMode<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.displaymode.aspx)</ept> property of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SplitView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.aspx)</ept> to <bpt id="p5">**</bpt>Inline<ept id="p5">**</ept> and opens the pane.</source>
          <target state="new">The second, <ph id="ph1">`WideState`</ph>, changes the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DisplayMode<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.displaymode.aspx)</ept> property of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SplitView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.aspx)</ept> to <bpt id="p5">**</bpt>Inline<ept id="p5">**</ept> and opens the pane.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This state is applied in the SizeChanged event handler if the window width is 720 effective pixels or greater.</source>
          <target state="new">This state is applied in the SizeChanged event handler if the window width is 720 effective pixels or greater.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Set visual states in XAML markup</source>
          <target state="new">Set visual states in XAML markup</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Prior to Windows 10, VisualState definitions required <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Storyboard<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.animation.storyboard.aspx)</ept> objects for property changes, and you had to call <bpt id="p3">**</bpt>GoToState<ept id="p3">**</ept> in code to apply the state.</source>
          <target state="new">Prior to Windows 10, VisualState definitions required <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Storyboard<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.animation.storyboard.aspx)</ept> objects for property changes, and you had to call <bpt id="p3">**</bpt>GoToState<ept id="p3">**</ept> in code to apply the state.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This is shown in the previous example.</source>
          <target state="new">This is shown in the previous example.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>You will still see many examples that use this syntax, or you might have existing code that uses it.</source>
          <target state="new">You will still see many examples that use this syntax, or you might have existing code that uses it.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Starting in Windows 10, you can use the simplified <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Setter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.setter.aspx)</ept> syntax shown here, and you can use a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StateTrigger<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.statetrigger.aspx)</ept> in your XAML markup to apply the state.</source>
          <target state="new">Starting in Windows 10, you can use the simplified <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Setter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.setter.aspx)</ept> syntax shown here, and you can use a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StateTrigger<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.statetrigger.aspx)</ept> in your XAML markup to apply the state.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>You use state triggers to create simple rules that automatically trigger visual state changes in response to an app event.</source>
          <target state="new">You use state triggers to create simple rules that automatically trigger visual state changes in response to an app event.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This example does the same thing as the previous example, but uses the simplified <bpt id="p1">**</bpt>Setter<ept id="p1">**</ept> syntax instead of a Storyboard to define property changes.</source>
          <target state="new">This example does the same thing as the previous example, but uses the simplified <bpt id="p1">**</bpt>Setter<ept id="p1">**</ept> syntax instead of a Storyboard to define property changes.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>And instead of calling GoToState, it uses the built in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AdaptiveTrigger<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</ept> state trigger to apply the state.</source>
          <target state="new">And instead of calling GoToState, it uses the built in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AdaptiveTrigger<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</ept> state trigger to apply the state.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>When you use state triggers, you don't need to define an empty <ph id="ph1">`DefaultState`</ph>.</source>
          <target state="new">When you use state triggers, you don't need to define an empty <ph id="ph1">`DefaultState`</ph>.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The default settings are reapplied automatically when the conditions of the state trigger are no longer met.</source>
          <target state="new">The default settings are reapplied automatically when the conditions of the state trigger are no longer met.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>In the previous example, the VisualStateManager.VisualStateGroups attached property is set on the <bpt id="p2">**</bpt>Grid<ept id="p2">**</ept> element.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>In the previous example, the VisualStateManager.VisualStateGroups attached property is set on the <bpt id="p2">**</bpt>Grid<ept id="p2">**</ept> element.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>When you use StateTriggers, always ensure that VisualStateGroups is attached to the first child of the root in order for the triggers to take effect automatically.</source>
          <target state="new">When you use StateTriggers, always ensure that VisualStateGroups is attached to the first child of the root in order for the triggers to take effect automatically.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>(Here, <bpt id="p1">**</bpt>Grid<ept id="p1">**</ept> is the first child of the root <bpt id="p2">**</bpt>Page<ept id="p2">**</ept> element.)</source>
          <target state="new">(Here, <bpt id="p1">**</bpt>Grid<ept id="p1">**</ept> is the first child of the root <bpt id="p2">**</bpt>Page<ept id="p2">**</ept> element.)</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Attached property syntax</source>
          <target state="new">Attached property syntax</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In a VisualState, you typically set a value for a control property, or for one of the attached properties of the panel that contains the control.</source>
          <target state="new">In a VisualState, you typically set a value for a control property, or for one of the attached properties of the panel that contains the control.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>When you set an attached property, use parentheses around the attached property name.</source>
          <target state="new">When you set an attached property, use parentheses around the attached property name.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This example shows how to set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativePanel.AlignHorizontalCenterWithPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignhorizontalcenterwithpanel.aspx)</ept> attached property on a TextBox named <ph id="ph1">`myTextBox`</ph>.</source>
          <target state="new">This example shows how to set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativePanel.AlignHorizontalCenterWithPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignhorizontalcenterwithpanel.aspx)</ept> attached property on a TextBox named <ph id="ph1">`myTextBox`</ph>.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The first XAML uses <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObjectAnimationUsingKeyFrames<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.animation.objectanimationusingkeyframes.aspx)</ept> syntax and the second uses <bpt id="p3">**</bpt>Setter<ept id="p3">**</ept> syntax.</source>
          <target state="new">The first XAML uses <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObjectAnimationUsingKeyFrames<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.animation.objectanimationusingkeyframes.aspx)</ept> syntax and the second uses <bpt id="p3">**</bpt>Setter<ept id="p3">**</ept> syntax.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Custom state triggers</source>
          <target state="new">Custom state triggers</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>You can extend the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StateTrigger<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.statetrigger.aspx)</ept> class to create custom triggers for a wide range of scenarios.</source>
          <target state="new">You can extend the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StateTrigger<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.statetrigger.aspx)</ept> class to create custom triggers for a wide range of scenarios.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For example, you can create a StateTrigger to trigger different states based on input type, then increase the margins around a control when the input type is touch.</source>
          <target state="new">For example, you can create a StateTrigger to trigger different states based on input type, then increase the margins around a control when the input type is touch.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Or create a StateTrigger to apply different states based on the device family the app is run on.</source>
          <target state="new">Or create a StateTrigger to apply different states based on the device family the app is run on.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For examples of how to build custom triggers and use them to create optimized UI experiences from within a single XAML view, see the <bpt id="p1">[</bpt>State triggers sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=620025)</ept>.</source>
          <target state="new">For examples of how to build custom triggers and use them to create optimized UI experiences from within a single XAML view, see the <bpt id="p1">[</bpt>State triggers sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=620025)</ept>.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Visual states and styles</source>
          <target state="new">Visual states and styles</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>You can use Style resources in visual states to apply a set of property changes to multiple controls.</source>
          <target state="new">You can use Style resources in visual states to apply a set of property changes to multiple controls.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For more info about using styles, see Styling controls.</source>
          <target state="new">For more info about using styles, see Styling controls.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In this simplified XAML from the State triggers sample, a Style resource is applied to a Button to adjust the size and margins for mouse or touch input.</source>
          <target state="new">In this simplified XAML from the State triggers sample, a Style resource is applied to a Button to adjust the size and margins for mouse or touch input.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For the complete code and the definition of the custom state trigger, see the <bpt id="p1">[</bpt>State triggers sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=620025)</ept>.</source>
          <target state="new">For the complete code and the definition of the custom state trigger, see the <bpt id="p1">[</bpt>State triggers sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=620025)</ept>.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Tailored layouts</source>
          <target state="new">Tailored layouts</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>When you make significant changes to your UI layout on different devices, you might find it more convenient to define a separate UI file with a layout tailored to the device, rather than adapting a single UI.</source>
          <target state="new">When you make significant changes to your UI layout on different devices, you might find it more convenient to define a separate UI file with a layout tailored to the device, rather than adapting a single UI.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If the functionality is the same across devices, you can define separate XAML views that share the same code file.</source>
          <target state="new">If the functionality is the same across devices, you can define separate XAML views that share the same code file.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>If both the view and the functionality differ significantly across devices, you can define separate Pages, and choose which Page to navigate to when the app is loaded.</source>
          <target state="new">If both the view and the functionality differ significantly across devices, you can define separate Pages, and choose which Page to navigate to when the app is loaded.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Separate XAML views per device family</source>
          <target state="new">Separate XAML views per device family</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Use XAML views to create different UI definitions that share the same code-behind.</source>
          <target state="new">Use XAML views to create different UI definitions that share the same code-behind.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You can provide a unique UI definition for each device family.</source>
          <target state="new">You can provide a unique UI definition for each device family.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Follow these steps to add a XAML view to your app.</source>
          <target state="new">Follow these steps to add a XAML view to your app.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>To add a XAML view to an app</source>
          <target state="new">To add a XAML view to an app</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Select Project &gt; Add New Item.</source>
          <target state="new">Select Project &gt; Add New Item.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The Add New Item dialog box opens.</source>
          <target state="new">The Add New Item dialog box opens.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Make sure a folder or the project, and not the solution, is selected in Solution Explorer.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Make sure a folder or the project, and not the solution, is selected in Solution Explorer.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Under Visual C# or Visual Basic in the left pane, pick the XAML template type.</source>
          <target state="new">Under Visual C# or Visual Basic in the left pane, pick the XAML template type.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>In the center pane, pick XAML View.</source>
          <target state="new">In the center pane, pick XAML View.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Enter the name for the view.</source>
          <target state="new">Enter the name for the view.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The view must be named correctly.</source>
          <target state="new">The view must be named correctly.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For more info on naming, see the remainder of this section.</source>
          <target state="new">For more info on naming, see the remainder of this section.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Click Add.</source>
          <target state="new">Click Add.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The file is added to the project.</source>
          <target state="new">The file is added to the project.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The previous steps create only a XAML file, but not an associated code-behind file.</source>
          <target state="new">The previous steps create only a XAML file, but not an associated code-behind file.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Instead, the XAML view is associated with an existing code-behind file using a "DeviceName" qualifier that's part of the file or folder name.</source>
          <target state="new">Instead, the XAML view is associated with an existing code-behind file using a "DeviceName" qualifier that's part of the file or folder name.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>This qualifier name can be mapped to a string value that represents the device family of the device that your app is currently running on, such as, "Desktop", "Mobile", and the names of the other device families (see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceContext.QualifierValues<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcecontext.qualifiervalues.aspx)</ept>).</source>
          <target state="new">This qualifier name can be mapped to a string value that represents the device family of the device that your app is currently running on, such as, "Desktop", "Mobile", and the names of the other device families (see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceContext.QualifierValues<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcecontext.qualifiervalues.aspx)</ept>).</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>You can add the qualifier to the file name, or add the file to a folder that has the qualifier name.</source>
          <target state="new">You can add the qualifier to the file name, or add the file to a folder that has the qualifier name.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Use file name</source>
          <target state="new">Use file name</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>To use the qualifier name with the file, use this format: <bpt id="p1">*</bpt>[pageName]<ept id="p1">*</ept>.DeviceFamily-<bpt id="p2">*</bpt>[qualifierString]<ept id="p2">*</ept>.xaml.</source>
          <target state="new">To use the qualifier name with the file, use this format: <bpt id="p1">*</bpt>[pageName]<ept id="p1">*</ept>.DeviceFamily-<bpt id="p2">*</bpt>[qualifierString]<ept id="p2">*</ept>.xaml.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Let's look at an example for a file named MainPage.xaml.</source>
          <target state="new">Let's look at an example for a file named MainPage.xaml.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>To create a view for mobile devices, name the XAML view MainPage.DeviceFamily-Mobile.xaml.</source>
          <target state="new">To create a view for mobile devices, name the XAML view MainPage.DeviceFamily-Mobile.xaml.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>To create a view for PC devices, name the view MainPage.DeviceFamily-Desktop.xaml.</source>
          <target state="new">To create a view for PC devices, name the view MainPage.DeviceFamily-Desktop.xaml.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Here's what the solution looks like in Microsoft Visual Studio.</source>
          <target state="new">Here's what the solution looks like in Microsoft Visual Studio.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>XAML views with qualified file names</source>
          <target state="new">XAML views with qualified file names</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Use folder name</source>
          <target state="new">Use folder name</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>To organize the views in your Visual Studio project using folders, you can use the qualifier name with the folder.</source>
          <target state="new">To organize the views in your Visual Studio project using folders, you can use the qualifier name with the folder.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>To do so, name your folder like this: DeviceFamily-<bpt id="p1">*</bpt>[qualifierString]<ept id="p1">*</ept>.</source>
          <target state="new">To do so, name your folder like this: DeviceFamily-<bpt id="p1">*</bpt>[qualifierString]<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In this case, each XAML view file has the same name.</source>
          <target state="new">In this case, each XAML view file has the same name.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Don't include the qualifier in the file name.</source>
          <target state="new">Don't include the qualifier in the file name.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Here's an example, again for a file named MainPage.xaml.</source>
          <target state="new">Here's an example, again for a file named MainPage.xaml.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>To create a view for mobile devices, create a folder named "DeviceFamily-Mobile", and place a XAML view named MainPage.xaml into it.</source>
          <target state="new">To create a view for mobile devices, create a folder named "DeviceFamily-Mobile", and place a XAML view named MainPage.xaml into it.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>To create a view for PC devices, create a folder named "DeviceFamily-Desktop", and place another XAML view named MainPage.xaml into it.</source>
          <target state="new">To create a view for PC devices, create a folder named "DeviceFamily-Desktop", and place another XAML view named MainPage.xaml into it.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Here's what the solution looks like in Visual Studio.</source>
          <target state="new">Here's what the solution looks like in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>XAML views in folders</source>
          <target state="new">XAML views in folders</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>In both cases, a unique view is used for mobile and PC devices.</source>
          <target state="new">In both cases, a unique view is used for mobile and PC devices.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The default MainPage.xaml file is used if the device it's running on doesn't match any of the device family specific views.</source>
          <target state="new">The default MainPage.xaml file is used if the device it's running on doesn't match any of the device family specific views.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Separate XAML pages per device family</source>
          <target state="new">Separate XAML pages per device family</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>To provide unique views and functionality, you can create separate Page files (XAML and code), and then navigate to the appropriate page when the page is needed.</source>
          <target state="new">To provide unique views and functionality, you can create separate Page files (XAML and code), and then navigate to the appropriate page when the page is needed.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>To add a XAML page to an app</source>
          <target state="new">To add a XAML page to an app</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Select Project &gt; Add New Item.</source>
          <target state="new">Select Project &gt; Add New Item.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The Add New Item dialog box opens.</source>
          <target state="new">The Add New Item dialog box opens.</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Make sure the project, and not the solution, is selected in Solution Explorer.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Make sure the project, and not the solution, is selected in Solution Explorer.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Under Visual C# or Visual Basic in the left pane, pick the XAML template type.</source>
          <target state="new">Under Visual C# or Visual Basic in the left pane, pick the XAML template type.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>In the center pane, pick Blank page.</source>
          <target state="new">In the center pane, pick Blank page.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Enter the name for the page.</source>
          <target state="new">Enter the name for the page.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For example, "MainPage_Mobile".</source>
          <target state="new">For example, "MainPage_Mobile".</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Both a MainPage_Mobile.xaml and MainPage_Mobile.cs/vb/cpp code file are created.</source>
          <target state="new">Both a MainPage_Mobile.xaml and MainPage_Mobile.cs/vb/cpp code file are created.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Click Add.</source>
          <target state="new">Click Add.</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The file is added to the project.</source>
          <target state="new">The file is added to the project.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>At runtime, check the device family that the app is running on, and navigate to the correct page like this.</source>
          <target state="new">At runtime, check the device family that the app is running on, and navigate to the correct page like this.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>You can also use different criteria to determine which page to navigate to.</source>
          <target state="new">You can also use different criteria to determine which page to navigate to.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For more examples, see the <bpt id="p1">[</bpt>Tailored multiple views sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=620636)</ept>, which uses the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>GetIntegratedDisplaySize<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/dn904185.aspx)</ept> function to check the physical size of an integrated display.</source>
          <target state="new">For more examples, see the <bpt id="p1">[</bpt>Tailored multiple views sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=620636)</ept>, which uses the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>GetIntegratedDisplaySize<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/dn904185.aspx)</ept> function to check the physical size of an integrated display.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>