<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a24de922f360bdf57ab348989099a41769ec9435</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\creating-shaders-and-drawing-primitives.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create shaders and drawing primitives</source>
          <target state="new">Create shaders and drawing primitives</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Here, we show you how to use HLSL source files to compile and create shaders that you can then use to draw primitives on the display.</source>
          <target state="new">Here, we show you how to use HLSL source files to compile and create shaders that you can then use to draw primitives on the display.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create shaders and drawing primitives</source>
          <target state="new">Create shaders and drawing primitives</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here, we show you how to use HLSL source files to compile and create shaders that you can then use to draw primitives on the display.</source>
          <target state="new">Here, we show you how to use HLSL source files to compile and create shaders that you can then use to draw primitives on the display.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We create and draw a yellow triangle by using vertex and pixel shaders.</source>
          <target state="new">We create and draw a yellow triangle by using vertex and pixel shaders.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>After we create the Direct3D device, the swap chain, and the render-target view, we read data from binary shader object files on the disk.</source>
          <target state="new">After we create the Direct3D device, the swap chain, and the render-target view, we read data from binary shader object files on the disk.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Objective:<ept id="p1">**</ept> To create shaders and to draw primitives.</source>
          <target state="new"><bpt id="p1">**</bpt>Objective:<ept id="p1">**</ept> To create shaders and to draw primitives.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>We assume that you are familiar with C++.</source>
          <target state="new">We assume that you are familiar with C++.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You also need basic experience with graphics programming concepts.</source>
          <target state="new">You also need basic experience with graphics programming concepts.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>We also assume that you went through <bpt id="p1">[</bpt>Quickstart: setting up DirectX resources and displaying an image<ept id="p1">](setting-up-directx-resources.md)</ept>.</source>
          <target state="new">We also assume that you went through <bpt id="p1">[</bpt>Quickstart: setting up DirectX resources and displaying an image<ept id="p1">](setting-up-directx-resources.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Time to complete:<ept id="p1">**</ept> 20 minutes.</source>
          <target state="new"><bpt id="p1">**</bpt>Time to complete:<ept id="p1">**</ept> 20 minutes.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Instructions</source>
          <target state="new">Instructions</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>1. Compiling HLSL source files</source>
          <target state="new">1. Compiling HLSL source files</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Microsoft Visual Studio uses the <bpt id="p1">[</bpt>fxc.exe<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb232919)</ept> HLSL code compiler to compile the .hlsl source files (SimpleVertexShader.hlsl and SimplePixelShader.hlsl) into .cso binary shader object files (SimpleVertexShader.cso and SimplePixelShader.cso).</source>
          <target state="new">Microsoft Visual Studio uses the <bpt id="p1">[</bpt>fxc.exe<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb232919)</ept> HLSL code compiler to compile the .hlsl source files (SimpleVertexShader.hlsl and SimplePixelShader.hlsl) into .cso binary shader object files (SimpleVertexShader.cso and SimplePixelShader.cso).</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more info about the HLSL code compiler, see Effect-Compiler Tool.</source>
          <target state="new">For more info about the HLSL code compiler, see Effect-Compiler Tool.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more info about compiling shader code, see <bpt id="p1">[</bpt>Compiling Shaders<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509633)</ept>.</source>
          <target state="new">For more info about compiling shader code, see <bpt id="p1">[</bpt>Compiling Shaders<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509633)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Here is the code in SimpleVertexShader.hlsl:</source>
          <target state="new">Here is the code in SimpleVertexShader.hlsl:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Here is the code in SimplePixelShader.hlsl:</source>
          <target state="new">Here is the code in SimplePixelShader.hlsl:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>2. Reading data from disk</source>
          <target state="new">2. Reading data from disk</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>We use the DX::ReadDataAsync function from DirectXHelper.h in the DirectX 11 App (Universal Windows) template to asynchronously read data from a file on the disk.</source>
          <target state="new">We use the DX::ReadDataAsync function from DirectXHelper.h in the DirectX 11 App (Universal Windows) template to asynchronously read data from a file on the disk.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>3. Creating vertex and pixel shaders</source>
          <target state="new">3. Creating vertex and pixel shaders</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>We read data from the SimpleVertexShader.cso file and assign the data to the <bpt id="p1">*</bpt>vertexShaderBytecode<ept id="p1">*</ept> byte array.</source>
          <target state="new">We read data from the SimpleVertexShader.cso file and assign the data to the <bpt id="p1">*</bpt>vertexShaderBytecode<ept id="p1">*</ept> byte array.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateVertexShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> with the byte array to create the vertex shader (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11VertexShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476641)</ept>).</source>
          <target state="new">We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateVertexShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</ept> with the byte array to create the vertex shader (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11VertexShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476641)</ept>).</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We set the vertex depth value to 0.5 in the SimpleVertexShader.hlsl source to guarantee that our triangle is drawn.</source>
          <target state="new">We set the vertex depth value to 0.5 in the SimpleVertexShader.hlsl source to guarantee that our triangle is drawn.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>We populate an array of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_INPUT\_ELEMENT\_DESC<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476180)</ept> structures to describe the layout of the vertex shader code and then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device::CreateInputLayout<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476512)</ept> to create the layout.</source>
          <target state="new">We populate an array of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_INPUT\_ELEMENT\_DESC<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476180)</ept> structures to describe the layout of the vertex shader code and then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device::CreateInputLayout<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476512)</ept> to create the layout.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The array has one layout element that defines the vertex position.</source>
          <target state="new">The array has one layout element that defines the vertex position.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>We read data from the SimplePixelShader.cso file and assign the data to the <bpt id="p1">*</bpt>pixelShaderBytecode<ept id="p1">*</ept> byte array.</source>
          <target state="new">We read data from the SimplePixelShader.cso file and assign the data to the <bpt id="p1">*</bpt>pixelShaderBytecode<ept id="p1">*</ept> byte array.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreatePixelShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept> with the byte array to create the pixel shader (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11PixelShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476576)</ept>).</source>
          <target state="new">We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreatePixelShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</ept> with the byte array to create the pixel shader (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11PixelShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476576)</ept>).</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We set the pixel value to (1,1,1,1) in the SimplePixelShader.hlsl source to make our triangle yellow.</source>
          <target state="new">We set the pixel value to (1,1,1,1) in the SimplePixelShader.hlsl source to make our triangle yellow.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can change the color by changing this value.</source>
          <target state="new">You can change the color by changing this value.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>We create vertex and index buffers that define a simple triangle.</source>
          <target state="new">We create vertex and index buffers that define a simple triangle.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To do this, we first define the triangle, next describe the vertex and index buffers (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_BUFFER\_DESC<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476092)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>D3D11\_SUBRESOURCE\_DATA<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476220)</ept>) using the triangle definition, and finally call <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11Device::CreateBuffer<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476501)</ept> once for each buffer.</source>
          <target state="new">To do this, we first define the triangle, next describe the vertex and index buffers (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_BUFFER\_DESC<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476092)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>D3D11\_SUBRESOURCE\_DATA<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476220)</ept>) using the triangle definition, and finally call <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11Device::CreateBuffer<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476501)</ept> once for each buffer.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>We use the vertex and pixel shaders, the vertex shader layout, and the vertex and index buffers to draw a yellow triangle.</source>
          <target state="new">We use the vertex and pixel shaders, the vertex shader layout, and the vertex and index buffers to draw a yellow triangle.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>4. Drawing the triangle and presenting the rendered image</source>
          <target state="new">4. Drawing the triangle and presenting the rendered image</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>We enter an endless loop to continually render and display the scene.</source>
          <target state="new">We enter an endless loop to continually render and display the scene.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> to specify the render target as the output target.</source>
          <target state="new">We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> to specify the render target as the output target.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::ClearRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476388)</ept> with { 0.071f, 0.04f, 0.561f, 1.0f } to clear the render target to a solid blue color.</source>
          <target state="new">We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::ClearRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476388)</ept> with { 0.071f, 0.04f, 0.561f, 1.0f } to clear the render target to a solid blue color.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the endless loop, we draw a yellow triangle on the blue surface.</source>
          <target state="new">In the endless loop, we draw a yellow triangle on the blue surface.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To draw a yellow triangle</source>
          <target state="new">To draw a yellow triangle</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>First, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::IASetInputLayout<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476454)</ept> to describe how vertex buffer data is streamed into the input-assembler stage.</source>
          <target state="new">First, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::IASetInputLayout<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476454)</ept> to describe how vertex buffer data is streamed into the input-assembler stage.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Next, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::IASetVertexBuffers<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476456)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext::IASetIndexBuffer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476453)</ept> to bind the vertex and index buffers to the input-assembler stage.</source>
          <target state="new">Next, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::IASetVertexBuffers<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476456)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext::IASetIndexBuffer<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476453)</ept> to bind the vertex and index buffers to the input-assembler stage.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Next, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::IASetPrimitiveTopology<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476455)</ept> with the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>D3D11\_PRIMITIVE\_TOPOLOGY\_TRIANGLESTRIP<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476189#D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP)</ept> value to specify for the input-assembler stage to interpret the vertex data as a triangle strip.</source>
          <target state="new">Next, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::IASetPrimitiveTopology<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476455)</ept> with the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>D3D11\_PRIMITIVE\_TOPOLOGY\_TRIANGLESTRIP<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476189#D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP)</ept> value to specify for the input-assembler stage to interpret the vertex data as a triangle strip.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::VSSetShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476493)</ept> to initialize the vertex shader stage with the vertex shader code and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext::PSSetShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</ept> to initialize the pixel shader stage with the pixel shader code.</source>
          <target state="new">Next, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::VSSetShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476493)</ept> to initialize the vertex shader stage with the vertex shader code and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext::PSSetShader<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</ept> to initialize the pixel shader stage with the pixel shader code.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Finally, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::DrawIndexed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476409)</ept> to draw the triangle and submit it to the rendering pipeline.</source>
          <target state="new">Finally, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::DrawIndexed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476409)</ept> to draw the triangle and submit it to the rendering pipeline.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</ept> to present the rendered image to the window.</source>
          <target state="new">We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</ept> to present the rendered image to the window.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Summary and next steps</source>
          <target state="new">Summary and next steps</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>We created and drew a yellow triangle by using vertex and pixel shaders.</source>
          <target state="new">We created and drew a yellow triangle by using vertex and pixel shaders.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Next, we create an orbiting 3D cube and apply lighting effects to it.</source>
          <target state="new">Next, we create an orbiting 3D cube and apply lighting effects to it.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Using depth and effects on primitives</source>
          <target state="new">Using depth and effects on primitives</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>