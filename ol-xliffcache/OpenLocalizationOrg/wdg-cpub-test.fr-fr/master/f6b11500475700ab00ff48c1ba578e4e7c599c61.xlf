<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD</source>
          <target state="new">ms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>title: Enumerate and query files and folders</source>
          <target state="new">title: Enumerate and query files and folders</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>description: Access files and folders in either a folder, library, device, or network location.</source>
          <target state="new">description: Access files and folders in either a folder, library, device, or network location.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also query the files and folders in a location by constructing file and folder queries.</source>
          <target state="new">You can also query the files and folders in a location by constructing file and folder queries.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Enumerate and query files and folders</source>
          <target state="new">Enumerate and query files and folders</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Access files and folders in either a folder, library, device, or network location.</source>
          <target state="new">Access files and folders in either a folder, library, device, or network location.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also query the files and folders in a location by constructing file and folder queries.</source>
          <target state="new">You can also query the files and folders in a location by constructing file and folder queries.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Also see the <bpt id="p2">[</bpt>Folder enumeration sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=619993)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Also see the <bpt id="p2">[</bpt>Folder enumeration sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=619993)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Understand async programming for Universal Windows Platform (UWP) apps</source>
          <target state="new">Understand async programming for Universal Windows Platform (UWP) apps</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can learn how to write asynchronous apps in C# or Visual Basic, see <bpt id="p1">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187337)</ept>.</source>
          <target state="new">You can learn how to write asynchronous apps in C# or Visual Basic, see <bpt id="p1">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187337)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To learn how to write asynchronous apps in C++, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.</source>
          <target state="new">To learn how to write asynchronous apps in C++, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Access permissions to the location</source>
          <target state="new">Access permissions to the location</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the code in these examples require the <bpt id="p1">**</bpt>picturesLibrary<ept id="p1">**</ept> capability, but your location may require a different capability or no capability at all.</source>
          <target state="new">For example, the code in these examples require the <bpt id="p1">**</bpt>picturesLibrary<ept id="p1">**</ept> capability, but your location may require a different capability or no capability at all.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To learn more, see <bpt id="p1">[</bpt>File access permissions<ept id="p1">](file-access-permissions.md)</ept>.</source>
          <target state="new">To learn more, see <bpt id="p1">[</bpt>File access permissions<ept id="p1">](file-access-permissions.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Enumerate files and folders in a location</source>
          <target state="new">Enumerate files and folders in a location</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Remember to declare the <bpt id="p2">**</bpt>picturesLibrary<ept id="p2">**</ept> capability.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Remember to declare the <bpt id="p2">**</bpt>picturesLibrary<ept id="p2">**</ept> capability.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example we first use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolder.GetFilesAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227276)</ept> method to get all the files in the root folder of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PicturesLibrary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders) and list the name of each file.</source>
          <target state="new">In this example we first use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolder.GetFilesAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227276)</ept> method to get all the files in the root folder of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PicturesLibrary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders) and list the name of each file.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Next, we use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetFoldersAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227280)</ept> method to get all the subfolders in the <bpt id="p3">**</bpt>PicturesLibrary<ept id="p3">**</ept> and list the name of each subfolder.</source>
          <target state="new">Next, we use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetFoldersAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227280)</ept> method to get all the subfolders in the <bpt id="p3">**</bpt>PicturesLibrary<ept id="p3">**</ept> and list the name of each subfolder.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  In C# or Visual Basic, remember to put the <bpt id="p2">**</bpt>async<ept id="p2">**</ept> keyword in the method declaration of any method in which you use the <bpt id="p3">**</bpt>await<ept id="p3">**</ept> operator.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  In C# or Visual Basic, remember to put the <bpt id="p2">**</bpt>async<ept id="p2">**</ept> keyword in the method declaration of any method in which you use the <bpt id="p3">**</bpt>await<ept id="p3">**</ept> operator.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetItemsAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227286)</ept> method to get all items (both files and subfolders) in a particular location.</source>
          <target state="new">Alternatively, you can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetItemsAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227286)</ept> method to get all items (both files and subfolders) in a particular location.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>GetItemsAsync<ept id="p1">**</ept> method to get all files and subfolders in the root folder of the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>PicturesLibrary<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders).</source>
          <target state="new">The following example uses the <bpt id="p1">**</bpt>GetItemsAsync<ept id="p1">**</ept> method to get all files and subfolders in the root folder of the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>PicturesLibrary<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders).</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Then the example lists the name of each file and subfolder.</source>
          <target state="new">Then the example lists the name of each file and subfolder.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the item is a subfolder, the example appends <ph id="ph1">`"folder"`</ph> to the name.</source>
          <target state="new">If the item is a subfolder, the example appends <ph id="ph1">`"folder"`</ph> to the name.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>();

create_task(picturesFolder-&gt;GetItemsAsync())</source>
          <target state="new">();

create_task(picturesFolder-&gt;GetItemsAsync())</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>.then ([this, outputString] (IVectorView</source>
          <target state="new">.then ([this, outputString] (IVectorView</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>^ items)</source>
          <target state="new">^ items)</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>for ( unsigned int i = 0 ; i &lt; items-&gt;Size; i++)</source>
          <target state="new">for ( unsigned int i = 0 ; i &lt; items-&gt;Size; i++)</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>*outputString += items-&gt;GetAt(i)-&gt;Name-&gt;Data();</source>
          <target state="new">*outputString += items-&gt;GetAt(i)-&gt;Name-&gt;Data();</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>if(items-&gt;GetAt(i)-&gt;IsOfType(StorageItemTypes::Folder))</source>
          <target state="new">if(items-&gt;GetAt(i)-&gt;IsOfType(StorageItemTypes::Folder))</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>*outputString += L"  folder\n";</source>
          <target state="new">*outputString += L"  folder\n";</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>else</source>
          <target state="new">else</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">            *</bpt>outputString += L"\n";
        }
        m_OutputTextBlock-&gt;Text = ref new String((<ept id="p1">*</ept>outputString).c_str());</source>
          <target state="new"><bpt id="p1">            *</bpt>outputString += L"\n";
        }
        m_OutputTextBlock-&gt;Text = ref new String((<ept id="p1">*</ept>outputString).c_str());</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>});
<ph id="ph1">```
```csharp
StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
StringBuilder outputText = new StringBuilder();

IReadOnlyList</ph></source>
          <target state="new">});
<ph id="ph1">```
```csharp
StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
StringBuilder outputText = new StringBuilder();

IReadOnlyList</ph></target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>itemsList =</source>
          <target state="new">itemsList =</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>await picturesFolder.GetItemsAsync();

foreach (var item in itemsList)</source>
          <target state="new">await picturesFolder.GetItemsAsync();

foreach (var item in itemsList)</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>if (item is StorageFolder)</source>
          <target state="new">if (item is StorageFolder)</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>outputText.Append(item.Name + " folder\n");

    }
    else
    {
        outputText.Append(item.Name + "\n");

    }
}
```
```vb
Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
Dim outputText As New StringBuilder

Dim itemsList As IReadOnlyList(Of IStorageItem) =
    Await picturesFolder.GetItemsAsync()

For Each item In itemsList

    If TypeOf item Is StorageFolder Then

        outputText.Append(item.Name &amp; " folder" &amp; vbLf)

    Else

        outputText.Append(item.Name &amp; vbLf)

    End If

Next item
```

## Query files in a location and enumerate matching files

In this example we query for all the files in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PicturesLibrary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> grouped by the month, and this time the example recurses into subfolders.</source>
          <target state="new">outputText.Append(item.Name + " folder\n");

    }
    else
    {
        outputText.Append(item.Name + "\n");

    }
}
```
```vb
Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
Dim outputText As New StringBuilder

Dim itemsList As IReadOnlyList(Of IStorageItem) =
    Await picturesFolder.GetItemsAsync()

For Each item In itemsList

    If TypeOf item Is StorageFolder Then

        outputText.Append(item.Name &amp; " folder" &amp; vbLf)

    Else

        outputText.Append(item.Name &amp; vbLf)

    End If

Next item
```

## Query files in a location and enumerate matching files

In this example we query for all the files in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PicturesLibrary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> grouped by the month, and this time the example recurses into subfolders.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>First, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolder.CreateFolderQuery<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227262)</ept> and pass the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CommonFolderQuery.GroupByMonth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br207957)</ept> value to the method.</source>
          <target state="new">First, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolder.CreateFolderQuery<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227262)</ept> and pass the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CommonFolderQuery.GroupByMonth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br207957)</ept> value to the method.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>That gives us a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolderQueryResult<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208066)</ept> object.</source>
          <target state="new">That gives us a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolderQueryResult<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208066)</ept> object.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Next we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolderQueryResult.GetFoldersAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208074)</ept> which returns <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StorageFolder<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227230)</ept> objects representing virtual folders.</source>
          <target state="new">Next we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolderQueryResult.GetFoldersAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208074)</ept> which returns <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StorageFolder<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227230)</ept> objects representing virtual folders.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.</source>
          <target state="new">In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The output of the example looks similar to the following.</source>
          <target state="new">The output of the example looks similar to the following.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6b11500475700ab00ff48c1ba578e4e7c599c61</xliffext:olfilehash>
  </header>
</xliff>