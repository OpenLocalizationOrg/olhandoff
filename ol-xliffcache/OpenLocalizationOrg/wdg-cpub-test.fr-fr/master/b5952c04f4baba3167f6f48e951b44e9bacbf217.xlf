<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5952c04f4baba3167f6f48e951b44e9bacbf217</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\working-with-2d-graphics-in-your-directx-game.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>2D graphics for DirectX games</source>
          <target state="new">2D graphics for DirectX games</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>We discuss the use of 2D bitmap graphics and effects, and how to use them in your game.</source>
          <target state="new">We discuss the use of 2D bitmap graphics and effects, and how to use them in your game.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>2D graphics for DirectX games</source>
          <target state="new">2D graphics for DirectX games</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>We discuss the use of 2D bitmap graphics and effects, and how to use them in your game.</source>
          <target state="new">We discuss the use of 2D bitmap graphics and effects, and how to use them in your game.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>2D graphics are a subset of 3D graphics that deal with 2D primitives or bitmaps.</source>
          <target state="new">2D graphics are a subset of 3D graphics that deal with 2D primitives or bitmaps.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>More generally, they don't use a z-coordinate in the way a 3D game might, since the game play is usually confined to the x-y plane.</source>
          <target state="new">More generally, they don't use a z-coordinate in the way a 3D game might, since the game play is usually confined to the x-y plane.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>They sometimes use 3D graphics techniques to create their visual components, and they are generally simpler to develop.</source>
          <target state="new">They sometimes use 3D graphics techniques to create their visual components, and they are generally simpler to develop.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you are new to gaming, a 2D game is a great place to start, and 2D graphics development can be a good place for you to get a handle on DirectX.</source>
          <target state="new">If you are new to gaming, a 2D game is a great place to start, and 2D graphics development can be a good place for you to get a handle on DirectX.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can develop 2D gaming graphics in DirectX using either Direct2D or Direct3D, or some combination.</source>
          <target state="new">You can develop 2D gaming graphics in DirectX using either Direct2D or Direct3D, or some combination.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Many of the more useful classes for 2D game development are in Direct3D, such as the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Sprite<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205601)</ept> class.</source>
          <target state="new">Many of the more useful classes for 2D game development are in Direct3D, such as the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Sprite<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205601)</ept> class.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Direct2D is a set of APIs that primarily target user interfaces and apps that require support for drawing primitives (such as circles, lines, and flat polygon shapes).</source>
          <target state="new">Direct2D is a set of APIs that primarily target user interfaces and apps that require support for drawing primitives (such as circles, lines, and flat polygon shapes).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>With that in mind, it still provides a powerful and performant set of classes and methods for creating game graphics as well, especially when creating game overlays, interfaces, and heads-up displays (HUDs) -- or for creating a variety of 2D games, from simple to reasonably detailed.</source>
          <target state="new">With that in mind, it still provides a powerful and performant set of classes and methods for creating game graphics as well, especially when creating game overlays, interfaces, and heads-up displays (HUDs) -- or for creating a variety of 2D games, from simple to reasonably detailed.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The most effective approach when creating 2D games, though, is to use elements from both libraries, and that's the way we will approach 2D graphics development in this topic.</source>
          <target state="new">The most effective approach when creating 2D games, though, is to use elements from both libraries, and that's the way we will approach 2D graphics development in this topic.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Concepts at a glance</source>
          <target state="new">Concepts at a glance</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Before the advent of modern 3D graphics and the hardware that supports it, games were primarily 2D, and many of their graphics techniques involved moving blocks of memory around -- usually arrays of color data that would be translated or transformed to pixels on the screen in a 1:1 fashion.</source>
          <target state="new">Before the advent of modern 3D graphics and the hardware that supports it, games were primarily 2D, and many of their graphics techniques involved moving blocks of memory around -- usually arrays of color data that would be translated or transformed to pixels on the screen in a 1:1 fashion.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In DirectX, 2D graphics are part of the 3D pipeline.</source>
          <target state="new">In DirectX, 2D graphics are part of the 3D pipeline.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There is a much greater variety of screen resolutions and graphics hardware available, and your 2D graphics engine must be able to support them without a significant change in fidelity.</source>
          <target state="new">There is a much greater variety of screen resolutions and graphics hardware available, and your 2D graphics engine must be able to support them without a significant change in fidelity.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Here are a few of the basic concepts you should be familiar with when starting 2D graphics development.</source>
          <target state="new">Here are a few of the basic concepts you should be familiar with when starting 2D graphics development.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Pixels and raster coordinates.</source>
          <target state="new">Pixels and raster coordinates.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A pixel is a single point on a raster display, and has its own (x, y) coordinate pair indicating its location on the display.</source>
          <target state="new">A pixel is a single point on a raster display, and has its own (x, y) coordinate pair indicating its location on the display.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(The term "pixel" is often used interchangeably between the physical pixels that comprise the display and the addressable memory elements used to hold the color and alpha values of the pixels before they are sent to the display.) The raster is treated by APIs as a rectangular grid of pixel elements, which often has a 1:1 correspondence with the physical pixel grid of a display.</source>
          <target state="new">(The term "pixel" is often used interchangeably between the physical pixels that comprise the display and the addressable memory elements used to hold the color and alpha values of the pixels before they are sent to the display.) The raster is treated by APIs as a rectangular grid of pixel elements, which often has a 1:1 correspondence with the physical pixel grid of a display.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Raster coordinate systems start from the upper left, with the pixel at (0, 0) in the upper leftmost corner of the grid.</source>
          <target state="new">Raster coordinate systems start from the upper left, with the pixel at (0, 0) in the upper leftmost corner of the grid.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Bitmap graphics (sometimes called raster graphics) are graphic elements represented as a rectangular grid of pixel values.</source>
          <target state="new">Bitmap graphics (sometimes called raster graphics) are graphic elements represented as a rectangular grid of pixel values.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Sprites -- computed pixel arrays managed independent of the raster -- are one type of bitmap graphic, commonly used for the active characters or background-independent animated objects in a game.</source>
          <target state="new">Sprites -- computed pixel arrays managed independent of the raster -- are one type of bitmap graphic, commonly used for the active characters or background-independent animated objects in a game.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The various frames of animation for a sprite are represented as collections of bitmaps called "sheets" or "batches."</source>
          <target state="new">The various frames of animation for a sprite are represented as collections of bitmaps called "sheets" or "batches."</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Backgrounds are larger bitmap objects that are the same resolution or greater than that of the screen raster, and often serve as the backdrop(s) for a game's playfield.</source>
          <target state="new">Backgrounds are larger bitmap objects that are the same resolution or greater than that of the screen raster, and often serve as the backdrop(s) for a game's playfield.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Vector graphics are graphics that use geometric primitives, such as points, lines, circles, and polygons to define 2D objects.</source>
          <target state="new">Vector graphics are graphics that use geometric primitives, such as points, lines, circles, and polygons to define 2D objects.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>They are represented not as arrays of pixels, but as the mathematical equations that define them in a 2D space.</source>
          <target state="new">They are represented not as arrays of pixels, but as the mathematical equations that define them in a 2D space.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>They do not necessarily have a 1:1 correspondence with the pixel grid of the display, and must be transformed from the coordinate system that you rendered them in into the raster coordinate system of the display.</source>
          <target state="new">They do not necessarily have a 1:1 correspondence with the pixel grid of the display, and must be transformed from the coordinate system that you rendered them in into the raster coordinate system of the display.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Translation is when you take a point or vertex and calculate its new location in the same coordinate system.</source>
          <target state="new">Translation is when you take a point or vertex and calculate its new location in the same coordinate system.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Scaling is when you enlarge or shrink an object by a specified scale factor.</source>
          <target state="new">Scaling is when you enlarge or shrink an object by a specified scale factor.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>With a vector image, you shrink and enlarge its component vertices; with a bitmap, you enlarge the pixel elements or diminish them.</source>
          <target state="new">With a vector image, you shrink and enlarge its component vertices; with a bitmap, you enlarge the pixel elements or diminish them.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>With bitmap images, you lose pixel data when the image shrinks, and you enlarge the individual pixels when the image is scaled closer.</source>
          <target state="new">With bitmap images, you lose pixel data when the image shrinks, and you enlarge the individual pixels when the image is scaled closer.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For the latter, you can use pixel color interpolation operations, like bilinear filtering, to smooth out the harsh color boundaries between the enlarged pixels.</source>
          <target state="new">For the latter, you can use pixel color interpolation operations, like bilinear filtering, to smooth out the harsh color boundaries between the enlarged pixels.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Rotation is when you rotate an object about a specified axis or axes.</source>
          <target state="new">Rotation is when you rotate an object about a specified axis or axes.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>With a vector image, the vertices of the geometry are multiplied against a rotation matrix to obtain the rotated vertex; with a bitmap image, different algorithms can be employed, each with a lesser or greater degree of fidelity in the results.</source>
          <target state="new">With a vector image, the vertices of the geometry are multiplied against a rotation matrix to obtain the rotated vertex; with a bitmap image, different algorithms can be employed, each with a lesser or greater degree of fidelity in the results.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As with scaling and translation, there are APIs specifically for rotation operations.</source>
          <target state="new">As with scaling and translation, there are APIs specifically for rotation operations.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Transformation is when you take one point or vertex in one coordinate system and calculate its corresponding point or vertex in another coordinate system.</source>
          <target state="new">Transformation is when you take one point or vertex in one coordinate system and calculate its corresponding point or vertex in another coordinate system.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This includes translation, scaling, and rotation, as well as other coordinate calculation operations.</source>
          <target state="new">This includes translation, scaling, and rotation, as well as other coordinate calculation operations.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Clipping is when you remove portions of bitmaps or geometry that are not within the viewable area of the display, or are hidden by objects with higher view priority.</source>
          <target state="new">Clipping is when you remove portions of bitmaps or geometry that are not within the viewable area of the display, or are hidden by objects with higher view priority.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The frame buffer is an area in memory -- often in the memory of the graphics hardware itself -- that contains the final raster map that you will draw to the screen.</source>
          <target state="new">The frame buffer is an area in memory -- often in the memory of the graphics hardware itself -- that contains the final raster map that you will draw to the screen.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The swap chain is a collection of buffers, where you draw in a back buffer and, when the image is ready, you "swap" it to the front and display it.</source>
          <target state="new">The swap chain is a collection of buffers, where you draw in a back buffer and, when the image is ready, you "swap" it to the front and display it.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Design considerations</source>
          <target state="new">Design considerations</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>2D graphics development is a great way to get accustomed to developing with Direct3D, and will allow you to spend more time on other critical aspects of game development: audio, controls, and the game mechanics.</source>
          <target state="new">2D graphics development is a great way to get accustomed to developing with Direct3D, and will allow you to spend more time on other critical aspects of game development: audio, controls, and the game mechanics.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Always draw to a back buffer.</source>
          <target state="new">Always draw to a back buffer.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Drawing directly to your frame buffer means that your image will be displayed when the signal for display is received (usually every 1/60th of second), even if your drawing operation hasn't completed!</source>
          <target state="new">Drawing directly to your frame buffer means that your image will be displayed when the signal for display is received (usually every 1/60th of second), even if your drawing operation hasn't completed!</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Design your graphics engine to support a good selection of resolutions, from 1024x600 to 1920x1080 (or higher).</source>
          <target state="new">Design your graphics engine to support a good selection of resolutions, from 1024x600 to 1920x1080 (or higher).</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Your audience will thank you if you support their LCD monitor's native resolution, especially with 2D graphics.</source>
          <target state="new">Your audience will thank you if you support their LCD monitor's native resolution, especially with 2D graphics.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Great artwork will be your greatest asset, when it comes to visuals.</source>
          <target state="new">Great artwork will be your greatest asset, when it comes to visuals.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>While your bitmap graphics may lack the punch of 3D photorealistic visuals using the latest shader model features, great high-resolution artwork can often convey as much or more style and personality -- and with far less of a performance penalty.</source>
          <target state="new">While your bitmap graphics may lack the punch of 3D photorealistic visuals using the latest shader model features, great high-resolution artwork can often convey as much or more style and personality -- and with far less of a performance penalty.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="new">Reference</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Direct2D overview</source>
          <target state="new">Direct2D overview</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Direct2D quickstart</source>
          <target state="new">Direct2D quickstart</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Direct2D and Direct3D interoperability overview</source>
          <target state="new">Direct2D and Direct3D interoperability overview</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
          <target state="new">This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</source>
          <target state="new">If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>