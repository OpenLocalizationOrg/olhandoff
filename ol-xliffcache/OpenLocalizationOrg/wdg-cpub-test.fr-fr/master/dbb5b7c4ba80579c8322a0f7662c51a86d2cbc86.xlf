<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbb5b7c4ba80579c8322a0f7662c51a86d2cbc86</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\compare-opengl-es-2-0-api-design-to-directx.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Plan your port from OpenGL ES 2.0 to Direct3D</source>
          <target state="new">Plan your port from OpenGL ES 2.0 to Direct3D</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</source>
          <target state="new">If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Plan your port from OpenGL ES 2.0 to Direct3D</source>
          <target state="new">Plan your port from OpenGL ES 2.0 to Direct3D</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Visual C++</source>
          <target state="new">Visual C++</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</source>
          <target state="new">If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When preparing to move your graphics pipeline codebase to Direct3D 11 and the Windows Runtime, there are a few things you should consider before you start.</source>
          <target state="new">When preparing to move your graphics pipeline codebase to Direct3D 11 and the Windows Runtime, there are a few things you should consider before you start.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Most porting efforts usually involving initially walking the codebase and mapping common APIs and patterns between the two models.</source>
          <target state="new">Most porting efforts usually involving initially walking the codebase and mapping common APIs and patterns between the two models.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You'll find this process a bit easier if you take some time to read and review this topic.</source>
          <target state="new">You'll find this process a bit easier if you take some time to read and review this topic.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Here are some things to be aware of when porting graphics from OpenGL ES 2.0 to Direct3D 11.</source>
          <target state="new">Here are some things to be aware of when porting graphics from OpenGL ES 2.0 to Direct3D 11.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Notes on specific OpenGL ES 2.0 providers</source>
          <target state="new">Notes on specific OpenGL ES 2.0 providers</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The porting topics in this section reference the Windows implementation of the OpenGL ES 2.0 specification created by the Khronos Group.</source>
          <target state="new">The porting topics in this section reference the Windows implementation of the OpenGL ES 2.0 specification created by the Khronos Group.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>All OpenGL ES 2.0 code samples were developed using Visual Studio 2012 and basic Windows C syntax.</source>
          <target state="new">All OpenGL ES 2.0 code samples were developed using Visual Studio 2012 and basic Windows C syntax.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are coming from an Objective-C (iOS) or Java (Android) codebase, be aware that the provided OpenGL ES 2.0 code samples may not use similar API calling syntax or parameters.</source>
          <target state="new">If you are coming from an Objective-C (iOS) or Java (Android) codebase, be aware that the provided OpenGL ES 2.0 code samples may not use similar API calling syntax or parameters.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This guidance tries to stay as platform agnostic as possible.</source>
          <target state="new">This guidance tries to stay as platform agnostic as possible.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This documentation only uses the 2.0 specification APIs for the OpenGL ES code and reference.</source>
          <target state="new">This documentation only uses the 2.0 specification APIs for the OpenGL ES code and reference.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you are porting from OpenGL ES 1.1 or 3.0, this content can still prove useful, although some of the OpenGL ES 2.0 code examples and context may be unfamiliar.</source>
          <target state="new">If you are porting from OpenGL ES 1.1 or 3.0, this content can still prove useful, although some of the OpenGL ES 2.0 code examples and context may be unfamiliar.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The Direct3D 11 samples in these topics use Microsoft Windows C++ with Component Extensions (CX).</source>
          <target state="new">The Direct3D 11 samples in these topics use Microsoft Windows C++ with Component Extensions (CX).</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more info on this version of the C++ syntax, read <bpt id="p1">[</bpt>Visual C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/60k1461a.aspx)</ept>, <bpt id="p2">[</bpt>Component Extensions for Runtime Platforms<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xey702bw.aspx)</ept>, and <bpt id="p3">[</bpt>Quick Reference (C++\\CX)<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br212455.aspx)</ept>.</source>
          <target state="new">For more info on this version of the C++ syntax, read <bpt id="p1">[</bpt>Visual C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/60k1461a.aspx)</ept>, <bpt id="p2">[</bpt>Component Extensions for Runtime Platforms<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xey702bw.aspx)</ept>, and <bpt id="p3">[</bpt>Quick Reference (C++\\CX)<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br212455.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Understand your hardware requirements and resources</source>
          <target state="new">Understand your hardware requirements and resources</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The set of graphics processing features supported by OpenGL ES 2.0 roughly maps to the features provided in Direct3D 9.1.</source>
          <target state="new">The set of graphics processing features supported by OpenGL ES 2.0 roughly maps to the features provided in Direct3D 9.1.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you want to take advantage of the more advanced features provided in Direct3D 11, review the <bpt id="p1">[</bpt>Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476080)</ept> documentation when planning your port, or review the <bpt id="p2">[</bpt>Port from DirectX 9 to Universal Windows Platform (UWP)<ept id="p2">](porting-your-directx-9-game-to-windows-store.md)</ept> topics when you're done with the initial effort.</source>
          <target state="new">If you want to take advantage of the more advanced features provided in Direct3D 11, review the <bpt id="p1">[</bpt>Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476080)</ept> documentation when planning your port, or review the <bpt id="p2">[</bpt>Port from DirectX 9 to Universal Windows Platform (UWP)<ept id="p2">](porting-your-directx-9-game-to-windows-store.md)</ept> topics when you're done with the initial effort.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To make your initial porting effort simple, start with a Visual Studio Direct3D template.</source>
          <target state="new">To make your initial porting effort simple, start with a Visual Studio Direct3D template.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It provides a basic renderer already configured for you, and supports UWP app features like recreating resources on window changes and Direct3D feature levels.</source>
          <target state="new">It provides a basic renderer already configured for you, and supports UWP app features like recreating resources on window changes and Direct3D feature levels.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Understand Direct3D feature levels</source>
          <target state="new">Understand Direct3D feature levels</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Direct3D 11 provides support for hardware "feature levels" from 9\_1 (Direct3D 9.1) for 11\_1.</source>
          <target state="new">Direct3D 11 provides support for hardware "feature levels" from 9\_1 (Direct3D 9.1) for 11\_1.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These feature levels indicate the availability of certain graphics features and resources.</source>
          <target state="new">These feature levels indicate the availability of certain graphics features and resources.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Typically, most OpenGL ES 2.0 platforms support a Direct3D 9.1 (feature level 9\_1) set of features.</source>
          <target state="new">Typically, most OpenGL ES 2.0 platforms support a Direct3D 9.1 (feature level 9\_1) set of features.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Review DirectX graphics features and APIs</source>
          <target state="new">Review DirectX graphics features and APIs</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>API Family</source>
          <target state="new">API Family</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>DXGI</source>
          <target state="new">DXGI</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The DirectX Graphics Infrastructure (DXGI) provides an interface between the graphics hardware and Direct3D.</source>
          <target state="new">The DirectX Graphics Infrastructure (DXGI) provides an interface between the graphics hardware and Direct3D.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It sets the device adapter and hardware configuration using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIAdapter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174523)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIDevice1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404543)</ept> COM interfaces.</source>
          <target state="new">It sets the device adapter and hardware configuration using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIAdapter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174523)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIDevice1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404543)</ept> COM interfaces.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use it to create and configure your buffers and other window resources.</source>
          <target state="new">Use it to create and configure your buffers and other window resources.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Notably, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIFactory2<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</ept> factory pattern iis used to acquire the graphics resources, including the swap chain (a set of frame buffers).</source>
          <target state="new">Notably, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIFactory2<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</ept> factory pattern iis used to acquire the graphics resources, including the swap chain (a set of frame buffers).</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Since DXGI owns the swap chain, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> interface is used to present frames to the screen.</source>
          <target state="new">Since DXGI owns the swap chain, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> interface is used to present frames to the screen.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Direct3D</source>
          <target state="new">Direct3D</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Direct3D is the set of APIs that provide a virtual representation of the graphics interface and allow you to draw graphics using it.</source>
          <target state="new">Direct3D is the set of APIs that provide a virtual representation of the graphics interface and allow you to draw graphics using it.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Version 11, is roughly comparable, feature-wise, to OpenGL 4.3.</source>
          <target state="new">Version 11, is roughly comparable, feature-wise, to OpenGL 4.3.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(OpenGL ES 2.0, on the other hand, is similar to DirectX9, feature-wise, and OpenGL 2.0, but with OpenGL 3.0's unified shader pipeline.) Most of the heavy lifting is done with the ID3D11Device1 and ID3D11DeviceContext1 interfaces which provide access to individual resources and subresources, and the rendering context, respectively.</source>
          <target state="new">(OpenGL ES 2.0, on the other hand, is similar to DirectX9, feature-wise, and OpenGL 2.0, but with OpenGL 3.0's unified shader pipeline.) Most of the heavy lifting is done with the ID3D11Device1 and ID3D11DeviceContext1 interfaces which provide access to individual resources and subresources, and the rendering context, respectively.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Direct2D</source>
          <target state="new">Direct2D</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Direct2D provides a set of APIs for GPU-accelerated 2D rendering.</source>
          <target state="new">Direct2D provides a set of APIs for GPU-accelerated 2D rendering.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It can be considered similar in purpose to OpenVG.</source>
          <target state="new">It can be considered similar in purpose to OpenVG.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>DirectWrite</source>
          <target state="new">DirectWrite</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>DirectWrite provides a set of APIs for GPU-accelerated, high-quality font rendering.</source>
          <target state="new">DirectWrite provides a set of APIs for GPU-accelerated, high-quality font rendering.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DirectXMath</source>
          <target state="new">DirectXMath</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>DirectXMath provides a set of APIs and macros for handling common linear algebra and trigonometric types, values, and functions.</source>
          <target state="new">DirectXMath provides a set of APIs and macros for handling common linear algebra and trigonometric types, values, and functions.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These types and functions are designed to work well with Direct3D and its shader operations.</source>
          <target state="new">These types and functions are designed to work well with Direct3D and its shader operations.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>DirectX HLSL</source>
          <target state="new">DirectX HLSL</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The current HLSL syntax used by Direct3D shaders.</source>
          <target state="new">The current HLSL syntax used by Direct3D shaders.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It implements Direct3D Shader Model 5.0.</source>
          <target state="new">It implements Direct3D Shader Model 5.0.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Review the Windows Runtime APIs and template library</source>
          <target state="new">Review the Windows Runtime APIs and template library</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The Windows Runtime APIs provide the overall infrastructure for UWP apps.</source>
          <target state="new">The Windows Runtime APIs provide the overall infrastructure for UWP apps.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Review them <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211377)</ept>.</source>
          <target state="new">Review them <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211377)</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Key Windows Runtime APIs used in porting your graphics pipeline include:</source>
          <target state="new">Key Windows Runtime APIs used in porting your graphics pipeline include:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Windows::UI::Core::CoreWindow</source>
          <target state="new">Windows::UI::Core::CoreWindow</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Windows::UI::Core::CoreDispatcher</source>
          <target state="new">Windows::UI::Core::CoreDispatcher</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Windows::ApplicationModel::Core::IFrameworkView</source>
          <target state="new">Windows::ApplicationModel::Core::IFrameworkView</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Windows::ApplicationModel::Core::CoreApplicationView</source>
          <target state="new">Windows::ApplicationModel::Core::CoreApplicationView</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Additionally, the Windows Runtime C++ Template Library (WRL) is a template library that provides a low-level way to author and use Windows Runtime components.</source>
          <target state="new">Additionally, the Windows Runtime C++ Template Library (WRL) is a template library that provides a low-level way to author and use Windows Runtime components.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The Direct3D 11 APIs for UWP apps are best used in conjunctions with the interfaces and types in this library, such as smart pointers (<bpt id="p1">[</bpt>ComPtr<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept>).</source>
          <target state="new">The Direct3D 11 APIs for UWP apps are best used in conjunctions with the interfaces and types in this library, such as smart pointers (<bpt id="p1">[</bpt>ComPtr<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept>).</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more info on the WRL, read <bpt id="p1">[</bpt>Windows Runtime C++ Template Library (WRL)<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/hh438466.aspx)</ept>.</source>
          <target state="new">For more info on the WRL, read <bpt id="p1">[</bpt>Windows Runtime C++ Template Library (WRL)<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/hh438466.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Change your coordinate system</source>
          <target state="new">Change your coordinate system</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>One difference that sometimes confuses early port efforts is the change from OpenGL's traditional right-handed coordinate system to Direct3D's default left-handed coordinate system.</source>
          <target state="new">One difference that sometimes confuses early port efforts is the change from OpenGL's traditional right-handed coordinate system to Direct3D's default left-handed coordinate system.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This change in coordinate modeling affects many parts of your game, from the setup and configuration of your vertex buffers to many of your matrix math functions.</source>
          <target state="new">This change in coordinate modeling affects many parts of your game, from the setup and configuration of your vertex buffers to many of your matrix math functions.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The two most important changes to make are:</source>
          <target state="new">The two most important changes to make are:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Flip the order of triangle vertices so that Direct3D traverses them clockwise from the front.</source>
          <target state="new">Flip the order of triangle vertices so that Direct3D traverses them clockwise from the front.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, if your vertices are indexed as 0, 1, and 2 in your OpenGL pipeline, pass them to Direct3D as 0, 2, 1 instead.</source>
          <target state="new">For example, if your vertices are indexed as 0, 1, and 2 in your OpenGL pipeline, pass them to Direct3D as 0, 2, 1 instead.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use the view matrix to scale world space by -1.0f in the z direction, effectively reversing the z-axis coordinates.</source>
          <target state="new">Use the view matrix to scale world space by -1.0f in the z direction, effectively reversing the z-axis coordinates.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To do this, flip the sign of the values at positions M31, M32, and M33 in your view matrix (when porting it to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Matrix<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb147180)</ept> type).</source>
          <target state="new">To do this, flip the sign of the values at positions M31, M32, and M33 in your view matrix (when porting it to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Matrix<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb147180)</ept> type).</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If M34 is not 0, flip its sign as well.</source>
          <target state="new">If M34 is not 0, flip its sign as well.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>However, Direct3D can support a right-handed coordinate system.</source>
          <target state="new">However, Direct3D can support a right-handed coordinate system.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>DirectXMath provides a number of functions that operate on and across both left-handed and right-handed coordinate systems.</source>
          <target state="new">DirectXMath provides a number of functions that operate on and across both left-handed and right-handed coordinate systems.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>They can be used to preserve some of your original mesh data and matrix processing.</source>
          <target state="new">They can be used to preserve some of your original mesh data and matrix processing.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>They include:</source>
          <target state="new">They include:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>DirectXMath matrix function</source>
          <target state="new">DirectXMath matrix function</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>XMMatrixLookAtLH</source>
          <target state="new">XMMatrixLookAtLH</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a focal point.</source>
          <target state="new">Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a focal point.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>XMMatrixLookAtRH</source>
          <target state="new">XMMatrixLookAtRH</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a focal point.</source>
          <target state="new">Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a focal point.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>XMMatrixLookToLH</source>
          <target state="new">XMMatrixLookToLH</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a camera direction.</source>
          <target state="new">Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a camera direction.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>XMMatrixLookToRH</source>
          <target state="new">XMMatrixLookToRH</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a camera direction.</source>
          <target state="new">Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a camera direction.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>XMMatrixOrthographicLH</source>
          <target state="new">XMMatrixOrthographicLH</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Builds an orthogonal projection matrix for a left-handed coordinate system.</source>
          <target state="new">Builds an orthogonal projection matrix for a left-handed coordinate system.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>XMMatrixOrthographicOffCenterLH</source>
          <target state="new">XMMatrixOrthographicOffCenterLH</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Builds a custom orthogonal projection matrix for a left-handed coordinate system.</source>
          <target state="new">Builds a custom orthogonal projection matrix for a left-handed coordinate system.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>XMMatrixOrthographicOffCenterRH</source>
          <target state="new">XMMatrixOrthographicOffCenterRH</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Builds a custom orthogonal projection matrix for a right-handed coordinate system.</source>
          <target state="new">Builds a custom orthogonal projection matrix for a right-handed coordinate system.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>XMMatrixOrthographicRH</source>
          <target state="new">XMMatrixOrthographicRH</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Builds an orthogonal projection matrix for a right-handed coordinate system.</source>
          <target state="new">Builds an orthogonal projection matrix for a right-handed coordinate system.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>XMMatrixPerspectiveFovLH</source>
          <target state="new">XMMatrixPerspectiveFovLH</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Builds a left-handed perspective projection matrix based on a field of view.</source>
          <target state="new">Builds a left-handed perspective projection matrix based on a field of view.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>XMMatrixPerspectiveFovRH</source>
          <target state="new">XMMatrixPerspectiveFovRH</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Builds a right-handed perspective projection matrix based on a field of view.</source>
          <target state="new">Builds a right-handed perspective projection matrix based on a field of view.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>XMMatrixPerspectiveLH</source>
          <target state="new">XMMatrixPerspectiveLH</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Builds a left-handed perspective projection matrix.</source>
          <target state="new">Builds a left-handed perspective projection matrix.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>XMMatrixPerspectiveOffCenterLH</source>
          <target state="new">XMMatrixPerspectiveOffCenterLH</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Builds a custom version of a left-handed perspective projection matrix.</source>
          <target state="new">Builds a custom version of a left-handed perspective projection matrix.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>XMMatrixPerspectiveOffCenterRH</source>
          <target state="new">XMMatrixPerspectiveOffCenterRH</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Builds a custom version of a right-handed perspective projection matrix.</source>
          <target state="new">Builds a custom version of a right-handed perspective projection matrix.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>XMMatrixPerspectiveRH</source>
          <target state="new">XMMatrixPerspectiveRH</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Builds a right-handed perspective projection matrix.</source>
          <target state="new">Builds a right-handed perspective projection matrix.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>OpenGL ES2.0-to-Direct3D 11 porting Frequently Asked Questions</source>
          <target state="new">OpenGL ES2.0-to-Direct3D 11 porting Frequently Asked Questions</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Question: "In general, can I search for certain strings or patterns in my OpenGL code and replace them with the Direct3D equivalents?"</source>
          <target state="new">Question: "In general, can I search for certain strings or patterns in my OpenGL code and replace them with the Direct3D equivalents?"</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Answer: No.</source>
          <target state="new">Answer: No.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0 and Direct3D 11 come from different generations of graphics pipeline modeling.</source>
          <target state="new">OpenGL ES 2.0 and Direct3D 11 come from different generations of graphics pipeline modeling.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>While there are some surface similarities between concepts and APIs, such as the rendering context and the instancing of shaders, you should review this guidance as well as the Direct3D 11 reference so you can make the best choices when recreating your pipeline instead of attempting a 1-to-1 mapping.</source>
          <target state="new">While there are some surface similarities between concepts and APIs, such as the rendering context and the instancing of shaders, you should review this guidance as well as the Direct3D 11 reference so you can make the best choices when recreating your pipeline instead of attempting a 1-to-1 mapping.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>However, if you are porting from GLSL to HLSL, creating a set of common aliases for GLSL variables, intrinsincs, and functions can not only make porting easier, it allows you to maintain only one set of shader code files.</source>
          <target state="new">However, if you are porting from GLSL to HLSL, creating a set of common aliases for GLSL variables, intrinsincs, and functions can not only make porting easier, it allows you to maintain only one set of shader code files.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>