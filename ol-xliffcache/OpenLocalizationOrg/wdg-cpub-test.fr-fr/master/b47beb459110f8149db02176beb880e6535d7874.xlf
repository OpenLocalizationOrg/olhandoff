<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b47beb459110f8149db02176beb880e6535d7874</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\glsl-to-hlsl-reference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>GLSL-to-HLSL reference</source>
          <target state="new">GLSL-to-HLSL reference</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You port your OpenGL Shader Language (GLSL) code to Microsoft High Level Shader Language (HLSL) code when you port your graphics architecture from OpenGL ES 2.0 to Direct3D 11 to create a game for Universal Windows Platform (UWP).</source>
          <target state="new">You port your OpenGL Shader Language (GLSL) code to Microsoft High Level Shader Language (HLSL) code when you port your graphics architecture from OpenGL ES 2.0 to Direct3D 11 to create a game for Universal Windows Platform (UWP).</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>GLSL-to-HLSL reference</source>
          <target state="new">GLSL-to-HLSL reference</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You port your OpenGL Shader Language (GLSL) code to Microsoft High Level Shader Language (HLSL) code when you <bpt id="p1">[</bpt>port your graphics architecture from OpenGL ES 2.0 to Direct3D 11<ept id="p1">](port-from-opengl-es-2-0-to-directx-11-1.md)</ept> to create a game for Universal Windows Platform (UWP).</source>
          <target state="new">You port your OpenGL Shader Language (GLSL) code to Microsoft High Level Shader Language (HLSL) code when you <bpt id="p1">[</bpt>port your graphics architecture from OpenGL ES 2.0 to Direct3D 11<ept id="p1">](port-from-opengl-es-2-0-to-directx-11-1.md)</ept> to create a game for Universal Windows Platform (UWP).</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The GLSL that is referred to herein is compatible with OpenGL ES 2.0; the HLSL is compatible with Direct3D 11.</source>
          <target state="new">The GLSL that is referred to herein is compatible with OpenGL ES 2.0; the HLSL is compatible with Direct3D 11.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For info about the differences between Direct3D 11 and previous versions of Direct3D, see <bpt id="p1">[</bpt>Feature mapping<ept id="p1">](feature-mapping.md)</ept>.</source>
          <target state="new">For info about the differences between Direct3D 11 and previous versions of Direct3D, see <bpt id="p1">[</bpt>Feature mapping<ept id="p1">](feature-mapping.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Comparing OpenGL ES 2.0 with Direct3D 11</source>
          <target state="new">Comparing OpenGL ES 2.0 with Direct3D 11</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Porting GLSL variables to HLSL</source>
          <target state="new">Porting GLSL variables to HLSL</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Porting GLSL types to HLSL</source>
          <target state="new">Porting GLSL types to HLSL</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Porting GLSL pre-defined global variables to HLSL</source>
          <target state="new">Porting GLSL pre-defined global variables to HLSL</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Examples of porting GLSL variables to HLSL</source>
          <target state="new">Examples of porting GLSL variables to HLSL</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Uniform, attribute, and varying in GLSL</source>
          <target state="new">Uniform, attribute, and varying in GLSL</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constant buffers and data transfers in HLSL</source>
          <target state="new">Constant buffers and data transfers in HLSL</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Examples of porting OpenGL rendering code to Direct3D</source>
          <target state="new">Examples of porting OpenGL rendering code to Direct3D</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Comparing OpenGL ES 2.0 with Direct3D 11</source>
          <target state="new">Comparing OpenGL ES 2.0 with Direct3D 11</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0 and Direct3D 11 have many similarities.</source>
          <target state="new">OpenGL ES 2.0 and Direct3D 11 have many similarities.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>They both have similar rendering pipelines and graphics features.</source>
          <target state="new">They both have similar rendering pipelines and graphics features.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>But Direct3D 11 is a rendering implementation and API, not a specification; OpenGL ES 2.0 is a rendering specification and API, not an implementation.</source>
          <target state="new">But Direct3D 11 is a rendering implementation and API, not a specification; OpenGL ES 2.0 is a rendering specification and API, not an implementation.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Direct3D 11 and OpenGL ES 2.0 generally differ in these ways:</source>
          <target state="new">Direct3D 11 and OpenGL ES 2.0 generally differ in these ways:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Hardware and operating system agnostic specification with vendor provided implementations</source>
          <target state="new">Hardware and operating system agnostic specification with vendor provided implementations</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Microsoft implementation of hardware abstraction and certification on Windows platforms</source>
          <target state="new">Microsoft implementation of hardware abstraction and certification on Windows platforms</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Abstracted for hardware diversity, runtime manages most resources</source>
          <target state="new">Abstracted for hardware diversity, runtime manages most resources</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Direct access to hardware layout; app can manage resources and processing</source>
          <target state="new">Direct access to hardware layout; app can manage resources and processing</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Provides higher-level modules via third-party libraries (for example, Simple DirectMedia Layer (SDL))</source>
          <target state="new">Provides higher-level modules via third-party libraries (for example, Simple DirectMedia Layer (SDL))</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Higher-level modules, like Direct2D, are built upon lower modules to simplify development for Windows apps</source>
          <target state="new">Higher-level modules, like Direct2D, are built upon lower modules to simplify development for Windows apps</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Hardware vendors differentiate via extensions</source>
          <target state="new">Hardware vendors differentiate via extensions</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Microsoft adds optional features to the API in a generic way so they aren't specific to any particular hardware vendor</source>
          <target state="new">Microsoft adds optional features to the API in a generic way so they aren't specific to any particular hardware vendor</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>GLSL and HLSL generally differ in these ways:</source>
          <target state="new">GLSL and HLSL generally differ in these ways:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>GLSL</source>
          <target state="new">GLSL</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>HLSL</source>
          <target state="new">HLSL</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Procedural, step-centric (C like)</source>
          <target state="new">Procedural, step-centric (C like)</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Object oriented, data-centric (C++ like)</source>
          <target state="new">Object oriented, data-centric (C++ like)</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Shader compilation integrated into the graphics API</source>
          <target state="new">Shader compilation integrated into the graphics API</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The HLSL compiler <bpt id="p1">[</bpt>compiles the shader<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509633)</ept> to an intermediate binary representation before Direct3D passes it to the driver.</source>
          <target state="new">The HLSL compiler <bpt id="p1">[</bpt>compiles the shader<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509633)</ept> to an intermediate binary representation before Direct3D passes it to the driver.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Note<ph id="ph1">&lt;/strong&gt;</ph>  This binary representation is hardware independent.</source>
          <target state="new">Note<ph id="ph1">&lt;/strong&gt;</ph>  This binary representation is hardware independent.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It's typically compiled at app build time, rather than at app run time.</source>
          <target state="new">It's typically compiled at app build time, rather than at app run time.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variable<ept id="p1">](#variables)</ept> storage modifiers</source>
          <target state="new"><bpt id="p1">[</bpt>Variable<ept id="p1">](#variables)</ept> storage modifiers</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Constant buffers and data transfers via input layout declarations</source>
          <target state="new">Constant buffers and data transfers via input layout declarations</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="new">Types</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Typical vector type: vec2/3/4</source>
          <target state="new">Typical vector type: vec2/3/4</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>lowp, mediump, highp</source>
          <target state="new">lowp, mediump, highp</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Typical vector type: float2/3/4</source>
          <target state="new">Typical vector type: float2/3/4</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>min10float, min16float</source>
          <target state="new">min10float, min16float</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>texture2D [Function]</source>
          <target state="new">texture2D [Function]</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>texture.Sample<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509695)</ept> [datatype.Function]</source>
          <target state="new"><bpt id="p1">[</bpt>texture.Sample<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509695)</ept> [datatype.Function]</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>sampler2D [datatype]</source>
          <target state="new">sampler2D [datatype]</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Texture2D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471525)</ept> [datatype]</source>
          <target state="new"><bpt id="p1">[</bpt>Texture2D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471525)</ept> [datatype]</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Row-major matrices (default)</source>
          <target state="new">Row-major matrices (default)</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Column-major matrices (default)</source>
          <target state="new">Column-major matrices (default)</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Note<ph id="ph1">&lt;/strong&gt;</ph>   Use the <ph id="ph2">&lt;strong&gt;</ph>row_major<ph id="ph3">&lt;/strong&gt;</ph> type-modifier to change the layout for one variable.</source>
          <target state="new">Note<ph id="ph1">&lt;/strong&gt;</ph>   Use the <ph id="ph2">&lt;strong&gt;</ph>row_major<ph id="ph3">&lt;/strong&gt;</ph> type-modifier to change the layout for one variable.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Variable Syntax<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509706)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Variable Syntax<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509706)</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can also specify a compiler flag or a pragma to change the global default.</source>
          <target state="new">You can also specify a compiler flag or a pragma to change the global default.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Fragment shader</source>
          <target state="new">Fragment shader</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Pixel shader</source>
          <target state="new">Pixel shader</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  HLSL has textures and samplers as two separate objects.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  HLSL has textures and samplers as two separate objects.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In GLSL, like Direct3D 9, the texture binding is part of the sampler state.</source>
          <target state="new">In GLSL, like Direct3D 9, the texture binding is part of the sampler state.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In GLSL, you present much of the OpenGL state as pre-defined global variables.</source>
          <target state="new">In GLSL, you present much of the OpenGL state as pre-defined global variables.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, with GLSL, you use the <bpt id="p1">**</bpt>gl\_Position<ept id="p1">**</ept> variable to specify vertex position and the <bpt id="p2">**</bpt>gl\_FragColor<ept id="p2">**</ept> variable to specify fragment color.</source>
          <target state="new">For example, with GLSL, you use the <bpt id="p1">**</bpt>gl\_Position<ept id="p1">**</ept> variable to specify vertex position and the <bpt id="p2">**</bpt>gl\_FragColor<ept id="p2">**</ept> variable to specify fragment color.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In HLSL, you pass Direct3D state explicitly from the app code to the shader.</source>
          <target state="new">In HLSL, you pass Direct3D state explicitly from the app code to the shader.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, with Direct3D and HLSL, the input to the vertex shader must match the data format in the vertex buffer, and the structure of a constant buffer in the app code must match the structure of a constant buffer (<bpt id="p1">[</bpt>cbuffer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509581)</ept>) in shader code.</source>
          <target state="new">For example, with Direct3D and HLSL, the input to the vertex shader must match the data format in the vertex buffer, and the structure of a constant buffer in the app code must match the structure of a constant buffer (<bpt id="p1">[</bpt>cbuffer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509581)</ept>) in shader code.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Porting GLSL variables to HLSL</source>
          <target state="new">Porting GLSL variables to HLSL</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In GLSL, you apply modifiers (qualifiers) to a global shader variable declaration to give that variable a specific behavior in your shaders.</source>
          <target state="new">In GLSL, you apply modifiers (qualifiers) to a global shader variable declaration to give that variable a specific behavior in your shaders.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In HLSL, you don’t need these modifiers because you define the flow of the shader with the arguments that you pass to your shader and that you return from your shader.</source>
          <target state="new">In HLSL, you don’t need these modifiers because you define the flow of the shader with the arguments that you pass to your shader and that you return from your shader.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>GLSL variable behavior</source>
          <target state="new">GLSL variable behavior</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>HLSL equivalent</source>
          <target state="new">HLSL equivalent</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>uniform</source>
          <target state="new">uniform</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You pass a uniform variable from the app code into either or both vertex and fragment shaders.</source>
          <target state="new">You pass a uniform variable from the app code into either or both vertex and fragment shaders.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You must set the values of all uniforms before you draw any triangles with those shaders so their values stay the same throughout the drawing of a triangle mesh.</source>
          <target state="new">You must set the values of all uniforms before you draw any triangles with those shaders so their values stay the same throughout the drawing of a triangle mesh.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These values are uniform.</source>
          <target state="new">These values are uniform.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Some uniforms are set for the entire frame and others uniquely to one particular vertex-pixel shader pair.</source>
          <target state="new">Some uniforms are set for the entire frame and others uniquely to one particular vertex-pixel shader pair.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Uniform variables are per-polygon variables.</source>
          <target state="new">Uniform variables are per-polygon variables.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Use constant buffer.</source>
          <target state="new">Use constant buffer.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Create a Constant Buffer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476896)</ept> and <bpt id="p2">[</bpt>Shader Constants<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb509581)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>How to: Create a Constant Buffer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476896)</ept> and <bpt id="p2">[</bpt>Shader Constants<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb509581)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>varying</source>
          <target state="new">varying</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You initialize a varying variable inside the vertex shader and pass it through to an identically named varying variable in the fragment shader.</source>
          <target state="new">You initialize a varying variable inside the vertex shader and pass it through to an identically named varying variable in the fragment shader.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Because the vertex shader only sets the value of the varying variables at each vertex, the rasterizer interpolates those values (in a perspective-correct manner) to generate per fragment values to pass into the fragment shader.</source>
          <target state="new">Because the vertex shader only sets the value of the varying variables at each vertex, the rasterizer interpolates those values (in a perspective-correct manner) to generate per fragment values to pass into the fragment shader.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>These variables vary across each triangle.</source>
          <target state="new">These variables vary across each triangle.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use the structure that you return from your vertex shader as the input to your pixel shader.</source>
          <target state="new">Use the structure that you return from your vertex shader as the input to your pixel shader.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Make sure the semantic values match.</source>
          <target state="new">Make sure the semantic values match.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>attribute</source>
          <target state="new">attribute</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>An attribute is a part of the description of a vertex that you pass from the app code to the vertex shader alone.</source>
          <target state="new">An attribute is a part of the description of a vertex that you pass from the app code to the vertex shader alone.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Unlike a uniform, you set each attribute’s value for each vertex, which, in turn, allows each vertex to have a different value.</source>
          <target state="new">Unlike a uniform, you set each attribute’s value for each vertex, which, in turn, allows each vertex to have a different value.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Attribute variables are per-vertex variables.</source>
          <target state="new">Attribute variables are per-vertex variables.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Define a vertex buffer in your Direct3D app code and match it to the vertex input defined in the vertex shader.</source>
          <target state="new">Define a vertex buffer in your Direct3D app code and match it to the vertex input defined in the vertex shader.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Optionally, define an index buffer.</source>
          <target state="new">Optionally, define an index buffer.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Create a Vertex Buffer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476899)</ept> and <bpt id="p2">[</bpt>How to: Create an Index Buffer<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476897)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>How to: Create a Vertex Buffer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476899)</ept> and <bpt id="p2">[</bpt>How to: Create an Index Buffer<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476897)</ept>.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Create an input layout in your Direct3D app code and match semantic values with those in the vertex input.</source>
          <target state="new">Create an input layout in your Direct3D app code and match semantic values with those in the vertex input.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Create the input layout<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205117#Create_the_Input_Layout)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Create the input layout<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205117#Create_the_Input_Layout)</ept>.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>const</source>
          <target state="new">const</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Constants that are compiled into the shader and never change.</source>
          <target state="new">Constants that are compiled into the shader and never change.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">&lt;strong&gt;</ph>static const<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">Use a <ph id="ph1">&lt;strong&gt;</ph>static const<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>static<ph id="ph1">&lt;/strong&gt;</ph> means the value isn't exposed to constant buffers, <ph id="ph2">&lt;strong&gt;</ph>const<ph id="ph3">&lt;/strong&gt;</ph> means the shader can't change the value.</source>
          <target state="new">static<ph id="ph1">&lt;/strong&gt;</ph> means the value isn't exposed to constant buffers, <ph id="ph2">&lt;strong&gt;</ph>const<ph id="ph3">&lt;/strong&gt;</ph> means the shader can't change the value.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>So, the value is known at compile time based on its initializer.</source>
          <target state="new">So, the value is known at compile time based on its initializer.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In GLSL, variables without modifiers are just ordinary global variables that are private to each shader.</source>
          <target state="new">In GLSL, variables without modifiers are just ordinary global variables that are private to each shader.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When you pass data to textures (<bpt id="p1">[</bpt>Texture2D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471525)</ept> in HLSL) and their associated samplers (<bpt id="p2">[</bpt>SamplerState<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb509644)</ept> in HLSL), you typically declare them as global variables in the pixel shader.</source>
          <target state="new">When you pass data to textures (<bpt id="p1">[</bpt>Texture2D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471525)</ept> in HLSL) and their associated samplers (<bpt id="p2">[</bpt>SamplerState<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb509644)</ept> in HLSL), you typically declare them as global variables in the pixel shader.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Porting GLSL types to HLSL</source>
          <target state="new">Porting GLSL types to HLSL</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Use this table to port your GLSL types to HLSL.</source>
          <target state="new">Use this table to port your GLSL types to HLSL.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>GLSL type</source>
          <target state="new">GLSL type</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>HLSL type</source>
          <target state="new">HLSL type</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>scalar types: float, int, bool</source>
          <target state="new">scalar types: float, int, bool</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>scalar types: float, int, bool</source>
          <target state="new">scalar types: float, int, bool</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>also, uint, double</source>
          <target state="new">also, uint, double</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Scalar Types<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509646)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Scalar Types<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509646)</ept>.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>vector type</source>
          <target state="new">vector type</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>floating-point vector: vec2, vec3, vec4</source>
          <target state="new">floating-point vector: vec2, vec3, vec4</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Boolean vector: bvec2, bvec3, bvec4</source>
          <target state="new">Boolean vector: bvec2, bvec3, bvec4</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>signed integer vector: ivec2, ivec3, ivec4</source>
          <target state="new">signed integer vector: ivec2, ivec3, ivec4</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>vector type</source>
          <target state="new">vector type</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>float2, float3, float4, and float1</source>
          <target state="new">float2, float3, float4, and float1</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>bool2, bool3, bool4, and bool1</source>
          <target state="new">bool2, bool3, bool4, and bool1</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>int2, int3, int4, and int1</source>
          <target state="new">int2, int3, int4, and int1</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>These types also have vector expansions similar to float, bool, and int:</source>
          <target state="new">These types also have vector expansions similar to float, bool, and int:</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>uint</source>
          <target state="new">uint</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>min10float, min16float</source>
          <target state="new">min10float, min16float</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>min12int, min16int</source>
          <target state="new">min12int, min16int</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>min16uint</source>
          <target state="new">min16uint</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Vector Type<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509707)</ept> and <bpt id="p2">[</bpt>Keywords<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb509568)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Vector Type<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509707)</ept> and <bpt id="p2">[</bpt>Keywords<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb509568)</ept>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>vector is also type defined as float4 (typedef vector <ph id="ph1">&amp;lt;</ph>float, 4<ph id="ph2">&amp;gt;</ph> vector;).</source>
          <target state="new">vector is also type defined as float4 (typedef vector <ph id="ph1">&amp;lt;</ph>float, 4<ph id="ph2">&amp;gt;</ph> vector;).</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>User-Defined Type<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509702)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>User-Defined Type<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509702)</ept>.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>matrix type</source>
          <target state="new">matrix type</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>mat2: 2x2 float matrix</source>
          <target state="new">mat2: 2x2 float matrix</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>mat3: 3x3 float matrix</source>
          <target state="new">mat3: 3x3 float matrix</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>mat4: 4x4 float matrix</source>
          <target state="new">mat4: 4x4 float matrix</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>matrix type</source>
          <target state="new">matrix type</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>float2x2</source>
          <target state="new">float2x2</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>float3x3</source>
          <target state="new">float3x3</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>float4x4</source>
          <target state="new">float4x4</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>also, float1x1, float1x2, float1x3, float1x4, float2x1, float2x3, float2x4, float3x1, float3x2, float3x4, float4x1, float4x2, float4x3</source>
          <target state="new">also, float1x1, float1x2, float1x3, float1x4, float2x1, float2x3, float2x4, float3x1, float3x2, float3x4, float4x1, float4x2, float4x3</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>These types also have matrix expansions similar to float:</source>
          <target state="new">These types also have matrix expansions similar to float:</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>int, uint, bool</source>
          <target state="new">int, uint, bool</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>min10float, min16float</source>
          <target state="new">min10float, min16float</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>min12int, min16int</source>
          <target state="new">min12int, min16int</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>min16uint</source>
          <target state="new">min16uint</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">[</bpt>matrix type<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509623)</ept> to define a matrix.</source>
          <target state="new">You can also use the <bpt id="p1">[</bpt>matrix type<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509623)</ept> to define a matrix.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For example: matrix <ph id="ph1">&amp;lt;</ph>float, 2, 2<ph id="ph2">&amp;gt;</ph> fMatrix = {0.0f, 0.1, 2.1f, 2.2f};</source>
          <target state="new">For example: matrix <ph id="ph1">&amp;lt;</ph>float, 2, 2<ph id="ph2">&amp;gt;</ph> fMatrix = {0.0f, 0.1, 2.1f, 2.2f};</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>matrix is also type defined as float4x4 (typedef matrix <ph id="ph1">&amp;lt;</ph>float, 4, 4<ph id="ph2">&amp;gt;</ph> matrix;).</source>
          <target state="new">matrix is also type defined as float4x4 (typedef matrix <ph id="ph1">&amp;lt;</ph>float, 4, 4<ph id="ph2">&amp;gt;</ph> matrix;).</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>User-Defined Type<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509702)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>User-Defined Type<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509702)</ept>.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>precision qualifiers for float, int, sampler</source>
          <target state="new">precision qualifiers for float, int, sampler</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>highp</source>
          <target state="new">highp</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This qualifier provides minimum precision requirements that are greater than that provided by min16float and less than a full 32-bit float.</source>
          <target state="new">This qualifier provides minimum precision requirements that are greater than that provided by min16float and less than a full 32-bit float.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Equivalent in HLSL is:</source>
          <target state="new">Equivalent in HLSL is:</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>highp float -<ph id="ph1">&amp;gt;</ph> float</source>
          <target state="new">highp float -<ph id="ph1">&amp;gt;</ph> float</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>highp int -<ph id="ph1">&amp;gt;</ph> int</source>
          <target state="new">highp int -<ph id="ph1">&amp;gt;</ph> int</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>mediump</source>
          <target state="new">mediump</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This qualifier applied to float and int is equivalent to min16float and min12int in HLSL.</source>
          <target state="new">This qualifier applied to float and int is equivalent to min16float and min12int in HLSL.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Minimum 10 bits of mantissa, not like min10float.</source>
          <target state="new">Minimum 10 bits of mantissa, not like min10float.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>lowp</source>
          <target state="new">lowp</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This qualifier applied to float provides a floating point range of -2 to 2.</source>
          <target state="new">This qualifier applied to float provides a floating point range of -2 to 2.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Equivalent to min10float in HLSL.</source>
          <target state="new">Equivalent to min10float in HLSL.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>precision types</source>
          <target state="new">precision types</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>min16float: minimum 16-bit floating point value</source>
          <target state="new">min16float: minimum 16-bit floating point value</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>min10float</source>
          <target state="new">min10float</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Minimum fixed-point signed 2.8 bit value (2 bits of whole number and 8 bits fractional component).</source>
          <target state="new">Minimum fixed-point signed 2.8 bit value (2 bits of whole number and 8 bits fractional component).</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The 8-bit fractional component can be inclusive of 1 instead of exclusive to give it the full inclusive range of -2 to 2.</source>
          <target state="new">The 8-bit fractional component can be inclusive of 1 instead of exclusive to give it the full inclusive range of -2 to 2.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>min16int: minimum 16-bit signed integer</source>
          <target state="new">min16int: minimum 16-bit signed integer</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>min12int: minimum 12-bit signed integer</source>
          <target state="new">min12int: minimum 12-bit signed integer</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This type is for 10Level9 (<bpt id="p1">[</bpt>9_x feature levels<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476876)</ept>) in which integers are represented by floating point numbers.</source>
          <target state="new">This type is for 10Level9 (<bpt id="p1">[</bpt>9_x feature levels<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476876)</ept>) in which integers are represented by floating point numbers.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This is the precision you can get when you emulate an integer with a 16-bit floating point number.</source>
          <target state="new">This is the precision you can get when you emulate an integer with a 16-bit floating point number.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>min16uint: minimum 16-bit unsigned integer</source>
          <target state="new">min16uint: minimum 16-bit unsigned integer</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Scalar Types<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509646)</ept> and <bpt id="p2">[</bpt>Using HLSL minimum precision<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh968108)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Scalar Types<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509646)</ept> and <bpt id="p2">[</bpt>Using HLSL minimum precision<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh968108)</ept>.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>sampler2D</source>
          <target state="new">sampler2D</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Texture2D</source>
          <target state="new">Texture2D</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>samplerCube</source>
          <target state="new">samplerCube</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>TextureCube</source>
          <target state="new">TextureCube</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Porting GLSL pre-defined global variables to HLSL</source>
          <target state="new">Porting GLSL pre-defined global variables to HLSL</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Use this table to port GLSL pre-defined global variables to HLSL.</source>
          <target state="new">Use this table to port GLSL pre-defined global variables to HLSL.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>GLSL pre-defined global variable</source>
          <target state="new">GLSL pre-defined global variable</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>HLSL semantics</source>
          <target state="new">HLSL semantics</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>gl_Position</source>
          <target state="new">gl_Position</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Vertex position</source>
          <target state="new">Vertex position</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>for example - gl_Position = position;</source>
          <target state="new">for example - gl_Position = position;</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>SV_Position</source>
          <target state="new">SV_Position</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>POSITION in Direct3D 9</source>
          <target state="new">POSITION in Direct3D 9</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Vertex shader output</source>
          <target state="new">Vertex shader output</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Vertex position</source>
          <target state="new">Vertex position</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>for example - float4 vPosition : SV_Position;</source>
          <target state="new">for example - float4 vPosition : SV_Position;</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>gl_PointSize</source>
          <target state="new">gl_PointSize</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This variable is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This variable is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Point size</source>
          <target state="new">Point size</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>PSIZE</source>
          <target state="new">PSIZE</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>No meaning unless you target Direct3D 9</source>
          <target state="new">No meaning unless you target Direct3D 9</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Vertex shader output</source>
          <target state="new">Vertex shader output</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Point size</source>
          <target state="new">Point size</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>gl_FragColor</source>
          <target state="new">gl_FragColor</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Fragment color</source>
          <target state="new">Fragment color</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>for example - gl_FragColor = vec4(colorVarying, 1.0);</source>
          <target state="new">for example - gl_FragColor = vec4(colorVarying, 1.0);</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>SV_Target</source>
          <target state="new">SV_Target</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>COLOR in Direct3D 9</source>
          <target state="new">COLOR in Direct3D 9</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Pixel shader output</source>
          <target state="new">Pixel shader output</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Pixel color</source>
          <target state="new">Pixel color</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>for example - float4 Color[4] : SV_Target;</source>
          <target state="new">for example - float4 Color[4] : SV_Target;</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>gl_FragData[n]</source>
          <target state="new">gl_FragData[n]</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Fragment color for color attachment n</source>
          <target state="new">Fragment color for color attachment n</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>SV_Target[n]</source>
          <target state="new">SV_Target[n]</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Pixel shader output value that is stored in n render target, where 0 <ph id="ph1">&amp;lt;</ph>= n <ph id="ph2">&amp;lt;</ph>= 7.</source>
          <target state="new">Pixel shader output value that is stored in n render target, where 0 <ph id="ph1">&amp;lt;</ph>= n <ph id="ph2">&amp;lt;</ph>= 7.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>gl_FragCoord</source>
          <target state="new">gl_FragCoord</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Fragment position within frame buffer</source>
          <target state="new">Fragment position within frame buffer</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>SV_Position</source>
          <target state="new">SV_Position</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Not available in Direct3D 9</source>
          <target state="new">Not available in Direct3D 9</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This semantic is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Pixel shader input</source>
          <target state="new">Pixel shader input</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Screen space coordinates</source>
          <target state="new">Screen space coordinates</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>for example - float4 screenSpace : SV_Position</source>
          <target state="new">for example - float4 screenSpace : SV_Position</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>gl_FrontFacing</source>
          <target state="new">gl_FrontFacing</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This variable is type <ph id="ph1">&lt;strong&gt;</ph>bool<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This variable is type <ph id="ph1">&lt;strong&gt;</ph>bool<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Determines whether fragment belongs to a front-facing primitive.</source>
          <target state="new">Determines whether fragment belongs to a front-facing primitive.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>SV_IsFrontFace</source>
          <target state="new">SV_IsFrontFace</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>VFACE in Direct3D 9</source>
          <target state="new">VFACE in Direct3D 9</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>SV_IsFrontFace is type <ph id="ph1">&lt;strong&gt;</ph>bool<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">SV_IsFrontFace is type <ph id="ph1">&lt;strong&gt;</ph>bool<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>VFACE is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">VFACE is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Pixel shader input</source>
          <target state="new">Pixel shader input</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Primitive facing</source>
          <target state="new">Primitive facing</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>gl_PointCoord</source>
          <target state="new">gl_PointCoord</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec2<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This variable is type <ph id="ph1">&lt;strong&gt;</ph>vec2<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Fragment position within a point (point rasterization only)</source>
          <target state="new">Fragment position within a point (point rasterization only)</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>SV_Position</source>
          <target state="new">SV_Position</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>VPOS in Direct3D 9</source>
          <target state="new">VPOS in Direct3D 9</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>SV_Position is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">SV_Position is type <ph id="ph1">&lt;strong&gt;</ph>float4<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>VPOS is type <ph id="ph1">&lt;strong&gt;</ph>float2<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">VPOS is type <ph id="ph1">&lt;strong&gt;</ph>float2<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Pixel shader input</source>
          <target state="new">Pixel shader input</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The pixel or sample position in screen space</source>
          <target state="new">The pixel or sample position in screen space</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>for example - float4 pos : SV_Position</source>
          <target state="new">for example - float4 pos : SV_Position</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>gl_FragDepth</source>
          <target state="new">gl_FragDepth</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>This variable is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">This variable is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Depth buffer data</source>
          <target state="new">Depth buffer data</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>SV_Depth</source>
          <target state="new">SV_Depth</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>DEPTH in Direct3D 9</source>
          <target state="new">DEPTH in Direct3D 9</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>SV_Depth is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</source>
          <target state="new">SV_Depth is type <ph id="ph1">&lt;strong&gt;</ph>float<ph id="ph2">&lt;/strong&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Pixel shader output</source>
          <target state="new">Pixel shader output</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Depth buffer data</source>
          <target state="new">Depth buffer data</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>You use semantics to specify position, color, and so on for vertex shader input and pixel shader input.</source>
          <target state="new">You use semantics to specify position, color, and so on for vertex shader input and pixel shader input.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>You must match the semantics values in the input layout with the vertex shader input.</source>
          <target state="new">You must match the semantics values in the input layout with the vertex shader input.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>For examples, see <bpt id="p1">[</bpt>Examples of porting GLSL variables to HLSL<ept id="p1">](#example1)</ept>.</source>
          <target state="new">For examples, see <bpt id="p1">[</bpt>Examples of porting GLSL variables to HLSL<ept id="p1">](#example1)</ept>.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>For more info about the HLSL semantics, see <bpt id="p1">[</bpt>Semantics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509647)</ept>.</source>
          <target state="new">For more info about the HLSL semantics, see <bpt id="p1">[</bpt>Semantics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509647)</ept>.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Examples of porting GLSL variables to HLSL</source>
          <target state="new">Examples of porting GLSL variables to HLSL</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Here we show examples of using GLSL variables in OpenGL/GLSL code and then the equivalent example in Direct3D/HLSL code.</source>
          <target state="new">Here we show examples of using GLSL variables in OpenGL/GLSL code and then the equivalent example in Direct3D/HLSL code.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Uniform, attribute, and varying in GLSL</source>
          <target state="new">Uniform, attribute, and varying in GLSL</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>OpenGL app code</source>
          <target state="new">OpenGL app code</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>GLSL vertex shader code</source>
          <target state="new">GLSL vertex shader code</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>GLSL fragment shader code</source>
          <target state="new">GLSL fragment shader code</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Constant buffers and data transfers in HLSL</source>
          <target state="new">Constant buffers and data transfers in HLSL</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Here is an example of how you pass data to the HLSL vertex shader that then flows through to the pixel shader.</source>
          <target state="new">Here is an example of how you pass data to the HLSL vertex shader that then flows through to the pixel shader.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>In your app code, define a vertex and a constant buffer.</source>
          <target state="new">In your app code, define a vertex and a constant buffer.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Then, in your vertex shader code, define the constant buffer as a <bpt id="p1">[</bpt>cbuffer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509581)</ept> and store the per-vertex data and the pixel shader input data.</source>
          <target state="new">Then, in your vertex shader code, define the constant buffer as a <bpt id="p1">[</bpt>cbuffer<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509581)</ept> and store the per-vertex data and the pixel shader input data.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Here we use structures called <bpt id="p1">**</bpt>VertexShaderInput<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PixelShaderInput<ept id="p2">**</ept>.</source>
          <target state="new">Here we use structures called <bpt id="p1">**</bpt>VertexShaderInput<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PixelShaderInput<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Direct3D app code</source>
          <target state="new">Direct3D app code</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>HLSL vertex shader code</source>
          <target state="new">HLSL vertex shader code</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>HLSL pixel shader code</source>
          <target state="new">HLSL pixel shader code</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Examples of porting OpenGL rendering code to Direct3D</source>
          <target state="new">Examples of porting OpenGL rendering code to Direct3D</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Here we show an example of rendering in OpenGL ES 2.0 code and then the equivalent example in Direct3D 11 code.</source>
          <target state="new">Here we show an example of rendering in OpenGL ES 2.0 code and then the equivalent example in Direct3D 11 code.</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>OpenGL rendering code</source>
          <target state="new">OpenGL rendering code</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Direct3D rendering code</source>
          <target state="new">Direct3D rendering code</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Port from OpenGL ES 2.0 to Direct3D 11</source>
          <target state="new">Port from OpenGL ES 2.0 to Direct3D 11</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>