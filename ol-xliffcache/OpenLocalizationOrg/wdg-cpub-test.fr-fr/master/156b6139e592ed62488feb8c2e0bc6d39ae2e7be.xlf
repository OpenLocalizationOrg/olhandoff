<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">156b6139e592ed62488feb8c2e0bc6d39ae2e7be</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\winrt-components\passing-arrays-to-a-windows-runtime-component.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Passing arrays to a Windows Runtime Component</source>
          <target state="new">Passing arrays to a Windows Runtime Component</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In the Windows Universal Platform (UWP), parameters are either for input or for output, never both.</source>
          <target state="new">In the Windows Universal Platform (UWP), parameters are either for input or for output, never both.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This means that the contents of an array that is passed to a method, as well as the array itself, are either for input or for output.</source>
          <target state="new">This means that the contents of an array that is passed to a method, as well as the array itself, are either for input or for output.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Passing arrays to a Windows Runtime Component</source>
          <target state="new">Passing arrays to a Windows Runtime Component</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target state="new">\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
          <target state="new">Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the Windows Universal Platform (UWP), parameters are either for input or for output, never both.</source>
          <target state="new">In the Windows Universal Platform (UWP), parameters are either for input or for output, never both.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This means that the contents of an array that is passed to a method, as well as the array itself, are either for input or for output.</source>
          <target state="new">This means that the contents of an array that is passed to a method, as well as the array itself, are either for input or for output.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the contents of the array are for input, the method reads from the array but doesn't write to it.</source>
          <target state="new">If the contents of the array are for input, the method reads from the array but doesn't write to it.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the contents of the array are for output, the method writes to the array but doesn't read from it.</source>
          <target state="new">If the contents of the array are for output, the method writes to the array but doesn't read from it.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This presents a problem for array parameters, because arrays in the .NET Framework are reference types, and the contents of an array are mutable even when the array reference is passed by value (<bpt id="p1">**</bpt>ByVal<ept id="p1">**</ept> in Visual Basic).</source>
          <target state="new">This presents a problem for array parameters, because arrays in the .NET Framework are reference types, and the contents of an array are mutable even when the array reference is passed by value (<bpt id="p1">**</bpt>ByVal<ept id="p1">**</ept> in Visual Basic).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Windows Runtime Metadata Export Tool (Winmdexp.exe)<ept id="p1">](https://msdn.microsoft.com/library/hh925576.aspx)</ept> requires you to specify the intended usage of the array if it is not clear from context, by applying the ReadOnlyArrayAttribute attribute or the WriteOnlyArrayAttribute attribute to the parameter.</source>
          <target state="new">The <bpt id="p1">[</bpt>Windows Runtime Metadata Export Tool (Winmdexp.exe)<ept id="p1">](https://msdn.microsoft.com/library/hh925576.aspx)</ept> requires you to specify the intended usage of the array if it is not clear from context, by applying the ReadOnlyArrayAttribute attribute or the WriteOnlyArrayAttribute attribute to the parameter.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Array usage is determined as follows:</source>
          <target state="new">Array usage is determined as follows:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For the return value or for an out parameter (a <bpt id="p1">**</bpt>ByRef<ept id="p1">**</ept> parameter with the <bpt id="p2">[</bpt>OutAttribute<ept id="p2">](https://msdn.microsoft.com/library/system.runtime.interopservices.outattribute.aspx)</ept> attribute in Visual Basic) the array is always for output only.</source>
          <target state="new">For the return value or for an out parameter (a <bpt id="p1">**</bpt>ByRef<ept id="p1">**</ept> parameter with the <bpt id="p2">[</bpt>OutAttribute<ept id="p2">](https://msdn.microsoft.com/library/system.runtime.interopservices.outattribute.aspx)</ept> attribute in Visual Basic) the array is always for output only.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Do not apply the ReadOnlyArrayAttribute attribute.</source>
          <target state="new">Do not apply the ReadOnlyArrayAttribute attribute.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The WriteOnlyArrayAttribute attribute is allowed on output parameters, but it's redundant.</source>
          <target state="new">The WriteOnlyArrayAttribute attribute is allowed on output parameters, but it's redundant.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  The Visual Basic compiler does not enforce output-only rules.</source>
          <target state="new"><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  The Visual Basic compiler does not enforce output-only rules.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You should never read from an output parameter; it may contain <bpt id="p1">**</bpt>Nothing<ept id="p1">**</ept>.</source>
          <target state="new">You should never read from an output parameter; it may contain <bpt id="p1">**</bpt>Nothing<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Always assign a new array.</source>
          <target state="new">Always assign a new array.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parameters that have the <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> modifier (<bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> in Visual Basic) are not allowed.</source>
          <target state="new">Parameters that have the <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> modifier (<bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> in Visual Basic) are not allowed.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Winmdexp.exe generates an error.</source>
          <target state="new">Winmdexp.exe generates an error.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For a parameter that is passed by value, you must specify whether the array contents are for input or output by applying either the <bpt id="p1">[</bpt>ReadOnlyArrayAttribute<ept id="p1">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.readonlyarrayattribute.aspx)</ept> attribute or the <bpt id="p2">[</bpt>WriteOnlyArrayAttribute<ept id="p2">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.writeonlyarrayattribute.aspx)</ept> attribute.</source>
          <target state="new">For a parameter that is passed by value, you must specify whether the array contents are for input or output by applying either the <bpt id="p1">[</bpt>ReadOnlyArrayAttribute<ept id="p1">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.readonlyarrayattribute.aspx)</ept> attribute or the <bpt id="p2">[</bpt>WriteOnlyArrayAttribute<ept id="p2">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.writeonlyarrayattribute.aspx)</ept> attribute.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifying both attributes is an error.</source>
          <target state="new">Specifying both attributes is an error.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a method must accept an array for input, modify the array contents, and return the array to the caller, use a read-only parameter for the input and a write-only parameter (or the return value) for the output.</source>
          <target state="new">If a method must accept an array for input, modify the array contents, and return the array to the caller, use a read-only parameter for the input and a write-only parameter (or the return value) for the output.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code shows one way to implement this pattern:</source>
          <target state="new">The following code shows one way to implement this pattern:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>We recommend that you make a copy of the input array immediately, and manipulate the copy.</source>
          <target state="new">We recommend that you make a copy of the input array immediately, and manipulate the copy.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This helps ensure that the method behaves the same whether or not your component is called by .NET Framework code.</source>
          <target state="new">This helps ensure that the method behaves the same whether or not your component is called by .NET Framework code.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Using components from managed and unmanaged code</source>
          <target state="new">Using components from managed and unmanaged code</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Parameters that have the ReadOnlyArrayAttribute attribute or the WriteOnlyArrayAttribute attribute behave differently depending on whether the caller is written in native code or managed code.</source>
          <target state="new">Parameters that have the ReadOnlyArrayAttribute attribute or the WriteOnlyArrayAttribute attribute behave differently depending on whether the caller is written in native code or managed code.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the caller is native code (JavaScript or Visual C++ component extensions), the array contents are treated as follows:</source>
          <target state="new">If the caller is native code (JavaScript or Visual C++ component extensions), the array contents are treated as follows:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>ReadOnlyArrayAttribute: The array is copied when the call crosses the application binary interface (ABI) boundary.</source>
          <target state="new">ReadOnlyArrayAttribute: The array is copied when the call crosses the application binary interface (ABI) boundary.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Elements are converted if necessary.</source>
          <target state="new">Elements are converted if necessary.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Therefore, any accidental changes the method makes to an input-only array are not visible to the caller.</source>
          <target state="new">Therefore, any accidental changes the method makes to an input-only array are not visible to the caller.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>WriteOnlyArrayAttribute: The called method can't make any assumptions about the contents of the original array.</source>
          <target state="new">WriteOnlyArrayAttribute: The called method can't make any assumptions about the contents of the original array.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, the array the method receives might not be initialized, or might contain default values.</source>
          <target state="new">For example, the array the method receives might not be initialized, or might contain default values.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The method is expected to set the values of all the elements in the array.</source>
          <target state="new">The method is expected to set the values of all the elements in the array.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the caller is managed code, the original array is available to the called method, as it would be in any method call in the .NET Framework.</source>
          <target state="new">If the caller is managed code, the original array is available to the called method, as it would be in any method call in the .NET Framework.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Array contents are mutable in .NET Framework code, so any changes the method makes to the array are visible to the caller.</source>
          <target state="new">Array contents are mutable in .NET Framework code, so any changes the method makes to the array are visible to the caller.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is important to remember because it affects unit tests written for a Windows Runtime Component.</source>
          <target state="new">This is important to remember because it affects unit tests written for a Windows Runtime Component.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the tests are written in managed code, the contents of an array will appear to be mutable during testing.</source>
          <target state="new">If the tests are written in managed code, the contents of an array will appear to be mutable during testing.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ReadOnlyArrayAttribute</source>
          <target state="new">ReadOnlyArrayAttribute</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>WriteOnlyArrayAttribute</source>
          <target state="new">WriteOnlyArrayAttribute</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Creating Windows Runtime Components in C# and Visual Basic</source>
          <target state="new">Creating Windows Runtime Components in C# and Visual Basic</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>