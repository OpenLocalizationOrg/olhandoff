<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6988cf265ff97e37f2a250e438416fdaeeed568a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\porting\w8x-to-uwp-root.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>If you have a Universal 8.1 app&amp;\#8212;whether it's targeting Windows 8.1, Windows Phone 8.1, or both&amp;\#8212;then you'll find that your source code and skills will port smoothly to Windows 10.</source>
          <target state="new">If you have a Universal 8.1 app&amp;\#8212;whether it's targeting Windows 8.1, Windows Phone 8.1, or both&amp;\#8212;then you'll find that your source code and skills will port smoothly to Windows 10.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Move from Windows Runtime 8.x to UWP'</source>
          <target state="new">Move from Windows Runtime 8.x to UWP'</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Move from Windows Runtime 8.x to UWP</source>
          <target state="new">Move from Windows Runtime 8.x to UWP</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you have a Universal 8.1 app—whether it's targeting Windows 8.1, Windows Phone 8.1, or both—then you'll find that your source code and skills will port smoothly to Windows 10.</source>
          <target state="new">If you have a Universal 8.1 app—whether it's targeting Windows 8.1, Windows Phone 8.1, or both—then you'll find that your source code and skills will port smoothly to Windows 10.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</source>
          <target state="new">With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see <bpt id="p1">[</bpt>Guide to UWP apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn894631)</ept>.</source>
          <target state="new">For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see <bpt id="p1">[</bpt>Guide to UWP apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn894631)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>While porting, you'll find that Windows 10 shares the majority of APIs with the previous platforms, as well as XAML markup, UI framework, and tooling, and you'll find it all reassuringly familiar.</source>
          <target state="new">While porting, you'll find that Windows 10 shares the majority of APIs with the previous platforms, as well as XAML markup, UI framework, and tooling, and you'll find it all reassuringly familiar.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Just as before, you can still choose between C++, C#, and Visual Basic for the programming language to use along with the XAML UI framework.</source>
          <target state="new">Just as before, you can still choose between C++, C#, and Visual Basic for the programming language to use along with the XAML UI framework.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Your first steps in planning exactly what to do with your current app or apps will depend on the kinds of apps and projects you have.</source>
          <target state="new">Your first steps in planning exactly what to do with your current app or apps will depend on the kinds of apps and projects you have.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>That's explained in the following sections.</source>
          <target state="new">That's explained in the following sections.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you have a Universal 8.1 app</source>
          <target state="new">If you have a Universal 8.1 app</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A Universal 8.1 app is built from an 8.1 Universal App project.</source>
          <target state="new">A Universal 8.1 app is built from an 8.1 Universal App project.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Let's say the project's name is AppName\_81.</source>
          <target state="new">Let's say the project's name is AppName\_81.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It contains these sub-projects.</source>
          <target state="new">It contains these sub-projects.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>AppName\_81.Windows.</source>
          <target state="new">AppName\_81.Windows.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is the project that builds the app package for Windows 8.1.</source>
          <target state="new">This is the project that builds the app package for Windows 8.1.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>AppName\_81.WindowsPhone.</source>
          <target state="new">AppName\_81.WindowsPhone.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is the project that builds the app package for Windows Phone 8.1.</source>
          <target state="new">This is the project that builds the app package for Windows Phone 8.1.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>AppName\_81.Shared.</source>
          <target state="new">AppName\_81.Shared.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is the project that contains source code, markup files, and other assets and resources that are used by both of the other two projects.</source>
          <target state="new">This is the project that contains source code, markup files, and other assets and resources that are used by both of the other two projects.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Often, an 8.1 Universal Windows app offers the same features—and does so using the same code and markup—in both its Windows 8.1 and Windows Phone 8.1 forms.</source>
          <target state="new">Often, an 8.1 Universal Windows app offers the same features—and does so using the same code and markup—in both its Windows 8.1 and Windows Phone 8.1 forms.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An app like that is an ideal candidate for porting to a single Windows 10 app that targets the Universal device family (and that you can install onto the widest range of devices).</source>
          <target state="new">An app like that is an ideal candidate for porting to a single Windows 10 app that targets the Universal device family (and that you can install onto the widest range of devices).</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You'll essentially port the contents of the Shared project and you'll need to use little or nothing from the other two projects because there'll be little or nothing in them.</source>
          <target state="new">You'll essentially port the contents of the Shared project and you'll need to use little or nothing from the other two projects because there'll be little or nothing in them.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Other times, the Windows 8.1 and/or the Windows Phone 8.1 form of the app contain unique features.</source>
          <target state="new">Other times, the Windows 8.1 and/or the Windows Phone 8.1 form of the app contain unique features.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Or they contain the same features but they implement those features using different techniques or different technology.</source>
          <target state="new">Or they contain the same features but they implement those features using different techniques or different technology.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>With an app like that, you can choose to port it to a single app that targets the Universal device family (in which case you will want the app to adapt itself to different devices), or you can choose to port it as more than one app, perhaps one targeting the Desktop device family and another targeting the Mobile device family.</source>
          <target state="new">With an app like that, you can choose to port it to a single app that targets the Universal device family (in which case you will want the app to adapt itself to different devices), or you can choose to port it as more than one app, perhaps one targeting the Desktop device family and another targeting the Mobile device family.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The nature of the Universal 8.1 app will determine which of these options is best for your case.</source>
          <target state="new">The nature of the Universal 8.1 app will determine which of these options is best for your case.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Port the contents of the Shared project to an app targeting the Universal device family.</source>
          <target state="new">Port the contents of the Shared project to an app targeting the Universal device family.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If applicable, salvage any other content from the Windows and WindowsPhone projects, and use that content either unconditionally in the app or conditional on the device that your app happens to be running on at the time (the latter behavior is known as <bpt id="p1">*</bpt>adaptive<ept id="p1">*</ept>).</source>
          <target state="new">If applicable, salvage any other content from the Windows and WindowsPhone projects, and use that content either unconditionally in the app or conditional on the device that your app happens to be running on at the time (the latter behavior is known as <bpt id="p1">*</bpt>adaptive<ept id="p1">*</ept>).</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Port the contents of the WindowsPhone project to an app targeting the Universal device family.</source>
          <target state="new">Port the contents of the WindowsPhone project to an app targeting the Universal device family.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If applicable, salvage any other content from the Windows project, using it either unconditionally or adaptively.</source>
          <target state="new">If applicable, salvage any other content from the Windows project, using it either unconditionally or adaptively.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Port the contents of the Windows project to an app targeting the Universal device family.</source>
          <target state="new">Port the contents of the Windows project to an app targeting the Universal device family.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If applicable, salvage any other content from the WindowsPhone project, using it either unconditionally or adaptively.</source>
          <target state="new">If applicable, salvage any other content from the WindowsPhone project, using it either unconditionally or adaptively.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Port the contents of the Windows project to an app targeting the Universal or the Desktop device family and also port the contents of the WindowsPhone project to an app targeting the Universal or the Mobile device family.</source>
          <target state="new">Port the contents of the Windows project to an app targeting the Universal or the Desktop device family and also port the contents of the WindowsPhone project to an app targeting the Universal or the Mobile device family.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can create a solution with a Shared project, and continue to share source code, markup files, and other assets and resources between the two projects.</source>
          <target state="new">You can create a solution with a Shared project, and continue to share source code, markup files, and other assets and resources between the two projects.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Or, you can create different solutions and still share the same items using links.</source>
          <target state="new">Or, you can create different solutions and still share the same items using links.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you have a Windows 8.1 app</source>
          <target state="new">If you have a Windows 8.1 app</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Port the project to an app targeting the Universal or the Desktop device family.</source>
          <target state="new">Port the project to an app targeting the Universal or the Desktop device family.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you choose the Universal device family, and your app calls APIs that are implemented only in the Desktop device family, then you can guard those calls with adaptive code.</source>
          <target state="new">If you choose the Universal device family, and your app calls APIs that are implemented only in the Desktop device family, then you can guard those calls with adaptive code.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you have a Windows Phone 8.1 app</source>
          <target state="new">If you have a Windows Phone 8.1 app</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Port the project to an app targeting the Universal or the Mobile device family.</source>
          <target state="new">Port the project to an app targeting the Universal or the Mobile device family.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you choose the Universal device family, and your app calls APIs that are implemented only in the Mobile device family, then you can guard those calls with adaptive code.</source>
          <target state="new">If you choose the Universal device family, and your app calls APIs that are implemented only in the Mobile device family, then you can guard those calls with adaptive code.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Adapting your app to multiple form factors</source>
          <target state="new">Adapting your app to multiple form factors</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The option you choose from the previous sections will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</source>
          <target state="new">The option you choose from the previous sections will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Even limiting your app to the Mobile device family still leaves you with a wide range of screen sizes to support.</source>
          <target state="new">Even limiting your app to the Mobile device family still leaves you with a wide range of screen sizes to support.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>So, if your app will be running on form factors that it didn't formerly support, then test your UI on those form factors and make any change necessary, so that your UI adapts appropriately on each.</source>
          <target state="new">So, if your app will be running on form factors that it didn't formerly support, then test your UI on those form factors and make any change necessary, so that your UI adapts appropriately on each.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can think of this is a post-porting task, or a porting stretch-goal, and there are some examples of it in practice in the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](w8x-to-uwp-case-study-bookstore2.md)</ept> and <bpt id="p2">[</bpt>QuizGame<ept id="p2">](w8x-to-uwp-case-study-quizgame.md)</ept> case studies.</source>
          <target state="new">You can think of this is a post-porting task, or a porting stretch-goal, and there are some examples of it in practice in the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](w8x-to-uwp-case-study-bookstore2.md)</ept> and <bpt id="p2">[</bpt>QuizGame<ept id="p2">](w8x-to-uwp-case-study-quizgame.md)</ept> case studies.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Approaching porting layer-by-layer</source>
          <target state="new">Approaching porting layer-by-layer</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When porting a Universal 8.1 app to the model for UWP apps, virtually all of your knowledge and experience will transfer, as will most of your source code and markup and the software patterns you use.</source>
          <target state="new">When porting a Universal 8.1 app to the model for UWP apps, virtually all of your knowledge and experience will transfer, as will most of your source code and markup and the software patterns you use.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>View<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>View<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The view (together with the view model) makes up your app's UI.</source>
          <target state="new">The view (together with the view model) makes up your app's UI.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Ideally, the view consists of markup bound to observable properties of a view model.</source>
          <target state="new">Ideally, the view consists of markup bound to observable properties of a view model.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</source>
          <target state="new">Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In either case, your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</source>
          <target state="new">In either case, your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>View models and data models<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>View models and data models<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</source>
          <target state="new">Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>View model code makes use of types in the UI framework namespaces.</source>
          <target state="new">View model code makes use of types in the UI framework namespaces.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Both view model and data model code also use non-visual operating system and .NET Framework APIs (including APIs for data-access).</source>
          <target state="new">Both view model and data model code also use non-visual operating system and .NET Framework APIs (including APIs for data-access).</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>And those APIs are <bpt id="p1">[</bpt>available for UWP apps, too<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211369)</ept>, so most if not all of this code will port without change.</source>
          <target state="new">And those APIs are <bpt id="p1">[</bpt>available for UWP apps, too<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211369)</ept>, so most if not all of this code will port without change.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cloud services<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Cloud services<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</source>
          <target state="new">It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The part of the app running on the client device connects to those.</source>
          <target state="new">The part of the app running on the client device connects to those.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is the part of a distributed app most likely to remain unchanged when porting the client part.</source>
          <target state="new">This is the part of a distributed app most likely to remain unchanged when porting the client part.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you don't already have one, a good cloud services option for your UWP app is <bpt id="p1">[</bpt>Microsoft Azure Mobile Services<ept id="p1">](http://azure.microsoft.com/services/mobile-services/)</ept>, which provides powerful back-end components that your app can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</source>
          <target state="new">If you don't already have one, a good cloud services option for your UWP app is <bpt id="p1">[</bpt>Microsoft Azure Mobile Services<ept id="p1">](http://azure.microsoft.com/services/mobile-services/)</ept>, which provides powerful back-end components that your app can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</source>
          <target state="new">Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Factoring your app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</source>
          <target state="new">Factoring your app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can make functionality more reusable by following the Model-View-ViewModel (<bpt id="p1">[</bpt>MVVM<ept id="p1">](http://msdn.microsoft.com/magazine/dd419663.aspx)</ept>) pattern.</source>
          <target state="new">You can make functionality more reusable by following the Model-View-ViewModel (<bpt id="p1">[</bpt>MVVM<ept id="p1">](http://msdn.microsoft.com/magazine/dd419663.aspx)</ept>) pattern.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This pattern keeps the data, business, and UI parts of your app separate from one another.</source>
          <target state="new">This pattern keeps the data, business, and UI parts of your app separate from one another.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</source>
          <target state="new">Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</source>
          <target state="new">With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</source>
          <target state="new">It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you have a Microsoft Visual Studio 2015 RC project</source>
          <target state="new">If you have a Microsoft Visual Studio 2015 RC project</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If you have a Windows 10 project that you created with Microsoft Visual Studio 2015 RC, then see <bpt id="p1">[</bpt>Update your UWP Microsoft Visual Studio 2015 RC project to RTM<ept id="p1">](update-your-visual-studio-2015-rc-project-to-rtm.md)</ept>.</source>
          <target state="new">If you have a Windows 10 project that you created with Microsoft Visual Studio 2015 RC, then see <bpt id="p1">[</bpt>Update your UWP Microsoft Visual Studio 2015 RC project to RTM<ept id="p1">](update-your-visual-studio-2015-rc-project-to-rtm.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Topic</source>
          <target state="new">Topic</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Porting the project</source>
          <target state="new">Porting the project</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You have two options when you begin the porting process.</source>
          <target state="new">You have two options when you begin the porting process.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One is to edit a copy of your existing project files, including the app package manifest (for that option, see the info about updating your project files in <bpt id="p1">[</bpt>Migrate apps to the Universal Windows Platform (UWP)<ept id="p1">](https://msdn.microsoft.com/library/mt148501.aspx)</ept>).</source>
          <target state="new">One is to edit a copy of your existing project files, including the app package manifest (for that option, see the info about updating your project files in <bpt id="p1">[</bpt>Migrate apps to the Universal Windows Platform (UWP)<ept id="p1">](https://msdn.microsoft.com/library/mt148501.aspx)</ept>).</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The other option is to create a new Windows 10 project in Visual Studio and copy your files into it.</source>
          <target state="new">The other option is to create a new Windows 10 project in Visual Studio and copy your files into it.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="new">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</source>
          <target state="new">We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</source>
          <target state="new">To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</source>
          <target state="new">The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can always refer back to the table as you progress through the later topics.</source>
          <target state="new">You can always refer back to the table as you progress through the later topics.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Porting XAML and UI</source>
          <target state="new">Porting XAML and UI</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The practice of defining UI in the form of declarative XAML markup translates extremely well from Universal 8.1 apps to UWP apps.</source>
          <target state="new">The practice of defining UI in the form of declarative XAML markup translates extremely well from Universal 8.1 apps to UWP apps.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You'll find that most of your markup is compatible, although you may need to make some adjustments to the system Resource keys or custom templates that you're using.</source>
          <target state="new">You'll find that most of your markup is compatible, although you may need to make some adjustments to the system Resource keys or custom templates that you're using.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Porting for I/O, device, and app model</source>
          <target state="new">Porting for I/O, device, and app model</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Code that integrates with the device itself and its sensors involves input from, and output to, the user.</source>
          <target state="new">Code that integrates with the device itself and its sensors involves input from, and output to, the user.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>It can also involve processing data.</source>
          <target state="new">It can also involve processing data.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>But, this code is not generally thought of as either the UI layer or the data layer.</source>
          <target state="new">But, this code is not generally thought of as either the UI layer or the data layer.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</source>
          <target state="new">This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Case study: Bookstore1</source>
          <target state="new">Case study: Bookstore1</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 UWP app.</source>
          <target state="new">This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 UWP app.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A Universal 8.1 app is one that builds one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</source>
          <target state="new">A Universal 8.1 app is one that builds one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
          <target state="new">With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Guide to UWP apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn894631)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Guide to UWP apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn894631)</ept>.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Case study: Bookstore2</source>
          <target state="new">Case study: Bookstore2</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This case study—which builds on the info given in <bpt id="p1">[</bpt>SemanticZoom<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702601)</ept> control.</source>
          <target state="new">This case study—which builds on the info given in <bpt id="p1">[</bpt>SemanticZoom<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702601)</ept> control.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In the view model, each instance of the class Author represents the group of the books written by that author, and in the SemanticZoom, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
          <target state="new">In the view model, each instance of the class Author represents the group of the books written by that author, and in the SemanticZoom, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Case study: QuizGame</source>
          <target state="new">Case study: QuizGame</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This topic presents a case study of porting a functioning peer-to-peer quiz game WinRT 8.1 sample app to a Windows 10 UWP app.</source>
          <target state="new">This topic presents a case study of porting a functioning peer-to-peer quiz game WinRT 8.1 sample app to a Windows 10 UWP app.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="new">Documentation</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Windows Runtime reference</source>
          <target state="new">Windows Runtime reference</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Building Universal Windows apps for all Windows devices</source>
          <target state="new">Building Universal Windows apps for all Windows devices</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Designing UX for apps</source>
          <target state="new">Designing UX for apps</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>