<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b796fa67c9e190e421eaeceecf856610d2929b70</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\port-a-simple-opengl-es-2-0-renderer-to-directx-11-1.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to-- port a simple OpenGL ES 2.0 renderer to Direct3D 11</source>
          <target state="new">How to-- port a simple OpenGL ES 2.0 renderer to Direct3D 11</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For the first porting exercise, we'll start with the basics-- bringing a simple renderer for a spinning, vertex-shaded cube from OpenGL ES 2.0 into Direct3D, such that it matches the DirectX 11 App (Universal Windows) template from Visual Studio 2015.</source>
          <target state="new">For the first porting exercise, we'll start with the basics-- bringing a simple renderer for a spinning, vertex-shaded cube from OpenGL ES 2.0 into Direct3D, such that it matches the DirectX 11 App (Universal Windows) template from Visual Studio 2015.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to: port a simple OpenGL ES 2.0 renderer to Direct3D 11</source>
          <target state="new">How to: port a simple OpenGL ES 2.0 renderer to Direct3D 11</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the first porting exercise, we'll start with the basics: bringing a simple renderer for a spinning, vertex-shaded cube from OpenGL ES 2.0 into Direct3D, such that it matches the DirectX 11 App (Universal Windows) template from Visual Studio 2015.</source>
          <target state="new">For the first porting exercise, we'll start with the basics: bringing a simple renderer for a spinning, vertex-shaded cube from OpenGL ES 2.0 into Direct3D, such that it matches the DirectX 11 App (Universal Windows) template from Visual Studio 2015.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As we walk through this port process, you will learn the following:</source>
          <target state="new">As we walk through this port process, you will learn the following:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How to port a simple set of vertex buffers to Direct3D input buffers</source>
          <target state="new">How to port a simple set of vertex buffers to Direct3D input buffers</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How to port uniforms and attributes to constant buffers</source>
          <target state="new">How to port uniforms and attributes to constant buffers</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How to configure Direct3D shader objects</source>
          <target state="new">How to configure Direct3D shader objects</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>How basic HLSL semantics are used in Direct3D shader development</source>
          <target state="new">How basic HLSL semantics are used in Direct3D shader development</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>How to port very simple GLSL to HLSL</source>
          <target state="new">How to port very simple GLSL to HLSL</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic starts after you have created a new DirectX 11 project.</source>
          <target state="new">This topic starts after you have created a new DirectX 11 project.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To learn how to create a new DirectX 11 project, read <bpt id="p1">[</bpt>Create a new DirectX 11 project for Universal Windows Platform (UWP)<ept id="p1">](user-interface.md)</ept>.</source>
          <target state="new">To learn how to create a new DirectX 11 project, read <bpt id="p1">[</bpt>Create a new DirectX 11 project for Universal Windows Platform (UWP)<ept id="p1">](user-interface.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The project created from either of these links has all the code for the <bpt id="p1">[</bpt>Direct3D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476345)</ept> infrastructure prepared, and you can immediately start into the process of porting your renderer from Open GL ES 2.0 to Direct3D 11.</source>
          <target state="new">The project created from either of these links has all the code for the <bpt id="p1">[</bpt>Direct3D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476345)</ept> infrastructure prepared, and you can immediately start into the process of porting your renderer from Open GL ES 2.0 to Direct3D 11.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This topic walks two code paths that perform the same basic graphics task: display a rotating vertex-shaded cube in a window.</source>
          <target state="new">This topic walks two code paths that perform the same basic graphics task: display a rotating vertex-shaded cube in a window.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In both cases, the code covers the following process:</source>
          <target state="new">In both cases, the code covers the following process:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating a cube mesh from hardcoded data.</source>
          <target state="new">Creating a cube mesh from hardcoded data.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This mesh is represented as a list of vertices, with each vertex possessing a position, a normal vector, and a color vector.</source>
          <target state="new">This mesh is represented as a list of vertices, with each vertex possessing a position, a normal vector, and a color vector.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This mesh is put into a vertex buffer for the shading pipeline to process.</source>
          <target state="new">This mesh is put into a vertex buffer for the shading pipeline to process.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creating shader objects to process the cube mesh.</source>
          <target state="new">Creating shader objects to process the cube mesh.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There are two shaders: a vertex shader that processes the vertices for rasterization, and a fragment (pixel) shader that colors the individual pixels of the cube after rasterization.</source>
          <target state="new">There are two shaders: a vertex shader that processes the vertices for rasterization, and a fragment (pixel) shader that colors the individual pixels of the cube after rasterization.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These pixels are written into a render target for display.</source>
          <target state="new">These pixels are written into a render target for display.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Forming the shading language that is used for vertex and pixel processing in the vertex and fragment shaders, respectively.</source>
          <target state="new">Forming the shading language that is used for vertex and pixel processing in the vertex and fragment shaders, respectively.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Displaying the rendered cube on the screen.</source>
          <target state="new">Displaying the rendered cube on the screen.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>simple opengl cube</source>
          <target state="new">simple opengl cube</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Upon completing this walkthrough, you should be familiar with the following basic differences between Open GL ES 2.0 and Direct3D 11:</source>
          <target state="new">Upon completing this walkthrough, you should be familiar with the following basic differences between Open GL ES 2.0 and Direct3D 11:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The representation of vertex buffers and vertex data.</source>
          <target state="new">The representation of vertex buffers and vertex data.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The process of creating and configuring shaders.</source>
          <target state="new">The process of creating and configuring shaders.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Shading languages, and the inputs and outputs to shader objects.</source>
          <target state="new">Shading languages, and the inputs and outputs to shader objects.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Screen drawing behaviors.</source>
          <target state="new">Screen drawing behaviors.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this walkthrough, we refer to an simple and generic OpenGL renderer structure, which is defined like this:</source>
          <target state="new">In this walkthrough, we refer to an simple and generic OpenGL renderer structure, which is defined like this:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This structure has one instance and contains all the necessary components for rendering a very simple vertex-shaded mesh.</source>
          <target state="new">This structure has one instance and contains all the necessary components for rendering a very simple vertex-shaded mesh.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Any OpenGL ES 2.0 code in this topic is based on the Windows API implementation provided by the Khronos Group, and uses Windows C programming syntax.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Any OpenGL ES 2.0 code in this topic is based on the Windows API implementation provided by the Khronos Group, and uses Windows C programming syntax.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>What you need to know</source>
          <target state="new">What you need to know</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Technologies</source>
          <target state="new">Technologies</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Microsoft Visual C++</source>
          <target state="new">Microsoft Visual C++</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new">OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="new">Optional.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Review <bpt id="p1">[</bpt>Port EGL code to DXGI and Direct3D<ept id="p1">](moving-from-egl-to-dxgi.md)</ept>.</source>
          <target state="new">Review <bpt id="p1">[</bpt>Port EGL code to DXGI and Direct3D<ept id="p1">](moving-from-egl-to-dxgi.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Read this topic to better understand the graphics interface provided by DirectX.</source>
          <target state="new">Read this topic to better understand the graphics interface provided by DirectX.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Steps</source>
          <target state="new">Steps</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Topic</source>
          <target state="new">Topic</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Port the shader objects</source>
          <target state="new">Port the shader objects</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When porting the simple renderer from OpenGL ES 2.0, the first step is to set up the equivalent vertex and fragment shader objects in Direct3D 11, and to make sure that the main program can communicate with the shader objects after they are compiled.</source>
          <target state="new">When porting the simple renderer from OpenGL ES 2.0, the first step is to set up the equivalent vertex and fragment shader objects in Direct3D 11, and to make sure that the main program can communicate with the shader objects after they are compiled.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Port the vertex buffers and data</source>
          <target state="new">Port the vertex buffers and data</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this step, you'll define the vertex buffers that will contain your meshes and the index buffers that allow the shaders to traverse the vertices in a specified order.</source>
          <target state="new">In this step, you'll define the vertex buffers that will contain your meshes and the index buffers that allow the shaders to traverse the vertices in a specified order.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Port the GLSL</source>
          <target state="new">Port the GLSL</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Once you've moved over the code that creates and configures your buffers and shader objects, it's time to port the code inside those shaders from OpenGL ES 2.0's GL Shader Language (GLSL) to Direct3D 11's High-level Shader Language (HLSL).</source>
          <target state="new">Once you've moved over the code that creates and configures your buffers and shader objects, it's time to port the code inside those shaders from OpenGL ES 2.0's GL Shader Language (GLSL) to Direct3D 11's High-level Shader Language (HLSL).</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Draw to the screen</source>
          <target state="new">Draw to the screen</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Finally, we port the code that draws the spinning cube to the screen.</source>
          <target state="new">Finally, we port the code that draws the spinning cube to the screen.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
          <target state="new">Additional resources</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Prepare your dev environment for UWP DirectX game development</source>
          <target state="new">Prepare your dev environment for UWP DirectX game development</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Create a new DirectX 11 project for UWP</source>
          <target state="new">Create a new DirectX 11 project for UWP</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Map OpenGL ES 2.0 concepts and infrastructure to Direct3D 11</source>
          <target state="new">Map OpenGL ES 2.0 concepts and infrastructure to Direct3D 11</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>