<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdc04311c9989db87d4179f91c0f2480f15c7f57</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\security\macs-hashes-and-signatures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MACs, hashes, and signatures</source>
          <target state="new">MACs, hashes, and signatures</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article discusses how message authentication codes (MACs), hashes, and signatures can be used in Universal Windows Platform (UWP) apps to detect message tampering.</source>
          <target state="new">This article discusses how message authentication codes (MACs), hashes, and signatures can be used in Universal Windows Platform (UWP) apps to detect message tampering.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>MACs, hashes, and signatures</source>
          <target state="new">MACs, hashes, and signatures</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article discusses how message authentication codes (MACs), hashes, and signatures can be used in Universal Windows Platform (UWP) apps to detect message tampering.</source>
          <target state="new">This article discusses how message authentication codes (MACs), hashes, and signatures can be used in Universal Windows Platform (UWP) apps to detect message tampering.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Message authentication codes (MACs)</source>
          <target state="new">Message authentication codes (MACs)</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Encryption helps prevent an unauthorized individual from reading a message, but it does not prevent that individual from tampering with the message.</source>
          <target state="new">Encryption helps prevent an unauthorized individual from reading a message, but it does not prevent that individual from tampering with the message.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An altered message, even if the alteration results in nothing but nonsense, can have real costs.</source>
          <target state="new">An altered message, even if the alteration results in nothing but nonsense, can have real costs.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A message authentication code (MAC) helps prevent message tampering.</source>
          <target state="new">A message authentication code (MAC) helps prevent message tampering.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, consider the following scenario:</source>
          <target state="new">For example, consider the following scenario:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Bob and Alice share a secret key and agree on a MAC function to use.</source>
          <target state="new">Bob and Alice share a secret key and agree on a MAC function to use.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Bob creates a message and inputs the message and the secret key into a MAC function to retrieve a MAC value.</source>
          <target state="new">Bob creates a message and inputs the message and the secret key into a MAC function to retrieve a MAC value.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Bob sends the \[unencrypted\] message and the MAC value to Alice over a network.</source>
          <target state="new">Bob sends the \[unencrypted\] message and the MAC value to Alice over a network.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Alice uses the secret key and the message as input to the MAC function.</source>
          <target state="new">Alice uses the secret key and the message as input to the MAC function.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>She compares the generated MAC value to the MAC value sent by Bob.</source>
          <target state="new">She compares the generated MAC value to the MAC value sent by Bob.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If they are the same, the message was not changed in transit.</source>
          <target state="new">If they are the same, the message was not changed in transit.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that Eve, a third party eavesdropping on the conversation between Bob and Alice, cannot effectively manipulate the message.</source>
          <target state="new">Note that Eve, a third party eavesdropping on the conversation between Bob and Alice, cannot effectively manipulate the message.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Eve does not have access to the private key and cannot, therefore, create a MAC value which would make the tampered message appear legitimate to Alice.</source>
          <target state="new">Eve does not have access to the private key and cannot, therefore, create a MAC value which would make the tampered message appear legitimate to Alice.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creating a message authentication code ensures only that the original message was not altered and, by using a shared secret key, that the message hash was signed by someone with access to that private key.</source>
          <target state="new">Creating a message authentication code ensures only that the original message was not altered and, by using a shared secret key, that the message hash was signed by someone with access to that private key.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MacAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241530)</ept> to enumerate the available MAC algorithms and generate a symmetric key.</source>
          <target state="new">You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MacAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241530)</ept> to enumerate the available MAC algorithms and generate a symmetric key.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can use static methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicEngine<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241490)</ept> class to perform the necessary encryption that creates the MAC value.</source>
          <target state="new">You can use static methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicEngine<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241490)</ept> class to perform the necessary encryption that creates the MAC value.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Digital signatures are the public key equivalent of private key message authentication codes (MACs).</source>
          <target state="new">Digital signatures are the public key equivalent of private key message authentication codes (MACs).</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Although MACs use private keys to enable a message recipient to verify that a message has not been altered during transmission, signatures use a private/public key pair.</source>
          <target state="new">Although MACs use private keys to enable a message recipient to verify that a message has not been altered during transmission, signatures use a private/public key pair.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This example code shows how to use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MacAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241530)</ept> class to create a hashed message authentication code (HMAC).</source>
          <target state="new">This example code shows how to use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MacAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241530)</ept> class to create a hashed message authentication code (HMAC).</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Hashes</source>
          <target state="new">Hashes</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A cryptographic hash function takes an arbitrarily long block of data and returns a fixed-size bit string.</source>
          <target state="new">A cryptographic hash function takes an arbitrarily long block of data and returns a fixed-size bit string.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Hash functions are typically used when signing data.</source>
          <target state="new">Hash functions are typically used when signing data.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because most public key signature operations are computationally intensive, it is typically more efficient to sign (encrypt) a message hash than it is to sign the original message.</source>
          <target state="new">Because most public key signature operations are computationally intensive, it is typically more efficient to sign (encrypt) a message hash than it is to sign the original message.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following procedure represents a common, albeit simplified, scenario:</source>
          <target state="new">The following procedure represents a common, albeit simplified, scenario:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Bob and Alice share a secret key and agree on a MAC function to use.</source>
          <target state="new">Bob and Alice share a secret key and agree on a MAC function to use.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Bob creates a message and inputs the message and the secret key into a MAC function to retrieve a MAC value.</source>
          <target state="new">Bob creates a message and inputs the message and the secret key into a MAC function to retrieve a MAC value.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Bob sends the \[unencrypted\] message and the MAC value to Alice over a network.</source>
          <target state="new">Bob sends the \[unencrypted\] message and the MAC value to Alice over a network.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Alice uses the secret key and the message as input to the MAC function.</source>
          <target state="new">Alice uses the secret key and the message as input to the MAC function.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>She compares the generated MAC value to the MAC value sent by Bob.</source>
          <target state="new">She compares the generated MAC value to the MAC value sent by Bob.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If they are the same, the message was not changed in transit.</source>
          <target state="new">If they are the same, the message was not changed in transit.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that Alice sent an unencrypted message.</source>
          <target state="new">Note that Alice sent an unencrypted message.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Only the hash was encrypted.</source>
          <target state="new">Only the hash was encrypted.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The procedure ensures only that the original message was not altered and, by using Alice's public key, that the message hash was signed by someone with access to Alice's private key, presumably Alice.</source>
          <target state="new">The procedure ensures only that the original message was not altered and, by using Alice's public key, that the message hash was signed by someone with access to Alice's private key, presumably Alice.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HashAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241511)</ept> class to enumerate the available hash algorithms and create a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CryptographicHash<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br241498)</ept> value.</source>
          <target state="new">You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HashAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241511)</ept> class to enumerate the available hash algorithms and create a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CryptographicHash<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br241498)</ept> value.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Digital signatures are the public key equivalent of private key message authentication codes (MACs).</source>
          <target state="new">Digital signatures are the public key equivalent of private key message authentication codes (MACs).</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Whereas MACs use private keys to enable a message recipient to verify that a message has not been altered during transmission, signatures use a private/public key pair.</source>
          <target state="new">Whereas MACs use private keys to enable a message recipient to verify that a message has not been altered during transmission, signatures use a private/public key pair.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicHash<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241498)</ept> object can be used to repeatedly hash different data without having to re-create the object for each use.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicHash<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241498)</ept> object can be used to repeatedly hash different data without having to re-create the object for each use.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Append<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241499)</ept> method adds new data to a buffer to be hashed.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Append<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241499)</ept> method adds new data to a buffer to be hashed.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValueAndReset<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701376)</ept> method hashes the data and resets the object for another use.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetValueAndReset<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701376)</ept> method hashes the data and resets the object for another use.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is shown by the following example.</source>
          <target state="new">This is shown by the following example.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Digital signatures</source>
          <target state="new">Digital signatures</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Digital signatures are the public key equivalent of private key message authentication codes (MACs).</source>
          <target state="new">Digital signatures are the public key equivalent of private key message authentication codes (MACs).</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Whereas MACs use private keys to enable a message recipient to verify that a message has not been altered during transmission, signatures use a private/public key pair.</source>
          <target state="new">Whereas MACs use private keys to enable a message recipient to verify that a message has not been altered during transmission, signatures use a private/public key pair.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Because most public key signature operations are computationally intensive, however, it is typically more efficient to sign (encrypt) a message hash than it is to sign the original message.</source>
          <target state="new">Because most public key signature operations are computationally intensive, however, it is typically more efficient to sign (encrypt) a message hash than it is to sign the original message.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The sender creates a message hash, signs it, and sends both the signature and the (unencrypted) message.</source>
          <target state="new">The sender creates a message hash, signs it, and sends both the signature and the (unencrypted) message.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The recipient calculates a hash over the message, decrypts the signature, and compares the decrypted signature to the hash value.</source>
          <target state="new">The recipient calculates a hash over the message, decrypts the signature, and compares the decrypted signature to the hash value.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If they match, the recipient can be fairly certain that the message did, in fact, come from the sender and was not altered during transmission.</source>
          <target state="new">If they match, the recipient can be fairly certain that the message did, in fact, come from the sender and was not altered during transmission.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Signing ensures only that the original message was not altered and, by using the sender's public key, that the message hash was signed by someone with access to the private key.</source>
          <target state="new">Signing ensures only that the original message was not altered and, by using the sender's public key, that the message hash was signed by someone with access to the private key.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can use an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AsymmetricKeyAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241478)</ept> object to enumerate the available signature algorithms and generate or import a key pair.</source>
          <target state="new">You can use an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AsymmetricKeyAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241478)</ept> object to enumerate the available signature algorithms and generate or import a key pair.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can use static methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicHash<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241498)</ept> class to sign a message or verify a signature.</source>
          <target state="new">You can use static methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicHash<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241498)</ept> class to sign a message or verify a signature.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>