<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe8c385a9f94116e69011245b666c706a07ec806</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\debug-test-perf\mvvm-performance-tips.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MVVM and language performance tips</source>
          <target state="new">MVVM and language performance tips</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic discusses some performance considerations related to your choice of software design patterns, and programming language.</source>
          <target state="new">This topic discusses some performance considerations related to your choice of software design patterns, and programming language.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>MVVM and language performance tips</source>
          <target state="new">MVVM and language performance tips</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic discusses some performance considerations related to your choice of software design patterns, and programming language.</source>
          <target state="new">This topic discusses some performance considerations related to your choice of software design patterns, and programming language.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Model-View-ViewModel (MVVM) pattern</source>
          <target state="new">The Model-View-ViewModel (MVVM) pattern</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Model-View-ViewModel (MVVM) pattern is common in a lot of XAML apps.</source>
          <target state="new">The Model-View-ViewModel (MVVM) pattern is common in a lot of XAML apps.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>(MVVM is very similar to Fowler’s description of the Model-View-Presenter pattern, but it is tailored to XAML).</source>
          <target state="new">(MVVM is very similar to Fowler’s description of the Model-View-Presenter pattern, but it is tailored to XAML).</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The issue with the MVVM pattern is that it can inadvertently lead to apps that have too many layers and too many allocations.</source>
          <target state="new">The issue with the MVVM pattern is that it can inadvertently lead to apps that have too many layers and too many allocations.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The motivations for MVVM are these.</source>
          <target state="new">The motivations for MVVM are these.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Separation of concerns<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Separation of concerns<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It’s always helpful to divide a problem into smaller pieces, and a pattern like MVVM or MVC is a way to divide an app (or even a single control) into smaller pieces: the actual view, a logical model of the view (view-model), and the view-independent app logic (the model).</source>
          <target state="new">It’s always helpful to divide a problem into smaller pieces, and a pattern like MVVM or MVC is a way to divide an app (or even a single control) into smaller pieces: the actual view, a logical model of the view (view-model), and the view-independent app logic (the model).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In particular, it’s a popular workflow to have designers own the view using one tool, developers own the model using another tool, and design integrators own the view-model using both tools.</source>
          <target state="new">In particular, it’s a popular workflow to have designers own the view using one tool, developers own the model using another tool, and design integrators own the view-model using both tools.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Unit testing<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Unit testing<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can unit test the view-model (and consequently the model) independent of the view, thereby not relying on creating windows, driving input, and so on.</source>
          <target state="new">You can unit test the view-model (and consequently the model) independent of the view, thereby not relying on creating windows, driving input, and so on.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By keeping the view small, you can test a large portion of your app without ever having to create a window.</source>
          <target state="new">By keeping the view small, you can test a large portion of your app without ever having to create a window.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Agility to user experience changes<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Agility to user experience changes<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The view tends to see the most frequent changes, and the most late changes, as the user experience is tweaked based on end-user feedback.</source>
          <target state="new">The view tends to see the most frequent changes, and the most late changes, as the user experience is tweaked based on end-user feedback.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By keeping the view separate, these changes can be accommodated more quickly and with less churn to the app.</source>
          <target state="new">By keeping the view separate, these changes can be accommodated more quickly and with less churn to the app.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There are multiple concrete definitions of the MVVM pattern, and 3rd party frameworks that help implement it.</source>
          <target state="new">There are multiple concrete definitions of the MVVM pattern, and 3rd party frameworks that help implement it.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>But strict adherence to any variation of the pattern can lead to apps with a lot more overhead than can be justified.</source>
          <target state="new">But strict adherence to any variation of the pattern can lead to apps with a lot more overhead than can be justified.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>XAML data binding (the {Binding} markup extension) was designed in part to enable model/view patterns.</source>
          <target state="new">XAML data binding (the {Binding} markup extension) was designed in part to enable model/view patterns.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>But {Binding} brings with it non-trivial working set and CPU overhead.</source>
          <target state="new">But {Binding} brings with it non-trivial working set and CPU overhead.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creating a {Binding} causes a series of allocations, and updating a binding target can cause reflection and boxing.</source>
          <target state="new">Creating a {Binding} causes a series of allocations, and updating a binding target can cause reflection and boxing.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These problems are being addressed with the {x:Bind} markup extension, which compiles the bindings at build time.</source>
          <target state="new">These problems are being addressed with the {x:Bind} markup extension, which compiles the bindings at build time.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation:<ept id="p1">**</ept> use {x:Bind}.</source>
          <target state="new"><bpt id="p1">**</bpt>Recommendation:<ept id="p1">**</ept> use {x:Bind}.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It’s popular in MVVM to connect Button.Click to the view-model using an ICommand, such as the common DelegateCommand or RelayCommand helpers.</source>
          <target state="new">It’s popular in MVVM to connect Button.Click to the view-model using an ICommand, such as the common DelegateCommand or RelayCommand helpers.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Those commands are extra allocations, though, including the CanExecuteChanged event listener, adding to the working set, and adding to the startup/navigation time for the page.</source>
          <target state="new">Those commands are extra allocations, though, including the CanExecuteChanged event listener, adding to the working set, and adding to the startup/navigation time for the page.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation:<ept id="p1">**</ept> As an alternative to using the convenient ICommand interface, consider putting event handlers in your code-behind and attaching them to the view events and call a command on your view-model when those events are raised.</source>
          <target state="new"><bpt id="p1">**</bpt>Recommendation:<ept id="p1">**</ept> As an alternative to using the convenient ICommand interface, consider putting event handlers in your code-behind and attaching them to the view events and call a command on your view-model when those events are raised.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You'll also need to add extra code to disable the Button when the command is unavailable.</source>
          <target state="new">You'll also need to add extra code to disable the Button when the command is unavailable.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It’s popular in MVVM to create a Page with all possible configurations of the UI, then collapse parts of the tree by binding the Visibility property to properties in the VM.</source>
          <target state="new">It’s popular in MVVM to create a Page with all possible configurations of the UI, then collapse parts of the tree by binding the Visibility property to properties in the VM.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This adds unnecessarily to startup time and possibly to working set (because some parts of the tree may never become visible).</source>
          <target state="new">This adds unnecessarily to startup time and possibly to working set (because some parts of the tree may never become visible).</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendations:<ept id="p1">**</ept> Use the x:DeferLoadStrategy feature to defer unnecessary portions of the tree out of startup.</source>
          <target state="new"><bpt id="p1">**</bpt>Recommendations:<ept id="p1">**</ept> Use the x:DeferLoadStrategy feature to defer unnecessary portions of the tree out of startup.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Also, create separate user controls for the different modes of the page and use code-behind to keep only the necessary controls loaded.</source>
          <target state="new">Also, create separate user controls for the different modes of the page and use code-behind to keep only the necessary controls loaded.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>C++/CX recommendations</source>
          <target state="new">C++/CX recommendations</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Use the latest version<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Use the latest version<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There are continual performance improvements made to the C++/CX compiler.</source>
          <target state="new">There are continual performance improvements made to the C++/CX compiler.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Ensure your app is building using the latest toolset.</source>
          <target state="new">Ensure your app is building using the latest toolset.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Disable RTTI (/GR-)<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Disable RTTI (/GR-)<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>RTTI is on by default in the compiler so, unless your build environment switches it off, you’re probably using it.</source>
          <target state="new">RTTI is on by default in the compiler so, unless your build environment switches it off, you’re probably using it.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>RTTI has significant overhead, and unless your code has a deep dependency on it, you should turn it off.</source>
          <target state="new">RTTI has significant overhead, and unless your code has a deep dependency on it, you should turn it off.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The XAML framework has no requirement that your code use RTTI.</source>
          <target state="new">The XAML framework has no requirement that your code use RTTI.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Avoid heavy use of ppltasks<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Avoid heavy use of ppltasks<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Ppltasks are very convenient when calling async WinRT APIs, but they come with significant code size overhead.</source>
          <target state="new">Ppltasks are very convenient when calling async WinRT APIs, but they come with significant code size overhead.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The C++/CX team is working on a language feature – await – that will provide much better performance.</source>
          <target state="new">The C++/CX team is working on a language feature – await – that will provide much better performance.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the meantime, balance your use of ppltasks in the hot paths of your code.</source>
          <target state="new">In the meantime, balance your use of ppltasks in the hot paths of your code.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Avoid use of C++/CX in the “business logic” of your app<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Avoid use of C++/CX in the “business logic” of your app<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>C++/CX is designed to be a convenient way to access WinRT APIs from C++ apps.</source>
          <target state="new">C++/CX is designed to be a convenient way to access WinRT APIs from C++ apps.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It makes use of wrappers that have overhead.</source>
          <target state="new">It makes use of wrappers that have overhead.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You should avoid C++/CX inside the business logic/model of your class, and reserve it for use at the boundaries between your code and WinRT.</source>
          <target state="new">You should avoid C++/CX inside the business logic/model of your class, and reserve it for use at the boundaries between your code and WinRT.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>