<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9abe8937b77fc9bd9d9c3b426c7adec7816fb75</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\graphics\composition-animation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Composition animations</source>
          <target state="new">Composition animations</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Many composition object and effect properties can be animated using key frame and expression animations allowing properties of a UI element to change over time or based on a calculation.</source>
          <target state="new">Many composition object and effect properties can be animated using key frame and expression animations allowing properties of a UI element to change over time or based on a calculation.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Composition animations</source>
          <target state="new">Composition animations</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Many composition object and effect properties can be animated using key frame and expression animations allowing properties of a UI element to change over time or based on a calculation.</source>
          <target state="new">Many composition object and effect properties can be animated using key frame and expression animations allowing properties of a UI element to change over time or based on a calculation.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are two types of animations, keyframe animations, represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyFrameAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706830)</ept> class, and expression animations represented by the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ExpressionAnimation<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn706817)</ept> class.</source>
          <target state="new">There are two types of animations, keyframe animations, represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyFrameAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706830)</ept> class, and expression animations represented by the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ExpressionAnimation<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn706817)</ept> class.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Animatable Properties</source>
          <target state="new">Animatable Properties</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>KeyFrame Animations</source>
          <target state="new">KeyFrame Animations</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating your animation and KeyFrames</source>
          <target state="new">Creating your animation and KeyFrames</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>KeyFrame Properties</source>
          <target state="new">KeyFrame Properties</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Easing Functions</source>
          <target state="new">Easing Functions</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Starting and Stopping KeyFrame Animations</source>
          <target state="new">Starting and Stopping KeyFrame Animations</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Animation Completion Events</source>
          <target state="new">Animation Completion Events</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Expression Animations</source>
          <target state="new">Expression Animations</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creating your Expression</source>
          <target state="new">Creating your Expression</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Property Sets</source>
          <target state="new">Property Sets</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Expression KeyFrames</source>
          <target state="new">Expression KeyFrames</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Animatable Properties</source>
          <target state="new">Animatable Properties</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following properties are animatable by associating them with a KeyFrame or Expression Animation:</source>
          <target state="new">The following properties are animatable by associating them with a KeyFrame or Expression Animation:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CompositionColorBrush.Color</source>
          <target state="new">CompositionColorBrush.Color</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>InsetClip.BottomInset</source>
          <target state="new">InsetClip.BottomInset</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>InsetClip.LeftInset</source>
          <target state="new">InsetClip.LeftInset</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>InsetClip.RightInset</source>
          <target state="new">InsetClip.RightInset</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>InsetClip.TopInset</source>
          <target state="new">InsetClip.TopInset</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Visual.AnchorPoint</source>
          <target state="new">Visual.AnchorPoint</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Visual.CenterPoint</source>
          <target state="new">Visual.CenterPoint</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Visual.Offset</source>
          <target state="new">Visual.Offset</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Visual.Opacity</source>
          <target state="new">Visual.Opacity</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Visual.Orientation</source>
          <target state="new">Visual.Orientation</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Visual.RotationAngle</source>
          <target state="new">Visual.RotationAngle</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Visual.RotationAxis</source>
          <target state="new">Visual.RotationAxis</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Visual.Size</source>
          <target state="new">Visual.Size</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Visual.TransformMatrix</source>
          <target state="new">Visual.TransformMatrix</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CompositionPropertySet</source>
          <target state="new">CompositionPropertySet</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>KeyFrame Animations</source>
          <target state="new">KeyFrame Animations</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>KeyFrame Animations are time-based animations that use one or more key frames to specify how the animated value should change over time.</source>
          <target state="new">KeyFrame Animations are time-based animations that use one or more key frames to specify how the animated value should change over time.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The frames represent markers, allowing you to define what the animated value should be at a specific time.</source>
          <target state="new">The frames represent markers, allowing you to define what the animated value should be at a specific time.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creating your animation and KeyFrames</source>
          <target state="new">Creating your animation and KeyFrames</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To construct a KeyFrame Animation, use one of the constructor methods of the Compositor class that correlates to the structure type of the property you wish to animate.</source>
          <target state="new">To construct a KeyFrame Animation, use one of the constructor methods of the Compositor class that correlates to the structure type of the property you wish to animate.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CreateColorKeyFrameAnimation</source>
          <target state="new">CreateColorKeyFrameAnimation</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CreateQuaternionKeyFrameAnimation</source>
          <target state="new">CreateQuaternionKeyFrameAnimation</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CreateScalarKeyFrameAnimation</source>
          <target state="new">CreateScalarKeyFrameAnimation</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CreateVector2KeyFrameAnimation</source>
          <target state="new">CreateVector2KeyFrameAnimation</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CreateVector3KeyFrameAnimation</source>
          <target state="new">CreateVector3KeyFrameAnimation</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CreateVector4KeyFrameAnimation</source>
          <target state="new">CreateVector4KeyFrameAnimation</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the following snippet creates a Vector3 keyframe animation:</source>
          <target state="new">For example, the following snippet creates a Vector3 keyframe animation:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Each KeyFrame is constructed by calling the InsertKeyFrame method of a KeyFrameAnimation and specifying two components and optionally a third component:</source>
          <target state="new">Each KeyFrame is constructed by calling the InsertKeyFrame method of a KeyFrameAnimation and specifying two components and optionally a third component:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Time: normalized progress state of the KeyFrame between 0.0 – 1.0</source>
          <target state="new">Time: normalized progress state of the KeyFrame between 0.0 – 1.0</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Value: specific value of the animating value at the time state</source>
          <target state="new">Value: specific value of the animating value at the time state</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>(Optional) Easing function: function to describe interpolation between previous and current KeyFrame (discussed later on)</source>
          <target state="new">(Optional) Easing function: function to describe interpolation between previous and current KeyFrame (discussed later on)</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, the following snippet inserts a keyframe in a Vector3KeyFrameAnimation that will triggered half way through the animation:</source>
          <target state="new">For example, the following snippet inserts a keyframe in a Vector3KeyFrameAnimation that will triggered half way through the animation:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>KeyFrame Properties</source>
          <target state="new">KeyFrame Properties</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Once you've defined your KeyFrame Animation and the individual KeyFrames, you are able to define multiple properties of your animation:</source>
          <target state="new">Once you've defined your KeyFrame Animation and the individual KeyFrames, you are able to define multiple properties of your animation:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>DelayTime – time before an animation starts after StartAnimation() is called</source>
          <target state="new">DelayTime – time before an animation starts after StartAnimation() is called</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Duration – duration of the animation</source>
          <target state="new">Duration – duration of the animation</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>IterationBehavior – count or infinite repeat behavior for an animation</source>
          <target state="new">IterationBehavior – count or infinite repeat behavior for an animation</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>IterationCount – number of finite times a KeyFrame Animation will repeat</source>
          <target state="new">IterationCount – number of finite times a KeyFrame Animation will repeat</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>KeyFrame Count – number of KeyFrames in a particular KeyFrameAnimation</source>
          <target state="new">KeyFrame Count – number of KeyFrames in a particular KeyFrameAnimation</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>StopBehavior – specifies the behavior of an animating property value when StopAnimation is called.</source>
          <target state="new">StopBehavior – specifies the behavior of an animating property value when StopAnimation is called.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, the following snippet sets the duration of the animation to five seconds:</source>
          <target state="new">For example, the following snippet sets the duration of the animation to five seconds:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Easing Functions</source>
          <target state="new">Easing Functions</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A key frame easing function, a CompositionEasingFunction, indicates how intermediate values progress from the previous key frame value to the current key frame value.</source>
          <target state="new">A key frame easing function, a CompositionEasingFunction, indicates how intermediate values progress from the previous key frame value to the current key frame value.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you do not provide an easing function for the KeyFrame, a default curve will be used.</source>
          <target state="new">If you do not provide an easing function for the KeyFrame, a default curve will be used.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>There are two types of easing functions supported:</source>
          <target state="new">There are two types of easing functions supported:</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Linear (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>LinearEasingFunction<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706839)</ept>)</source>
          <target state="new">Linear (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>LinearEasingFunction<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706839)</ept>)</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Cubic Bezier (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>CubicBezierEasingFunction<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706812)</ept>)</source>
          <target state="new">Cubic Bezier (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>CubicBezierEasingFunction<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706812)</ept>)</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To create an easing function, use either the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateLinearEasingFunction<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706801)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CreateCubicBezierEasingFunction<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn706791)</ept> method of the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Compositor<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn706761)</ept> class:</source>
          <target state="new">To create an easing function, use either the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateLinearEasingFunction<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706801)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CreateCubicBezierEasingFunction<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn706791)</ept> method of the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Compositor<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn706761)</ept> class:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Note: A useful tool for generating the points for your Cubic Bezier can be found here.</source>
          <target state="new">Note: A useful tool for generating the points for your Cubic Bezier can be found here.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To add your easing function into your KeyFrame, simply add in the third parameter to the KeyFrame when inserting it into the Animation:</source>
          <target state="new">To add your easing function into your KeyFrame, simply add in the third parameter to the KeyFrame when inserting it into the Animation:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Starting and Stopping KeyFrame Animations</source>
          <target state="new">Starting and Stopping KeyFrame Animations</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>After you have defined your animation, KeyFrames and properties, you are ready to connect the animation to the property you want to animate.</source>
          <target state="new">After you have defined your animation, KeyFrames and properties, you are ready to connect the animation to the property you want to animate.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You connect your animation to the property you plan to animate by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StartAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590840)</ept> on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visual<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn706858)</ept> object the property belongs to.</source>
          <target state="new">You connect your animation to the property you plan to animate by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StartAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590840)</ept> on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visual<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn706858)</ept> object the property belongs to.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The general syntax and an example is as follows:</source>
          <target state="new">The general syntax and an example is as follows:</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>After starting your animation, you also have the ability to stop and disconnect it as well.</source>
          <target state="new">After starting your animation, you also have the ability to stop and disconnect it as well.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This is done by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StopAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590841)</ept> method and specifying the property you want to stop animating.</source>
          <target state="new">This is done by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StopAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590841)</ept> method and specifying the property you want to stop animating.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Animation Completion Events</source>
          <target state="new">Animation Completion Events</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>KeyFrame animations have a defined end, unlike Expression Animations, which are conditional.</source>
          <target state="new">KeyFrame animations have a defined end, unlike Expression Animations, which are conditional.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Developers can determine when groups or a single KeyFrame animation completes by using batches.</source>
          <target state="new">Developers can determine when groups or a single KeyFrame animation completes by using batches.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Batches can be created or retrieved, depending on the batch object type, and are used to aggregate the end state of animations.</source>
          <target state="new">Batches can be created or retrieved, depending on the batch object type, and are used to aggregate the end state of animations.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Scoped batches are created while Commit batches are retrieved, the use of these different batches are described later.</source>
          <target state="new">Scoped batches are created while Commit batches are retrieved, the use of these different batches are described later.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A batch completion event fires when all animations within the batch have completed.</source>
          <target state="new">A batch completion event fires when all animations within the batch have completed.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The time it takes for a batch's completion event to fire depends on the longest or most delayed animation in the batch.</source>
          <target state="new">The time it takes for a batch's completion event to fire depends on the longest or most delayed animation in the batch.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Aggregating end states is useful when you need to know when groups of select animations complete in order to schedule other work.</source>
          <target state="new">Aggregating end states is useful when you need to know when groups of select animations complete in order to schedule other work.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Scoped batches</source>
          <target state="new">Scoped batches</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To aggregate a specific group or a single animation, you first need to create a Scoped batch by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateScopedBatch<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt589425)</ept>.</source>
          <target state="new">To aggregate a specific group or a single animation, you first need to create a Scoped batch by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateScopedBatch<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt589425)</ept>.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>After creating a Scoped batch, all started animations aggregate until the batch is explicitly suspended or ended using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Suspend<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590848)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>End<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</ept>.</source>
          <target state="new">After creating a Scoped batch, all started animations aggregate until the batch is explicitly suspended or ended using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Suspend<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590848)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>End<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</ept>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Suspend<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590848)</ept> stops aggregating animation end states until <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Resume<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt590847)</ept> is called.</source>
          <target state="new">Calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Suspend<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590848)</ept> stops aggregating animation end states until <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Resume<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt590847)</ept> is called.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This allows you to explicitly exclude content from a given batch.</source>
          <target state="new">This allows you to explicitly exclude content from a given batch.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In order to complete your batch you must call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>End<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</ept>.</source>
          <target state="new">In order to complete your batch you must call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>End<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</ept>.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Without an End call, the batch will remain open forever-collecting objects.</source>
          <target state="new">Without an End call, the batch will remain open forever-collecting objects.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you want to know when a single animation ends, you need to create a Scoped batch, start the animation and end the batch.</source>
          <target state="new">If you want to know when a single animation ends, you need to create a Scoped batch, start the animation and end the batch.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Commit batches</source>
          <target state="new">Commit batches</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A commit batch is a batch that is implicitly created during the commit cycle.</source>
          <target state="new">A commit batch is a batch that is implicitly created during the commit cycle.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The current Commit batch can be retrieved by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetCommitBatch<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt589430)</ept> at any time during the commit cycle.</source>
          <target state="new">The current Commit batch can be retrieved by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetCommitBatch<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt589430)</ept> at any time during the commit cycle.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The commit cycle is defined as the time between updates from the compositor.</source>
          <target state="new">The commit cycle is defined as the time between updates from the compositor.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Updates are queued until the system is ready to process the changes and draw bits to the screen.</source>
          <target state="new">Updates are queued until the system is ready to process the changes and draw bits to the screen.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Titles do not control when commits happen.</source>
          <target state="new">Titles do not control when commits happen.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The Commit batch will aggregate all objects within the commit cycle, those before and after GetCommitBatch was called.</source>
          <target state="new">The Commit batch will aggregate all objects within the commit cycle, those before and after GetCommitBatch was called.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>There is only one Commit batch per commit cycle and you do not need to explicitly call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>End<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</ept> on the commit batch.</source>
          <target state="new">There is only one Commit batch per commit cycle and you do not need to explicitly call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>End<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</ept> on the commit batch.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Batch states</source>
          <target state="new">Batch states</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To determine if a batch is open to aggregating animations you can use the <bpt id="p1">**</bpt>IsActive<ept id="p1">**</ept> property.</source>
          <target state="new">To determine if a batch is open to aggregating animations you can use the <bpt id="p1">**</bpt>IsActive<ept id="p1">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>IsEnded<ept id="p1">**</ept> property return true, you cannot add an animation to that specific batch.</source>
          <target state="new">If the <bpt id="p1">**</bpt>IsEnded<ept id="p1">**</ept> property return true, you cannot add an animation to that specific batch.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Scoped batches are “ended” when they have been explicitly ended by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>End<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</ept> method.</source>
          <target state="new">Scoped batches are “ended” when they have been explicitly ended by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>End<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590844)</ept> method.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Commit batches are ended when the current commit cycle has ended.</source>
          <target state="new">Commit batches are ended when the current commit cycle has ended.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Expression Animations</source>
          <target state="new">Expression Animations</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Expression Animations are animations that use a mathematical expression to specify how the animated value should be calculated for each frame.</source>
          <target state="new">Expression Animations are animations that use a mathematical expression to specify how the animated value should be calculated for each frame.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The expression language itself can reference properties from other composition objects.</source>
          <target state="new">The expression language itself can reference properties from other composition objects.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Unlike KeyFrame Animations, Expressions are not time-based and are processed each frame (if necessary).</source>
          <target state="new">Unlike KeyFrame Animations, Expressions are not time-based and are processed each frame (if necessary).</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Expressions can be useful to describe more complex user experiences that can be processed by the Composition engine, for example sticky headers and parallax.</source>
          <target state="new">Expressions can be useful to describe more complex user experiences that can be processed by the Composition engine, for example sticky headers and parallax.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Creating your Expression</source>
          <target state="new">Creating your Expression</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To create your expression, you call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateExpressionAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187002)</ept> on your Compositor object and specifying the expression you want to use:</source>
          <target state="new">To create your expression, you call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreateExpressionAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187002)</ept> on your Compositor object and specifying the expression you want to use:</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Operators, Precedence and Associativity</source>
          <target state="new">Operators, Precedence and Associativity</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The Expression language supports the following operators and adheres to operator precedence and associativity as defined in the C# Language Specification:</source>
          <target state="new">The Expression language supports the following operators and adheres to operator precedence and associativity as defined in the C# Language Specification:</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Unary (-)</source>
          <target state="new">Unary (-)</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Multiplicative (\* /)</source>
          <target state="new">Multiplicative (\* /)</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Additive (- +)</source>
          <target state="new">Additive (- +)</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The Expression language also supports the concept of per-component math operations.</source>
          <target state="new">The Expression language also supports the concept of per-component math operations.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>These member-access (x.y) operators are only supported on “primitive” types (Vector and Matrices).</source>
          <target state="new">These member-access (x.y) operators are only supported on “primitive” types (Vector and Matrices).</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Property Parameters</source>
          <target state="new">Property Parameters</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>One of the powerful components of the Expression language is being able use parameters as variables in the expression.</source>
          <target state="new">One of the powerful components of the Expression language is being able use parameters as variables in the expression.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The expression string can contain parameters which are replaced with either a constant value or are references to another object's property value when calculated.</source>
          <target state="new">The expression string can contain parameters which are replaced with either a constant value or are references to another object's property value when calculated.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In this example ChildOffset and ParentOffset are parameters that represent the offset property of two visuals.</source>
          <target state="new">In this example ChildOffset and ParentOffset are parameters that represent the offset property of two visuals.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You define parameters using the <bpt id="p1">**</bpt>Set\*Parameter<ept id="p1">**</ept> methods of the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CompositionAnimation<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Dn706708)</ept> class:</source>
          <target state="new">You define parameters using the <bpt id="p1">**</bpt>Set\*Parameter<ept id="p1">**</ept> methods of the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CompositionAnimation<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Dn706708)</ept> class:</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To create a vector parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetVector2Parameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setvector2parameter.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetVector3Parameter<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setvector3parameter.aspx)</ept>, or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SetVector4Parameter<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setvector4parameter)</ept>.</source>
          <target state="new">To create a vector parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetVector2Parameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setvector2parameter.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetVector3Parameter<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setvector3parameter.aspx)</ept>, or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SetVector4Parameter<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setvector4parameter)</ept>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To create a matrix parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetMatrix3x2Parameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setmatrix3x2parameter.aspx)</ept>, or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetMatrix4x4Parameter<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setmatrix4x4parameter)</ept>.</source>
          <target state="new">To create a matrix parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetMatrix3x2Parameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.composition.compositionanimation.setmatrix3x2parameter.aspx)</ept>, or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetMatrix4x4Parameter<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setmatrix4x4parameter)</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>to create a scalar parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetScalarParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setscalarparameter)</ept>.</source>
          <target state="new">to create a scalar parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetScalarParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setscalarparameter)</ept>.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To create a color parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetColorParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setcolorparameter)</ept>.</source>
          <target state="new">To create a color parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetColorParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setcolorparameter)</ept>.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To create a quaternion parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetQuaternionParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setquaternionparameter)</ept>.</source>
          <target state="new">To create a quaternion parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetQuaternionParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setquaternionparameter)</ept>.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To create a reference parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetReferenceParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setreferenceparameter)</ept>.</source>
          <target state="new">To create a reference parameter you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetReferenceParameter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.composition.compositionanimation.setreferenceparameter)</ept>.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In the Expression String above, we would need to create two parameters to define the two Visuals:</source>
          <target state="new">In the Expression String above, we would need to create two parameters to define the two Visuals:</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Expression Helper Functions</source>
          <target state="new">Expression Helper Functions</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In addition to having access to operators and property parameters, you also have access to the full helper function library of the expression language.</source>
          <target state="new">In addition to having access to operators and property parameters, you also have access to the full helper function library of the expression language.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can find the full list of helper functions in the remarks section of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ExpressionAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706817)</ept> class, but here are a few:</source>
          <target state="new">You can find the full list of helper functions in the remarks section of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ExpressionAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706817)</ept> class, but here are a few:</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Max (Scalar value1, Scalar value2)</source>
          <target state="new">Max (Scalar value1, Scalar value2)</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Scale (Vector3 value, Scalar factor)</source>
          <target state="new">Scale (Vector3 value, Scalar factor)</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Transform(Vector2 value, Matrix 3x2 matrix)</source>
          <target state="new">Transform(Vector2 value, Matrix 3x2 matrix)</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Here’s a more complex expression string example that uses the Clamp helper function:</source>
          <target state="new">Here’s a more complex expression string example that uses the Clamp helper function:</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Starting and stopping your Expression Animation</source>
          <target state="new">Starting and stopping your Expression Animation</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To start and stop your Expression Animations, you use the same functions (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>StartAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590840)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StopAnimation<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt590841)</ept>) as you do with KeyFrame Animations.</source>
          <target state="new">To start and stop your Expression Animations, you use the same functions (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>StartAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt590840)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StopAnimation<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt590841)</ept>) as you do with KeyFrame Animations.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Note: Expression Animations will continue to run until they are stopped using <bpt id="p1">**</bpt>StopAnimation<ept id="p1">**</ept> – unlike KeyFrame Animations, they do not have a finite duration.</source>
          <target state="new">Note: Expression Animations will continue to run until they are stopped using <bpt id="p1">**</bpt>StopAnimation<ept id="p1">**</ept> – unlike KeyFrame Animations, they do not have a finite duration.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Property Sets</source>
          <target state="new">Property Sets</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>In addition to being able to reference properties of other Composition objects, you also have the ability to create and store property values of your own that can be used across multiple animations.</source>
          <target state="new">In addition to being able to reference properties of other Composition objects, you also have the ability to create and store property values of your own that can be used across multiple animations.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Property sets are represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionPropertySet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706772)</ept> class.</source>
          <target state="new">Property sets are represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionPropertySet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706772)</ept> class.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Property sets allow you to create a property with a value and reference it later in an expression or even hook it up as the target of a KeyFrame Animation.</source>
          <target state="new">Property sets allow you to create a property with a value and reference it later in an expression or even hook it up as the target of a KeyFrame Animation.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To create a property set, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreatePropertySet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706802)</ept> method of the Compositor class.</source>
          <target state="new">To create a property set, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CreatePropertySet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn706802)</ept> method of the Compositor class.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Once you’ve created your property set, you can add a property and value to it using one of the <bpt id="p1">**</bpt>Insert\*<ept id="p1">**</ept> methods of <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CompositionPropertySet<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Dn706772)</ept>.</source>
          <target state="new">Once you’ve created your property set, you can add a property and value to it using one of the <bpt id="p1">**</bpt>Insert\*<ept id="p1">**</ept> methods of <bpt id="p2">[</bpt><bpt id="p3">**</bpt>CompositionPropertySet<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Dn706772)</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>After you've created your expression animation, you can reference properties from the property set in the expression string with the use of a reference parameter.</source>
          <target state="new">After you've created your expression animation, you can reference properties from the property set in the expression string with the use of a reference parameter.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Expression KeyFrames</source>
          <target state="new">Expression KeyFrames</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Earlier in this document, we described how you create KeyFrame Animations and their respective KeyFrames.</source>
          <target state="new">Earlier in this document, we described how you create KeyFrame Animations and their respective KeyFrames.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In addition to making the traditional KeyFrame with a normalized time and value component, you are also able to define expression KeyFrames.</source>
          <target state="new">In addition to making the traditional KeyFrame with a normalized time and value component, you are also able to define expression KeyFrames.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Instead of defining an explicit value for a particular time in the KeyFrame, we are able to use the expression syntax to describe how the value should be calculated at this particular point in the KeyFrame timeline.</source>
          <target state="new">Instead of defining an explicit value for a particular time in the KeyFrame, we are able to use the expression syntax to describe how the value should be calculated at this particular point in the KeyFrame timeline.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>You are able to mix and match expression KeyFrames with basic KeyFrames in your KeyFrame Animation.</source>
          <target state="new">You are able to mix and match expression KeyFrames with basic KeyFrames in your KeyFrame Animation.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Constructing Expression KeyFrames</source>
          <target state="new">Constructing Expression KeyFrames</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Similar to traditional KeyFrames, expression KeyFrames are constructed by specifying 2 components:</source>
          <target state="new">Similar to traditional KeyFrames, expression KeyFrames are constructed by specifying 2 components:</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Time: normalized time state of the KeyFrame between 0.0 – 1.0</source>
          <target state="new">Time: normalized time state of the KeyFrame between 0.0 – 1.0</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Value: The expression string used to describe how the value should be calculated</source>
          <target state="new">Value: The expression string used to describe how the value should be calculated</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For example, the following snippet uses a combination of both regular and expression KeyFrames:</source>
          <target state="new">For example, the following snippet uses a combination of both regular and expression KeyFrames:</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Using current and starting values</source>
          <target state="new">Using current and starting values</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In the expression language, it is possible to reference both the current and the starting value of an animation.</source>
          <target state="new">In the expression language, it is possible to reference both the current and the starting value of an animation.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>These values are pre-fixed in the expression language with “this”:</source>
          <target state="new">These values are pre-fixed in the expression language with “this”:</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>this.CurrentValue</source>
          <target state="new">this.CurrentValue</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>this.StartingValue</source>
          <target state="new">this.StartingValue</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>An example of using these in an Expression KeyFrame:</source>
          <target state="new">An example of using these in an Expression KeyFrame:</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Conditional Expressions</source>
          <target state="new">Conditional Expressions</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In addition to supporting basic mathematical expressions, you can also define a conditional expression using a ternary operator:</source>
          <target state="new">In addition to supporting basic mathematical expressions, you can also define a conditional expression using a ternary operator:</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Within the expressions themselves, the following conditional operators are supported in the condition statement:</source>
          <target state="new">Within the expressions themselves, the following conditional operators are supported in the condition statement:</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Equals (==)</source>
          <target state="new">Equals (==)</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Not Equals (!=)</source>
          <target state="new">Not Equals (!=)</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Less than (&lt;)</source>
          <target state="new">Less than (&lt;)</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Less than or equal to (&lt;=)</source>
          <target state="new">Less than or equal to (&lt;=)</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Great than (&gt;)</source>
          <target state="new">Great than (&gt;)</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Great than or equal to (&gt;=)</source>
          <target state="new">Great than or equal to (&gt;=)</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Finally, the following conjunctions are supported as operators or functions in the condition statement:</source>
          <target state="new">Finally, the following conjunctions are supported as operators or functions in the condition statement:</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Not: !</source>
          <target state="new">Not: !</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>/ Not(bool1)</source>
          <target state="new">/ Not(bool1)</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>And: &amp;&amp; / And(bool1, bool2)</source>
          <target state="new">And: &amp;&amp; / And(bool1, bool2)</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Or: || / Or(bool1, bool2)</source>
          <target state="new">Or: || / Or(bool1, bool2)</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The following snippet shows an example of using conditionals in an expression:</source>
          <target state="new">The following snippet shows an example of using conditionals in an expression:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>