<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">daca0d528ae54849d010e3799fa6ee299fe7d3f2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\xaml-platform\x-class-attribute.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Configures XAML compilation to join partial classes between markup and code-behind.</source>
          <target state="new">Configures XAML compilation to join partial classes between markup and code-behind.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</source>
          <target state="new">The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>x:Class attribute'</source>
          <target state="new">x:Class attribute'</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>x:Class attribute</source>
          <target state="new">x:Class attribute</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Configures XAML compilation to join partial classes between markup and code-behind.</source>
          <target state="new">Configures XAML compilation to join partial classes between markup and code-behind.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</source>
          <target state="new">The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>XAML attribute usage</source>
          <target state="new">XAML attribute usage</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>XAML values</source>
          <target state="new">XAML values</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="new">Term</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>namespace</source>
          <target state="new">namespace</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="new">Optional.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Specifies a namespace that contains the partial class identified by <bpt id="p1">_</bpt>classname<ept id="p1">_</ept>.</source>
          <target state="new">Specifies a namespace that contains the partial class identified by <bpt id="p1">_</bpt>classname<ept id="p1">_</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">_</bpt>namespace<ept id="p1">_</ept> is specified, a dot (.) separates <bpt id="p2">_</bpt>namespace<ept id="p2">_</ept> and <bpt id="p3">_</bpt>classname<ept id="p3">_</ept>.</source>
          <target state="new">If <bpt id="p1">_</bpt>namespace<ept id="p1">_</ept> is specified, a dot (.) separates <bpt id="p2">_</bpt>namespace<ept id="p2">_</ept> and <bpt id="p3">_</bpt>classname<ept id="p3">_</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">_</bpt>namespace<ept id="p1">_</ept> is omitted, <bpt id="p2">_</bpt>classname<ept id="p2">_</ept> is assumed to have no namespace.</source>
          <target state="new">If <bpt id="p1">_</bpt>namespace<ept id="p1">_</ept> is omitted, <bpt id="p2">_</bpt>classname<ept id="p2">_</ept> is assumed to have no namespace.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>classname</source>
          <target state="new">classname</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Specifies the name of the partial class that connects the loaded XAML and your code-behind for that XAML.</source>
          <target state="new">Specifies the name of the partial class that connects the loaded XAML and your code-behind for that XAML.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="new">Remarks</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> can be declared as an attribute for any element that is the root of a XAML file/object tree and is being compiled by build actions, or for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Application<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242324)</ept> root in the application definition of a compiled application.</source>
          <target state="new"><bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> can be declared as an attribute for any element that is the root of a XAML file/object tree and is being compiled by build actions, or for the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Application<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br242324)</ept> root in the application definition of a compiled application.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Declaring <bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> on any element other than a page root or application root, and under any circumstances for a XAML file that is not compiled with the <bpt id="p2">**</bpt>Page<ept id="p2">**</ept> build action, results in a compile-time error.</source>
          <target state="new">Declaring <bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> on any element other than a page root or application root, and under any circumstances for a XAML file that is not compiled with the <bpt id="p2">**</bpt>Page<ept id="p2">**</ept> build action, results in a compile-time error.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The class used as <bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> cannot be a nested class.</source>
          <target state="new">The class used as <bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> cannot be a nested class.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> attribute must be a string that specifies the fully qualified name of a class.</source>
          <target state="new">The value of the <bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> attribute must be a string that specifies the fully qualified name of a class.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can omit namespace information so long as that is how the code-behind is structured also (your class definition starts at the class level).</source>
          <target state="new">You can omit namespace information so long as that is how the code-behind is structured also (your class definition starts at the class level).</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The code-behind file for a page or application definition must be within a code file that is included as part of the project.</source>
          <target state="new">The code-behind file for a page or application definition must be within a code file that is included as part of the project.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The code-behind class must be public.</source>
          <target state="new">The code-behind class must be public.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The code-behind class must be partial.</source>
          <target state="new">The code-behind class must be partial.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CLR language rules</source>
          <target state="new">CLR language rules</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although your code-behind file can be a C++ file, there are certain conventions that still follow the CLR language form, so that there is no difference in the XAML syntax.</source>
          <target state="new">Although your code-behind file can be a C++ file, there are certain conventions that still follow the CLR language form, so that there is no difference in the XAML syntax.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In particular, the separator between the namespace and classname components of any <bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> value is always a dot ("."), even though the separator between namespace and classname in the C++ code file associated with the XAML is "::".</source>
          <target state="new">In particular, the separator between the namespace and classname components of any <bpt id="p1">**</bpt>x:Class<ept id="p1">**</ept> value is always a dot ("."), even though the separator between namespace and classname in the C++ code file associated with the XAML is "::".</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you declare nested namespaces in C++, then the separator between the successive nested namespace strings should also be "." rather than "::" when you specify the <bpt id="p1">*</bpt>namespace<ept id="p1">*</ept> part of the <bpt id="p2">**</bpt>x:Class<ept id="p2">**</ept> value.</source>
          <target state="new">If you declare nested namespaces in C++, then the separator between the successive nested namespace strings should also be "." rather than "::" when you specify the <bpt id="p1">*</bpt>namespace<ept id="p1">*</ept> part of the <bpt id="p2">**</bpt>x:Class<ept id="p2">**</ept> value.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>