<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14a69d495c684fb609c632e23e392bb2796e7323</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\layout\layout-panels.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Use layout panels to arrange and group UI elements in your app.</source>
          <target state="new">Use layout panels to arrange and group UI elements in your app.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Layout panels for Universal Windows Platform (UWP) apps</source>
          <target state="new">Layout panels for Universal Windows Platform (UWP) apps</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Layout panels</source>
          <target state="new">Layout panels</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You use layout panels to arrange and group UI elements in your app.</source>
          <target state="new">You use layout panels to arrange and group UI elements in your app.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The built-in XAML layout panels include <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativePanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StackPanel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Grid<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>VariableSizedWrapGrid<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.aspx)</ept>, and <bpt id="p9">[</bpt><bpt id="p10">**</bpt>Canvas<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept>.</source>
          <target state="new">The built-in XAML layout panels include <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativePanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StackPanel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Grid<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>VariableSizedWrapGrid<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.aspx)</ept>, and <bpt id="p9">[</bpt><bpt id="p10">**</bpt>Canvas<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here, we describe each panel and show how to use it to layout XAML UI elements.</source>
          <target state="new">Here, we describe each panel and show how to use it to layout XAML UI elements.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are several things to consider when choosing a layout panel:</source>
          <target state="new">There are several things to consider when choosing a layout panel:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How the panel positions its child elements.</source>
          <target state="new">How the panel positions its child elements.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How the panel sizes its child elements.</source>
          <target state="new">How the panel sizes its child elements.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How overlapping child elements are layered on top of each other (z-order).</source>
          <target state="new">How overlapping child elements are layered on top of each other (z-order).</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The number and complexity of nested panel elements needed to create your desired layout.</source>
          <target state="new">The number and complexity of nested panel elements needed to create your desired layout.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Panel attached properties</source>
          <target state="new">Panel attached properties</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Most XAML layout panels use attached properties to let their child elements inform the parent panel about how they should be positioned in the UI.</source>
          <target state="new">Most XAML layout panels use attached properties to let their child elements inform the parent panel about how they should be positioned in the UI.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Attached properties use the syntax <bpt id="p1">*</bpt>AttachedPropertyProvider.PropertyName<ept id="p1">*</ept>.</source>
          <target state="new">Attached properties use the syntax <bpt id="p1">*</bpt>AttachedPropertyProvider.PropertyName<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you have panels that are nested inside other panels, attached properties on UI elements that specify layout characteristics to a parent are interpreted by the most immediate parent panel only.</source>
          <target state="new">If you have panels that are nested inside other panels, attached properties on UI elements that specify layout characteristics to a parent are interpreted by the most immediate parent panel only.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Here is an example of how you can set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.left.aspx)</ept> attached property on a Button control in XAML.</source>
          <target state="new">Here is an example of how you can set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.left.aspx)</ept> attached property on a Button control in XAML.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This informs the parent Canvas that the Button should be positioned 50 effective pixels from the left edge of the Canvas.</source>
          <target state="new">This informs the parent Canvas that the Button should be positioned 50 effective pixels from the left edge of the Canvas.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more info about attached properties, see <bpt id="p1">[</bpt>Attached properties overview<ept id="p1">](../xaml-platform/attached-properties-overview.md)</ept>.</source>
          <target state="new">For more info about attached properties, see <bpt id="p1">[</bpt>Attached properties overview<ept id="p1">](../xaml-platform/attached-properties-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>An attached property is a XAML concept that requires special syntax to get or set from code.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>An attached property is a XAML concept that requires special syntax to get or set from code.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To use attached properties in code, see the <bpt id="p1">*</bpt>Attached properties in code<ept id="p1">*</ept> section of the <bpt id="p2">*</bpt>Attached properties overview<ept id="p2">*</ept> article.</source>
          <target state="new">To use attached properties in code, see the <bpt id="p1">*</bpt>Attached properties in code<ept id="p1">*</ept> section of the <bpt id="p2">*</bpt>Attached properties overview<ept id="p2">*</ept> article.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Panel borders</source>
          <target state="new">Panel borders</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The RelativePanel, StackPanel, and Grid panels define border properties that let you draw a border around the panel without wrapping them in an additional Border element.</source>
          <target state="new">The RelativePanel, StackPanel, and Grid panels define border properties that let you draw a border around the panel without wrapping them in an additional Border element.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The border properties are <bpt id="p1">**</bpt>BorderBrush<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BorderThickness<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CornerRadius<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Padding<ept id="p4">**</ept>.</source>
          <target state="new">The border properties are <bpt id="p1">**</bpt>BorderBrush<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BorderThickness<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CornerRadius<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Padding<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Here’s an example of how to set border properties on a Grid.</source>
          <target state="new">Here’s an example of how to set border properties on a Grid.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A Grid with borders</source>
          <target state="new">A Grid with borders</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Using the built-in border properties reduces the XAML element count, which can improve the UI performance of your app.</source>
          <target state="new">Using the built-in border properties reduces the XAML element count, which can improve the UI performance of your app.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more info about layout panels and UI performance, see <bpt id="p1">[</bpt>Optimize your XAML layout<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt404609.aspx)</ept>.</source>
          <target state="new">For more info about layout panels and UI performance, see <bpt id="p1">[</bpt>Optimize your XAML layout<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/mt404609.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>RelativePanel</source>
          <target state="new">RelativePanel</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativePanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept> lets you layout UI elements by specifying where they go in relation to other elements and in relation to the panel.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativePanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept> lets you layout UI elements by specifying where they go in relation to other elements and in relation to the panel.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By default, an element is positioned in the upper left corner of the panel.</source>
          <target state="new">By default, an element is positioned in the upper left corner of the panel.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can use RelativePanel with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AdaptiveTrigger<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</ept>s to rearrange your UI for different window sizes.</source>
          <target state="new">You can use RelativePanel with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VisualStateManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AdaptiveTrigger<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</ept>s to rearrange your UI for different window sizes.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This table shows the attached properties you can use to align an element with the edge or center of the panel, and align and position it in relation to other elements.</source>
          <target state="new">This table shows the attached properties you can use to align an element with the edge or center of the panel, and align and position it in relation to other elements.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Panel alignment</source>
          <target state="new">Panel alignment</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Sibling alignment</source>
          <target state="new">Sibling alignment</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sibling position</source>
          <target state="new">Sibling position</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>AlignTopWithPanel</source>
          <target state="new">AlignTopWithPanel</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>AlignTopWith</source>
          <target state="new">AlignTopWith</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Above</source>
          <target state="new">Above</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>AlignBottomWithPanel</source>
          <target state="new">AlignBottomWithPanel</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>AlignBottomWith</source>
          <target state="new">AlignBottomWith</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Below</source>
          <target state="new">Below</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>AlignLeftWithPanel</source>
          <target state="new">AlignLeftWithPanel</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>AlignLeftWith</source>
          <target state="new">AlignLeftWith</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>LeftOf</source>
          <target state="new">LeftOf</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>AlignRightWithPanel</source>
          <target state="new">AlignRightWithPanel</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>AlignRightWith</source>
          <target state="new">AlignRightWith</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>RightOf</source>
          <target state="new">RightOf</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>AlignHorizontalCenterWithPanel</source>
          <target state="new">AlignHorizontalCenterWithPanel</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>AlignHorizontalCenterWith</source>
          <target state="new">AlignHorizontalCenterWith</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>AlignVerticalCenterWithPanel</source>
          <target state="new">AlignVerticalCenterWithPanel</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>AlignVerticalCenterWith</source>
          <target state="new">AlignVerticalCenterWith</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This XAML shows how to arrange elements in a RelativePanel.</source>
          <target state="new">This XAML shows how to arrange elements in a RelativePanel.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The result looks like this.</source>
          <target state="new">The result looks like this.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Relative panel</source>
          <target state="new">Relative panel</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Here are a few thing to note about the sizing of the rectangles.</source>
          <target state="new">Here are a few thing to note about the sizing of the rectangles.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The red rectangle is given an explicit size of 44x44.</source>
          <target state="new">The red rectangle is given an explicit size of 44x44.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It's placed in the upper left corner of the panel, which is the default position.</source>
          <target state="new">It's placed in the upper left corner of the panel, which is the default position.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The green rectangle is given an explicit height of 44.</source>
          <target state="new">The green rectangle is given an explicit height of 44.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Its left side is aligned with the red rectangle, and its right side is aligned with the blue rectangle, which determines its width.</source>
          <target state="new">Its left side is aligned with the red rectangle, and its right side is aligned with the blue rectangle, which determines its width.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The yellow rectangle isn't given an explicit size.</source>
          <target state="new">The yellow rectangle isn't given an explicit size.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Its left side is aligned with the blue rectangle.</source>
          <target state="new">Its left side is aligned with the blue rectangle.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Its right and bottom edges are aligned with the edge of the panel.</source>
          <target state="new">Its right and bottom edges are aligned with the edge of the panel.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Its size is determined by these alignments and it will resize as the panel resizes.</source>
          <target state="new">Its size is determined by these alignments and it will resize as the panel resizes.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>StackPanel</source>
          <target state="new">StackPanel</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>StackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept> is a simple layout panel that arranges its child elements into a single line that can be oriented horizontally or vertically.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>StackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept> is a simple layout panel that arranges its child elements into a single line that can be oriented horizontally or vertically.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>StackPanel controls are typically used in scenarios where you want to arrange a small subsection of the UI on your page.</source>
          <target state="new">StackPanel controls are typically used in scenarios where you want to arrange a small subsection of the UI on your page.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Orientation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.orientation.aspx)</ept> property to specify the direction of the child elements.</source>
          <target state="new">You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Orientation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.orientation.aspx)</ept> property to specify the direction of the child elements.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default orientation is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Vertical<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.orientation.aspx)</ept>.</source>
          <target state="new">The default orientation is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Vertical<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.orientation.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following XAML shows how to create a vertical StackPanel of items.</source>
          <target state="new">The following XAML shows how to create a vertical StackPanel of items.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The result looks like this.</source>
          <target state="new">The result looks like this.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Stack panel</source>
          <target state="new">Stack panel</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In a StackPanel, if a child element's size is not set explicitly, it stretches to fill the available width (or height if the Orientation is <bpt id="p1">**</bpt>Horizontal<ept id="p1">**</ept>).</source>
          <target state="new">In a StackPanel, if a child element's size is not set explicitly, it stretches to fill the available width (or height if the Orientation is <bpt id="p1">**</bpt>Horizontal<ept id="p1">**</ept>).</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In this example, the width of the rectangles is not set.</source>
          <target state="new">In this example, the width of the rectangles is not set.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The rectangles expand to fill the entire width of the StackPanel.</source>
          <target state="new">The rectangles expand to fill the entire width of the StackPanel.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Grid</source>
          <target state="new">Grid</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept> panel supports arranging controls in multi-row and multi-column layouts.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept> panel supports arranging controls in multi-row and multi-column layouts.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can specify a Grid panel's rows and columns by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RowDefinitions<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.rowdefinitions.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ColumnDefinitions<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.columndefinitions.aspx)</ept> properties.</source>
          <target state="new">You can specify a Grid panel's rows and columns by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RowDefinitions<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.rowdefinitions.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ColumnDefinitions<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.columndefinitions.aspx)</ept> properties.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In XAML, use property element syntax to declare the rows and columns within the Grid element.</source>
          <target state="new">In XAML, use property element syntax to declare the rows and columns within the Grid element.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can distribute space within a column or a row by using <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept> or star sizing.</source>
          <target state="new">You can distribute space within a column or a row by using <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept> or star sizing.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You position objects in specific cells of the Grid by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid.Column<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.column.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid.Row<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.row.aspx)</ept> attached properties.</source>
          <target state="new">You position objects in specific cells of the Grid by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid.Column<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.column.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid.Row<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.row.aspx)</ept> attached properties.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can make content span across multiple rows and columns by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid.RowSpan<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.rowspan.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid.ColumnSpan<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.columnspan.aspx)</ept> attached properties.</source>
          <target state="new">You can make content span across multiple rows and columns by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Grid.RowSpan<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.rowspan.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid.ColumnSpan<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.columnspan.aspx)</ept> attached properties.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This XAML example shows how to create a Grid with three rows and two columns.</source>
          <target state="new">This XAML example shows how to create a Grid with three rows and two columns.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The height of the first and third rows is just large enough to contain the text.</source>
          <target state="new">The height of the first and third rows is just large enough to contain the text.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The height of the second row fills up the rest of the available height.</source>
          <target state="new">The height of the second row fills up the rest of the available height.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The width of the columns is split equally within the available container width.</source>
          <target state="new">The width of the columns is split equally within the available container width.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The result looks like this.</source>
          <target state="new">The result looks like this.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Grid</source>
          <target state="new">Grid</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In this example, the sizing works like this:</source>
          <target state="new">In this example, the sizing works like this:</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The second row has an explicit height of 44 effective pixels.</source>
          <target state="new">The second row has an explicit height of 44 effective pixels.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>By default, the height of the first row fills whatever space is left over.</source>
          <target state="new">By default, the height of the first row fills whatever space is left over.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The width of the first column is set to <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept>, so it's as wide as needed for its children.</source>
          <target state="new">The width of the first column is set to <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept>, so it's as wide as needed for its children.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In this case, it's 44 effective pixels wide to accommodate the width of the red rectangle.</source>
          <target state="new">In this case, it's 44 effective pixels wide to accommodate the width of the red rectangle.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>There are no other size constraints on the rectangles, so each one stretches to fill the grid cell it's in.</source>
          <target state="new">There are no other size constraints on the rectangles, so each one stretches to fill the grid cell it's in.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>VariableSizedWrapGrid</source>
          <target state="new">VariableSizedWrapGrid</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>VariableSizedWrapGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.aspx)</ept> provides a grid-style layout panel where elements are arranged in rows or columns that automatically wrap to a new row or column when the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MaximumRowsOrColumns<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.maximumrowsorcolumns.aspx)</ept> value is reached.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>VariableSizedWrapGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.aspx)</ept> provides a grid-style layout panel where elements are arranged in rows or columns that automatically wrap to a new row or column when the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MaximumRowsOrColumns<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.maximumrowsorcolumns.aspx)</ept> value is reached.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Orientation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.orientation.aspx)</ept> property specifies whether the grid adds its items in rows or columns before wrapping.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Orientation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.orientation.aspx)</ept> property specifies whether the grid adds its items in rows or columns before wrapping.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The default orientation is <bpt id="p1">**</bpt>Vertical<ept id="p1">**</ept>, which means the grid adds items from top to bottom until a column is full, then wraps to a new column.</source>
          <target state="new">The default orientation is <bpt id="p1">**</bpt>Vertical<ept id="p1">**</ept>, which means the grid adds items from top to bottom until a column is full, then wraps to a new column.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When the value is <bpt id="p1">**</bpt>Horizontal<ept id="p1">**</ept>, the grid adds items from left to right, then wraps to a new row.</source>
          <target state="new">When the value is <bpt id="p1">**</bpt>Horizontal<ept id="p1">**</ept>, the grid adds items from left to right, then wraps to a new row.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Cell dimensions are specified by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.itemheight.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ItemWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.itemwidth.aspx)</ept>.</source>
          <target state="new">Cell dimensions are specified by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemHeight<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.itemheight.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ItemWidth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.itemwidth.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Each cell is the same size.</source>
          <target state="new">Each cell is the same size.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If ItemHeight or ItemWidth is not specified, then the first cell sizes to fit its content, and every other cell is the size of the first cell.</source>
          <target state="new">If ItemHeight or ItemWidth is not specified, then the first cell sizes to fit its content, and every other cell is the size of the first cell.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VariableSizedWrapGrid.ColumnSpan<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.columnspan.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VariableSizedWrapGrid.RowSpan<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.rowspan.aspx)</ept> attached properties to specify how many adjacent cells a child element should fill.</source>
          <target state="new">You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VariableSizedWrapGrid.ColumnSpan<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.columnspan.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>VariableSizedWrapGrid.RowSpan<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.rowspan.aspx)</ept> attached properties to specify how many adjacent cells a child element should fill.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Here's how to use a VariableSizedWrapGrid in XAML.</source>
          <target state="new">Here's how to use a VariableSizedWrapGrid in XAML.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The result looks like this.</source>
          <target state="new">The result looks like this.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Variable size wrap grid</source>
          <target state="new">Variable size wrap grid</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In this example, the maximum number of rows in each column is 3.</source>
          <target state="new">In this example, the maximum number of rows in each column is 3.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The first column contains only 2 items (the red and blue rectangles) because the blue rectangle spans 2 rows.</source>
          <target state="new">The first column contains only 2 items (the red and blue rectangles) because the blue rectangle spans 2 rows.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The green rectangle then wraps to the top of the next column.</source>
          <target state="new">The green rectangle then wraps to the top of the next column.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Canvas</source>
          <target state="new">Canvas</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept> panel positions its child elements using fixed coordinate points.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept> panel positions its child elements using fixed coordinate points.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You specify the points on individual child elements by setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.left.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas.Top<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.top.aspx)</ept> attached properties on each element.</source>
          <target state="new">You specify the points on individual child elements by setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.left.aspx)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas.Top<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.top.aspx)</ept> attached properties on each element.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>During layout, the parent Canvas reads these attached property values from its children and uses these values during the <bpt id="p1">[</bpt>Arrange<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.arrange.aspx)</ept> pass of layout.</source>
          <target state="new">During layout, the parent Canvas reads these attached property values from its children and uses these values during the <bpt id="p1">[</bpt>Arrange<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.arrange.aspx)</ept> pass of layout.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Objects in a Canvas can overlap, where one object is drawn on top of another object.</source>
          <target state="new">Objects in a Canvas can overlap, where one object is drawn on top of another object.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>By default, the Canvas renders child objects in the order in which they’re declared, so the last child is rendered on top (each element has a default z-index of 0).</source>
          <target state="new">By default, the Canvas renders child objects in the order in which they’re declared, so the last child is rendered on top (each element has a default z-index of 0).</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This is the same as other built-in panels.</source>
          <target state="new">This is the same as other built-in panels.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>However, Canvas also supports the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.ZIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.zindex.aspx)</ept> attached property that you can set on each of the child elements.</source>
          <target state="new">However, Canvas also supports the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.ZIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.zindex.aspx)</ept> attached property that you can set on each of the child elements.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can set this property in code to change the draw order of elements during run time.</source>
          <target state="new">You can set this property in code to change the draw order of elements during run time.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The element with the highest Canvas.ZIndex value draws last and therefore draws over any other elements that share the same space or overlap in any way.</source>
          <target state="new">The element with the highest Canvas.ZIndex value draws last and therefore draws over any other elements that share the same space or overlap in any way.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Note that alpha value (transparency) is respected, so even if elements overlap, the contents shown in overlap areas might be blended if the top one has a non-maximum alpha value.</source>
          <target state="new">Note that alpha value (transparency) is respected, so even if elements overlap, the contents shown in overlap areas might be blended if the top one has a non-maximum alpha value.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The Canvas does not do any sizing of its children.</source>
          <target state="new">The Canvas does not do any sizing of its children.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Each element must specify its size.</source>
          <target state="new">Each element must specify its size.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Here's an example of a Canvas in XAML.</source>
          <target state="new">Here's an example of a Canvas in XAML.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The result looks like this.</source>
          <target state="new">The result looks like this.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Canvas</source>
          <target state="new">Canvas</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Use the Canvas panel with discretion.</source>
          <target state="new">Use the Canvas panel with discretion.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>While it's convenient to be able to precisely control positions of elements in UI for some scenarios, a fixed positioned layout panel causes that area of your UI to be less adaptive to overall app window size changes.</source>
          <target state="new">While it's convenient to be able to precisely control positions of elements in UI for some scenarios, a fixed positioned layout panel causes that area of your UI to be less adaptive to overall app window size changes.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>App window resize might come from device orientation changes, split app windows, changing monitors, and a number of other user scenarios.</source>
          <target state="new">App window resize might come from device orientation changes, split app windows, changing monitors, and a number of other user scenarios.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Panels for ItemsControl</source>
          <target state="new">Panels for ItemsControl</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>There are several special-purpose panels that can be used only as an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemspanel.aspx)</ept> to display items in an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ItemsControl<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.aspx)</ept>.</source>
          <target state="new">There are several special-purpose panels that can be used only as an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemspanel.aspx)</ept> to display items in an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ItemsControl<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>These are <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsStackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemsstackpanel.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ItemsWrapGrid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemswrapgrid.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>VirtualizingStackPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.virtualizingstackpanel.aspx)</ept>, and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>WrapGrid<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.wrapgrid.aspx)</ept>.</source>
          <target state="new">These are <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsStackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemsstackpanel.aspx)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ItemsWrapGrid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemswrapgrid.aspx)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>VirtualizingStackPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.virtualizingstackpanel.aspx)</ept>, and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>WrapGrid<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.wrapgrid.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>You can't use these panels for general UI layout.</source>
          <target state="new">You can't use these panels for general UI layout.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>