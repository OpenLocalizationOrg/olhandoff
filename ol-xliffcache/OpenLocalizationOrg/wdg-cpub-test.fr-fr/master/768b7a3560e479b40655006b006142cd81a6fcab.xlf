<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">768b7a3560e479b40655006b006142cd81a6fcab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci\debug-test-perf\optimize-gridview-and-listview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ListView and GridView UI optimization</source>
          <target state="new">ListView and GridView UI optimization</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more details, see the //build/ session <bpt id="p1">[</bpt>Dramatically Increase Performance when Users Interact with Large Amounts of Data in GridView and ListView<ept id="p1">](https://channel9.msdn.com/events/build/2013/3-158)</ept>.</source>
          <target state="new">For more details, see the //build/ session <bpt id="p1">[</bpt>Dramatically Increase Performance when Users Interact with Large Amounts of Data in GridView and ListView<ept id="p1">](https://channel9.msdn.com/events/build/2013/3-158)</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Improve <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> performance and startup time through UI virtualization, element reduction, and progressive updating of items.</source>
          <target state="new">Improve <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> performance and startup time through UI virtualization, element reduction, and progressive updating of items.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For data virtualization techniques, see <bpt id="p1">[</bpt>ListView and GridView data virtualization<ept id="p1">](listview-and-gridview-data-optimization.md)</ept>.</source>
          <target state="new">For data virtualization techniques, see <bpt id="p1">[</bpt>ListView and GridView data virtualization<ept id="p1">](listview-and-gridview-data-optimization.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Two key factors in collection performance</source>
          <target state="new">Two key factors in collection performance</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Manipulating collections is a common scenario.</source>
          <target state="new">Manipulating collections is a common scenario.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A photo viewer has collections of photos, a reader has collections of articles/books/stories, and a shopping app has collections of products.</source>
          <target state="new">A photo viewer has collections of photos, a reader has collections of articles/books/stories, and a shopping app has collections of products.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic shows what you can do to make your app efficient at manipulating collections.</source>
          <target state="new">This topic shows what you can do to make your app efficient at manipulating collections.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There are two key factors in performance when it comes to collections: one is the time spent by the UI thread creating items; the other is the memory used by both the raw data set and the UI elements used to render that data.</source>
          <target state="new">There are two key factors in performance when it comes to collections: one is the time spent by the UI thread creating items; the other is the memory used by both the raw data set and the UI elements used to render that data.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For smooth panning/scrolling, it's vital that the UI thread do an efficient and smart job of instantiating, data-binding, and laying out items.</source>
          <target state="new">For smooth panning/scrolling, it's vital that the UI thread do an efficient and smart job of instantiating, data-binding, and laying out items.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>UI virtualization</source>
          <target state="new">UI virtualization</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>UI virtualization is the most important improvement you can make.</source>
          <target state="new">UI virtualization is the most important improvement you can make.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This means that UI elements representing the items are created on demand.</source>
          <target state="new">This means that UI elements representing the items are created on demand.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For an items control bound to a 1000-item collection, it would be a waste of resources to create the UI for all the items at the same time, because they can't all be displayed at the same time.</source>
          <target state="new">For an items control bound to a 1000-item collection, it would be a waste of resources to create the UI for all the items at the same time, because they can't all be displayed at the same time.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> (and other standard <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ItemsControl<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept>-derived controls) perform UI virtualization for you.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> (and other standard <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ItemsControl<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept>-derived controls) perform UI virtualization for you.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When items are close to being scrolled into view (a few pages away), the framework generates the UI for the items and caches them.</source>
          <target state="new">When items are close to being scrolled into view (a few pages away), the framework generates the UI for the items and caches them.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When it's unlikely that the items will be shown again, the framework re-claims the memory.</source>
          <target state="new">When it's unlikely that the items will be shown again, the framework re-claims the memory.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you provide a custom items panel template (see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803-itemspanel)</ept>) then make sure you use a virtualizing panel such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ItemsWrapGrid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn298849)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ItemsStackPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn298795)</ept>.</source>
          <target state="new">If you provide a custom items panel template (see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803-itemspanel)</ept>) then make sure you use a virtualizing panel such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ItemsWrapGrid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn298849)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ItemsStackPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn298795)</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VariableSizedWrapGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227651)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>WrapGrid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227717)</ept>, or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>StackPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept>, then you will not get virtualization.</source>
          <target state="new">If you use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>VariableSizedWrapGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227651)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>WrapGrid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227717)</ept>, or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>StackPanel<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept>, then you will not get virtualization.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The concept of a viewport is critical to UI virtualization because the framework must create the elements that are likely to be shown.</source>
          <target state="new">The concept of a viewport is critical to UI virtualization because the framework must create the elements that are likely to be shown.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In general, the viewport of an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept> is the extent of the logical control.</source>
          <target state="new">In general, the viewport of an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803)</ept> is the extent of the logical control.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, the viewport of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> is the width and height of the <bpt id="p3">**</bpt>ListView<ept id="p3">**</ept> element.</source>
          <target state="new">For example, the viewport of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> is the width and height of the <bpt id="p3">**</bpt>ListView<ept id="p3">**</ept> element.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Some panels allow child elements unlimited space, examples being <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollViewer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209527)</ept> and a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>, with auto-sized rows or columns.</source>
          <target state="new">Some panels allow child elements unlimited space, examples being <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScrollViewer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209527)</ept> and a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>, with auto-sized rows or columns.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When a virtualized <bpt id="p1">**</bpt>ItemsControl<ept id="p1">**</ept> is placed in a panel like that, it takes enough room to display all of its items, which defeats virtualization.</source>
          <target state="new">When a virtualized <bpt id="p1">**</bpt>ItemsControl<ept id="p1">**</ept> is placed in a panel like that, it takes enough room to display all of its items, which defeats virtualization.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Restore virtualization by setting a width and height on the <bpt id="p1">**</bpt>ItemsControl<ept id="p1">**</ept>.</source>
          <target state="new">Restore virtualization by setting a width and height on the <bpt id="p1">**</bpt>ItemsControl<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Element reduction per item</source>
          <target state="new">Element reduction per item</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Keep the number of UI elements used to render your items to a reasonable minimum.</source>
          <target state="new">Keep the number of UI elements used to render your items to a reasonable minimum.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When an items control is first shown, all the elements needed to render a viewport full of items are created.</source>
          <target state="new">When an items control is first shown, all the elements needed to render a viewport full of items are created.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Also, as items approach the viewport, the framework updates the UI elements in cached item templates with the bound data objects.</source>
          <target state="new">Also, as items approach the viewport, the framework updates the UI elements in cached item templates with the bound data objects.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Minimizing the complexity of the markup inside templates pays off in memory and in time spent on the UI thread, improving responsiveness especially while panning/scrolling.</source>
          <target state="new">Minimizing the complexity of the markup inside templates pays off in memory and in time spent on the UI thread, improving responsiveness especially while panning/scrolling.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The templates in question are the item template (see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemTemplate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803-itemtemplate)</ept>) and the control template of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListViewItem<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242878item)</ept> or a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridViewItem<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242705item)</ept> (the item control template, or <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ItemContainerStyle<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242803-itemcontainerstyle)</ept>).</source>
          <target state="new">The templates in question are the item template (see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemTemplate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803-itemtemplate)</ept>) and the control template of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListViewItem<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242878item)</ept> or a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridViewItem<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242705item)</ept> (the item control template, or <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ItemContainerStyle<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242803-itemcontainerstyle)</ept>).</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The benefit of even a small reduction in element count is multiplied by the number of items displayed.</source>
          <target state="new">The benefit of even a small reduction in element count is multiplied by the number of items displayed.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For examples of element reduction, see <bpt id="p1">[</bpt>Optimize your XAML markup<ept id="p1">](optimize-xaml-loading.md)</ept>.</source>
          <target state="new">For examples of element reduction, see <bpt id="p1">[</bpt>Optimize your XAML markup<ept id="p1">](optimize-xaml-loading.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default control templates for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListViewItem<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878item)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridViewItem<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705item)</ept> contain a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ListViewItemPresenter<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn298500)</ept> and a <bpt id="p7">[</bpt><bpt id="p8">**</bpt>GridViewItemPresenter<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/Dn279298)</ept> element, respectively.</source>
          <target state="new">The default control templates for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListViewItem<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878item)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridViewItem<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705item)</ept> contain a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ListViewItemPresenter<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Dn298500)</ept> and a <bpt id="p7">[</bpt><bpt id="p8">**</bpt>GridViewItemPresenter<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/Dn279298)</ept> element, respectively.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Each of these presenters is a single optimized element that displays complex visuals for focus, selection, and other visual states.</source>
          <target state="new">Each of these presenters is a single optimized element that displays complex visuals for focus, selection, and other visual states.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you already have custom item control templates (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemContainerStyle<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803-itemcontainerstyle)</ept>), or if in future you edit a copy of an item control template, then we recommend you use a <bpt id="p3">**</bpt>ListViewItemPresenter<ept id="p3">**</ept> or a <bpt id="p4">**</bpt>GridViewItemPresenter<ept id="p4">**</ept> because those elements will give you optimum balance between performance and customizability in the majority of cases.</source>
          <target state="new">If you already have custom item control templates (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemContainerStyle<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242803-itemcontainerstyle)</ept>), or if in future you edit a copy of an item control template, then we recommend you use a <bpt id="p3">**</bpt>ListViewItemPresenter<ept id="p3">**</ept> or a <bpt id="p4">**</bpt>GridViewItemPresenter<ept id="p4">**</ept> because those elements will give you optimum balance between performance and customizability in the majority of cases.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You customize these presenters by setting properties on them.</source>
          <target state="new">You customize these presenters by setting properties on them.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, here's markup that removes the check mark that appears by default when an item is selected, and changes the background color of the selected item to orange.</source>
          <target state="new">For example, here's markup that removes the check mark that appears by default when an item is selected, and changes the background color of the selected item to orange.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are about 25 properties with self-describing names similar to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SelectionCheckMarkVisualEnabled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn298500-selectioncheckmarkvisualenabled)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SelectedBackground<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn298500-selectedbackground)</ept>.</source>
          <target state="new">There are about 25 properties with self-describing names similar to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SelectionCheckMarkVisualEnabled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn298500-selectioncheckmarkvisualenabled)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SelectedBackground<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn298500-selectedbackground)</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Should the presenter types prove not to be customizable enough for your use case, you can edit a copy of the <ph id="ph1">`ListViewItemExpanded`</ph> or <ph id="ph2">`GridViewItemExpanded`</ph> control template instead.</source>
          <target state="new">Should the presenter types prove not to be customizable enough for your use case, you can edit a copy of the <ph id="ph1">`ListViewItemExpanded`</ph> or <ph id="ph2">`GridViewItemExpanded`</ph> control template instead.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These can be found in <ph id="ph1">`\Program Files (x86)\Windows Kits\10\DesignTime\CommonConfiguration\Neutral\UAP\&lt;version&gt;\Generic\generic.xaml`</ph>.</source>
          <target state="new">These can be found in <ph id="ph1">`\Program Files (x86)\Windows Kits\10\DesignTime\CommonConfiguration\Neutral\UAP\&lt;version&gt;\Generic\generic.xaml`</ph>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Be aware that using these templates means trading some performance for the increase in customization.</source>
          <target state="new">Be aware that using these templates means trading some performance for the increase in customization.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Update ListView and GridView items progressively</source>
          <target state="new">Update ListView and GridView items progressively</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you're using data virtualization then you can keep <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> responsiveness high by configuring the control to render temporary UI elements for the items still being (down)loaded.</source>
          <target state="new">If you're using data virtualization then you can keep <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> responsiveness high by configuring the control to render temporary UI elements for the items still being (down)loaded.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The temporary elements are then progressively replaced with actual UI as data loads.</source>
          <target state="new">The temporary elements are then progressively replaced with actual UI as data loads.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Also—no matter where you're loading data from (local disk, network, or cloud)—a user can pan/scroll a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> so rapidly that it's not possible to render each item with full fidelity while preserving smooth panning/scrolling.</source>
          <target state="new">Also—no matter where you're loading data from (local disk, network, or cloud)—a user can pan/scroll a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> so rapidly that it's not possible to render each item with full fidelity while preserving smooth panning/scrolling.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To preserve smooth panning/scrolling you can choose to render an item in multiple phases in addition to using placeholders.</source>
          <target state="new">To preserve smooth panning/scrolling you can choose to render an item in multiple phases in addition to using placeholders.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An example of these techniques is often seen in photo-viewing apps: even though not all of the images have been loaded and displayed, the user can still pan/scroll and interact with the collection.</source>
          <target state="new">An example of these techniques is often seen in photo-viewing apps: even though not all of the images have been loaded and displayed, the user can still pan/scroll and interact with the collection.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Or, for a "movie" item, you could show the title in the first phase, the rating in the second phase, and an image of the poster in the third phase.</source>
          <target state="new">Or, for a "movie" item, you could show the title in the first phase, the rating in the second phase, and an image of the poster in the third phase.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The user sees the most important data about each item as early as possible, and that means they're able to take action at once.</source>
          <target state="new">The user sees the most important data about each item as early as possible, and that means they're able to take action at once.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Then the less important info is filled-in as time allows.</source>
          <target state="new">Then the less important info is filled-in as time allows.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Here are the platform features you can use to implement these techniques.</source>
          <target state="new">Here are the platform features you can use to implement these techniques.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Placeholders</source>
          <target state="new">Placeholders</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The temporary placeholder visuals feature is on by default, and it's controlled with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ShowsScrollingPlaceholders<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-showsscrollingplaceholders)</ept> property.</source>
          <target state="new">The temporary placeholder visuals feature is on by default, and it's controlled with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ShowsScrollingPlaceholders<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-showsscrollingplaceholders)</ept> property.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>During fast panning/scrolling, this feature gives the user a visual hint that there are more items yet to fully display while also preserving smoothness.</source>
          <target state="new">During fast panning/scrolling, this feature gives the user a visual hint that there are more items yet to fully display while also preserving smoothness.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you use one of the techniques below then you can set <bpt id="p1">**</bpt>ShowsScrollingPlaceholders<ept id="p1">**</ept> to false if you prefer not to have the system render placeholders.</source>
          <target state="new">If you use one of the techniques below then you can set <bpt id="p1">**</bpt>ShowsScrollingPlaceholders<ept id="p1">**</ept> to false if you prefer not to have the system render placeholders.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Progressive data template updates using x:Phase</source>
          <target state="new">Progressive data template updates using x:Phase</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Here's how to use the <bpt id="p1">[</bpt>x:Phase attribute<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204790)</ept> with <bpt id="p2">[</bpt>{x:Bind}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> bindings to implement progressive data template updates.</source>
          <target state="new">Here's how to use the <bpt id="p1">[</bpt>x:Phase attribute<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204790)</ept> with <bpt id="p2">[</bpt>{x:Bind}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> bindings to implement progressive data template updates.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Here's what the binding source looks like (this is the data source that we'll bind to).</source>
          <target state="new">Here's what the binding source looks like (this is the data source that we'll bind to).</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Here's the markup that <ph id="ph1">`DeferMainPage.xaml`</ph> contains.</source>
          <target state="new">Here's the markup that <ph id="ph1">`DeferMainPage.xaml`</ph> contains.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The grid view contains an item template with elements bound to the <bpt id="p1">**</bpt>Title<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Subtitle<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Description<ept id="p3">**</ept> properties of the <bpt id="p4">**</bpt>MyItem<ept id="p4">**</ept> class.</source>
          <target state="new">The grid view contains an item template with elements bound to the <bpt id="p1">**</bpt>Title<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Subtitle<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Description<ept id="p3">**</ept> properties of the <bpt id="p4">**</bpt>MyItem<ept id="p4">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>x:Phase<ept id="p1">**</ept> defaults to 0.</source>
          <target state="new">Note that <bpt id="p1">**</bpt>x:Phase<ept id="p1">**</ept> defaults to 0.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Here, items will be initially rendered with just the title visible.</source>
          <target state="new">Here, items will be initially rendered with just the title visible.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Then the subtitle element will be data bound and made visible for all the items and so on until all the phases have been processed.</source>
          <target state="new">Then the subtitle element will be data bound and made visible for all the items and so on until all the phases have been processed.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you run the app now and pan/scroll quickly through the grid view then you'll notice that as each new item appears on the screen, at first it is rendered as a dark gray rectangle (thanks to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ShowsScrollingPlaceholders<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-showsscrollingplaceholders)</ept> property defaulting to <bpt id="p3">**</bpt>true<ept id="p3">**</ept>), then the title appears, followed by subtitle, followed by description.</source>
          <target state="new">If you run the app now and pan/scroll quickly through the grid view then you'll notice that as each new item appears on the screen, at first it is rendered as a dark gray rectangle (thanks to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ShowsScrollingPlaceholders<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-showsscrollingplaceholders)</ept> property defaulting to <bpt id="p3">**</bpt>true<ept id="p3">**</ept>), then the title appears, followed by subtitle, followed by description.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Progressive data template updates using ContainerContentChanging</source>
          <target state="new">Progressive data template updates using ContainerContentChanging</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The general strategy for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContainerContentChanging<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-containercontentchanging)</ept> event is to use <bpt id="p3">**</bpt>Opacity<ept id="p3">**</ept> to hide elements that don’t need to be immediately visible.</source>
          <target state="new">The general strategy for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContainerContentChanging<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-containercontentchanging)</ept> event is to use <bpt id="p3">**</bpt>Opacity<ept id="p3">**</ept> to hide elements that don’t need to be immediately visible.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When elements are recycled, they will retain their old values so we want to hide those elements until we've updated those values from the new data item.</source>
          <target state="new">When elements are recycled, they will retain their old values so we want to hide those elements until we've updated those values from the new data item.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>We use the <bpt id="p1">**</bpt>Phase<ept id="p1">**</ept> property on the event arguments to determine which elements to update and show.</source>
          <target state="new">We use the <bpt id="p1">**</bpt>Phase<ept id="p1">**</ept> property on the event arguments to determine which elements to update and show.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If additional phases are needed, we register a callback.</source>
          <target state="new">If additional phases are needed, we register a callback.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>We'll use the same binding source as for <bpt id="p1">**</bpt>x:Phase<ept id="p1">**</ept>.</source>
          <target state="new">We'll use the same binding source as for <bpt id="p1">**</bpt>x:Phase<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Here's the markup that <ph id="ph1">`MainPage.xaml`</ph> contains.</source>
          <target state="new">Here's the markup that <ph id="ph1">`MainPage.xaml`</ph> contains.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The grid view declares a handler to its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContainerContentChanging<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-containercontentchanging)</ept> event, and it contains an item template with elements used to display the <bpt id="p3">**</bpt>Title<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Subtitle<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Description<ept id="p5">**</ept> properties of the <bpt id="p6">**</bpt>MyItem<ept id="p6">**</ept> class.</source>
          <target state="new">The grid view declares a handler to its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContainerContentChanging<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-containercontentchanging)</ept> event, and it contains an item template with elements used to display the <bpt id="p3">**</bpt>Title<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Subtitle<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Description<ept id="p5">**</ept> properties of the <bpt id="p6">**</bpt>MyItem<ept id="p6">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To get the maximum performance benefits of using <bpt id="p1">**</bpt>ContainerContentChanging<ept id="p1">**</ept>, we don't use bindings in the markup but we instead assign values programmatically.</source>
          <target state="new">To get the maximum performance benefits of using <bpt id="p1">**</bpt>ContainerContentChanging<ept id="p1">**</ept>, we don't use bindings in the markup but we instead assign values programmatically.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The exception here is the element displaying the title, which we consider to be in phase 0.</source>
          <target state="new">The exception here is the element displaying the title, which we consider to be in phase 0.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Lastly, here's the implementation of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContainerContentChanging<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-containercontentchanging)</ept> event handler.</source>
          <target state="new">Lastly, here's the implementation of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContainerContentChanging<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-containercontentchanging)</ept> event handler.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This code also shows how we add a property of type <bpt id="p1">**</bpt>RecordingViewModel<ept id="p1">**</ept> to <bpt id="p2">**</bpt>MainPage<ept id="p2">**</ept> to expose the binding source class from the class that represents our page of markup.</source>
          <target state="new">This code also shows how we add a property of type <bpt id="p1">**</bpt>RecordingViewModel<ept id="p1">**</ept> to <bpt id="p2">**</bpt>MainPage<ept id="p2">**</ept> to expose the binding source class from the class that represents our page of markup.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>As long as you don't have any <bpt id="p1">[</bpt>{Binding}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> bindings in your data template, then mark the event arguments object as handled in the first phase of the handler to hint to the item that it needn't set a data context.</source>
          <target state="new">As long as you don't have any <bpt id="p1">[</bpt>{Binding}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> bindings in your data template, then mark the event arguments object as handled in the first phase of the handler to hint to the item that it needn't set a data context.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you run the app now and pan/scroll quickly through the grid view then you'll see the same behavior as for as for <bpt id="p1">**</bpt>x:Phase<ept id="p1">**</ept>.</source>
          <target state="new">If you run the app now and pan/scroll quickly through the grid view then you'll see the same behavior as for as for <bpt id="p1">**</bpt>x:Phase<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Container-recycling with heterogeneous collections</source>
          <target state="new">Container-recycling with heterogeneous collections</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In some applications, you need to have different UI for different types of item within a collection.</source>
          <target state="new">In some applications, you need to have different UI for different types of item within a collection.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This can create a situation where it is impossible for virtualizing panels to reuse/recycle the visual elements used to display the items.</source>
          <target state="new">This can create a situation where it is impossible for virtualizing panels to reuse/recycle the visual elements used to display the items.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Recreating the visual elements for an item during panning undoes many of the performance wins provided by virtualization.</source>
          <target state="new">Recreating the visual elements for an item during panning undoes many of the performance wins provided by virtualization.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>However, a little planning can allow virtualizing panels to reuse the elements.</source>
          <target state="new">However, a little planning can allow virtualizing panels to reuse the elements.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Developers have a couple of options depending on their scenario: the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ChoosingItemContainer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-choosingitemcontainer)</ept> event, or an item template selector.</source>
          <target state="new">Developers have a couple of options depending on their scenario: the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ChoosingItemContainer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-choosingitemcontainer)</ept> event, or an item template selector.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ChoosingItemContainer<ept id="p1">**</ept> event is the most performant approach.</source>
          <target state="new">The <bpt id="p1">**</bpt>ChoosingItemContainer<ept id="p1">**</ept> event is the most performant approach.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The ChoosingItemContainer event</source>
          <target state="new">The ChoosingItemContainer event</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ChoosingItemContainer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-choosingitemcontainer)</ept> is an event that allows you to provide an item (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListViewItem<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242878item)</ept><ph id="ph1">/</ph><bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridViewItem<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242705item)</ept>) to the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ListView<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept><ph id="ph2">/</ph><bpt id="p9">[</bpt><bpt id="p10">**</bpt>GridView<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> whenever a new item is needed during start-up or recycling.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ChoosingItemContainer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-choosingitemcontainer)</ept> is an event that allows you to provide an item (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListViewItem<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242878item)</ept><ph id="ph1">/</ph><bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridViewItem<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242705item)</ept>) to the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ListView<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept><ph id="ph2">/</ph><bpt id="p9">[</bpt><bpt id="p10">**</bpt>GridView<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> whenever a new item is needed during start-up or recycling.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can create a container based on the type of data item the container will display (shown in the example below).</source>
          <target state="new">You can create a container based on the type of data item the container will display (shown in the example below).</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ChoosingItemContainer<ept id="p1">**</ept> is the most performant way to use different data templates for different items.</source>
          <target state="new"><bpt id="p1">**</bpt>ChoosingItemContainer<ept id="p1">**</ept> is the most performant way to use different data templates for different items.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Container caching is something that can be achieved using <bpt id="p1">**</bpt>ChoosingItemContainer<ept id="p1">**</ept>.</source>
          <target state="new">Container caching is something that can be achieved using <bpt id="p1">**</bpt>ChoosingItemContainer<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, if you have five different template, with one template occurring an order of magnitude more often than the others, then ChoosingItemContainer allows you not only to create items at the ratios needed but also to keep an appropriate number of elements cached and available for recycling.</source>
          <target state="new">For example, if you have five different template, with one template occurring an order of magnitude more often than the others, then ChoosingItemContainer allows you not only to create items at the ratios needed but also to keep an appropriate number of elements cached and available for recycling.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ChoosingGroupHeaderContainer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-choosinggroupheadercontainer)</ept> provides the same functionality for group headers.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ChoosingGroupHeaderContainer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-choosinggroupheadercontainer)</ept> provides the same functionality for group headers.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Item template selector</source>
          <target state="new">Item template selector</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An item template selector (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataTemplateSelector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209469)</ept>) allows an app to return a different item template at runtime based on the type of the data item that will be displayed.</source>
          <target state="new">An item template selector (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataTemplateSelector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209469)</ept>) allows an app to return a different item template at runtime based on the type of the data item that will be displayed.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This makes development more productive, but it makes UI virtualization more difficult because not every item template can be reused for every data item.</source>
          <target state="new">This makes development more productive, but it makes UI virtualization more difficult because not every item template can be reused for every data item.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When recycling an item (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListViewItem<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878item)</ept><ph id="ph1">/</ph><bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridViewItem<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705item)</ept>), the framework must decide whether the items that are available for use in the recycle queue (the recycle queue is a cache of items that are not currently being used to display data) have an item template that will match the one desired by the current data item.</source>
          <target state="new">When recycling an item (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListViewItem<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878item)</ept><ph id="ph1">/</ph><bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridViewItem<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242705item)</ept>), the framework must decide whether the items that are available for use in the recycle queue (the recycle queue is a cache of items that are not currently being used to display data) have an item template that will match the one desired by the current data item.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If there are no items in the recycle queue with the appropriate item template then a new item is created, and the appropriate item template is instantiated for it.</source>
          <target state="new">If there are no items in the recycle queue with the appropriate item template then a new item is created, and the appropriate item template is instantiated for it.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If, on other hand, the recycle queue contains an item with the appropriate item template then that item is removed from the recycle queue and is used for the current data item.</source>
          <target state="new">If, on other hand, the recycle queue contains an item with the appropriate item template then that item is removed from the recycle queue and is used for the current data item.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>An item template selector works in situations where only a small number of item templates are used and there is a flat distribution throughout the collection of items that use different item templates.</source>
          <target state="new">An item template selector works in situations where only a small number of item templates are used and there is a flat distribution throughout the collection of items that use different item templates.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When there is an uneven distribution of items that use different item templates then new item templates will likely need to be created during panning, and this negates many of the gains provided by virtualization.</source>
          <target state="new">When there is an uneven distribution of items that use different item templates then new item templates will likely need to be created during panning, and this negates many of the gains provided by virtualization.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Additionally, an item template selector only considers five possible candidates when evaluating whether a particular container can be reused for the current data item.</source>
          <target state="new">Additionally, an item template selector only considers five possible candidates when evaluating whether a particular container can be reused for the current data item.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>So you should carefully consider whether your data is appropriate for use with an item template selector before using one in your app.</source>
          <target state="new">So you should carefully consider whether your data is appropriate for use with an item template selector before using one in your app.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If your collection is mostly homogeneous then the selector is returning the same type most (possibly all) of the time.</source>
          <target state="new">If your collection is mostly homogeneous then the selector is returning the same type most (possibly all) of the time.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Just be aware of the price you're paying for the rare exceptions to that homegeneity, and consider whether using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ChoosingItemContainer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-choosingitemcontainer)</ept> (or two items controls) is preferable.</source>
          <target state="new">Just be aware of the price you're paying for the rare exceptions to that homegeneity, and consider whether using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ChoosingItemContainer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878base-choosingitemcontainer)</ept> (or two items controls) is preferable.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>