<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using API Management service to generate HTTP requests</source>
          <target state="new">Using API Management service to generate HTTP requests</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn to use request and response policies in API Management to call external services from your API</source>
          <target state="new">Learn to use request and response policies in API Management to call external services from your API</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using external services from the Azure API Management service</source>
          <target state="new">Using external services from the Azure API Management service</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The policies available in Azure API Management service can do a wide range of useful work based purely on the incoming request, the outgoing response and basic configuration information.</source>
          <target state="new">The policies available in Azure API Management service can do a wide range of useful work based purely on the incoming request, the outgoing response and basic configuration information.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, being able to interact with external services from API Management policies opens up many more opportunities.</source>
          <target state="new">However, being able to interact with external services from API Management policies opens up many more opportunities.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>We have previously seen how we can interact with the <bpt id="p1">[</bpt>Azure Event Hub service for logging, monitoring and analytics<ept id="p1">](api-management-log-to-eventhub-sample.md)</ept>.</source>
          <target state="new">We have previously seen how we can interact with the <bpt id="p1">[</bpt>Azure Event Hub service for logging, monitoring and analytics<ept id="p1">](api-management-log-to-eventhub-sample.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In this article we will demonstrate policies that allow you to interact with any external HTTP based service.</source>
          <target state="new">In this article we will demonstrate policies that allow you to interact with any external HTTP based service.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These policies can be used for triggering remote events or for retrieving information that will be used to manipulate the original request and response in some way.</source>
          <target state="new">These policies can be used for triggering remote events or for retrieving information that will be used to manipulate the original request and response in some way.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Send-One-Way-Request</source>
          <target state="new">Send-One-Way-Request</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Possibly the simplest external interaction is the fire-and-forget style of request that allows an external service to be notified of some kind of important event.</source>
          <target state="new">Possibly the simplest external interaction is the fire-and-forget style of request that allows an external service to be notified of some kind of important event.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>We can use the control flow policy <ph id="ph2">`choose`</ph><ph id="ph3" /> to detect any kind of condition that we are interested in and then, if the condition is satisfied, we can make an external HTTP request using the <bpt id="p2">[</bpt>send-one-way-request<ept id="p2">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendOneWayRequest)</ept><ph id="ph4" /> policy.</source>
          <target state="new">We can use the control flow policy <ph id="ph2">`choose`</ph><ph id="ph3" /> to detect any kind of condition that we are interested in and then, if the condition is satisfied, we can make an external HTTP request using the <bpt id="p2">[</bpt>send-one-way-request<ept id="p2">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendOneWayRequest)</ept><ph id="ph4" /> policy.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This could be a request to a messaging system like Hipchat or Slack, or a mail API like SendGrid or MailChimp, or for critical support incidents something like PagerDuty.</source>
          <target state="new">This could be a request to a messaging system like Hipchat or Slack, or a mail API like SendGrid or MailChimp, or for critical support incidents something like PagerDuty.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>All of these messaging systems have simple HTTP APIs that we can easily invoke.</source>
          <target state="new">All of these messaging systems have simple HTTP APIs that we can easily invoke.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Alerting with Slack</source>
          <target state="new">Alerting with Slack</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to send a message to a Slack chat room if the HTTP response status code is greater than or equal to 500.</source>
          <target state="new">The following example demonstrates how to send a message to a Slack chat room if the HTTP response status code is greater than or equal to 500.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A 500 range error indicates a problem with our backend API that the client of our API cannot resolve themselves.</source>
          <target state="new">A 500 range error indicates a problem with our backend API that the client of our API cannot resolve themselves.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It usually requires some kind of intervention on our part.</source>
          <target state="new">It usually requires some kind of intervention on our part.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Slack has the notion of inbound web hooks.</source>
          <target state="new">Slack has the notion of inbound web hooks.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When configuring an inbound web hook, Slack generates a special URL which allows you to do a simple POST request and to pass a message into the Slack channel.</source>
          <target state="new">When configuring an inbound web hook, Slack generates a special URL which allows you to do a simple POST request and to pass a message into the Slack channel.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The JSON body that we create is based on a format defined by Slack.</source>
          <target state="new">The JSON body that we create is based on a format defined by Slack.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph5">![</ph>Slack Web Hook<ph id="ph6">](./media/api-management-sample-send-request/api-management-slack-webhook.png)</ph></source>
          <target state="new"><ph id="ph5">![</ph>Slack Web Hook<ph id="ph6">](./media/api-management-sample-send-request/api-management-slack-webhook.png)</ph></target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Is fire and forget good enough?</source>
          <target state="new">Is fire and forget good enough?</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There are certain tradeoffs when using a fire-and-forget style of request.</source>
          <target state="new">There are certain tradeoffs when using a fire-and-forget style of request.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If for some reason, the request fails, then the failure will not be reported.</source>
          <target state="new">If for some reason, the request fails, then the failure will not be reported.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this particular situation, the complexity of having a secondary failure reporting system and the additional performance cost of waiting for the response is not warranted.</source>
          <target state="new">In this particular situation, the complexity of having a secondary failure reporting system and the additional performance cost of waiting for the response is not warranted.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For scenarios where it is essential to check the response, then the <bpt id="p3">[</bpt>send-request<ept id="p3">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendRequest)</ept><ph id="ph7" /> policy is a better option.</source>
          <target state="new">For scenarios where it is essential to check the response, then the <bpt id="p3">[</bpt>send-request<ept id="p3">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendRequest)</ept><ph id="ph7" /> policy is a better option.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Send-Request</source>
          <target state="new">Send-Request</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph8">`send-request`</ph><ph id="ph9" /> policy enables using an external service to perform complex processing functions and return data to the API management service that can be used for further policy processing.</source>
          <target state="new">The <ph id="ph8">`send-request`</ph><ph id="ph9" /> policy enables using an external service to perform complex processing functions and return data to the API management service that can be used for further policy processing.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Authorizing reference tokens</source>
          <target state="new">Authorizing reference tokens</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A major function of API Management is protecting backend resources.</source>
          <target state="new">A major function of API Management is protecting backend resources.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the authorization server used by your API creates <bpt id="p4">[</bpt>JWT tokens<ept id="p4">](http://jwt.io/)</ept><ph id="ph10" /> as part of its OAuth2 flow, as <bpt id="p5">[</bpt>Azure Active Directory<ept id="p5">](../active-directory/active-directory-aadconnect.md)</ept><ph id="ph11" /> does, then you can use the <ph id="ph12">`validate-jwt`</ph><ph id="ph13" /> policy to verify the validity of the token.</source>
          <target state="new">If the authorization server used by your API creates <bpt id="p4">[</bpt>JWT tokens<ept id="p4">](http://jwt.io/)</ept><ph id="ph10" /> as part of its OAuth2 flow, as <bpt id="p5">[</bpt>Azure Active Directory<ept id="p5">](../active-directory/active-directory-aadconnect.md)</ept><ph id="ph11" /> does, then you can use the <ph id="ph12">`validate-jwt`</ph><ph id="ph13" /> policy to verify the validity of the token.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, some authorization servers create what are called <bpt id="p6">[</bpt>reference tokens<ept id="p6">](http://leastprivilege.com/2015/11/25/reference-tokens-and-introspection/)</ept><ph id="ph14" /> that cannot be verified without making a call back to the authorization server.</source>
          <target state="new">However, some authorization servers create what are called <bpt id="p6">[</bpt>reference tokens<ept id="p6">](http://leastprivilege.com/2015/11/25/reference-tokens-and-introspection/)</ept><ph id="ph14" /> that cannot be verified without making a call back to the authorization server.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Standardized introspection</source>
          <target state="new">Standardized introspection</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the past there has been no standardized way of verifying a reference token with an authorization server.</source>
          <target state="new">In the past there has been no standardized way of verifying a reference token with an authorization server.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However a recently proposed standard <bpt id="p7">[</bpt>RFC 7662<ept id="p7">](https://tools.ietf.org/html/rfc7662)</ept><ph id="ph15" /> was published by the IETF that defines how a resource server can verify the validity of a token.</source>
          <target state="new">However a recently proposed standard <bpt id="p7">[</bpt>RFC 7662<ept id="p7">](https://tools.ietf.org/html/rfc7662)</ept><ph id="ph15" /> was published by the IETF that defines how a resource server can verify the validity of a token.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Extracting the token</source>
          <target state="new">Extracting the token</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The first step is to extract the token from the Authorization header.</source>
          <target state="new">The first step is to extract the token from the Authorization header.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The header value should be formatted with the <ph id="ph16">`Bearer`</ph><ph id="ph17" /> authorization scheme, a single space and then the authorization token as per <bpt id="p8">[</bpt>RFC 6750<ept id="p8">](http://tools.ietf.org/html/rfc6750#section-2.1)</ept>.</source>
          <target state="new">The header value should be formatted with the <ph id="ph16">`Bearer`</ph><ph id="ph17" /> authorization scheme, a single space and then the authorization token as per <bpt id="p8">[</bpt>RFC 6750<ept id="p8">](http://tools.ietf.org/html/rfc6750#section-2.1)</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Unfortunately there are cases where the authorization scheme is omitted.</source>
          <target state="new">Unfortunately there are cases where the authorization scheme is omitted.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To account for this when parsing, we split the header value on a space and select the last string from the returned array of strings.</source>
          <target state="new">To account for this when parsing, we split the header value on a space and select the last string from the returned array of strings.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This provides a workaround for badly formatted authorization headers.</source>
          <target state="new">This provides a workaround for badly formatted authorization headers.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Making the validation request</source>
          <target state="new">Making the validation request</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Once we have the authorization token, we can make the request to validate the token.</source>
          <target state="new">Once we have the authorization token, we can make the request to validate the token.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>RFC 7662 calls this process introspection and requires that you <ph id="ph18">`POST`</ph><ph id="ph19" /> a HTML form to the introspection resource.</source>
          <target state="new">RFC 7662 calls this process introspection and requires that you <ph id="ph18">`POST`</ph><ph id="ph19" /> a HTML form to the introspection resource.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The HTML form must at least contain a key/value pair with the key <ph id="ph20">`token`</ph>.</source>
          <target state="new">The HTML form must at least contain a key/value pair with the key <ph id="ph20">`token`</ph>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This request to the authorization server must also be authenticated to ensure that malicious clients cannot go trawling for valid tokens.</source>
          <target state="new">This request to the authorization server must also be authenticated to ensure that malicious clients cannot go trawling for valid tokens.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Checking the response</source>
          <target state="new">Checking the response</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph21">`response-variable-name`</ph><ph id="ph22" /> attribute is used to give access the returned response.</source>
          <target state="new">The <ph id="ph21">`response-variable-name`</ph><ph id="ph22" /> attribute is used to give access the returned response.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The name defined in this property can be used as a key into the <ph id="ph23">`context.Variables`</ph><ph id="ph24" /> dictionary to access the <ph id="ph25">`IResponse`</ph><ph id="ph26" /> object.</source>
          <target state="new">The name defined in this property can be used as a key into the <ph id="ph23">`context.Variables`</ph><ph id="ph24" /> dictionary to access the <ph id="ph25">`IResponse`</ph><ph id="ph26" /> object.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>From the response object we can retrieve the body and RFC 7622 tells us that the response must be a JSON object and must contain at least a property called <ph id="ph27">`active`</ph><ph id="ph28" /> that is a boolean value.</source>
          <target state="new">From the response object we can retrieve the body and RFC 7622 tells us that the response must be a JSON object and must contain at least a property called <ph id="ph27">`active`</ph><ph id="ph28" /> that is a boolean value.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When <ph id="ph29">`active`</ph><ph id="ph30" /> is true then the token is considered valid.</source>
          <target state="new">When <ph id="ph29">`active`</ph><ph id="ph30" /> is true then the token is considered valid.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Reporting failure</source>
          <target state="new">Reporting failure</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>We use a <ph id="ph31">`&lt;choose&gt;`</ph><ph id="ph32" /> policy to detect if the token is invalid and if so, return a 401 response.</source>
          <target state="new">We use a <ph id="ph31">`&lt;choose&gt;`</ph><ph id="ph32" /> policy to detect if the token is invalid and if so, return a 401 response.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>As per <bpt id="p9">[</bpt>RFC 6750<ept id="p9">](https://tools.ietf.org/html/rfc6750#section-3)</ept><ph id="ph33" /> which describes how <ph id="ph34">`bearer`</ph><ph id="ph35" /> tokens should be used, we also return a <ph id="ph36">`WWW-Authenticate`</ph><ph id="ph37" /> header with the 401 response.</source>
          <target state="new">As per <bpt id="p9">[</bpt>RFC 6750<ept id="p9">](https://tools.ietf.org/html/rfc6750#section-3)</ept><ph id="ph33" /> which describes how <ph id="ph34">`bearer`</ph><ph id="ph35" /> tokens should be used, we also return a <ph id="ph36">`WWW-Authenticate`</ph><ph id="ph37" /> header with the 401 response.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The WWW-Authenticate is intended to instruct a client on how to construct a properly authorized request.</source>
          <target state="new">The WWW-Authenticate is intended to instruct a client on how to construct a properly authorized request.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Due to the wide variety of approaches possible with the OAuth2 framework, it is difficult to communicate all the needed information.</source>
          <target state="new">Due to the wide variety of approaches possible with the OAuth2 framework, it is difficult to communicate all the needed information.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Fortunately there are efforts underway to help <bpt id="p10">[</bpt>clients discover how to properly authorize requests to a resource server<ept id="p10">](http://tools.ietf.org/html/draft-jones-oauth-discovery-00)</ept>.</source>
          <target state="new">Fortunately there are efforts underway to help <bpt id="p10">[</bpt>clients discover how to properly authorize requests to a resource server<ept id="p10">](http://tools.ietf.org/html/draft-jones-oauth-discovery-00)</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Final solution</source>
          <target state="new">Final solution</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Putting all the pieces together, we get the following policy:</source>
          <target state="new">Putting all the pieces together, we get the following policy:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This is only one of many examples of how the <ph id="ph38">`send-request`</ph><ph id="ph39" /> policy can be used to integrate useful external services into the process of requests and responses flowing through the API Management service.</source>
          <target state="new">This is only one of many examples of how the <ph id="ph38">`send-request`</ph><ph id="ph39" /> policy can be used to integrate useful external services into the process of requests and responses flowing through the API Management service.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Response Composition</source>
          <target state="new">Response Composition</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph40">`send-request`</ph><ph id="ph41" /> policy can be used for enhancing a primary request to a backend system, as we saw in the previous example, or it can be used as a complete replace for of the backend call.</source>
          <target state="new">The <ph id="ph40">`send-request`</ph><ph id="ph41" /> policy can be used for enhancing a primary request to a backend system, as we saw in the previous example, or it can be used as a complete replace for of the backend call.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Using this technique we can easily create composite resources that are aggregated from multiple different systems.</source>
          <target state="new">Using this technique we can easily create composite resources that are aggregated from multiple different systems.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Building a dashboard</source>
          <target state="new">Building a dashboard</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sometimes you want to be able to expose information that exists in multiple backend systems, for example, to drive a dashboard.</source>
          <target state="new">Sometimes you want to be able to expose information that exists in multiple backend systems, for example, to drive a dashboard.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The KPIs come from all different back-ends, but you would prefer not to provide direct access to them and it would be nice if all the information could be retrieved in a single request.</source>
          <target state="new">The KPIs come from all different back-ends, but you would prefer not to provide direct access to them and it would be nice if all the information could be retrieved in a single request.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Perhaps some of the backend information needs some slicing and dicing and a little sanitizing first!</source>
          <target state="new">Perhaps some of the backend information needs some slicing and dicing and a little sanitizing first!</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Being able to cache that composite resource would be a useful to reduce the backend load as you know users have a habit of hammering the F5 key in order to see if their underperforming metrics might change.</source>
          <target state="new">Being able to cache that composite resource would be a useful to reduce the backend load as you know users have a habit of hammering the F5 key in order to see if their underperforming metrics might change.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Faking the resource</source>
          <target state="new">Faking the resource</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The first step to building our dashboard resource is to configure a new operation in the API Management publisher portal.</source>
          <target state="new">The first step to building our dashboard resource is to configure a new operation in the API Management publisher portal.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This will be a placeholder operation used to configure our composition policy to build our dynamic resource.</source>
          <target state="new">This will be a placeholder operation used to configure our composition policy to build our dynamic resource.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph42">![</ph>Dashboard operation<ph id="ph43">](./media/api-management-sample-send-request/api-management-dashboard-operation.png)</ph></source>
          <target state="new"><ph id="ph42">![</ph>Dashboard operation<ph id="ph43">](./media/api-management-sample-send-request/api-management-dashboard-operation.png)</ph></target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Making the requests</source>
          <target state="new">Making the requests</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Once the <ph id="ph44">`dashboard`</ph><ph id="ph45" /> operation has been created we can configure a policy specifically for that operation.</source>
          <target state="new">Once the <ph id="ph44">`dashboard`</ph><ph id="ph45" /> operation has been created we can configure a policy specifically for that operation.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph46">![</ph>Dashboard operation<ph id="ph47">](./media/api-management-sample-send-request/api-management-dashboard-policy.png)</ph></source>
          <target state="new"><ph id="ph46">![</ph>Dashboard operation<ph id="ph47">](./media/api-management-sample-send-request/api-management-dashboard-policy.png)</ph></target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The first step  is to extract any query parameters from the incoming request, so that we can forward them to our backend.</source>
          <target state="new">The first step  is to extract any query parameters from the incoming request, so that we can forward them to our backend.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In this example our dashboard is showing information based on a period of time an therefore has a <ph id="ph48">`fromDate`</ph><ph id="ph49" /> and <ph id="ph50">`toDate`</ph><ph id="ph51" /> parameter.</source>
          <target state="new">In this example our dashboard is showing information based on a period of time an therefore has a <ph id="ph48">`fromDate`</ph><ph id="ph49" /> and <ph id="ph50">`toDate`</ph><ph id="ph51" /> parameter.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>We can use the <ph id="ph52">`set-variable`</ph><ph id="ph53" /> policy to extract the information from the request URL.</source>
          <target state="new">We can use the <ph id="ph52">`set-variable`</ph><ph id="ph53" /> policy to extract the information from the request URL.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Once we have this information we can make requests to all the backend systems.</source>
          <target state="new">Once we have this information we can make requests to all the backend systems.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Each request constructs a new URL with the parameter information and calls its respective server and stores the response in a context variable.</source>
          <target state="new">Each request constructs a new URL with the parameter information and calls its respective server and stores the response in a context variable.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>These requests will execute in sequence, which is not ideal.</source>
          <target state="new">These requests will execute in sequence, which is not ideal.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In an upcoming release we will be introducing a new policy called <ph id="ph54">`wait`</ph><ph id="ph55" /> that will enable all of these requests to execute in parallel.</source>
          <target state="new">In an upcoming release we will be introducing a new policy called <ph id="ph54">`wait`</ph><ph id="ph55" /> that will enable all of these requests to execute in parallel.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Responding</source>
          <target state="new">Responding</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To construct the composite response we can use the <bpt id="p11">[</bpt>return-response<ept id="p11">](https://msdn.microsoft.com/library/azure/dn894085.aspx#ReturnResponse)</ept><ph id="ph56" /> policy.</source>
          <target state="new">To construct the composite response we can use the <bpt id="p11">[</bpt>return-response<ept id="p11">](https://msdn.microsoft.com/library/azure/dn894085.aspx#ReturnResponse)</ept><ph id="ph56" /> policy.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph57">`set-body`</ph><ph id="ph58" /> element can use an expression to construct a new <ph id="ph59">`JObject`</ph><ph id="ph60" /> with all the component representations embedded as properties.</source>
          <target state="new">The <ph id="ph57">`set-body`</ph><ph id="ph58" /> element can use an expression to construct a new <ph id="ph59">`JObject`</ph><ph id="ph60" /> with all the component representations embedded as properties.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The complete policy looks as follows:</source>
          <target state="new">The complete policy looks as follows:</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the configuration of the placeholder operation we can configure the dashboard resource to be cached for at least an hour because we understand the nature of the data means that even if it is an hour out of date, it will still be sufficiently effective to convey valuable information to the users.</source>
          <target state="new">In the configuration of the placeholder operation we can configure the dashboard resource to be cached for at least an hour because we understand the nature of the data means that even if it is an hour out of date, it will still be sufficiently effective to convey valuable information to the users.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Azure API Management service provides flexible policies that can be selectively applied to HTTP traffic and enables composition of backend services.</source>
          <target state="new">Azure API Management service provides flexible policies that can be selectively applied to HTTP traffic and enables composition of backend services.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Whether you want to enhance your API gateway with alerting functions, verification, validation capabilities or create new composite resources based on multiple backend services, the <ph id="ph61">`send-request`</ph><ph id="ph62" /> and related policies open a world of possibilities.</source>
          <target state="new">Whether you want to enhance your API gateway with alerting functions, verification, validation capabilities or create new composite resources based on multiple backend services, the <ph id="ph61">`send-request`</ph><ph id="ph62" /> and related policies open a world of possibilities.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Watch a video overview of these policies</source>
          <target state="new">Watch a video overview of these policies</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information on the <bpt id="p12">[</bpt>send-one-way-request<ept id="p12">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendOneWayRequest)</ept>, <bpt id="p13">[</bpt>send-request<ept id="p13">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendRequest)</ept>, and <bpt id="p14">[</bpt>return-response<ept id="p14">](https://msdn.microsoft.com/library/azure/dn894085.aspx#ReturnResponse)</ept><ph id="ph63" /> policies covered in this article, please watch the following video.</source>
          <target state="new">For more information on the <bpt id="p12">[</bpt>send-one-way-request<ept id="p12">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendOneWayRequest)</ept>, <bpt id="p13">[</bpt>send-request<ept id="p13">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendRequest)</ept>, and <bpt id="p14">[</bpt>return-response<ept id="p14">](https://msdn.microsoft.com/library/azure/dn894085.aspx#ReturnResponse)</ept><ph id="ph63" /> policies covered in this article, please watch the following video.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0efb37296649e6338ea575c64ccff1211e4a4cf</xliffext:olfilehash>
  </header>
</xliff>