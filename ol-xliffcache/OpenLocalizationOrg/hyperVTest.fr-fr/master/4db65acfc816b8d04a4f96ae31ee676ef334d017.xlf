<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Custom caching in Azure API Management</source>
          <target state="new">Custom caching in Azure API Management</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to cache items by key in Azure API Management</source>
          <target state="new">Learn how to cache items by key in Azure API Management</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom caching in Azure API Management</source>
          <target state="new">Custom caching in Azure API Management</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure API Management service has built-in support for <bpt id="p1">[</bpt>HTTP response caching<ept id="p1">](api-management-howto-cache.md)</ept><ph id="ph2" /> using the resource URL as the key.</source>
          <target state="new">Azure API Management service has built-in support for <bpt id="p1">[</bpt>HTTP response caching<ept id="p1">](api-management-howto-cache.md)</ept><ph id="ph2" /> using the resource URL as the key.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The key can be modified by request headers using the <ph id="ph3">`vary-by`</ph><ph id="ph4" /> properties.</source>
          <target state="new">The key can be modified by request headers using the <ph id="ph3">`vary-by`</ph><ph id="ph4" /> properties.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This is useful for caching entire HTTP responses (aka representations), but sometimes it is useful to just cache a portion of a representation.</source>
          <target state="new">This is useful for caching entire HTTP responses (aka representations), but sometimes it is useful to just cache a portion of a representation.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The new <bpt id="p2">[</bpt>cache-lookup-value<ept id="p2">](https://msdn.microsoft.com/library/azure/dn894086.aspx#GetFromCacheByKey)</ept><ph id="ph5" /> and <bpt id="p3">[</bpt>cache-store-value<ept id="p3">](https://msdn.microsoft.com/library/azure/dn894086.aspx#StoreToCacheByKey)</ept><ph id="ph6" /> policies provide the ability to store and retrieve arbitrary pieces of data from within policy definitions.</source>
          <target state="new">The new <bpt id="p2">[</bpt>cache-lookup-value<ept id="p2">](https://msdn.microsoft.com/library/azure/dn894086.aspx#GetFromCacheByKey)</ept><ph id="ph5" /> and <bpt id="p3">[</bpt>cache-store-value<ept id="p3">](https://msdn.microsoft.com/library/azure/dn894086.aspx#StoreToCacheByKey)</ept><ph id="ph6" /> policies provide the ability to store and retrieve arbitrary pieces of data from within policy definitions.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This ability also adds value to the previously introduced <bpt id="p4">[</bpt>send-request<ept id="p4">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendRequest)</ept><ph id="ph7" /> policy because you can now cache responses from external services.</source>
          <target state="new">This ability also adds value to the previously introduced <bpt id="p4">[</bpt>send-request<ept id="p4">](https://msdn.microsoft.com/library/azure/dn894085.aspx#SendRequest)</ept><ph id="ph7" /> policy because you can now cache responses from external services.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Architecture</source>
          <target state="new">Architecture</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>API Management service uses a shared per-tenant data cache so that, as you scale up to multiple units you will still get access to the same cached data.</source>
          <target state="new">API Management service uses a shared per-tenant data cache so that, as you scale up to multiple units you will still get access to the same cached data.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, when working with a multi-region deployment there are independent caches within each of the regions.</source>
          <target state="new">However, when working with a multi-region deployment there are independent caches within each of the regions.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Due to this, it is important to not treat the cache as a data store, where it is the only source of some piece of information.</source>
          <target state="new">Due to this, it is important to not treat the cache as a data store, where it is the only source of some piece of information.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you did, and later decided to take advantage of the multi-region deployment, then customers with users that travel may lose access to that cached data.</source>
          <target state="new">If you did, and later decided to take advantage of the multi-region deployment, then customers with users that travel may lose access to that cached data.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Fragment caching</source>
          <target state="new">Fragment caching</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are certain cases where responses being returned contain some portion of data that is expensive to determine and yet remains fresh for a reasonable amount of time.</source>
          <target state="new">There are certain cases where responses being returned contain some portion of data that is expensive to determine and yet remains fresh for a reasonable amount of time.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As an example, consider a service built by an airline that provides information relating flight reservations, flight status, etc. If the user is a member of the airlines points program, they would also have information relating to their current status and mileage accumulated.</source>
          <target state="new">As an example, consider a service built by an airline that provides information relating flight reservations, flight status, etc. If the user is a member of the airlines points program, they would also have information relating to their current status and mileage accumulated.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This user-related information might be stored in a different system, but it may be desirable to include it in responses returned about flight status and reservations.</source>
          <target state="new">This user-related information might be stored in a different system, but it may be desirable to include it in responses returned about flight status and reservations.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This can be done using a process called fragment caching.</source>
          <target state="new">This can be done using a process called fragment caching.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The primary representation can be returned from the origin server using some kind of token to indicate where the user-related information is to be inserted.</source>
          <target state="new">The primary representation can be returned from the origin server using some kind of token to indicate where the user-related information is to be inserted.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Consider the following JSON response from a backend API.</source>
          <target state="new">Consider the following JSON response from a backend API.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>And secondary resource at <ph id="ph8">`/userprofile/{userid}`</ph><ph id="ph9" /> that looks like,</source>
          <target state="new">And secondary resource at <ph id="ph8">`/userprofile/{userid}`</ph><ph id="ph9" /> that looks like,</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In order to determine the appropriate user information to include, we need to identify who the end user is.</source>
          <target state="new">In order to determine the appropriate user information to include, we need to identify who the end user is.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This mechanism is implementation dependent.</source>
          <target state="new">This mechanism is implementation dependent.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As an example, I am using the <ph id="ph10">`Subject`</ph><ph id="ph11" /> claim of a <ph id="ph12">`JWT`</ph><ph id="ph13" /> token.</source>
          <target state="new">As an example, I am using the <ph id="ph10">`Subject`</ph><ph id="ph11" /> claim of a <ph id="ph12">`JWT`</ph><ph id="ph13" /> token.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>We store this <ph id="ph14">`enduserid`</ph><ph id="ph15" /> value in a context variable for later use.</source>
          <target state="new">We store this <ph id="ph14">`enduserid`</ph><ph id="ph15" /> value in a context variable for later use.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The next step is to determine if a previous request has already retrieved the user information and stored it in the cache.</source>
          <target state="new">The next step is to determine if a previous request has already retrieved the user information and stored it in the cache.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For this we use the <ph id="ph16">`cache-lookup-value`</ph><ph id="ph17" /> policy.</source>
          <target state="new">For this we use the <ph id="ph16">`cache-lookup-value`</ph><ph id="ph17" /> policy.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If there is no entry in the cache that corresponds to the key value, then no <ph id="ph18">`userprofile`</ph><ph id="ph19" /> context variable will be created.</source>
          <target state="new">If there is no entry in the cache that corresponds to the key value, then no <ph id="ph18">`userprofile`</ph><ph id="ph19" /> context variable will be created.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We check the success of the lookup using the <ph id="ph20">`choose`</ph><ph id="ph21" /> control flow policy.</source>
          <target state="new">We check the success of the lookup using the <ph id="ph20">`choose`</ph><ph id="ph21" /> control flow policy.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph22">`userprofile`</ph><ph id="ph23" /> context variable doesn’t exist, then we are going to have to make an HTTP request to retrieve it.</source>
          <target state="new">If the <ph id="ph22">`userprofile`</ph><ph id="ph23" /> context variable doesn’t exist, then we are going to have to make an HTTP request to retrieve it.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We use the <ph id="ph24">`enduserid`</ph><ph id="ph25" /> to construct the URL to the user profile resource.</source>
          <target state="new">We use the <ph id="ph24">`enduserid`</ph><ph id="ph25" /> to construct the URL to the user profile resource.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once we have the response, we can pull the body text out of the response and store it back into a context variable.</source>
          <target state="new">Once we have the response, we can pull the body text out of the response and store it back into a context variable.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To avoid us having to make this HTTP request again, when the same user makes another request, we can store the user profile in the cache.</source>
          <target state="new">To avoid us having to make this HTTP request again, when the same user makes another request, we can store the user profile in the cache.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>We store the value in the cache using the exact same key that we originally attempted to retrieve it with.</source>
          <target state="new">We store the value in the cache using the exact same key that we originally attempted to retrieve it with.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The duration that we choose to store the value should be based on how often the information changes and how tolerant users are to out of date information.</source>
          <target state="new">The duration that we choose to store the value should be based on how often the information changes and how tolerant users are to out of date information.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It is important to realize that retrieving from the cache is still an out-of-process, network request and potentially can still add tens of milliseconds to the request.</source>
          <target state="new">It is important to realize that retrieving from the cache is still an out-of-process, network request and potentially can still add tens of milliseconds to the request.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The benefits come when determining the user profile information takes significantly longer than that due to needing to do database queries or aggregate information from multiple back-ends.</source>
          <target state="new">The benefits come when determining the user profile information takes significantly longer than that due to needing to do database queries or aggregate information from multiple back-ends.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The final step in the process is to update the returned response with our user profile information.</source>
          <target state="new">The final step in the process is to update the returned response with our user profile information.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>I chose to include the quotation marks as part of the token so that even when the replace doesn’t occur, the response was still valid JSON.</source>
          <target state="new">I chose to include the quotation marks as part of the token so that even when the replace doesn’t occur, the response was still valid JSON.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This was primarily to make debugging easier.</source>
          <target state="new">This was primarily to make debugging easier.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Once you combine all these steps together, the end result is a policy that looks like the following one.</source>
          <target state="new">Once you combine all these steps together, the end result is a policy that looks like the following one.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This caching approach is primarily used in web sites where HTML is composed on the server side so that it can be rendered as a single page.</source>
          <target state="new">This caching approach is primarily used in web sites where HTML is composed on the server side so that it can be rendered as a single page.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, it can also be useful in APIs where clients cannot do client side HTTP caching or it is desirable not to put that responsibility on the client.</source>
          <target state="new">However, it can also be useful in APIs where clients cannot do client side HTTP caching or it is desirable not to put that responsibility on the client.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This same kind of fragment caching can also be done on the backend web servers using a Redis caching server, however, using the API Management service to perform this work is useful when the cached fragments are coming from different back-ends than the primary responses.</source>
          <target state="new">This same kind of fragment caching can also be done on the backend web servers using a Redis caching server, however, using the API Management service to perform this work is useful when the cached fragments are coming from different back-ends than the primary responses.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Transparent versioning</source>
          <target state="new">Transparent versioning</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It is common practice for multiple different implementation versions of an API to be supported at any one time.</source>
          <target state="new">It is common practice for multiple different implementation versions of an API to be supported at any one time.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is perhaps to support different environments, like dev, test, production, etc, or it may be to support older versions of the API to give time for API consumers to migrate to newer versions.</source>
          <target state="new">This is perhaps to support different environments, like dev, test, production, etc, or it may be to support older versions of the API to give time for API consumers to migrate to newer versions.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>One approach to handling this instead of requiring client developers to change the URLs from <ph id="ph26">`/v1/customers`</ph><ph id="ph27" /> to <ph id="ph28">`/v2/customers`</ph><ph id="ph29" /> is to store in the consumer’s profile data which version of the API they currently wish to use and call the appropriate backend URL.</source>
          <target state="new">One approach to handling this instead of requiring client developers to change the URLs from <ph id="ph26">`/v1/customers`</ph><ph id="ph27" /> to <ph id="ph28">`/v2/customers`</ph><ph id="ph29" /> is to store in the consumer’s profile data which version of the API they currently wish to use and call the appropriate backend URL.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In order to determine the correct backend URL to call for a particular client, it is necessary to query some configuration data.</source>
          <target state="new">In order to determine the correct backend URL to call for a particular client, it is necessary to query some configuration data.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>By caching this configuration data, we can minimize the performance penalty of doing this lookup.</source>
          <target state="new">By caching this configuration data, we can minimize the performance penalty of doing this lookup.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The first step is to determine the identifier used to configure the desired version.</source>
          <target state="new">The first step is to determine the identifier used to configure the desired version.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this example, I chose to associate the version to the product subscription key.</source>
          <target state="new">In this example, I chose to associate the version to the product subscription key.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>We then do a cache lookup to see if we already have retrieved the desired client version.</source>
          <target state="new">We then do a cache lookup to see if we already have retrieved the desired client version.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Then we check to see if we did not find it in the cache.</source>
          <target state="new">Then we check to see if we did not find it in the cache.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If we didn’t then we go and retrieve it.</source>
          <target state="new">If we didn’t then we go and retrieve it.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Extract the response body text from the response.</source>
          <target state="new">Extract the response body text from the response.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Store it back in the cache for future use.</source>
          <target state="new">Store it back in the cache for future use.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>And finally update the back-end URL to select the version of the service desired by the client.</source>
          <target state="new">And finally update the back-end URL to select the version of the service desired by the client.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The completely policy is as follows.</source>
          <target state="new">The completely policy is as follows.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Enabling API consumers to transparently control which backend version is being accessed by clients without having to update and redeploy clients is a elegant solution that addresses many API versioning concerns.</source>
          <target state="new">Enabling API consumers to transparently control which backend version is being accessed by clients without having to update and redeploy clients is a elegant solution that addresses many API versioning concerns.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Tenant Isolation</source>
          <target state="new">Tenant Isolation</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In larger, multi-tenant deployments some companies create separate groups of tenants on distinct deployments of backend hardware.</source>
          <target state="new">In larger, multi-tenant deployments some companies create separate groups of tenants on distinct deployments of backend hardware.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This minimizes the number of customers who are impacted by a hardware issue on the backend.</source>
          <target state="new">This minimizes the number of customers who are impacted by a hardware issue on the backend.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It also enables new software versions to be rolled out in stages.</source>
          <target state="new">It also enables new software versions to be rolled out in stages.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Ideally this backend architecture should be transparent to API consumers.</source>
          <target state="new">Ideally this backend architecture should be transparent to API consumers.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This can be achieved in a similar way to transparent versioning because it is based on the same technique of manipulating the backend URL using configuration state per API key.</source>
          <target state="new">This can be achieved in a similar way to transparent versioning because it is based on the same technique of manipulating the backend URL using configuration state per API key.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Instead of returning a preferred version of the API for each subscription key, you would return an identifier that relates a tenant to the assigned hardware group.</source>
          <target state="new">Instead of returning a preferred version of the API for each subscription key, you would return an identifier that relates a tenant to the assigned hardware group.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>That identifier can be used to construct the appropriate backend URL.</source>
          <target state="new">That identifier can be used to construct the appropriate backend URL.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The freedom to use the Azure API management cache for storing any kind of data enables efficient access to configuration data that can affect the way an inbound request is processed.</source>
          <target state="new">The freedom to use the Azure API management cache for storing any kind of data enables efficient access to configuration data that can affect the way an inbound request is processed.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It can also be used to store data fragments that can augment responses, returned from a backend API.</source>
          <target state="new">It can also be used to store data fragments that can augment responses, returned from a backend API.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Please give us your feedback in the Disqus thread for this topic if there are other scenarios that these policies have enabled for you, or if there are scenarios you would like to achieve but do not feel are currently possible.</source>
          <target state="new">Please give us your feedback in the Disqus thread for this topic if there are other scenarios that these policies have enabled for you, or if there are scenarios you would like to achieve but do not feel are currently possible.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4db65acfc816b8d04a4f96ae31ee676ef334d017</xliffext:olfilehash>
  </header>
</xliff>