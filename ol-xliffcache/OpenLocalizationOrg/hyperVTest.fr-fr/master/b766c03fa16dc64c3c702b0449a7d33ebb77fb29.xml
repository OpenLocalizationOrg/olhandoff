{
  "nodes": [
    {
      "pos": [
        27,
        82
      ],
      "content": "Working with the Mobile Services Android Client Library"
    },
    {
      "pos": [
        101,
        162
      ],
      "content": "Learn how to use an Android client for Azure Mobile Services."
    },
    {
      "pos": [
        491,
        548
      ],
      "content": "How to use the Android client library for Mobile Services"
    },
    {
      "pos": [
        653,
        659
      ],
      "content": "&amp;nbsp;"
    },
    {
      "pos": [
        779,
        1040
      ],
      "content": "This guide shows you how to perform common scenarios using the Android client for Azure Mobile Services.  The scenarios covered include querying for data; inserting, updating, and deleting data, authenticating users, handling errors, and customizing the client.",
      "nodes": [
        {
          "content": "This guide shows you how to perform common scenarios using the Android client for Azure Mobile Services.",
          "pos": [
            0,
            104
          ]
        },
        {
          "content": "The scenarios covered include querying for data; inserting, updating, and deleting data, authenticating users, handling errors, and customizing the client.",
          "pos": [
            106,
            261
          ]
        }
      ]
    },
    {
      "pos": [
        1042,
        1478
      ],
      "content": "If you are new to Mobile Services, you should first complete the quickstart tutorial [Get started with Mobile Services]. Successfully completing that tutorial ensures that you will have  installed Android Studio; it will help you configure your account and create your first mobile service, and install the Mobile Services SDK, which supports Android version 2.2 or later, but we recommend building against Android version 4.2 or later.",
      "nodes": [
        {
          "content": "If you are new to Mobile Services, you should first complete the quickstart tutorial [Get started with Mobile Services].",
          "pos": [
            0,
            120
          ]
        },
        {
          "content": "Successfully completing that tutorial ensures that you will have  installed Android Studio; it will help you configure your account and create your first mobile service, and install the Mobile Services SDK, which supports Android version 2.2 or later, but we recommend building against Android version 4.2 or later.",
          "pos": [
            121,
            436
          ]
        }
      ]
    },
    {
      "pos": [
        1480,
        1607
      ],
      "content": "You can find the Javadocs API reference for the Android client library <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=298735)</ept>."
    },
    {
      "pos": [
        1697,
        1699
      ],
      "content": "##"
    },
    {
      "pos": [
        1719,
        1742
      ],
      "content": "Setup and Prerequisites"
    },
    {
      "pos": [
        1744,
        2009
      ],
      "content": "We assume that you have created a mobile service and a table. For more information see <bpt id=\"p2\">[</bpt>Create a table<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?LinkId=298592)</ept>. In the code used in this topic, we assume the table is named <bpt id=\"p3\">*</bpt>ToDoItem<ept id=\"p3\">*</ept>, and that it has the following columns:",
      "nodes": [
        {
          "content": "We assume that you have created a mobile service and a table.",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "For more information see <bpt id=\"p2\">[</bpt>Create a table<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?LinkId=298592)</ept>.",
          "pos": [
            62,
            191
          ]
        },
        {
          "content": "In the code used in this topic, we assume the table is named <bpt id=\"p3\">*</bpt>ToDoItem<ept id=\"p3\">*</ept>, and that it has the following columns:",
          "pos": [
            192,
            341
          ]
        }
      ]
    },
    {
      "pos": [
        2013,
        2015
      ],
      "content": "id"
    },
    {
      "pos": [
        2018,
        2022
      ],
      "content": "text"
    },
    {
      "pos": [
        2025,
        2033
      ],
      "content": "complete"
    },
    {
      "pos": [
        2035,
        2095
      ],
      "content": "The corresponding typed client side object is the following:"
    },
    {
      "pos": [
        2222,
        2457
      ],
      "content": "When dynamic schema is enabled, Azure Mobile Services automatically generates new columns based on the object in the insert or update request. For more information, see <bpt id=\"p4\">[</bpt>Dynamic schema<ept id=\"p4\">](http://go.microsoft.com/fwlink/p/?LinkId=296271)</ept>.",
      "nodes": [
        {
          "content": "When dynamic schema is enabled, Azure Mobile Services automatically generates new columns based on the object in the insert or update request.",
          "pos": [
            0,
            142
          ]
        },
        {
          "content": "For more information, see <bpt id=\"p4\">[</bpt>Dynamic schema<ept id=\"p4\">](http://go.microsoft.com/fwlink/p/?LinkId=296271)</ept>.",
          "pos": [
            143,
            273
          ]
        }
      ]
    },
    {
      "pos": [
        2459,
        2885
      ],
      "content": "##<ph id=\"ph5\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph6\">&lt;/a&gt;</ph>How to: Create the Mobile Services client\nThe following code creates the <bpt id=\"p5\">[</bpt>MobileServiceClient<ept id=\"p5\">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept><ph id=\"ph7\"/> object that is used to access your mobile service. The code goes in the <ph id=\"ph8\">`onCreate`</ph><ph id=\"ph9\"/> method of the Activity class specified in <bpt id=\"p6\">*</bpt>AndroidManifest.xml<ept id=\"p6\">*</ept><ph id=\"ph10\"/> as a <bpt id=\"p7\">**</bpt>MAIN<ept id=\"p7\">**</ept><ph id=\"ph11\"/> action and <bpt id=\"p8\">**</bpt>LAUNCHER<ept id=\"p8\">**</ept><ph id=\"ph12\"/> category.",
      "nodes": [
        {
          "content": "<ph id=\"ph5\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph6\">&lt;/a&gt;</ph>How to: Create the Mobile Services client\nThe following code creates the <bpt id=\"p5\">[</bpt>MobileServiceClient<ept id=\"p5\">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept><ph id=\"ph7\"/> object that is used to access your mobile service.",
          "pos": [
            2,
            382
          ]
        },
        {
          "content": "The code goes in the <ph id=\"ph8\">`onCreate`</ph><ph id=\"ph9\"/> method of the Activity class specified in <bpt id=\"p6\">*</bpt>AndroidManifest.xml<ept id=\"p6\">*</ept><ph id=\"ph10\"/> as a <bpt id=\"p7\">**</bpt>MAIN<ept id=\"p7\">**</ept><ph id=\"ph11\"/> action and <bpt id=\"p8\">**</bpt>LAUNCHER<ept id=\"p8\">**</ept><ph id=\"ph12\"/> category.",
          "pos": [
            383,
            717
          ]
        }
      ]
    },
    {
      "pos": [
        3116,
        3362
      ],
      "content": "In the code above, replace <ph id=\"ph13\">`MobileServiceUrl`</ph><ph id=\"ph14\"/> and <ph id=\"ph15\">`AppKey`</ph><ph id=\"ph16\"/> with the mobile service URL and application key, in that order. Both of these are available on the Azure classic portal, by selecting your mobile service and then clicking on <bpt id=\"p9\">*</bpt>Dashboard<ept id=\"p9\">*</ept>.",
      "nodes": [
        {
          "content": "In the code above, replace <ph id=\"ph13\">`MobileServiceUrl`</ph><ph id=\"ph14\"/> and <ph id=\"ph15\">`AppKey`</ph><ph id=\"ph16\"/> with the mobile service URL and application key, in that order.",
          "pos": [
            0,
            190
          ]
        },
        {
          "content": "Both of these are available on the Azure classic portal, by selecting your mobile service and then clicking on <bpt id=\"p9\">*</bpt>Dashboard<ept id=\"p9\">*</ept>.",
          "pos": [
            191,
            352
          ]
        }
      ]
    },
    {
      "pos": [
        3364,
        3366
      ],
      "content": "##"
    },
    {
      "pos": [
        3394,
        3426
      ],
      "content": "How to: Create a table reference"
    },
    {
      "pos": [
        3428,
        3899
      ],
      "content": "The easiest way to query or modify data in the mobile service is by using the <bpt id=\"p10\">*</bpt>typed programming model<ept id=\"p10\">*</ept>, since Java is a strongly typed language (later on we will discuss the <bpt id=\"p11\">*</bpt>untyped<ept id=\"p11\">*</ept><ph id=\"ph17\"/> model). This model provides seamless serialization and deserialization to JSON using the <bpt id=\"p12\">[</bpt>gson<ept id=\"p12\">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept><ph id=\"ph18\"/> library when sending data between the client and the mobile service: the developer doesn't have to do anything, the framework handles it all.",
      "nodes": [
        {
          "content": "The easiest way to query or modify data in the mobile service is by using the <bpt id=\"p10\">*</bpt>typed programming model<ept id=\"p10\">*</ept>, since Java is a strongly typed language (later on we will discuss the <bpt id=\"p11\">*</bpt>untyped<ept id=\"p11\">*</ept><ph id=\"ph17\"/> model).",
          "pos": [
            0,
            287
          ]
        },
        {
          "content": "This model provides seamless serialization and deserialization to JSON using the <bpt id=\"p12\">[</bpt>gson<ept id=\"p12\">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept><ph id=\"ph18\"/> library when sending data between the client and the mobile service: the developer doesn't have to do anything, the framework handles it all.",
          "pos": [
            288,
            621
          ]
        }
      ]
    },
    {
      "pos": [
        3901,
        4262
      ],
      "content": "The first thing you do to query or modify data is to create a <bpt id=\"p13\">[</bpt>MobileServiceTable<ept id=\"p13\">](http://go.microsoft.com/fwlink/p/?LinkId=296835)</ept><ph id=\"ph19\"/> object by calling the <bpt id=\"p14\">**</bpt>getTable<ept id=\"p14\">**</ept><ph id=\"ph20\"/> method on the <bpt id=\"p15\">[</bpt><bpt id=\"p16\">**</bpt>MobileServiceClient<ept id=\"p16\">**</ept><ept id=\"p15\">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept>.  We will look at two overloads of this method:",
      "nodes": [
        {
          "content": "The first thing you do to query or modify data is to create a <bpt id=\"p13\">[</bpt>MobileServiceTable<ept id=\"p13\">](http://go.microsoft.com/fwlink/p/?LinkId=296835)</ept><ph id=\"ph19\"/> object by calling the <bpt id=\"p14\">**</bpt>getTable<ept id=\"p14\">**</ept><ph id=\"ph20\"/> method on the <bpt id=\"p15\">[</bpt><bpt id=\"p16\">**</bpt>MobileServiceClient<ept id=\"p16\">**</ept><ept id=\"p15\">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept>.",
          "pos": [
            0,
            504
          ]
        },
        {
          "content": "We will look at two overloads of this method:",
          "pos": [
            506,
            551
          ]
        }
      ]
    },
    {
      "pos": [
        4457,
        4535
      ],
      "content": "In the following code, <bpt id=\"p17\">*</bpt>mClient<ept id=\"p17\">*</ept><ph id=\"ph21\"/> is a reference to your mobile service client."
    },
    {
      "pos": [
        4537,
        4668
      ],
      "content": "The <bpt id=\"p18\">[</bpt>first overload<ept id=\"p18\">](http://go.microsoft.com/fwlink/p/?LinkId=296839)</ept><ph id=\"ph22\"/> is used where the class name and the table name are the same:"
    },
    {
      "pos": [
        4756,
        4884
      ],
      "content": "The <bpt id=\"p19\">[</bpt>2nd overload<ept id=\"p19\">](http://go.microsoft.com/fwlink/p/?LinkId=296840)</ept><ph id=\"ph23\"/> is used when the table name is different from the type name."
    },
    {
      "pos": [
        5010,
        5027
      ],
      "content": "The API structure"
    },
    {
      "pos": [
        5029,
        5542
      ],
      "content": "Since version 2.0 of the client library, mobile services table operations use the <bpt id=\"p20\">[</bpt>Future<ept id=\"p20\">](http://developer.android.com/reference/java/util/concurrent/Future.html)</ept><ph id=\"ph24\"/> and <bpt id=\"p21\">[</bpt>AsyncTask<ept id=\"p21\">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept><ph id=\"ph25\"/> objects in all of the asynchronous operations such as methods involving queries and operations like inserts, updates and deletes. This makes it easier to perform multiple operations (while on a background thread) without having to deal with multiple nested callbacks.",
      "nodes": [
        {
          "content": "Since version 2.0 of the client library, mobile services table operations use the <bpt id=\"p20\">[</bpt>Future<ept id=\"p20\">](http://developer.android.com/reference/java/util/concurrent/Future.html)</ept><ph id=\"ph24\"/> and <bpt id=\"p21\">[</bpt>AsyncTask<ept id=\"p21\">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept><ph id=\"ph25\"/> objects in all of the asynchronous operations such as methods involving queries and operations like inserts, updates and deletes.",
          "pos": [
            0,
            485
          ]
        },
        {
          "content": "This makes it easier to perform multiple operations (while on a background thread) without having to deal with multiple nested callbacks.",
          "pos": [
            486,
            623
          ]
        }
      ]
    },
    {
      "pos": [
        5545,
        5547
      ],
      "content": "##"
    },
    {
      "pos": [
        5570,
        5610
      ],
      "content": "How to: Query data from a mobile service"
    },
    {
      "pos": [
        5612,
        5826
      ],
      "content": "This section describes how to issue queries to the mobile service. Subsections describe diffent aspects such as sorting, filtering, and paging. Finally, we discuss how you can concatenate these operations together.",
      "nodes": [
        {
          "content": "This section describes how to issue queries to the mobile service.",
          "pos": [
            0,
            66
          ]
        },
        {
          "content": "Subsections describe diffent aspects such as sorting, filtering, and paging.",
          "pos": [
            67,
            143
          ]
        },
        {
          "content": "Finally, we discuss how you can concatenate these operations together.",
          "pos": [
            144,
            214
          ]
        }
      ]
    },
    {
      "pos": [
        5854,
        5891
      ],
      "content": "How to: Return all Items from a Table"
    },
    {
      "pos": [
        5893,
        6115
      ],
      "content": "The following code returns all items in the <bpt id=\"p22\">*</bpt>ToDoItem<ept id=\"p22\">*</ept><ph id=\"ph26\"/> table. It displays them in the UI by adding the items to an adapter. This code is similar to what is in the the quickstart tutorial [Get started with Mobile Services].",
      "nodes": [
        {
          "content": "The following code returns all items in the <bpt id=\"p22\">*</bpt>ToDoItem<ept id=\"p22\">*</ept><ph id=\"ph26\"/> table.",
          "pos": [
            0,
            116
          ]
        },
        {
          "content": "It displays them in the UI by adding the items to an adapter.",
          "pos": [
            117,
            178
          ]
        },
        {
          "content": "This code is similar to what is in the the quickstart tutorial [Get started with Mobile Services].",
          "pos": [
            179,
            277
          ]
        }
      ]
    },
    {
      "pos": [
        6917,
        7032
      ],
      "content": "Queries like this one use the <bpt id=\"p23\">[</bpt>AsyncTask<ept id=\"p23\">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept><ph id=\"ph27\"/> object."
    },
    {
      "pos": [
        7034,
        7202
      ],
      "content": "The <bpt id=\"p24\">*</bpt>result<ept id=\"p24\">*</ept><ph id=\"ph28\"/> variable returns the result set from the query, and the code following the <ph id=\"ph29\">`mToDoTable.execute().get()`</ph><ph id=\"ph30\"/> statement shows how to display the individual rows."
    },
    {
      "pos": [
        7233,
        7261
      ],
      "content": "How to: Filter returned data"
    },
    {
      "pos": [
        7263,
        7450
      ],
      "content": "The following code returns all items from the <bpt id=\"p25\">*</bpt>ToDoItem<ept id=\"p25\">*</ept><ph id=\"ph31\"/> table whose <bpt id=\"p26\">*</bpt>complete<ept id=\"p26\">*</ept><ph id=\"ph32\"/> field equals <bpt id=\"p27\">*</bpt>false<ept id=\"p27\">*</ept>. <bpt id=\"p28\">*</bpt>mToDoTable<ept id=\"p28\">*</ept><ph id=\"ph33\"/> is the reference to the mobile service table that we created previously.",
      "nodes": [
        {
          "content": "The following code returns all items from the <bpt id=\"p25\">*</bpt>ToDoItem<ept id=\"p25\">*</ept><ph id=\"ph31\"/> table whose <bpt id=\"p26\">*</bpt>complete<ept id=\"p26\">*</ept><ph id=\"ph32\"/> field equals <bpt id=\"p27\">*</bpt>false<ept id=\"p27\">*</ept>.",
          "pos": [
            0,
            251
          ]
        },
        {
          "content": "<bpt id=\"p28\">*</bpt>mToDoTable<ept id=\"p28\">*</ept><ph id=\"ph33\"/> is the reference to the mobile service table that we created previously.",
          "pos": [
            252,
            392
          ]
        }
      ]
    },
    {
      "pos": [
        8088,
        8762
      ],
      "content": "You start a filter with a <bpt id=\"p29\">[</bpt><bpt id=\"p30\">**</bpt>where<ept id=\"p30\">**</ept><ept id=\"p29\">](http://go.microsoft.com/fwlink/p/?LinkId=296867)</ept><ph id=\"ph34\"/> method call on the table reference. This is followed by a <bpt id=\"p31\">[</bpt><bpt id=\"p32\">**</bpt>field<ept id=\"p32\">**</ept><ept id=\"p31\">](http://go.microsoft.com/fwlink/p/?LinkId=296869)</ept><ph id=\"ph35\"/> method call followed by a method call that specifies the logical predicate. Possible predicate methods include <bpt id=\"p33\">[</bpt><bpt id=\"p34\">**</bpt>eq<ept id=\"p34\">**</ept><ept id=\"p33\">](http://go.microsoft.com/fwlink/p/?LinkId=298461)</ept>, <bpt id=\"p35\">[</bpt><bpt id=\"p36\">**</bpt>ne<ept id=\"p36\">**</ept><ept id=\"p35\">](http://go.microsoft.com/fwlink/p/?LinkId=298462)</ept>, <bpt id=\"p37\">[</bpt><bpt id=\"p38\">**</bpt>gt<ept id=\"p38\">**</ept><ept id=\"p37\">](http://go.microsoft.com/fwlink/p/?LinkId=298463)</ept>, <bpt id=\"p39\">[</bpt><bpt id=\"p40\">**</bpt>ge<ept id=\"p40\">**</ept><ept id=\"p39\">](http://go.microsoft.com/fwlink/p/?LinkId=298464)</ept>, <bpt id=\"p41\">[</bpt><bpt id=\"p42\">**</bpt>lt<ept id=\"p42\">**</ept><ept id=\"p41\">](http://go.microsoft.com/fwlink/p/?LinkId=298465)</ept>, <bpt id=\"p43\">[</bpt><bpt id=\"p44\">**</bpt>le<ept id=\"p44\">**</ept><ept id=\"p43\">](http://go.microsoft.com/fwlink/p/?LinkId=298466)</ept><ph id=\"ph36\"/> etc.",
      "nodes": [
        {
          "content": "You start a filter with a <bpt id=\"p29\">[</bpt><bpt id=\"p30\">**</bpt>where<ept id=\"p30\">**</ept><ept id=\"p29\">](http://go.microsoft.com/fwlink/p/?LinkId=296867)</ept><ph id=\"ph34\"/> method call on the table reference.",
          "pos": [
            0,
            217
          ]
        },
        {
          "content": "This is followed by a <bpt id=\"p31\">[</bpt><bpt id=\"p32\">**</bpt>field<ept id=\"p32\">**</ept><ept id=\"p31\">](http://go.microsoft.com/fwlink/p/?LinkId=296869)</ept><ph id=\"ph35\"/> method call followed by a method call that specifies the logical predicate.",
          "pos": [
            218,
            471
          ]
        },
        {
          "content": "Possible predicate methods include <bpt id=\"p33\">[</bpt><bpt id=\"p34\">**</bpt>eq<ept id=\"p34\">**</ept><ept id=\"p33\">](http://go.microsoft.com/fwlink/p/?LinkId=298461)</ept>, <bpt id=\"p35\">[</bpt><bpt id=\"p36\">**</bpt>ne<ept id=\"p36\">**</ept><ept id=\"p35\">](http://go.microsoft.com/fwlink/p/?LinkId=298462)</ept>, <bpt id=\"p37\">[</bpt><bpt id=\"p38\">**</bpt>gt<ept id=\"p38\">**</ept><ept id=\"p37\">](http://go.microsoft.com/fwlink/p/?LinkId=298463)</ept>, <bpt id=\"p39\">[</bpt><bpt id=\"p40\">**</bpt>ge<ept id=\"p40\">**</ept><ept id=\"p39\">](http://go.microsoft.com/fwlink/p/?LinkId=298464)</ept>, <bpt id=\"p41\">[</bpt><bpt id=\"p42\">**</bpt>lt<ept id=\"p42\">**</ept><ept id=\"p41\">](http://go.microsoft.com/fwlink/p/?LinkId=298465)</ept>, <bpt id=\"p43\">[</bpt><bpt id=\"p44\">**</bpt>le<ept id=\"p44\">**</ept><ept id=\"p43\">](http://go.microsoft.com/fwlink/p/?LinkId=298466)</ept><ph id=\"ph36\"/> etc.",
          "pos": [
            472,
            1359
          ]
        }
      ]
    },
    {
      "pos": [
        8764,
        8868
      ],
      "content": "This is sufficient for comparing number and string fields to specific values. But you can do a lot more.",
      "nodes": [
        {
          "content": "This is sufficient for comparing number and string fields to specific values.",
          "pos": [
            0,
            77
          ]
        },
        {
          "content": "But you can do a lot more.",
          "pos": [
            78,
            104
          ]
        }
      ]
    },
    {
      "pos": [
        8870,
        9465
      ],
      "content": "For example, you can filter on dates. You can compare the entire date field, but you can also compare parts of the date, with methods such as <bpt id=\"p45\">[</bpt><bpt id=\"p46\">**</bpt>year<ept id=\"p46\">**</ept><ept id=\"p45\">](http://go.microsoft.com/fwlink/p/?LinkId=298467)</ept>, <bpt id=\"p47\">[</bpt><bpt id=\"p48\">**</bpt>month<ept id=\"p48\">**</ept><ept id=\"p47\">](http://go.microsoft.com/fwlink/p/?LinkId=298468)</ept>, <bpt id=\"p49\">[</bpt><bpt id=\"p50\">**</bpt>day<ept id=\"p50\">**</ept><ept id=\"p49\">](http://go.microsoft.com/fwlink/p/?LinkId=298469)</ept>, <bpt id=\"p51\">[</bpt><bpt id=\"p52\">**</bpt>hour<ept id=\"p52\">**</ept><ept id=\"p51\">](http://go.microsoft.com/fwlink/p/?LinkId=298470)</ept>, <bpt id=\"p53\">[</bpt><bpt id=\"p54\">**</bpt>minute<ept id=\"p54\">**</ept><ept id=\"p53\">](http://go.microsoft.com/fwlink/p/?LinkId=298471)</ept><ph id=\"ph37\"/> and <bpt id=\"p55\">[</bpt><bpt id=\"p56\">**</bpt>second<ept id=\"p56\">**</ept><ept id=\"p55\">](http://go.microsoft.com/fwlink/p/?LinkId=298472)</ept>. The following partial code adds a filter for items whose <bpt id=\"p57\">*</bpt>due date<ept id=\"p57\">*</ept><ph id=\"ph38\"/> equals 2013.",
      "nodes": [
        {
          "content": "For example, you can filter on dates.",
          "pos": [
            0,
            37
          ]
        },
        {
          "content": "You can compare the entire date field, but you can also compare parts of the date, with methods such as <bpt id=\"p45\">[</bpt><bpt id=\"p46\">**</bpt>year<ept id=\"p46\">**</ept><ept id=\"p45\">](http://go.microsoft.com/fwlink/p/?LinkId=298467)</ept>, <bpt id=\"p47\">[</bpt><bpt id=\"p48\">**</bpt>month<ept id=\"p48\">**</ept><ept id=\"p47\">](http://go.microsoft.com/fwlink/p/?LinkId=298468)</ept>, <bpt id=\"p49\">[</bpt><bpt id=\"p50\">**</bpt>day<ept id=\"p50\">**</ept><ept id=\"p49\">](http://go.microsoft.com/fwlink/p/?LinkId=298469)</ept>, <bpt id=\"p51\">[</bpt><bpt id=\"p52\">**</bpt>hour<ept id=\"p52\">**</ept><ept id=\"p51\">](http://go.microsoft.com/fwlink/p/?LinkId=298470)</ept>, <bpt id=\"p53\">[</bpt><bpt id=\"p54\">**</bpt>minute<ept id=\"p54\">**</ept><ept id=\"p53\">](http://go.microsoft.com/fwlink/p/?LinkId=298471)</ept><ph id=\"ph37\"/> and <bpt id=\"p55\">[</bpt><bpt id=\"p56\">**</bpt>second<ept id=\"p56\">**</ept><ept id=\"p55\">](http://go.microsoft.com/fwlink/p/?LinkId=298472)</ept>.",
          "pos": [
            38,
            1009
          ]
        },
        {
          "content": "The following partial code adds a filter for items whose <bpt id=\"p57\">*</bpt>due date<ept id=\"p57\">*</ept><ph id=\"ph38\"/> equals 2013.",
          "pos": [
            1010,
            1145
          ]
        }
      ]
    },
    {
      "pos": [
        9533,
        10351
      ],
      "content": "You can do a wide variety of complex filters on string fields with methods like <bpt id=\"p58\">[</bpt><bpt id=\"p59\">**</bpt>startsWith<ept id=\"p59\">**</ept><ept id=\"p58\">](http://go.microsoft.com/fwlink/p/?LinkId=298473)</ept>, <bpt id=\"p60\">[</bpt><bpt id=\"p61\">**</bpt>endsWith<ept id=\"p61\">**</ept><ept id=\"p60\">](http://go.microsoft.com/fwlink/p/?LinkId=298474)</ept>, <bpt id=\"p62\">[</bpt><bpt id=\"p63\">**</bpt>concat<ept id=\"p63\">**</ept><ept id=\"p62\">](http://go.microsoft.com/fwlink/p/?LinkId=298475)</ept>, <bpt id=\"p64\">[</bpt><bpt id=\"p65\">**</bpt>subString<ept id=\"p65\">**</ept><ept id=\"p64\">](http://go.microsoft.com/fwlink/p/?LinkId=298477)</ept>, <bpt id=\"p66\">[</bpt><bpt id=\"p67\">**</bpt>indexOf<ept id=\"p67\">**</ept><ept id=\"p66\">](http://go.microsoft.com/fwlink/p/?LinkId=298488)</ept>, <bpt id=\"p68\">[</bpt><bpt id=\"p69\">**</bpt>replace<ept id=\"p69\">**</ept><ept id=\"p68\">](http://go.microsoft.com/fwlink/p/?LinkId=298491)</ept>, <bpt id=\"p70\">[</bpt><bpt id=\"p71\">**</bpt>toLower<ept id=\"p71\">**</ept><ept id=\"p70\">](http://go.microsoft.com/fwlink/p/?LinkId=298492)</ept>, <bpt id=\"p72\">[</bpt><bpt id=\"p73\">**</bpt>toUpper<ept id=\"p73\">**</ept><ept id=\"p72\">](http://go.microsoft.com/fwlink/p/?LinkId=298493)</ept>, <bpt id=\"p74\">[</bpt><bpt id=\"p75\">**</bpt>trim<ept id=\"p75\">**</ept><ept id=\"p74\">](http://go.microsoft.com/fwlink/p/?LinkId=298495)</ept>, and <bpt id=\"p76\">[</bpt><bpt id=\"p77\">**</bpt>length<ept id=\"p77\">**</ept><ept id=\"p76\">](http://go.microsoft.com/fwlink/p/?LinkId=298496)</ept>. The following partial code filters for table rows where the <bpt id=\"p78\">*</bpt>text<ept id=\"p78\">*</ept><ph id=\"ph39\"/> column starts with \"PRI0\".",
      "nodes": [
        {
          "content": "You can do a wide variety of complex filters on string fields with methods like <bpt id=\"p58\">[</bpt><bpt id=\"p59\">**</bpt>startsWith<ept id=\"p59\">**</ept><ept id=\"p58\">](http://go.microsoft.com/fwlink/p/?LinkId=298473)</ept>, <bpt id=\"p60\">[</bpt><bpt id=\"p61\">**</bpt>endsWith<ept id=\"p61\">**</ept><ept id=\"p60\">](http://go.microsoft.com/fwlink/p/?LinkId=298474)</ept>, <bpt id=\"p62\">[</bpt><bpt id=\"p63\">**</bpt>concat<ept id=\"p63\">**</ept><ept id=\"p62\">](http://go.microsoft.com/fwlink/p/?LinkId=298475)</ept>, <bpt id=\"p64\">[</bpt><bpt id=\"p65\">**</bpt>subString<ept id=\"p65\">**</ept><ept id=\"p64\">](http://go.microsoft.com/fwlink/p/?LinkId=298477)</ept>, <bpt id=\"p66\">[</bpt><bpt id=\"p67\">**</bpt>indexOf<ept id=\"p67\">**</ept><ept id=\"p66\">](http://go.microsoft.com/fwlink/p/?LinkId=298488)</ept>, <bpt id=\"p68\">[</bpt><bpt id=\"p69\">**</bpt>replace<ept id=\"p69\">**</ept><ept id=\"p68\">](http://go.microsoft.com/fwlink/p/?LinkId=298491)</ept>, <bpt id=\"p70\">[</bpt><bpt id=\"p71\">**</bpt>toLower<ept id=\"p71\">**</ept><ept id=\"p70\">](http://go.microsoft.com/fwlink/p/?LinkId=298492)</ept>, <bpt id=\"p72\">[</bpt><bpt id=\"p73\">**</bpt>toUpper<ept id=\"p73\">**</ept><ept id=\"p72\">](http://go.microsoft.com/fwlink/p/?LinkId=298493)</ept>, <bpt id=\"p74\">[</bpt><bpt id=\"p75\">**</bpt>trim<ept id=\"p75\">**</ept><ept id=\"p74\">](http://go.microsoft.com/fwlink/p/?LinkId=298495)</ept>, and <bpt id=\"p76\">[</bpt><bpt id=\"p77\">**</bpt>length<ept id=\"p77\">**</ept><ept id=\"p76\">](http://go.microsoft.com/fwlink/p/?LinkId=298496)</ept>.",
          "pos": [
            0,
            1524
          ]
        },
        {
          "content": "The following partial code filters for table rows where the <bpt id=\"p78\">*</bpt>text<ept id=\"p78\">*</ept><ph id=\"ph39\"/> column starts with \"PRI0\".",
          "pos": [
            1525,
            1673
          ]
        }
      ]
    },
    {
      "pos": [
        10425,
        11088
      ],
      "content": "Number fields also allow a wide variety of more complex filters with methods like <bpt id=\"p79\">[</bpt><bpt id=\"p80\">**</bpt>add<ept id=\"p80\">**</ept><ept id=\"p79\">](http://go.microsoft.com/fwlink/p/?LinkId=298497)</ept>, <bpt id=\"p81\">[</bpt><bpt id=\"p82\">**</bpt>sub<ept id=\"p82\">**</ept><ept id=\"p81\">](http://go.microsoft.com/fwlink/p/?LinkId=298499)</ept>, <bpt id=\"p83\">[</bpt><bpt id=\"p84\">**</bpt>mul<ept id=\"p84\">**</ept><ept id=\"p83\">](http://go.microsoft.com/fwlink/p/?LinkId=298500)</ept>, <bpt id=\"p85\">[</bpt><bpt id=\"p86\">**</bpt>div<ept id=\"p86\">**</ept><ept id=\"p85\">](http://go.microsoft.com/fwlink/p/?LinkId=298502)</ept>, <bpt id=\"p87\">[</bpt><bpt id=\"p88\">**</bpt>mod<ept id=\"p88\">**</ept><ept id=\"p87\">](http://go.microsoft.com/fwlink/p/?LinkId=298503)</ept>, <bpt id=\"p89\">[</bpt><bpt id=\"p90\">**</bpt>floor<ept id=\"p90\">**</ept><ept id=\"p89\">](http://go.microsoft.com/fwlink/p/?LinkId=298505)</ept>, <bpt id=\"p91\">[</bpt><bpt id=\"p92\">**</bpt>ceiling<ept id=\"p92\">**</ept><ept id=\"p91\">](http://go.microsoft.com/fwlink/p/?LinkId=298506)</ept>, and <bpt id=\"p93\">[</bpt><bpt id=\"p94\">**</bpt>round<ept id=\"p94\">**</ept><ept id=\"p93\">](http://go.microsoft.com/fwlink/p/?LinkId=298507)</ept>. The following partial code filters for table rows where the <bpt id=\"p95\">*</bpt>duration<ept id=\"p95\">*</ept><ph id=\"ph40\"/> is an even number.",
      "nodes": [
        {
          "content": "Number fields also allow a wide variety of more complex filters with methods like <bpt id=\"p79\">[</bpt><bpt id=\"p80\">**</bpt>add<ept id=\"p80\">**</ept><ept id=\"p79\">](http://go.microsoft.com/fwlink/p/?LinkId=298497)</ept>, <bpt id=\"p81\">[</bpt><bpt id=\"p82\">**</bpt>sub<ept id=\"p82\">**</ept><ept id=\"p81\">](http://go.microsoft.com/fwlink/p/?LinkId=298499)</ept>, <bpt id=\"p83\">[</bpt><bpt id=\"p84\">**</bpt>mul<ept id=\"p84\">**</ept><ept id=\"p83\">](http://go.microsoft.com/fwlink/p/?LinkId=298500)</ept>, <bpt id=\"p85\">[</bpt><bpt id=\"p86\">**</bpt>div<ept id=\"p86\">**</ept><ept id=\"p85\">](http://go.microsoft.com/fwlink/p/?LinkId=298502)</ept>, <bpt id=\"p87\">[</bpt><bpt id=\"p88\">**</bpt>mod<ept id=\"p88\">**</ept><ept id=\"p87\">](http://go.microsoft.com/fwlink/p/?LinkId=298503)</ept>, <bpt id=\"p89\">[</bpt><bpt id=\"p90\">**</bpt>floor<ept id=\"p90\">**</ept><ept id=\"p89\">](http://go.microsoft.com/fwlink/p/?LinkId=298505)</ept>, <bpt id=\"p91\">[</bpt><bpt id=\"p92\">**</bpt>ceiling<ept id=\"p92\">**</ept><ept id=\"p91\">](http://go.microsoft.com/fwlink/p/?LinkId=298506)</ept>, and <bpt id=\"p93\">[</bpt><bpt id=\"p94\">**</bpt>round<ept id=\"p94\">**</ept><ept id=\"p93\">](http://go.microsoft.com/fwlink/p/?LinkId=298507)</ept>.",
          "pos": [
            0,
            1213
          ]
        },
        {
          "content": "The following partial code filters for table rows where the <bpt id=\"p95\">*</bpt>duration<ept id=\"p95\">*</ept><ph id=\"ph40\"/> is an even number.",
          "pos": [
            1214,
            1358
          ]
        }
      ]
    },
    {
      "pos": [
        11167,
        11447
      ],
      "content": "You can combine predicates with methods like <bpt id=\"p96\">[</bpt><bpt id=\"p97\">**</bpt>and<ept id=\"p97\">**</ept><ept id=\"p96\">](http://go.microsoft.com/fwlink/p/?LinkId=298512)</ept>, <bpt id=\"p98\">[</bpt><bpt id=\"p99\">**</bpt>or<ept id=\"p99\">**</ept><ept id=\"p98\">](http://go.microsoft.com/fwlink/p/?LinkId=298514)</ept><ph id=\"ph41\"/> and <bpt id=\"p100\">[</bpt><bpt id=\"p101\">**</bpt>not<ept id=\"p101\">**</ept><ept id=\"p100\">](http://go.microsoft.com/fwlink/p/?LinkId=298515)</ept>. This partial code combines two of the above examples.",
      "nodes": [
        {
          "content": "You can combine predicates with methods like <bpt id=\"p96\">[</bpt><bpt id=\"p97\">**</bpt>and<ept id=\"p97\">**</ept><ept id=\"p96\">](http://go.microsoft.com/fwlink/p/?LinkId=298512)</ept>, <bpt id=\"p98\">[</bpt><bpt id=\"p99\">**</bpt>or<ept id=\"p99\">**</ept><ept id=\"p98\">](http://go.microsoft.com/fwlink/p/?LinkId=298514)</ept><ph id=\"ph41\"/> and <bpt id=\"p100\">[</bpt><bpt id=\"p101\">**</bpt>not<ept id=\"p101\">**</ept><ept id=\"p100\">](http://go.microsoft.com/fwlink/p/?LinkId=298515)</ept>.",
          "pos": [
            0,
            485
          ]
        },
        {
          "content": "This partial code combines two of the above examples.",
          "pos": [
            486,
            539
          ]
        }
      ]
    },
    {
      "pos": [
        11569,
        11645
      ],
      "content": "And you can group and nest logical operators, as shown in this partial code:"
    },
    {
      "pos": [
        11863,
        12072
      ],
      "content": "For more detailed discussion and examples of filtering, see <bpt id=\"p102\">[</bpt>Exploring the richness of the Mobile Services Android client query model<ept id=\"p102\">](http://hashtagfail.com/post/46493261719/mobile-services-android-querying)</ept>."
    },
    {
      "pos": [
        12100,
        12126
      ],
      "content": "How to: Sort returned data"
    },
    {
      "pos": [
        12128,
        12317
      ],
      "content": "The following code returns all items from a table of <bpt id=\"p103\">*</bpt>ToDoItems<ept id=\"p103\">*</ept><ph id=\"ph42\"/> sorted ascending by the <bpt id=\"p104\">*</bpt>text<ept id=\"p104\">*</ept><ph id=\"ph43\"/> field. <bpt id=\"p105\">*</bpt>mToDoTable<ept id=\"p105\">*</ept><ph id=\"ph44\"/> is the reference to the mobile mervice table that you created previously.",
      "nodes": [
        {
          "content": "The following code returns all items from a table of <bpt id=\"p103\">*</bpt>ToDoItems<ept id=\"p103\">*</ept><ph id=\"ph42\"/> sorted ascending by the <bpt id=\"p104\">*</bpt>text<ept id=\"p104\">*</ept><ph id=\"ph43\"/> field.",
          "pos": [
            0,
            216
          ]
        },
        {
          "content": "<bpt id=\"p105\">*</bpt>mToDoTable<ept id=\"p105\">*</ept><ph id=\"ph44\"/> is the reference to the mobile mervice table that you created previously.",
          "pos": [
            217,
            360
          ]
        }
      ]
    },
    {
      "pos": [
        12394,
        12551
      ],
      "content": "The first parameter of the <bpt id=\"p106\">[</bpt><bpt id=\"p107\">**</bpt>orderBy<ept id=\"p107\">**</ept><ept id=\"p106\">](http://go.microsoft.com/fwlink/p/?LinkId=298519)</ept><ph id=\"ph45\"/> method is a string equal to the name of the field on which to sort."
    },
    {
      "pos": [
        12553,
        12712
      ],
      "content": "The second parameter uses the <bpt id=\"p108\">[</bpt><bpt id=\"p109\">**</bpt>QueryOrder<ept id=\"p109\">**</ept><ept id=\"p108\">](http://go.microsoft.com/fwlink/p/?LinkId=298521)</ept><ph id=\"ph46\"/> enumeration to specify whether to sort ascending or descending."
    },
    {
      "pos": [
        12714,
        12848
      ],
      "content": "Note that if you are filtering using the <bpt id=\"p110\">***</bpt><bpt id=\"p111\"/>where<ept id=\"p111\">***</ept><ept id=\"p110\"/><ph id=\"ph47\"/> method, the <bpt id=\"p112\">***</bpt><bpt id=\"p113\"/>where<ept id=\"p113\">***</ept><ept id=\"p112\"/><ph id=\"ph48\"/> method must be invoked prior to the <bpt id=\"p114\">***</bpt><bpt id=\"p115\"/>orderBy<ept id=\"p115\">***</ept><ept id=\"p114\"/><ph id=\"ph49\"/> method."
    },
    {
      "pos": [
        12875,
        12903
      ],
      "content": "How to: Return data in pages"
    },
    {
      "pos": [
        12905,
        13117
      ],
      "content": "The first example shows how to select the top 5 items from a table. The query returns the items from a table of  <bpt id=\"p116\">*</bpt>ToDoItems<ept id=\"p116\">*</ept>. <bpt id=\"p117\">*</bpt>mToDoTable<ept id=\"p117\">*</ept><ph id=\"ph50\"/> is the reference to the mobile service table that you created previously.",
      "nodes": [
        {
          "content": "The first example shows how to select the top 5 items from a table.",
          "pos": [
            0,
            67
          ]
        },
        {
          "content": "The query returns the items from a table of  <bpt id=\"p116\">*</bpt>ToDoItems<ept id=\"p116\">*</ept>.",
          "pos": [
            68,
            167
          ]
        },
        {
          "content": "<bpt id=\"p117\">*</bpt>mToDoTable<ept id=\"p117\">*</ept><ph id=\"ph50\"/> is the reference to the mobile service table that you created previously.",
          "pos": [
            168,
            311
          ]
        }
      ]
    },
    {
      "pos": [
        13206,
        13288
      ],
      "content": "Next, we define a query that skips the first 5 items, and then returns the next 5."
    },
    {
      "pos": [
        13371,
        13402
      ],
      "content": "How to: Select specific columns"
    },
    {
      "pos": [
        13404,
        13626
      ],
      "content": "The following code illustrates how to return all items from a table of  <bpt id=\"p118\">*</bpt>ToDoItems<ept id=\"p118\">*</ept>, but only displays the <bpt id=\"p119\">*</bpt>complete<ept id=\"p119\">*</ept><ph id=\"ph51\"/> and <bpt id=\"p120\">*</bpt>text<ept id=\"p120\">*</ept><ph id=\"ph52\"/> fields. <bpt id=\"p121\">*</bpt>mToDoTable<ept id=\"p121\">*</ept><ph id=\"ph53\"/> is the reference to the mobile service table that we created previously.",
      "nodes": [
        {
          "content": "The following code illustrates how to return all items from a table of  <bpt id=\"p118\">*</bpt>ToDoItems<ept id=\"p118\">*</ept>, but only displays the <bpt id=\"p119\">*</bpt>complete<ept id=\"p119\">*</ept><ph id=\"ph51\"/> and <bpt id=\"p120\">*</bpt>text<ept id=\"p120\">*</ept><ph id=\"ph52\"/> fields.",
          "pos": [
            0,
            292
          ]
        },
        {
          "content": "<bpt id=\"p121\">*</bpt>mToDoTable<ept id=\"p121\">*</ept><ph id=\"ph53\"/> is the reference to the mobile service table that we created previously.",
          "pos": [
            293,
            435
          ]
        }
      ]
    },
    {
      "pos": [
        13693,
        13804
      ],
      "content": "Here the parameters to the select function are the string names of the table's columns that you want to return."
    },
    {
      "pos": [
        13806,
        14152
      ],
      "content": "The <bpt id=\"p122\">[</bpt><bpt id=\"p123\">**</bpt>select<ept id=\"p123\">**</ept><ept id=\"p122\">](http://go.microsoft.com/fwlink/p/?LinkId=290689)</ept><ph id=\"ph54\"/> method needs to follow methods like <bpt id=\"p124\">[</bpt><bpt id=\"p125\">**</bpt>where<ept id=\"p125\">**</ept><ept id=\"p124\">](http://go.microsoft.com/fwlink/p/?LinkId=296296)</ept><ph id=\"ph55\"/> and <bpt id=\"p126\">[</bpt><bpt id=\"p127\">**</bpt>orderBy<ept id=\"p127\">**</ept><ept id=\"p126\">](http://go.microsoft.com/fwlink/p/?LinkId=296313)</ept>, if they are present. It can be followed by methods like <bpt id=\"p128\">[</bpt><bpt id=\"p129\">**</bpt>top<ept id=\"p129\">**</ept><ept id=\"p128\">](http://go.microsoft.com/fwlink/p/?LinkId=298731)</ept>.",
      "nodes": [
        {
          "content": "The <bpt id=\"p122\">[</bpt><bpt id=\"p123\">**</bpt>select<ept id=\"p123\">**</ept><ept id=\"p122\">](http://go.microsoft.com/fwlink/p/?LinkId=290689)</ept><ph id=\"ph54\"/> method needs to follow methods like <bpt id=\"p124\">[</bpt><bpt id=\"p125\">**</bpt>where<ept id=\"p125\">**</ept><ept id=\"p124\">](http://go.microsoft.com/fwlink/p/?LinkId=296296)</ept><ph id=\"ph55\"/> and <bpt id=\"p126\">[</bpt><bpt id=\"p127\">**</bpt>orderBy<ept id=\"p127\">**</ept><ept id=\"p126\">](http://go.microsoft.com/fwlink/p/?LinkId=296313)</ept>, if they are present.",
          "pos": [
            0,
            533
          ]
        },
        {
          "content": "It can be followed by methods like <bpt id=\"p128\">[</bpt><bpt id=\"p129\">**</bpt>top<ept id=\"p129\">**</ept><ept id=\"p128\">](http://go.microsoft.com/fwlink/p/?LinkId=298731)</ept>.",
          "pos": [
            534,
            712
          ]
        }
      ]
    },
    {
      "pos": [
        14181,
        14214
      ],
      "content": "How to: Concatenate query methods"
    },
    {
      "pos": [
        14216,
        14435
      ],
      "content": "The methods used in querying mobile mervice tables can be concatenated. This allows you to do things like select specific columns of filtered rows that are sorted and paged. You can create quite complex logical filters.",
      "nodes": [
        {
          "content": "The methods used in querying mobile mervice tables can be concatenated.",
          "pos": [
            0,
            71
          ]
        },
        {
          "content": "This allows you to do things like select specific columns of filtered rows that are sorted and paged.",
          "pos": [
            72,
            173
          ]
        },
        {
          "content": "You can create quite complex logical filters.",
          "pos": [
            174,
            219
          ]
        }
      ]
    },
    {
      "pos": [
        14437,
        14790
      ],
      "content": "What makes this work is that the query methods you use return <bpt id=\"p130\">[</bpt><bpt id=\"p131\">**</bpt>MobileServiceQuery&amp;lt;T&amp;gt;<ept id=\"p131\">**</ept><ept id=\"p130\">](http://go.microsoft.com/fwlink/p/?LinkId=298551)</ept><ph id=\"ph56\"/> objects, which can in turn have additional methods invoked on them. To end the series of methods and actually run the query, you call the <bpt id=\"p132\">[</bpt><bpt id=\"p133\">**</bpt>execute<ept id=\"p133\">**</ept><ept id=\"p132\">](http://go.microsoft.com/fwlink/p/?LinkId=298554)</ept><ph id=\"ph57\"/> method.",
      "nodes": [
        {
          "content": "What makes this work is that the query methods you use return <bpt id=\"p130\">[</bpt><bpt id=\"p131\">**</bpt>MobileServiceQuery&amp;lt;T&amp;gt;<ept id=\"p131\">**</ept><ept id=\"p130\">](http://go.microsoft.com/fwlink/p/?LinkId=298551)</ept><ph id=\"ph56\"/> objects, which can in turn have additional methods invoked on them.",
          "pos": [
            0,
            319
          ]
        },
        {
          "content": "To end the series of methods and actually run the query, you call the <bpt id=\"p132\">[</bpt><bpt id=\"p133\">**</bpt>execute<ept id=\"p133\">**</ept><ept id=\"p132\">](http://go.microsoft.com/fwlink/p/?LinkId=298554)</ept><ph id=\"ph57\"/> method.",
          "pos": [
            320,
            559
          ]
        }
      ]
    },
    {
      "pos": [
        14792,
        14887
      ],
      "content": "Here's a code sample where <bpt id=\"p134\">*</bpt>mToDoTable<ept id=\"p134\">*</ept><ph id=\"ph58\"/> is a reference to the mobile services <bpt id=\"p135\">*</bpt>ToDoItem<ept id=\"p135\">*</ept><ph id=\"ph59\"/> table."
    },
    {
      "pos": [
        15224,
        15439
      ],
      "content": "The main requirement in chaining methods together is that the <bpt id=\"p136\">*</bpt>where<ept id=\"p136\">*</ept><ph id=\"ph60\"/> method and predicates need to come first. After that, you can call subsequent methods in the order that best meets the needs of your application.",
      "nodes": [
        {
          "content": "The main requirement in chaining methods together is that the <bpt id=\"p136\">*</bpt>where<ept id=\"p136\">*</ept><ph id=\"ph60\"/> method and predicates need to come first.",
          "pos": [
            0,
            168
          ]
        },
        {
          "content": "After that, you can call subsequent methods in the order that best meets the needs of your application.",
          "pos": [
            169,
            272
          ]
        }
      ]
    },
    {
      "pos": [
        15442,
        15444
      ],
      "content": "##"
    },
    {
      "pos": [
        15468,
        15509
      ],
      "content": "How to: Insert data into a mobile service"
    },
    {
      "pos": [
        15511,
        15573
      ],
      "content": "The following code shows how to insert a new row into a table."
    },
    {
      "pos": [
        15575,
        15656
      ],
      "content": "First you instantiate an instance of the <bpt id=\"p137\">*</bpt>ToDoItem<ept id=\"p137\">*</ept><ph id=\"ph61\"/> class and set its properties."
    },
    {
      "pos": [
        15782,
        15818
      ],
      "content": "Next you execute the following code:"
    },
    {
      "pos": [
        16525,
        16609
      ],
      "content": "This code inserts the new item, and adds it to the adapter so it displays in the UI."
    },
    {
      "pos": [
        16611,
        16922
      ],
      "content": "Mobile Services supports unique custom string values for the table id. This allows applications to use custom values such as email addresses or usernames for the id column of a Mobile Services table. For example if you wanted to identify each record by an email address, you could use the following JSON object.",
      "nodes": [
        {
          "content": "Mobile Services supports unique custom string values for the table id.",
          "pos": [
            0,
            70
          ]
        },
        {
          "content": "This allows applications to use custom values such as email addresses or usernames for the id column of a Mobile Services table.",
          "pos": [
            71,
            199
          ]
        },
        {
          "content": "For example if you wanted to identify each record by an email address, you could use the following JSON object.",
          "pos": [
            200,
            311
          ]
        }
      ]
    },
    {
      "pos": [
        17094,
        17228
      ],
      "content": "If a string id value is not provided when inserting new records into a table, Mobile Services will generate a unique value for the id."
    },
    {
      "pos": [
        17230,
        17299
      ],
      "content": "Supporting string ids provides the following advantages to developers"
    },
    {
      "pos": [
        17303,
        17367
      ],
      "content": "Ids can be generated without making a roundtrip to the database."
    },
    {
      "pos": [
        17370,
        17433
      ],
      "content": "Records are easier to merge from different tables or databases."
    },
    {
      "pos": [
        17436,
        17496
      ],
      "content": "Ids values can integrate better with an application's logic."
    },
    {
      "pos": [
        17498,
        17750
      ],
      "content": "You can also use server scripts to set id values. The script example below generates a custom GUID and assigns it to a new record's id. This is similar to the id value that Mobile Services would generate if you didn't pass in a value for a record's id.",
      "nodes": [
        {
          "content": "You can also use server scripts to set id values.",
          "pos": [
            0,
            49
          ]
        },
        {
          "content": "The script example below generates a custom GUID and assigns it to a new record's id.",
          "pos": [
            50,
            135
          ]
        },
        {
          "content": "This is similar to the id value that Mobile Services would generate if you didn't pass in a value for a record's id.",
          "pos": [
            136,
            252
          ]
        }
      ]
    },
    {
      "pos": [
        18279,
        18453
      ],
      "content": "If an application provides a value for an id, Mobile Services will store it as is. This includes leading or trailing white spaces. White space will not be trimmed from value.",
      "nodes": [
        {
          "content": "If an application provides a value for an id, Mobile Services will store it as is.",
          "pos": [
            0,
            82
          ]
        },
        {
          "content": "This includes leading or trailing white spaces.",
          "pos": [
            83,
            130
          ]
        },
        {
          "content": "White space will not be trimmed from value.",
          "pos": [
            131,
            174
          ]
        }
      ]
    },
    {
      "pos": [
        18455,
        18552
      ],
      "content": "The value for the <ph id=\"ph62\">`id`</ph><ph id=\"ph63\"/> must be unique and it must not include characters from the following sets:"
    },
    {
      "pos": [
        18556,
        18671
      ],
      "content": "Control characters: [0x0000-0x001F] and [0x007F-0x009F]. For more information, see [ASCII control codes C0 and C1].",
      "nodes": [
        {
          "content": "Control characters: [0x0000-0x001F] and [0x007F-0x009F].",
          "pos": [
            0,
            56
          ]
        },
        {
          "content": "For more information, see [ASCII control codes C0 and C1].",
          "pos": [
            57,
            115
          ]
        }
      ]
    },
    {
      "pos": [
        18675,
        18792
      ],
      "content": "Printable characters: <bpt id=\"p138\">**</bpt>\"<ept id=\"p138\">**</ept>(0x0022), <bpt id=\"p139\">**</bpt>\\+<ept id=\"p139\">**</ept><ph id=\"ph64\"/> (0x002B), <bpt id=\"p140\">**</bpt>/<ept id=\"p140\">**</ept><ph id=\"ph65\"/> (0x002F), <bpt id=\"p141\">**</bpt>?<ept id=\"p141\">**</ept><ph id=\"ph66\"/> (0x003F), <bpt id=\"p142\">**</bpt>\\\\<ept id=\"p142\">**</ept><ph id=\"ph67\"/> (0x005C), <bpt id=\"p143\">**</bpt>`<ept id=\"p143\">**</ept><ph id=\"ph68\"/> (0x0060)"
    },
    {
      "pos": [
        18796,
        18816
      ],
      "content": "The ids \".\" and \"..\""
    },
    {
      "pos": [
        18818,
        19153
      ],
      "content": "You can alternatively use integer Ids for your tables. In order to use an integer Id you must create your table with the <ph id=\"ph69\">`mobile table create`</ph><ph id=\"ph70\"/> command using the <ph id=\"ph71\">`--integerId`</ph><ph id=\"ph72\"/> option. This command is used with the Command-line Interface (CLI) for Azure. For more information on using the CLI, see [CLI to manage Mobile Services tables].",
      "nodes": [
        {
          "content": "You can alternatively use integer Ids for your tables.",
          "pos": [
            0,
            54
          ]
        },
        {
          "content": "In order to use an integer Id you must create your table with the <ph id=\"ph69\">`mobile table create`</ph><ph id=\"ph70\"/> command using the <ph id=\"ph71\">`--integerId`</ph><ph id=\"ph72\"/> option.",
          "pos": [
            55,
            250
          ]
        },
        {
          "content": "This command is used with the Command-line Interface (CLI) for Azure.",
          "pos": [
            251,
            320
          ]
        },
        {
          "content": "For more information on using the CLI, see [CLI to manage Mobile Services tables].",
          "pos": [
            321,
            403
          ]
        }
      ]
    },
    {
      "pos": [
        19156,
        19158
      ],
      "content": "##"
    },
    {
      "pos": [
        19181,
        19220
      ],
      "content": "How to: Update data in a mobile service"
    },
    {
      "pos": [
        19222,
        19448
      ],
      "content": "The following code shows how to update data in a table. In this example, <bpt id=\"p144\">*</bpt>item<ept id=\"p144\">*</ept><ph id=\"ph73\"/> is a reference to a row in the <bpt id=\"p145\">*</bpt>ToDoItem<ept id=\"p145\">*</ept><ph id=\"ph74\"/> table, which has had some changes made to it. The following method updates the table and the UI adapter.",
      "nodes": [
        {
          "content": "The following code shows how to update data in a table.",
          "pos": [
            0,
            55
          ]
        },
        {
          "content": "In this example, <bpt id=\"p144\">*</bpt>item<ept id=\"p144\">*</ept><ph id=\"ph73\"/> is a reference to a row in the <bpt id=\"p145\">*</bpt>ToDoItem<ept id=\"p145\">*</ept><ph id=\"ph74\"/> table, which has had some changes made to it.",
          "pos": [
            56,
            281
          ]
        },
        {
          "content": "The following method updates the table and the UI adapter.",
          "pos": [
            282,
            340
          ]
        }
      ]
    },
    {
      "pos": [
        20297,
        20299
      ],
      "content": "##"
    },
    {
      "pos": [
        20322,
        20361
      ],
      "content": "How to: Delete data in a mobile service"
    },
    {
      "pos": [
        20363,
        20532
      ],
      "content": "The following code shows how to delete data from a table. It deletes an existing item from the ToDoItem table that has had the <bpt id=\"p146\">**</bpt>Completed<ept id=\"p146\">**</ept><ph id=\"ph75\"/> check box on the UI checked.",
      "nodes": [
        {
          "content": "The following code shows how to delete data from a table.",
          "pos": [
            0,
            57
          ]
        },
        {
          "content": "It deletes an existing item from the ToDoItem table that has had the <bpt id=\"p146\">**</bpt>Completed<ept id=\"p146\">**</ept><ph id=\"ph75\"/> check box on the UI checked.",
          "pos": [
            58,
            226
          ]
        }
      ]
    },
    {
      "pos": [
        21471,
        21916
      ],
      "content": "The following code illustrates another way to do this. It deletes an existing item in the ToDoItem table by specifying the value of the id field of the row to delete (assumed to equal \"2FA404AB-E458-44CD-BC1B-3BC847EF0902\"). In an actual app you would pick up the ID somehow and pass it in as a variable. Here, to simplify testing, you can go to your service in the Azure classic portal, click <bpt id=\"p147\">**</bpt>Data<ept id=\"p147\">**</ept><ph id=\"ph76\"/> and copy an ID that you wish to test with.",
      "nodes": [
        {
          "content": "The following code illustrates another way to do this.",
          "pos": [
            0,
            54
          ]
        },
        {
          "content": "It deletes an existing item in the ToDoItem table by specifying the value of the id field of the row to delete (assumed to equal \"2FA404AB-E458-44CD-BC1B-3BC847EF0902\").",
          "pos": [
            55,
            224
          ]
        },
        {
          "content": "In an actual app you would pick up the ID somehow and pass it in as a variable.",
          "pos": [
            225,
            304
          ]
        },
        {
          "content": "Here, to simplify testing, you can go to your service in the Azure classic portal, click <bpt id=\"p147\">**</bpt>Data<ept id=\"p147\">**</ept><ph id=\"ph76\"/> and copy an ID that you wish to test with.",
          "pos": [
            305,
            502
          ]
        }
      ]
    },
    {
      "pos": [
        22608,
        23142
      ],
      "content": "##<ph id=\"ph77\">&lt;a name=\"lookup\"&gt;</ph><ph id=\"ph78\">&lt;/a&gt;</ph>How to: Look up a specific item\nSometimes you want to look up a specific item by its <bpt id=\"p148\">*</bpt>id<ept id=\"p148\">*</ept>, unlike querying where you typically get a collection of items that satisfy some criteria. The following code shows how to do this, for an <bpt id=\"p149\">*</bpt>id<ept id=\"p149\">*</ept><ph id=\"ph79\"/> value of <ph id=\"ph80\">`0380BAFB-BCFF-443C-B7D5-30199F730335`</ph>. In an actual app you would pick up the ID somehow and pass it in as a variable. Here, to simplify testing, you can go to your service in the Azure classic portal, click the <bpt id=\"p150\">**</bpt>Data<ept id=\"p150\">**</ept><ph id=\"ph81\"/> tab and copy an ID that you wish to test with.",
      "nodes": [
        {
          "content": "<ph id=\"ph77\">&lt;a name=\"lookup\"&gt;</ph><ph id=\"ph78\">&lt;/a&gt;</ph>How to: Look up a specific item\nSometimes you want to look up a specific item by its <bpt id=\"p148\">*</bpt>id<ept id=\"p148\">*</ept>, unlike querying where you typically get a collection of items that satisfy some criteria.",
          "pos": [
            2,
            295
          ]
        },
        {
          "content": "The following code shows how to do this, for an <bpt id=\"p149\">*</bpt>id<ept id=\"p149\">*</ept><ph id=\"ph79\"/> value of <ph id=\"ph80\">`0380BAFB-BCFF-443C-B7D5-30199F730335`</ph>.",
          "pos": [
            296,
            473
          ]
        },
        {
          "content": "In an actual app you would pick up the ID somehow and pass it in as a variable.",
          "pos": [
            474,
            553
          ]
        },
        {
          "content": "Here, to simplify testing, you can go to your service in the Azure classic portal, click the <bpt id=\"p150\">**</bpt>Data<ept id=\"p150\">**</ept><ph id=\"ph81\"/> tab and copy an ID that you wish to test with.",
          "pos": [
            554,
            759
          ]
        }
      ]
    },
    {
      "pos": [
        23965,
        23967
      ],
      "content": "##"
    },
    {
      "pos": [
        23989,
        24019
      ],
      "content": "How to: Work with untyped data"
    },
    {
      "pos": [
        24021,
        24464
      ],
      "content": "The untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your mobile service table contains a large number of columns and you only need to reference a few of them. Using the typed model requires you to define all of the mobile service table's columns in your data class. But with the untyped model you only define the columns you need to use.",
      "nodes": [
        {
          "content": "The untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your mobile service table contains a large number of columns and you only need to reference a few of them.",
          "pos": [
            0,
            264
          ]
        },
        {
          "content": "Using the typed model requires you to define all of the mobile service table's columns in your data class.",
          "pos": [
            265,
            371
          ]
        },
        {
          "content": "But with the untyped model you only define the columns you need to use.",
          "pos": [
            372,
            443
          ]
        }
      ]
    },
    {
      "pos": [
        24466,
        24706
      ],
      "content": "Most of the API calls for accessing data are similar to the typed programming calls. The main difference is that in the untyped model you invoke methods on the <bpt id=\"p151\">**</bpt>MobileServiceJsonTable<ept id=\"p151\">**</ept><ph id=\"ph82\"/> object, instead of the <bpt id=\"p152\">**</bpt>MobileServiceTable<ept id=\"p152\">**</ept><ph id=\"ph83\"/> object.",
      "nodes": [
        {
          "content": "Most of the API calls for accessing data are similar to the typed programming calls.",
          "pos": [
            0,
            84
          ]
        },
        {
          "content": "The main difference is that in the untyped model you invoke methods on the <bpt id=\"p151\">**</bpt>MobileServiceJsonTable<ept id=\"p151\">**</ept><ph id=\"ph82\"/> object, instead of the <bpt id=\"p152\">**</bpt>MobileServiceTable<ept id=\"p152\">**</ept><ph id=\"ph83\"/> object.",
          "pos": [
            85,
            354
          ]
        }
      ]
    },
    {
      "pos": [
        24741,
        24787
      ],
      "content": "How to: Create an instance of an untyped table"
    },
    {
      "pos": [
        24789,
        25115
      ],
      "content": "Similar to the typed model, you start by getting a table reference, but in this case it's a <bpt id=\"p153\">[</bpt>MobileServicesJsonTable<ept id=\"p153\">](http://go.microsoft.com/fwlink/p/?LinkId=298733)</ept><ph id=\"ph84\"/> object. You get the reference by calling the <bpt id=\"p154\">[</bpt>getTable()<ept id=\"p154\">](http://go.microsoft.com/fwlink/p/?LinkId=298734)</ept><ph id=\"ph85\"/> method on an instance of the Mobile Services client.",
      "nodes": [
        {
          "content": "Similar to the typed model, you start by getting a table reference, but in this case it's a <bpt id=\"p153\">[</bpt>MobileServicesJsonTable<ept id=\"p153\">](http://go.microsoft.com/fwlink/p/?LinkId=298733)</ept><ph id=\"ph84\"/> object.",
          "pos": [
            0,
            231
          ]
        },
        {
          "content": "You get the reference by calling the <bpt id=\"p154\">[</bpt>getTable()<ept id=\"p154\">](http://go.microsoft.com/fwlink/p/?LinkId=298734)</ept><ph id=\"ph85\"/> method on an instance of the Mobile Services client.",
          "pos": [
            232,
            440
          ]
        }
      ]
    },
    {
      "pos": [
        25117,
        25147
      ],
      "content": "First you define the variable:"
    },
    {
      "pos": [
        25280,
        25482
      ],
      "content": "Once you create an instance of the Mobile Services client in the <bpt id=\"p155\">**</bpt>onCreate<ept id=\"p155\">**</ept><ph id=\"ph86\"/> method (here, the <bpt id=\"p156\">*</bpt>mClient<ept id=\"p156\">*</ept><ph id=\"ph87\"/> variable), you next create an instance of a <bpt id=\"p157\">**</bpt>MobileServiceJsonTable<ept id=\"p157\">**</ept>, with the following code."
    },
    {
      "pos": [
        25601,
        25859
      ],
      "content": "Once you have created an instance of the <bpt id=\"p158\">**</bpt>MobileServiceJsonTable<ept id=\"p158\">**</ept>, you can call almost all of the methods on it that you can with the typed programming model. However in some cases the methods take an untyped parameter, as we see in the following examples.",
      "nodes": [
        {
          "content": "Once you have created an instance of the <bpt id=\"p158\">**</bpt>MobileServiceJsonTable<ept id=\"p158\">**</ept>, you can call almost all of the methods on it that you can with the typed programming model.",
          "pos": [
            0,
            202
          ]
        },
        {
          "content": "However in some cases the methods take an untyped parameter, as we see in the following examples.",
          "pos": [
            203,
            300
          ]
        }
      ]
    },
    {
      "pos": [
        25891,
        25927
      ],
      "content": "How to: Insert into an untyped table"
    },
    {
      "pos": [
        25929,
        26232
      ],
      "content": "The following code shows how to do an insert. The first step is to create a <bpt id=\"p159\">[</bpt><bpt id=\"p160\">**</bpt>JsonObject<ept id=\"p160\">**</ept><ept id=\"p159\">](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)</ept>, which is part of the <ph id=\"ph88\">&lt;a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph89\">&lt;/a&gt;</ph><ph id=\"ph90\"/> library.",
      "nodes": [
        {
          "content": "The following code shows how to do an insert.",
          "pos": [
            0,
            45
          ]
        },
        {
          "content": "The first step is to create a <bpt id=\"p159\">[</bpt><bpt id=\"p160\">**</bpt>JsonObject<ept id=\"p160\">**</ept><ept id=\"p159\">](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)</ept>, which is part of the <ph id=\"ph88\">&lt;a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph89\">&lt;/a&gt;</ph><ph id=\"ph90\"/> library.",
          "pos": [
            46,
            452
          ]
        }
      ]
    },
    {
      "pos": [
        26369,
        26686
      ],
      "content": "The next step is to insert the object. The callback function passed to the <bpt id=\"p161\">[</bpt><bpt id=\"p162\">**</bpt>insert<ept id=\"p162\">**</ept><ept id=\"p161\">](http://go.microsoft.com/fwlink/p/?LinkId=298535)</ept><ph id=\"ph91\"/> method is an instance of the <bpt id=\"p163\">[</bpt><bpt id=\"p164\">**</bpt>TableJsonOperationCallback<ept id=\"p164\">**</ept><ept id=\"p163\">](http://go.microsoft.com/fwlink/p/?LinkId=298532)</ept><ph id=\"ph92\"/> class. Note how the parameter of the <bpt id=\"p165\">*</bpt>insert<ept id=\"p165\">*</ept><ph id=\"ph93\"/> method is a JsonObject.",
      "nodes": [
        {
          "content": "The next step is to insert the object.",
          "pos": [
            0,
            38
          ]
        },
        {
          "content": "The callback function passed to the <bpt id=\"p161\">[</bpt><bpt id=\"p162\">**</bpt>insert<ept id=\"p162\">**</ept><ept id=\"p161\">](http://go.microsoft.com/fwlink/p/?LinkId=298535)</ept><ph id=\"ph91\"/> method is an instance of the <bpt id=\"p163\">[</bpt><bpt id=\"p164\">**</bpt>TableJsonOperationCallback<ept id=\"p164\">**</ept><ept id=\"p163\">](http://go.microsoft.com/fwlink/p/?LinkId=298532)</ept><ph id=\"ph92\"/> class.",
          "pos": [
            39,
            452
          ]
        },
        {
          "content": "Note how the parameter of the <bpt id=\"p165\">*</bpt>insert<ept id=\"p165\">*</ept><ph id=\"ph93\"/> method is a JsonObject.",
          "pos": [
            453,
            572
          ]
        }
      ]
    },
    {
      "pos": [
        27161,
        27232
      ],
      "content": "If you need to get the ID of the inserted object, use this method call:"
    },
    {
      "pos": [
        27331,
        27367
      ],
      "content": "How to: Delete from an untyped table"
    },
    {
      "pos": [
        27369,
        27655
      ],
      "content": "The following code shows how to delete an instance, in this case, the same instance of a <bpt id=\"p166\">**</bpt>JsonObject<ept id=\"p166\">**</ept><ph id=\"ph94\"/> that was created in the prior <bpt id=\"p167\">*</bpt>insert<ept id=\"p167\">*</ept><ph id=\"ph95\"/> example. Note that the code is the same as with the typed case, but the method has a different signature since it references an <bpt id=\"p168\">**</bpt>JsonObject<ept id=\"p168\">**</ept>.",
      "nodes": [
        {
          "content": "The following code shows how to delete an instance, in this case, the same instance of a <bpt id=\"p166\">**</bpt>JsonObject<ept id=\"p166\">**</ept><ph id=\"ph94\"/> that was created in the prior <bpt id=\"p167\">*</bpt>insert<ept id=\"p167\">*</ept><ph id=\"ph95\"/> example.",
          "pos": [
            0,
            265
          ]
        },
        {
          "content": "Note that the code is the same as with the typed case, but the method has a different signature since it references an <bpt id=\"p168\">**</bpt>JsonObject<ept id=\"p168\">**</ept>.",
          "pos": [
            266,
            442
          ]
        }
      ]
    },
    {
      "pos": [
        27694,
        27751
      ],
      "content": "You can also delete an instance directly by using its ID:"
    },
    {
      "pos": [
        27815,
        27860
      ],
      "content": "How to: Return all rows from an untyped table"
    },
    {
      "pos": [
        27862,
        28016
      ],
      "content": "The following code shows how to retrieve an entire table. Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.",
      "nodes": [
        {
          "content": "The following code shows how to retrieve an entire table.",
          "pos": [
            0,
            57
          ]
        },
        {
          "content": "Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.",
          "pos": [
            58,
            154
          ]
        }
      ]
    },
    {
      "pos": [
        29521,
        29658
      ],
      "content": "You can do filtering, sorting and paging by concatenating  methods that have the same names as those used in the typed programming model."
    },
    {
      "pos": [
        29661,
        29663
      ],
      "content": "##"
    },
    {
      "pos": [
        29685,
        29724
      ],
      "content": "How to: Bind data to the user interface"
    },
    {
      "pos": [
        29726,
        29765
      ],
      "content": "Data binding involves three components:"
    },
    {
      "pos": [
        29769,
        29784
      ],
      "content": "the data source"
    },
    {
      "pos": [
        29787,
        29804
      ],
      "content": "the screen layout"
    },
    {
      "pos": [
        29807,
        29850
      ],
      "content": "and the adapter that ties the two together."
    },
    {
      "pos": [
        29852,
        30143
      ],
      "content": "In our sample code, we return the data from the mobile service table <bpt id=\"p169\">*</bpt>ToDoItem<ept id=\"p169\">*</ept><ph id=\"ph96\"/> into an array. This is one very common pattern for data applications: database queries typically return a collection of rows which the client gets in a list or array. In this sample the array is the data source.",
      "nodes": [
        {
          "content": "In our sample code, we return the data from the mobile service table <bpt id=\"p169\">*</bpt>ToDoItem<ept id=\"p169\">*</ept><ph id=\"ph96\"/> into an array.",
          "pos": [
            0,
            151
          ]
        },
        {
          "content": "This is one very common pattern for data applications: database queries typically return a collection of rows which the client gets in a list or array.",
          "pos": [
            152,
            303
          ]
        },
        {
          "content": "In this sample the array is the data source.",
          "pos": [
            304,
            348
          ]
        }
      ]
    },
    {
      "pos": [
        30145,
        30245
      ],
      "content": "The code specifies a screen layout that defines the view of the data that will appear on the device."
    },
    {
      "pos": [
        30247,
        30374
      ],
      "content": "And the two are bound together with an adapter, which in this code is an extension of the <bpt id=\"p170\">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id=\"p170\">*</ept><ph id=\"ph97\"/> class."
    },
    {
      "pos": [
        30401,
        30426
      ],
      "content": "How to: Define the Layout"
    },
    {
      "pos": [
        30428,
        30610
      ],
      "content": "The layout is defined by several snippets of XML code. Given an existing layout, let's assume the following code represents the <bpt id=\"p171\">**</bpt>ListView<ept id=\"p171\">**</ept><ph id=\"ph98\"/> we want to populate with our server data.",
      "nodes": [
        {
          "content": "The layout is defined by several snippets of XML code.",
          "pos": [
            0,
            54
          ]
        },
        {
          "content": "Given an existing layout, let's assume the following code represents the <bpt id=\"p171\">**</bpt>ListView<ept id=\"p171\">**</ept><ph id=\"ph98\"/> we want to populate with our server data.",
          "pos": [
            55,
            239
          ]
        }
      ]
    },
    {
      "pos": [
        30822,
        31174
      ],
      "content": "In the above code the <bpt id=\"p172\">*</bpt>listitem<ept id=\"p172\">*</ept><ph id=\"ph99\"/> attribute specifies the id of the layout for an individual row in the list. Here is that code, which specifies a check box and its associated text. This gets instantiated once for each item in the list. A more complex layout would specify additional fields in the display. This code is in the <bpt id=\"p173\">*</bpt>row_list_to_do.xml<ept id=\"p173\">*</ept><ph id=\"ph100\"/> file.",
      "nodes": [
        {
          "content": "In the above code the <bpt id=\"p172\">*</bpt>listitem<ept id=\"p172\">*</ept><ph id=\"ph99\"/> attribute specifies the id of the layout for an individual row in the list.",
          "pos": [
            0,
            165
          ]
        },
        {
          "content": "Here is that code, which specifies a check box and its associated text.",
          "pos": [
            166,
            237
          ]
        },
        {
          "content": "This gets instantiated once for each item in the list.",
          "pos": [
            238,
            292
          ]
        },
        {
          "content": "A more complex layout would specify additional fields in the display.",
          "pos": [
            293,
            362
          ]
        },
        {
          "content": "This code is in the <bpt id=\"p173\">*</bpt>row_list_to_do.xml<ept id=\"p173\">*</ept><ph id=\"ph100\"/> file.",
          "pos": [
            363,
            467
          ]
        }
      ]
    },
    {
      "pos": [
        31686,
        31712
      ],
      "content": "How to: Define the adapter"
    },
    {
      "pos": [
        31714,
        31933
      ],
      "content": "Since the data source of our view is an array of <bpt id=\"p174\">*</bpt>ToDoItem<ept id=\"p174\">*</ept>, we subclass our adapter from a <bpt id=\"p175\">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id=\"p175\">*</ept><ph id=\"ph101\"/> class. This subclass will produce a View for every <bpt id=\"p176\">*</bpt>ToDoItem<ept id=\"p176\">*</ept><ph id=\"ph102\"/> using the <bpt id=\"p177\">*</bpt>row_list_to_do<ept id=\"p177\">*</ept><ph id=\"ph103\"/> layout.",
      "nodes": [
        {
          "content": "Since the data source of our view is an array of <bpt id=\"p174\">*</bpt>ToDoItem<ept id=\"p174\">*</ept>, we subclass our adapter from a <bpt id=\"p175\">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id=\"p175\">*</ept><ph id=\"ph101\"/> class.",
          "pos": [
            0,
            237
          ]
        },
        {
          "content": "This subclass will produce a View for every <bpt id=\"p176\">*</bpt>ToDoItem<ept id=\"p176\">*</ept><ph id=\"ph102\"/> using the <bpt id=\"p177\">*</bpt>row_list_to_do<ept id=\"p177\">*</ept><ph id=\"ph103\"/> layout.",
          "pos": [
            238,
            443
          ]
        }
      ]
    },
    {
      "pos": [
        31935,
        32036
      ],
      "content": "In our code we define the following class which is an extension of the <bpt id=\"p178\">*</bpt>ArrayAdapter&amp;lt;E&amp;gt;<ept id=\"p178\">*</ept><ph id=\"ph104\"/> class:"
    },
    {
      "pos": [
        32106,
        32247
      ],
      "content": "You must override the adapter's <bpt id=\"p179\">*</bpt>getView<ept id=\"p179\">*</ept><ph id=\"ph105\"/> method. This sample code is one example of how to do this: details will vary with your application.",
      "nodes": [
        {
          "content": "You must override the adapter's <bpt id=\"p179\">*</bpt>getView<ept id=\"p179\">*</ept><ph id=\"ph105\"/> method.",
          "pos": [
            0,
            107
          ]
        },
        {
          "content": "This sample code is one example of how to do this: details will vary with your application.",
          "pos": [
            108,
            199
          ]
        }
      ]
    },
    {
      "pos": [
        32875,
        32938
      ],
      "content": "We create an instance of this class in our Activity as follows:"
    },
    {
      "pos": [
        33038,
        33329
      ],
      "content": "Note that the second parameter to the ToDoItemAdapter constructor is a reference to the layout. The call to the constructor is followed by the following code which first gets a reference to the <bpt id=\"p180\">**</bpt>ListView<ept id=\"p180\">**</ept>, and next calls <bpt id=\"p181\">*</bpt>setAdapter<ept id=\"p181\">*</ept><ph id=\"ph106\"/> to configure itself to use the adapter we just created:",
      "nodes": [
        {
          "content": "Note that the second parameter to the ToDoItemAdapter constructor is a reference to the layout.",
          "pos": [
            0,
            95
          ]
        },
        {
          "content": "The call to the constructor is followed by the following code which first gets a reference to the <bpt id=\"p180\">**</bpt>ListView<ept id=\"p180\">**</ept>, and next calls <bpt id=\"p181\">*</bpt>setAdapter<ept id=\"p181\">*</ept><ph id=\"ph106\"/> to configure itself to use the adapter we just created:",
          "pos": [
            96,
            391
          ]
        }
      ]
    },
    {
      "pos": [
        33474,
        33497
      ],
      "content": "How to: Use the adapter"
    },
    {
      "pos": [
        33499,
        33708
      ],
      "content": "You are now ready to use data binding. The following code shows how to get the items in the mobile service table, clear the apapter, and then call the adapter's <bpt id=\"p182\">*</bpt>add<ept id=\"p182\">*</ept><ph id=\"ph107\"/> method to fill it with the returned items.",
      "nodes": [
        {
          "content": "You are now ready to use data binding.",
          "pos": [
            0,
            38
          ]
        },
        {
          "content": "The following code shows how to get the items in the mobile service table, clear the apapter, and then call the adapter's <bpt id=\"p182\">*</bpt>add<ept id=\"p182\">*</ept><ph id=\"ph107\"/> method to fill it with the returned items.",
          "pos": [
            39,
            267
          ]
        }
      ]
    },
    {
      "pos": [
        34551,
        34904
      ],
      "content": "You must also call the adapter any time you modify the <bpt id=\"p183\">*</bpt>ToDoItem<ept id=\"p183\">*</ept><ph id=\"ph108\"/> table if you want to display the results of doing that. Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection. When you insert an item you call the <bpt id=\"p184\">*</bpt>add<ept id=\"p184\">*</ept><ph id=\"ph109\"/> method on the adapter, when deleting, you call the <bpt id=\"p185\">*</bpt>remove<ept id=\"p185\">*</ept><ph id=\"ph110\"/> method.",
      "nodes": [
        {
          "content": "You must also call the adapter any time you modify the <bpt id=\"p183\">*</bpt>ToDoItem<ept id=\"p183\">*</ept><ph id=\"ph108\"/> table if you want to display the results of doing that.",
          "pos": [
            0,
            179
          ]
        },
        {
          "content": "Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection.",
          "pos": [
            180,
            300
          ]
        },
        {
          "content": "When you insert an item you call the <bpt id=\"p184\">*</bpt>add<ept id=\"p184\">*</ept><ph id=\"ph109\"/> method on the adapter, when deleting, you call the <bpt id=\"p185\">*</bpt>remove<ept id=\"p185\">*</ept><ph id=\"ph110\"/> method.",
          "pos": [
            301,
            527
          ]
        }
      ]
    },
    {
      "pos": [
        34906,
        34908
      ],
      "content": "##"
    },
    {
      "pos": [
        34933,
        34958
      ],
      "content": "How to: Call a custom API"
    },
    {
      "pos": [
        34960,
        35445
      ],
      "content": "A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation. By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON. For an example of how to create a custom API in your mobile service, see <bpt id=\"p186\">[</bpt>How to: define a custom API endpoint<ept id=\"p186\">](mobile-services-dotnet-backend-define-custom-api.md)</ept>.",
      "nodes": [
        {
          "content": "A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.",
          "pos": [
            0,
            151
          ]
        },
        {
          "content": "By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.",
          "pos": [
            152,
            319
          ]
        },
        {
          "content": "For an example of how to create a custom API in your mobile service, see <bpt id=\"p186\">[</bpt>How to: define a custom API endpoint<ept id=\"p186\">](mobile-services-dotnet-backend-define-custom-api.md)</ept>.",
          "pos": [
            320,
            527
          ]
        }
      ]
    },
    {
      "pos": [
        35566,
        35568
      ],
      "content": "##"
    },
    {
      "pos": [
        35597,
        35623
      ],
      "content": "How to: Authenticate users"
    },
    {
      "pos": [
        35625,
        36131
      ],
      "content": "Mobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory. You can set permissions on tables to restrict access for specific operations to only authenticated users. You can also use the identity of authenticated users to implement authorization rules in your backend. For more information, see <bpt id=\"p187\">[</bpt>Get started with authentication<ept id=\"p187\">](http://go.microsoft.com/fwlink/p/?LinkId=296316)</ept>.",
      "nodes": [
        {
          "content": "Mobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory.",
          "pos": [
            0,
            187
          ]
        },
        {
          "content": "You can set permissions on tables to restrict access for specific operations to only authenticated users.",
          "pos": [
            188,
            293
          ]
        },
        {
          "content": "You can also use the identity of authenticated users to implement authorization rules in your backend.",
          "pos": [
            294,
            396
          ]
        },
        {
          "content": "For more information, see <bpt id=\"p187\">[</bpt>Get started with authentication<ept id=\"p187\">](http://go.microsoft.com/fwlink/p/?LinkId=296316)</ept>.",
          "pos": [
            397,
            548
          ]
        }
      ]
    },
    {
      "pos": [
        36133,
        36494
      ],
      "content": "Two authentication flows are supported: a <bpt id=\"p188\">*</bpt>server<ept id=\"p188\">*</ept><ph id=\"ph112\"/> flow and a <bpt id=\"p189\">*</bpt>client<ept id=\"p189\">*</ept><ph id=\"ph113\"/> flow. The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface. The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs.",
      "nodes": [
        {
          "content": "Two authentication flows are supported: a <bpt id=\"p188\">*</bpt>server<ept id=\"p188\">*</ept><ph id=\"ph112\"/> flow and a <bpt id=\"p189\">*</bpt>client<ept id=\"p189\">*</ept><ph id=\"ph113\"/> flow.",
          "pos": [
            0,
            192
          ]
        },
        {
          "content": "The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.",
          "pos": [
            193,
            318
          ]
        },
        {
          "content": "The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs.",
          "pos": [
            319,
            477
          ]
        }
      ]
    },
    {
      "pos": [
        36496,
        36558
      ],
      "content": "Three steps are required to enable authentication in your app:"
    },
    {
      "pos": [
        36562,
        36645
      ],
      "content": "Register your app for authentication with a provider, and configure Mobile Services"
    },
    {
      "pos": [
        36648,
        36702
      ],
      "content": "Restrict table permissions to authenticated users only"
    },
    {
      "pos": [
        36705,
        36740
      ],
      "content": "Add authentication code to your app"
    },
    {
      "pos": [
        36743,
        36849
      ],
      "content": "Mobile Services supports the following existing identity providers that you can use to authenticate users:"
    },
    {
      "pos": [
        36853,
        36870
      ],
      "content": "Microsoft Account"
    },
    {
      "pos": [
        36873,
        36881
      ],
      "content": "Facebook"
    },
    {
      "pos": [
        36884,
        36891
      ],
      "content": "Twitter"
    },
    {
      "pos": [
        36894,
        36900
      ],
      "content": "Google"
    },
    {
      "pos": [
        36903,
        36925
      ],
      "content": "Azure Active Directory"
    },
    {
      "pos": [
        36927,
        37101
      ],
      "content": "You can set permissions on tables to restrict access for specific operations to only authenticated users. You can also use the ID of an authenticated user to modify requests.",
      "nodes": [
        {
          "content": "You can set permissions on tables to restrict access for specific operations to only authenticated users.",
          "pos": [
            0,
            105
          ]
        },
        {
          "content": "You can also use the ID of an authenticated user to modify requests.",
          "pos": [
            106,
            174
          ]
        }
      ]
    },
    {
      "pos": [
        37103,
        37311
      ],
      "content": "These first two tasks are done using the <bpt id=\"p190\">[</bpt>Azure classic portal<ept id=\"p190\">](https://manage.windowsazure.com/)</ept>. For more information, see <bpt id=\"p191\">[</bpt>Get started with authentication<ept id=\"p191\">](http://go.microsoft.com/fwlink/p/?LinkId=296316)</ept>.",
      "nodes": [
        {
          "content": "These first two tasks are done using the <bpt id=\"p190\">[</bpt>Azure classic portal<ept id=\"p190\">](https://manage.windowsazure.com/)</ept>.",
          "pos": [
            0,
            140
          ]
        },
        {
          "content": "For more information, see <bpt id=\"p191\">[</bpt>Get started with authentication<ept id=\"p191\">](http://go.microsoft.com/fwlink/p/?LinkId=296316)</ept>.",
          "pos": [
            141,
            292
          ]
        }
      ]
    },
    {
      "pos": [
        37339,
        37382
      ],
      "content": "How to: Add authentication code to your app"
    },
    {
      "pos": [
        37388,
        37452
      ],
      "content": "Add the following import statements to your app's activity file."
    },
    {
      "pos": [
        37921,
        38142
      ],
      "content": "In the <bpt id=\"p192\">**</bpt>onCreate<ept id=\"p192\">**</ept><ph id=\"ph114\"/> method of the activity class, add the following line of code after the code that creates the <ph id=\"ph115\">`MobileServiceClient`</ph><ph id=\"ph116\"/> object: we assume that the reference to the <ph id=\"ph117\">`MobileServiceClient`</ph><ph id=\"ph118\"/> object is <bpt id=\"p193\">*</bpt>mClient<ept id=\"p193\">*</ept>."
    },
    {
      "pos": [
        38837,
        39016
      ],
      "content": "This code authenticates the user using a Google login. A dialog is displayed which displays the ID of the authenticated user. You cannot proceed without a positive authentication.",
      "nodes": [
        {
          "content": "This code authenticates the user using a Google login.",
          "pos": [
            0,
            54
          ]
        },
        {
          "content": "A dialog is displayed which displays the ID of the authenticated user.",
          "pos": [
            55,
            125
          ]
        },
        {
          "content": "You cannot proceed without a positive authentication.",
          "pos": [
            126,
            179
          ]
        }
      ]
    },
    {
      "pos": [
        39024,
        39249
      ],
      "content": "<ph id=\"ph119\">[AZURE.NOTE]</ph><ph id=\"ph120\"/> If you are using an identity provider other than Google, change the value passed to the <bpt id=\"p194\">**</bpt>login<ept id=\"p194\">**</ept><ph id=\"ph121\"/> method above to one of the following: <bpt id=\"p195\">_</bpt>MicrosoftAccount<ept id=\"p195\">_</ept>, <bpt id=\"p196\">_</bpt>Facebook<ept id=\"p196\">_</ept>, <bpt id=\"p197\">_</bpt>Twitter<ept id=\"p197\">_</ept>, or <bpt id=\"p198\">_</bpt>WindowsAzureActiveDirectory<ept id=\"p198\">_</ept>."
    },
    {
      "pos": [
        39255,
        39320
      ],
      "content": "When you run the app, sign in with your chosen identity provider."
    },
    {
      "pos": [
        39349,
        39384
      ],
      "content": "How to: Cache authentication tokens"
    },
    {
      "pos": [
        39386,
        39556
      ],
      "content": "This section shows how to cache an authentication token. Do this to prevent users from having to authenticate again if app is \"hibernated\" while the token is still valid.",
      "nodes": [
        {
          "content": "This section shows how to cache an authentication token.",
          "pos": [
            0,
            56
          ]
        },
        {
          "content": "Do this to prevent users from having to authenticate again if app is \"hibernated\" while the token is still valid.",
          "pos": [
            57,
            170
          ]
        }
      ]
    },
    {
      "pos": [
        39558,
        39937
      ],
      "content": "Caching authentication tokens requires you to store the User ID and authentication token locally on the device. The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data. However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.",
      "nodes": [
        {
          "content": "Caching authentication tokens requires you to store the User ID and authentication token locally on the device.",
          "pos": [
            0,
            111
          ]
        },
        {
          "content": "The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data.",
          "pos": [
            112,
            271
          ]
        },
        {
          "content": "However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.",
          "pos": [
            272,
            379
          ]
        }
      ]
    },
    {
      "pos": [
        39939,
        40084
      ],
      "content": "The following code snippet demonstrates obtaining a token for a Microsoft Account log in. The token is cached and reloaded if the cache is found.",
      "nodes": [
        {
          "content": "The following code snippet demonstrates obtaining a token for a Microsoft Account log in.",
          "pos": [
            0,
            89
          ]
        },
        {
          "content": "The token is cached and reloaded if the cache is found.",
          "pos": [
            90,
            145
          ]
        }
      ]
    },
    {
      "pos": [
        41985,
        42510
      ],
      "content": "So what happens if your token expires? In this case, when you try to use it to connect, you will get a <bpt id=\"p199\">*</bpt>401 unauthorized<ept id=\"p199\">*</ept><ph id=\"ph122\"/> response. The user must then log in to obtain new tokens. You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services. The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401.",
      "nodes": [
        {
          "content": "So what happens if your token expires?",
          "pos": [
            0,
            38
          ]
        },
        {
          "content": "In this case, when you try to use it to connect, you will get a <bpt id=\"p199\">*</bpt>401 unauthorized<ept id=\"p199\">*</ept><ph id=\"ph122\"/> response.",
          "pos": [
            39,
            189
          ]
        },
        {
          "content": "The user must then log in to obtain new tokens.",
          "pos": [
            190,
            237
          ]
        },
        {
          "content": "You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services.",
          "pos": [
            238,
            437
          ]
        },
        {
          "content": "The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401.",
          "pos": [
            438,
            583
          ]
        }
      ]
    },
    {
      "pos": [
        42513,
        42515
      ],
      "content": "##"
    },
    {
      "pos": [
        42541,
        42569
      ],
      "content": "How to: Customize the client"
    },
    {
      "pos": [
        42571,
        42666
      ],
      "content": "There are several ways for you to customize the default behavior of the Mobile Services client."
    },
    {
      "pos": [
        42694,
        42727
      ],
      "content": "How to: Customize request headers"
    },
    {
      "pos": [
        42729,
        42866
      ],
      "content": "You might want to attach a custom header to every outgoing request. You can accomplish that by configuring a <bpt id=\"p200\">**</bpt>ServiceFilter<ept id=\"p200\">**</ept><ph id=\"ph123\"/> like this:",
      "nodes": [
        {
          "content": "You might want to attach a custom header to every outgoing request.",
          "pos": [
            0,
            67
          ]
        },
        {
          "content": "You can accomplish that by configuring a <bpt id=\"p200\">**</bpt>ServiceFilter<ept id=\"p200\">**</ept><ph id=\"ph123\"/> like this:",
          "pos": [
            68,
            195
          ]
        }
      ]
    },
    {
      "pos": [
        43685,
        43716
      ],
      "content": "How to: Customize serialization"
    },
    {
      "pos": [
        43718,
        44088
      ],
      "content": "Mobile Services assumes by default that the table names, column names and data types on the server all match exactly what is on the client. But there can be any number of reasons why the server and client names might not match. One example might be if you have an existing client that you want to change so that it uses Mobile Services instead of a competitor's product.",
      "nodes": [
        {
          "content": "Mobile Services assumes by default that the table names, column names and data types on the server all match exactly what is on the client.",
          "pos": [
            0,
            139
          ]
        },
        {
          "content": "But there can be any number of reasons why the server and client names might not match.",
          "pos": [
            140,
            227
          ]
        },
        {
          "content": "One example might be if you have an existing client that you want to change so that it uses Mobile Services instead of a competitor's product.",
          "pos": [
            228,
            370
          ]
        }
      ]
    },
    {
      "pos": [
        44090,
        44149
      ],
      "content": "You might want to do the following kinds of customizations:"
    },
    {
      "pos": [
        44153,
        44254
      ],
      "content": "The column names used in the mobile-  service table don't match the names you are using in the client"
    },
    {
      "pos": [
        44257,
        44349
      ],
      "content": "Use a mobile service table that has a different name than the class it maps to in the client"
    },
    {
      "pos": [
        44352,
        44393
      ],
      "content": "Turn on automatic property capitalization"
    },
    {
      "pos": [
        44396,
        44431
      ],
      "content": "Add complex properties to an object"
    },
    {
      "pos": [
        44459,
        44504
      ],
      "content": "How to: Map different client and server names"
    },
    {
      "pos": [
        44506,
        44632
      ],
      "content": "Suppose that your Java client code uses standard Java-style names for the <bpt id=\"p201\">*</bpt>ToDoItem<ept id=\"p201\">*</ept><ph id=\"ph124\"/> object properties, such as the following."
    },
    {
      "pos": [
        44636,
        44639
      ],
      "content": "mId"
    },
    {
      "pos": [
        44642,
        44647
      ],
      "content": "mText"
    },
    {
      "pos": [
        44650,
        44659
      ],
      "content": "mComplete"
    },
    {
      "pos": [
        44662,
        44671
      ],
      "content": "mDuration"
    },
    {
      "pos": [
        44674,
        44938
      ],
      "content": "You must serialize the client names into JSON names that match the column names of the <bpt id=\"p202\">*</bpt>ToDoItem<ept id=\"p202\">*</ept><ph id=\"ph125\"/> table on the server. The following code, which makes use of the <ph id=\"ph126\">&lt;a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph127\">&lt;/a&gt;</ph><ph id=\"ph128\"/> library does this.",
      "nodes": [
        {
          "content": "You must serialize the client names into JSON names that match the column names of the <bpt id=\"p202\">*</bpt>ToDoItem<ept id=\"p202\">*</ept><ph id=\"ph125\"/> table on the server.",
          "pos": [
            0,
            176
          ]
        },
        {
          "content": "The following code, which makes use of the <ph id=\"ph126\">&lt;a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph127\">&lt;/a&gt;</ph><ph id=\"ph128\"/> library does this.",
          "pos": [
            177,
            390
          ]
        }
      ]
    },
    {
      "pos": [
        45306,
        45374
      ],
      "content": "How to: Map different table names between client and mobile services"
    },
    {
      "pos": [
        45376,
        45496
      ],
      "content": "Mapping the client table name to a different mobile services table name is easy, we just use one of the overrides of the"
    },
    {
      "pos": [
        45571,
        45581
      ],
      "content": "getTable()"
    },
    {
      "pos": [
        45586,
        45626
      ],
      "content": "function, as seen in the following code."
    },
    {
      "pos": [
        45729,
        45766
      ],
      "content": "How to: Automate column name mappings"
    },
    {
      "pos": [
        45768,
        45973
      ],
      "content": "Mapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section. But suppose our table has a lot of columns, say 20 or 30. It turns out that we can call the",
      "nodes": [
        {
          "content": "Mapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section.",
          "pos": [
            0,
            113
          ]
        },
        {
          "content": "But suppose our table has a lot of columns, say 20 or 30.",
          "pos": [
            114,
            171
          ]
        },
        {
          "content": "It turns out that we can call the",
          "pos": [
            172,
            205
          ]
        }
      ]
    },
    {
      "pos": [
        46049,
        46053
      ],
      "content": "gson"
    },
    {
      "pos": [
        46058,
        46183
      ],
      "content": "API and specify a conversion strategy that will apply to every column, and avoid having to annotate every single column name."
    },
    {
      "pos": [
        46185,
        46206
      ],
      "content": "To do this we use the"
    },
    {
      "pos": [
        46282,
        46286
      ],
      "content": "gson"
    },
    {
      "pos": [
        46291,
        46434
      ],
      "content": "library which the Android client library uses behind the scenes to serialize Java objects to JSON data, which is sent to Azure Mobile Services."
    },
    {
      "pos": [
        46436,
        46731
      ],
      "content": "The following code uses the <bpt id=\"p203\">*</bpt>setFieldNamingStrategy()<ept id=\"p203\">*</ept><ph id=\"ph129\"/> method, in which we define a <bpt id=\"p204\">*</bpt>FieldNamingStrategy()<ept id=\"p204\">*</ept><ph id=\"ph130\"/> method. This method says to delete the initial character (an \"m\"), and then lower-case the next character, for every field name. This code also enables pretty-printing of the output JSON.",
      "nodes": [
        {
          "content": "The following code uses the <bpt id=\"p203\">*</bpt>setFieldNamingStrategy()<ept id=\"p203\">*</ept><ph id=\"ph129\"/> method, in which we define a <bpt id=\"p204\">*</bpt>FieldNamingStrategy()<ept id=\"p204\">*</ept><ph id=\"ph130\"/> method.",
          "pos": [
            0,
            231
          ]
        },
        {
          "content": "This method says to delete the initial character (an \"m\"), and then lower-case the next character, for every field name.",
          "pos": [
            232,
            352
          ]
        },
        {
          "content": "This code also enables pretty-printing of the output JSON.",
          "pos": [
            353,
            411
          ]
        }
      ]
    },
    {
      "pos": [
        47165,
        47255
      ],
      "content": "This code must be executed prior to any method calls on the Mobile Services client object."
    },
    {
      "pos": [
        47283,
        47337
      ],
      "content": "How to: Store an object or array property into a table"
    },
    {
      "pos": [
        47339,
        47824
      ],
      "content": "So far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table. Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table. For example we might want to add an array of strings to the client object. It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.",
      "nodes": [
        {
          "content": "So far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table.",
          "pos": [
            0,
            168
          ]
        },
        {
          "content": "Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table.",
          "pos": [
            169,
            292
          ]
        },
        {
          "content": "For example we might want to add an array of strings to the client object.",
          "pos": [
            293,
            367
          ]
        },
        {
          "content": "It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.",
          "pos": [
            368,
            485
          ]
        }
      ]
    },
    {
      "pos": [
        47826,
        47886
      ],
      "content": "To see an example of how to do this, check out the blog post"
    },
    {
      "pos": [
        47996,
        48031
      ],
      "content": "Customizing serialization using the"
    },
    {
      "pos": [
        48107,
        48111
      ],
      "content": "gson"
    },
    {
      "pos": [
        48116,
        48161
      ],
      "content": "library in the Mobile Services Android client"
    },
    {
      "pos": [
        48165,
        48166
      ],
      "content": "."
    },
    {
      "pos": [
        48168,
        48313
      ],
      "content": "This general method can be used whenever we have a complex object that is not automatically serializable into JSON and the mobile services table."
    },
    {
      "pos": [
        49587,
        49757
      ],
      "content": "[Get started with Mobile Services]: mobile-services-android-get-started.md\n[ASCII control codes C0 and C1]: http://en.wikipedia.org/wiki/Data_link_escape_character#C1_set"
    }
  ],
  "content": "<properties\n    pageTitle=\"Working with the Mobile Services Android Client Library\"\n    description=\"Learn how to use an Android client for Azure Mobile Services.\"\n    services=\"mobile-services\"\n    documentationCenter=\"android\"\n    authors=\"RickSaling\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-android\"\n    ms.devlang=\"java\"\n    ms.topic=\"article\"\n    ms.date=\"01/20/2016\"\n    ms.author=\"ricksal\"/>\n\n\n# How to use the Android client library for Mobile Services\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n\n[AZURE.INCLUDE [mobile-services-selector-client-library](../../includes/mobile-services-selector-client-library.md)]\n\nThis guide shows you how to perform common scenarios using the Android client for Azure Mobile Services.  The scenarios covered include querying for data; inserting, updating, and deleting data, authenticating users, handling errors, and customizing the client.\n\nIf you are new to Mobile Services, you should first complete the quickstart tutorial [Get started with Mobile Services]. Successfully completing that tutorial ensures that you will have  installed Android Studio; it will help you configure your account and create your first mobile service, and install the Mobile Services SDK, which supports Android version 2.2 or later, but we recommend building against Android version 4.2 or later.\n\nYou can find the Javadocs API reference for the Android client library [here](http://go.microsoft.com/fwlink/p/?LinkId=298735).\n\n[AZURE.INCLUDE [mobile-services-concepts](../../includes/mobile-services-concepts.md)]\n\n##<a name=\"setup\"></a>Setup and Prerequisites\n\nWe assume that you have created a mobile service and a table. For more information see [Create a table](http://go.microsoft.com/fwlink/p/?LinkId=298592). In the code used in this topic, we assume the table is named *ToDoItem*, and that it has the following columns:\n\n- id\n- text\n- complete\n\nThe corresponding typed client side object is the following:\n\n    public class ToDoItem {\n        private String id;\n        private String text;\n        private Boolean complete;\n    }\n\nWhen dynamic schema is enabled, Azure Mobile Services automatically generates new columns based on the object in the insert or update request. For more information, see [Dynamic schema](http://go.microsoft.com/fwlink/p/?LinkId=296271).\n\n##<a name=\"create-client\"></a>How to: Create the Mobile Services client\nThe following code creates the [MobileServiceClient](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html) object that is used to access your mobile service. The code goes in the `onCreate` method of the Activity class specified in *AndroidManifest.xml* as a **MAIN** action and **LAUNCHER** category.\n\n        MobileServiceClient mClient = new MobileServiceClient(\n                \"MobileServiceUrl\", // Replace with the above Site URL\n                \"AppKey\",           // replace with the Application Key\n                this)\n\nIn the code above, replace `MobileServiceUrl` and `AppKey` with the mobile service URL and application key, in that order. Both of these are available on the Azure classic portal, by selecting your mobile service and then clicking on *Dashboard*.\n\n##<a name=\"instantiating\"></a>How to: Create a table reference\n\nThe easiest way to query or modify data in the mobile service is by using the *typed programming model*, since Java is a strongly typed language (later on we will discuss the *untyped* model). This model provides seamless serialization and deserialization to JSON using the [gson](http://go.microsoft.com/fwlink/p/?LinkId=290801) library when sending data between the client and the mobile service: the developer doesn't have to do anything, the framework handles it all.\n\nThe first thing you do to query or modify data is to create a [MobileServiceTable](http://go.microsoft.com/fwlink/p/?LinkId=296835) object by calling the **getTable** method on the [**MobileServiceClient**](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html).  We will look at two overloads of this method:\n\n    public class MobileServiceClient {\n        public <E> MobileServiceTable<E> getTable(Class<E> clazz);\n        public <E> MobileServiceTable<E> getTable(String name, Class<E> clazz);\n    }\n\nIn the following code, *mClient* is a reference to your mobile service client.\n\nThe [first overload](http://go.microsoft.com/fwlink/p/?LinkId=296839) is used where the class name and the table name are the same:\n\n        MobileServiceTable<ToDoItem> mToDoTable = mClient.getTable(ToDoItem.class);\n\n\nThe [2nd overload](http://go.microsoft.com/fwlink/p/?LinkId=296840) is used when the table name is different from the type name.\n\n        MobileServiceTable<ToDoItem> mToDoTable = mClient.getTable(\"ToDoItemBackup\", ToDoItem.class);\n\n## <a name=\"api\"></a>The API structure\n\nSince version 2.0 of the client library, mobile services table operations use the [Future](http://developer.android.com/reference/java/util/concurrent/Future.html) and [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) objects in all of the asynchronous operations such as methods involving queries and operations like inserts, updates and deletes. This makes it easier to perform multiple operations (while on a background thread) without having to deal with multiple nested callbacks.\n\n\n##<a name=\"querying\"></a>How to: Query data from a mobile service\n\nThis section describes how to issue queries to the mobile service. Subsections describe diffent aspects such as sorting, filtering, and paging. Finally, we discuss how you can concatenate these operations together.\n\n### <a name=\"showAll\"></a>How to: Return all Items from a Table\n\nThe following code returns all items in the *ToDoItem* table. It displays them in the UI by adding the items to an adapter. This code is similar to what is in the the quickstart tutorial [Get started with Mobile Services].\n\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n\n                    final MobileServiceList<ToDoItem> result = mToDoTable.execute().get();\n                    runOnUiThread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            mAdapter.clear();\n                            for (ToDoItem item : result) {\n                                mAdapter.add(item);\n                            }\n                        }\n                    });\n               } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n               }\n               return result;\n            }\n        }.execute();\n\n\nQueries like this one use the [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) object.\n\nThe *result* variable returns the result set from the query, and the code following the `mToDoTable.execute().get()` statement shows how to display the individual rows.\n\n\n### <a name=\"filtering\"></a>How to: Filter returned data\n\nThe following code returns all items from the *ToDoItem* table whose *complete* field equals *false*. *mToDoTable* is the reference to the mobile service table that we created previously.\n\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final MobileServiceList<ToDoItem> result =\n                        mToDoTable.where().field(\"complete\").eq(false).execute().get();\n                    for (ToDoItem item : result) {\n                        Log.i(TAG, \"Read object with ID \" + item.id);\n                    }\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n\n\n\nYou start a filter with a [**where**](http://go.microsoft.com/fwlink/p/?LinkId=296867) method call on the table reference. This is followed by a [**field**](http://go.microsoft.com/fwlink/p/?LinkId=296869) method call followed by a method call that specifies the logical predicate. Possible predicate methods include [**eq**](http://go.microsoft.com/fwlink/p/?LinkId=298461), [**ne**](http://go.microsoft.com/fwlink/p/?LinkId=298462), [**gt**](http://go.microsoft.com/fwlink/p/?LinkId=298463), [**ge**](http://go.microsoft.com/fwlink/p/?LinkId=298464), [**lt**](http://go.microsoft.com/fwlink/p/?LinkId=298465), [**le**](http://go.microsoft.com/fwlink/p/?LinkId=298466) etc.\n\nThis is sufficient for comparing number and string fields to specific values. But you can do a lot more.\n\nFor example, you can filter on dates. You can compare the entire date field, but you can also compare parts of the date, with methods such as [**year**](http://go.microsoft.com/fwlink/p/?LinkId=298467), [**month**](http://go.microsoft.com/fwlink/p/?LinkId=298468), [**day**](http://go.microsoft.com/fwlink/p/?LinkId=298469), [**hour**](http://go.microsoft.com/fwlink/p/?LinkId=298470), [**minute**](http://go.microsoft.com/fwlink/p/?LinkId=298471) and [**second**](http://go.microsoft.com/fwlink/p/?LinkId=298472). The following partial code adds a filter for items whose *due date* equals 2013.\n\n        mToDoTable.where().year(\"due\").eq(2013).execute().get();\n\nYou can do a wide variety of complex filters on string fields with methods like [**startsWith**](http://go.microsoft.com/fwlink/p/?LinkId=298473), [**endsWith**](http://go.microsoft.com/fwlink/p/?LinkId=298474), [**concat**](http://go.microsoft.com/fwlink/p/?LinkId=298475), [**subString**](http://go.microsoft.com/fwlink/p/?LinkId=298477), [**indexOf**](http://go.microsoft.com/fwlink/p/?LinkId=298488), [**replace**](http://go.microsoft.com/fwlink/p/?LinkId=298491), [**toLower**](http://go.microsoft.com/fwlink/p/?LinkId=298492), [**toUpper**](http://go.microsoft.com/fwlink/p/?LinkId=298493), [**trim**](http://go.microsoft.com/fwlink/p/?LinkId=298495), and [**length**](http://go.microsoft.com/fwlink/p/?LinkId=298496). The following partial code filters for table rows where the *text* column starts with \"PRI0\".\n\n        mToDoTable.where().startsWith(\"text\", \"PRI0\").execute().get();\n\nNumber fields also allow a wide variety of more complex filters with methods like [**add**](http://go.microsoft.com/fwlink/p/?LinkId=298497), [**sub**](http://go.microsoft.com/fwlink/p/?LinkId=298499), [**mul**](http://go.microsoft.com/fwlink/p/?LinkId=298500), [**div**](http://go.microsoft.com/fwlink/p/?LinkId=298502), [**mod**](http://go.microsoft.com/fwlink/p/?LinkId=298503), [**floor**](http://go.microsoft.com/fwlink/p/?LinkId=298505), [**ceiling**](http://go.microsoft.com/fwlink/p/?LinkId=298506), and [**round**](http://go.microsoft.com/fwlink/p/?LinkId=298507). The following partial code filters for table rows where the *duration* is an even number.\n\n        mToDoTable.where().field(\"duration\").mod(2).eq(0).execute().get();\n\n\nYou can combine predicates with methods like [**and**](http://go.microsoft.com/fwlink/p/?LinkId=298512), [**or**](http://go.microsoft.com/fwlink/p/?LinkId=298514) and [**not**](http://go.microsoft.com/fwlink/p/?LinkId=298515). This partial code combines two of the above examples.\n\n        mToDoTable.where().year(\"due\").eq(2013).and().startsWith(\"text\", \"PRI0\")\n                    .execute().get();\n\nAnd you can group and nest logical operators, as shown in this partial code:\n\n        mToDoTable.where()\n                    .year(\"due\").eq(2013)\n                        .and\n                    (startsWith(\"text\", \"PRI0\").or().field(\"duration\").gt(10))\n                    .execute().get();\n\nFor more detailed discussion and examples of filtering, see [Exploring the richness of the Mobile Services Android client query model](http://hashtagfail.com/post/46493261719/mobile-services-android-querying).\n\n### <a name=\"sorting\"></a>How to: Sort returned data\n\nThe following code returns all items from a table of *ToDoItems* sorted ascending by the *text* field. *mToDoTable* is the reference to the mobile mervice table that you created previously.\n\n        mToDoTable.orderBy(\"text\", QueryOrder.Ascending).execute().get();\n\nThe first parameter of the [**orderBy**](http://go.microsoft.com/fwlink/p/?LinkId=298519) method is a string equal to the name of the field on which to sort.\n\nThe second parameter uses the [**QueryOrder**](http://go.microsoft.com/fwlink/p/?LinkId=298521) enumeration to specify whether to sort ascending or descending.\n\nNote that if you are filtering using the ***where*** method, the ***where*** method must be invoked prior to the ***orderBy*** method.\n\n### <a name=\"paging\"></a>How to: Return data in pages\n\nThe first example shows how to select the top 5 items from a table. The query returns the items from a table of  *ToDoItems*. *mToDoTable* is the reference to the mobile service table that you created previously.\n\n       final MobileServiceList<ToDoItem> result = mToDoTable.top(5).execute().get();\n\n\nNext, we define a query that skips the first 5 items, and then returns the next 5.\n\n        mToDoTable.skip(5).top(5).execute().get();\n\n\n### <a name=\"selecting\"></a>How to: Select specific columns\n\nThe following code illustrates how to return all items from a table of  *ToDoItems*, but only displays the *complete* and *text* fields. *mToDoTable* is the reference to the mobile service table that we created previously.\n\n        mToDoTable.select(\"complete\", \"text\").execute().get();\n\n\nHere the parameters to the select function are the string names of the table's columns that you want to return.\n\nThe [**select**](http://go.microsoft.com/fwlink/p/?LinkId=290689) method needs to follow methods like [**where**](http://go.microsoft.com/fwlink/p/?LinkId=296296) and [**orderBy**](http://go.microsoft.com/fwlink/p/?LinkId=296313), if they are present. It can be followed by methods like [**top**](http://go.microsoft.com/fwlink/p/?LinkId=298731).\n\n### <a name=\"chaining\"></a>How to: Concatenate query methods\n\nThe methods used in querying mobile mervice tables can be concatenated. This allows you to do things like select specific columns of filtered rows that are sorted and paged. You can create quite complex logical filters.\n\nWhat makes this work is that the query methods you use return [**MobileServiceQuery&lt;T&gt;**](http://go.microsoft.com/fwlink/p/?LinkId=298551) objects, which can in turn have additional methods invoked on them. To end the series of methods and actually run the query, you call the [**execute**](http://go.microsoft.com/fwlink/p/?LinkId=298554) method.\n\nHere's a code sample where *mToDoTable* is a reference to the mobile services *ToDoItem* table.\n\n        mToDoTable.where().year(\"due\").eq(2013)\n                        .and().startsWith(\"text\", \"PRI0\")\n                        .or().field(\"duration\").gt(10)\n                    .select(\"id\", \"complete\", \"text\", \"duration\")\n                    .orderBy(duration, QueryOrder.Ascending).top(20)\n                    .execute().get();\n\nThe main requirement in chaining methods together is that the *where* method and predicates need to come first. After that, you can call subsequent methods in the order that best meets the needs of your application.\n\n\n##<a name=\"inserting\"></a>How to: Insert data into a mobile service\n\nThe following code shows how to insert a new row into a table.\n\nFirst you instantiate an instance of the *ToDoItem* class and set its properties.\n\n        ToDoItem mToDoItem = new ToDoItem();\n        mToDoItem.text = \"Test Program\";\n        mToDoItem.complete = false;\n\n Next you execute the following code:\n\n        // Insert the new item\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.insert(item).get();\n                    if (!item.isComplete()) {\n                        runOnUiThread(new Runnable() {\n                            public void run() {\n                                mAdapter.add(item);\n                            }\n                        });\n                    }\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n\n\nThis code inserts the new item, and adds it to the adapter so it displays in the UI.\n\nMobile Services supports unique custom string values for the table id. This allows applications to use custom values such as email addresses or usernames for the id column of a Mobile Services table. For example if you wanted to identify each record by an email address, you could use the following JSON object.\n\n        ToDoItem mToDoItem = new ToDoItem();\n        mToDoItem.id = \"myemail@mydomain.com\";\n        mToDoItem.text = \"Test Program\";\n        mToDoItem.complete = false;\n\nIf a string id value is not provided when inserting new records into a table, Mobile Services will generate a unique value for the id.\n\nSupporting string ids provides the following advantages to developers\n\n+ Ids can be generated without making a roundtrip to the database.\n+ Records are easier to merge from different tables or databases.\n+ Ids values can integrate better with an application's logic.\n\nYou can also use server scripts to set id values. The script example below generates a custom GUID and assigns it to a new record's id. This is similar to the id value that Mobile Services would generate if you didn't pass in a value for a record's id.\n\n    //Example of generating an id. This is not required since Mobile Services\n    //will generate an id if one is not passed in.\n    item.id = item.id || newGuid();\n    request.execute();\n\n    function newGuid() {\n        var pad4 = function(str) { return \"0000\".substring(str.length) + str; };\n        var hex4 = function () { return pad4(Math.floor(Math.random() * 0x10000 /* 65536 */ ).toString(16)); };\n        return (hex4() + hex4() + \"-\" + hex4() + \"-\" + hex4() + \"-\" + hex4() + \"-\" + hex4() + hex4() + hex4());\n    }\n\n\nIf an application provides a value for an id, Mobile Services will store it as is. This includes leading or trailing white spaces. White space will not be trimmed from value.\n\nThe value for the `id` must be unique and it must not include characters from the following sets:\n\n+ Control characters: [0x0000-0x001F] and [0x007F-0x009F]. For more information, see [ASCII control codes C0 and C1].\n+  Printable characters: **\"**(0x0022), **\\+** (0x002B), **/** (0x002F), **?** (0x003F), **\\\\** (0x005C), **`** (0x0060)\n+  The ids \".\" and \"..\"\n\nYou can alternatively use integer Ids for your tables. In order to use an integer Id you must create your table with the `mobile table create` command using the `--integerId` option. This command is used with the Command-line Interface (CLI) for Azure. For more information on using the CLI, see [CLI to manage Mobile Services tables].\n\n\n##<a name=\"updating\"></a>How to: Update data in a mobile service\n\nThe following code shows how to update data in a table. In this example, *item* is a reference to a row in the *ToDoItem* table, which has had some changes made to it. The following method updates the table and the UI adapter.\n\n    private void updateItem(final ToDoItem item) {\n        if (mClient == null) {\n            return;\n        }\n\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.update(item).get();\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            if (item.isComplete()) {\n                                mAdapter.remove(item);\n                            }\n                            refreshItemsFromTable();\n                        }\n                    });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n##<a name=\"deleting\"></a>How to: Delete data in a mobile service\n\nThe following code shows how to delete data from a table. It deletes an existing item from the ToDoItem table that has had the **Completed** check box on the UI checked.\n\n    public void checkItem(final ToDoItem item) {\n        if (mClient == null) {\n            return;\n        }\n\n        // Set the item as completed and update it in the table\n        item.setComplete(true);\n\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.delete(item);\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            if (item.isComplete()) {\n                                mAdapter.remove(item);\n                            }\n                            refreshItemsFromTable();\n                        }\n                    });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n\nThe following code illustrates another way to do this. It deletes an existing item in the ToDoItem table by specifying the value of the id field of the row to delete (assumed to equal \"2FA404AB-E458-44CD-BC1B-3BC847EF0902\"). In an actual app you would pick up the ID somehow and pass it in as a variable. Here, to simplify testing, you can go to your service in the Azure classic portal, click **Data** and copy an ID that you wish to test with.\n\n    public void deleteItem(View view) {\n\n        final String ID = \"2FA404AB-E458-44CD-BC1B-3BC847EF0902\";\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.delete(ID);\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            refreshItemsFromTable();\n                        }\n               });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n##<a name=\"lookup\"></a>How to: Look up a specific item\nSometimes you want to look up a specific item by its *id*, unlike querying where you typically get a collection of items that satisfy some criteria. The following code shows how to do this, for an *id* value of `0380BAFB-BCFF-443C-B7D5-30199F730335`. In an actual app you would pick up the ID somehow and pass it in as a variable. Here, to simplify testing, you can go to your service in the Azure classic portal, click the **Data** tab and copy an ID that you wish to test with.\n\n    /**\n     * Lookup specific item from table and UI\n     */\n    public void lookup(View view) {\n\n        final String ID = \"0380BAFB-BCFF-443C-B7D5-30199F730335\";\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final ToDoItem result = mToDoTable.lookUp(ID).get();\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            mAdapter.clear();\n                            mAdapter.add(result);\n                        }\n               });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n##<a name=\"untyped\"></a>How to: Work with untyped data\n\nThe untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your mobile service table contains a large number of columns and you only need to reference a few of them. Using the typed model requires you to define all of the mobile service table's columns in your data class. But with the untyped model you only define the columns you need to use.\n\nMost of the API calls for accessing data are similar to the typed programming calls. The main difference is that in the untyped model you invoke methods on the **MobileServiceJsonTable** object, instead of the **MobileServiceTable** object.\n\n\n### <a name=\"json_instance\"></a>How to: Create an instance of an untyped table\n\nSimilar to the typed model, you start by getting a table reference, but in this case it's a [MobileServicesJsonTable](http://go.microsoft.com/fwlink/p/?LinkId=298733) object. You get the reference by calling the [getTable()](http://go.microsoft.com/fwlink/p/?LinkId=298734) method on an instance of the Mobile Services client.\n\nFirst you define the variable:\n\n    /**\n     * Mobile Service Json Table used to access untyped data\n     */\n    private MobileServiceJsonTable mJsonToDoTable;\n\n\n\nOnce you create an instance of the Mobile Services client in the **onCreate** method (here, the *mClient* variable), you next create an instance of a **MobileServiceJsonTable**, with the following code.\n\n\n            // Get the Mobile Service Json Table to use\n            mJsonToDoTable = mClient.getTable(\"ToDoItem\");\n\nOnce you have created an instance of the **MobileServiceJsonTable**, you can call almost all of the methods on it that you can with the typed programming model. However in some cases the methods take an untyped parameter, as we see in the following examples.\n\n### <a name=\"json_insert\"></a>How to: Insert into an untyped table\n\nThe following code shows how to do an insert. The first step is to create a [**JsonObject**](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html), which is part of the <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> library.\n\n        JsonObject item = new JsonObject();\n        item.addProperty(\"text\", \"Wake up\");\n        item.addProperty(\"complete\", false);\n\nThe next step is to insert the object. The callback function passed to the [**insert**](http://go.microsoft.com/fwlink/p/?LinkId=298535) method is an instance of the [**TableJsonOperationCallback**](http://go.microsoft.com/fwlink/p/?LinkId=298532) class. Note how the parameter of the *insert* method is a JsonObject.\n\n        // Insert the new item\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mJsonToDoTable.insert(item).get();\n                    refreshItemsFromTable();\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n\n\nIf you need to get the ID of the inserted object, use this method call:\n\n                jsonObject.getAsJsonPrimitive(\"id\").getAsInt());\n\n\n### <a name=\"json_delete\"></a>How to: Delete from an untyped table\n\nThe following code shows how to delete an instance, in this case, the same instance of a **JsonObject** that was created in the prior *insert* example. Note that the code is the same as with the typed case, but the method has a different signature since it references an **JsonObject**.\n\n\n         mToDoTable.delete(item);\n\n\nYou can also delete an instance directly by using its ID:\n\n         mToDoTable.delete(ID);\n\n\n\n### <a name=\"json_get\"></a>How to: Return all rows from an untyped table\n\nThe following code shows how to retrieve an entire table. Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.\n\n    public void showAllUntyped(View view) {\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final JsonElement result = mJsonToDoTable.execute().get();\n                    final JsonArray results = result.getAsJsonArray();\n                    runOnUiThread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            mAdapter.clear();\n                            for (JsonElement item : results) {\n                                String ID = item.getAsJsonObject().getAsJsonPrimitive(\"id\").getAsString();\n                                String mText = item.getAsJsonObject().getAsJsonPrimitive(\"text\").getAsString();\n                                Boolean mComplete = item.getAsJsonObject().getAsJsonPrimitive(\"complete\").getAsBoolean();\n                                ToDoItem mToDoItem = new ToDoItem();\n                                mToDoItem.setId(ID);\n                                mToDoItem.setText(mText);\n                                mToDoItem.setComplete(mComplete);\n                                mAdapter.add(mToDoItem);\n                            }\n                        }\n                    });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\nYou can do filtering, sorting and paging by concatenating  methods that have the same names as those used in the typed programming model.\n\n\n##<a name=\"binding\"></a>How to: Bind data to the user interface\n\nData binding involves three components:\n\n- the data source\n- the screen layout\n- and the adapter that ties the two together.\n\nIn our sample code, we return the data from the mobile service table *ToDoItem* into an array. This is one very common pattern for data applications: database queries typically return a collection of rows which the client gets in a list or array. In this sample the array is the data source.\n\nThe code specifies a screen layout that defines the view of the data that will appear on the device.\n\nAnd the two are bound together with an adapter, which in this code is an extension of the *ArrayAdapter&lt;ToDoItem&gt;* class.\n\n### <a name=\"layout\"></a>How to: Define the Layout\n\nThe layout is defined by several snippets of XML code. Given an existing layout, let's assume the following code represents the **ListView** we want to populate with our server data.\n\n    <ListView\n        android:id=\"@+id/listViewToDo\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        tools:listitem=\"@layout/row_list_to_do\" >\n    </ListView>\n\n\nIn the above code the *listitem* attribute specifies the id of the layout for an individual row in the list. Here is that code, which specifies a check box and its associated text. This gets instantiated once for each item in the list. A more complex layout would specify additional fields in the display. This code is in the *row_list_to_do.xml* file.\n\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"horizontal\">\n        <CheckBox\n            android:id=\"@+id/checkToDoItem\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/checkbox_text\" />\n    </LinearLayout>\n\n\n### <a name=\"adapter\"></a>How to: Define the adapter\n\nSince the data source of our view is an array of *ToDoItem*, we subclass our adapter from a *ArrayAdapter&lt;ToDoItem&gt;* class. This subclass will produce a View for every *ToDoItem* using the *row_list_to_do* layout.\n\nIn our code we define the following class which is an extension of the *ArrayAdapter&lt;E&gt;* class:\n\n    public class ToDoItemAdapter extends ArrayAdapter<ToDoItem> {\n\n\nYou must override the adapter's *getView* method. This sample code is one example of how to do this: details will vary with your application.\n\n    public View getView(int position, View convertView, ViewGroup parent) {\n        View row = convertView;\n\n        final ToDoItem currentItem = getItem(position);\n\n        if (row == null) {\n            LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();\n            row = inflater.inflate(R.layout.row_list_to_do, parent, false);\n        }\n\n        row.setTag(currentItem);\n\n        final CheckBox checkBox = (CheckBox) row.findViewById(R.id.checkToDoItem);\n        checkBox.setText(currentItem.getText());\n        checkBox.setChecked(false);\n        checkBox.setEnabled(true);\n\n        return row;\n    }\n\nWe create an instance of this class in our Activity as follows:\n\n    ToDoItemAdapter mAdapter;\n    mAdapter = new ToDoItemAdapter(this, R.layout.row_list_to_do);\n\nNote that the second parameter to the ToDoItemAdapter constructor is a reference to the layout. The call to the constructor is followed by the following code which first gets a reference to the **ListView**, and next calls *setAdapter* to configure itself to use the adapter we just created:\n\n    ListView listViewToDo = (ListView) findViewById(R.id.listViewToDo);\n    listViewToDo.setAdapter(mAdapter);\n\n\n### <a name=\"use-adapter\"></a>How to: Use the adapter\n\nYou are now ready to use data binding. The following code shows how to get the items in the mobile service table, clear the apapter, and then call the adapter's *add* method to fill it with the returned items.\n\n    public void showAll(View view) {\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final MobileServiceList<ToDoItem> result = mToDoTable.execute().get();\n                    runOnUiThread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            mAdapter.clear();\n                            for (ToDoItem item : result) {\n                                mAdapter.add(item);\n                            }\n                        }\n                    });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\nYou must also call the adapter any time you modify the *ToDoItem* table if you want to display the results of doing that. Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection. When you insert an item you call the *add* method on the adapter, when deleting, you call the *remove* method.\n\n##<a name=\"custom-api\"></a>How to: Call a custom API\n\nA custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation. By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON. For an example of how to create a custom API in your mobile service, see [How to: define a custom API endpoint](mobile-services-dotnet-backend-define-custom-api.md).\n\n[AZURE.INCLUDE [mobile-services-android-call-custom-api](../../includes/mobile-services-android-call-custom-api.md)]\n\n\n##<a name=\"authentication\"></a>How to: Authenticate users\n\nMobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory. You can set permissions on tables to restrict access for specific operations to only authenticated users. You can also use the identity of authenticated users to implement authorization rules in your backend. For more information, see [Get started with authentication](http://go.microsoft.com/fwlink/p/?LinkId=296316).\n\nTwo authentication flows are supported: a *server* flow and a *client* flow. The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface. The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs.\n\nThree steps are required to enable authentication in your app:\n\n- Register your app for authentication with a provider, and configure Mobile Services\n- Restrict table permissions to authenticated users only\n- Add authentication code to your app\n\n\nMobile Services supports the following existing identity providers that you can use to authenticate users:\n\n- Microsoft Account\n- Facebook\n- Twitter\n- Google\n- Azure Active Directory\n\nYou can set permissions on tables to restrict access for specific operations to only authenticated users. You can also use the ID of an authenticated user to modify requests.\n\nThese first two tasks are done using the [Azure classic portal](https://manage.windowsazure.com/). For more information, see [Get started with authentication](http://go.microsoft.com/fwlink/p/?LinkId=296316).\n\n### <a name=\"caching\"></a>How to: Add authentication code to your app\n\n1.  Add the following import statements to your app's activity file.\n\n        import java.util.concurrent.ExecutionException;\n        import java.util.concurrent.atomic.AtomicBoolean;\n\n        import android.content.Context;\n        import android.content.SharedPreferences;\n        import android.content.SharedPreferences.Editor;\n\n        import com.microsoft.windowsazure.mobileservices.authentication.MobileServiceAuthenticationProvider;\n        import com.microsoft.windowsazure.mobileservices.authentication.MobileServiceUser;\n\n2. In the **onCreate** method of the activity class, add the following line of code after the code that creates the `MobileServiceClient` object: we assume that the reference to the `MobileServiceClient` object is *mClient*.\n\n        // Login using the Google provider.\n\n        ListenableFuture<MobileServiceUser> mLogin = mClient.login(MobileServiceAuthenticationProvider.Google);\n\n        Futures.addCallback(mLogin, new FutureCallback<MobileServiceUser>() {\n            @Override\n            public void onFailure(Throwable exc) {\n                createAndShowDialog((Exception) exc, \"Error\");\n            }\n            @Override\n            public void onSuccess(MobileServiceUser user) {\n                createAndShowDialog(String.format(\n                        \"You are now logged in - %1$2s\",\n                        user.getUserId()), \"Success\");\n                createTable();\n            }\n        });\n\n    This code authenticates the user using a Google login. A dialog is displayed which displays the ID of the authenticated user. You cannot proceed without a positive authentication.\n\n    > [AZURE.NOTE] If you are using an identity provider other than Google, change the value passed to the **login** method above to one of the following: _MicrosoftAccount_, _Facebook_, _Twitter_, or _WindowsAzureActiveDirectory_.\n\n\n3. When you run the app, sign in with your chosen identity provider.\n\n\n### <a name=\"caching\"></a>How to: Cache authentication tokens\n\nThis section shows how to cache an authentication token. Do this to prevent users from having to authenticate again if app is \"hibernated\" while the token is still valid.\n\nCaching authentication tokens requires you to store the User ID and authentication token locally on the device. The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data. However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.\n\nThe following code snippet demonstrates obtaining a token for a Microsoft Account log in. The token is cached and reloaded if the cache is found.\n\n    private void authenticate() {\n        if (LoadCache())\n        {\n            createTable();\n        }\n        else\n        {\n                // Login using the Google provider.\n                ListenableFuture<MobileServiceUser> mLogin = mClient.login(MobileServiceAuthenticationProvider.Google);\n\n                Futures.addCallback(mLogin, new FutureCallback<MobileServiceUser>() {\n                    @Override\n                    public void onFailure(Throwable exc) {\n                        createAndShowDialog(\"You must log in. Login Required\", \"Error\");\n                    }\n                    @Override\n                    public void onSuccess(MobileServiceUser user) {\n                        createAndShowDialog(String.format(\n                                \"You are now logged in - %1$2s\",\n                                user.getUserId()), \"Success\");\n                        cacheUserToken(mClient.getCurrentUser());\n                        createTable();\n                    }\n                });     }\n    }\n\n\n    private boolean LoadCache()\n    {\n        SharedPreferences prefs = getSharedPreferences(\"temp\", Context.MODE_PRIVATE);\n        String tmp1 = prefs.getString(\"tmp1\", \"undefined\");\n        if (tmp1 == \"undefined\")\n            return false;\n        String tmp2 = prefs.getString(\"tmp2\", \"undefined\");\n        if (tmp2 == \"undefined\")\n            return false;\n        MobileServiceUser user = new MobileServiceUser(tmp1);\n        user.setAuthenticationToken(tmp2);\n        mClient.setCurrentUser(user);\n        return true;\n    }\n\n\n    private void cacheUser(MobileServiceUser user)\n    {\n        SharedPreferences prefs = getSharedPreferences(\"temp\", Context.MODE_PRIVATE);\n        Editor editor = prefs.edit();\n        editor.putString(\"tmp1\", user.getUserId());\n        editor.putString(\"tmp2\", user.getAuthenticationToken());\n        editor.commit();\n    }\n\n\nSo what happens if your token expires? In this case, when you try to use it to connect, you will get a *401 unauthorized* response. The user must then log in to obtain new tokens. You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services. The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401.\n\n\n##<a name=\"customizing\"></a>How to: Customize the client\n\nThere are several ways for you to customize the default behavior of the Mobile Services client.\n\n### <a name=\"headers\"></a>How to: Customize request headers\n\nYou might want to attach a custom header to every outgoing request. You can accomplish that by configuring a **ServiceFilter** like this:\n\n    private class CustomHeaderFilter implements ServiceFilter {\n\n        @Override\n        public ListenableFuture<ServiceFilterResponse> handleRequest(\n                    ServiceFilterRequest request,\n                    NextServiceFilterCallback next) {\n\n            runOnUiThread(new Runnable() {\n\n                @Override\n                public void run() {\n                    request.addHeader(\"My-Header\", \"Value\");                    }\n            });\n\n            SettableFuture<ServiceFilterResponse> result = SettableFuture.create();\n            try {\n                ServiceFilterResponse response = next.onNext(request).get();\n                result.set(response);\n            } catch (Exception exc) {\n                result.setException(exc);\n            }\n        }\n\n### <a name=\"serialization\"></a>How to: Customize serialization\n\nMobile Services assumes by default that the table names, column names and data types on the server all match exactly what is on the client. But there can be any number of reasons why the server and client names might not match. One example might be if you have an existing client that you want to change so that it uses Mobile Services instead of a competitor's product.\n\nYou might want to do the following kinds of customizations:\n\n- The column names used in the mobile-  service table don't match the names you are using in the client\n- Use a mobile service table that has a different name than the class it maps to in the client\n- Turn on automatic property capitalization\n- Add complex properties to an object\n\n### <a name=\"columns\"></a>How to: Map different client and server names\n\nSuppose that your Java client code uses standard Java-style names for the *ToDoItem* object properties, such as the following.\n\n- mId\n- mText\n- mComplete\n- mDuration\n\n\nYou must serialize the client names into JSON names that match the column names of the *ToDoItem* table on the server. The following code, which makes use of the <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> library does this.\n\n    @com.google.gson.annotations.SerializedName(\"text\")\n    private String mText;\n\n    @com.google.gson.annotations.SerializedName(\"id\")\n    private int mId;\n\n    @com.google.gson.annotations.SerializedName(\"complete\")\n    private boolean mComplete;\n\n    @com.google.gson.annotations.SerializedName(\"duration\")\n    private String mDuration;\n\n### <a name=\"table\"></a>How to: Map different table names between client and mobile services\n\nMapping the client table name to a different mobile services table name is easy, we just use one of the overrides of the\n<a href=\"http://go.microsoft.com/fwlink/p/?LinkId=296840\" target=\"_blank\">getTable()</a> function, as seen in the following code.\n\n    mToDoTable = mClient.getTable(\"ToDoItemBackup\", ToDoItem.class);\n\n\n### <a name=\"conversions\"></a>How to: Automate column name mappings\n\nMapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section. But suppose our table has a lot of columns, say 20 or 30. It turns out that we can call the <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> API and specify a conversion strategy that will apply to every column, and avoid having to annotate every single column name.\n\nTo do this we use the <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> library which the Android client library uses behind the scenes to serialize Java objects to JSON data, which is sent to Azure Mobile Services.\n\nThe following code uses the *setFieldNamingStrategy()* method, in which we define a *FieldNamingStrategy()* method. This method says to delete the initial character (an \"m\"), and then lower-case the next character, for every field name. This code also enables pretty-printing of the output JSON.\n\n    client.setGsonBuilder(\n        MobileServiceClient\n        .createMobileServiceGsonBuilder()\n        .setFieldNamingStrategy(new FieldNamingStrategy() {\n            public String translateName(Field field) {\n                String name = field.getName();\n                return Character.toLowerCase(name.charAt(1))\n                    + name.substring(2);\n                }\n            })\n            .setPrettyPrinting());\n\n\n\nThis code must be executed prior to any method calls on the Mobile Services client object.\n\n### <a name=\"complex\"></a>How to: Store an object or array property into a table\n\nSo far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table. Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table. For example we might want to add an array of strings to the client object. It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.\n\nTo see an example of how to do this, check out the blog post <a href=\"http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson\" target=\"_blank\">Customizing serialization using the <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> library in the Mobile Services Android client</a>.\n\nThis general method can be used whenever we have a complex object that is not automatically serializable into JSON and the mobile services table.\n\n<!-- Anchors. -->\n\n[What is Mobile Services]: #what-is\n[Concepts]: #concepts\n[How to: Create the Mobile Services client]: #create-client\n[How to: Create a table reference]: #instantiating\n[The API structure]: #api\n[How to: Query data from a mobile service]: #querying\n[Return all Items]: #showAll\n[Filter returned data]: #filtering\n[Sort returned data]: #sorting\n[Return data in pages]: #paging\n[Select specific columns]: #selecting\n[How to: Concatenate query methods]: #chaining\n[How to: Bind data to the user interface]: #binding\n[How to: Define the layout]: #layout\n[How to: Define the adapter]: #adapter\n[How to: Use the adapter]: #use-adapter\n[How to: Insert data into a mobile service]: #inserting\n[How to: update data in a mobile service]: #updating\n[How to: Delete data in a mobile service]: #deleting\n[How to: Look up a specific item]: #lookup\n[How to: Work with untyped data]: #untyped\n[How to: Authenticate users]: #authentication\n[Cache authentication tokens]: #caching\n[How to: Handle errors]: #errors\n[How to: Design unit tests]: #tests\n[How to: Customize the client]: #customizing\n[Customize request headers]: #headers\n[Customize serialization]: #serialization\n[Next Steps]: #next-steps\n[Setup and Prerequisites]: #setup\n\n<!-- Images. -->\n\n\n\n<!-- URLs. -->\n[Get started with Mobile Services]: mobile-services-android-get-started.md\n[ASCII control codes C0 and C1]: http://en.wikipedia.org/wiki/Data_link_escape_character#C1_set\n"
}