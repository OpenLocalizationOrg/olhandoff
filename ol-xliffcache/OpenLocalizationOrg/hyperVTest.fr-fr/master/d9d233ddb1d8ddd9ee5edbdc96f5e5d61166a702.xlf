<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Policies in Azure API Management</source>
          <target state="new">Policies in Azure API Management</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to create, edit, and configure policies in API Management.</source>
          <target state="new">Learn how to create, edit, and configure policies in API Management.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Policies in Azure API Management</source>
          <target state="new">Policies in Azure API Management</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Azure API Management, policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration.</source>
          <target state="new">In Azure API Management, policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Policies are a collection of Statements that are executed sequentially on the request or response of an API.</source>
          <target state="new">Policies are a collection of Statements that are executed sequentially on the request or response of an API.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Popular Statements include format conversion from XML to JSON and call rate limiting to restrict the amount of incoming calls from a developer.</source>
          <target state="new">Popular Statements include format conversion from XML to JSON and call rate limiting to restrict the amount of incoming calls from a developer.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Many more policies are available out of the box.</source>
          <target state="new">Many more policies are available out of the box.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Policy Reference<ept id="p1">][]</ept><ph id="ph2" /> for a full list of policy statements and their settings.</source>
          <target state="new">See the <bpt id="p1">[</bpt>Policy Reference<ept id="p1">][]</ept><ph id="ph2" /> for a full list of policy statements and their settings.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Policies are applied inside the gateway which sits between the API consumer and the managed API.</source>
          <target state="new">Policies are applied inside the gateway which sits between the API consumer and the managed API.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The gateway receives all requests and usually forwards them unaltered to the underlying API.</source>
          <target state="new">The gateway receives all requests and usually forwards them unaltered to the underlying API.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However a policy can apply changes to both the inbound request and outbound response.</source>
          <target state="new">However a policy can apply changes to both the inbound request and outbound response.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Policy expressions can be used as attribute values or text values in any of the API Management policies, unless the policy specifies otherwise.</source>
          <target state="new">Policy expressions can be used as attribute values or text values in any of the API Management policies, unless the policy specifies otherwise.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Some policies such as the <bpt id="p2">[</bpt>Control flow<ept id="p2">][]</ept><ph id="ph3" /> and <bpt id="p3">[</bpt>Set variable<ept id="p3">][]</ept><ph id="ph4" /> policies are based on policy expressions.</source>
          <target state="new">Some policies such as the <bpt id="p2">[</bpt>Control flow<ept id="p2">][]</ept><ph id="ph3" /> and <bpt id="p3">[</bpt>Set variable<ept id="p3">][]</ept><ph id="ph4" /> policies are based on policy expressions.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p4">[</bpt>Advanced policies<ept id="p4">][]</ept><ph id="ph5" /> and <bpt id="p5">[</bpt>Policy expressions<ept id="p5">][]</ept>.</source>
          <target state="new">For more information, see <bpt id="p4">[</bpt>Advanced policies<ept id="p4">][]</ept><ph id="ph5" /> and <bpt id="p5">[</bpt>Policy expressions<ept id="p5">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>How to configure policies</source>
          <target state="new">How to configure policies</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Policies can be configured globally or at the scope of a <bpt id="p6">[</bpt>Product<ept id="p6">][]</ept>, <bpt id="p7">[</bpt>API<ept id="p7">][]</ept><ph id="ph6" /> or <bpt id="p8">[</bpt>Operation<ept id="p8">][]</ept>.</source>
          <target state="new">Policies can be configured globally or at the scope of a <bpt id="p6">[</bpt>Product<ept id="p6">][]</ept>, <bpt id="p7">[</bpt>API<ept id="p7">][]</ept><ph id="ph6" /> or <bpt id="p8">[</bpt>Operation<ept id="p8">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To configure a policy, navigate to the Policies editor in the publisher portal.</source>
          <target state="new">To configure a policy, navigate to the Policies editor in the publisher portal.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph7">![</ph>Policies menu<ph id="ph8">][policies-menu]</ph></source>
          <target state="new"><ph id="ph7">![</ph>Policies menu<ph id="ph8">][policies-menu]</ph></target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The policies editor consists of three main sections: the policy scope (top), the policy definition where policies are edited (left) and the statements list (right):</source>
          <target state="new">The policies editor consists of three main sections: the policy scope (top), the policy definition where policies are edited (left) and the statements list (right):</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph9">![</ph>Policies editor<ph id="ph10">][policies-editor]</ph></source>
          <target state="new"><ph id="ph9">![</ph>Policies editor<ph id="ph10">][policies-editor]</ph></target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To begin configuring a policy you must first select the scope at which the policy should apply.</source>
          <target state="new">To begin configuring a policy you must first select the scope at which the policy should apply.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the screenshot below the <bpt id="p9">**</bpt>Starter<ept id="p9">**</ept><ph id="ph11" /> product is selected.</source>
          <target state="new">In the screenshot below the <bpt id="p9">**</bpt>Starter<ept id="p9">**</ept><ph id="ph11" /> product is selected.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that the square symbol next to the policy name indicates that a policy is already applied at this level.</source>
          <target state="new">Note that the square symbol next to the policy name indicates that a policy is already applied at this level.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph12">![</ph>Scope<ph id="ph13">][policies-scope]</ph></source>
          <target state="new"><ph id="ph12">![</ph>Scope<ph id="ph13">][policies-scope]</ph></target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Since a policy has already been applied, the configuration is shown in the definition view.</source>
          <target state="new">Since a policy has already been applied, the configuration is shown in the definition view.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph14">![</ph>Configure<ph id="ph15">][policies-configure]</ph></source>
          <target state="new"><ph id="ph14">![</ph>Configure<ph id="ph15">][policies-configure]</ph></target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The policy is displayed read-only at first.</source>
          <target state="new">The policy is displayed read-only at first.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In order to edit the definition click the <bpt id="p10">**</bpt>Configure Policy<ept id="p10">**</ept><ph id="ph16" /> action.</source>
          <target state="new">In order to edit the definition click the <bpt id="p10">**</bpt>Configure Policy<ept id="p10">**</ept><ph id="ph16" /> action.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph17">![</ph>Edit<ph id="ph18">][policies-edit]</ph></source>
          <target state="new"><ph id="ph17">![</ph>Edit<ph id="ph18">][policies-edit]</ph></target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The policy definition is a simple XML document that describes a sequence of inbound and outbound statements.</source>
          <target state="new">The policy definition is a simple XML document that describes a sequence of inbound and outbound statements.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The XML can be edited directly in the definition window.</source>
          <target state="new">The XML can be edited directly in the definition window.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A list of statements is provided to the right and statements applicable to the current scope are enabled and highlighted; as demonstrated by the <bpt id="p11">**</bpt>Limit Call Rate<ept id="p11">**</ept><ph id="ph19" /> statement in the screenshot above.</source>
          <target state="new">A list of statements is provided to the right and statements applicable to the current scope are enabled and highlighted; as demonstrated by the <bpt id="p11">**</bpt>Limit Call Rate<ept id="p11">**</ept><ph id="ph19" /> statement in the screenshot above.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Clicking an enabled statement will add the appropriate XML at the location of the cursor in the definition view.</source>
          <target state="new">Clicking an enabled statement will add the appropriate XML at the location of the cursor in the definition view.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A full list of policy statements and their settings are available in the <bpt id="p12">[</bpt>Policy Reference<ept id="p12">][]</ept>.</source>
          <target state="new">A full list of policy statements and their settings are available in the <bpt id="p12">[</bpt>Policy Reference<ept id="p12">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, to add a new statement to restrict incoming requests to specified IP addresses, place the cursor just inside the content of the <ph id="ph20">`inbound`</ph><ph id="ph21" /> XML element and click the <bpt id="p13">**</bpt>Restrict caller IPs<ept id="p13">**</ept><ph id="ph22" /> statement.</source>
          <target state="new">For example, to add a new statement to restrict incoming requests to specified IP addresses, place the cursor just inside the content of the <ph id="ph20">`inbound`</ph><ph id="ph21" /> XML element and click the <bpt id="p13">**</bpt>Restrict caller IPs<ept id="p13">**</ept><ph id="ph22" /> statement.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph23">![</ph>Restriction policies<ph id="ph24">][policies-restrict]</ph></source>
          <target state="new"><ph id="ph23">![</ph>Restriction policies<ph id="ph24">][policies-restrict]</ph></target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This will add an XML snippet to the <ph id="ph25">`inbound`</ph><ph id="ph26" /> element that provides guidance on how to configure the statement.</source>
          <target state="new">This will add an XML snippet to the <ph id="ph25">`inbound`</ph><ph id="ph26" /> element that provides guidance on how to configure the statement.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To limit inbound requests and accept only those from an IP address of 1.2.3.4 modify the XML as follows:</source>
          <target state="new">To limit inbound requests and accept only those from an IP address of 1.2.3.4 modify the XML as follows:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph27">![</ph>Save<ph id="ph28">][policies-save]</ph></source>
          <target state="new"><ph id="ph27">![</ph>Save<ph id="ph28">][policies-save]</ph></target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When complete configuring the statements for the policy, click <bpt id="p14">**</bpt>Save<ept id="p14">**</ept><ph id="ph29" /> and the changes will be propagated to the API Management gateway immediately.</source>
          <target state="new">When complete configuring the statements for the policy, click <bpt id="p14">**</bpt>Save<ept id="p14">**</ept><ph id="ph29" /> and the changes will be propagated to the API Management gateway immediately.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Understanding policy configuration</source>
          <target state="new">Understanding policy configuration</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A policy is a series of statements that execute in order for a request and a response.</source>
          <target state="new">A policy is a series of statements that execute in order for a request and a response.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The configuration is divided appropriately into <ph id="ph30">`inbound`</ph>, <ph id="ph31">`backend`</ph>, <ph id="ph32">`outbound`</ph>, and <ph id="ph33">`on-error`</ph><ph id="ph34" /> sections as shown in the following configuration.</source>
          <target state="new">The configuration is divided appropriately into <ph id="ph30">`inbound`</ph>, <ph id="ph31">`backend`</ph>, <ph id="ph32">`outbound`</ph>, and <ph id="ph33">`on-error`</ph><ph id="ph34" /> sections as shown in the following configuration.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If there is an error during the processing of a request, any remaining steps in the <ph id="ph35">`inbound`</ph>, <ph id="ph36">`backend`</ph>, or <ph id="ph37">`outbound`</ph><ph id="ph38" /> sections are skipped and execution jumps to the statements in the <ph id="ph39">`on-error`</ph><ph id="ph40" /> section.</source>
          <target state="new">If there is an error during the processing of a request, any remaining steps in the <ph id="ph35">`inbound`</ph>, <ph id="ph36">`backend`</ph>, or <ph id="ph37">`outbound`</ph><ph id="ph38" /> sections are skipped and execution jumps to the statements in the <ph id="ph39">`on-error`</ph><ph id="ph40" /> section.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>By placing policy statements in the <ph id="ph41">`on-error`</ph><ph id="ph42" /> section you can review the error by using the <ph id="ph43">`context.LastError`</ph><ph id="ph44" /> property, inspect and customize the error response using the <ph id="ph45">`set-body`</ph><ph id="ph46" /> policy, and configure what happens if an error occurs.</source>
          <target state="new">By placing policy statements in the <ph id="ph41">`on-error`</ph><ph id="ph42" /> section you can review the error by using the <ph id="ph43">`context.LastError`</ph><ph id="ph44" /> property, inspect and customize the error response using the <ph id="ph45">`set-body`</ph><ph id="ph46" /> policy, and configure what happens if an error occurs.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>There are error codes for built-in steps and for errors that may occur during the processing of policy statements.</source>
          <target state="new">There are error codes for built-in steps and for errors that may occur during the processing of policy statements.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p15">[</bpt>Error handling in API Management policies<ept id="p15">](https://msdn.microsoft.com/library/azure/mt629506.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p15">[</bpt>Error handling in API Management policies<ept id="p15">](https://msdn.microsoft.com/library/azure/mt629506.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Since policies can be specified at different levels (global, product, api and operation) the configuration provides a way for you to specify the order in which the policy definition's statements execute with respect to the parent policy.</source>
          <target state="new">Since policies can be specified at different levels (global, product, api and operation) the configuration provides a way for you to specify the order in which the policy definition's statements execute with respect to the parent policy.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Policy scopes are evaluated in the following order.</source>
          <target state="new">Policy scopes are evaluated in the following order.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Global scope</source>
          <target state="new">Global scope</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Product scope</source>
          <target state="new">Product scope</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>API scope</source>
          <target state="new">API scope</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Operation scope</source>
          <target state="new">Operation scope</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The statements within them are evaluated according to the placement of the <ph id="ph47">`base`</ph><ph id="ph48" /> element, if it is present.</source>
          <target state="new">The statements within them are evaluated according to the placement of the <ph id="ph47">`base`</ph><ph id="ph48" /> element, if it is present.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, if you have a policy at the global level and a policy configured for an API, then whenever that particular API is used both policies will be applied.</source>
          <target state="new">For example, if you have a policy at the global level and a policy configured for an API, then whenever that particular API is used both policies will be applied.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>API Management allows for deterministic ordering of combined policy statements via the base element.</source>
          <target state="new">API Management allows for deterministic ordering of combined policy statements via the base element.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the example policy definition above, the <ph id="ph49">`cross-domain`</ph><ph id="ph50" /> statement would execute before any higher policies which would in turn, be followed by the <ph id="ph51">`find-and-replace`</ph><ph id="ph52" /> policy.</source>
          <target state="new">In the example policy definition above, the <ph id="ph49">`cross-domain`</ph><ph id="ph50" /> statement would execute before any higher policies which would in turn, be followed by the <ph id="ph51">`find-and-replace`</ph><ph id="ph52" /> policy.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If the same policy appears twice in the policy statement, the most recently evaluated policy is applied.</source>
          <target state="new">If the same policy appears twice in the policy statement, the most recently evaluated policy is applied.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can use this to override policies that are defined at a higher scope.</source>
          <target state="new">You can use this to override policies that are defined at a higher scope.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To see the policies in the current scope in the policy editor, click <bpt id="p16">**</bpt>Recalculate effective policy for selected scope<ept id="p16">**</ept>.</source>
          <target state="new">To see the policies in the current scope in the policy editor, click <bpt id="p16">**</bpt>Recalculate effective policy for selected scope<ept id="p16">**</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Note that global policy has no parent policy and using the <ph id="ph53">`&lt;base&gt;`</ph><ph id="ph54" /> element in it has no effect.</source>
          <target state="new">Note that global policy has no parent policy and using the <ph id="ph53">`&lt;base&gt;`</ph><ph id="ph54" /> element in it has no effect.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Check out following video on policy expressions.</source>
          <target state="new">Check out following video on policy expressions.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9d233ddb1d8ddd9ee5edbdc96f5e5d61166a702</xliffext:olfilehash>
  </header>
</xliff>