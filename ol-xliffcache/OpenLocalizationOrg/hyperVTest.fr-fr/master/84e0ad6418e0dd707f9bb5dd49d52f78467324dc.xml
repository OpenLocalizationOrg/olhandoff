{
  "nodes": [
    {
      "pos": [
        27,
        80
      ],
      "content": "Advanced request throttling with Azure API Management"
    },
    {
      "pos": [
        99,
        197
      ],
      "content": "Learn how to create and apply flexible quota and rate limiting policies with Azure API Management."
    },
    {
      "pos": [
        499,
        552
      ],
      "content": "Advanced request throttling with Azure API Management"
    },
    {
      "pos": [
        554,
        835
      ],
      "content": "Being able to throttle incoming requests is a key role of Azure API Management. Either by controlling the rate of requests or the total requests/data transferred, API Management allows API providers to protect their APIs from abuse and create value for different API product tiers.",
      "nodes": [
        {
          "content": "Being able to throttle incoming requests is a key role of Azure API Management.",
          "pos": [
            0,
            79
          ]
        },
        {
          "content": "Either by controlling the rate of requests or the total requests/data transferred, API Management allows API providers to protect their APIs from abuse and create value for different API product tiers.",
          "pos": [
            80,
            281
          ]
        }
      ]
    },
    {
      "pos": [
        840,
        864
      ],
      "content": "Product based throttling"
    },
    {
      "pos": [
        865,
        1532
      ],
      "content": "To date, the rate throttling capabilities have been limited to being scoped to a particular Product subscription (essentially a key), defined in the API Management publisher portal. This is useful for the API provider to apply limits on the developers who have signed up to use their API, however, it does not help, for example, in throttling individual end-users of the API. It is possible that for single user of the developer's application to consume the entire quota and then prevent other customers of the developer from being able to use the application. Also, several customers who might generate a high volume of requests may limit access to occasional users.",
      "nodes": [
        {
          "content": "To date, the rate throttling capabilities have been limited to being scoped to a particular Product subscription (essentially a key), defined in the API Management publisher portal.",
          "pos": [
            0,
            181
          ]
        },
        {
          "content": "This is useful for the API provider to apply limits on the developers who have signed up to use their API, however, it does not help, for example, in throttling individual end-users of the API.",
          "pos": [
            182,
            375
          ]
        },
        {
          "content": "It is possible that for single user of the developer's application to consume the entire quota and then prevent other customers of the developer from being able to use the application.",
          "pos": [
            376,
            560
          ]
        },
        {
          "content": "Also, several customers who might generate a high volume of requests may limit access to occasional users.",
          "pos": [
            561,
            667
          ]
        }
      ]
    },
    {
      "pos": [
        1537,
        1564
      ],
      "content": "Custom key based throttling"
    },
    {
      "pos": [
        1565,
        2010
      ],
      "content": "The new <bpt id=\"p1\">[</bpt>rate-limit-by-key<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#LimitCallRateByKey)</ept><ph id=\"ph2\"/> and <bpt id=\"p2\">[</bpt>quota-by-key<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#SetUsageQuotaByKey)</ept><ph id=\"ph3\"/> policies provide a significantly more flexible solution to traffic control. These new policies allow you to define expressions to identify the keys that will be used to track traffic usage. The way this works is easiest illustrated with an example.",
      "nodes": [
        {
          "content": "The new <bpt id=\"p1\">[</bpt>rate-limit-by-key<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#LimitCallRateByKey)</ept><ph id=\"ph2\"/> and <bpt id=\"p2\">[</bpt>quota-by-key<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#SetUsageQuotaByKey)</ept><ph id=\"ph3\"/> policies provide a significantly more flexible solution to traffic control.",
          "pos": [
            0,
            376
          ]
        },
        {
          "content": "These new policies allow you to define expressions to identify the keys that will be used to track traffic usage.",
          "pos": [
            377,
            490
          ]
        },
        {
          "content": "The way this works is easiest illustrated with an example.",
          "pos": [
            491,
            549
          ]
        }
      ]
    },
    {
      "pos": [
        2016,
        2037
      ],
      "content": "IP Address throttling"
    },
    {
      "pos": [
        2038,
        2204
      ],
      "content": "The following policies restrict a single client IP address to only 10 calls every minute, with a total of 1,000,000 calls and 10,000 kilobytes of bandwidth per month."
    },
    {
      "pos": [
        2503,
        2857
      ],
      "content": "If all clients on the Internet used a unique IP address, this might be an effective way of limiting usage by user. However, it is quite likely that multiple users will sharing a single public IP address due to them accessing the Internet via a NAT device. Despite this, for APIs that allow unauthenticated access the <ph id=\"ph4\">`IpAddress`</ph><ph id=\"ph5\"/> might be the best option.",
      "nodes": [
        {
          "content": "If all clients on the Internet used a unique IP address, this might be an effective way of limiting usage by user.",
          "pos": [
            0,
            114
          ]
        },
        {
          "content": "However, it is quite likely that multiple users will sharing a single public IP address due to them accessing the Internet via a NAT device.",
          "pos": [
            115,
            255
          ]
        },
        {
          "content": "Despite this, for APIs that allow unauthenticated access the <ph id=\"ph4\">`IpAddress`</ph><ph id=\"ph5\"/> might be the best option.",
          "pos": [
            256,
            386
          ]
        }
      ]
    },
    {
      "pos": [
        2862,
        2886
      ],
      "content": "User identity throttling"
    },
    {
      "pos": [
        2887,
        3017
      ],
      "content": "If an end user is authenticated then a throttling key can be generated based on information that uniquely identifies an that user."
    },
    {
      "pos": [
        3189,
        3476
      ],
      "content": "In this example we extract the Authorization header, convert it to <ph id=\"ph6\">`JWT`</ph><ph id=\"ph7\"/> object and use the subject of the token to identify the user and use that as the rate limiting key. If the user identity is stored in the <ph id=\"ph8\">`JWT`</ph><ph id=\"ph9\"/> as one of the other claims then that value could be used in its place.",
      "nodes": [
        {
          "content": "In this example we extract the Authorization header, convert it to <ph id=\"ph6\">`JWT`</ph><ph id=\"ph7\"/> object and use the subject of the token to identify the user and use that as the rate limiting key.",
          "pos": [
            0,
            204
          ]
        },
        {
          "content": "If the user identity is stored in the <ph id=\"ph8\">`JWT`</ph><ph id=\"ph9\"/> as one of the other claims then that value could be used in its place.",
          "pos": [
            205,
            351
          ]
        }
      ]
    },
    {
      "pos": [
        3481,
        3498
      ],
      "content": "Combined policies"
    },
    {
      "pos": [
        3499,
        4131
      ],
      "content": "Although the new throttling policies provide more control than the existing throttling policies, there is still value combining both capabilities. Throttling by product subscription key (<bpt id=\"p3\">[</bpt>Limit call rate by subscription<ept id=\"p3\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#LimitCallRate)</ept><ph id=\"ph10\"/> and <bpt id=\"p4\">[</bpt>Set usage quota by subscription<ept id=\"p4\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#SetUsageQuota)</ept>) is a great way to enable monetizing of an API by charging based on usage levels. The finer grained control of being able to throttle by user is complementary and prevents one user's behavior from degrading the experience of another.",
      "nodes": [
        {
          "content": "Although the new throttling policies provide more control than the existing throttling policies, there is still value combining both capabilities.",
          "pos": [
            0,
            146
          ]
        },
        {
          "content": "Throttling by product subscription key (<bpt id=\"p3\">[</bpt>Limit call rate by subscription<ept id=\"p3\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#LimitCallRate)</ept><ph id=\"ph10\"/> and <bpt id=\"p4\">[</bpt>Set usage quota by subscription<ept id=\"p4\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#SetUsageQuota)</ept>) is a great way to enable monetizing of an API by charging based on usage levels.",
          "pos": [
            147,
            571
          ]
        },
        {
          "content": "The finer grained control of being able to throttle by user is complementary and prevents one user's behavior from degrading the experience of another.",
          "pos": [
            572,
            723
          ]
        }
      ]
    },
    {
      "pos": [
        4137,
        4161
      ],
      "content": "Client driven throttling"
    },
    {
      "pos": [
        4162,
        4592
      ],
      "content": "When the throttling key is defined using a <bpt id=\"p5\">[</bpt>policy expression<ept id=\"p5\">](https://msdn.microsoft.com/library/azure/dn910913.aspx)</ept>, then it is the API provider that is choosing how the throttling is scoped. However, a developer might want to control how they rate limit their own customers. This could be enabled by the API provider by introducing a custom header to allow the developer's client application to communicate the key to the API.",
      "nodes": [
        {
          "content": "When the throttling key is defined using a <bpt id=\"p5\">[</bpt>policy expression<ept id=\"p5\">](https://msdn.microsoft.com/library/azure/dn910913.aspx)</ept>, then it is the API provider that is choosing how the throttling is scoped.",
          "pos": [
            0,
            232
          ]
        },
        {
          "content": "However, a developer might want to control how they rate limit their own customers.",
          "pos": [
            233,
            316
          ]
        },
        {
          "content": "This could be enabled by the API provider by introducing a custom header to allow the developer's client application to communicate the key to the API.",
          "pos": [
            317,
            468
          ]
        }
      ]
    },
    {
      "pos": [
        4746,
        4998
      ],
      "content": "This enables the developer's client application to choose how they want to create the rate limiting key. With a little bit of ingenuity a client developer could create their own rate tiers by allocating sets of keys to users and rotating the key usage.",
      "nodes": [
        {
          "content": "This enables the developer's client application to choose how they want to create the rate limiting key.",
          "pos": [
            0,
            104
          ]
        },
        {
          "content": "With a little bit of ingenuity a client developer could create their own rate tiers by allocating sets of keys to users and rotating the key usage.",
          "pos": [
            105,
            252
          ]
        }
      ]
    },
    {
      "pos": [
        5003,
        5010
      ],
      "content": "Summary"
    },
    {
      "pos": [
        5011,
        5584
      ],
      "content": "Azure API Management provides rate and quote throttling to both protect and add value to your API service. The new throttling policies with custom scoping rules allow you finer grained control over those policies to enable your customers to build even better applications. The examples in this article demonstrate the use of these new policies by manufacturing rate limiting keys with client IP addresses, user identity, and client generated values. However, there are many other parts of the message that could be used such as user agent, URL path fragments, message size.",
      "nodes": [
        {
          "content": "Azure API Management provides rate and quote throttling to both protect and add value to your API service.",
          "pos": [
            0,
            106
          ]
        },
        {
          "content": "The new throttling policies with custom scoping rules allow you finer grained control over those policies to enable your customers to build even better applications.",
          "pos": [
            107,
            272
          ]
        },
        {
          "content": "The examples in this article demonstrate the use of these new policies by manufacturing rate limiting keys with client IP addresses, user identity, and client generated values.",
          "pos": [
            273,
            449
          ]
        },
        {
          "content": "However, there are many other parts of the message that could be used such as user agent, URL path fragments, message size.",
          "pos": [
            450,
            573
          ]
        }
      ]
    },
    {
      "pos": [
        5589,
        5599
      ],
      "content": "Next steps"
    },
    {
      "pos": [
        5600,
        5775
      ],
      "content": "Please give us your feedback in the Disqus thread for this topic. It would be great to hear about other potential key values that have been a logical choice in your scenarios.",
      "nodes": [
        {
          "content": "Please give us your feedback in the Disqus thread for this topic.",
          "pos": [
            0,
            65
          ]
        },
        {
          "content": "It would be great to hear about other potential key values that have been a logical choice in your scenarios.",
          "pos": [
            66,
            175
          ]
        }
      ]
    },
    {
      "pos": [
        5780,
        5820
      ],
      "content": "Watch a video overview of these policies"
    },
    {
      "pos": [
        5821,
        6105
      ],
      "content": "For more information on the <bpt id=\"p6\">[</bpt>rate-limit-by-key<ept id=\"p6\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#LimitCallRateByKey)</ept><ph id=\"ph11\"/> and <bpt id=\"p7\">[</bpt>quota-by-key<ept id=\"p7\">](https://msdn.microsoft.com/library/azure/dn894078.aspx#SetUsageQuotaByKey)</ept><ph id=\"ph12\"/> policies covered in this article, please watch the following video."
    }
  ],
  "content": "<properties\n    pageTitle=\"Advanced request throttling with Azure API Management\"\n    description=\"Learn how to create and apply flexible quota and rate limiting policies with Azure API Management.\"\n    services=\"api-management\"\n    documentationCenter=\"\"\n    authors=\"darrelmiller\"\n    manager=\"\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"api-management\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.tgt_pltfrm=\"na\"\n    ms.workload=\"na\"\n    ms.date=\"01/15/2016\"\n    ms.author=\"v-darmi\"/>\n\n\n# Advanced request throttling with Azure API Management\n\nBeing able to throttle incoming requests is a key role of Azure API Management. Either by controlling the rate of requests or the total requests/data transferred, API Management allows API providers to protect their APIs from abuse and create value for different API product tiers.\n\n## Product based throttling\nTo date, the rate throttling capabilities have been limited to being scoped to a particular Product subscription (essentially a key), defined in the API Management publisher portal. This is useful for the API provider to apply limits on the developers who have signed up to use their API, however, it does not help, for example, in throttling individual end-users of the API. It is possible that for single user of the developer's application to consume the entire quota and then prevent other customers of the developer from being able to use the application. Also, several customers who might generate a high volume of requests may limit access to occasional users.\n\n## Custom key based throttling\nThe new [rate-limit-by-key](https://msdn.microsoft.com/library/azure/dn894078.aspx#LimitCallRateByKey) and [quota-by-key](https://msdn.microsoft.com/library/azure/dn894078.aspx#SetUsageQuotaByKey) policies provide a significantly more flexible solution to traffic control. These new policies allow you to define expressions to identify the keys that will be used to track traffic usage. The way this works is easiest illustrated with an example. \n\n## IP Address throttling\nThe following policies restrict a single client IP address to only 10 calls every minute, with a total of 1,000,000 calls and 10,000 kilobytes of bandwidth per month. \n\n    <rate-limit-by-key  calls=\"10\"\n              renewal-period=\"60\"\n              counter-key=\"@(context.Request.IpAddress)\" />\n\n    <quota-by-key calls=\"1000000\"\n              bandwidth=\"10000\"\n              renewal-period=\"2629800\"\n              counter-key=\"@(context.Request.IpAddress)\" />\n\nIf all clients on the Internet used a unique IP address, this might be an effective way of limiting usage by user. However, it is quite likely that multiple users will sharing a single public IP address due to them accessing the Internet via a NAT device. Despite this, for APIs that allow unauthenticated access the `IpAddress` might be the best option.\n\n## User identity throttling\nIf an end user is authenticated then a throttling key can be generated based on information that uniquely identifies an that user.\n\n    <rate-limit-by-key calls=\"10\"\n        renewal-period=\"60\"\n        counter-key=\"@(context.Request.Headers.GetValueOrDefault(\"Authorization\",\"\").AsJwt()?.Subject)\" />\n\nIn this example we extract the Authorization header, convert it to `JWT` object and use the subject of the token to identify the user and use that as the rate limiting key. If the user identity is stored in the `JWT` as one of the other claims then that value could be used in its place.\n\n## Combined policies\nAlthough the new throttling policies provide more control than the existing throttling policies, there is still value combining both capabilities. Throttling by product subscription key ([Limit call rate by subscription](https://msdn.microsoft.com/library/azure/dn894078.aspx#LimitCallRate) and [Set usage quota by subscription](https://msdn.microsoft.com/library/azure/dn894078.aspx#SetUsageQuota)) is a great way to enable monetizing of an API by charging based on usage levels. The finer grained control of being able to throttle by user is complementary and prevents one user's behavior from degrading the experience of another. \n\n## Client driven throttling\nWhen the throttling key is defined using a [policy expression](https://msdn.microsoft.com/library/azure/dn910913.aspx), then it is the API provider that is choosing how the throttling is scoped. However, a developer might want to control how they rate limit their own customers. This could be enabled by the API provider by introducing a custom header to allow the developer's client application to communicate the key to the API.\n\n    <rate-limit-by-key calls=\"100\"\n              renewal-period=\"60\"\n              counter-key=\"@(request.Headers.GetValueOrDefault(\"Rate-Key\",\"\"))\"/>\n\nThis enables the developer's client application to choose how they want to create the rate limiting key. With a little bit of ingenuity a client developer could create their own rate tiers by allocating sets of keys to users and rotating the key usage.\n\n## Summary\nAzure API Management provides rate and quote throttling to both protect and add value to your API service. The new throttling policies with custom scoping rules allow you finer grained control over those policies to enable your customers to build even better applications. The examples in this article demonstrate the use of these new policies by manufacturing rate limiting keys with client IP addresses, user identity, and client generated values. However, there are many other parts of the message that could be used such as user agent, URL path fragments, message size.\n\n## Next steps\nPlease give us your feedback in the Disqus thread for this topic. It would be great to hear about other potential key values that have been a logical choice in your scenarios.\n\n## Watch a video overview of these policies\nFor more information on the [rate-limit-by-key](https://msdn.microsoft.com/library/azure/dn894078.aspx#LimitCallRateByKey) and [quota-by-key](https://msdn.microsoft.com/library/azure/dn894078.aspx#SetUsageQuotaByKey) policies covered in this article, please watch the following video.\n\n> [AZURE.VIDEO advanced-request-throttling-with-azure-api-management]\n"
}