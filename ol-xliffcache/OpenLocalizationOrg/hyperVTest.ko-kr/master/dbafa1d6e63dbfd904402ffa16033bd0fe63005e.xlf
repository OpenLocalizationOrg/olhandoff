<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="1/6/2016 2:29:27 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbafa1d6e63dbfd904402ffa16033bd0fe63005e</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>ms.ContentId: 8DE9250B-556B-47BC-AD9A-8992B3D3D0F9</source>
            <target state="new">ms.ContentId: 8DE9250B-556B-47BC-AD9A-8992B3D3D0F9</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>title: PowerShell Snippets</source>
            <target state="new">title: PowerShell Snippets</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>PowerShell Snippets</source>
            <target state="new">PowerShell Snippets</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>18-Nov update for user scinario part 5.Adding this sentence to validate the bug 451132 result.</source>
            <target state="new">18-Nov update for user scinario part 5.Adding this sentence to validate the bug 451132 result.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>PowerShell is an awesome scripting, automation, and management tool for Hyper-V.  Here is a toolbox for exploring some of the cool things it can do!</source>
            <target state="new">PowerShell is an awesome scripting, automation, and management tool for Hyper-V.  Here is a toolbox for exploring some of the cool things it can do!</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>All Hyper-V management requires running as administrator so assume all scripts and snippets must be run as administrator from a Hyper-V Administrator account.</source>
            <target state="new">All Hyper-V management requires running as administrator so assume all scripts and snippets must be run as administrator from a Hyper-V Administrator account.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>If you aren't sure if you have the right permissions, type <bpt id="2">&lt;code&gt;</bpt>Get-VM<ept id="2">&lt;/code&gt;</ept> and if it runs with no errors, you're ready to go.</source>
            <target state="new">If you aren't sure if you have the right permissions, type <bpt id="2">&lt;code&gt;</bpt>Get-VM<ept id="2">&lt;/code&gt;</ept> and if it runs with no errors, you're ready to go.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>PowerShell Direct tools</source>
            <target state="new">PowerShell Direct tools</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>All of the scripts and snippets in this section will rely on the following basics.</source>
            <target state="new">All of the scripts and snippets in this section will rely on the following basics.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Requirements<ept id="1">&lt;/strong&gt;</ept> :</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Requirements<ept id="1">&lt;/strong&gt;</ept> :</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>PowerShell Direct.</source>
            <target state="new">PowerShell Direct.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Windows 10 guest and host OS.</source>
            <target state="new">Windows 10 guest and host OS.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Common Variables<ept id="1">&lt;/strong&gt;</ept> :</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Common Variables<ept id="1">&lt;/strong&gt;</ept> :</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>$VMName<ept id="1">&lt;/code&gt;</ept> -- this is a string with the VMName.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>$VMName<ept id="1">&lt;/code&gt;</ept> -- this is a string with the VMName.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>See a list of available VMs with <bpt id="2">&lt;code&gt;</bpt>Get-VM<ept id="2">&lt;/code&gt;</ept></source>
            <target state="new">See a list of available VMs with <bpt id="2">&lt;code&gt;</bpt>Get-VM<ept id="2">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>$cred<ept id="1">&lt;/code&gt;</ept> -- Credential for the guest OS.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>$cred<ept id="1">&lt;/code&gt;</ept> -- Credential for the guest OS.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Can be populated using <bpt id="2">&lt;code&gt;</bpt>$cred = Get-Credential<ept id="2">&lt;/code&gt;</ept></source>
            <target state="new">Can be populated using <bpt id="2">&lt;code&gt;</bpt>$cred = Get-Credential<ept id="2">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Check if the guest has booted</source>
            <target state="new">Check if the guest has booted</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Hyper-V Manager doesn't give you visibility into the guest operating system which often makes it difficult to know whether the guest OS has booted.</source>
            <target state="new">Hyper-V Manager doesn't give you visibility into the guest operating system which often makes it difficult to know whether the guest OS has booted.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Use this command to check whether the guest has booted.</source>
            <target state="new">Use this command to check whether the guest has booted.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Outcome<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Outcome<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Prints a friendly message declaring the state of the guest OS.</source>
            <target state="new">Prints a friendly message declaring the state of the guest OS.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Script locking until the guest has booted</source>
            <target state="new">Script locking until the guest has booted</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The following function waits uses the same principle to wait until PowerShell is available in the guest (meaning the OS has booted and most services are running) then returns.</source>
            <target state="new">The following function waits uses the same principle to wait until PowerShell is available in the guest (meaning the OS has booted and most services are running) then returns.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Outcome<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Outcome<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Prints a friendly message and locks until the connection to the VM succeeds.</source>
            <target state="new">Prints a friendly message and locks until the connection to the VM succeeds.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Succeeds silently.</source>
            <target state="new">Succeeds silently.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Script locking until the guest has a network</source>
            <target state="new">Script locking until the guest has a network</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>With PowerShell Direct it is possible to get connected to a PowerShell session inside a virtual machine before the virtual machine has received an IP address.</source>
            <target state="new">With PowerShell Direct it is possible to get connected to a PowerShell session inside a virtual machine before the virtual machine has received an IP address.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>* Outcome *<ept id="1">&lt;/em&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>* Outcome *<ept id="1">&lt;/em&gt;</ept></target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Locks until a DHCP lease is recieved.</source>
            <target state="new">Locks until a DHCP lease is recieved.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Since this script is not looking for a specific subnet or IP address, it works no matter what network configuration you're using.</source>
            <target state="new">Since this script is not looking for a specific subnet or IP address, it works no matter what network configuration you're using.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Succeeds silently.</source>
            <target state="new">Succeeds silently.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Managing credentials with PowerShell</source>
            <target state="new">Managing credentials with PowerShell</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Hyper-V scripts frequently require handling credentials for one or more virtual machines, Hyper-V host, or both.</source>
            <target state="new">Hyper-V scripts frequently require handling credentials for one or more virtual machines, Hyper-V host, or both.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>There are multiple ways you can achieve this when working with PowerShell Direct or standard PowerShell remoting:</source>
            <target state="new">There are multiple ways you can achieve this when working with PowerShell Direct or standard PowerShell remoting:</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The first (and simplest) way is to have the same user credentials be valid in the host and the guest or local and remote host.</source>
            <target state="new">The first (and simplest) way is to have the same user credentials be valid in the host and the guest or local and remote host.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>This is quite easy if you are logging in with your Microsoft account - or if you are in a domain environment.</source>
            <target state="new">This is quite easy if you are logging in with your Microsoft account - or if you are in a domain environment.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>In this scenario you can just run <bpt id="2">&lt;code&gt;</bpt>Invoke-Command -VMName "test" {get-process}<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">In this scenario you can just run <bpt id="2">&lt;code&gt;</bpt>Invoke-Command -VMName "test" {get-process}<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Let PowerShell prompt you for credentials</source>
            <target state="new">Let PowerShell prompt you for credentials</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>If your credentials do not match you will automatically get a credential prompt allowing you to provide the appropriate credentials for the virtual machine.</source>
            <target state="new">If your credentials do not match you will automatically get a credential prompt allowing you to provide the appropriate credentials for the virtual machine.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Store credentials in a variable for reuse.</source>
            <target state="new">Store credentials in a variable for reuse.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Running a simple command like this:</source>
            <target state="new">Running a simple command like this:</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>And then running something like this:</source>
            <target state="new">And then running something like this:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Will mean that you only get prompted once per script/PowerShell session for your credentials.</source>
            <target state="new">Will mean that you only get prompted once per script/PowerShell session for your credentials.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Code your credentials into your scripts.</source>
            <target state="new">Code your credentials into your scripts.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Don't do this for any real workload or system<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Don't do this for any real workload or system<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Warning:  _Do not do this in a production system.</source>
            <target state="new">Warning:  _Do not do this in a production system.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Do not do this with real passwords._</source>
            <target state="new">Do not do this with real passwords._</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>You can hand craft a PSCredential object with some code like this:</source>
            <target state="new">You can hand craft a PSCredential object with some code like this:</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Grossly insecure - but useful for testing.</source>
            <target state="new">Grossly insecure - but useful for testing.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Now you get no prompts at all in this session.</source>
            <target state="new">Now you get no prompts at all in this session.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>