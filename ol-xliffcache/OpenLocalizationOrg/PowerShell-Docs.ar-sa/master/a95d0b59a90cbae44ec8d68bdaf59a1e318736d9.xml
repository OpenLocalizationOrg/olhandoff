{"nodes":[{"content":"Using the Resource Designer tool","pos":[2,34]},{"content":"Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0","pos":[38,96]},{"content":"The Resource Designer tool is a set of cmdlets exposed by the <bpt id=\"p1\">**</bpt>xDscResourceDesigner<ept id=\"p1\">**</ept> module that make creating Windows PowerShell Desired State Configuration (DSC) resources easier.","pos":[98,281]},{"content":"The cmdlets in this resource help create the MOF schema, the script module, and the directory structure for your new resource.","pos":[282,408]},{"content":"For more information about DSC resources, see <bpt id=\"p1\">[</bpt>Build Custom Windows PowerShell Desired State Configuration Resources<ept id=\"p1\">](authoringResource.md)</ept>","pos":[409,548]},{"content":"In this topic, we will create a DSC resource that manages Active Directory users.","pos":[550,631]},{"content":"Use the <bpt id=\"p1\">[</bpt>Install-Module<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn807162.aspx)</ept> cmdlet to install the <bpt id=\"p2\">**</bpt>xDscResourceDesigner<ept id=\"p2\">**</ept> module.","pos":[632,770]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: <bpt id=\"p2\">**</bpt>Install-Module<ept id=\"p2\">**</ept> is included in the <bpt id=\"p3\">**</bpt>PowerShellGet<ept id=\"p3\">**</ept> module, which is included in PowerShell 5.0.","pos":[773,883]},{"content":"You can download the <bpt id=\"p1\">**</bpt>PowerShellGet<ept id=\"p1\">**</ept> module for PowerShell 3.0 and 4.0 at <bpt id=\"p2\">[</bpt>PackageManagement PowerShell Modules Preview<ept id=\"p2\">](https://www.microsoft.com/en-us/download/details.aspx?id=49186)</ept>","pos":[884,1070]},{"content":"Creating resource properties","pos":[1076,1104]},{"content":"The first thing we need to do is decide on properties that the resource will expose.","pos":[1105,1189]},{"content":"For this example, we will define an Active Directory user with the following properties.","pos":[1190,1278]},{"content":"Parameter name  Description","pos":[1281,1308]},{"pos":[1311,1370],"content":"<bpt id=\"p1\">**</bpt>UserName<ept id=\"p1\">**</ept>: Key property that uniquely identifies a user."},{"content":"<bpt id=\"p1\">**</bpt>Ensure<ept id=\"p1\">**</ept>: Specifies whether the user account should be Present or Absent.","pos":[1373,1448]},{"content":"This parameter will have only two possible values.","pos":[1449,1499]},{"pos":[1502,1557],"content":"<bpt id=\"p1\">**</bpt>DomainCredential<ept id=\"p1\">**</ept>: The domain password for the user."},{"pos":[1560,1674],"content":"<bpt id=\"p1\">**</bpt>Password<ept id=\"p1\">**</ept>: The desired password for the user to allow a configuration to change the user password if necessary."},{"content":"To create the properties, we use the <bpt id=\"p1\">**</bpt>New-xDscResourceProperty<ept id=\"p1\">**</ept> cmdlet.","pos":[1676,1749]},{"content":"The following PowerShell commands create the properties described above.","pos":[1750,1822]},{"content":"Create the resource","pos":[2260,2279]},{"content":"Now that the resource properties have been created, we can call the <bpt id=\"p1\">**</bpt>New-xDscResource<ept id=\"p1\">**</ept> cmdlet to create the resource.","pos":[2281,2400]},{"content":"The <bpt id=\"p1\">**</bpt>New-xDscResource<ept id=\"p1\">**</ept> cmdlet takes the list of properties as parameters.","pos":[2401,2476]},{"content":"It also takes the path where the module should be created, the name of the new resource, and the name of the module in which it is contained.","pos":[2477,2618]},{"content":"The following PowerShell command creates the resource.","pos":[2619,2673]},{"pos":[2874,3074],"content":"The <bpt id=\"p1\">**</bpt>New-xDscResource<ept id=\"p1\">**</ept> cmdlet creates the MOF schema, a skeleton resource script, the required directory structure for your new resource, and a manifest for the module that exposes the new resource."},{"pos":[3076,3245],"content":"The MOF schema file is at <bpt id=\"p1\">**</bpt>C:\\Program Files\\WindowsPowerShell\\Modules\\Demo_DSCModule\\DSCResources\\Demo_ADUser\\Demo_ADUser.schema.mof<ept id=\"p1\">**</ept>, and its contents are as follows."},{"content":"The resource script is at <bpt id=\"p1\">**</bpt>C:\\Program Files\\WindowsPowerShell\\Modules\\Demo_DSCModule\\DSCResources\\Demo_ADUser\\Demo_ADUser.psm1<ept id=\"p1\">**</ept>.","pos":[3589,3719]},{"content":"It does not include the actual logic to implement the resource, which you must add yourself.","pos":[3720,3812]},{"content":"The contents of the skeleton script are as follows.","pos":[3813,3864]},{"content":"Updating the resource","pos":[5589,5610]},{"content":"If you need to add or modify the parameter list of the resource, you can call the <bpt id=\"p1\">**</bpt>Update-xDscResource<ept id=\"p1\">**</ept> cmdlet.","pos":[5612,5725]},{"content":"The cmdlet updates the resource with a new parameter list.","pos":[5726,5784]},{"content":"If you have already added logic in your resource script, it is left intact.","pos":[5785,5860]},{"content":"For example, suppose you want to include the last log in time for the user in our resource.","pos":[5862,5953]},{"content":"Rather than writing the resource again completely, you can call the <bpt id=\"p1\">**</bpt>New-xDscResourceProperty<ept id=\"p1\">**</ept> to create the new property, and then call <bpt id=\"p2\">**</bpt>Update-xDscResource<ept id=\"p2\">**</ept> and add your new property to the properties list.","pos":[5954,6166]},{"content":"Testing a resource schema","pos":[6470,6495]},{"content":"The Resource Designer tool exposes one more cmdlet that can be used to test the validity of a MOF schema that you have written manually.","pos":[6497,6633]},{"content":"Call the <bpt id=\"p1\">**</bpt>Test-xDscSchema<ept id=\"p1\">**</ept> cmdlet, passing the path of a MOF resource schema as a parameter.","pos":[6634,6728]},{"content":"The cmdlet will output any errors in the schema.","pos":[6729,6777]},{"content":"See Also","pos":[6783,6791]},{"content":"Concepts","pos":[6798,6806]},{"content":"Build Custom Windows PowerShell Desired State Configuration Resources","pos":[6808,6877]},{"content":"Other Resources","pos":[6907,6922]},{"content":"xDscResourceDesigner Module","pos":[6924,6951]}],"content":"# Using the Resource Designer tool\n\n> Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nThe Resource Designer tool is a set of cmdlets exposed by the **xDscResourceDesigner** module that make creating Windows PowerShell Desired State Configuration (DSC) resources easier. The cmdlets in this resource help create the MOF schema, the script module, and the directory structure for your new resource. For more information about DSC resources, see [Build Custom Windows PowerShell Desired State Configuration Resources](authoringResource.md).\nIn this topic, we will create a DSC resource that manages Active Directory users.\nUse the [Install-Module](https://technet.microsoft.com/en-us/library/dn807162.aspx) cmdlet to install the **xDscResourceDesigner** module.\n\n>**Note**: **Install-Module** is included in the **PowerShellGet** module, which is included in PowerShell 5.0. You can download the **PowerShellGet** module for PowerShell 3.0 and 4.0 at [PackageManagement PowerShell Modules Preview](https://www.microsoft.com/en-us/download/details.aspx?id=49186).\n\n## Creating resource properties\nThe first thing we need to do is decide on properties that the resource will expose. For this example, we will define an Active Directory user with the following properties.\n \nParameter name  Description\n* **UserName**: Key property that uniquely identifies a user.\n* **Ensure**: Specifies whether the user account should be Present or Absent. This parameter will have only two possible values.\n* **DomainCredential**: The domain password for the user.\n* **Password**: The desired password for the user to allow a configuration to change the user password if necessary.\n\nTo create the properties, we use the **New-xDscResourceProperty** cmdlet. The following PowerShell commands create the properties described above.\n\n```powershell\nPS C:\\> $UserName = New-xDscResourceProperty –Name UserName -Type String -Attribute Key\nPS C:\\> $Ensure = New-xDscResourceProperty –Name Ensure -Type String -Attribute Write –ValidateSet “Present”, “Absent”\nPS C:\\> $DomainCredential = New-xDscResourceProperty –Name DomainCredential-Type PSCredential -Attribute Write\nPS C:\\> $Password = New-xDscResourceProperty –Name Password -Type PSCredential -Attribute Write\n```\n\n## Create the resource\n\nNow that the resource properties have been created, we can call the **New-xDscResource** cmdlet to create the resource. The **New-xDscResource** cmdlet takes the list of properties as parameters. It also takes the path where the module should be created, the name of the new resource, and the name of the module in which it is contained. The following PowerShell command creates the resource.\n\n```powershell\nPS C:\\> New-xDscResource –Name Demo_ADUser –Property $UserName, $Ensure, $DomainCredential, $Password –Path ‘C:\\Program Files\\WindowsPowerShell\\Modules’ –ModuleName Demo_DSCModule\n```\n\nThe **New-xDscResource** cmdlet creates the MOF schema, a skeleton resource script, the required directory structure for your new resource, and a manifest for the module that exposes the new resource.\n\nThe MOF schema file is at **C:\\Program Files\\WindowsPowerShell\\Modules\\Demo_DSCModule\\DSCResources\\Demo_ADUser\\Demo_ADUser.schema.mof**, and its contents are as follows.\n\n```\n[ClassVersion(\"1.0.0.0\"), FriendlyName(\"Demo_ADUser\")]\nclass Demo_ADUser : OMI_BaseResource\n{\n[Key] string UserName;\n[Write, ValueMap{\"Present\",\"Absent\"}, Values{\"Present\",\"Absent\"}] string Ensure;\n[Write, EmbeddedInstance(\"MSFT_Credential\")] String DomainCredential;\n[Write, EmbeddedInstance(\"MSFT_Credential\")] String Password;\n};\n```\n\nThe resource script is at **C:\\Program Files\\WindowsPowerShell\\Modules\\Demo_DSCModule\\DSCResources\\Demo_ADUser\\Demo_ADUser.psm1**. It does not include the actual logic to implement the resource, which you must add yourself. The contents of the skeleton script are as follows.\n\n```powershell\nfunction Get-TargetResource\n{\n[CmdletBinding()]\n[OutputType([System.Collections.Hashtable])]\nparam\n(\n[parameter(Mandatory = $true)]\n[System.String]\n$UserName\n)\n\n#Write-Verbose \"Use this cmdlet to deliver information about command processing.\"\n\n#Write-Debug \"Use this cmdlet to write debug information while troubleshooting.\"\n\n\n<#\n$returnValue = @{\nUserName = [System.String]\nEnsure = [System.String]\nDomainAdminCredential = [System.Management.Automation.PSCredential]\nPassword = [System.Management.Automation.PSCredential]\n}\n\n$returnValue\n#>\n}\n\n\nfunction Set-TargetResource\n{\n[CmdletBinding()]\nparam\n(\n[parameter(Mandatory = $true)]\n[System.String]\n$UserName,\n\n[ValidateSet(\"Present\",\"Absent\")]\n[System.String]\n$Ensure,\n\n[System.Management.Automation.PSCredential]\n$DomainAdminCredential,\n\n[System.Management.Automation.PSCredential]\n$Password\n)\n\n#Write-Verbose \"Use this cmdlet to deliver information about command processing.\"\n\n#Write-Debug \"Use this cmdlet to write debug information while troubleshooting.\"\n\n#Include this line if the resource requires a system reboot.\n#$global:DSCMachineStatus = 1\n\n\n}\n\n\nfunction Test-TargetResource\n{\n[CmdletBinding()]\n[OutputType([System.Boolean])]\nparam\n(\n[parameter(Mandatory = $true)]\n[System.String]\n$UserName,\n\n[ValidateSet(\"Present\",\"Absent\")]\n[System.String]\n$Ensure,\n\n[System.Management.Automation.PSCredential]\n$DomainAdminCredential,\n\n[System.Management.Automation.PSCredential]\n$Password\n)\n\n#Write-Verbose \"Use this cmdlet to deliver information about command processing.\"\n\n#Write-Debug \"Use this cmdlet to write debug information while troubleshooting.\"\n\n\n<#\n$result = [System.Boolean]\n\n$result\n#>\n}\n\n\nExport-ModuleMember -Function *-TargetResource\n```\n\n## Updating the resource\n\nIf you need to add or modify the parameter list of the resource, you can call the **Update-xDscResource** cmdlet. The cmdlet updates the resource with a new parameter list. If you have already added logic in your resource script, it is left intact.\n\nFor example, suppose you want to include the last log in time for the user in our resource. Rather than writing the resource again completely, you can call the **New-xDscResourceProperty** to create the new property, and then call **Update-xDscResource** and add your new property to the properties list.\n\n```powershell\nPS C:\\> $lastLogon = New-xDscResourceProperty –Name LastLogon –Type Hashtable –Attribute Write –Description “For mapping users to their last log on time”\nPS C:\\> Update-xDscResource –Name ‘Demo_ADUser’ –Property $UserName, $Ensure, $DomainCredential, $Password, $lastLogon -Force\n```\n\n## Testing a resource schema\n\nThe Resource Designer tool exposes one more cmdlet that can be used to test the validity of a MOF schema that you have written manually. Call the **Test-xDscSchema** cmdlet, passing the path of a MOF resource schema as a parameter. The cmdlet will output any errors in the schema.\n\n### See Also\n\n#### Concepts\n[Build Custom Windows PowerShell Desired State Configuration Resources](authoringResource.md)\n\n#### Other Resources\n[xDscResourceDesigner Module](https://powershellgallery.com/packages/xDscResourceDesigner)\n"}