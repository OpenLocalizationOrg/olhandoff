{
  "nodes": [
    {
      "content": "Get Started with authentication for Mobile Apps in Xamarin Android",
      "pos": [
        27,
        93
      ]
    },
    {
      "content": "Learn how to use Mobile Apps to authenticate users of your Xamarin Android app through a variety of identity providers, including AAD, Google, Facebook, Twitter, and Microsoft.",
      "pos": [
        112,
        288
      ]
    },
    {
      "content": "Add authentication to your Xamarin.Android app",
      "pos": [
        637,
        683
      ]
    },
    {
      "content": "This topic shows you how to authenticate users of a Mobile App from your client application.",
      "pos": [
        815,
        907
      ]
    },
    {
      "content": "In this tutorial, you add authentication to the quickstart project using an identity provider that is supported by Azure Mobile Apps.",
      "pos": [
        908,
        1041
      ]
    },
    {
      "content": "After being successfully authenticated and authorized in the Mobile App, the user ID value is displayed.",
      "pos": [
        1042,
        1146
      ]
    },
    {
      "content": "This tutorial is based on the Mobile App quickstart.",
      "pos": [
        1148,
        1200
      ]
    },
    {
      "content": "You must also first complete the tutorial <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create a Xamarin.Android app]</ept>.",
      "pos": [
        1201,
        1274
      ]
    },
    {
      "content": "If you do not use the downloaded quick start server project, you must add the authentication extension package to your project.",
      "pos": [
        1275,
        1402
      ]
    },
    {
      "content": "For more information about server extension packages, see <bpt id=\"p1\">[</bpt>Work with the .NET backend server SDK for Azure Mobile Apps<ept id=\"p1\">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept>.",
      "pos": [
        1403,
        1583
      ]
    },
    {
      "pos": [
        1587,
        1673
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"register\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Register your app for authentication and configure App Services"
    },
    {
      "pos": [
        1801,
        1870
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"permissions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Restrict permissions to authenticated users"
    },
    {
      "content": "In Visual Studio or Xamarin Studio, run the client project on a device or emulator.",
      "pos": [
        2020,
        2103
      ]
    },
    {
      "content": "Verify that an unhandled exception with a status code of 401 (Unauthorized) is raised after the app starts.",
      "pos": [
        2104,
        2211
      ]
    },
    {
      "content": "This happens because the app attempts to access your Mobile App backend as an unauthenticated user.",
      "pos": [
        2212,
        2311
      ]
    },
    {
      "content": "The <bpt id=\"p1\">*</bpt>TodoItem<ept id=\"p1\">*</ept> table now requires authentication.",
      "pos": [
        2312,
        2361
      ]
    },
    {
      "content": "Next, you will update the client app to request resources from the Mobile App backend with an authenticated user.",
      "pos": [
        2363,
        2476
      ]
    },
    {
      "pos": [
        2480,
        2542
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add-authentication\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Add authentication to the app"
    },
    {
      "pos": [
        2544,
        2652
      ],
      "content": "The app is updated to require users to tap the <bpt id=\"p1\">**</bpt>Sign in<ept id=\"p1\">**</ept> button and authenticate before data is displayed."
    },
    {
      "pos": [
        2657,
        2710
      ],
      "content": "Add the following code to the <bpt id=\"p1\">**</bpt>TodoActivity<ept id=\"p1\">**</ept> class:"
    },
    {
      "content": "This creates a new method to authenticate a user and a method handler for a new <bpt id=\"p1\">**</bpt>Sign in<ept id=\"p1\">**</ept> button.",
      "pos": [
        3981,
        4080
      ]
    },
    {
      "content": "The user in the example code above is authenticated by using a Facebook login.",
      "pos": [
        4081,
        4159
      ]
    },
    {
      "content": "A dialog is used to display the user ID once authenticated.",
      "pos": [
        4160,
        4219
      ]
    },
    {
      "pos": [
        4227,
        4446
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you are using an identity provider other than Facebook, change the value passed to <bpt id=\"p1\">**</bpt>LoginAsync<ept id=\"p1\">**</ept> above to one of the following: <bpt id=\"p2\">_</bpt>MicrosoftAccount<ept id=\"p2\">_</ept>, <bpt id=\"p3\">_</bpt>Twitter<ept id=\"p3\">_</ept>, <bpt id=\"p4\">_</bpt>Google<ept id=\"p4\">_</ept>, or <bpt id=\"p5\">_</bpt>WindowsAzureActiveDirectory<ept id=\"p5\">_</ept>."
    },
    {
      "pos": [
        4451,
        4528
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>OnCreate<ept id=\"p1\">**</ept> method, delete or comment-out the following line of code:"
    },
    {
      "pos": [
        4569,
        4687
      ],
      "content": "In the Activity_To_Do.axml file, add the following <bpt id=\"p1\">*</bpt>LoginUser<ept id=\"p1\">*</ept> button definition before the existing <bpt id=\"p2\">*</bpt>AddItem<ept id=\"p2\">*</ept> button:"
    },
    {
      "content": "Add the following element to the Strings.xml resources file:",
      "pos": [
        4948,
        5008
      ]
    },
    {
      "content": "In Visual Studio or Xamarin Studio, run the client project on a device or emulator and sign in with your chosen identity provider.",
      "pos": [
        5072,
        5202
      ]
    },
    {
      "content": "When you are successfully logged-in, the app will display your login ID and the list of todo items, and you can make updates to the data.",
      "pos": [
        5208,
        5345
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get Started with authentication for Mobile Apps in Xamarin Android\"\n    description=\"Learn how to use Mobile Apps to authenticate users of your Xamarin Android app through a variety of identity providers, including AAD, Google, Facebook, Twitter, and Microsoft.\"\n    services=\"app-service\\mobile\"\n    documentationCenter=\"xamarin\"\n    authors=\"mattchenderson\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-mobile\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-xamarin-android\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.date=\"02/04/2016\"\n    ms.author=\"mahender\"/>\n\n# Add authentication to your Xamarin.Android app\n\n[AZURE.INCLUDE [app-service-mobile-selector-get-started-users](../../includes/app-service-mobile-selector-get-started-users.md)]\n\nThis topic shows you how to authenticate users of a Mobile App from your client application. In this tutorial, you add authentication to the quickstart project using an identity provider that is supported by Azure Mobile Apps. After being successfully authenticated and authorized in the Mobile App, the user ID value is displayed.\n\nThis tutorial is based on the Mobile App quickstart. You must also first complete the tutorial [Create a Xamarin.Android app]. If you do not use the downloaded quick start server project, you must add the authentication extension package to your project. For more information about server extension packages, see [Work with the .NET backend server SDK for Azure Mobile Apps](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md).\n\n##<a name=\"register\"></a>Register your app for authentication and configure App Services\n\n[AZURE.INCLUDE [app-service-mobile-register-authentication](../../includes/app-service-mobile-register-authentication.md)]\n\n##<a name=\"permissions\"></a>Restrict permissions to authenticated users\n\n[AZURE.INCLUDE [app-service-mobile-restrict-permissions-dotnet-backend](../../includes/app-service-mobile-restrict-permissions-dotnet-backend.md)]\n\nIn Visual Studio or Xamarin Studio, run the client project on a device or emulator. Verify that an unhandled exception with a status code of 401 (Unauthorized) is raised after the app starts. This happens because the app attempts to access your Mobile App backend as an unauthenticated user. The *TodoItem* table now requires authentication.\n\nNext, you will update the client app to request resources from the Mobile App backend with an authenticated user.\n\n##<a name=\"add-authentication\"></a>Add authentication to the app\n\nThe app is updated to require users to tap the **Sign in** button and authenticate before data is displayed.\n\n1. Add the following code to the **TodoActivity** class:\n\n        // Define a authenticated user.\n        private MobileServiceUser user;\n        private async Task<bool> Authenticate()\n        {\n                var success = false;\n                try\n                {\n                    // Sign in with Facebook login using a server-managed flow.\n                    user = await client.LoginAsync(this,\n                        MobileServiceAuthenticationProvider.Facebook);\n                    CreateAndShowDialog(string.Format(\"you are now logged in - {0}\",\n                        user.UserId), \"Logged in!\");\n\n                    success = true;\n                }\n                catch (Exception ex)\n                {\n                    CreateAndShowDialog(ex, \"Authentication failed\");\n                }\n                return success;\n        }\n\n        [Java.Interop.Export()]\n        public async void LoginUser(View view)\n        {\n            // Load data only after authentication succeeds.\n            if (await Authenticate())\n            {\n                //Hide the button after authentication succeeds.\n                FindViewById<Button>(Resource.Id.buttonLoginUser).Visibility = ViewStates.Gone;\n\n                // Load the data.\n                OnRefreshItemsSelected();\n            }\n        }\n\n    This creates a new method to authenticate a user and a method handler for a new **Sign in** button. The user in the example code above is authenticated by using a Facebook login. A dialog is used to display the user ID once authenticated.\n\n    > [AZURE.NOTE] If you are using an identity provider other than Facebook, change the value passed to **LoginAsync** above to one of the following: _MicrosoftAccount_, _Twitter_, _Google_, or _WindowsAzureActiveDirectory_.\n\n3. In the **OnCreate** method, delete or comment-out the following line of code:\n\n        OnRefreshItemsSelected ();\n\n4. In the Activity_To_Do.axml file, add the following *LoginUser* button definition before the existing *AddItem* button:\n\n        <Button\n            android:id=\"@+id/buttonLoginUser\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:onClick=\"LoginUser\"\n            android:text=\"@string/login_button_text\" />\n\n5. Add the following element to the Strings.xml resources file:\n\n        <string name=\"login_button_text\">Sign in</string>\n\n6. In Visual Studio or Xamarin Studio, run the client project on a device or emulator and sign in with your chosen identity provider.\n\n    When you are successfully logged-in, the app will display your login ID and the list of todo items, and you can make updates to the data.\n\n\n<!-- URLs. -->\n[Create a Xamarin.Android app]: app-service-mobile-xamarin-android-get-started.md\n\n"
}