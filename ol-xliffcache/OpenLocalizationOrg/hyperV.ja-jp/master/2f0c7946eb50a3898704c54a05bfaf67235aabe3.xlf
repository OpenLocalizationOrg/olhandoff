<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ja-jp">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f0c7946eb50a3898704c54a05bfaf67235aabe3</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create a device identity</source>
          <target state="new">Create a device identity</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you'll create a Java console app that creates a new device identity in the identity registry in your IoT hub.</source>
          <target state="new">In this section, you'll create a Java console app that creates a new device identity in the identity registry in your IoT hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A device cannot connect to IoT hub unless it has an entry in the device identity registry.</source>
          <target state="new">A device cannot connect to IoT hub unless it has an entry in the device identity registry.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Refer to the <bpt id="p1">**</bpt>Device Identity Registry<ept id="p1">**</ept> section of the <bpt id="p2">[</bpt>IoT Hub Developer Guide<ept id="p2">][lnk-devguide-identity]</ept> for more information.</source>
          <target state="new">Refer to the <bpt id="p1">**</bpt>Device Identity Registry<ept id="p1">**</ept> section of the <bpt id="p2">[</bpt>IoT Hub Developer Guide<ept id="p2">][lnk-devguide-identity]</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you run this console application, it generates a unique device ID and key that your device can identify itself with when it sends device-to-cloud messages to IoT Hub.</source>
          <target state="new">When you run this console application, it generates a unique device ID and key that your device can identify itself with when it sends device-to-cloud messages to IoT Hub.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create a new empty folder called iot-java-get-started.</source>
          <target state="new">Create a new empty folder called iot-java-get-started.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the iot-java-get-started folder, create a new Maven project called <bpt id="p1">**</bpt>create-device-identity<ept id="p1">**</ept> using the following command at your command-prompt.</source>
          <target state="new">In the iot-java-get-started folder, create a new Maven project called <bpt id="p1">**</bpt>create-device-identity<ept id="p1">**</ept> using the following command at your command-prompt.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that this is a single, long command:</source>
          <target state="new">Note that this is a single, long command:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>At your command prompt, navigate to the new create-device-identity folder.</source>
          <target state="new">At your command prompt, navigate to the new create-device-identity folder.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using a text editor, open the pom.xml file in the create-device-identity folder and add the following dependency to the <bpt id="p1">**</bpt>dependencies<ept id="p1">**</ept> node.</source>
          <target state="new">Using a text editor, open the pom.xml file in the create-device-identity folder and add the following dependency to the <bpt id="p1">**</bpt>dependencies<ept id="p1">**</ept> node.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This enables you to use the iothub-service-sdk package in your application:</source>
          <target state="new">This enables you to use the iothub-service-sdk package in your application:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Save and close the pom.xml file.</source>
          <target state="new">Save and close the pom.xml file.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using a text editor, open the create-device-identity\src\main\java\com\mycompany\app\App.java file.</source>
          <target state="new">Using a text editor, open the create-device-identity\src\main\java\com\mycompany\app\App.java file.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add the following <bpt id="p1">**</bpt>import<ept id="p1">**</ept> statements to the file:</source>
          <target state="new">Add the following <bpt id="p1">**</bpt>import<ept id="p1">**</ept> statements to the file:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Add the following class-level variables to the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class, replacing <bpt id="p2">**</bpt>{yourhubname}<ept id="p2">**</ept> and <bpt id="p3">**</bpt>{yourhubkey}<ept id="p3">**</ept> with the values your noted earlier:</source>
          <target state="new">Add the following class-level variables to the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class, replacing <bpt id="p2">**</bpt>{yourhubname}<ept id="p2">**</ept> and <bpt id="p3">**</bpt>{yourhubkey}<ept id="p3">**</ept> with the values your noted earlier:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Modify the signature of the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method to include the exceptions shown below:</source>
          <target state="new">Modify the signature of the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method to include the exceptions shown below:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Add the following code as the body of the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method.</source>
          <target state="new">Add the following code as the body of the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This code creates a device called <bpt id="p1">*</bpt>javadevice<ept id="p1">*</ept> in your IoT Hub identity registry if doesn't already exist.</source>
          <target state="new">This code creates a device called <bpt id="p1">*</bpt>javadevice<ept id="p1">*</ept> in your IoT Hub identity registry if doesn't already exist.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It then displays the device id and key that you will need later:</source>
          <target state="new">It then displays the device id and key that you will need later:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Save and close the App.java file.</source>
          <target state="new">Save and close the App.java file.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To build the <bpt id="p1">**</bpt>create-device-identity<ept id="p1">**</ept> application using Maven, execute the following command at the command-prompt in the create-device-identity folder:</source>
          <target state="new">To build the <bpt id="p1">**</bpt>create-device-identity<ept id="p1">**</ept> application using Maven, execute the following command at the command-prompt in the create-device-identity folder:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To run the <bpt id="p1">**</bpt>create-device-identity<ept id="p1">**</ept> application using Maven, execute the following command at the command-prompt in the create-device-identity folder:</source>
          <target state="new">To run the <bpt id="p1">**</bpt>create-device-identity<ept id="p1">**</ept> application using Maven, execute the following command at the command-prompt in the create-device-identity folder:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Make a note of the <bpt id="p1">**</bpt>Device id<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Device key<ept id="p2">**</ept>.</source>
          <target state="new">Make a note of the <bpt id="p1">**</bpt>Device id<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Device key<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You will need these later when you create an application that connects to IoT Hub as a device.</source>
          <target state="new">You will need these later when you create an application that connects to IoT Hub as a device.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The IoT Hub identity registry only stores device identities to enable secure access to the hub.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The IoT Hub identity registry only stores device identities to enable secure access to the hub.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It stores device IDs and keys to use as security credentials and an enabled/disabled flag that enables you to disable access for an individual device.</source>
          <target state="new">It stores device IDs and keys to use as security credentials and an enabled/disabled flag that enables you to disable access for an individual device.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you application needs to store other device-specific metadata, it should use an application-specific store.</source>
          <target state="new">If you application needs to store other device-specific metadata, it should use an application-specific store.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt>IoT Hub Developer Guide<ept id="p1">][lnk-devguide-identity]</ept> for more information.</source>
          <target state="new">Refer to <bpt id="p1">[</bpt>IoT Hub Developer Guide<ept id="p1">][lnk-devguide-identity]</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Receive device-to-cloud messages</source>
          <target state="new">Receive device-to-cloud messages</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this section, you'll create a Java console app that reads device-to-cloud messages from IoT Hub.</source>
          <target state="new">In this section, you'll create a Java console app that reads device-to-cloud messages from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An IoT hub exposes an <bpt id="p1">[</bpt>Event Hubs<ept id="p1">][lnk-event-hubs-overview]</ept>-compatible endpoint to enable you to read device-to-cloud messages.</source>
          <target state="new">An IoT hub exposes an <bpt id="p1">[</bpt>Event Hubs<ept id="p1">][lnk-event-hubs-overview]</ept>-compatible endpoint to enable you to read device-to-cloud messages.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To keep things simple, this tutorial creates a basic reader that is not suitable for a high throughput deployment.</source>
          <target state="new">To keep things simple, this tutorial creates a basic reader that is not suitable for a high throughput deployment.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Process device-to-cloud messages<ept id="p1">][lnk-processd2c-tutorial]</ept> tutorial shows you how to process device-to-cloud messages at scale.</source>
          <target state="new">The <bpt id="p1">[</bpt>Process device-to-cloud messages<ept id="p1">][lnk-processd2c-tutorial]</ept> tutorial shows you how to process device-to-cloud messages at scale.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Get Started with Event Hubs<ept id="p1">][lnk-eventhubs-tutorial]</ept> tutorial provides further information on how to process messages from Event Hubs and is applicable to the IoT Hub Event Hub-compatible endpoints.</source>
          <target state="new">The <bpt id="p1">[</bpt>Get Started with Event Hubs<ept id="p1">][lnk-eventhubs-tutorial]</ept> tutorial provides further information on how to process messages from Event Hubs and is applicable to the IoT Hub Event Hub-compatible endpoints.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the iot-java-get-started folder you created in the <bpt id="p1">*</bpt>Create a device identity<ept id="p1">*</ept> section, create a new Maven project called <bpt id="p2">**</bpt>read-d2c-messages<ept id="p2">**</ept> using the following command at your command-prompt.</source>
          <target state="new">In the iot-java-get-started folder you created in the <bpt id="p1">*</bpt>Create a device identity<ept id="p1">*</ept> section, create a new Maven project called <bpt id="p2">**</bpt>read-d2c-messages<ept id="p2">**</ept> using the following command at your command-prompt.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Note that this is a single, long command:</source>
          <target state="new">Note that this is a single, long command:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>At your command prompt, navigate to the new read-d2c-messages folder.</source>
          <target state="new">At your command prompt, navigate to the new read-d2c-messages folder.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Using a text editor, open the pom.xml file in the read-d2c-messages folder and add the following dependency to the <bpt id="p1">**</bpt>dependencies<ept id="p1">**</ept> node.</source>
          <target state="new">Using a text editor, open the pom.xml file in the read-d2c-messages folder and add the following dependency to the <bpt id="p1">**</bpt>dependencies<ept id="p1">**</ept> node.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This enables you to use the eventhubs-client package in your application to read from the Event Hubs-compatible endpoint:</source>
          <target state="new">This enables you to use the eventhubs-client package in your application to read from the Event Hubs-compatible endpoint:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Save and close the pom.xml file.</source>
          <target state="new">Save and close the pom.xml file.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Using a text editor, open the read-d2c-messages\src\main\java\com\mycompany\app\App.java file.</source>
          <target state="new">Using a text editor, open the read-d2c-messages\src\main\java\com\mycompany\app\App.java file.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add the following <bpt id="p1">**</bpt>import<ept id="p1">**</ept> statements to the file:</source>
          <target state="new">Add the following <bpt id="p1">**</bpt>import<ept id="p1">**</ept> statements to the file:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add the following class-level variables to the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class:</source>
          <target state="new">Add the following class-level variables to the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add the following nested class inside the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class.</source>
          <target state="new">Add the following nested class inside the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The application creates two threads to run the <bpt id="p1">**</bpt>MessageReceiver<ept id="p1">**</ept> to read messages from the two partitions in the Event Hub:</source>
          <target state="new">The application creates two threads to run the <bpt id="p1">**</bpt>MessageReceiver<ept id="p1">**</ept> to read messages from the two partitions in the Event Hub:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the following constructor to the <bpt id="p1">**</bpt>MessageReceiver<ept id="p1">**</ept> class:</source>
          <target state="new">Add the following constructor to the <bpt id="p1">**</bpt>MessageReceiver<ept id="p1">**</ept> class:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add the following <bpt id="p1">**</bpt>run<ept id="p1">**</ept> method to the <bpt id="p2">**</bpt>MessageReceiver<ept id="p2">**</ept> class.</source>
          <target state="new">Add the following <bpt id="p1">**</bpt>run<ept id="p1">**</ept> method to the <bpt id="p2">**</bpt>MessageReceiver<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This method creates an <bpt id="p1">**</bpt>EventHubReceiver<ept id="p1">**</ept> instance to read from an Event Hub partition.</source>
          <target state="new">This method creates an <bpt id="p1">**</bpt>EventHubReceiver<ept id="p1">**</ept> instance to read from an Event Hub partition.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It loops continuously and prints the message details to the console untill <bpt id="p1">**</bpt>stopThread<ept id="p1">**</ept> is true.</source>
          <target state="new">It loops continuously and prints the message details to the console untill <bpt id="p1">**</bpt>stopThread<ept id="p1">**</ept> is true.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This method uses a filter when it creates the receiver so that the receiver only reads messages sent to IoT Hub after the receiver starts running.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This method uses a filter when it creates the receiver so that the receiver only reads messages sent to IoT Hub after the receiver starts running.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is useful in a test environment so you can see the current set of messages, but in a production environment your code should make sure that it processes all the messages - see the <bpt id="p1">[</bpt>How to process IoT Hub device-to-cloud messages<ept id="p1">][lnk-processd2c-tutorial]</ept> tutorial for more information.</source>
          <target state="new">This is useful in a test environment so you can see the current set of messages, but in a production environment your code should make sure that it processes all the messages - see the <bpt id="p1">[</bpt>How to process IoT Hub device-to-cloud messages<ept id="p1">][lnk-processd2c-tutorial]</ept> tutorial for more information.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Modify the signature of the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method to include the exceptions shown below:</source>
          <target state="new">Modify the signature of the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method to include the exceptions shown below:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add the following code to the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method in the <bpt id="p2">**</bpt>App<ept id="p2">**</ept> class.</source>
          <target state="new">Add the following code to the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method in the <bpt id="p2">**</bpt>App<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This code creates an <bpt id="p1">**</bpt>EventHubClient<ept id="p1">**</ept> instance to connect to the Event Hub-compatible endpoint on your IoT hub.</source>
          <target state="new">This code creates an <bpt id="p1">**</bpt>EventHubClient<ept id="p1">**</ept> instance to connect to the Event Hub-compatible endpoint on your IoT hub.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It then creates two threads to read from the two partitions.</source>
          <target state="new">It then creates two threads to read from the two partitions.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Replace <bpt id="p1">**</bpt>{youriothubkey}<ept id="p1">**</ept>, <bpt id="p2">**</bpt>{youreventhubcompatiblenamespace}<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>{youreventhubcompatiblename}<ept id="p3">**</ept> with the values you noted previously.</source>
          <target state="new">Replace <bpt id="p1">**</bpt>{youriothubkey}<ept id="p1">**</ept>, <bpt id="p2">**</bpt>{youreventhubcompatiblenamespace}<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>{youreventhubcompatiblename}<ept id="p3">**</ept> with the values you noted previously.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">**</bpt>{youreventhubcompatiblenamespace}<ept id="p1">**</ept> placeholder comes from the <bpt id="p2">**</bpt>Event Hub-compatible endpoint<ept id="p2">**</ept> - it takes the form <bpt id="p3">**</bpt>xxxxnamespace<ept id="p3">**</ept> (in other words, remove the <bpt id="p4">**</bpt>sb://<ept id="p4">**</ept> prefix and <bpt id="p5">**</bpt>.servicebus.windows.net<ept id="p5">**</ept> suffix from the Event Hub-compatible endpoint value from the portal).</source>
          <target state="new">The value of the <bpt id="p1">**</bpt>{youreventhubcompatiblenamespace}<ept id="p1">**</ept> placeholder comes from the <bpt id="p2">**</bpt>Event Hub-compatible endpoint<ept id="p2">**</ept> - it takes the form <bpt id="p3">**</bpt>xxxxnamespace<ept id="p3">**</ept> (in other words, remove the <bpt id="p4">**</bpt>sb://<ept id="p4">**</ept> prefix and <bpt id="p5">**</bpt>.servicebus.windows.net<ept id="p5">**</ept> suffix from the Event Hub-compatible endpoint value from the portal).</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This code assumes you created your IoT hub in the F1 (free) tier.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This code assumes you created your IoT hub in the F1 (free) tier.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A free IoT hub has two partitions named "0" and "1".</source>
          <target state="new">A free IoT hub has two partitions named "0" and "1".</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you created your IoT hub using one of the other pricing tiers, you should adjust the code to create a <bpt id="p1">**</bpt>MessageReceiver<ept id="p1">**</ept> for each partition.</source>
          <target state="new">If you created your IoT hub using one of the other pricing tiers, you should adjust the code to create a <bpt id="p1">**</bpt>MessageReceiver<ept id="p1">**</ept> for each partition.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Save and close the App.java file.</source>
          <target state="new">Save and close the App.java file.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To build the <bpt id="p1">**</bpt>read-d2c-messages<ept id="p1">**</ept> application using Maven, execute the following command at the command-prompt in the read-d2c-messages folder:</source>
          <target state="new">To build the <bpt id="p1">**</bpt>read-d2c-messages<ept id="p1">**</ept> application using Maven, execute the following command at the command-prompt in the read-d2c-messages folder:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>