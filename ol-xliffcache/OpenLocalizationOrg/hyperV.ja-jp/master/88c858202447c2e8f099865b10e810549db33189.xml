{
  "nodes": [
    {
      "pos": [
        0,
        124
      ],
      "content": "Use the procedure that matches your backend project type&amp;mdash;either <bpt id=\"p1\">[</bpt>.NET backend<ept id=\"p1\">](#dotnet)</ept> or <bpt id=\"p2\">[</bpt>Node.js backend<ept id=\"p2\">](#nodejs)</ept>."
    },
    {
      "pos": [
        130,
        171
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"dotnet\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>.NET backend project"
    },
    {
      "content": "In Visual Studio, right-click the server project and click <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept>, search for <ph id=\"ph1\">`Microsoft.Azure.NotificationHubs`</ph>, then click <bpt id=\"p2\">**</bpt>Install<ept id=\"p2\">**</ept>.",
      "pos": [
        176,
        332
      ]
    },
    {
      "content": "This installs the Notification Hubs client library.",
      "pos": [
        333,
        384
      ]
    },
    {
      "pos": [
        389,
        484
      ],
      "content": "In the Controllers folder, open TodoItemController.cs and add the following <ph id=\"ph1\">`using`</ph> statements:"
    },
    {
      "pos": [
        590,
        648
      ],
      "content": "Replace the <ph id=\"ph1\">`PostTodoItem`</ph> method with the following code:"
    },
    {
      "content": "Republish the server project.",
      "pos": [
        2386,
        2415
      ]
    },
    {
      "pos": [
        2421,
        2465
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"nodejs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Node.js backend project"
    },
    {
      "pos": [
        2470,
        2738
      ],
      "content": "If you haven't already done so, <bpt id=\"p1\">[</bpt>download the quickstart project<ept id=\"p1\">](app-service-mobile-node-backend-how-to-use-server-sdk.md#download-quickstart)</ept> or else use the <bpt id=\"p2\">[</bpt>online editor in the Azure portal<ept id=\"p2\">](app-service-mobile-node-backend-how-to-use-server-sdk.md#online-editor)</ept>."
    },
    {
      "content": "Replace the existing code in the todoitem.js file with the following:",
      "pos": [
        2744,
        2813
      ]
    },
    {
      "content": "This sends a GCM notification that contains the item.text when a new todo item is inserted.",
      "pos": [
        4517,
        4608
      ]
    },
    {
      "content": "When editing the file in your local computer, republish the server project.",
      "pos": [
        4614,
        4689
      ]
    }
  ],
  "content": "Use the procedure that matches your backend project type&mdash;either [.NET backend](#dotnet) or [Node.js backend](#nodejs).\n\n### <a name=\"dotnet\"></a>.NET backend project\n\n1. In Visual Studio, right-click the server project and click **Manage NuGet Packages**, search for `Microsoft.Azure.NotificationHubs`, then click **Install**. This installs the Notification Hubs client library.\n\n2. In the Controllers folder, open TodoItemController.cs and add the following `using` statements:\n\n        using Microsoft.Azure.Mobile.Server.Config;\n        using Microsoft.Azure.NotificationHubs;\n\n3. Replace the `PostTodoItem` method with the following code:  \n\n      \n        public async Task<IHttpActionResult> PostTodoItem(TodoItem item)\n        {\n            TodoItem current = await InsertAsync(item);\n            // Get the settings for the server project.\n            HttpConfiguration config = this.Configuration;\n\n            MobileAppSettingsDictionary settings = \n                this.Configuration.GetMobileAppSettingsProvider().GetMobileAppSettings();\n\n            // Get the Notification Hubs credentials for the Mobile App.\n            string notificationHubName = settings.NotificationHubName;\n            string notificationHubConnection = settings\n                .Connections[MobileAppSettingsKeys.NotificationHubConnectionString].ConnectionString;\n\n            // Create a new Notification Hub client.\n            NotificationHubClient hub = NotificationHubClient\n            .CreateClientFromConnectionString(notificationHubConnection, notificationHubName);\n\n            // Android payload\n            var androidNotificationPayload = \"{ \\\"data\\\" : {\\\"message\\\":\\\"\" + item.Text + \"\\\"}}\";\n\n            try\n            {\n                // Send the push notification and log the results.\n                var result = await hub.SendGcmNativeNotificationAsync(androidNotificationPayload);\n\n                // Write the success result to the logs.\n                config.Services.GetTraceWriter().Info(result.State.ToString());\n            }\n            catch (System.Exception ex)\n            {\n                // Write the failure result to the logs.\n                config.Services.GetTraceWriter()\n                    .Error(ex.Message, null, \"Push.SendAsync Error\");\n            }\n            return CreatedAtRoute(\"Tables\", new { id = current.Id }, current);\n        }\n\n4. Republish the server project.\n\n### <a name=\"nodejs\"></a>Node.js backend project\n\n1. If you haven't already done so, [download the quickstart project](app-service-mobile-node-backend-how-to-use-server-sdk.md#download-quickstart) or else use the [online editor in the Azure portal](app-service-mobile-node-backend-how-to-use-server-sdk.md#online-editor).\n \n1. Replace the existing code in the todoitem.js file with the following:\n\n        var azureMobileApps = require('azure-mobile-apps'),\n        promises = require('azure-mobile-apps/src/utilities/promises'),\n        logger = require('azure-mobile-apps/src/logger');\n        \n        var table = azureMobileApps.table();\n        \n        table.insert(function (context) {\n        // For more information about the Notification Hubs JavaScript SDK, \n        // see http://aka.ms/nodejshubs\n        logger.info('Running TodoItem.insert');\n        \n        // Define the GCM payload.\n        var payload = {\n            \"data\": {\n                \"message\": context.item.text\n            }\n        };   \n        \n        // Execute the insert.  The insert returns the results as a Promise,\n        // Do the push as a post-execute action within the promise flow.\n        return context.execute()\n            .then(function (results) {\n                // Only do the push if configured\n                if (context.push) {\n                    // Send a GCM native notification.\n                    context.push.gcm.send(null, payload, function (error) {\n                        if (error) {\n                            logger.error('Error while sending push notification: ', error);\n                        } else {\n                            logger.info('Push notification sent successfully!');\n                        }\n                    });\n                }\n                // Don't forget to return the results from the context.execute()\n                return results;\n            })\n            .catch(function (error) {\n                logger.error('Error while running context.execute: ', error);\n            });\n        });\n        \n        module.exports = table;  \n\n    This sends a GCM notification that contains the item.text when a new todo item is inserted. \n\n2. When editing the file in your local computer, republish the server project. \n"
}