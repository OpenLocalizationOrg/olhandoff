<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ja-jp">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0b8498991a1910b701fe00857a9ba37e56cf247</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Processing device-to-cloud messages</source>
          <target state="new">Processing device-to-cloud messages</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this section, you will create a Windows console app that processes device-to-cloud messages from IoT Hub.</source>
          <target state="new">In this section, you will create a Windows console app that processes device-to-cloud messages from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Iot Hub exposes an <bpt id="p1">[</bpt><ept id="p1">Event Hubs]</ept>-compatible endpoint to enable an application to read device-to-cloud messages.</source>
          <target state="new">Iot Hub exposes an <bpt id="p1">[</bpt><ept id="p1">Event Hubs]</ept>-compatible endpoint to enable an application to read device-to-cloud messages.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial uses the <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept> class to process these messages in a console app.</source>
          <target state="new">This tutorial uses the <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept> class to process these messages in a console app.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information on how to process messages from Event Hubs you can refer to the <bpt id="p1">[</bpt><ept id="p1">Get Started with Event Hubs]</ept> tutorial.</source>
          <target state="new">For more information on how to process messages from Event Hubs you can refer to the <bpt id="p1">[</bpt><ept id="p1">Get Started with Event Hubs]</ept> tutorial.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The main challenge you face when you implement reliable storage of data point messages or forwarding of interactive messages, is that Event Hubs event processing relies on the message consumer to checkpoint its progress.</source>
          <target state="new">The main challenge you face when you implement reliable storage of data point messages or forwarding of interactive messages, is that Event Hubs event processing relies on the message consumer to checkpoint its progress.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Moreover, in order to achieve a high throughput, when you read from Event Hubs you should checkpoint in large batches.</source>
          <target state="new">Moreover, in order to achieve a high throughput, when you read from Event Hubs you should checkpoint in large batches.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This creates the possibility of duplicate processing for a large number of messages if there is a failure and you revert to the previous checkpoint.</source>
          <target state="new">This creates the possibility of duplicate processing for a large number of messages if there is a failure and you revert to the previous checkpoint.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this tutorial you will see how to synchronize Azure storage writes and Service Bus deduplication windows with <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> checkpoints.</source>
          <target state="new">In this tutorial you will see how to synchronize Azure storage writes and Service Bus deduplication windows with <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> checkpoints.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To reliably write messages to Azure storage, the sample uses the individual block commit feature of <bpt id="p1">[</bpt>block blobs<ept id="p1">][Azure Block Blobs]</ept>.</source>
          <target state="new">To reliably write messages to Azure storage, the sample uses the individual block commit feature of <bpt id="p1">[</bpt>block blobs<ept id="p1">][Azure Block Blobs]</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The event processor accumulates messages in memory until it is time to perform a checkpoint, such as after the accummulated buffer of messages reaches the maximum block size of 4Mb, or after the Service Bus deduplication time window elapses.</source>
          <target state="new">The event processor accumulates messages in memory until it is time to perform a checkpoint, such as after the accummulated buffer of messages reaches the maximum block size of 4Mb, or after the Service Bus deduplication time window elapses.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Then, before checkpointing, the code commits a new block to the blob.</source>
          <target state="new">Then, before checkpointing, the code commits a new block to the blob.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The event processor uses Event Hubs message offsets as block ids.</source>
          <target state="new">The event processor uses Event Hubs message offsets as block ids.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This allows it to perform a deduplication check before it commits the new block to storage, taking care of a possible crash between committing a block and the checkpoint.</source>
          <target state="new">This allows it to perform a deduplication check before it commits the new block to storage, taking care of a possible crash between committing a block and the checkpoint.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single storage account to write all the messages retrieved from IoT Hub.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single storage account to write all the messages retrieved from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt><ept id="p1">Azure Storage scalability Guidelines]</ept> to decide if you need to use multiple Azure Storage accounts in your solution.</source>
          <target state="new">Refer to <bpt id="p1">[</bpt><ept id="p1">Azure Storage scalability Guidelines]</ept> to decide if you need to use multiple Azure Storage accounts in your solution.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The application makes use of the Service Bus deduplication feature to avoid duplicates when it processes interactive messages.</source>
          <target state="new">The application makes use of the Service Bus deduplication feature to avoid duplicates when it processes interactive messages.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The simulated device stamps each interactive message with a unique <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> to enable Service Bus to ensure that, in the specified deduplication time window, no two messages with the same <bpt id="p2">**</bpt>MessageId<ept id="p2">**</ept> are delivered to the receivers.</source>
          <target state="new">The simulated device stamps each interactive message with a unique <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> to enable Service Bus to ensure that, in the specified deduplication time window, no two messages with the same <bpt id="p2">**</bpt>MessageId<ept id="p2">**</ept> are delivered to the receivers.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This deduplication, together with the per-message completion semantics provided by Service Bus queues, makes it easy to implement the reliable processing of interactive messages.</source>
          <target state="new">This deduplication, together with the per-message completion semantics provided by Service Bus queues, makes it easy to implement the reliable processing of interactive messages.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To make sure that no message is resubmitted outside of the deduplication window, the code synchronizes the <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> checkpointing mechanism with the Service Bus queue deduplication window.</source>
          <target state="new">To make sure that no message is resubmitted outside of the deduplication window, the code synchronizes the <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> checkpointing mechanism with the Service Bus queue deduplication window.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This is done by forcing a checkpoint at least once every time the deduplication window elapses (one hour in this tutorial).</source>
          <target state="new">This is done by forcing a checkpoint at least once every time the deduplication window elapses (one hour in this tutorial).</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single partitioned Service Bus queue to process all the interactive messages retrieved from IoT Hub.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single partitioned Service Bus queue to process all the interactive messages retrieved from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Refer to the <bpt id="p1">[</bpt><ept id="p1">Service Bus documentation]</ept> for more information on how to use Service Bus Queues to meet the scalability requirements of your solution.</source>
          <target state="new">Refer to the <bpt id="p1">[</bpt><ept id="p1">Service Bus documentation]</ept> for more information on how to use Service Bus Queues to meet the scalability requirements of your solution.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Provision an Azure Storage account and a Service Bus queue</source>
          <target state="new">Provision an Azure Storage account and a Service Bus queue</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In order to use the <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept> class, you must have an Azure Storage account to enable the <bpt id="p2">**</bpt>EventProcessorHost<ept id="p2">**</ept> to record checkpoint information.</source>
          <target state="new">In order to use the <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept> class, you must have an Azure Storage account to enable the <bpt id="p2">**</bpt>EventProcessorHost<ept id="p2">**</ept> to record checkpoint information.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use an existing storage account, or follow the instructions in <bpt id="p1">[</bpt><ept id="p1">About Azure Storage]</ept> to create a new one.</source>
          <target state="new">You can use an existing storage account, or follow the instructions in <bpt id="p1">[</bpt><ept id="p1">About Azure Storage]</ept> to create a new one.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Make a note of the storage account connection string.</source>
          <target state="new">Make a note of the storage account connection string.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> When you copy and paste the storage account connection string, make sure there are no spaces included in the connection string.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> When you copy and paste the storage account connection string, make sure there are no spaces included in the connection string.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You also need a Service Bus queue to enable reliable processing of interactive messages.</source>
          <target state="new">You also need a Service Bus queue to enable reliable processing of interactive messages.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can create a queue programmatically with a 1 hour deduplication window, as explained in <bpt id="p1">[</bpt>How to use Service Bus Queues<ept id="p1">][Service Bus Queue]</ept>, or use the [Azure classic portal], following these steps:</source>
          <target state="new">You can create a queue programmatically with a 1 hour deduplication window, as explained in <bpt id="p1">[</bpt>How to use Service Bus Queues<ept id="p1">][Service Bus Queue]</ept>, or use the [Azure classic portal], following these steps:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>NEW<ept id="p1">**</ept> in the bottom left corner, then <bpt id="p2">**</bpt>App Services<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Service Bus<ept id="p3">**</ept>, then <bpt id="p4">**</bpt>Queue<ept id="p4">**</ept>, then <bpt id="p5">**</bpt>Custom Create<ept id="p5">**</ept>, enter the name <bpt id="p6">**</bpt>d2ctutorial<ept id="p6">**</ept>, select a  region, use an existing namespace or create a new one, then on the next page select <bpt id="p7">**</bpt>Enable duplicate detection<ept id="p7">**</ept> and set the <bpt id="p8">**</bpt>Duplicate detection history time window<ept id="p8">**</ept> to one hour.</source>
          <target state="new">Click <bpt id="p1">**</bpt>NEW<ept id="p1">**</ept> in the bottom left corner, then <bpt id="p2">**</bpt>App Services<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Service Bus<ept id="p3">**</ept>, then <bpt id="p4">**</bpt>Queue<ept id="p4">**</ept>, then <bpt id="p5">**</bpt>Custom Create<ept id="p5">**</ept>, enter the name <bpt id="p6">**</bpt>d2ctutorial<ept id="p6">**</ept>, select a  region, use an existing namespace or create a new one, then on the next page select <bpt id="p7">**</bpt>Enable duplicate detection<ept id="p7">**</ept> and set the <bpt id="p8">**</bpt>Duplicate detection history time window<ept id="p8">**</ept> to one hour.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Then click the check mark to save your queue configuration.</source>
          <target state="new">Then click the check mark to save your queue configuration.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the list of Service Bus queues, click <bpt id="p1">**</bpt>d2ctutorial<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Configure<ept id="p2">**</ept>.</source>
          <target state="new">In the list of Service Bus queues, click <bpt id="p1">**</bpt>d2ctutorial<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Configure<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Create two shared access policies, one called <bpt id="p1">**</bpt>send<ept id="p1">**</ept> with <bpt id="p2">**</bpt>Send<ept id="p2">**</ept> permissions, and one called <bpt id="p3">**</bpt>listen<ept id="p3">**</ept> with <bpt id="p4">**</bpt>Listen<ept id="p4">**</ept> permissions.</source>
          <target state="new">Create two shared access policies, one called <bpt id="p1">**</bpt>send<ept id="p1">**</ept> with <bpt id="p2">**</bpt>Send<ept id="p2">**</ept> permissions, and one called <bpt id="p3">**</bpt>listen<ept id="p3">**</ept> with <bpt id="p4">**</bpt>Listen<ept id="p4">**</ept> permissions.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> at the bottom, when done.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> at the bottom, when done.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Dashboard<ept id="p1">**</ept> at the top, then <bpt id="p2">**</bpt>Connection information<ept id="p2">**</ept> at the bottom, make a note of the two connection strings.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Dashboard<ept id="p1">**</ept> at the top, then <bpt id="p2">**</bpt>Connection information<ept id="p2">**</ept> at the bottom, make a note of the two connection strings.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Create the event processor</source>
          <target state="new">Create the event processor</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the current Visual Studio solution, click <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, then <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then <bpt id="p3">**</bpt>New Project<ept id="p3">**</ept> to create a new Visual C# Windows project using the <bpt id="p4">**</bpt>Console Application<ept id="p4">**</ept> project template.</source>
          <target state="new">In the current Visual Studio solution, click <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, then <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then <bpt id="p3">**</bpt>New Project<ept id="p3">**</ept> to create a new Visual C# Windows project using the <bpt id="p4">**</bpt>Console Application<ept id="p4">**</ept> project template.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Name the project <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept>.</source>
          <target state="new">Name the project <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click the <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept> project, and then click <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="new">In Solution Explorer, right-click the <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept> project, and then click <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>NuGet Package Manager<ept id="p1">**</ept> dialog box appears.</source>
          <target state="new">The <bpt id="p1">**</bpt>NuGet Package Manager<ept id="p1">**</ept> dialog box appears.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Search for <bpt id="p1">**</bpt>WindowsAzure.ServiceBus<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>, and accept the terms of use.</source>
          <target state="new">Search for <bpt id="p1">**</bpt>WindowsAzure.ServiceBus<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>, and accept the terms of use.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus NuGet package<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>, with all its dependencies.</source>
          <target state="new">This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus NuGet package<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>, with all its dependencies.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Search for <bpt id="p1">**</bpt>Microsoft Azure Service Bus Event Hub - EventProcessorHost<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>, and accept the terms of use.</source>
          <target state="new">Search for <bpt id="p1">**</bpt>Microsoft Azure Service Bus Event Hub - EventProcessorHost<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>, and accept the terms of use.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus Event Hub - EventProcessorHost NuGet package<ept id="p1">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>, with all its dependencies.</source>
          <target state="new">This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus Event Hub - EventProcessorHost NuGet package<ept id="p1">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>, with all its dependencies.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept> project, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</source>
          <target state="new">Right-click the <bpt id="p1">**</bpt>ProcessDeviceToCloudMessages<ept id="p1">**</ept> project, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Name the new class <bpt id="p1">**</bpt>StoreEventProcessor<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> to create the class.</source>
          <target state="new">Name the new class <bpt id="p1">**</bpt>StoreEventProcessor<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> to create the class.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Add the following statements at the top of the StoreEventProcessor.cs file:</source>
          <target state="new">Add the following statements at the top of the StoreEventProcessor.cs file:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Substitute the following code for the body of the class:</source>
          <target state="new">Substitute the following code for the body of the class:</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> class calls this class to process device-to-cloud messages received from IoT Hub.</source>
          <target state="new">The <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> class calls this class to process device-to-cloud messages received from IoT Hub.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The code in this class implements the logic to reliably store messages in a blob container and forward interactive messages to the Service Bus queue.</source>
          <target state="new">The code in this class implements the logic to reliably store messages in a blob container and forward interactive messages to the Service Bus queue.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>OpenAsync<ept id="p1">**</ept> method, initializes the <bpt id="p2">**</bpt>currentBlockInitOffset<ept id="p2">**</ept> variable which tracks the current offset of the first message read by this event processor.</source>
          <target state="new">The <bpt id="p1">**</bpt>OpenAsync<ept id="p1">**</ept> method, initializes the <bpt id="p2">**</bpt>currentBlockInitOffset<ept id="p2">**</ept> variable which tracks the current offset of the first message read by this event processor.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remember that each processor is responsible for a single partition.</source>
          <target state="new">Remember that each processor is responsible for a single partition.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ProcessEventsAsync<ept id="p1">**</ept> method receives a batch of messages from IoT Hub and processes them as follows: it sends interactive messages to the Service Bus queue and appends data point messages to the memory buffer called <bpt id="p2">**</bpt>toAppend<ept id="p2">**</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>ProcessEventsAsync<ept id="p1">**</ept> method receives a batch of messages from IoT Hub and processes them as follows: it sends interactive messages to the Service Bus queue and appends data point messages to the memory buffer called <bpt id="p2">**</bpt>toAppend<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If the memory buffer reaches the 4Mb block limit, or the Service Bus deduplication time windows has elapsed since the last checkpoint (one hour in this tutorial), then it triggers a checkpoint.</source>
          <target state="new">If the memory buffer reaches the 4Mb block limit, or the Service Bus deduplication time windows has elapsed since the last checkpoint (one hour in this tutorial), then it triggers a checkpoint.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The method <bpt id="p1">**</bpt>AppendAndCheckpoint<ept id="p1">**</ept> first generates a blockId for the block to append.</source>
          <target state="new">The method <bpt id="p1">**</bpt>AppendAndCheckpoint<ept id="p1">**</ept> first generates a blockId for the block to append.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Azure storage requires all block ids to have the same length, so the method pads the offset with leading zeroes - <ph id="ph1">`currentBlockInitOffset.ToString("0000000000000000000000000")`</ph>.</source>
          <target state="new">Azure storage requires all block ids to have the same length, so the method pads the offset with leading zeroes - <ph id="ph1">`currentBlockInitOffset.ToString("0000000000000000000000000")`</ph>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Then, if a block with this id is already in the blob, the method overwrites it with the current contents of the buffer.</source>
          <target state="new">Then, if a block with this id is already in the blob, the method overwrites it with the current contents of the buffer.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To simplify the code, this tutorial uses a single blob file per partition to store the messages.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To simplify the code, this tutorial uses a single blob file per partition to store the messages.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A real solution would implement file rolling by creating additional files when they reach a certain size (note Azure block blob can be at most 195Gb in size), or after a certain amount of time.</source>
          <target state="new">A real solution would implement file rolling by creating additional files when they reach a certain size (note Azure block blob can be at most 195Gb in size), or after a certain amount of time.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Program<ept id="p1">**</ept> class, add the following <bpt id="p2">**</bpt>using<ept id="p2">**</ept> statements at the top:</source>
          <target state="new">In the <bpt id="p1">**</bpt>Program<ept id="p1">**</ept> class, add the following <bpt id="p2">**</bpt>using<ept id="p2">**</ept> statements at the top:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Modify the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method in the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class as shown below, substituting the IoT Hub <bpt id="p3">**</bpt>iothubowner<ept id="p3">**</ept> connection string (from the <bpt id="p4">[</bpt><ept id="p4">Get started with IoT Hub]</ept> tutorial), the storage connection string, and the Service Bus connection string with <bpt id="p5">**</bpt>Send<ept id="p5">**</ept> permissions for the queue named <bpt id="p6">**</bpt>d2ctutorial<ept id="p6">**</ept>:</source>
          <target state="new">Modify the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method in the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class as shown below, substituting the IoT Hub <bpt id="p3">**</bpt>iothubowner<ept id="p3">**</ept> connection string (from the <bpt id="p4">[</bpt><ept id="p4">Get started with IoT Hub]</ept> tutorial), the storage connection string, and the Service Bus connection string with <bpt id="p5">**</bpt>Send<ept id="p5">**</ept> permissions for the queue named <bpt id="p6">**</bpt>d2ctutorial<ept id="p6">**</ept>:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> For the sake of simplicity, this tutorial uses a single instance of the <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept> class.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> For the sake of simplicity, this tutorial uses a single instance of the <bpt id="p1">[</bpt><ept id="p1">EventProcessorHost]</ept> class.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Please refer to <bpt id="p1">[</bpt><ept id="p1">Event Hubs Programming Guide]</ept> for more information.</source>
          <target state="new">Please refer to <bpt id="p1">[</bpt><ept id="p1">Event Hubs Programming Guide]</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Receive interactive messages</source>
          <target state="new">Receive interactive messages</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In this section, you'll write a Windows console app that receives the interactive messages from the Service Bus queue.</source>
          <target state="new">In this section, you'll write a Windows console app that receives the interactive messages from the Service Bus queue.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt>Build multi-tier applications with Service Bus<ept id="p1">][]</ept> for more information on how to architect a solution using Service Bus.</source>
          <target state="new">Refer to <bpt id="p1">[</bpt>Build multi-tier applications with Service Bus<ept id="p1">][]</ept> for more information on how to architect a solution using Service Bus.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the current Visual Studio solution, create a new Visual C# Windows project using the <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> project template.</source>
          <target state="new">In the current Visual Studio solution, create a new Visual C# Windows project using the <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> project template.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Name the project <bpt id="p1">**</bpt>ProcessD2CInteractiveMessages<ept id="p1">**</ept>.</source>
          <target state="new">Name the project <bpt id="p1">**</bpt>ProcessD2CInteractiveMessages<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click the <bpt id="p1">**</bpt>ProcessD2CInteractiveMessages<ept id="p1">**</ept> project, and then click <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="new">In Solution Explorer, right-click the <bpt id="p1">**</bpt>ProcessD2CInteractiveMessages<ept id="p1">**</ept> project, and then click <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This displays the <bpt id="p1">**</bpt>NuGet Package Manager<ept id="p1">**</ept> window.</source>
          <target state="new">This displays the <bpt id="p1">**</bpt>NuGet Package Manager<ept id="p1">**</ept> window.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Search for <bpt id="p1">**</bpt>WindowsAzure.Service Bus<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>, and accept the terms of use.</source>
          <target state="new">Search for <bpt id="p1">**</bpt>WindowsAzure.Service Bus<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>, and accept the terms of use.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>, with all its dependencies.</source>
          <target state="new">This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>, with all its dependencies.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Add the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement at the top of the <bpt id="p2">**</bpt>Program.cs<ept id="p2">**</ept> file:</source>
          <target state="new">Add the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement at the top of the <bpt id="p2">**</bpt>Program.cs<ept id="p2">**</ept> file:</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Finally, add the following lines to the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method, substituting the connection string with <bpt id="p2">**</bpt>Listen<ept id="p2">**</ept> permissions for the queue named <bpt id="p3">**</bpt>d2ctutorial<ept id="p3">**</ept>:</source>
          <target state="new">Finally, add the following lines to the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method, substituting the connection string with <bpt id="p2">**</bpt>Listen<ept id="p2">**</ept> permissions for the queue named <bpt id="p3">**</bpt>d2ctutorial<ept id="p3">**</ept>:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>