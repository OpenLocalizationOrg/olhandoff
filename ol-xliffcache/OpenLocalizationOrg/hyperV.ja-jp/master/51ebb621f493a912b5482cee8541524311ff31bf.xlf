<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ja-jp">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51ebb621f493a912b5482cee8541524311ff31bf</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use the Android Mobile Apps Client Library</source>
          <target state="new">How to use the Android Mobile Apps Client Library</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to use Android client SDK for Azure Mobile Apps.</source>
          <target state="new">How to use Android client SDK for Azure Mobile Apps.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use the Android client library for Mobile Apps</source>
          <target state="new">How to use the Android client library for Mobile Apps</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This guide shows you how to use the Android client SDK for Mobile Apps to implement common scenarios, such as querying</source>
          <target state="new">This guide shows you how to use the Android client SDK for Mobile Apps to implement common scenarios, such as querying</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>for data (inserting, updating, and deleting), authenticating users, handling errors, and customizing the client.</source>
          <target state="new">for data (inserting, updating, and deleting), authenticating users, handling errors, and customizing the client.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It also</source>
          <target state="new">It also</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>does a deep-dive into common client code used in most mobile apps.</source>
          <target state="new">does a deep-dive into common client code used in most mobile apps.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This guide focuses on the client-side Android SDK.</source>
          <target state="new">This guide focuses on the client-side Android SDK.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To learn more about the server-side SDKs for Mobile Apps, see</source>
          <target state="new">To learn more about the server-side SDKs for Mobile Apps, see</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Work with .NET backend SDK<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept> or</source>
          <target state="new"><bpt id="p1">[</bpt>Work with .NET backend SDK<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept> or</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to use the Node.js backend SDK<ept id="p1">](app-service-mobile-node-backend-how-to-use-server-sdk.md)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>How to use the Node.js backend SDK<ept id="p1">](app-service-mobile-node-backend-how-to-use-server-sdk.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Reference Documentation</source>
          <target state="new">Reference Documentation</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can find the Javadocs API reference for the Android client library <bpt id="p1">[</bpt>on GitHub<ept id="p1">](http://azure.github.io/azure-mobile-apps-android-client/)</ept>.</source>
          <target state="new">You can find the Javadocs API reference for the Android client library <bpt id="p1">[</bpt>on GitHub<ept id="p1">](http://azure.github.io/azure-mobile-apps-android-client/)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Setup and Prerequisites</source>
          <target state="new">Setup and Prerequisites</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Mobile Services SDK for Android supports Android version 2.2 or later, but we recommend building against version 4.2 or later.</source>
          <target state="new">The Mobile Services SDK for Android supports Android version 2.2 or later, but we recommend building against version 4.2 or later.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Complete the <bpt id="p1">[</bpt>Mobile Apps quickstart<ept id="p1">](app-service-mobile-android-get-started.md)</ept> tutorial, which will ensure that you have</source>
          <target state="new">Complete the <bpt id="p1">[</bpt>Mobile Apps quickstart<ept id="p1">](app-service-mobile-android-get-started.md)</ept> tutorial, which will ensure that you have</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>installed Android Studio; it will help you configure your account and create your first Mobile App backend.</source>
          <target state="new">installed Android Studio; it will help you configure your account and create your first Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you do this,</source>
          <target state="new">If you do this,</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>you can skip the rest of this section.</source>
          <target state="new">you can skip the rest of this section.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you decide not to complete the Quickstart tutorial, and want to connect an Android app to a Mobile App backend, you</source>
          <target state="new">If you decide not to complete the Quickstart tutorial, and want to connect an Android app to a Mobile App backend, you</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>need to do the following:</source>
          <target state="new">need to do the following:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>create a Mobile App backend<ept id="p1">](app-service-mobile-android-get-started.md#create-a-new-azure-mobile-app-backend)</ept> to use</source>
          <target state="new"><bpt id="p1">[</bpt>create a Mobile App backend<ept id="p1">](app-service-mobile-android-get-started.md#create-a-new-azure-mobile-app-backend)</ept> to use</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>with your Android app (unless your app already has one)</source>
          <target state="new">with your Android app (unless your app already has one)</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In Android Studio, <bpt id="p1">[</bpt>update the Gradle build files<ept id="p1">](#gradle-build)</ept>, and</source>
          <target state="new">In Android Studio, <bpt id="p1">[</bpt>update the Gradle build files<ept id="p1">](#gradle-build)</ept>, and</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Enable internet permission</source>
          <target state="new">Enable internet permission</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>After this, you will need to complete the steps described in the Deep dive section.</source>
          <target state="new">After this, you will need to complete the steps described in the Deep dive section.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="gradle-build"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the Gradle build file</source>
          <target state="new"><ph id="ph1">&lt;a name="gradle-build"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the Gradle build file</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Change both <bpt id="p1">**</bpt>build.gradle<ept id="p1">**</ept> files:</source>
          <target state="new">Change both <bpt id="p1">**</bpt>build.gradle<ept id="p1">**</ept> files:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Add this code to the <bpt id="p1">*</bpt>Project<ept id="p1">*</ept> level <bpt id="p2">**</bpt>build.gradle<ept id="p2">**</ept> file inside the <bpt id="p3">*</bpt>buildscript<ept id="p3">*</ept> tag:</source>
          <target state="new">Add this code to the <bpt id="p1">*</bpt>Project<ept id="p1">*</ept> level <bpt id="p2">**</bpt>build.gradle<ept id="p2">**</ept> file inside the <bpt id="p3">*</bpt>buildscript<ept id="p3">*</ept> tag:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Add this code to the <bpt id="p1">*</bpt>Module app<ept id="p1">*</ept> level <bpt id="p2">**</bpt>build.gradle<ept id="p2">**</ept> file inside the <bpt id="p3">*</bpt>dependencies<ept id="p3">*</ept> tag:</source>
          <target state="new">Add this code to the <bpt id="p1">*</bpt>Module app<ept id="p1">*</ept> level <bpt id="p2">**</bpt>build.gradle<ept id="p2">**</ept> file inside the <bpt id="p3">*</bpt>dependencies<ept id="p3">*</ept> tag:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Currently the latest version is 3.1.</source>
          <target state="new">Currently the latest version is 3.1.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The supported versions are listed <bpt id="p1">[</bpt>here<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=717034)</ept>.</source>
          <target state="new">The supported versions are listed <bpt id="p1">[</bpt>here<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=717034)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="enable-internet"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Enable internet permission</source>
          <target state="new"><ph id="ph1">&lt;a name="enable-internet"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Enable internet permission</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To access Azure, your app must have the INTERNET permission enabled.</source>
          <target state="new">To access Azure, your app must have the INTERNET permission enabled.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If it's not already enabled, add the following line of code to your <bpt id="p1">**</bpt>AndroidManifest.xml<ept id="p1">**</ept> file:</source>
          <target state="new">If it's not already enabled, add the following line of code to your <bpt id="p1">**</bpt>AndroidManifest.xml<ept id="p1">**</ept> file:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The basics deep dive</source>
          <target state="new">The basics deep dive</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This section discusses some of the code in the Quickstart app.</source>
          <target state="new">This section discusses some of the code in the Quickstart app.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you did not complete the Quickstart, you will need to add this code to your app.</source>
          <target state="new">If you did not complete the Quickstart, you will need to add this code to your app.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The string "MobileServices" occurs frequently in the code: the code actually references the Mobile Apps SDK, it's just a temporary carry-over from the past.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The string "MobileServices" occurs frequently in the code: the code actually references the Mobile Apps SDK, it's just a temporary carry-over from the past.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="data-object"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Define client data classes</source>
          <target state="new"><ph id="ph1">&lt;a name="data-object"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Define client data classes</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To access data from SQL Azure tables, you define client data classes that correspond to the tables in the Mobile App backend.</source>
          <target state="new">To access data from SQL Azure tables, you define client data classes that correspond to the tables in the Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Examples in this topic assume a table named <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept>, which has the following columns:</source>
          <target state="new">Examples in this topic assume a table named <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept>, which has the following columns:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="new">id</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>text</source>
          <target state="new">text</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>complete</source>
          <target state="new">complete</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The corresponding typed client-side object is the following:</source>
          <target state="new">The corresponding typed client-side object is the following:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The code will reside in a file called <bpt id="p1">**</bpt>ToDoItem.java<ept id="p1">**</ept>.</source>
          <target state="new">The code will reside in a file called <bpt id="p1">**</bpt>ToDoItem.java<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If your SQL Azure table contains more columns, you would add the corresponding fields  to this class.</source>
          <target state="new">If your SQL Azure table contains more columns, you would add the corresponding fields  to this class.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example if it had an integer Priority column, then you might add this field, along with its getter and setter methods:</source>
          <target state="new">For example if it had an integer Priority column, then you might add this field, along with its getter and setter methods:</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To learn how to create additional tables in your Mobile Apps backend, see <bpt id="p1">[</bpt>How to: Define a table controller<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#how-to-define-a-table-controller)</ept> (.NET backend) or <bpt id="p2">[</bpt>Define Tables using a Dynamic Schema<ept id="p2">](app-service-mobile-node-backend-how-to-use-server-sdk.md#TableOperations)</ept> (Node.js backend).</source>
          <target state="new">To learn how to create additional tables in your Mobile Apps backend, see <bpt id="p1">[</bpt>How to: Define a table controller<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#how-to-define-a-table-controller)</ept> (.NET backend) or <bpt id="p2">[</bpt>Define Tables using a Dynamic Schema<ept id="p2">](app-service-mobile-node-backend-how-to-use-server-sdk.md#TableOperations)</ept> (Node.js backend).</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For a Node.js backend, you can also use the <bpt id="p1">**</bpt>Easy tables<ept id="p1">**</ept> setting in the <bpt id="p2">[</bpt><ept id="p2">Azure portal]</ept>.</source>
          <target state="new">For a Node.js backend, you can also use the <bpt id="p1">**</bpt>Easy tables<ept id="p1">**</ept> setting in the <bpt id="p2">[</bpt><ept id="p2">Azure portal]</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="create-client"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create the client context</source>
          <target state="new"><ph id="ph1">&lt;a name="create-client"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create the client context</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This code creates the <bpt id="p1">**</bpt>MobileServiceClient<ept id="p1">**</ept> object that is used to access your Mobile App backend.</source>
          <target state="new">This code creates the <bpt id="p1">**</bpt>MobileServiceClient<ept id="p1">**</ept> object that is used to access your Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The code goes in the <ph id="ph1">`onCreate`</ph> method of the <bpt id="p1">**</bpt>Activity<ept id="p1">**</ept> class specified in <bpt id="p2">*</bpt>AndroidManifest.xml<ept id="p2">*</ept> as a <bpt id="p3">**</bpt>MAIN<ept id="p3">**</ept> action and <bpt id="p4">**</bpt>LAUNCHER<ept id="p4">**</ept> category.</source>
          <target state="new">The code goes in the <ph id="ph1">`onCreate`</ph> method of the <bpt id="p1">**</bpt>Activity<ept id="p1">**</ept> class specified in <bpt id="p2">*</bpt>AndroidManifest.xml<ept id="p2">*</ept> as a <bpt id="p3">**</bpt>MAIN<ept id="p3">**</ept> action and <bpt id="p4">**</bpt>LAUNCHER<ept id="p4">**</ept> category.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the Quickstart code, it goes in the <bpt id="p1">**</bpt>ToDoActivity.java<ept id="p1">**</ept> file.</source>
          <target state="new">In the Quickstart code, it goes in the <bpt id="p1">**</bpt>ToDoActivity.java<ept id="p1">**</ept> file.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this code, replace <ph id="ph1">`MobileAppUrl`</ph> with the URL of your Mobile App backend, which can be found in the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept> in the blade for your Mobile App backend.</source>
          <target state="new">In this code, replace <ph id="ph1">`MobileAppUrl`</ph> with the URL of your Mobile App backend, which can be found in the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept> in the blade for your Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For this line of code to compile, you also need to add the following <bpt id="p1">**</bpt>import<ept id="p1">**</ept> statement:</source>
          <target state="new">For this line of code to compile, you also need to add the following <bpt id="p1">**</bpt>import<ept id="p1">**</ept> statement:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="instantiating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create a table reference</source>
          <target state="new"><ph id="ph1">&lt;a name="instantiating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create a table reference</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The easiest way to query or modify data in the backend is by using the <bpt id="p1">*</bpt>typed programming model<ept id="p1">*</ept>, since Java is a strongly typed language (later on we will discuss the <bpt id="p2">*</bpt>untyped<ept id="p2">*</ept> model).</source>
          <target state="new">The easiest way to query or modify data in the backend is by using the <bpt id="p1">*</bpt>typed programming model<ept id="p1">*</ept>, since Java is a strongly typed language (later on we will discuss the <bpt id="p2">*</bpt>untyped<ept id="p2">*</ept> model).</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This model provides seamless JSON serialization and deserialization using the <bpt id="p1">[</bpt>gson<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library when sending data between  client objects and tables in the backend Azure SQL: the developer doesn't have to do anything, the framework handles it all.</source>
          <target state="new">This model provides seamless JSON serialization and deserialization using the <bpt id="p1">[</bpt>gson<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library when sending data between  client objects and tables in the backend Azure SQL: the developer doesn't have to do anything, the framework handles it all.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To access a table, first create a <bpt id="p1">[</bpt>MobileServiceTable<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296835)</ept> object by calling the <bpt id="p2">**</bpt>getTable<ept id="p2">**</ept> method on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MobileServiceClient<ept id="p4">**</ept><ept id="p3">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept>.</source>
          <target state="new">To access a table, first create a <bpt id="p1">[</bpt>MobileServiceTable<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296835)</ept> object by calling the <bpt id="p2">**</bpt>getTable<ept id="p2">**</ept> method on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MobileServiceClient<ept id="p4">**</ept><ept id="p3">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This method has two overloads:</source>
          <target state="new">This method has two overloads:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the following code, <bpt id="p1">*</bpt>mClient<ept id="p1">*</ept> is a reference to your MobileServiceClient object.</source>
          <target state="new">In the following code, <bpt id="p1">*</bpt>mClient<ept id="p1">*</ept> is a reference to your MobileServiceClient object.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>first overload<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296839)</ept> is used where the class name and the table name are the same, and is the one used in the Quickstart:</source>
          <target state="new">The <bpt id="p1">[</bpt>first overload<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296839)</ept> is used where the class name and the table name are the same, and is the one used in the Quickstart:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>2nd overload<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296840)</ept> is used when the table name is different from the class name: the first parameter is the table name.</source>
          <target state="new">The <bpt id="p1">[</bpt>2nd overload<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296840)</ept> is used when the table name is different from the class name: the first parameter is the table name.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="binding"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Bind data to the user interface</source>
          <target state="new"><ph id="ph1">&lt;a name="binding"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Bind data to the user interface</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Data binding involves three components:</source>
          <target state="new">Data binding involves three components:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The data source</source>
          <target state="new">The data source</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The screen layout</source>
          <target state="new">The screen layout</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The adapter that ties the two together.</source>
          <target state="new">The adapter that ties the two together.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In our sample code, we return the data from the Mobile Apps SQL Azure table <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> into an array.</source>
          <target state="new">In our sample code, we return the data from the Mobile Apps SQL Azure table <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> into an array.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This is a very common pattern for data applications: database queries often return a collection of rows which the client gets in a list or array.</source>
          <target state="new">This is a very common pattern for data applications: database queries often return a collection of rows which the client gets in a list or array.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In this sample the array is the data source.</source>
          <target state="new">In this sample the array is the data source.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The code specifies a screen layout that defines the view of the data that will appear on the device.</source>
          <target state="new">The code specifies a screen layout that defines the view of the data that will appear on the device.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>And the two are bound together with an adapter, which in this code is an extension of the <bpt id="p1">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id="p1">*</ept> class.</source>
          <target state="new">And the two are bound together with an adapter, which in this code is an extension of the <bpt id="p1">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id="p1">*</ept> class.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="layout"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Define the Layout</source>
          <target state="new"><ph id="ph1">&lt;a name="layout"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Define the Layout</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The layout is defined by several snippets of XML code.</source>
          <target state="new">The layout is defined by several snippets of XML code.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Given an existing layout, let's assume the following code represents the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept> we want to populate with our server data.</source>
          <target state="new">Given an existing layout, let's assume the following code represents the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept> we want to populate with our server data.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the above code the <bpt id="p1">*</bpt>listitem<ept id="p1">*</ept> attribute specifies the id of the layout for an individual row in the list.</source>
          <target state="new">In the above code the <bpt id="p1">*</bpt>listitem<ept id="p1">*</ept> attribute specifies the id of the layout for an individual row in the list.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Here is that code, which specifies a check box and its associated text.</source>
          <target state="new">Here is that code, which specifies a check box and its associated text.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This gets instantiated once for each item in the list.</source>
          <target state="new">This gets instantiated once for each item in the list.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This layout does not display the <bpt id="p1">**</bpt>id<ept id="p1">**</ept> field, and a more complex layout would specify additional fields in the display.</source>
          <target state="new">This layout does not display the <bpt id="p1">**</bpt>id<ept id="p1">**</ept> field, and a more complex layout would specify additional fields in the display.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This code is in the <bpt id="p1">**</bpt>row_list_to_do.xml<ept id="p1">**</ept> file.</source>
          <target state="new">This code is in the <bpt id="p1">**</bpt>row_list_to_do.xml<ept id="p1">**</ept> file.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="adapter"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Define the adapter</source>
          <target state="new"><ph id="ph1">&lt;a name="adapter"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Define the adapter</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Since the data source of our view is an array of <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept>, we subclass our adapter from a <bpt id="p2">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id="p2">*</ept> class.</source>
          <target state="new">Since the data source of our view is an array of <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept>, we subclass our adapter from a <bpt id="p2">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id="p2">*</ept> class.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This subclass will produce a View for every <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> using the <bpt id="p2">*</bpt>row_list_to_do<ept id="p2">*</ept> layout.</source>
          <target state="new">This subclass will produce a View for every <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> using the <bpt id="p2">*</bpt>row_list_to_do<ept id="p2">*</ept> layout.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In our code we define the following class which is an extension of the <bpt id="p1">*</bpt>ArrayAdapter&amp;lt;E&amp;gt;<ept id="p1">*</ept> class:</source>
          <target state="new">In our code we define the following class which is an extension of the <bpt id="p1">*</bpt>ArrayAdapter&amp;lt;E&amp;gt;<ept id="p1">*</ept> class:</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You must override the adapter's <bpt id="p1">*</bpt>getView<ept id="p1">*</ept> method.</source>
          <target state="new">You must override the adapter's <bpt id="p1">*</bpt>getView<ept id="p1">*</ept> method.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This sample code is one example of how to do this: details will vary with your application.</source>
          <target state="new">This sample code is one example of how to do this: details will vary with your application.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>We create an instance of this class in our Activity as follows:</source>
          <target state="new">We create an instance of this class in our Activity as follows:</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Note that the second parameter to the ToDoItemAdapter constructor is a reference to the layout.</source>
          <target state="new">Note that the second parameter to the ToDoItemAdapter constructor is a reference to the layout.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The call to the constructor is followed by the following code which first gets a reference to the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>, and next calls <bpt id="p2">*</bpt>setAdapter<ept id="p2">*</ept> to configure itself to use the adapter we just created:</source>
          <target state="new">The call to the constructor is followed by the following code which first gets a reference to the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>, and next calls <bpt id="p2">*</bpt>setAdapter<ept id="p2">*</ept> to configure itself to use the adapter we just created:</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="api"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>The API structure</source>
          <target state="new"><ph id="ph1">&lt;a name="api"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>The API structure</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Mobile Apps table operations and custom API calls are asynchronous, so you use the <bpt id="p1">[</bpt>Future<ept id="p1">](http://developer.android.com/reference/java/util/concurrent/Future.html)</ept> and <bpt id="p2">[</bpt>AsyncTask<ept id="p2">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> objects in all of the asynchronous  methods involving queries and inserts, updates and deletes.</source>
          <target state="new">Mobile Apps table operations and custom API calls are asynchronous, so you use the <bpt id="p1">[</bpt>Future<ept id="p1">](http://developer.android.com/reference/java/util/concurrent/Future.html)</ept> and <bpt id="p2">[</bpt>AsyncTask<ept id="p2">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> objects in all of the asynchronous  methods involving queries and inserts, updates and deletes.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This makes it easier to perform multiple operations on a background thread without having to deal with multiple nested callbacks.</source>
          <target state="new">This makes it easier to perform multiple operations on a background thread without having to deal with multiple nested callbacks.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To see how these asynchronous APIs are used in your Android app and how data is displayed in the UI, review the <bpt id="p1">**</bpt>ToDoActivity.java<ept id="p1">**</ept> file in the Android quickstart project from the <bpt id="p2">[</bpt><ept id="p2">Azure portal]</ept>.</source>
          <target state="new">To see how these asynchronous APIs are used in your Android app and how data is displayed in the UI, review the <bpt id="p1">**</bpt>ToDoActivity.java<ept id="p1">**</ept> file in the Android quickstart project from the <bpt id="p2">[</bpt><ept id="p2">Azure portal]</ept>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="use-adapter"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Use the adapter</source>
          <target state="new"><ph id="ph1">&lt;a name="use-adapter"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Use the adapter</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You are now ready to use data binding.</source>
          <target state="new">You are now ready to use data binding.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following code shows how to get the items in the mobile service table, clear the adapter, and then call the adapter's <bpt id="p1">*</bpt>add<ept id="p1">*</ept> method to fill it with the returned items.</source>
          <target state="new">The following code shows how to get the items in the mobile service table, clear the adapter, and then call the adapter's <bpt id="p1">*</bpt>add<ept id="p1">*</ept> method to fill it with the returned items.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBD<ept id="p1">**</ept>: Test this code!!</source>
          <target state="new"><bpt id="p1">**</bpt>TBD<ept id="p1">**</ept>: Test this code!!</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You must also call the adapter any time you modify the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table if you want to display the results of doing that.</source>
          <target state="new">You must also call the adapter any time you modify the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table if you want to display the results of doing that.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection.</source>
          <target state="new">Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When you insert an item you call the <bpt id="p1">*</bpt>add<ept id="p1">*</ept> method on the adapter, when deleting, you call the <bpt id="p2">*</bpt>remove<ept id="p2">*</ept> method.</source>
          <target state="new">When you insert an item you call the <bpt id="p1">*</bpt>add<ept id="p1">*</ept> method on the adapter, when deleting, you call the <bpt id="p2">*</bpt>remove<ept id="p2">*</ept> method.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="querying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Query data from your Mobile App backend</source>
          <target state="new"><ph id="ph1">&lt;a name="querying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Query data from your Mobile App backend</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This section describes how to issue queries to the Mobile App backend, which includes the following tasks:</source>
          <target state="new">This section describes how to issue queries to the Mobile App backend, which includes the following tasks:</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return all Items</source>
          <target state="new">Return all Items</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Filter returned data</source>
          <target state="new">Filter returned data</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Sort returned data</source>
          <target state="new">Sort returned data</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Return data in pages</source>
          <target state="new">Return data in pages</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Select specific columns</source>
          <target state="new">Select specific columns</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Concatenate query methods</source>
          <target state="new">Concatenate query methods</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="showAll"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return all Items from a Table</source>
          <target state="new"><ph id="ph1">&lt;a name="showAll"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return all Items from a Table</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following query returns all items in the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table.</source>
          <target state="new">The following query returns all items in the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>results<ept id="p1">*</ept> variable returns the result set from the query as a list.</source>
          <target state="new">The <bpt id="p1">*</bpt>results<ept id="p1">*</ept> variable returns the result set from the query as a list.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="filtering"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Filter returned data</source>
          <target state="new"><ph id="ph1">&lt;a name="filtering"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Filter returned data</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following query execution returns all items from the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table where <bpt id="p2">*</bpt>complete<ept id="p2">*</ept> equals <bpt id="p3">*</bpt>false<ept id="p3">*</ept>.</source>
          <target state="new">The following query execution returns all items from the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table where <bpt id="p2">*</bpt>complete<ept id="p2">*</ept> equals <bpt id="p3">*</bpt>false<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This is the code that is already in the Quickstart.</source>
          <target state="new">This is the code that is already in the Quickstart.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile service table that we created previously.</source>
          <target state="new"><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile service table that we created previously.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You define a filter using the <bpt id="p1">**</bpt>where<ept id="p1">**</ept> method call on the table reference.</source>
          <target state="new">You define a filter using the <bpt id="p1">**</bpt>where<ept id="p1">**</ept> method call on the table reference.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This is followed by a <bpt id="p1">**</bpt>field<ept id="p1">**</ept> method call followed by a method call that specifies the logical predicate.</source>
          <target state="new">This is followed by a <bpt id="p1">**</bpt>field<ept id="p1">**</ept> method call followed by a method call that specifies the logical predicate.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Possible predicate methods include <bpt id="p1">**</bpt>eq<ept id="p1">**</ept> (equals), <bpt id="p2">**</bpt>ne<ept id="p2">**</ept> (not equal), <bpt id="p3">**</bpt>gt<ept id="p3">**</ept> (greater than), <bpt id="p4">**</bpt>ge<ept id="p4">**</ept> (greater than or equal to), <bpt id="p5">**</bpt>lt<ept id="p5">**</ept> (less than), <bpt id="p6">**</bpt>le<ept id="p6">**</ept> (less than or equal to), and etc. These methods let you compare number and string fields to specific values.</source>
          <target state="new">Possible predicate methods include <bpt id="p1">**</bpt>eq<ept id="p1">**</ept> (equals), <bpt id="p2">**</bpt>ne<ept id="p2">**</ept> (not equal), <bpt id="p3">**</bpt>gt<ept id="p3">**</ept> (greater than), <bpt id="p4">**</bpt>ge<ept id="p4">**</ept> (greater than or equal to), <bpt id="p5">**</bpt>lt<ept id="p5">**</ept> (less than), <bpt id="p6">**</bpt>le<ept id="p6">**</ept> (less than or equal to), and etc. These methods let you compare number and string fields to specific values.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can filter on dates.</source>
          <target state="new">You can filter on dates.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following methods let you compare the entire date field or parts of of the date: <bpt id="p1">**</bpt>year<ept id="p1">**</ept>, <bpt id="p2">**</bpt>month<ept id="p2">**</ept>, <bpt id="p3">**</bpt>day<ept id="p3">**</ept>, <bpt id="p4">**</bpt>hour<ept id="p4">**</ept>, <bpt id="p5">**</bpt>minute<ept id="p5">**</ept> and <bpt id="p6">**</bpt>second<ept id="p6">**</ept>.</source>
          <target state="new">The following methods let you compare the entire date field or parts of of the date: <bpt id="p1">**</bpt>year<ept id="p1">**</ept>, <bpt id="p2">**</bpt>month<ept id="p2">**</ept>, <bpt id="p3">**</bpt>day<ept id="p3">**</ept>, <bpt id="p4">**</bpt>hour<ept id="p4">**</ept>, <bpt id="p5">**</bpt>minute<ept id="p5">**</ept> and <bpt id="p6">**</bpt>second<ept id="p6">**</ept>.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following example adds a filter for items whose <bpt id="p1">*</bpt>due date<ept id="p1">*</ept> equals 2013.</source>
          <target state="new">The following example adds a filter for items whose <bpt id="p1">*</bpt>due date<ept id="p1">*</ept> equals 2013.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following methods support complex filters on string fields: <bpt id="p1">**</bpt>startsWith<ept id="p1">**</ept>, <bpt id="p2">**</bpt>endsWith<ept id="p2">**</ept>, <bpt id="p3">**</bpt>concat<ept id="p3">**</ept>, <bpt id="p4">**</bpt>subString<ept id="p4">**</ept>, <bpt id="p5">**</bpt>indexOf<ept id="p5">**</ept>, <bpt id="p6">**</bpt>replace<ept id="p6">**</ept>, <bpt id="p7">**</bpt>toLower<ept id="p7">**</ept>, <bpt id="p8">**</bpt>toUpper<ept id="p8">**</ept>, <bpt id="p9">**</bpt>trim<ept id="p9">**</ept>, and <bpt id="p10">**</bpt>length<ept id="p10">**</ept>.</source>
          <target state="new">The following methods support complex filters on string fields: <bpt id="p1">**</bpt>startsWith<ept id="p1">**</ept>, <bpt id="p2">**</bpt>endsWith<ept id="p2">**</ept>, <bpt id="p3">**</bpt>concat<ept id="p3">**</ept>, <bpt id="p4">**</bpt>subString<ept id="p4">**</ept>, <bpt id="p5">**</bpt>indexOf<ept id="p5">**</ept>, <bpt id="p6">**</bpt>replace<ept id="p6">**</ept>, <bpt id="p7">**</bpt>toLower<ept id="p7">**</ept>, <bpt id="p8">**</bpt>toUpper<ept id="p8">**</ept>, <bpt id="p9">**</bpt>trim<ept id="p9">**</ept>, and <bpt id="p10">**</bpt>length<ept id="p10">**</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following example filters for table rows where the <bpt id="p1">*</bpt>text<ept id="p1">*</ept> column starts with "PRI0".</source>
          <target state="new">The following example filters for table rows where the <bpt id="p1">*</bpt>text<ept id="p1">*</ept> column starts with "PRI0".</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following operator methods are supported on number fields: <bpt id="p1">**</bpt>add<ept id="p1">**</ept>, <bpt id="p2">**</bpt>sub<ept id="p2">**</ept>, <bpt id="p3">**</bpt>mul<ept id="p3">**</ept>, <bpt id="p4">**</bpt>div<ept id="p4">**</ept>, <bpt id="p5">**</bpt>mod<ept id="p5">**</ept>, <bpt id="p6">**</bpt>floor<ept id="p6">**</ept>, <bpt id="p7">**</bpt>ceiling<ept id="p7">**</ept>, and <bpt id="p8">**</bpt>round<ept id="p8">**</ept>.</source>
          <target state="new">The following operator methods are supported on number fields: <bpt id="p1">**</bpt>add<ept id="p1">**</ept>, <bpt id="p2">**</bpt>sub<ept id="p2">**</ept>, <bpt id="p3">**</bpt>mul<ept id="p3">**</ept>, <bpt id="p4">**</bpt>div<ept id="p4">**</ept>, <bpt id="p5">**</bpt>mod<ept id="p5">**</ept>, <bpt id="p6">**</bpt>floor<ept id="p6">**</ept>, <bpt id="p7">**</bpt>ceiling<ept id="p7">**</ept>, and <bpt id="p8">**</bpt>round<ept id="p8">**</ept>.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The following example filters for table rows where the <bpt id="p1">*</bpt>duration<ept id="p1">*</ept> is an even number.</source>
          <target state="new">The following example filters for table rows where the <bpt id="p1">*</bpt>duration<ept id="p1">*</ept> is an even number.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You can combine predicates with these logical methods: <bpt id="p1">**</bpt>and<ept id="p1">**</ept>, <bpt id="p2">**</bpt>or<ept id="p2">**</ept> and <bpt id="p3">**</bpt>not<ept id="p3">**</ept>.</source>
          <target state="new">You can combine predicates with these logical methods: <bpt id="p1">**</bpt>and<ept id="p1">**</ept>, <bpt id="p2">**</bpt>or<ept id="p2">**</ept> and <bpt id="p3">**</bpt>not<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The following example combines two of the above examples.</source>
          <target state="new">The following example combines two of the above examples.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>And you can group and nest logical operators, like this:</source>
          <target state="new">And you can group and nest logical operators, like this:</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more detailed discussion and examples of filtering, see <bpt id="p1">[</bpt>Exploring the richness of the Android client query model<ept id="p1">](http://hashtagfail.com/post/46493261719/mobile-services-android-querying)</ept>.</source>
          <target state="new">For more detailed discussion and examples of filtering, see <bpt id="p1">[</bpt>Exploring the richness of the Android client query model<ept id="p1">](http://hashtagfail.com/post/46493261719/mobile-services-android-querying)</ept>.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="sorting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Sort returned data</source>
          <target state="new"><ph id="ph1">&lt;a name="sorting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Sort returned data</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following code returns all items from a table of <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept> sorted ascending by the <bpt id="p2">*</bpt>text<ept id="p2">*</ept> field.</source>
          <target state="new">The following code returns all items from a table of <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept> sorted ascending by the <bpt id="p2">*</bpt>text<ept id="p2">*</ept> field.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the backend table that you created previously:</source>
          <target state="new"><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the backend table that you created previously:</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The first parameter of the <bpt id="p1">**</bpt>orderBy<ept id="p1">**</ept> method is a string equal to the name of the field on which to sort.</source>
          <target state="new">The first parameter of the <bpt id="p1">**</bpt>orderBy<ept id="p1">**</ept> method is a string equal to the name of the field on which to sort.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The second parameter uses the <bpt id="p1">**</bpt>QueryOrder<ept id="p1">**</ept> enumeration to specify whether to sort ascending or descending.</source>
          <target state="new">The second parameter uses the <bpt id="p1">**</bpt>QueryOrder<ept id="p1">**</ept> enumeration to specify whether to sort ascending or descending.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Note that if you are filtering using the <bpt id="p1">***</bpt>where<ept id="p1">***</ept> method, the <bpt id="p2">***</bpt>where<ept id="p2">***</ept> method must be invoked prior to the <bpt id="p3">***</bpt>orderBy<ept id="p3">***</ept> method.</source>
          <target state="new">Note that if you are filtering using the <bpt id="p1">***</bpt>where<ept id="p1">***</ept> method, the <bpt id="p2">***</bpt>where<ept id="p2">***</ept> method must be invoked prior to the <bpt id="p3">***</bpt>orderBy<ept id="p3">***</ept> method.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="paging"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return data in pages</source>
          <target state="new"><ph id="ph1">&lt;a name="paging"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return data in pages</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The first example shows how to select the top 5 items from a table.</source>
          <target state="new">The first example shows how to select the top 5 items from a table.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The query returns the items from a table of  <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept>.</source>
          <target state="new">The query returns the items from a table of  <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the backend table that you created previously:</source>
          <target state="new"><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the backend table that you created previously:</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Here's a query that skips the first 5 items, and then returns the next 5:</source>
          <target state="new">Here's a query that skips the first 5 items, and then returns the next 5:</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="selecting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Select specific columns</source>
          <target state="new"><ph id="ph1">&lt;a name="selecting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Select specific columns</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to return all items from a table of  <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept>, but only displays the <bpt id="p2">*</bpt>complete<ept id="p2">*</ept> and <bpt id="p3">*</bpt>text<ept id="p3">*</ept> fields.</source>
          <target state="new">The following code illustrates how to return all items from a table of  <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept>, but only displays the <bpt id="p2">*</bpt>complete<ept id="p2">*</ept> and <bpt id="p3">*</bpt>text<ept id="p3">*</ept> fields.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the backend table that we created previously.</source>
          <target state="new"><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the backend table that we created previously.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Here the parameters to the select function are the string names of the table's columns that you want to return.</source>
          <target state="new">Here the parameters to the select function are the string names of the table's columns that you want to return.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>select<ept id="p1">**</ept> method needs to follow methods like <bpt id="p2">**</bpt>where<ept id="p2">**</ept> and <bpt id="p3">**</bpt>orderBy<ept id="p3">**</ept>, if they are present.</source>
          <target state="new">The <bpt id="p1">**</bpt>select<ept id="p1">**</ept> method needs to follow methods like <bpt id="p2">**</bpt>where<ept id="p2">**</ept> and <bpt id="p3">**</bpt>orderBy<ept id="p3">**</ept>, if they are present.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It can be followed by paging methods like <bpt id="p1">**</bpt>top<ept id="p1">**</ept>.</source>
          <target state="new">It can be followed by paging methods like <bpt id="p1">**</bpt>top<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="chaining"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Concatenate query methods</source>
          <target state="new"><ph id="ph1">&lt;a name="chaining"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Concatenate query methods</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>As you have seen, the methods used in querying backend tables can be concatenated.</source>
          <target state="new">As you have seen, the methods used in querying backend tables can be concatenated.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This allows you to do things like select specific columns of filtered rows that are sorted and paged.</source>
          <target state="new">This allows you to do things like select specific columns of filtered rows that are sorted and paged.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You can create quite complex logical filters.</source>
          <target state="new">You can create quite complex logical filters.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>What makes this work is that the query methods you use return <bpt id="p1">**</bpt>MobileServiceQuery&amp;lt;T&amp;gt;<ept id="p1">**</ept> objects, which can in turn have additional methods invoked on them.</source>
          <target state="new">What makes this work is that the query methods you use return <bpt id="p1">**</bpt>MobileServiceQuery&amp;lt;T&amp;gt;<ept id="p1">**</ept> objects, which can in turn have additional methods invoked on them.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>To end the series of methods and actually run the query, you call the <bpt id="p1">**</bpt>execute<ept id="p1">**</ept> method.</source>
          <target state="new">To end the series of methods and actually run the query, you call the <bpt id="p1">**</bpt>execute<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Here's a code sample where <bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is a reference to the <bpt id="p2">*</bpt>ToDoItem<ept id="p2">*</ept> table.</source>
          <target state="new">Here's a code sample where <bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is a reference to the <bpt id="p2">*</bpt>ToDoItem<ept id="p2">*</ept> table.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The main requirement in chaining methods together is that the <bpt id="p1">*</bpt>where<ept id="p1">*</ept> method and predicates need to come first.</source>
          <target state="new">The main requirement in chaining methods together is that the <bpt id="p1">*</bpt>where<ept id="p1">*</ept> method and predicates need to come first.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>After that, you can call subsequent methods in the order that best meets the needs of your application.</source>
          <target state="new">After that, you can call subsequent methods in the order that best meets the needs of your application.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="inserting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert data into the backend</source>
          <target state="new"><ph id="ph1">&lt;a name="inserting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert data into the backend</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The following code shows how to insert a new row into a table.</source>
          <target state="new">The following code shows how to insert a new row into a table.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>First you instantiate an instance of the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> class and set its properties.</source>
          <target state="new">First you instantiate an instance of the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> class and set its properties.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Next you execute the following code:</source>
          <target state="new">Next you execute the following code:</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The returned entity matches the data inserted into the backend table, included the ID and any other values set on the backend.</source>
          <target state="new">The returned entity matches the data inserted into the backend table, included the ID and any other values set on the backend.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Mobile Apps requires that each table have a column named <bpt id="p1">**</bpt>id<ept id="p1">**</ept>, which is used to index the table.</source>
          <target state="new">Mobile Apps requires that each table have a column named <bpt id="p1">**</bpt>id<ept id="p1">**</ept>, which is used to index the table.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>By default, this column is a string data type, which is needed to support offline sync.</source>
          <target state="new">By default, this column is a string data type, which is needed to support offline sync.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The default value of the ID column is a GUID, but you can provide other unique values, such as email addresses or usernames.</source>
          <target state="new">The default value of the ID column is a GUID, but you can provide other unique values, such as email addresses or usernames.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>When a string ID value is not provided for an inserted record, the backend generates a new GUID value.</source>
          <target state="new">When a string ID value is not provided for an inserted record, the backend generates a new GUID value.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>String ID values provide the following advantages:</source>
          <target state="new">String ID values provide the following advantages:</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>IDs can be generated without making a round-trip to the database.</source>
          <target state="new">IDs can be generated without making a round-trip to the database.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Records are easier to merge from different tables or databases.</source>
          <target state="new">Records are easier to merge from different tables or databases.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>ID values integrate better with an application's logic.</source>
          <target state="new">ID values integrate better with an application's logic.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="updating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Update data in a mobile app</source>
          <target state="new"><ph id="ph1">&lt;a name="updating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Update data in a mobile app</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The following code shows how to update data in a table.</source>
          <target state="new">The following code shows how to update data in a table.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>In this example, <bpt id="p1">*</bpt>item<ept id="p1">*</ept> is a reference to a row in the <bpt id="p2">*</bpt>ToDoItem<ept id="p2">*</ept> table, which has had some changes made to it.</source>
          <target state="new">In this example, <bpt id="p1">*</bpt>item<ept id="p1">*</ept> is a reference to a row in the <bpt id="p2">*</bpt>ToDoItem<ept id="p2">*</ept> table, which has had some changes made to it.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="deleting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete data in a mobile app</source>
          <target state="new"><ph id="ph1">&lt;a name="deleting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete data in a mobile app</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The following code shows how to delete data from a table by specifying the data object.</source>
          <target state="new">The following code shows how to delete data from a table by specifying the data object.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You can also delete an item by specifying the <bpt id="p1">**</bpt>id<ept id="p1">**</ept> field of the row to delete.</source>
          <target state="new">You can also delete an item by specifying the <bpt id="p1">**</bpt>id<ept id="p1">**</ept> field of the row to delete.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="lookup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Look up a specific item</source>
          <target state="new"><ph id="ph1">&lt;a name="lookup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Look up a specific item</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>This code shows how to look up an item with a specific <bpt id="p1">*</bpt>id<ept id="p1">*</ept>.</source>
          <target state="new">This code shows how to look up an item with a specific <bpt id="p1">*</bpt>id<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="untyped"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Work with untyped data</source>
          <target state="new"><ph id="ph1">&lt;a name="untyped"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Work with untyped data</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your backend table contains a large number of columns and you only need to reference a few of them.</source>
          <target state="new">The untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your backend table contains a large number of columns and you only need to reference a few of them.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Using the typed model requires you to define all of the mobile apps table's columns in your data class.</source>
          <target state="new">Using the typed model requires you to define all of the mobile apps table's columns in your data class.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>But with the untyped model you only define the columns you need to use.</source>
          <target state="new">But with the untyped model you only define the columns you need to use.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Most of the API calls for accessing data are similar to the typed programming calls.</source>
          <target state="new">Most of the API calls for accessing data are similar to the typed programming calls.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The main difference is that in the untyped model you invoke methods on the <bpt id="p1">**</bpt>MobileServiceJsonTable<ept id="p1">**</ept> object, instead of the <bpt id="p2">**</bpt>MobileServiceTable<ept id="p2">**</ept> object.</source>
          <target state="new">The main difference is that in the untyped model you invoke methods on the <bpt id="p1">**</bpt>MobileServiceJsonTable<ept id="p1">**</ept> object, instead of the <bpt id="p2">**</bpt>MobileServiceTable<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="json_instance"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create an instance of an untyped table</source>
          <target state="new"><ph id="ph1">&lt;a name="json_instance"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create an instance of an untyped table</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Similar to the typed model, you start by getting a table reference, but in this case it's a <bpt id="p1">**</bpt>MobileServicesJsonTable<ept id="p1">**</ept> object.</source>
          <target state="new">Similar to the typed model, you start by getting a table reference, but in this case it's a <bpt id="p1">**</bpt>MobileServicesJsonTable<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You get the reference by calling the <bpt id="p1">**</bpt>getTable<ept id="p1">**</ept> method on an instance of the client, like this:</source>
          <target state="new">You get the reference by calling the <bpt id="p1">**</bpt>getTable<ept id="p1">**</ept> method on an instance of the client, like this:</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Once you have created an instance of the <bpt id="p1">**</bpt>MobileServiceJsonTable<ept id="p1">**</ept>, you can call almost all of the methods on it that you can with the typed programming model.</source>
          <target state="new">Once you have created an instance of the <bpt id="p1">**</bpt>MobileServiceJsonTable<ept id="p1">**</ept>, you can call almost all of the methods on it that you can with the typed programming model.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>However in some cases the methods take an untyped parameter, as we see in the following examples.</source>
          <target state="new">However in some cases the methods take an untyped parameter, as we see in the following examples.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="json_insert"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert into an untyped table</source>
          <target state="new"><ph id="ph1">&lt;a name="json_insert"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert into an untyped table</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The following code shows how to do an insert.</source>
          <target state="new">The following code shows how to do an insert.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The first step is to create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>JsonObject<ept id="p2">**</ept><ept id="p1">](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)</ept>, which is part of the <bpt id="p3">[</bpt>gson<ept id="p3">]( http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library.</source>
          <target state="new">The first step is to create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>JsonObject<ept id="p2">**</ept><ept id="p1">](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)</ept>, which is part of the <bpt id="p3">[</bpt>gson<ept id="p3">]( http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The next step is to insert the object.</source>
          <target state="new">The next step is to insert the object.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>If you need to get the ID of the inserted object, use this method call:</source>
          <target state="new">If you need to get the ID of the inserted object, use this method call:</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="json_delete"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete from an untyped table</source>
          <target state="new"><ph id="ph1">&lt;a name="json_delete"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete from an untyped table</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The following code shows how to delete an instance, in this case, the same instance of a <bpt id="p1">**</bpt>JsonObject<ept id="p1">**</ept> that was created in the prior <bpt id="p2">*</bpt>insert<ept id="p2">*</ept> example.</source>
          <target state="new">The following code shows how to delete an instance, in this case, the same instance of a <bpt id="p1">**</bpt>JsonObject<ept id="p1">**</ept> that was created in the prior <bpt id="p2">*</bpt>insert<ept id="p2">*</ept> example.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Note that the code is the same as with the typed case, but the method has a different signature since it references an <bpt id="p1">**</bpt>JsonObject<ept id="p1">**</ept>.</source>
          <target state="new">Note that the code is the same as with the typed case, but the method has a different signature since it references an <bpt id="p1">**</bpt>JsonObject<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>You can also delete an instance directly by using its ID:</source>
          <target state="new">You can also delete an instance directly by using its ID:</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="json_get"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return all rows from an untyped table</source>
          <target state="new"><ph id="ph1">&lt;a name="json_get"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return all rows from an untyped table</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The following code shows how to retrieve an entire table.</source>
          <target state="new">The following code shows how to retrieve an entire table.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.</source>
          <target state="new">Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>You can do filtering, sorting and paging by concatenating  methods that have the same names as those used in the typed programming model.</source>
          <target state="new">You can do filtering, sorting and paging by concatenating  methods that have the same names as those used in the typed programming model.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="custom-api"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Call a custom API</source>
          <target state="new"><ph id="ph1">&lt;a name="custom-api"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Call a custom API</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.</source>
          <target state="new">A custom API enables you to define custom endpoints that expose server functionality that does not map to an insert, update, delete, or read operation.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.</source>
          <target state="new">By using a custom API, you can have more control over messaging, including reading and setting HTTP message headers and defining a message body format other than JSON.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>From an Android client, you call the <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> method to call the custom API endpoint.</source>
          <target state="new">From an Android client, you call the <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> method to call the custom API endpoint.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The following example shows how to call an API endpoint named <bpt id="p1">*</bpt>completeAll<ept id="p1">*</ept>, which returns a collection class named MarkAllResult.</source>
          <target state="new">The following example shows how to call an API endpoint named <bpt id="p1">*</bpt>completeAll<ept id="p1">*</ept>, which returns a collection class named MarkAllResult.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> method is called on the client, which sends a POST request to the new custom API.</source>
          <target state="new">The <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> method is called on the client, which sends a POST request to the new custom API.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The result returned by the custom API is displayed in a message dialog, as are any errors.</source>
          <target state="new">The result returned by the custom API is displayed in a message dialog, as are any errors.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Other versions of <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> let you optionally send an object in the request body, specify the HTTP method, and send query parameters with the request.</source>
          <target state="new">Other versions of <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> let you optionally send an object in the request body, specify the HTTP method, and send query parameters with the request.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Untyped versions of <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> are provided as well.</source>
          <target state="new">Untyped versions of <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> are provided as well.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="authentication"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: add authentication to your app</source>
          <target state="new"><ph id="ph1">&lt;a name="authentication"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: add authentication to your app</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Tutorials already describe in detail how to add these features.</source>
          <target state="new">Tutorials already describe in detail how to add these features.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>App Service supports <bpt id="p1">[</bpt>authenticating app users<ept id="p1">](app-service-mobile-android-get-started-users.md)</ept> using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory.</source>
          <target state="new">App Service supports <bpt id="p1">[</bpt>authenticating app users<ept id="p1">](app-service-mobile-android-get-started-users.md)</ept> using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>You can set permissions on tables to restrict access for specific operations to only authenticated users.</source>
          <target state="new">You can set permissions on tables to restrict access for specific operations to only authenticated users.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>You can also use the identity of authenticated users to implement authorization rules in your backend.</source>
          <target state="new">You can also use the identity of authenticated users to implement authorization rules in your backend.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Two authentication flows are supported: a <bpt id="p1">*</bpt>server<ept id="p1">*</ept> flow and a <bpt id="p2">*</bpt>client<ept id="p2">*</ept> flow.</source>
          <target state="new">Two authentication flows are supported: a <bpt id="p1">*</bpt>server<ept id="p1">*</ept> flow and a <bpt id="p2">*</bpt>client<ept id="p2">*</ept> flow.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.</source>
          <target state="new">The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs, and requires you to code this.</source>
          <target state="new">The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs, and requires you to code this.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Three steps are required to enable authentication in your app:</source>
          <target state="new">Three steps are required to enable authentication in your app:</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Register your app for authentication with a provider, and configure your Mobile App backend.</source>
          <target state="new">Register your app for authentication with a provider, and configure your Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Restrict table permissions to authenticated users only.</source>
          <target state="new">Restrict table permissions to authenticated users only.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Add authentication code to your app.</source>
          <target state="new">Add authentication code to your app.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You can set permissions on tables to restrict access for specific operations to only authenticated users.</source>
          <target state="new">You can set permissions on tables to restrict access for specific operations to only authenticated users.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>You can also use the SID of an authenticated user to modify requests.</source>
          <target state="new">You can also use the SID of an authenticated user to modify requests.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>These first two tasks are done using the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>.</source>
          <target state="new">These first two tasks are done using the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt><ept id="p1">Get started with authentication]</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt><ept id="p1">Get started with authentication]</ept>.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="caching"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Add authentication code to your app</source>
          <target state="new"><ph id="ph1">&lt;a name="caching"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Add authentication code to your app</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The following code starts the server flow login process using the Google provider:</source>
          <target state="new">The following code starts the server flow login process using the Google provider:</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>You can get the ID of the logged-in user from a <bpt id="p1">**</bpt>MobileServiceUser<ept id="p1">**</ept>  using the <bpt id="p2">**</bpt>getUserId<ept id="p2">**</ept> method.</source>
          <target state="new">You can get the ID of the logged-in user from a <bpt id="p1">**</bpt>MobileServiceUser<ept id="p1">**</ept>  using the <bpt id="p2">**</bpt>getUserId<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>For an example of how to use Futures to call the asynchronous login APIs, see <bpt id="p1">[</bpt><ept id="p1">Get started with authentication]</ept>.</source>
          <target state="new">For an example of how to use Futures to call the asynchronous login APIs, see <bpt id="p1">[</bpt><ept id="p1">Get started with authentication]</ept>.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="caching"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Cache authentication tokens</source>
          <target state="new"><ph id="ph1">&lt;a name="caching"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Cache authentication tokens</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Caching authentication tokens requires you to store the User ID and authentication token locally on the device.</source>
          <target state="new">Caching authentication tokens requires you to store the User ID and authentication token locally on the device.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data.</source>
          <target state="new">The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.</source>
          <target state="new">However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>You can see a complete example of how to cache authentication tokens in <bpt id="p1">[</bpt>Cache authentication tokens section<ept id="p1">](app-service-mobile-android-get-started-users.md#cache-tokens)</ept>.</source>
          <target state="new">You can see a complete example of how to cache authentication tokens in <bpt id="p1">[</bpt>Cache authentication tokens section<ept id="p1">](app-service-mobile-android-get-started-users.md#cache-tokens)</ept>.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>When you try to use an expired token you will get a <bpt id="p1">*</bpt>401 unauthorized<ept id="p1">*</ept> response.</source>
          <target state="new">When you try to use an expired token you will get a <bpt id="p1">*</bpt>401 unauthorized<ept id="p1">*</ept> response.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The user must then log in to obtain new tokens.</source>
          <target state="new">The user must then log in to obtain new tokens.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services.</source>
          <target state="new">You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401.</source>
          <target state="new">The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>You can also inspect the token to check the expiration.</source>
          <target state="new">You can also inspect the token to check the expiration.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="adal"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Authenticate users with the Active Directory Authentication Library</source>
          <target state="new"><ph id="ph1">&lt;a name="adal"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Authenticate users with the Active Directory Authentication Library</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>You can use the Active Directory Authentication Library (ADAL) to sign users into your application using Azure Active Directory.</source>
          <target state="new">You can use the Active Directory Authentication Library (ADAL) to sign users into your application using Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This is often preferable to using the <ph id="ph1">`loginAsync()`</ph> methods, as it provides a more native UX feel and allows for additional customization.</source>
          <target state="new">This is often preferable to using the <ph id="ph1">`loginAsync()`</ph> methods, as it provides a more native UX feel and allows for additional customization.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Configure your mobile app backend for AAD sign-in by followin the <bpt id="p1">[</bpt>How to configure App Service for Active Directory login<ept id="p1">](app-service-mobile-how-to-configure-active-directory-authentication.md)</ept> tutorial.</source>
          <target state="new">Configure your mobile app backend for AAD sign-in by followin the <bpt id="p1">[</bpt>How to configure App Service for Active Directory login<ept id="p1">](app-service-mobile-how-to-configure-active-directory-authentication.md)</ept> tutorial.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Make sure to complete the optional step of registering a native client application.</source>
          <target state="new">Make sure to complete the optional step of registering a native client application.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Install ADAL by modifying your build.gradle file to include the following:</source>
          <target state="new">Install ADAL by modifying your build.gradle file to include the following:</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>repositories {</source>
          <target state="new">repositories {</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>mavenCentral()</source>
          <target state="new">mavenCentral()</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>flatDir {</source>
          <target state="new">flatDir {</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>dirs 'libs'</source>
          <target state="new">dirs 'libs'</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>maven {</source>
          <target state="new">maven {</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>url "YourLocalMavenRepoPath\\.m2\\repository"</source>
          <target state="new">url "YourLocalMavenRepoPath\\.m2\\repository"</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>packagingOptions {</source>
          <target state="new">packagingOptions {</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>exclude 'META-INF/MSFTSIG.RSA'</source>
          <target state="new">exclude 'META-INF/MSFTSIG.RSA'</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>exclude 'META-INF/MSFTSIG.SF'</source>
          <target state="new">exclude 'META-INF/MSFTSIG.SF'</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>dependencies {</source>
          <target state="new">dependencies {</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>compile fileTree(dir: 'libs', include: ['*.jar'])</source>
          <target state="new">compile fileTree(dir: 'libs', include: ['*.jar'])</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>compile('com.microsoft.aad:adal:1.1.1') {</source>
          <target state="new">compile('com.microsoft.aad:adal:1.1.1') {</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>exclude group: 'com.android.support'</source>
          <target state="new">exclude group: 'com.android.support'</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>} // Recent version is 1.1.1</source>
          <target state="new">} // Recent version is 1.1.1</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>compile 'com.android.support:support-v4:23.0.0'</source>
          <target state="new">compile 'com.android.support:support-v4:23.0.0'</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Add the below code to your application, making the following replacements:</source>
          <target state="new">Add the below code to your application, making the following replacements:</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Replace <bpt id="p1">**</bpt>INSERT-AUTHORITY-HERE<ept id="p1">**</ept> ith the name of the tenant in which you provisioned your application.</source>
          <target state="new">Replace <bpt id="p1">**</bpt>INSERT-AUTHORITY-HERE<ept id="p1">**</ept> ith the name of the tenant in which you provisioned your application.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The format should be https://login.windows.net/contoso.onmicrosoft.com.</source>
          <target state="new">The format should be https://login.windows.net/contoso.onmicrosoft.com.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>This value can be copied out of the Domain tab in your Azure Active Directory in the [Azure classic portal].</source>
          <target state="new">This value can be copied out of the Domain tab in your Azure Active Directory in the [Azure classic portal].</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Replace <bpt id="p1">**</bpt>INSERT-RESOURCE-ID-HERE<ept id="p1">**</ept> with the client ID for your mobile app backend.</source>
          <target state="new">Replace <bpt id="p1">**</bpt>INSERT-RESOURCE-ID-HERE<ept id="p1">**</ept> with the client ID for your mobile app backend.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>You can obtain this from the <bpt id="p1">**</bpt>Advanced<ept id="p1">**</ept> tab under <bpt id="p2">**</bpt>Azure Active Directory Settings<ept id="p2">**</ept> in the portal.</source>
          <target state="new">You can obtain this from the <bpt id="p1">**</bpt>Advanced<ept id="p1">**</ept> tab under <bpt id="p2">**</bpt>Azure Active Directory Settings<ept id="p2">**</ept> in the portal.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Replace <bpt id="p1">**</bpt>INSERT-CLIENT-ID-HERE<ept id="p1">**</ept> with the client ID you copied from the native client application.</source>
          <target state="new">Replace <bpt id="p1">**</bpt>INSERT-CLIENT-ID-HERE<ept id="p1">**</ept> with the client ID you copied from the native client application.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Replace <bpt id="p1">**</bpt>INSERT-REDIRECT-URI-HERE<ept id="p1">**</ept> with your site's <bpt id="p2">_</bpt>/.auth/login/done<ept id="p2">_</ept> endpoint, using the HTTPS scheme.</source>
          <target state="new">Replace <bpt id="p1">**</bpt>INSERT-REDIRECT-URI-HERE<ept id="p1">**</ept> with your site's <bpt id="p2">_</bpt>/.auth/login/done<ept id="p2">_</ept> endpoint, using the HTTPS scheme.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This value should be similar to <bpt id="p1">_</bpt>https://contoso.azurewebsites.net/.auth/login/done<ept id="p1">_</ept>.</source>
          <target state="new">This value should be similar to <bpt id="p1">_</bpt>https://contoso.azurewebsites.net/.auth/login/done<ept id="p1">_</ept>.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>How to: add push notification to your app</source>
          <target state="new">How to: add push notification to your app</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>You can <bpt id="p1">[</bpt>read an overview<ept id="p1">](notification-hubs-overview.md/#integration-with-app-service-mobile-apps)</ept> that describes how Microsoft Azure Notification Hubs supports a wide variety of push notifications,</source>
          <target state="new">You can <bpt id="p1">[</bpt>read an overview<ept id="p1">](notification-hubs-overview.md/#integration-with-app-service-mobile-apps)</ept> that describes how Microsoft Azure Notification Hubs supports a wide variety of push notifications,</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">[</bpt>this tutorial<ept id="p1">](app-service-mobile-android-get-started-push.md)</ept>, every time a record is inserted, a push notification is sent.</source>
          <target state="new">In <bpt id="p1">[</bpt>this tutorial<ept id="p1">](app-service-mobile-android-get-started-push.md)</ept>, every time a record is inserted, a push notification is sent.</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>How to: add offline sync to your app</source>
          <target state="new">How to: add offline sync to your app</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The Quickstart tutorial contains code that implements offline sync.</source>
          <target state="new">The Quickstart tutorial contains code that implements offline sync.</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Look for code prefixed with comments like this:</source>
          <target state="new">Look for code prefixed with comments like this:</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>By uncommenting the following lines of code you can implement offline sync, and you can add similar code to other Mobile Apps code.</source>
          <target state="new">By uncommenting the following lines of code you can implement offline sync, and you can add similar code to other Mobile Apps code.</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="customizing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize the client</source>
          <target state="new"><ph id="ph1">&lt;a name="customizing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize the client</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>There are several ways for you to customize the default behavior of the client.</source>
          <target state="new">There are several ways for you to customize the default behavior of the client.</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="headers"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize request headers</source>
          <target state="new"><ph id="ph1">&lt;a name="headers"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize request headers</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>You might want to attach a custom header to every outgoing request.</source>
          <target state="new">You might want to attach a custom header to every outgoing request.</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>You can accomplish that by configuring a <bpt id="p1">**</bpt>ServiceFilter<ept id="p1">**</ept> like this:</source>
          <target state="new">You can accomplish that by configuring a <bpt id="p1">**</bpt>ServiceFilter<ept id="p1">**</ept> like this:</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="serialization"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize serialization</source>
          <target state="new"><ph id="ph1">&lt;a name="serialization"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize serialization</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The client assumes that the table names, column names and data types on the backend all match exactly the data objects defined in the client.</source>
          <target state="new">The client assumes that the table names, column names and data types on the backend all match exactly the data objects defined in the client.</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>But there can be any number of reasons why the server and client names might not match.</source>
          <target state="new">But there can be any number of reasons why the server and client names might not match.</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>In your scenario, you might want to do the following kinds of customizations:</source>
          <target state="new">In your scenario, you might want to do the following kinds of customizations:</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The column names used in the mobile-  service table don't match the names you are using in the client.</source>
          <target state="new">The column names used in the mobile-  service table don't match the names you are using in the client.</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Use a mobile service table that has a different name than the class it maps to in the client.</source>
          <target state="new">Use a mobile service table that has a different name than the class it maps to in the client.</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Turn on automatic property capitalization.</source>
          <target state="new">Turn on automatic property capitalization.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Add complex properties to an object.</source>
          <target state="new">Add complex properties to an object.</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="columns"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Map different client and server names</source>
          <target state="new"><ph id="ph1">&lt;a name="columns"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Map different client and server names</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Suppose that your Java client code uses standard Java-style names for the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> object properties, such as the following.</source>
          <target state="new">Suppose that your Java client code uses standard Java-style names for the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> object properties, such as the following.</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>mId</source>
          <target state="new">mId</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>mText</source>
          <target state="new">mText</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>mComplete</source>
          <target state="new">mComplete</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>mDuration</source>
          <target state="new">mDuration</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>You must serialize the client names into JSON names that match the column names of the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table on the server.</source>
          <target state="new">You must serialize the client names into JSON names that match the column names of the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table on the server.</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The following code, which makes use of the <bpt id="p1">[</bpt>gson<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library does this.</source>
          <target state="new">The following code, which makes use of the <bpt id="p1">[</bpt>gson<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library does this.</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="table"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Map different table names between the client and the backend</source>
          <target state="new"><ph id="ph1">&lt;a name="table"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Map different table names between the client and the backend</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Mapping the client table name to a different mobile services table name is easy, we just use one of the overrides of the</source>
          <target state="new">Mapping the client table name to a different mobile services table name is easy, we just use one of the overrides of the</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="http://go.microsoft.com/fwlink/p/?LinkId=296840" target="_blank"&gt;</ph>getTable()<ph id="ph2">&lt;/a&gt;</ph> function, as seen in the following code.</source>
          <target state="new"><ph id="ph1">&lt;a href="http://go.microsoft.com/fwlink/p/?LinkId=296840" target="_blank"&gt;</ph>getTable()<ph id="ph2">&lt;/a&gt;</ph> function, as seen in the following code.</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="conversions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Automate column name mappings</source>
          <target state="new"><ph id="ph1">&lt;a name="conversions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Automate column name mappings</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Mapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section.</source>
          <target state="new">Mapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section.</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>But suppose our table has a lot of columns, say 20 or 30.</source>
          <target state="new">But suppose our table has a lot of columns, say 20 or 30.</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>It turns out that we can call the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> API and specify a conversion strategy that will apply to every column, and avoid having to annotate every single column name.</source>
          <target state="new">It turns out that we can call the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> API and specify a conversion strategy that will apply to every column, and avoid having to annotate every single column name.</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>To do this we use the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> library which the Android client library uses behind the scenes to serialize Java objects to JSON data, which is sent to Azure Mobile Services.</source>
          <target state="new">To do this we use the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> library which the Android client library uses behind the scenes to serialize Java objects to JSON data, which is sent to Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The following code uses the <bpt id="p1">*</bpt>setFieldNamingStrategy()<ept id="p1">*</ept> method, in which we define a <bpt id="p2">*</bpt>FieldNamingStrategy()<ept id="p2">*</ept> method.</source>
          <target state="new">The following code uses the <bpt id="p1">*</bpt>setFieldNamingStrategy()<ept id="p1">*</ept> method, in which we define a <bpt id="p2">*</bpt>FieldNamingStrategy()<ept id="p2">*</ept> method.</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>This method says to delete the initial character (an "m"), and then lower-case the next character, for every field name.</source>
          <target state="new">This method says to delete the initial character (an "m"), and then lower-case the next character, for every field name.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>This code also enables pretty-printing of the output JSON.</source>
          <target state="new">This code also enables pretty-printing of the output JSON.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>This code must be executed prior to any method calls on the Mobile Services client object.</source>
          <target state="new">This code must be executed prior to any method calls on the Mobile Services client object.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="complex"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Store an object or array property into a table</source>
          <target state="new"><ph id="ph1">&lt;a name="complex"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Store an object or array property into a table</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>So far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table.</source>
          <target state="new">So far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table.</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table.</source>
          <target state="new">Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>For example we might want to add an array of strings to the client object.</source>
          <target state="new">For example we might want to add an array of strings to the client object.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.</source>
          <target state="new">It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>To see an example of how to do this, check out the blog post <ph id="ph1">&lt;a href="http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson" target="_blank"&gt;</ph>Customizing serialization using the <ph id="ph2">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph3">&lt;/a&gt;</ph> library in the Mobile Services Android client<ph id="ph4">&lt;/a&gt;</ph>.</source>
          <target state="new">To see an example of how to do this, check out the blog post <ph id="ph1">&lt;a href="http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson" target="_blank"&gt;</ph>Customizing serialization using the <ph id="ph2">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph3">&lt;/a&gt;</ph> library in the Mobile Services Android client<ph id="ph4">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>This general method can be used whenever we have a complex object that is not automatically serializable into JSON and the mobile services table.</source>
          <target state="new">This general method can be used whenever we have a complex object that is not automatically serializable into JSON and the mobile services table.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>