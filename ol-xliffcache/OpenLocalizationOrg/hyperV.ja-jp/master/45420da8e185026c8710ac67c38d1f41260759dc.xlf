<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ja-jp">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45420da8e185026c8710ac67c38d1f41260759dc</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure AD Java Getting Started | Microsoft Azure</source>
          <target state="new">Azure AD Java Getting Started | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to build a Java web app that signs users in with a work or school account.</source>
          <target state="new">How to build a Java web app that signs users in with a work or school account.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Java Web App Sign In &amp; Sign Out with Azure AD</source>
          <target state="new">Java Web App Sign In &amp; Sign Out with Azure AD</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure AD makes it simple and straightforward to outsource your web app's identity management, providing single sign-in and sign-out with only a few lines of code.</source>
          <target state="new">Azure AD makes it simple and straightforward to outsource your web app's identity management, providing single sign-in and sign-out with only a few lines of code.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In Java web apps, you can accomplish this using Microsoft's implementation of the community-driven ADAL4J.</source>
          <target state="new">In Java web apps, you can accomplish this using Microsoft's implementation of the community-driven ADAL4J.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here we'll use ADAL4J to:</source>
          <target state="new">Here we'll use ADAL4J to:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Sign the user into the app using Azure AD as the identity provider.</source>
          <target state="new">Sign the user into the app using Azure AD as the identity provider.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Display some information about the user.</source>
          <target state="new">Display some information about the user.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sign the user out of the app.</source>
          <target state="new">Sign the user out of the app.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In order to do this, you'll need to:</source>
          <target state="new">In order to do this, you'll need to:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Register an application with Azure AD</source>
          <target state="new">Register an application with Azure AD</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Set up your app to use the ADAL4J library.</source>
          <target state="new">Set up your app to use the ADAL4J library.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the ADAL4J library to issue sign-in and sign-out requests to Azure AD.</source>
          <target state="new">Use the ADAL4J library to issue sign-in and sign-out requests to Azure AD.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Print out data about the user.</source>
          <target state="new">Print out data about the user.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To get started, <bpt id="p1">[</bpt>download the app skeleton<ept id="p1">](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/skeleton.zip)</ept> or <bpt id="p2">[</bpt>download the completed sample<ept id="p2">](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect\/archive/complete.zip)</ept>.</source>
          <target state="new">To get started, <bpt id="p1">[</bpt>download the app skeleton<ept id="p1">](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/skeleton.zip)</ept> or <bpt id="p2">[</bpt>download the completed sample<ept id="p2">](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect\/archive/complete.zip)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You'll also need an Azure AD tenant in which to register your application.</source>
          <target state="new">You'll also need an Azure AD tenant in which to register your application.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you don't have one already, <bpt id="p1">[</bpt>learn how to get one<ept id="p1">](active-directory-howto-tenant.md)</ept>.</source>
          <target state="new">If you don't have one already, <bpt id="p1">[</bpt>learn how to get one<ept id="p1">](active-directory-howto-tenant.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>1.  Register an Application with Azure AD</source>
          <target state="new">1.  Register an Application with Azure AD</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To enable your app to authenticate users, you'll first need to register a new application in your tenant.</source>
          <target state="new">To enable your app to authenticate users, you'll first need to register a new application in your tenant.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Sign into the Azure Management Portal.</source>
          <target state="new">Sign into the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the left hand nav, click on <bpt id="p1">**</bpt>Active Directory<ept id="p1">**</ept>.</source>
          <target state="new">In the left hand nav, click on <bpt id="p1">**</bpt>Active Directory<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Select the tenant where you wish to register the application.</source>
          <target state="new">Select the tenant where you wish to register the application.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Applications<ept id="p1">**</ept> tab, and click add in the bottom drawer.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Applications<ept id="p1">**</ept> tab, and click add in the bottom drawer.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Follow the prompts and create a new <bpt id="p1">**</bpt>Web Application and/or WebAPI<ept id="p1">**</ept>.</source>
          <target state="new">Follow the prompts and create a new <bpt id="p1">**</bpt>Web Application and/or WebAPI<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>name<ept id="p1">**</ept> of the application will describe your application to end-users</source>
          <target state="new">The <bpt id="p1">**</bpt>name<ept id="p1">**</ept> of the application will describe your application to end-users</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Sign-On URL<ept id="p1">**</ept> is the base URL of your app.</source>
          <target state="new">The <bpt id="p1">**</bpt>Sign-On URL<ept id="p1">**</ept> is the base URL of your app.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The skeleton's default is <ph id="ph1">`http://localhost:8080/adal4jsample/`</ph>.</source>
          <target state="new">The skeleton's default is <ph id="ph1">`http://localhost:8080/adal4jsample/`</ph>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>App ID URI<ept id="p1">**</ept> is a unique identifier for your application.</source>
          <target state="new">The <bpt id="p1">**</bpt>App ID URI<ept id="p1">**</ept> is a unique identifier for your application.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The convention is to use <ph id="ph1">`https://&lt;tenant-domain&gt;/&lt;app-name&gt;`</ph>, e.g. <ph id="ph2">`http://localhost:8080/adal4jsample/`</ph></source>
          <target state="new">The convention is to use <ph id="ph1">`https://&lt;tenant-domain&gt;/&lt;app-name&gt;`</ph>, e.g. <ph id="ph2">`http://localhost:8080/adal4jsample/`</ph></target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Once you've completed registration, AAD will assign your app a unique client identifier.</source>
          <target state="new">Once you've completed registration, AAD will assign your app a unique client identifier.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You'll need this value in the next sections, so copy it from the Configure tab.</source>
          <target state="new">You'll need this value in the next sections, so copy it from the Configure tab.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once in the portal for your app create an <bpt id="p1">**</bpt>Application Secret<ept id="p1">**</ept> for your application and copy it down.</source>
          <target state="new">Once in the portal for your app create an <bpt id="p1">**</bpt>Application Secret<ept id="p1">**</ept> for your application and copy it down.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You will need it shortly.</source>
          <target state="new">You will need it shortly.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>2. Set up your app to use ADAL4J library and prerequisities using Maven</source>
          <target state="new">2. Set up your app to use ADAL4J library and prerequisities using Maven</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Here, we'll configure ADAL4J to use the OpenID Connect authentication protocol.</source>
          <target state="new">Here, we'll configure ADAL4J to use the OpenID Connect authentication protocol.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>ADAL4J will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</source>
          <target state="new">ADAL4J will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the root directory of your project, open/create <ph id="ph1">`pom.xml`</ph> and locate the <ph id="ph2">`// TODO: provide dependencies for Maven`</ph> and replace with the following:</source>
          <target state="new">In the root directory of your project, open/create <ph id="ph1">`pom.xml`</ph> and locate the <ph id="ph2">`// TODO: provide dependencies for Maven`</ph> and replace with the following:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>3. Create the Java web application files (WEB-INF)</source>
          <target state="new">3. Create the Java web application files (WEB-INF)</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Here, we'll configure the Java web app to use the OpenID Connect authentication protocol.</source>
          <target state="new">Here, we'll configure the Java web app to use the OpenID Connect authentication protocol.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The ADAL4J library will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</source>
          <target state="new">The ADAL4J library will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To begin, open the <ph id="ph1">`web.xml`</ph> file located under <ph id="ph2">`\webapp\WEB-INF\`</ph>, and enter your app's configuration values in the xml.</source>
          <target state="new">To begin, open the <ph id="ph1">`web.xml`</ph> file located under <ph id="ph2">`\webapp\WEB-INF\`</ph>, and enter your app's configuration values in the xml.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The file should look like the following:</source>
          <target state="new">The file should look like the following:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Leave the rest of the configuration parameters alone.</source>
          <target state="new">Leave the rest of the configuration parameters alone.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As you can see from the XML file we are writing a JSP/Servlet webapp called <ph id="ph1">`mvc-dispatcher`</ph> that will use the <ph id="ph2">`BasicFilter`</ph> whenever we visit the /secure URL.</source>
          <target state="new">As you can see from the XML file we are writing a JSP/Servlet webapp called <ph id="ph1">`mvc-dispatcher`</ph> that will use the <ph id="ph2">`BasicFilter`</ph> whenever we visit the /secure URL.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You'll see in the rest of the same we write that we'll use /secure as a place where our protected content lives and will force authentication to Azure Active Directory.</source>
          <target state="new">You'll see in the rest of the same we write that we'll use /secure as a place where our protected content lives and will force authentication to Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next, create the <ph id="ph1">`mvc-dispatcher-servlet.xml`</ph> file located under <ph id="ph2">`\webapp\WEB-INF\`</ph>, and enter the following:</source>
          <target state="new">Next, create the <ph id="ph1">`mvc-dispatcher-servlet.xml`</ph> file located under <ph id="ph2">`\webapp\WEB-INF\`</ph>, and enter the following:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This will tell the webapp to use Spring and where to find our .jsp file which we will write below.</source>
          <target state="new">This will tell the webapp to use Spring and where to find our .jsp file which we will write below.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>4. Create the Java JSP View files (for BasicFilter MVC)</source>
          <target state="new">4. Create the Java JSP View files (for BasicFilter MVC)</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>We are only half fished with our setup of our webapp in WEB-INF.</source>
          <target state="new">We are only half fished with our setup of our webapp in WEB-INF.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Next we will need to create the actual Java Server Pages files that our webapp will execute which we hinted at in our configuration.</source>
          <target state="new">Next we will need to create the actual Java Server Pages files that our webapp will execute which we hinted at in our configuration.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you remember, we told Java in our xml configuration files that we have a <ph id="ph1">`/`</ph> resource that should load .jsp files, and a <ph id="ph2">`/secure`</ph> resource which should pass through a filter we called <ph id="ph3">`BasicFilter`</ph>.</source>
          <target state="new">If you remember, we told Java in our xml configuration files that we have a <ph id="ph1">`/`</ph> resource that should load .jsp files, and a <ph id="ph2">`/secure`</ph> resource which should pass through a filter we called <ph id="ph3">`BasicFilter`</ph>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Let's make those now.</source>
          <target state="new">Let's make those now.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To begin, create the <ph id="ph1">`index.jsp`</ph> file located under <ph id="ph2">`\webapp\`</ph>, and cut/paste the following:</source>
          <target state="new">To begin, create the <ph id="ph1">`index.jsp`</ph> file located under <ph id="ph2">`\webapp\`</ph>, and cut/paste the following:</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This simply redirects to a secure page that is protected by our filter.</source>
          <target state="new">This simply redirects to a secure page that is protected by our filter.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Next, in the same directory lets create an <ph id="ph1">`error.jsp`</ph> file to catch any errors that might happen:</source>
          <target state="new">Next, in the same directory lets create an <ph id="ph1">`error.jsp`</ph> file to catch any errors that might happen:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Finally, let's make that secure webpage we want by creating a folder under <ph id="ph1">`\webapp`</ph> called <ph id="ph2">`\secure`</ph> so that the directory us now <ph id="ph3">`\webapp\secure`</ph>.</source>
          <target state="new">Finally, let's make that secure webpage we want by creating a folder under <ph id="ph1">`\webapp`</ph> called <ph id="ph2">`\secure`</ph> so that the directory us now <ph id="ph3">`\webapp\secure`</ph>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Inside this directory, let's then create an <ph id="ph1">`aad.jsp`</ph> file and cut/paste the following:</source>
          <target state="new">Inside this directory, let's then create an <ph id="ph1">`aad.jsp`</ph> file and cut/paste the following:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You see that this page will redirect to specific requests which our BasicFilter servlet will read and then execute on using the <ph id="ph1">`ADAJ4J`</ph> library.</source>
          <target state="new">You see that this page will redirect to specific requests which our BasicFilter servlet will read and then execute on using the <ph id="ph1">`ADAJ4J`</ph> library.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Rather simple, huh?</source>
          <target state="new">Rather simple, huh?</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Of course, we need now need to set up our Java files so that the servlet can do its work.</source>
          <target state="new">Of course, we need now need to set up our Java files so that the servlet can do its work.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>5. Create some Java helper files (for BasicFilter MVC)</source>
          <target state="new">5. Create some Java helper files (for BasicFilter MVC)</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Our goal is to create some Java files that will:</source>
          <target state="new">Our goal is to create some Java files that will:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Allow for sign-in and sign-out of the user</source>
          <target state="new">Allow for sign-in and sign-out of the user</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Get some data about the user.</source>
          <target state="new">Get some data about the user.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In order to get data about the user, we need to use the Graph API from Azure Active Directory.</source>
          <target state="new">In order to get data about the user, we need to use the Graph API from Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The Graph API is a secure webservice that you can use to grab data about your organization, including individual users.</source>
          <target state="new">The Graph API is a secure webservice that you can use to grab data about your organization, including individual users.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is better than pre-filling sensitive data in tokens as it ensures the user asking for the data is authorized and anyone that may happen to grab the token (from a jailbroken phone or web browser cache on a desktop) won't get a bunch of important details about the user or the organization.</source>
          <target state="new">This is better than pre-filling sensitive data in tokens as it ensures the user asking for the data is authorized and anyone that may happen to grab the token (from a jailbroken phone or web browser cache on a desktop) won't get a bunch of important details about the user or the organization.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Let's write some Java files to do this work for us:</source>
          <target state="new">Let's write some Java files to do this work for us:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>create a folder in your root directory called 'adal4jsample` to store all of our java files.</source>
          <target state="new">create a folder in your root directory called 'adal4jsample` to store all of our java files.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>We will be using the namespace <ph id="ph1">`com.microsoft.aad.adal4jsample`</ph> in our java files.</source>
          <target state="new">We will be using the namespace <ph id="ph1">`com.microsoft.aad.adal4jsample`</ph> in our java files.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Most IDEs create a nested folder structure for this (e.g. <ph id="ph1">`/com/microsoft/aad/adal4jsample`</ph>).</source>
          <target state="new">Most IDEs create a nested folder structure for this (e.g. <ph id="ph1">`/com/microsoft/aad/adal4jsample`</ph>).</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You are free to do this, but it is not necessary.</source>
          <target state="new">You are free to do this, but it is not necessary.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Inside this folder, create a file called <ph id="ph1">`JSONHelper.java`</ph> which we will use to help us parse from JSON data from our tokens.</source>
          <target state="new">Inside this folder, create a file called <ph id="ph1">`JSONHelper.java`</ph> which we will use to help us parse from JSON data from our tokens.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can cut/paste this from below:</source>
          <target state="new">You can cut/paste this from below:</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Next, create a file called <ph id="ph1">`HttpClientHelper.java`</ph> which we will use to help us parse from HTTP data from our AAD endpoint.</source>
          <target state="new">Next, create a file called <ph id="ph1">`HttpClientHelper.java`</ph> which we will use to help us parse from HTTP data from our AAD endpoint.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can cut/paste this from below:</source>
          <target state="new">You can cut/paste this from below:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>6. Create the java Graph API Model files (for BasicFilter MVC)</source>
          <target state="new">6. Create the java Graph API Model files (for BasicFilter MVC)</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>As indicated above, we will be using the Graph API to get data about the logged in user.</source>
          <target state="new">As indicated above, we will be using the Graph API to get data about the logged in user.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For this to be easy for us we should create both a file to represent a <bpt id="p1">**</bpt>Directory Object<ept id="p1">**</ept> and an individual file to represent the <bpt id="p2">**</bpt>User<ept id="p2">**</ept> so that the OO pattern of Java can be used.</source>
          <target state="new">For this to be easy for us we should create both a file to represent a <bpt id="p1">**</bpt>Directory Object<ept id="p1">**</ept> and an individual file to represent the <bpt id="p2">**</bpt>User<ept id="p2">**</ept> so that the OO pattern of Java can be used.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Create a file called <ph id="ph1">`DirectoryObject.java`</ph> which we will use to store basic data about any DirectoryObject (you can feel free to use this later for any other Graph Queries you may do).</source>
          <target state="new">Create a file called <ph id="ph1">`DirectoryObject.java`</ph> which we will use to store basic data about any DirectoryObject (you can feel free to use this later for any other Graph Queries you may do).</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can cut/paste this from below:</source>
          <target state="new">You can cut/paste this from below:</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Create a file called <ph id="ph1">`User.java`</ph> which we will use to store basic data about any User from the directory.</source>
          <target state="new">Create a file called <ph id="ph1">`User.java`</ph> which we will use to store basic data about any User from the directory.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Again, this is pretty basic getters/setters for directory data so you can cut/paste this from below:</source>
          <target state="new">Again, this is pretty basic getters/setters for directory data so you can cut/paste this from below:</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>7. Create the Authentication Model/Controller files (for BasicFilter)</source>
          <target state="new">7. Create the Authentication Model/Controller files (for BasicFilter)</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Yes, Java is rather verbose, but we're almost done.</source>
          <target state="new">Yes, Java is rather verbose, but we're almost done.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Next to last, before we write the BasicFilter servlet to handle our requests, let's write some more helper files that the <ph id="ph1">`ADAL4J`</ph> library needs.</source>
          <target state="new">Next to last, before we write the BasicFilter servlet to handle our requests, let's write some more helper files that the <ph id="ph1">`ADAL4J`</ph> library needs.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Create a file called <ph id="ph1">`AuthHelper.java`</ph> which will give us methods that we'll use to determine the state of the logged in use.</source>
          <target state="new">Create a file called <ph id="ph1">`AuthHelper.java`</ph> which will give us methods that we'll use to determine the state of the logged in use.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>These include:</source>
          <target state="new">These include:</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`isAuthenticated()`</ph> method which returns if the user is logged in or not</source>
          <target state="new"><ph id="ph1">`isAuthenticated()`</ph> method which returns if the user is logged in or not</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`containsAuthenticationData()`</ph> which will tell us if the token has data or not</source>
          <target state="new"><ph id="ph1">`containsAuthenticationData()`</ph> which will tell us if the token has data or not</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`isAuthenticationSuccessful()`</ph> which will tell us if the authentication was successful for the user.</source>
          <target state="new"><ph id="ph1">`isAuthenticationSuccessful()`</ph> which will tell us if the authentication was successful for the user.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Cut/paste the code below:</source>
          <target state="new">Cut/paste the code below:</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Create a file called <ph id="ph1">`AuthParameterNames.java`</ph> which will give us some immutable variables <ph id="ph2">`ADAL4J`</ph> will require.</source>
          <target state="new">Create a file called <ph id="ph1">`AuthParameterNames.java`</ph> which will give us some immutable variables <ph id="ph2">`ADAL4J`</ph> will require.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Cut/pate the following:</source>
          <target state="new">Cut/pate the following:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Finally, create a file called <ph id="ph1">`AadController.java`</ph> which is the Controller of our MVC pattern which will give us our JSP controller and expose the <ph id="ph2">`secure/aad`</ph> URL endpoint for our app.</source>
          <target state="new">Finally, create a file called <ph id="ph1">`AadController.java`</ph> which is the Controller of our MVC pattern which will give us our JSP controller and expose the <ph id="ph2">`secure/aad`</ph> URL endpoint for our app.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In addition, we put the graph query in this file as well.</source>
          <target state="new">In addition, we put the graph query in this file as well.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Cut/paste the following:</source>
          <target state="new">Cut/paste the following:</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>8. Create the BasicFilter file (for BasicFilter MVC)</source>
          <target state="new">8. Create the BasicFilter file (for BasicFilter MVC)</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>We are finally ready to create the BasicFilter file to handle our requests from our View (JSP files).</source>
          <target state="new">We are finally ready to create the BasicFilter file to handle our requests from our View (JSP files).</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Create a file called <ph id="ph1">`BasicFilter.java`</ph> which contains the following:</source>
          <target state="new">Create a file called <ph id="ph1">`BasicFilter.java`</ph> which contains the following:</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This servlet exposes all of the methods that <ph id="ph1">`ADAL4J`</ph> will expect from our application to run.</source>
          <target state="new">This servlet exposes all of the methods that <ph id="ph1">`ADAL4J`</ph> will expect from our application to run.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This includes:</source>
          <target state="new">This includes:</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`getAccessTokenFromClientCredentials()`</ph> - gets access token from our secret</source>
          <target state="new"><ph id="ph1">`getAccessTokenFromClientCredentials()`</ph> - gets access token from our secret</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`getAccessTokenFromRefreshToken()`</ph> - gets access token from a refresh token</source>
          <target state="new"><ph id="ph1">`getAccessTokenFromRefreshToken()`</ph> - gets access token from a refresh token</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`getAccessToken()`</ph> - gets access token from an OpenID Connect flow (which we use)</source>
          <target state="new"><ph id="ph1">`getAccessToken()`</ph> - gets access token from an OpenID Connect flow (which we use)</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`createSessionPrincipal()`</ph> - creates a principal we use for Graph API access</source>
          <target state="new"><ph id="ph1">`createSessionPrincipal()`</ph> - creates a principal we use for Graph API access</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`getRedirectUrl()`</ph> - gets the redirectURL to compare it with the value you entered in to the portal.</source>
          <target state="new"><ph id="ph1">`getRedirectUrl()`</ph> - gets the redirectURL to compare it with the value you entered in to the portal.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Compile and run the sample in Tomcat</source>
          <target state="new">Compile and run the sample in Tomcat</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Change back out to your root directory and run the following command to build the sample you just put together using <ph id="ph1">`maven`</ph>.</source>
          <target state="new">Change back out to your root directory and run the following command to build the sample you just put together using <ph id="ph1">`maven`</ph>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This will use the <ph id="ph1">`pom.xml`</ph> file you wrote for dependencies.</source>
          <target state="new">This will use the <ph id="ph1">`pom.xml`</ph> file you wrote for dependencies.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You should now have a <ph id="ph1">`adal4jsample.war`</ph> file in your <ph id="ph2">`/targets`</ph> directory.</source>
          <target state="new">You should now have a <ph id="ph1">`adal4jsample.war`</ph> file in your <ph id="ph2">`/targets`</ph> directory.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You may deploy that in your Tomcat container and visit the URL</source>
          <target state="new">You may deploy that in your Tomcat container and visit the URL</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>It is very easy to deploy a WAR with the latest Tomcat servers.</source>
          <target state="new">It is very easy to deploy a WAR with the latest Tomcat servers.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Simply navigate to <ph id="ph1">`http://localhost:8080/manager/`</ph> and follow the instructions on uploading your ``adal4jsample.war` file.</source>
          <target state="new">Simply navigate to <ph id="ph1">`http://localhost:8080/manager/`</ph> and follow the instructions on uploading your ``adal4jsample.war` file.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>It will autodeploy for you with the correct endpoint.</source>
          <target state="new">It will autodeploy for you with the correct endpoint.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
          <target state="new">Congratulations!</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You now have a working Java application that has the ability to authenticate users, securely call Web APIs using OAuth 2.0, and get basic information about the user.</source>
          <target state="new">You now have a working Java application that has the ability to authenticate users, securely call Web APIs using OAuth 2.0, and get basic information about the user.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If you haven't already, now is the time to populate your tenant with some users.</source>
          <target state="new">If you haven't already, now is the time to populate your tenant with some users.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For reference, the completed sample (without your configuration values) <bpt id="p1">[</bpt>is provided as a .zip here<ept id="p1">](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/complete.zip)</ept>, or you can clone it from GitHub:</source>
          <target state="new">For reference, the completed sample (without your configuration values) <bpt id="p1">[</bpt>is provided as a .zip here<ept id="p1">](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/complete.zip)</ept>, or you can clone it from GitHub:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>