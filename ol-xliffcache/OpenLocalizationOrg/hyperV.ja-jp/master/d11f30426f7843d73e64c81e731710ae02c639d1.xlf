<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ja-jp">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d11f30426f7843d73e64c81e731710ae02c639d1</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Logic apps as callable endpoints</source>
          <target state="new">Logic apps as callable endpoints</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to create and configure the HTTP listener and use it in a logic app in Azure App Service</source>
          <target state="new">How to create and configure the HTTP listener and use it in a logic app in Azure App Service</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Logic apps as callable endpoints</source>
          <target state="new">Logic apps as callable endpoints</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The previous schema version of Logic apps (<bpt id="p1">*</bpt>2014-12-01-preview<ept id="p1">*</ept>) required an API app called <bpt id="p2">**</bpt>HTTP Listener<ept id="p2">**</ept> to expose an HTTP endpoint that could be synchronously called.</source>
          <target state="new">The previous schema version of Logic apps (<bpt id="p1">*</bpt>2014-12-01-preview<ept id="p1">*</ept>) required an API app called <bpt id="p2">**</bpt>HTTP Listener<ept id="p2">**</ept> to expose an HTTP endpoint that could be synchronously called.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With the latest schema (<bpt id="p1">*</bpt>2015-08-01-preview<ept id="p1">*</ept>) Logic apps natively can expose a synchronous HTTP endpoint.</source>
          <target state="new">With the latest schema (<bpt id="p1">*</bpt>2015-08-01-preview<ept id="p1">*</ept>) Logic apps natively can expose a synchronous HTTP endpoint.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Adding a trigger to your definition</source>
          <target state="new">Adding a trigger to your definition</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first step is to add a trigger to your Logic app definition that can receive incoming requests.</source>
          <target state="new">The first step is to add a trigger to your Logic app definition that can receive incoming requests.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are 3 types of triggers that can receive requests:</source>
          <target state="new">There are 3 types of triggers that can receive requests:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>manual</source>
          <target state="new">manual</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>apiConnectionWebhook</source>
          <target state="new">apiConnectionWebhook</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>httpWebhook</source>
          <target state="new">httpWebhook</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For the remainder of the article, we will use <bpt id="p1">**</bpt>manual<ept id="p1">**</ept> as the example, but all of the principals apply identically to the other 2 types of triggers.</source>
          <target state="new">For the remainder of the article, we will use <bpt id="p1">**</bpt>manual<ept id="p1">**</ept> as the example, but all of the principals apply identically to the other 2 types of triggers.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Adding this trigger to your workflow definition will make it look like:</source>
          <target state="new">Adding this trigger to your workflow definition will make it look like:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This will create an endpoint that you can call at a URL that is like:</source>
          <target state="new">This will create an endpoint that you can call at a URL that is like:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can get this endpoint in the user interface, or, by calling:</source>
          <target state="new">You can get this endpoint in the user interface, or, by calling:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Calling the Logic app trigger's endpoint</source>
          <target state="new">Calling the Logic app trigger's endpoint</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Once you have the endpoint of your trigger, you can save that in your backend system and call it via a <ph id="ph1">`POST`</ph> to the full URL.</source>
          <target state="new">Once you have the endpoint of your trigger, you can save that in your backend system and call it via a <ph id="ph1">`POST`</ph> to the full URL.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can include additional query parameters, headers, and any content in your body.</source>
          <target state="new">You can include additional query parameters, headers, and any content in your body.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the content-type is <ph id="ph1">`application/json`</ph> then you will be able to reference properties from inside the request.</source>
          <target state="new">If the content-type is <ph id="ph1">`application/json`</ph> then you will be able to reference properties from inside the request.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Otherwise, it will be treated as a single Binary unit that can be passed to other APIs but cannot be referenced inside.</source>
          <target state="new">Otherwise, it will be treated as a single Binary unit that can be passed to other APIs but cannot be referenced inside.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Referencing the content of the incoming request</source>
          <target state="new">Referencing the content of the incoming request</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`@triggerOutputs()`</ph> function will output the contents of the incoming request.</source>
          <target state="new">The <ph id="ph1">`@triggerOutputs()`</ph> function will output the contents of the incoming request.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, it would look like:</source>
          <target state="new">For example, it would look like:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`@triggerBody()`</ph> shortcut to access the <ph id="ph2">`body`</ph> property specifically.</source>
          <target state="new">You can use the <ph id="ph1">`@triggerBody()`</ph> shortcut to access the <ph id="ph2">`body`</ph> property specifically.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is a slight difference from the <bpt id="p1">*</bpt>2014-12-01-preview<ept id="p1">*</ept> version where you would access the body of an HTTP Listener via a function like: <ph id="ph1">`@triggerOutputs().body.Content`</ph>.</source>
          <target state="new">This is a slight difference from the <bpt id="p1">*</bpt>2014-12-01-preview<ept id="p1">*</ept> version where you would access the body of an HTTP Listener via a function like: <ph id="ph1">`@triggerOutputs().body.Content`</ph>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Responding to the request</source>
          <target state="new">Responding to the request</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For some requests that start a Logic app, you may want to respond with some content to the caller.</source>
          <target state="new">For some requests that start a Logic app, you may want to respond with some content to the caller.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There is a new action type called <bpt id="p1">**</bpt>response<ept id="p1">**</ept> that can be used to construct the status code, body and headers for your response.</source>
          <target state="new">There is a new action type called <bpt id="p1">**</bpt>response<ept id="p1">**</ept> that can be used to construct the status code, body and headers for your response.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that if no <bpt id="p1">**</bpt>response<ept id="p1">**</ept> shape is present, the Logic app endpoint will <bpt id="p2">*</bpt>immediately<ept id="p2">*</ept> respond with <bpt id="p3">**</bpt>202 Accepted<ept id="p3">**</ept> (this in the equivalent of <bpt id="p4">*</bpt>Send response automatically<ept id="p4">*</ept> in the HTTP Listener).</source>
          <target state="new">Note that if no <bpt id="p1">**</bpt>response<ept id="p1">**</ept> shape is present, the Logic app endpoint will <bpt id="p2">*</bpt>immediately<ept id="p2">*</ept> respond with <bpt id="p3">**</bpt>202 Accepted<ept id="p3">**</ept> (this in the equivalent of <bpt id="p4">*</bpt>Send response automatically<ept id="p4">*</ept> in the HTTP Listener).</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Responses have the following:</source>
          <target state="new">Responses have the following:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>property</source>
          <target state="new">property</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>statusCode</source>
          <target state="new">statusCode</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The HTTP status code to respond to the incoming request.</source>
          <target state="new">The HTTP status code to respond to the incoming request.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It can be any valid status code that starts with 2xx, 4xx, or 5xx.</source>
          <target state="new">It can be any valid status code that starts with 2xx, 4xx, or 5xx.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>3xx status codes are not permitted.</source>
          <target state="new">3xx status codes are not permitted.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>body</source>
          <target state="new">body</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A body object that can be a string, a JSON object, or even binary content referenced from a previous step.</source>
          <target state="new">A body object that can be a string, a JSON object, or even binary content referenced from a previous step.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>headers</source>
          <target state="new">headers</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can define any number of headers to be included in the response</source>
          <target state="new">You can define any number of headers to be included in the response</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>All of the steps in the Logic app that are required for the response must complete within <bpt id="p1">*</bpt>60 seconds<ept id="p1">*</ept> for the original request to receive the request.</source>
          <target state="new">All of the steps in the Logic app that are required for the response must complete within <bpt id="p1">*</bpt>60 seconds<ept id="p1">*</ept> for the original request to receive the request.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If no response action is reached within 60 seconds then the incoming request will time out and receive a <bpt id="p1">**</bpt>408 Client timeout<ept id="p1">**</ept> HTTP response.</source>
          <target state="new">If no response action is reached within 60 seconds then the incoming request will time out and receive a <bpt id="p1">**</bpt>408 Client timeout<ept id="p1">**</ept> HTTP response.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Advanced endpoint configuration</source>
          <target state="new">Advanced endpoint configuration</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Logic apps have built in support for the direct access endpoint and always use the <ph id="ph1">`POST`</ph> method for starting the run.</source>
          <target state="new">Logic apps have built in support for the direct access endpoint and always use the <ph id="ph1">`POST`</ph> method for starting the run.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> API app previously also supported changing the URL segments and the HTTP method.</source>
          <target state="new">The <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> API app previously also supported changing the URL segments and the HTTP method.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You could even set up additional security or a custom domain by adding it to the API app host (the Web app that hosted the API app).</source>
          <target state="new">You could even set up additional security or a custom domain by adding it to the API app host (the Web app that hosted the API app).</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This functionality is available through <bpt id="p1">**</bpt>API management<ept id="p1">**</ept>:</source>
          <target state="new">This functionality is available through <bpt id="p1">**</bpt>API management<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Change the method of the request</source>
          <target state="new">Change the method of the request</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Change the URL segments of the request</source>
          <target state="new">Change the URL segments of the request</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Set up your API management domains on the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab in the classic Azure portal</source>
          <target state="new">Set up your API management domains on the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab in the classic Azure portal</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Set up policy to check for Basic authentication (<bpt id="p1">**</bpt>link needed<ept id="p1">**</ept>)</source>
          <target state="new">Set up policy to check for Basic authentication (<bpt id="p1">**</bpt>link needed<ept id="p1">**</ept>)</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Summary of migration from 2014-12-01-preview</source>
          <target state="new">Summary of migration from 2014-12-01-preview</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>2014-12-01-preview</source>
          <target state="new">2014-12-01-preview</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>2015-08-01-preview</source>
          <target state="new">2015-08-01-preview</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Click on <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> API app</source>
          <target state="new">Click on <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> API app</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Click on <bpt id="p1">**</bpt>Manual trigger<ept id="p1">**</ept> (no API app required)</source>
          <target state="new">Click on <bpt id="p1">**</bpt>Manual trigger<ept id="p1">**</ept> (no API app required)</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>HTTP Listener setting "<bpt id="p1">*</bpt>Sends response automatically<ept id="p1">*</ept>"</source>
          <target state="new">HTTP Listener setting "<bpt id="p1">*</bpt>Sends response automatically<ept id="p1">*</ept>"</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Either include a <bpt id="p1">**</bpt>response<ept id="p1">**</ept> action or not in the workflow definition</source>
          <target state="new">Either include a <bpt id="p1">**</bpt>response<ept id="p1">**</ept> action or not in the workflow definition</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Configure basic or OAuth authentication</source>
          <target state="new">Configure basic or OAuth authentication</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>via API management</source>
          <target state="new">via API management</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Configure HTTP method</source>
          <target state="new">Configure HTTP method</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>via API management</source>
          <target state="new">via API management</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Configure relative path</source>
          <target state="new">Configure relative path</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>via API management</source>
          <target state="new">via API management</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Reference the incoming Body via  <ph id="ph1">`@triggerOutputs().body.Content`</ph></source>
          <target state="new">Reference the incoming Body via  <ph id="ph1">`@triggerOutputs().body.Content`</ph></target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Reference via <ph id="ph1">`@triggerOutputs().body`</ph></source>
          <target state="new">Reference via <ph id="ph1">`@triggerOutputs().body`</ph></target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Send HTTP response<ept id="p1">**</ept> action on the HTTP Listener</source>
          <target state="new"><bpt id="p1">**</bpt>Send HTTP response<ept id="p1">**</ept> action on the HTTP Listener</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Click on <bpt id="p1">**</bpt>Respond to HTTP request<ept id="p1">**</ept> (no API app required)</source>
          <target state="new">Click on <bpt id="p1">**</bpt>Respond to HTTP request<ept id="p1">**</ept> (no API app required)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>