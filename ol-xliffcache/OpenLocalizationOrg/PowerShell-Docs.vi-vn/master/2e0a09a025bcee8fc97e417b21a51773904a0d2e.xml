{
  "nodes": [
    {
      "content": "DSC for Linux nxArchive Resource",
      "pos": [
        2,
        34
      ]
    },
    {
      "pos": [
        36,
        204
      ],
      "content": "The <bpt id=\"p1\">**</bpt>nxArchive<ept id=\"p1\">**</ept> resource in PowerShell Desired State Configuration (DSC) provides a mechanism to unpack archive (.tar, .zip) files at a specific path on a Linux node."
    },
    {
      "content": "Syntax",
      "pos": [
        209,
        215
      ]
    },
    {
      "content": "Properties",
      "pos": [
        478,
        488
      ]
    },
    {
      "content": "Property",
      "pos": [
        493,
        501
      ]
    },
    {
      "content": "Description",
      "pos": [
        505,
        516
      ]
    },
    {
      "content": "SourcePath",
      "pos": [
        532,
        542
      ]
    },
    {
      "content": "Specifies the source path of the archive file.",
      "pos": [
        544,
        590
      ]
    },
    {
      "content": "This should be a .tar, .zip, or .tar.gz file.",
      "pos": [
        591,
        636
      ]
    },
    {
      "content": "DestinationPath",
      "pos": [
        642,
        657
      ]
    },
    {
      "content": "Specifies the location where you want to ensure the archive contents are extracted.",
      "pos": [
        659,
        742
      ]
    },
    {
      "content": "Checksum",
      "pos": [
        747,
        755
      ]
    },
    {
      "content": "Defines the type to use when determining whether the source archive has been updated.",
      "pos": [
        757,
        842
      ]
    },
    {
      "content": "Values are: \"ctime\", \"mtime\", or \"md5\".",
      "pos": [
        843,
        882
      ]
    },
    {
      "content": "The default value is \"md5\".",
      "pos": [
        883,
        910
      ]
    },
    {
      "content": "Force",
      "pos": [
        915,
        920
      ]
    },
    {
      "content": "Certain file operations (such as overwriting a file or deleting a directory that is not empty) will result in an error.",
      "pos": [
        922,
        1041
      ]
    },
    {
      "content": "Using the <bpt id=\"p1\">**</bpt>Force<ept id=\"p1\">**</ept> property overrides such errors.",
      "pos": [
        1042,
        1093
      ]
    },
    {
      "content": "The default value is <bpt id=\"p1\">**</bpt>$false<ept id=\"p1\">**</ept>.",
      "pos": [
        1094,
        1126
      ]
    },
    {
      "content": "DependsOn",
      "pos": [
        1131,
        1140
      ]
    },
    {
      "content": "Indicates that the configuration of another resource must run before this resource is configured.",
      "pos": [
        1143,
        1240
      ]
    },
    {
      "content": "For example, if the <bpt id=\"p1\">**</bpt>ID<ept id=\"p1\">**</ept> of the resource configuration script block that you want to run first is <bpt id=\"p2\">**</bpt>ResourceName<ept id=\"p2\">**</ept> and its type is <bpt id=\"p3\">**</bpt>ResourceType<ept id=\"p3\">**</ept>, the syntax for using this property is <ph id=\"ph1\">`DependsOn = \"[ResourceType]ResourceName\"`</ph>.",
      "pos": [
        1241,
        1473
      ]
    },
    {
      "content": "Ensure",
      "pos": [
        1478,
        1484
      ]
    },
    {
      "content": "Determines whether to check if the content of the archive exists at the <bpt id=\"p1\">**</bpt>Destination<ept id=\"p1\">**</ept>.",
      "pos": [
        1486,
        1574
      ]
    },
    {
      "content": "Set this property to \"Present\" to ensure the contents exist.",
      "pos": [
        1575,
        1635
      ]
    },
    {
      "content": "Set it to \"Absent\" to ensure they do not exist.",
      "pos": [
        1636,
        1683
      ]
    },
    {
      "content": "The default value is \"Present\".",
      "pos": [
        1684,
        1715
      ]
    },
    {
      "content": "Example",
      "pos": [
        1722,
        1729
      ]
    },
    {
      "pos": [
        1731,
        1912
      ],
      "content": "The following example shows how to use the <bpt id=\"p1\">**</bpt>nxArchive<ept id=\"p1\">**</ept> resource to ensure that the contents of an archive file called <ph id=\"ph1\">`website.tar`</ph> exist and are extracted at a given destination."
    }
  ],
  "content": "# DSC for Linux nxArchive Resource\n\nThe **nxArchive** resource in PowerShell Desired State Configuration (DSC) provides a mechanism to unpack archive (.tar, .zip) files at a specific path on a Linux node.\n\n## Syntax\n\n```\nnxArchive <string> #ResourceName\n{\n    SourcePath = <string>\n    DestinationPath = <string>\n    [ Checksum = <string> { ctime | mtime | md5 }  ]\n    [ Force = <bool> ]\n    [ DependsOn = <string[]> ]\n    [ Ensure = <string> { Absent | Present }  ]\n}\n```\n\n## Properties\n\n|  Property |  Description | \n|---|---|\n| SourcePath| Specifies the source path of the archive file. This should be a .tar, .zip, or .tar.gz file. | \n| DestinationPath| Specifies the location where you want to ensure the archive contents are extracted.| \n| Checksum| Defines the type to use when determining whether the source archive has been updated. Values are: \"ctime\", \"mtime\", or \"md5\". The default value is \"md5\".| \n| Force| Certain file operations (such as overwriting a file or deleting a directory that is not empty) will result in an error. Using the **Force** property overrides such errors. The default value is **$false**.| \n| DependsOn | Indicates that the configuration of another resource must run before this resource is configured. For example, if the **ID** of the resource configuration script block that you want to run first is **ResourceName** and its type is **ResourceType**, the syntax for using this property is `DependsOn = \"[ResourceType]ResourceName\"`.| \n| Ensure| Determines whether to check if the content of the archive exists at the **Destination**. Set this property to \"Present\" to ensure the contents exist. Set it to \"Absent\" to ensure they do not exist. The default value is \"Present\".| \n\n## Example\n\nThe following example shows how to use the **nxArchive** resource to ensure that the contents of an archive file called `website.tar` exist and are extracted at a given destination.\n\n```\nImport-DSCResource -Module nx \n\nnxFile SyncArchiveFromWeb\n{\n   Ensure = \"Present\"\n   SourcePath = “http://release.contoso.com/releases/website.tar”\n   DestinationPath = \"/usr/release/staging/website.tar\"\n   Type = \"File\"\n   Checksum = “mtime”\n}\n\nnxArchive SyncWebDir\n{\n   SourcePath = “/usr/release/staging/website.tar”\n   DestinationPath = “/usr/local/apache2/htdocs/”\n   Force = $false\n   DependsOn = \"[nxFile]SyncArchiveFromWeb\"\n} \n```\n"
}