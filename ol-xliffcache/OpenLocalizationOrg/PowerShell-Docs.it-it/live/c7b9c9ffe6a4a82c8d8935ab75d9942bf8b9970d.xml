{
  "nodes": [
    {
      "content": "Composite resources: Using a DSC configuration as a resource",
      "pos": [
        2,
        62
      ]
    },
    {
      "content": "Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0",
      "pos": [
        66,
        124
      ]
    },
    {
      "content": "In real-world situations, configurations can become long and complex, calling many different resources and setting many different properties.",
      "pos": [
        126,
        267
      ]
    },
    {
      "content": "To help address this complexity, you can use a Windows PowerShell Desired State Configuration (DSC) configuration as a resource for other configurations.",
      "pos": [
        268,
        421
      ]
    },
    {
      "content": "We call this a composite resource.",
      "pos": [
        422,
        456
      ]
    },
    {
      "content": "A composite resource is a DSC configuration that takes parameters.",
      "pos": [
        457,
        523
      ]
    },
    {
      "content": "The parameters of the configuration act as the properties of the resource.",
      "pos": [
        524,
        598
      ]
    },
    {
      "content": "The configuration is saved as a file with a <bpt id=\"p1\">**</bpt>. schema.psm1<ept id=\"p1\">**</ept> extension, and takes the place of both the MOF schema and the resource script in a typical DSC resource (for more information about DSC resources, see <bpt id=\"p2\">[</bpt>Windows PowerShell Desired State Configuration Resources<ept id=\"p2\">](resources.md)</ept>.",
      "pos": [
        599,
        885
      ]
    },
    {
      "content": "Creating the composite resource",
      "pos": [
        890,
        921
      ]
    },
    {
      "content": "In our example, we create a configuration that invokes a number of existing resources to configure virtual machines.",
      "pos": [
        923,
        1039
      ]
    },
    {
      "content": "Instead of specifying the values to be set in configuration blocks, the configuration takes a number of parameters that are then used in the configuration blocks.",
      "pos": [
        1040,
        1202
      ]
    },
    {
      "content": "Saving the configuration as a composite resource",
      "pos": [
        3416,
        3464
      ]
    },
    {
      "content": "To use the parameterized configuration as a DSC resource, save it in a directory structure like that of any other MOF-based resource, and name it with a <bpt id=\"p1\">**</bpt>.schema.psm1<ept id=\"p1\">**</ept> extension.",
      "pos": [
        3466,
        3646
      ]
    },
    {
      "content": "For this example, we’ll name the file <bpt id=\"p1\">**</bpt>xVirtualMachine.schema.psm1<ept id=\"p1\">**</ept>.",
      "pos": [
        3647,
        3717
      ]
    },
    {
      "content": "You also need to create a manifest named <bpt id=\"p1\">**</bpt>xVirtualMachine.psd1<ept id=\"p1\">**</ept> that contains the following line.",
      "pos": [
        3718,
        3817
      ]
    },
    {
      "content": "Note that this is in addition to <bpt id=\"p1\">**</bpt>MyDscResources.psd1<ept id=\"p1\">**</ept>, the module manifest for all resources under the <bpt id=\"p2\">**</bpt>MyDscResources<ept id=\"p2\">**</ept> folder.",
      "pos": [
        3818,
        3950
      ]
    },
    {
      "content": "When you are done, the folder structure should be as follows.",
      "pos": [
        4014,
        4075
      ]
    },
    {
      "pos": [
        4304,
        4503
      ],
      "content": "The resource is now discoverable by using the Get-DscResource cmdlet, and its properties are discoverable by either that cmdlet or by using <bpt id=\"p1\">**</bpt>Ctrl+Space<ept id=\"p1\">**</ept> auto-complete in the Windows PowerShell ISE."
    },
    {
      "content": "Using the composite resource",
      "pos": [
        4508,
        4536
      ]
    },
    {
      "content": "Next we create a configuration that calls the composite resource.",
      "pos": [
        4538,
        4603
      ]
    },
    {
      "content": "This configuration calls the xVirtualMachine resource to create a virtual machine, and then calls the <bpt id=\"p1\">**</bpt>xComputer<ept id=\"p1\">**</ept> resource to rename it.",
      "pos": [
        4604,
        4742
      ]
    },
    {
      "content": "See Also",
      "pos": [
        5513,
        5521
      ]
    },
    {
      "content": "Concepts",
      "pos": [
        5526,
        5534
      ]
    },
    {
      "content": "Writing a custom DSC resource with MOF",
      "pos": [
        5538,
        5576
      ]
    },
    {
      "content": "Get Started with Windows PowerShell Desired State Configuration",
      "pos": [
        5606,
        5669
      ]
    }
  ],
  "content": "# Composite resources: Using a DSC configuration as a resource\n\n> Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nIn real-world situations, configurations can become long and complex, calling many different resources and setting many different properties. To help address this complexity, you can use a Windows PowerShell Desired State Configuration (DSC) configuration as a resource for other configurations. We call this a composite resource. A composite resource is a DSC configuration that takes parameters. The parameters of the configuration act as the properties of the resource. The configuration is saved as a file with a **. schema.psm1** extension, and takes the place of both the MOF schema and the resource script in a typical DSC resource (for more information about DSC resources, see [Windows PowerShell Desired State Configuration Resources](resources.md).\n\n## Creating the composite resource\n\nIn our example, we create a configuration that invokes a number of existing resources to configure virtual machines. Instead of specifying the values to be set in configuration blocks, the configuration takes a number of parameters that are then used in the configuration blocks.\n\n```powershell\nConfiguration xVirtualMachine\n{\nparam\n(\n# Name of VMs\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[String[]]$VMName,\n \n# Name of Switch to create\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[String]$SwitchName,\n \n# Type of Switch to create\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[String]$SwitchType,\n \n# Source Path for VHD\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[String]$VhdParentPath,\n \n# Destination path for diff VHD\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[String]$VHDPath,\n \n# Startup Memory for VM\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[String]$VMStartupMemory,\n \n# State of the VM\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[String]$VMState\n)\n \n# Import the module that defines custom resources\nImport-DscResource -Module xComputerManagement,xHyper-V\n \n# Install the HyperV role \nWindowsFeature HyperV\n{\n    Ensure = \"Present\"\n    Name = \"Hyper-V\" \n}\n \n# Create the virtual switch \nxVMSwitch $switchName\n{\n    Ensure = \"Present\"\n    Name = $switchName\n    Type = $SwitchType\n    DependsOn = \"[WindowsFeature]HyperV\"\n}\n \n# Check for Parent VHD file\nFile ParentVHDFile\n{\n    Ensure = \"Present\"\n    DestinationPath = $VhdParentPath\n    Type = \"File\"\n    DependsOn = \"[WindowsFeature]HyperV\"\n}\n \n# Check the destination VHD folder\nFile VHDFolder\n{\n    Ensure = \"Present\"\n    DestinationPath = $VHDPath\n    Type = \"Directory\"\n    DependsOn = \"[File]ParentVHDFile\"\n}\n \n # Creae VM specific diff VHD\nforeach($Name in $VMName)\n{\n    xVHD \"VhD$Name\"\n    {\n        Ensure = \"Present\"\n        Name = $Name\n        Path = $VhDPath\n        ParentPath = $VhdParentPath\n        DependsOn = @(\"[WindowsFeature]HyperV\",\n                      \"[File]VHDFolder\")\n    }\n}\n \n# Create VM using the above VHD\nforeach($Name in $VMName)\n{\n    xVMHyperV \"VMachine$Name\"\n    {\n        Ensure = \"Present\"\n        Name = $Name\n        VhDPath = (Join-Path -Path $VhDPath -ChildPath $Name)\n        SwitchName = $SwitchName\n        StartupMemory = $VMStartupMemory\n        State = $VMState\n        MACAddress = $MACAddress \n        WaitForIP = $true\n        DependsOn = @(\"[WindowsFeature]HyperV\",\n                      \"[xVHD]Vhd$Name\")\n    }\n} \n}\n```\n\n### Saving the configuration as a composite resource\n\nTo use the parameterized configuration as a DSC resource, save it in a directory structure like that of any other MOF-based resource, and name it with a **.schema.psm1** extension. For this example, we’ll name the file **xVirtualMachine.schema.psm1**. You also need to create a manifest named **xVirtualMachine.psd1** that contains the following line. Note that this is in addition to **MyDscResources.psd1**, the module manifest for all resources under the **MyDscResources** folder.\n\n```powershell\nRootModule = 'xVirtualMachine.schema.psm1'\n```\n\nWhen you are done, the folder structure should be as follows.\n\n```\n$env: psmodulepath\n    |- MyDscResources \n           MyDscResources.psd1\n        |- DSC Resources \n            |- xVirtualMachine\n                |- xVirtualMachine.psd1 \n                |- xVirtualMachine.schema.psm1\n```\n\nThe resource is now discoverable by using the Get-DscResource cmdlet, and its properties are discoverable by either that cmdlet or by using **Ctrl+Space** auto-complete in the Windows PowerShell ISE.\n\n## Using the composite resource\n\nNext we create a configuration that calls the composite resource. This configuration calls the xVirtualMachine resource to create a virtual machine, and then calls the **xComputer** resource to rename it.\n\n```powershell\nconfiguration RenameVM\n{\nImport-DscResource -Module TestCompositeResource\n \nNode localhost\n{\n    xVirtualMachine VM\n    {\n        VMName = \"Test\"\n        SwitchName = \"Internal\"\n        SwitchType = \"Internal\"\n        VhdParentPath = \"C:\\Demo\\Vhd\\RTM.vhd\"\n        VHDPath = \"C:\\Demo\\Vhd\"\n        VMStartupMemory = 1024MB\n        VMState = \"Running\"\n    }\n    }\n   Node \"192.168.10.1\"\n   {   \n    xComputer Name\n    {\n        Name = \"SQL01\"\n        DomainName = \"fourthcoffee.com\" \n    }                                                                                                                                                                                                                                                               \n}\n} \n```\n\n## See Also\n### Concepts\n* [Writing a custom DSC resource with MOF](authoringResourceMOF.md)\n* [Get Started with Windows PowerShell Desired State Configuration](overview.md) "
}