<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e00e2aff7b46c9ef21162ebab5cb3d538498eab</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-46be25e" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Automatically scale compute nodes in an Azure Batch pool | Microsoft Azure</source>
          <target state="new">Automatically scale compute nodes in an Azure Batch pool | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enable automatic scaling on a cloud pool to dynamically adjust the number of compute nodes in the pool.</source>
          <target state="new">Enable automatic scaling on a cloud pool to dynamically adjust the number of compute nodes in the pool.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Automatically scale compute nodes in an Azure Batch pool</source>
          <target state="new">Automatically scale compute nodes in an Azure Batch pool</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By using automatic scaling in Azure Batch, you can dynamically add or remove compute nodes in a Batch pool during job execution to automatically adjust the processing power that is used by your application.</source>
          <target state="new">By using automatic scaling in Azure Batch, you can dynamically add or remove compute nodes in a Batch pool during job execution to automatically adjust the processing power that is used by your application.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This automatic adjustment can save you both time and money.</source>
          <target state="new">This automatic adjustment can save you both time and money.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can enable automatic scaling on a pool of compute nodes by associating an <bpt id="p1">*</bpt>autoscale formula<ept id="p1">*</ept> with the pool, such as with the <bpt id="p2">[</bpt>PoolOperations.EnableAutoScale<ph id="ph1">][</ph>net_enableautoscale<ept id="p2">]</ept> method in the <bpt id="p3">[</bpt>Batch .NET<ept id="p3">](batch-dotnet-get-started.md)</ept> library.</source>
          <target state="new">You can enable automatic scaling on a pool of compute nodes by associating an <bpt id="p1">*</bpt>autoscale formula<ept id="p1">*</ept> with the pool, such as with the <bpt id="p2">[</bpt>PoolOperations.EnableAutoScale<ph id="ph1">][</ph>net_enableautoscale<ept id="p2">]</ept> method in the <bpt id="p3">[</bpt>Batch .NET<ept id="p3">](batch-dotnet-get-started.md)</ept> library.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Batch service then uses this formula to determine the number of compute nodes that are needed to execute your workload.</source>
          <target state="new">The Batch service then uses this formula to determine the number of compute nodes that are needed to execute your workload.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The number of compute nodes in the pool, which responds to service metrics data samples that are collected periodically, is adjusted at a configurable interval based on the associated formula.</source>
          <target state="new">The number of compute nodes in the pool, which responds to service metrics data samples that are collected periodically, is adjusted at a configurable interval based on the associated formula.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can enable automatic scaling when a pool is created, or on an existing pool.</source>
          <target state="new">You can enable automatic scaling when a pool is created, or on an existing pool.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also change an existing formula on a pool that is "autoscale" enabled.</source>
          <target state="new">You can also change an existing formula on a pool that is "autoscale" enabled.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Batch provides the ability to evaluate your formulas before assigning them to pools, as well as for monitoring the status of automatic scaling runs.</source>
          <target state="new">Batch provides the ability to evaluate your formulas before assigning them to pools, as well as for monitoring the status of automatic scaling runs.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Automatic scaling formulas</source>
          <target state="new">Automatic scaling formulas</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An automatic scaling formula is a string value that contains one or more statements that are assigned to a pool's <bpt id="p1">[</bpt>autoScaleFormula<ph id="ph1">][</ph>rest_autoscaleformula<ept id="p1">]</ept> element (Batch REST API), or the <bpt id="p2">[</bpt>CloudPool.AutoScaleFormula<ph id="ph2">][</ph>net_cloudpool_autoscaleformula<ept id="p2">]</ept> property (Batch .NET API).</source>
          <target state="new">An automatic scaling formula is a string value that contains one or more statements that are assigned to a pool's <bpt id="p1">[</bpt>autoScaleFormula<ph id="ph1">][</ph>rest_autoscaleformula<ept id="p1">]</ept> element (Batch REST API), or the <bpt id="p2">[</bpt>CloudPool.AutoScaleFormula<ph id="ph2">][</ph>net_cloudpool_autoscaleformula<ept id="p2">]</ept> property (Batch .NET API).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You define these formulas.</source>
          <target state="new">You define these formulas.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When they are assigned to a pool, they determine the number of available compute nodes in a pool for the next interval of processing (see more on intervals later).</source>
          <target state="new">When they are assigned to a pool, they determine the number of available compute nodes in a pool for the next interval of processing (see more on intervals later).</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The formula string cannot exceed 8 KB in size, can include up to 100 statements that are separated by semicolons, and can include line breaks and comments.</source>
          <target state="new">The formula string cannot exceed 8 KB in size, can include up to 100 statements that are separated by semicolons, and can include line breaks and comments.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can think of automatic scaling formulas as using a Batch autoscale "language."</source>
          <target state="new">You can think of automatic scaling formulas as using a Batch autoscale "language."</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Formula statements are free-formed expressions that can include system-defined and user-defined variables, as well as constants.</source>
          <target state="new">Formula statements are free-formed expressions that can include system-defined and user-defined variables, as well as constants.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>They can perform various operations on these values by using built-in types, operators, and functions.</source>
          <target state="new">They can perform various operations on these values by using built-in types, operators, and functions.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, a statement might take the following form:</source>
          <target state="new">For example, a statement might take the following form:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Formulas generally contain multiple statements that perform operations on values that are obtained in previous statements:</source>
          <target state="new">Formulas generally contain multiple statements that perform operations on values that are obtained in previous statements:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By using the statements in your formula, your goal is to arrive at a number of compute nodes that the pool should be scaled to--the <bpt id="p1">**</bpt>target<ept id="p1">**</ept> number of <bpt id="p2">**</bpt>dedicated nodes<ept id="p2">**</ept>.</source>
          <target state="new">By using the statements in your formula, your goal is to arrive at a number of compute nodes that the pool should be scaled to--the <bpt id="p1">**</bpt>target<ept id="p1">**</ept> number of <bpt id="p2">**</bpt>dedicated nodes<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This number may be higher, lower, or the same as the current number of nodes in the pool.</source>
          <target state="new">This number may be higher, lower, or the same as the current number of nodes in the pool.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Batch evaluates a pool's autoscale formula at a specific interval (<bpt id="p1">[</bpt>automatic scaling intervals<ept id="p1">](#interval)</ept> are discussed below).</source>
          <target state="new">Batch evaluates a pool's autoscale formula at a specific interval (<bpt id="p1">[</bpt>automatic scaling intervals<ept id="p1">](#interval)</ept> are discussed below).</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Then it will adjust the target number of nodes in the pool to the number that your autoscale formula specifies at the time of evaluation.</source>
          <target state="new">Then it will adjust the target number of nodes in the pool to the number that your autoscale formula specifies at the time of evaluation.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As a quick example, this two-line autoscale formula specifies that the number of nodes should be adjusted according to the number of active tasks, up to a maximum of 10 compute nodes:</source>
          <target state="new">As a quick example, this two-line autoscale formula specifies that the number of nodes should be adjusted according to the number of active tasks, up to a maximum of 10 compute nodes:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The next few sections of this article discuss the various entities that will make up your autoscale formulas, including variables, operators, operations, and functions.</source>
          <target state="new">The next few sections of this article discuss the various entities that will make up your autoscale formulas, including variables, operators, operations, and functions.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You'll find out how to obtain various compute resource and task metrics within Batch.</source>
          <target state="new">You'll find out how to obtain various compute resource and task metrics within Batch.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use these metrics to intelligently adjust your pool's node count based on resource usage and task status.</source>
          <target state="new">You can use these metrics to intelligently adjust your pool's node count based on resource usage and task status.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You'll then learn how to construct a formula and enable automatic scaling on a pool by using both the Batch REST and .NET APIs.</source>
          <target state="new">You'll then learn how to construct a formula and enable automatic scaling on a pool by using both the Batch REST and .NET APIs.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We'll finish up with a few example formulas.</source>
          <target state="new">We'll finish up with a few example formulas.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Each Azure Batch account is limited to a maximum number of compute nodes that can be used for processing.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Each Azure Batch account is limited to a maximum number of compute nodes that can be used for processing.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The Batch service will create nodes only up to that limit.</source>
          <target state="new">The Batch service will create nodes only up to that limit.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Therefore, it may not reach the target number that is specified by a formula.</source>
          <target state="new">Therefore, it may not reach the target number that is specified by a formula.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Quotas and limits for the Azure Batch service<ept id="p1">](batch-quota-limit.md)</ept> for information on viewing and increasing your account quotas.</source>
          <target state="new">See <bpt id="p1">[</bpt>Quotas and limits for the Azure Batch service<ept id="p1">](batch-quota-limit.md)</ept> for information on viewing and increasing your account quotas.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="variables"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Variables</source>
          <target state="new"><ph id="ph1">&lt;a name="variables"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Variables</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use both system-defined and user-defined variables in autoscale formulas.</source>
          <target state="new">You can use both system-defined and user-defined variables in autoscale formulas.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the two-line example formula above, <ph id="ph1">`$TargetDedicated`</ph> is a system-defined variable, while <ph id="ph2">`$averageActiveTaskCount`</ph> is user-defined.</source>
          <target state="new">In the two-line example formula above, <ph id="ph1">`$TargetDedicated`</ph> is a system-defined variable, while <ph id="ph2">`$averageActiveTaskCount`</ph> is user-defined.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The tables below show both read-write and read-only variables that are defined by the Batch service.</source>
          <target state="new">The tables below show both read-write and read-only variables that are defined by the Batch service.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Get<ept id="p1">*</ept> and <bpt id="p2">*</bpt>set<ept id="p2">*</ept> the values of these <bpt id="p3">**</bpt>system-defined variables<ept id="p3">**</ept> to manage the number of compute nodes in a pool:</source>
          <target state="new"><bpt id="p1">*</bpt>Get<ept id="p1">*</ept> and <bpt id="p2">*</bpt>set<ept id="p2">*</ept> the values of these <bpt id="p3">**</bpt>system-defined variables<ept id="p3">**</ept> to manage the number of compute nodes in a pool:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Variables (read-write)</source>
          <target state="new">Variables (read-write)</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>$TargetDedicated</source>
          <target state="new">$TargetDedicated</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;b&gt;</ph>target<ph id="ph2">&lt;/b&gt;</ph> number of <ph id="ph3">&lt;b&gt;</ph>dedicated compute nodes<ph id="ph4">&lt;/b&gt;</ph> for the pool.</source>
          <target state="new">The <ph id="ph1">&lt;b&gt;</ph>target<ph id="ph2">&lt;/b&gt;</ph> number of <ph id="ph3">&lt;b&gt;</ph>dedicated compute nodes<ph id="ph4">&lt;/b&gt;</ph> for the pool.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is the number of compute nodes that the pool should be scaled to.</source>
          <target state="new">This is the number of compute nodes that the pool should be scaled to.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It is a "target" number since it's possible for a pool not to reach the target number of nodes.</source>
          <target state="new">It is a "target" number since it's possible for a pool not to reach the target number of nodes.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This can occur if the target number of nodes is modified again by a subsequent autoscale evaluation before the pool has reached the initial target.</source>
          <target state="new">This can occur if the target number of nodes is modified again by a subsequent autoscale evaluation before the pool has reached the initial target.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It can also happen if a Batch account node or core quota is reached before the target number of nodes is reached.</source>
          <target state="new">It can also happen if a Batch account node or core quota is reached before the target number of nodes is reached.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>$NodeDeallocationOption</source>
          <target state="new">$NodeDeallocationOption</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The action that occurs when compute nodes are removed from a pool.</source>
          <target state="new">The action that occurs when compute nodes are removed from a pool.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Possible values are:</source>
          <target state="new">Possible values are:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>requeue<ph id="ph1">&lt;/b&gt;</ph>--Terminates tasks immediately and puts them back on the job queue so that they are rescheduled.</source>
          <target state="new">requeue<ph id="ph1">&lt;/b&gt;</ph>--Terminates tasks immediately and puts them back on the job queue so that they are rescheduled.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>terminate<ph id="ph1">&lt;/b&gt;</ph>--Terminates tasks immediately and removes them from the job queue.</source>
          <target state="new">terminate<ph id="ph1">&lt;/b&gt;</ph>--Terminates tasks immediately and removes them from the job queue.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>taskcompletion<ph id="ph1">&lt;/b&gt;</ph>--Waits for currently running tasks to finish and then removes the node from the pool.</source>
          <target state="new">taskcompletion<ph id="ph1">&lt;/b&gt;</ph>--Waits for currently running tasks to finish and then removes the node from the pool.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>retaineddata<ph id="ph1">&lt;/b&gt;</ph>--Waits for all the local task-retained data on the node to be cleaned up before removing the node from the pool.</source>
          <target state="new">retaineddata<ph id="ph1">&lt;/b&gt;</ph>--Waits for all the local task-retained data on the node to be cleaned up before removing the node from the pool.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Get<ept id="p1">*</ept> the value of these <bpt id="p2">**</bpt>system-defined variables<ept id="p2">**</ept> to make adjustments that are based on metrics from the Batch service:</source>
          <target state="new"><bpt id="p1">*</bpt>Get<ept id="p1">*</ept> the value of these <bpt id="p2">**</bpt>system-defined variables<ept id="p2">**</ept> to make adjustments that are based on metrics from the Batch service:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Variables (read-only)</source>
          <target state="new">Variables (read-only)</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>$CPUPercent</source>
          <target state="new">$CPUPercent</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The average percentage of CPU usage.</source>
          <target state="new">The average percentage of CPU usage.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>$WallClockSeconds</source>
          <target state="new">$WallClockSeconds</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The number of seconds consumed.</source>
          <target state="new">The number of seconds consumed.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>$MemoryBytes</source>
          <target state="new">$MemoryBytes</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The average number of megabytes used.</source>
          <target state="new">The average number of megabytes used.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>$DiskBytes</source>
          <target state="new">$DiskBytes</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The average number of gigabytes used on the local disks.</source>
          <target state="new">The average number of gigabytes used on the local disks.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>$DiskReadBytes</source>
          <target state="new">$DiskReadBytes</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The number of bytes read.</source>
          <target state="new">The number of bytes read.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>$DiskWriteBytes</source>
          <target state="new">$DiskWriteBytes</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The number of bytes written.</source>
          <target state="new">The number of bytes written.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>$DiskReadOps</source>
          <target state="new">$DiskReadOps</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The count of read disk operations performed.</source>
          <target state="new">The count of read disk operations performed.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>$DiskWriteOps</source>
          <target state="new">$DiskWriteOps</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The count of write disk operations performed.</source>
          <target state="new">The count of write disk operations performed.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>$NetworkInBytes</source>
          <target state="new">$NetworkInBytes</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The number of inbound bytes.</source>
          <target state="new">The number of inbound bytes.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>$NetworkOutBytes</source>
          <target state="new">$NetworkOutBytes</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The number of outbound bytes.</source>
          <target state="new">The number of outbound bytes.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>$SampleNodeCount</source>
          <target state="new">$SampleNodeCount</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The count of compute nodes.</source>
          <target state="new">The count of compute nodes.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>$ActiveTasks</source>
          <target state="new">$ActiveTasks</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The number of tasks in an active state.</source>
          <target state="new">The number of tasks in an active state.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>$RunningTasks</source>
          <target state="new">$RunningTasks</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The number of tasks in a running state.</source>
          <target state="new">The number of tasks in a running state.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>$SucceededTasks</source>
          <target state="new">$SucceededTasks</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The number of tasks that finished successfully.</source>
          <target state="new">The number of tasks that finished successfully.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>$FailedTasks</source>
          <target state="new">$FailedTasks</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The number of tasks that failed.</source>
          <target state="new">The number of tasks that failed.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>$CurrentDedicated</source>
          <target state="new">$CurrentDedicated</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The current number of dedicated compute nodes.</source>
          <target state="new">The current number of dedicated compute nodes.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> The read-only, system-defined variables that are shown above are <bpt id="p1">*</bpt>objects<ept id="p1">*</ept> that provide various methods to access data associated with each.</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> The read-only, system-defined variables that are shown above are <bpt id="p1">*</bpt>objects<ept id="p1">*</ept> that provide various methods to access data associated with each.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Obtain sample data<ept id="p1">](#getsampledata)</ept> below for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>Obtain sample data<ept id="p1">](#getsampledata)</ept> below for more information.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="new">Types</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>These <bpt id="p1">**</bpt>types<ept id="p1">**</ept> are supported in a formula.</source>
          <target state="new">These <bpt id="p1">**</bpt>types<ept id="p1">**</ept> are supported in a formula.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>double</source>
          <target state="new">double</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>doubleVec</source>
          <target state="new">doubleVec</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>doubleVecList</source>
          <target state="new">doubleVecList</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="new">string</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>timestamp--timestamp is a compound structure that contains the following members:</source>
          <target state="new">timestamp--timestamp is a compound structure that contains the following members:</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>year</source>
          <target state="new">year</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>month (1-12)</source>
          <target state="new">month (1-12)</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>day (1-31)</source>
          <target state="new">day (1-31)</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>weekday (in the format of number, e.g. 1 for Monday)</source>
          <target state="new">weekday (in the format of number, e.g. 1 for Monday)</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>hour (in 24-hour number format, e.g. 13 means 1 PM)</source>
          <target state="new">hour (in 24-hour number format, e.g. 13 means 1 PM)</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>minute (00-59)</source>
          <target state="new">minute (00-59)</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>second (00-59)</source>
          <target state="new">second (00-59)</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>timeinterval</source>
          <target state="new">timeinterval</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>TimeInterval_Zero</source>
          <target state="new">TimeInterval_Zero</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>TimeInterval_100ns</source>
          <target state="new">TimeInterval_100ns</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>TimeInterval_Microsecond</source>
          <target state="new">TimeInterval_Microsecond</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>TimeInterval_Millisecond</source>
          <target state="new">TimeInterval_Millisecond</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>TimeInterval_Second</source>
          <target state="new">TimeInterval_Second</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>TimeInterval_Minute</source>
          <target state="new">TimeInterval_Minute</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>TimeInterval_Hour</source>
          <target state="new">TimeInterval_Hour</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>TimeInterval_Day</source>
          <target state="new">TimeInterval_Day</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>TimeInterval_Week</source>
          <target state="new">TimeInterval_Week</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>TimeInterval_Year</source>
          <target state="new">TimeInterval_Year</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="new">Operations</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>These <bpt id="p1">**</bpt>operations<ept id="p1">**</ept> are allowed on the types that are listed above.</source>
          <target state="new">These <bpt id="p1">**</bpt>operations<ept id="p1">**</ept> are allowed on the types that are listed above.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Operation</source>
          <target state="new">Operation</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Allowed operators</source>
          <target state="new">Allowed operators</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>double &amp;lt;operator&amp;gt; double =&amp;gt; double</source>
          <target state="new">double &amp;lt;operator&amp;gt; double =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>+, -, *, /</source>
          <target state="new">+, -, *, /</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>double &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timeinterval</source>
          <target state="new">double &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>doubleVec &amp;lt;operator&amp;gt; double =&amp;gt; doubleVec</source>
          <target state="new">doubleVec &amp;lt;operator&amp;gt; double =&amp;gt; doubleVec</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>+, -, *, /</source>
          <target state="new">+, -, *, /</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>doubleVec &amp;lt;operator&amp;gt; doubleVec =&amp;gt; doubleVec</source>
          <target state="new">doubleVec &amp;lt;operator&amp;gt; doubleVec =&amp;gt; doubleVec</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>+, -, *, /</source>
          <target state="new">+, -, *, /</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>timeinterval &amp;lt;operator&amp;gt; double =&amp;gt; timeinterval</source>
          <target state="new">timeinterval &amp;lt;operator&amp;gt; double =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>*, /</source>
          <target state="new">*, /</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>timeinterval &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timeinterval</source>
          <target state="new">timeinterval &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>+, -</source>
          <target state="new">+, -</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>timeinterval &amp;lt;operator&amp;gt; timestamp =&amp;gt; timestamp</source>
          <target state="new">timeinterval &amp;lt;operator&amp;gt; timestamp =&amp;gt; timestamp</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>timestamp &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timestamp</source>
          <target state="new">timestamp &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timestamp</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>timestamp &amp;lt;operator&amp;gt; timestamp =&amp;gt; timeinterval</source>
          <target state="new">timestamp &amp;lt;operator&amp;gt; timestamp =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>&amp;lt;operator&amp;gt;double =&amp;gt; double</source>
          <target state="new">&amp;lt;operator&amp;gt;double =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>-, !</source>
          <target state="new">-, !</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>&amp;lt;operator&amp;gt;timeinterval =&amp;gt; timeinterval</source>
          <target state="new">&amp;lt;operator&amp;gt;timeinterval =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>double &amp;lt;operator&amp;gt; double =&amp;gt; double</source>
          <target state="new">double &amp;lt;operator&amp;gt; double =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</source>
          <target state="new">&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>string &amp;lt;operator&amp;gt; string =&amp;gt; double</source>
          <target state="new">string &amp;lt;operator&amp;gt; string =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</source>
          <target state="new">&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>timestamp &amp;lt;operator&amp;gt; timestamp =&amp;gt; double</source>
          <target state="new">timestamp &amp;lt;operator&amp;gt; timestamp =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt, !=</source>
          <target state="new">&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt, !=</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>timeinterval &amp;lt;operator&amp;gt; timeinterval =&amp;gt; double</source>
          <target state="new">timeinterval &amp;lt;operator&amp;gt; timeinterval =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</source>
          <target state="new">&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>double &amp;lt;operator&amp;gt; double =&amp;gt; double</source>
          <target state="new">double &amp;lt;operator&amp;gt; double =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>&amp;&amp;, ||</source>
          <target state="new">&amp;&amp;, ||</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>test double only (nonzero is true, zero is false)</source>
          <target state="new">test double only (nonzero is true, zero is false)</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>:</source>
          <target state="new">:</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="new">Functions</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>These predefined <bpt id="p1">**</bpt>functions<ept id="p1">**</ept> are available for you to use in defining an automatic scaling formula.</source>
          <target state="new">These predefined <bpt id="p1">**</bpt>functions<ept id="p1">**</ept> are available for you to use in defining an automatic scaling formula.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="new">Function</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>avg<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>avg<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Returns the average value for all values in the doubleVecList.</source>
          <target state="new">Returns the average value for all values in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>len<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>len<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Returns the length of the vector that is created from the doubleVecList.</source>
          <target state="new">Returns the length of the vector that is created from the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>lg<ph id="ph2">&lt;/b&gt;</ph>(double)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>lg<ph id="ph2">&lt;/b&gt;</ph>(double)</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Returns the log base 2 of the double.</source>
          <target state="new">Returns the log base 2 of the double.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>doubleVec <ph id="ph1">&lt;b&gt;</ph>lg<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">doubleVec <ph id="ph1">&lt;b&gt;</ph>lg<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Returns the componentwise log base 2 of the doubleVecList.</source>
          <target state="new">Returns the componentwise log base 2 of the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A vec(double) must explicitly be passed for the single double parameter.</source>
          <target state="new">A vec(double) must explicitly be passed for the single double parameter.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Otherwise, the double lg(double) version is assumed.</source>
          <target state="new">Otherwise, the double lg(double) version is assumed.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>ln<ph id="ph2">&lt;/b&gt;</ph>(double)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>ln<ph id="ph2">&lt;/b&gt;</ph>(double)</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Returns the natural log of the double.</source>
          <target state="new">Returns the natural log of the double.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>doubleVec <ph id="ph1">&lt;b&gt;</ph>ln<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">doubleVec <ph id="ph1">&lt;b&gt;</ph>ln<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Returns the componentwise log base 2 of the doubleVecList.</source>
          <target state="new">Returns the componentwise log base 2 of the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A vec(double) must explicitly be passed for the single double parameter.</source>
          <target state="new">A vec(double) must explicitly be passed for the single double parameter.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Otherwise, the double lg(double) version is assumed.</source>
          <target state="new">Otherwise, the double lg(double) version is assumed.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>log<ph id="ph2">&lt;/b&gt;</ph>(double)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>log<ph id="ph2">&lt;/b&gt;</ph>(double)</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Returns the log base 10 of the double.</source>
          <target state="new">Returns the log base 10 of the double.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>doubleVec <ph id="ph1">&lt;b&gt;</ph>log<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">doubleVec <ph id="ph1">&lt;b&gt;</ph>log<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Returns the componentwise log base 10 of the doubleVecList.</source>
          <target state="new">Returns the componentwise log base 10 of the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A vec(double) must explicitly be passed for the single double parameter.</source>
          <target state="new">A vec(double) must explicitly be passed for the single double parameter.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Otherwise, the double log(double) version is assumed.</source>
          <target state="new">Otherwise, the double log(double) version is assumed.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>max<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>max<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in the doubleVecList.</source>
          <target state="new">Returns the maximum value in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>min<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>min<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in the doubleVecList.</source>
          <target state="new">Returns the minimum value in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>norm<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>norm<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Returns the two-norm of the vector that is created from the doubleVecList.</source>
          <target state="new">Returns the two-norm of the vector that is created from the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>percentile<ph id="ph2">&lt;/b&gt;</ph>(doubleVec v, double p)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>percentile<ph id="ph2">&lt;/b&gt;</ph>(doubleVec v, double p)</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Returns the percentile element of the vector v.</source>
          <target state="new">Returns the percentile element of the vector v.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>rand<ph id="ph2">&lt;/b&gt;</ph>()</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>rand<ph id="ph2">&lt;/b&gt;</ph>()</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Returns a random value between 0.0 and 1.0.</source>
          <target state="new">Returns a random value between 0.0 and 1.0.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>range<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>range<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Returns the difference between the min and max values in the doubleVecList.</source>
          <target state="new">Returns the difference between the min and max values in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>std<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>std<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Returns the sample standard deviation of the values in the doubleVecList.</source>
          <target state="new">Returns the sample standard deviation of the values in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>stop<ph id="ph1">&lt;/b&gt;</ph>()</source>
          <target state="new">stop<ph id="ph1">&lt;/b&gt;</ph>()</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Stops evaluation of the autoscaling expression.</source>
          <target state="new">Stops evaluation of the autoscaling expression.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>sum<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>sum<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Returns the sum of all the components of the doubleVecList.</source>
          <target state="new">Returns the sum of all the components of the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>timestamp <ph id="ph1">&lt;b&gt;</ph>time<ph id="ph2">&lt;/b&gt;</ph>(string dateTime="")</source>
          <target state="new">timestamp <ph id="ph1">&lt;b&gt;</ph>time<ph id="ph2">&lt;/b&gt;</ph>(string dateTime="")</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Returns the time stamp of the current time if no parameters are passed, or the time stamp of the dateTime string if it is passed.</source>
          <target state="new">Returns the time stamp of the current time if no parameters are passed, or the time stamp of the dateTime string if it is passed.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Supported dateTime formats are W3C-DTF and RFC 1123.</source>
          <target state="new">Supported dateTime formats are W3C-DTF and RFC 1123.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>val<ph id="ph2">&lt;/b&gt;</ph>(doubleVec v, double i)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>val<ph id="ph2">&lt;/b&gt;</ph>(doubleVec v, double i)</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Returns the value of the element that is at location i in vector v, with a starting index of zero.</source>
          <target state="new">Returns the value of the element that is at location i in vector v, with a starting index of zero.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Some of the functions that are described in the table above can accept a list as an argument.</source>
          <target state="new">Some of the functions that are described in the table above can accept a list as an argument.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The comma-separated list is any combination of <bpt id="p1">*</bpt>double<ept id="p1">*</ept> and <bpt id="p2">*</bpt>doubleVec<ept id="p2">*</ept>.</source>
          <target state="new">The comma-separated list is any combination of <bpt id="p1">*</bpt>double<ept id="p1">*</ept> and <bpt id="p2">*</bpt>doubleVec<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>doubleVecList<ept id="p1">*</ept> value is converted to a single <bpt id="p2">*</bpt>doubleVec<ept id="p2">*</ept> prior to evaluation.</source>
          <target state="new">The <bpt id="p1">*</bpt>doubleVecList<ept id="p1">*</ept> value is converted to a single <bpt id="p2">*</bpt>doubleVec<ept id="p2">*</ept> prior to evaluation.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`v = [1,2,3]`</ph>, then calling <ph id="ph2">`avg(v)`</ph> is equivalent to calling <ph id="ph3">`avg(1,2,3)`</ph>.</source>
          <target state="new">For example, if <ph id="ph1">`v = [1,2,3]`</ph>, then calling <ph id="ph2">`avg(v)`</ph> is equivalent to calling <ph id="ph3">`avg(1,2,3)`</ph>.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`avg(v, 7)`</ph> is equivalent to calling <ph id="ph2">`avg(1,2,3,7)`</ph>.</source>
          <target state="new">Calling <ph id="ph1">`avg(v, 7)`</ph> is equivalent to calling <ph id="ph2">`avg(1,2,3,7)`</ph>.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="getsampledata"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Obtain sample data</source>
          <target state="new"><ph id="ph1">&lt;a name="getsampledata"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Obtain sample data</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Autoscale formulas act on metrics data (samples) that is provided by the Batch service.</source>
          <target state="new">Autoscale formulas act on metrics data (samples) that is provided by the Batch service.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A formula grows or shrinks pool size based on the values that it obtains from the service.</source>
          <target state="new">A formula grows or shrinks pool size based on the values that it obtains from the service.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The system-defined variables that are described above are objects that provide various methods to access data that is associated with that object.</source>
          <target state="new">The system-defined variables that are described above are objects that provide various methods to access data that is associated with that object.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For example, the following expression shows a request to get the last five minutes of CPU usage:</source>
          <target state="new">For example, the following expression shows a request to get the last five minutes of CPU usage:</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="new">Method</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>GetSample()</source>
          <target state="new">GetSample()</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;b&gt;</ph>GetSample()<ph id="ph2">&lt;/b&gt;</ph> method returns a vector of data samples.</source>
          <target state="new">The <ph id="ph1">&lt;b&gt;</ph>GetSample()<ph id="ph2">&lt;/b&gt;</ph> method returns a vector of data samples.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A sample is 30 seconds worth of metrics data.</source>
          <target state="new">A sample is 30 seconds worth of metrics data.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In other words, samples are obtained every 30 seconds.</source>
          <target state="new">In other words, samples are obtained every 30 seconds.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>But as noted below, there is a delay between when a sample is collected and when it is available to a formula.</source>
          <target state="new">But as noted below, there is a delay between when a sample is collected and when it is available to a formula.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>As such, not all samples for a given time period may be available for evaluation by a formula.</source>
          <target state="new">As such, not all samples for a given time period may be available for evaluation by a formula.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>doubleVec GetSample(double count)<ph id="ph1">&lt;/b&gt;</ph>--Specifies the number of samples to obtain from the most recent samples that were collected.</source>
          <target state="new">doubleVec GetSample(double count)<ph id="ph1">&lt;/b&gt;</ph>--Specifies the number of samples to obtain from the most recent samples that were collected.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>GetSample(1) returns the last available sample.</source>
          <target state="new">GetSample(1) returns the last available sample.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For metrics like $CPUPercent, however, this should not be used because it is impossible to know <ph id="ph1">&lt;em&gt;</ph>when<ph id="ph2">&lt;/em&gt;</ph> the sample was collected.</source>
          <target state="new">For metrics like $CPUPercent, however, this should not be used because it is impossible to know <ph id="ph1">&lt;em&gt;</ph>when<ph id="ph2">&lt;/em&gt;</ph> the sample was collected.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>It might be recent, or, because of system issues, it might be much older.</source>
          <target state="new">It might be recent, or, because of system issues, it might be much older.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>It is better in such cases to use a time interval as shown below.</source>
          <target state="new">It is better in such cases to use a time interval as shown below.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>doubleVec GetSample((timestamp | timeinterval) startTime [, double samplePercent])<ph id="ph1">&lt;/b&gt;</ph>--Specifies a time frame for gathering sample data.</source>
          <target state="new">doubleVec GetSample((timestamp | timeinterval) startTime [, double samplePercent])<ph id="ph1">&lt;/b&gt;</ph>--Specifies a time frame for gathering sample data.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Optionally, it also specifies the percentage of samples that must be available in the requested time frame.</source>
          <target state="new">Optionally, it also specifies the percentage of samples that must be available in the requested time frame.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>$CPUPercent.GetSample(TimeInterval_Minute * 10)<ph id="ph1">&lt;/em&gt;</ph> would return 20 samples if all samples for the last ten minutes are present in the CPUPercent history.</source>
          <target state="new">$CPUPercent.GetSample(TimeInterval_Minute * 10)<ph id="ph1">&lt;/em&gt;</ph> would return 20 samples if all samples for the last ten minutes are present in the CPUPercent history.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If the last minute of history was not available, however, only 18 samples would be returned.</source>
          <target state="new">If the last minute of history was not available, however, only 18 samples would be returned.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>In this case:</source>
          <target state="new">In this case:</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
          &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;</ph>$CPUPercent.GetSample(TimeInterval_Minute * 10, 95)<ph id="ph2">&lt;/em&gt;</ph> would fail because only 90 percent of the samples are available.</source>
          <target state="new"><ph id="ph1">
          &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;</ph>$CPUPercent.GetSample(TimeInterval_Minute * 10, 95)<ph id="ph2">&lt;/em&gt;</ph> would fail because only 90 percent of the samples are available.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
          &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;</ph>$CPUPercent.GetSample(TimeInterval_Minute * 10, 80)<ph id="ph2">&lt;/em&gt;</ph> would succeed.</source>
          <target state="new"><ph id="ph1">
          &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;</ph>$CPUPercent.GetSample(TimeInterval_Minute * 10, 80)<ph id="ph2">&lt;/em&gt;</ph> would succeed.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>doubleVec GetSample((timestamp | timeinterval) startTime, (timestamp | timeinterval) endTime [, double samplePercent])<ph id="ph1">&lt;/b&gt;</ph>--Specifies a time frame for gathering data, with both a start time and an end time.</source>
          <target state="new">doubleVec GetSample((timestamp | timeinterval) startTime, (timestamp | timeinterval) endTime [, double samplePercent])<ph id="ph1">&lt;/b&gt;</ph>--Specifies a time frame for gathering data, with both a start time and an end time.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>As mentioned above, there is a delay between when a sample is collected and when it is available to a formula.</source>
          <target state="new">As mentioned above, there is a delay between when a sample is collected and when it is available to a formula.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This must be considered when you use the <ph id="ph1">&lt;em&gt;</ph>GetSample<ph id="ph2">&lt;/em&gt;</ph> method.</source>
          <target state="new">This must be considered when you use the <ph id="ph1">&lt;em&gt;</ph>GetSample<ph id="ph2">&lt;/em&gt;</ph> method.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;em&gt;</ph>GetSamplePercent<ph id="ph2">&lt;/em&gt;</ph> below.</source>
          <target state="new">See <ph id="ph1">&lt;em&gt;</ph>GetSamplePercent<ph id="ph2">&lt;/em&gt;</ph> below.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>GetSamplePeriod()</source>
          <target state="new">GetSamplePeriod()</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Returns the period of samples that were taken in a historical sample data set.</source>
          <target state="new">Returns the period of samples that were taken in a historical sample data set.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Count()</source>
          <target state="new">Count()</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Returns the total number of samples in the metric history.</source>
          <target state="new">Returns the total number of samples in the metric history.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>HistoryBeginTime()</source>
          <target state="new">HistoryBeginTime()</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Returns the time stamp of the oldest available data sample for the metric.</source>
          <target state="new">Returns the time stamp of the oldest available data sample for the metric.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>GetSamplePercent()</source>
          <target state="new">GetSamplePercent()</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Returns the percentage of samples that are available for a given time interval.</source>
          <target state="new">Returns the percentage of samples that are available for a given time interval.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>doubleVec GetSamplePercent( (timestamp | timeinterval) startTime [, (timestamp | timeinterval) endTime] )<ph id="ph1">&lt;/b&gt;</ph><ph id="ph2">
    </ph></source>
          <target state="new">doubleVec GetSamplePercent( (timestamp | timeinterval) startTime [, (timestamp | timeinterval) endTime] )<ph id="ph1">&lt;/b&gt;</ph><ph id="ph2">
    </ph></target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Because the GetSample method fails if the percentage of samples returned is less than the samplePercent specified, you can use the GetSamplePercent method to check first.</source>
          <target state="new">Because the GetSample method fails if the percentage of samples returned is less than the samplePercent specified, you can use the GetSamplePercent method to check first.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Then you can perform an alternate action if insufficient samples are present, without halting the automatic scaling evaluation.</source>
          <target state="new">Then you can perform an alternate action if insufficient samples are present, without halting the automatic scaling evaluation.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Samples, sample percentage, and the <bpt id="p1">*</bpt>GetSample()<ept id="p1">*</ept> method</source>
          <target state="new">Samples, sample percentage, and the <bpt id="p1">*</bpt>GetSample()<ept id="p1">*</ept> method</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The core operation of an autoscale formula is to obtain task and resource metric data and then adjust pool size based on that data.</source>
          <target state="new">The core operation of an autoscale formula is to obtain task and resource metric data and then adjust pool size based on that data.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>As such, it is important to have a clear understanding of how autoscale formulas interact with metrics data, or "samples."</source>
          <target state="new">As such, it is important to have a clear understanding of how autoscale formulas interact with metrics data, or "samples."</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Samples</source>
          <target state="new">Samples</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The Batch service periodically takes <bpt id="p1">*</bpt>samples<ept id="p1">*</ept> of task and resource metrics and makes them available to your autoscale formulas.</source>
          <target state="new">The Batch service periodically takes <bpt id="p1">*</bpt>samples<ept id="p1">*</ept> of task and resource metrics and makes them available to your autoscale formulas.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>These samples are recorded every 30 seconds by the Batch service.</source>
          <target state="new">These samples are recorded every 30 seconds by the Batch service.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>However, there is typically some latency that causes a delay between when those samples were recorded and when they are made available to (and can be read by) your autoscale formulas.</source>
          <target state="new">However, there is typically some latency that causes a delay between when those samples were recorded and when they are made available to (and can be read by) your autoscale formulas.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Additionally, due to various factors such as network or other infrastructure issues, samples may not have been recorded for a particular interval.</source>
          <target state="new">Additionally, due to various factors such as network or other infrastructure issues, samples may not have been recorded for a particular interval.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>This results in "missing" samples.</source>
          <target state="new">This results in "missing" samples.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Sample percentage</source>
          <target state="new">Sample percentage</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`samplePercent`</ph> is passed to the <ph id="ph2">`GetSample()`</ph> method or the <ph id="ph3">`GetSamplePercent()`</ph> method is called, "percent" refers to a comparison between the total <bpt id="p1">*</bpt>possible<ept id="p1">*</ept> number of samples that are recorded by the Batch service and the number of samples that are actually <bpt id="p2">*</bpt>available<ept id="p2">*</ept> to your autoscale formula.</source>
          <target state="new">When <ph id="ph1">`samplePercent`</ph> is passed to the <ph id="ph2">`GetSample()`</ph> method or the <ph id="ph3">`GetSamplePercent()`</ph> method is called, "percent" refers to a comparison between the total <bpt id="p1">*</bpt>possible<ept id="p1">*</ept> number of samples that are recorded by the Batch service and the number of samples that are actually <bpt id="p2">*</bpt>available<ept id="p2">*</ept> to your autoscale formula.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Let's look at a 10-minute timespan as an example.</source>
          <target state="new">Let's look at a 10-minute timespan as an example.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Because samples are recorded every 30 seconds, within a 10 minute timespan, the maximum total number of samples that are recorded by Batch would be 20 samples (2 per minute).</source>
          <target state="new">Because samples are recorded every 30 seconds, within a 10 minute timespan, the maximum total number of samples that are recorded by Batch would be 20 samples (2 per minute).</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>However, due to the inherent latency of the reporting mechanism or some other issue within the Azure infrastructure, there may be only 15 samples that are available to your autoscale formula for reading.</source>
          <target state="new">However, due to the inherent latency of the reporting mechanism or some other issue within the Azure infrastructure, there may be only 15 samples that are available to your autoscale formula for reading.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>This means that, for that 10-minute period, only <bpt id="p1">**</bpt>75 percent<ept id="p1">**</ept> of the total number of samples recorded are actually available to your formula.</source>
          <target state="new">This means that, for that 10-minute period, only <bpt id="p1">**</bpt>75 percent<ept id="p1">**</ept> of the total number of samples recorded are actually available to your formula.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>GetSample() and sample ranges</source>
          <target state="new">GetSample() and sample ranges</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Your autoscale formulas are going to be growing and shrinking your pools--adding nodes or removing nodes.</source>
          <target state="new">Your autoscale formulas are going to be growing and shrinking your pools--adding nodes or removing nodes.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Because nodes cost you money, you want to ensure that your formulas use an intelligent method of analysis that is based on sufficient data.</source>
          <target state="new">Because nodes cost you money, you want to ensure that your formulas use an intelligent method of analysis that is based on sufficient data.</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you use a trending-type analysis in your formulas.</source>
          <target state="new">Therefore, we recommend that you use a trending-type analysis in your formulas.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>This type will grow and shrink your pools based on a <bpt id="p1">*</bpt>range<ept id="p1">*</ept> of collected samples.</source>
          <target state="new">This type will grow and shrink your pools based on a <bpt id="p1">*</bpt>range<ept id="p1">*</ept> of collected samples.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>To do so, use <ph id="ph1">`GetSample(interval look-back start, interval look-back end)`</ph> to return a <bpt id="p1">**</bpt>vector<ept id="p1">**</ept> of samples:</source>
          <target state="new">To do so, use <ph id="ph1">`GetSample(interval look-back start, interval look-back end)`</ph> to return a <bpt id="p1">**</bpt>vector<ept id="p1">**</ept> of samples:</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>When the above line is evaluated by Batch, it will return a range of samples as a vector of values.</source>
          <target state="new">When the above line is evaluated by Batch, it will return a range of samples as a vector of values.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Once you've collected the vector of samples, you can then use functions like <ph id="ph1">`min()`</ph>, <ph id="ph2">`max()`</ph>, and <ph id="ph3">`avg()`</ph> to derive meaningful values from the collected range.</source>
          <target state="new">Once you've collected the vector of samples, you can then use functions like <ph id="ph1">`min()`</ph>, <ph id="ph2">`max()`</ph>, and <ph id="ph3">`avg()`</ph> to derive meaningful values from the collected range.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>For additional security, you can force a formula evaluation to <bpt id="p1">*</bpt>fail<ept id="p1">*</ept> if less than a certain sample percentage is available for a particular time period.</source>
          <target state="new">For additional security, you can force a formula evaluation to <bpt id="p1">*</bpt>fail<ept id="p1">*</ept> if less than a certain sample percentage is available for a particular time period.</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>When you force a formula evaluation to fail, you instruct Batch to cease further evaluation of the formula if the specified percentage of samples is not available--and no change to pool size will be made.</source>
          <target state="new">When you force a formula evaluation to fail, you instruct Batch to cease further evaluation of the formula if the specified percentage of samples is not available--and no change to pool size will be made.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>To specify a required percentage of samples for the evaluation to succeed, specify it as the third parameter to <ph id="ph1">`GetSample()`</ph>.</source>
          <target state="new">To specify a required percentage of samples for the evaluation to succeed, specify it as the third parameter to <ph id="ph1">`GetSample()`</ph>.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Here, a requirement of 75 percent of samples is specified:</source>
          <target state="new">Here, a requirement of 75 percent of samples is specified:</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>It is also important, due to the previously mentioned delay in sample availability, to always specify a time range with a look-back start time that is older than one minute.</source>
          <target state="new">It is also important, due to the previously mentioned delay in sample availability, to always specify a time range with a look-back start time that is older than one minute.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This is because it takes approximately one minute for samples to propagate through the system, so samples in the range <ph id="ph1">`(0 * TimeInterval_Second, 60 * TimeInterval_Second)`</ph> will often not be available.</source>
          <target state="new">This is because it takes approximately one minute for samples to propagate through the system, so samples in the range <ph id="ph1">`(0 * TimeInterval_Second, 60 * TimeInterval_Second)`</ph> will often not be available.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Again, you can use the percentage parameter of <ph id="ph1">`GetSample()`</ph> to force a particular sample percentage requirement.</source>
          <target state="new">Again, you can use the percentage parameter of <ph id="ph1">`GetSample()`</ph> to force a particular sample percentage requirement.</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> We <bpt id="p1">**</bpt>strongly recommend<ept id="p1">**</ept> that you <bpt id="p2">**</bpt>avoid relying <bpt id="p3">*</bpt>only<ept id="p3">*</ept> on <ph id="ph2">`GetSample(1)`</ph> in your autoscale formulas<ept id="p2">**</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> We <bpt id="p1">**</bpt>strongly recommend<ept id="p1">**</ept> that you <bpt id="p2">**</bpt>avoid relying <bpt id="p3">*</bpt>only<ept id="p3">*</ept> on <ph id="ph2">`GetSample(1)`</ph> in your autoscale formulas<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>This is because <ph id="ph1">`GetSample(1)`</ph> essentially says to the Batch service, "Give me the last sample you have, no matter how long ago you got it."</source>
          <target state="new">This is because <ph id="ph1">`GetSample(1)`</ph> essentially says to the Batch service, "Give me the last sample you have, no matter how long ago you got it."</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Since it is only a single sample, and it may be an older sample, it may not be representative of the larger picture of recent task or resource state.</source>
          <target state="new">Since it is only a single sample, and it may be an older sample, it may not be representative of the larger picture of recent task or resource state.</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>If you do use <ph id="ph1">`GetSample(1)`</ph>, make sure that it's part of a larger statement and not the only data point that your formula relies on.</source>
          <target state="new">If you do use <ph id="ph1">`GetSample(1)`</ph>, make sure that it's part of a larger statement and not the only data point that your formula relies on.</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Metrics</source>
          <target state="new">Metrics</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>You can use both <bpt id="p1">**</bpt>resource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>task<ept id="p2">**</ept> metrics when you're defining a formula.</source>
          <target state="new">You can use both <bpt id="p1">**</bpt>resource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>task<ept id="p2">**</ept> metrics when you're defining a formula.</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>You adjust the target number of dedicated nodes in the pool based on the metrics data that you obtain and evaluate.</source>
          <target state="new">You adjust the target number of dedicated nodes in the pool based on the metrics data that you obtain and evaluate.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Variables<ept id="p1">](#variables)</ept> section above for more information on each metric.</source>
          <target state="new">See the <bpt id="p1">[</bpt>Variables<ept id="p1">](#variables)</ept> section above for more information on each metric.</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Metric</source>
          <target state="new">Metric</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Resource</source>
          <target state="new">Resource</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Resource metrics<ph id="ph1">&lt;/b&gt;</ph> are based on the CPU, bandwidth, and memory usage of compute nodes, as well as the number of nodes.</source>
          <target state="new">Resource metrics<ph id="ph1">&lt;/b&gt;</ph> are based on the CPU, bandwidth, and memory usage of compute nodes, as well as the number of nodes.</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>These system-defined variables are useful for making adjustments based on node count:</source>
          <target state="new">These system-defined variables are useful for making adjustments based on node count:</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>$TargetDedicated</source>
          <target state="new">$TargetDedicated</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>$CurrentDedicated</source>
          <target state="new">$CurrentDedicated</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>$SampleNodeCount</source>
          <target state="new">$SampleNodeCount</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>These system-defined variables are useful for making adjustments based on node resource usage:</source>
          <target state="new">These system-defined variables are useful for making adjustments based on node resource usage:</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>$CPUPercent</source>
          <target state="new">$CPUPercent</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>$WallClockSeconds</source>
          <target state="new">$WallClockSeconds</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>$MemoryBytes</source>
          <target state="new">$MemoryBytes</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>$DiskBytes</source>
          <target state="new">$DiskBytes</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>$DiskReadBytes</source>
          <target state="new">$DiskReadBytes</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>$DiskWriteBytes</source>
          <target state="new">$DiskWriteBytes</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>$DiskReadOps</source>
          <target state="new">$DiskReadOps</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>$DiskWriteOps</source>
          <target state="new">$DiskWriteOps</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>$NetworkInBytes</source>
          <target state="new">$NetworkInBytes</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>$NetworkOutBytes</source>
          <target state="new">$NetworkOutBytes</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Task</source>
          <target state="new">Task</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Task metrics<ph id="ph1">&lt;/b&gt;</ph> are based on the status of tasks, such as Active, Pending, and Completed.</source>
          <target state="new">Task metrics<ph id="ph1">&lt;/b&gt;</ph> are based on the status of tasks, such as Active, Pending, and Completed.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The following system-defined variables are useful for making pool-size adjustments based on task metrics:</source>
          <target state="new">The following system-defined variables are useful for making pool-size adjustments based on task metrics:</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>$ActiveTasks</source>
          <target state="new">$ActiveTasks</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>$RunningTasks</source>
          <target state="new">$RunningTasks</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>$SucceededTasks</source>
          <target state="new">$SucceededTasks</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>$FailedTasks</source>
          <target state="new">$FailedTasks</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Build an autoscale formula</source>
          <target state="new">Build an autoscale formula</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>You construct an autoscale formula by forming statements that use the above components and then combining those statements into a complete formula.</source>
          <target state="new">You construct an autoscale formula by forming statements that use the above components and then combining those statements into a complete formula.</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>For example, here we construct a formula by first defining the requirements for a formula that will:</source>
          <target state="new">For example, here we construct a formula by first defining the requirements for a formula that will:</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Increase the target number of compute nodes in a pool if CPU usage is high.</source>
          <target state="new">Increase the target number of compute nodes in a pool if CPU usage is high.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Decrease the target number of compute nodes in a pool when CPU usage is low.</source>
          <target state="new">Decrease the target number of compute nodes in a pool when CPU usage is low.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Always restrict the maximum number of nodes to 400.</source>
          <target state="new">Always restrict the maximum number of nodes to 400.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>For the <bpt id="p1">*</bpt>increase<ept id="p1">*</ept> of nodes during high CPU usage, we define the statement that populates a user-defined variable ($TotalNodes) with a value that is 110 percent of the current target number of nodes, if the minimum average CPU usage during the last 10 minutes was above 70 percent:</source>
          <target state="new">For the <bpt id="p1">*</bpt>increase<ept id="p1">*</ept> of nodes during high CPU usage, we define the statement that populates a user-defined variable ($TotalNodes) with a value that is 110 percent of the current target number of nodes, if the minimum average CPU usage during the last 10 minutes was above 70 percent:</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The next statement sets the same variable to 90 percent of the current target number of nodes if the average CPU usage of the past 60 minutes was <bpt id="p1">*</bpt>under<ept id="p1">*</ept> 20 percent.</source>
          <target state="new">The next statement sets the same variable to 90 percent of the current target number of nodes if the average CPU usage of the past 60 minutes was <bpt id="p1">*</bpt>under<ept id="p1">*</ept> 20 percent.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>This lowers the target number during low CPU usage.</source>
          <target state="new">This lowers the target number during low CPU usage.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Note that this statement also references the user-defined variable <bpt id="p1">*</bpt>$TotalNodes<ept id="p1">*</ept> from the statement above.</source>
          <target state="new">Note that this statement also references the user-defined variable <bpt id="p1">*</bpt>$TotalNodes<ept id="p1">*</ept> from the statement above.</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Now limit the target number of dedicated compute nodes to a <bpt id="p1">**</bpt>maximum<ept id="p1">**</ept> of 400:</source>
          <target state="new">Now limit the target number of dedicated compute nodes to a <bpt id="p1">**</bpt>maximum<ept id="p1">**</ept> of 400:</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Here's the complete formula:</source>
          <target state="new">Here's the complete formula:</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> An automatic scaling formula is comprised of <bpt id="p1">[</bpt>Batch REST<ph id="ph2">][</ph>rest_api<ept id="p1">]</ept> API variables, types, operations, and functions.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> An automatic scaling formula is comprised of <bpt id="p1">[</bpt>Batch REST<ph id="ph2">][</ph>rest_api<ept id="p1">]</ept> API variables, types, operations, and functions.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>You use these in formula strings even while you're working with the <bpt id="p1">[</bpt>Batch .NET<ph id="ph1">][</ph>net_api<ept id="p1">]</ept> library.</source>
          <target state="new">You use these in formula strings even while you're working with the <bpt id="p1">[</bpt>Batch .NET<ph id="ph1">][</ph>net_api<ept id="p1">]</ept> library.</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Create a pool with automatic scaling enabled</source>
          <target state="new">Create a pool with automatic scaling enabled</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>To enable automatic scaling when you're creating a pool, use one of the following techniques:</source>
          <target state="new">To enable automatic scaling when you're creating a pool, use one of the following techniques:</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New-AzureBatchPool<ept id="p1">](https://msdn.microsoft.com/library/azure/mt125936.aspx)</ept>--This Azure PowerShell cmdlet uses the AutoScaleFormula parameter to specify the automatic scaling formula.</source>
          <target state="new"><bpt id="p1">[</bpt>New-AzureBatchPool<ept id="p1">](https://msdn.microsoft.com/library/azure/mt125936.aspx)</ept>--This Azure PowerShell cmdlet uses the AutoScaleFormula parameter to specify the automatic scaling formula.</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.CreatePool<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createpool.aspx)</ept>--After this .NET method is called to create a pool, you'll then set the pool's <bpt id="p2">[</bpt>CloudPool.AutoScaleEnabled<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleenabled.aspx)</ept> property and <bpt id="p3">[</bpt>CloudPool.AutoScaleFormula<ept id="p3">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleformula.aspx)</ept> property to enable automatic scaling.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.CreatePool<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createpool.aspx)</ept>--After this .NET method is called to create a pool, you'll then set the pool's <bpt id="p2">[</bpt>CloudPool.AutoScaleEnabled<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleenabled.aspx)</ept> property and <bpt id="p3">[</bpt>CloudPool.AutoScaleFormula<ept id="p3">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleformula.aspx)</ept> property to enable automatic scaling.</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add a pool to an account<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820174.aspx)</ept>--The enableAutoScale and autoScaleFormula elements are used in this REST API request to set up automatic scaling for the pool when it is created.</source>
          <target state="new"><bpt id="p1">[</bpt>Add a pool to an account<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820174.aspx)</ept>--The enableAutoScale and autoScaleFormula elements are used in this REST API request to set up automatic scaling for the pool when it is created.</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> If you create an autoscale-enabled pool by using one of the above techniques, the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter for the pool must <bpt id="p2">**</bpt>not<ept id="p2">**</ept> be specified.</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> If you create an autoscale-enabled pool by using one of the above techniques, the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter for the pool must <bpt id="p2">**</bpt>not<ept id="p2">**</ept> be specified.</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Also note that if you wish to manually resize an autoscale-enabled pool (for example, with <bpt id="p1">[</bpt>BatchClient.PoolOperations.ResizePool<ph id="ph1">][</ph>net_poolops_resizepool<ept id="p1">]</ept>), then you must first <bpt id="p2">**</bpt>disable<ept id="p2">**</ept> automatic scaling on the pool, then resize it.</source>
          <target state="new">Also note that if you wish to manually resize an autoscale-enabled pool (for example, with <bpt id="p1">[</bpt>BatchClient.PoolOperations.ResizePool<ph id="ph1">][</ph>net_poolops_resizepool<ept id="p1">]</ept>), then you must first <bpt id="p2">**</bpt>disable<ept id="p2">**</ept> automatic scaling on the pool, then resize it.</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The following code snippet shows the creation of an autoscale-enabled pool (<bpt id="p1">[</bpt>CloudPool<ph id="ph1">][</ph>net_cloudpool<ept id="p1">]</ept>) by using the <bpt id="p2">[</bpt>Batch .NET<ph id="ph2">][</ph>net_api<ept id="p2">]</ept> library.</source>
          <target state="new">The following code snippet shows the creation of an autoscale-enabled pool (<bpt id="p1">[</bpt>CloudPool<ph id="ph1">][</ph>net_cloudpool<ept id="p1">]</ept>) by using the <bpt id="p2">[</bpt>Batch .NET<ph id="ph2">][</ph>net_api<ept id="p2">]</ept> library.</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The pool's autoscale formula sets the target number of nodes to five on Mondays, and one on every other day of the week.</source>
          <target state="new">The pool's autoscale formula sets the target number of nodes to five on Mondays, and one on every other day of the week.</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>In addition, the automatic scaling interval is set to 30 minutes (see <bpt id="p1">[</bpt>Automatic scaling interval<ept id="p1">](#interval)</ept> below).</source>
          <target state="new">In addition, the automatic scaling interval is set to 30 minutes (see <bpt id="p1">[</bpt>Automatic scaling interval<ept id="p1">](#interval)</ept> below).</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>In this and the other C# snippets in this article, "myBatchClient" is a properly initialized instance of <bpt id="p1">[</bpt>BatchClient<ph id="ph1">][</ph>net_batchclient<ept id="p1">]</ept>.</source>
          <target state="new">In this and the other C# snippets in this article, "myBatchClient" is a properly initialized instance of <bpt id="p1">[</bpt>BatchClient<ph id="ph1">][</ph>net_batchclient<ept id="p1">]</ept>.</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="interval"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Automatic scaling interval</source>
          <target state="new"><ph id="ph1">&lt;a name="interval"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Automatic scaling interval</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>By default, the Batch service adjusts a pool's size according to its autoscale formula every <bpt id="p1">**</bpt>15 minutes<ept id="p1">**</ept>.</source>
          <target state="new">By default, the Batch service adjusts a pool's size according to its autoscale formula every <bpt id="p1">**</bpt>15 minutes<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>This interval is configurable, however, by using the following pool properties:</source>
          <target state="new">This interval is configurable, however, by using the following pool properties:</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>REST API--<bpt id="p1">[</bpt>autoScaleEvaluationInterval<ph id="ph1">][</ph>rest_autoscaleinterval<ept id="p1">]</ept></source>
          <target state="new">REST API--<bpt id="p1">[</bpt>autoScaleEvaluationInterval<ph id="ph1">][</ph>rest_autoscaleinterval<ept id="p1">]</ept></target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>.NET API--<bpt id="p1">[</bpt>CloudPool.AutoScaleEvaluationInterval<ph id="ph1">][</ph>net_cloudpool_autoscaleevalinterval<ept id="p1">]</ept></source>
          <target state="new">.NET API--<bpt id="p1">[</bpt>CloudPool.AutoScaleEvaluationInterval<ph id="ph1">][</ph>net_cloudpool_autoscaleevalinterval<ept id="p1">]</ept></target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The minimum interval is five minutes, and the maximum is 168 hours.</source>
          <target state="new">The minimum interval is five minutes, and the maximum is 168 hours.</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If an interval outside this range is specified, the Batch service will return a Bad Request (400) error.</source>
          <target state="new">If an interval outside this range is specified, the Batch service will return a Bad Request (400) error.</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Autoscaling is not currently intended to respond to changes in less than a minute, but rather is intended to adjust the size of your pool gradually as you run a workload.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Autoscaling is not currently intended to respond to changes in less than a minute, but rather is intended to adjust the size of your pool gradually as you run a workload.</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Enable automatic scaling after a pool is created</source>
          <target state="new">Enable automatic scaling after a pool is created</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>If you've already set up a pool with a specified number of compute nodes by using the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter, you can update the existing pool at a later time to automatically scale.</source>
          <target state="new">If you've already set up a pool with a specified number of compute nodes by using the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter, you can update the existing pool at a later time to automatically scale.</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>You can do this in one of these ways:</source>
          <target state="new">You can do this in one of these ways:</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.EnableAutoScale<ph id="ph1">][</ph>net_enableautoscale<ept id="p1">]</ept>--This .NET method requires the ID of an existing pool and the automatic scaling formula to apply to the pool.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.EnableAutoScale<ph id="ph1">][</ph>net_enableautoscale<ept id="p1">]</ept>--This .NET method requires the ID of an existing pool and the automatic scaling formula to apply to the pool.</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enable automatic scaling on a pool<ph id="ph1">][</ph>rest_enableautoscale<ept id="p1">]</ept>--This REST API request requires the ID of the existing pool in the URI and the automatic scaling formula in the request body.</source>
          <target state="new"><bpt id="p1">[</bpt>Enable automatic scaling on a pool<ph id="ph1">][</ph>rest_enableautoscale<ept id="p1">]</ept>--This REST API request requires the ID of the existing pool in the URI and the automatic scaling formula in the request body.</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If a value was specified for the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter when the pool was created, it is ignored when the automatic scaling formula is evaluated.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If a value was specified for the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter when the pool was created, it is ignored when the automatic scaling formula is evaluated.</target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>This code snippet demonstrates enabling autoscaling on an existing pool by using the <bpt id="p1">[</bpt>Batch .NET<ph id="ph1">][</ph>net_api<ept id="p1">]</ept> library.</source>
          <target state="new">This code snippet demonstrates enabling autoscaling on an existing pool by using the <bpt id="p1">[</bpt>Batch .NET<ph id="ph1">][</ph>net_api<ept id="p1">]</ept> library.</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Note that both enabling and updating the formula on an existing pool use the same method.</source>
          <target state="new">Note that both enabling and updating the formula on an existing pool use the same method.</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>As such, this technique would <bpt id="p1">*</bpt>update<ept id="p1">*</ept> the formula on the specified pool if autoscaling had already been enabled.</source>
          <target state="new">As such, this technique would <bpt id="p1">*</bpt>update<ept id="p1">*</ept> the formula on the specified pool if autoscaling had already been enabled.</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The snippet assumes that "mypool" is the ID of an existing pool (<bpt id="p1">[</bpt>CloudPool<ph id="ph1">][</ph>net_cloudpool<ept id="p1">]</ept>).</source>
          <target state="new">The snippet assumes that "mypool" is the ID of an existing pool (<bpt id="p1">[</bpt>CloudPool<ph id="ph1">][</ph>net_cloudpool<ept id="p1">]</ept>).</target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Evaluate the automatic scaling formula</source>
          <target state="new">Evaluate the automatic scaling formula</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>It’s always a good practice to evaluate a formula before you use it in your application.</source>
          <target state="new">It’s always a good practice to evaluate a formula before you use it in your application.</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>A formula is evaluated by performing a "test run" of the formula on an existing pool.</source>
          <target state="new">A formula is evaluated by performing a "test run" of the formula on an existing pool.</target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Do this by using:</source>
          <target state="new">Do this by using:</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.EvaluateAutoScale<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.evaluateautoscale.aspx)</ept> or <bpt id="p2">[</bpt>BatchClient.PoolOperations.EvaluateAutoScaleAsync<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.evaluateautoscaleasync.aspx)</ept>--These .NET methods require the ID of an existing pool and the string that contains the automatic scaling formula.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.EvaluateAutoScale<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.evaluateautoscale.aspx)</ept> or <bpt id="p2">[</bpt>BatchClient.PoolOperations.EvaluateAutoScaleAsync<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.evaluateautoscaleasync.aspx)</ept>--These .NET methods require the ID of an existing pool and the string that contains the automatic scaling formula.</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The results of the call are contained in an instance of the <bpt id="p1">[</bpt>AutoScaleEvaluation<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.autoscaleevaluation.aspx)</ept> class.</source>
          <target state="new">The results of the call are contained in an instance of the <bpt id="p1">[</bpt>AutoScaleEvaluation<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.autoscaleevaluation.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Evaluate an automatic scaling formula<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820183.aspx)</ept>--In this REST API request, the pool ID is specified in the URI.</source>
          <target state="new"><bpt id="p1">[</bpt>Evaluate an automatic scaling formula<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820183.aspx)</ept>--In this REST API request, the pool ID is specified in the URI.</target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The automatic scaling formula is specified in the <bpt id="p1">*</bpt>autoScaleFormula<ept id="p1">*</ept> element of the request body.</source>
          <target state="new">The automatic scaling formula is specified in the <bpt id="p1">*</bpt>autoScaleFormula<ept id="p1">*</ept> element of the request body.</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The response of the operation contains any error information that might be related to the formula.</source>
          <target state="new">The response of the operation contains any error information that might be related to the formula.</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To evaluate an autoscale formula, you must first have enabled autoscaling on the pool by using a valid formula.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To evaluate an autoscale formula, you must first have enabled autoscaling on the pool by using a valid formula.</target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>In this code snippet that uses the <bpt id="p1">[</bpt>Batch .NET<ph id="ph1">][</ph>net_api<ept id="p1">]</ept> library, we evaluate a formula prior to applying it to the pool (<bpt id="p2">[</bpt>CloudPool<ph id="ph2">][</ph>net_cloudpool<ept id="p2">]</ept>).</source>
          <target state="new">In this code snippet that uses the <bpt id="p1">[</bpt>Batch .NET<ph id="ph1">][</ph>net_api<ept id="p1">]</ept> library, we evaluate a formula prior to applying it to the pool (<bpt id="p2">[</bpt>CloudPool<ph id="ph2">][</ph>net_cloudpool<ept id="p2">]</ept>).</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Successful evaluation of the formula in this snippet will result in output similar to the following:</source>
          <target state="new">Successful evaluation of the formula in this snippet will result in output similar to the following:</target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Obtain information about automatic scaling runs</source>
          <target state="new">Obtain information about automatic scaling runs</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Periodically check the results of automatic scaling runs to ensure that a formula is performing as expected.</source>
          <target state="new">Periodically check the results of automatic scaling runs to ensure that a formula is performing as expected.</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CloudPool.AutoScaleRun<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscalerun.aspx)</ept>--When you use the .NET library, this property of a pool provides an instance of the <bpt id="p2">[</bpt>AutoScaleRun<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.autoscalerun.aspx)</ept> class.</source>
          <target state="new"><bpt id="p1">[</bpt>CloudPool.AutoScaleRun<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscalerun.aspx)</ept>--When you use the .NET library, this property of a pool provides an instance of the <bpt id="p2">[</bpt>AutoScaleRun<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.autoscalerun.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>This class provides the following properties of the latest automatic scaling run:</source>
          <target state="new">This class provides the following properties of the latest automatic scaling run:</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>AutoScaleRun.Error</source>
          <target state="new">AutoScaleRun.Error</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>AutoScaleRun.Results</source>
          <target state="new">AutoScaleRun.Results</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>AutoScaleRun.Timestamp</source>
          <target state="new">AutoScaleRun.Timestamp</target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get information about a pool<ept id="p1">](https://msdn.microsoft.com/library/dn820165.aspx)</ept>--This REST API request returns information about the pool, which includes the latest automatic scaling run.</source>
          <target state="new"><bpt id="p1">[</bpt>Get information about a pool<ept id="p1">](https://msdn.microsoft.com/library/dn820165.aspx)</ept>--This REST API request returns information about the pool, which includes the latest automatic scaling run.</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="examples"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Example formulas</source>
          <target state="new"><ph id="ph1">&lt;a name="examples"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Example formulas</target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Let's take a look at some examples that show just a few ways that formulas can be used to automatically scale compute resources in a pool.</source>
          <target state="new">Let's take a look at some examples that show just a few ways that formulas can be used to automatically scale compute resources in a pool.</target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Example 1: Time-based adjustment</source>
          <target state="new">Example 1: Time-based adjustment</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Perhaps you want to adjust the pool size based on the day of the week and time of day, to increase or decrease the number of nodes in the pool accordingly:</source>
          <target state="new">Perhaps you want to adjust the pool size based on the day of the week and time of day, to increase or decrease the number of nodes in the pool accordingly:</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>This formula first obtains the current time.</source>
          <target state="new">This formula first obtains the current time.</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>If it's a weekday (1-5) and within working hours (8 AM to 6 PM), the target pool size is set to 20 nodes.</source>
          <target state="new">If it's a weekday (1-5) and within working hours (8 AM to 6 PM), the target pool size is set to 20 nodes.</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Otherwise, the pool size is targeted at 10 nodes.</source>
          <target state="new">Otherwise, the pool size is targeted at 10 nodes.</target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Example 2: Task-based adjustment</source>
          <target state="new">Example 2: Task-based adjustment</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>In this example, the pool size is adjusted based on the number of tasks in the queue.</source>
          <target state="new">In this example, the pool size is adjusted based on the number of tasks in the queue.</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Note that both comments and line breaks are acceptable in formula strings.</source>
          <target state="new">Note that both comments and line breaks are acceptable in formula strings.</target>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Example 3: Accounting for parallel tasks</source>
          <target state="new">Example 3: Accounting for parallel tasks</target>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>This is another example that adjusts the pool size based on the number of tasks.</source>
          <target state="new">This is another example that adjusts the pool size based on the number of tasks.</target>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>This formula also takes into account the <bpt id="p1">[</bpt>MaxTasksPerComputeNode<ph id="ph1">][</ph>net_maxtasks<ept id="p1">]</ept> value that has been set for the pool.</source>
          <target state="new">This formula also takes into account the <bpt id="p1">[</bpt>MaxTasksPerComputeNode<ph id="ph1">][</ph>net_maxtasks<ept id="p1">]</ept> value that has been set for the pool.</target>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>This is particularly useful in situations where <bpt id="p1">[</bpt>parallel task execution<ept id="p1">](batch-parallel-node-tasks.md)</ept> has been enabled on your pool.</source>
          <target state="new">This is particularly useful in situations where <bpt id="p1">[</bpt>parallel task execution<ept id="p1">](batch-parallel-node-tasks.md)</ept> has been enabled on your pool.</target>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Example 4: Setting an initial pool size</source>
          <target state="new">Example 4: Setting an initial pool size</target>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>This example shows a C# code snippet with an autoscale formula that sets the pool size to a certain number of nodes for an initial time period.</source>
          <target state="new">This example shows a C# code snippet with an autoscale formula that sets the pool size to a certain number of nodes for an initial time period.</target>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Then it adjusts the pool size based on the number of running and active tasks after the initial time period has elapsed.</source>
          <target state="new">Then it adjusts the pool size based on the number of running and active tasks after the initial time period has elapsed.</target>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The formula in the above code snippet:</source>
          <target state="new">The formula in the above code snippet:</target>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Sets the initial pool size to four nodes.</source>
          <target state="new">Sets the initial pool size to four nodes.</target>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Does not adjust the pool size within the first 10 minutes of the pool's lifecycle.</source>
          <target state="new">Does not adjust the pool size within the first 10 minutes of the pool's lifecycle.</target>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>After 10 minutes, obtains the max value of the number of running and active tasks within the past 60 minutes.</source>
          <target state="new">After 10 minutes, obtains the max value of the number of running and active tasks within the past 60 minutes.</target>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>If both values are 0 (indicating that no tasks were running or active in the last 60 minutes), the pool size is set to 0.</source>
          <target state="new">If both values are 0 (indicating that no tasks were running or active in the last 60 minutes), the pool size is set to 0.</target>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>If either value is greater than zero, no change is made.</source>
          <target state="new">If either value is greater than zero, no change is made.</target>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>To fully assess the efficiency of your application, you might need to access a compute node.</source>
          <target state="new">To fully assess the efficiency of your application, you might need to access a compute node.</target>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>To take advantage of remote access, a user account must be added to the node that you want to access, and a Remote Desktop Protocol (RDP) file must be retrieved for that node.</source>
          <target state="new">To take advantage of remote access, a user account must be added to the node that you want to access, and a Remote Desktop Protocol (RDP) file must be retrieved for that node.</target>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Add the user account in one of these ways:</source>
          <target state="new">Add the user account in one of these ways:</target>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New-AzureBatchVMUser<ept id="p1">](https://msdn.microsoft.com/library/mt149846.aspx)</ept>--This PowerShell cmdlet takes the pool name, compute node name, account name, and password as parameters.</source>
          <target state="new"><bpt id="p1">[</bpt>New-AzureBatchVMUser<ept id="p1">](https://msdn.microsoft.com/library/mt149846.aspx)</ept>--This PowerShell cmdlet takes the pool name, compute node name, account name, and password as parameters.</target>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.CreateComputeNodeUser<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createcomputenodeuser.aspx)</ept>--This .NET method creates an instance of the <bpt id="p2">[</bpt>ComputeNodeUser<ept id="p2">](https://msdn.microsoft.com/library/microsoft.azure.batch.computenodeuser.aspx)</ept> class, on which the account name and password can be set for the compute node.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.CreateComputeNodeUser<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createcomputenodeuser.aspx)</ept>--This .NET method creates an instance of the <bpt id="p2">[</bpt>ComputeNodeUser<ept id="p2">](https://msdn.microsoft.com/library/microsoft.azure.batch.computenodeuser.aspx)</ept> class, on which the account name and password can be set for the compute node.</target>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ComputeNodeUser.Commit<ept id="p1">](https://msdn.microsoft.com/library/microsoft.azure.batch.computenodeuser.commit.aspx)</ept> is then called on the instance to create the user on that node.</source>
          <target state="new"><bpt id="p1">[</bpt>ComputeNodeUser.Commit<ept id="p1">](https://msdn.microsoft.com/library/microsoft.azure.batch.computenodeuser.commit.aspx)</ept> is then called on the instance to create the user on that node.</target>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add a user account to a node<ept id="p1">](https://msdn.microsoft.com/library/dn820137.aspx)</ept>--The name of the pool and the compute node are specified in the URI.</source>
          <target state="new"><bpt id="p1">[</bpt>Add a user account to a node<ept id="p1">](https://msdn.microsoft.com/library/dn820137.aspx)</ept>--The name of the pool and the compute node are specified in the URI.</target>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The account name and password are sent to the node in the request body of this REST API request.</source>
          <target state="new">The account name and password are sent to the node in the request body of this REST API request.</target>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Get the RDP file:</source>
          <target state="new">Get the RDP file:</target>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.GetRDPFile<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.getrdpfile.aspx)</ept>--This .NET method requires the ID of the pool, the node ID, and the name of the RDP file to create.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.GetRDPFile<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.getrdpfile.aspx)</ept>--This .NET method requires the ID of the pool, the node ID, and the name of the RDP file to create.</target>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get a remote desktop protocol file from a node<ept id="p1">](https://msdn.microsoft.com/library/dn820120.aspx)</ept>--This REST API request requires the name of the pool and the name of the compute node.</source>
          <target state="new"><bpt id="p1">[</bpt>Get a remote desktop protocol file from a node<ept id="p1">](https://msdn.microsoft.com/library/dn820120.aspx)</ept>--This REST API request requires the name of the pool and the name of the compute node.</target>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The response contains the contents of the RDP file.</source>
          <target state="new">The response contains the contents of the RDP file.</target>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get-AzureBatchRDPFile<ept id="p1">](https://msdn.microsoft.com/library/mt149851.aspx)</ept>--This PowerShell cmdlet gets the RDP file from the specified compute node and saves it to the specified file location or to a stream.</source>
          <target state="new"><bpt id="p1">[</bpt>Get-AzureBatchRDPFile<ept id="p1">](https://msdn.microsoft.com/library/mt149851.aspx)</ept>--This PowerShell cmdlet gets the RDP file from the specified compute node and saves it to the specified file location or to a stream.</target>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Some applications produce large amounts of data that can be difficult to process.</source>
          <target state="new">Some applications produce large amounts of data that can be difficult to process.</target>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>One way to solve this is through <bpt id="p1">[</bpt>efficient list querying<ept id="p1">](batch-efficient-list-queries.md)</ept>.</source>
          <target state="new">One way to solve this is through <bpt id="p1">[</bpt>efficient list querying<ept id="p1">](batch-efficient-list-queries.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>net_api<ph id="ph2">]: https://msdn.microsoft.com/library/azure/mt348682.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>net_api<ph id="ph2">]: https://msdn.microsoft.com/library/azure/mt348682.aspx</ph></target>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>net_batchclient<ph id="ph2">]: http://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>net_batchclient<ph id="ph2">]: http://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.aspx</ph></target>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>net_cloudpool<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>net_cloudpool<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx</ph></target>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>net_cloudpool_autoscaleformula<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleformula.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>net_cloudpool_autoscaleformula<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleformula.aspx</ph></target>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>net_cloudpool_autoscaleevalinterval<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleevaluationinterval.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>net_cloudpool_autoscaleevalinterval<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleevaluationinterval.aspx</ph></target>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>net_enableautoscale<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.enableautoscale.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>net_enableautoscale<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.enableautoscale.aspx</ph></target>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>net_maxtasks<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.maxtaskspercomputenode.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>net_maxtasks<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.maxtaskspercomputenode.aspx</ph></target>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>net_poolops_resizepool<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.resizepool.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>net_poolops_resizepool<ph id="ph2">]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.resizepool.aspx</ph></target>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>rest_api<ph id="ph2">]: https://msdn.microsoft.com/library/azure/dn820158.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>rest_api<ph id="ph2">]: https://msdn.microsoft.com/library/azure/dn820158.aspx</ph></target>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>rest_autoscaleformula<ph id="ph2">]: https://msdn.microsoft.com/library/azure/dn820173.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>rest_autoscaleformula<ph id="ph2">]: https://msdn.microsoft.com/library/azure/dn820173.aspx</ph></target>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>rest_autoscaleinterval<ph id="ph2">]: https://msdn.microsoft.com/en-us/library/azure/dn820173.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>rest_autoscaleinterval<ph id="ph2">]: https://msdn.microsoft.com/en-us/library/azure/dn820173.aspx</ph></target>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[</ph>rest_enableautoscale<ph id="ph2">]: https://msdn.microsoft.com/library/azure/dn820173.aspx</ph></source>
          <target state="new"><ph id="ph1">[</ph>rest_enableautoscale<ph id="ph2">]: https://msdn.microsoft.com/library/azure/dn820173.aspx</ph></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>