<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ko-kr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f33e1b71d387e12b9baf442cdbf79912961da149</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-708c90d" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ms.ContentId: 347fa279-d588-4094-90ec-8c2fc241f5b6</source>
          <target state="new">ms.ContentId: 347fa279-d588-4094-90ec-8c2fc241f5b6</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>title: Manage Windows Server Containers with Docker</source>
          <target state="new">title: Manage Windows Server Containers with Docker</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Quick Start: Windows Server Containers and Docker</source>
          <target state="new">Quick Start: Windows Server Containers and Docker</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article will walk through the fundamentals of managing windows Server Containers with Docker.</source>
          <target state="new">This article will walk through the fundamentals of managing windows Server Containers with Docker.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Items covered will include creating Windows Server Containers and Windows Server Container Images, removing Windows Server Containers and Container Images and finally deploying an application into a Windows Server Container.</source>
          <target state="new">Items covered will include creating Windows Server Containers and Windows Server Container Images, removing Windows Server Containers and Container Images and finally deploying an application into a Windows Server Container.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The lessons learned in this walkthrough should enable you to begin exploring deployment and management of Windows Server Containers using Docker.</source>
          <target state="new">The lessons learned in this walkthrough should enable you to begin exploring deployment and management of Windows Server Containers using Docker.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Have questions?</source>
          <target state="new">Have questions?</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Ask them on the <bpt id="p1">[</bpt>Windows Containers forum<ept id="p1">](https://social.msdn.microsoft.com/Forums/en-US/home?forum=windowscontainers)</ept>.</source>
          <target state="new">Ask them on the <bpt id="p1">[</bpt>Windows Containers forum<ept id="p1">](https://social.msdn.microsoft.com/Forums/en-US/home?forum=windowscontainers)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> Windows Containers created with PowerShell can not currently be managed with Docker and visa versa.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> Windows Containers created with PowerShell can not currently be managed with Docker and visa versa.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To create containers with PowerShell, see  <bpt id="p1">[</bpt>Quick Start: Windows Server Containers and PowerShell<ept id="p1">](./manage_powershell.md)</ept>.</source>
          <target state="new">To create containers with PowerShell, see  <bpt id="p1">[</bpt>Quick Start: Windows Server Containers and PowerShell<ept id="p1">](./manage_powershell.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you want to know more, <bpt id="p1">[</bpt>read the FAQ<ept id="p1">](../about/faq.md#WhydoIhavetopickbetweenDockerandPowerShellforWindowsServerContainermanagement)</ept>.</source>
          <target state="new">If you want to know more, <bpt id="p1">[</bpt>read the FAQ<ept id="p1">](../about/faq.md#WhydoIhavetopickbetweenDockerandPowerShellforWindowsServerContainermanagement)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In order to complete this walkthrough the following items need to be in place.</source>
          <target state="new">In order to complete this walkthrough the following items need to be in place.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Windows Server 2016 TP3 or later configured with the Windows Server Container Feature.</source>
          <target state="new">Windows Server 2016 TP3 or later configured with the Windows Server Container Feature.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you have completed the setup guide, this is the VM that was created in Azure or Hyper-V.</source>
          <target state="new">If you have completed the setup guide, this is the VM that was created in Azure or Hyper-V.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This system must be connected to a network and able to access the internet.</source>
          <target state="new">This system must be connected to a network and able to access the internet.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you need to configure the container feature, see the following guides: <bpt id="p1">[</bpt>Container Setup in Azure<ept id="p1">](./azure_setup.md)</ept> or <bpt id="p2">[</bpt>Container Setup in Hyper-V<ept id="p2">](./container_setup.md)</ept>.</source>
          <target state="new">If you need to configure the container feature, see the following guides: <bpt id="p1">[</bpt>Container Setup in Azure<ept id="p1">](./azure_setup.md)</ept> or <bpt id="p2">[</bpt>Container Setup in Hyper-V<ept id="p2">](./container_setup.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Basic Container Management with Docker</source>
          <target state="new">Basic Container Management with Docker</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This first example will walk through the basics of creating and removing Windows Server Containers and Windows Server Container Images with Docker.</source>
          <target state="new">This first example will walk through the basics of creating and removing Windows Server Containers and Windows Server Container Images with Docker.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To begin the walk through, log into your Windows Server Container Host System, you will see a Windows command prompt.</source>
          <target state="new">To begin the walk through, log into your Windows Server Container Host System, you will see a Windows command prompt.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Start a PowerShell session by typing <ph id="ph1">`powershell`</ph>.</source>
          <target state="new">Start a PowerShell session by typing <ph id="ph1">`powershell`</ph>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You will know that you are in a PowerShell session when the prompt changes from <ph id="ph1">`C:\directory&gt;`</ph> to <ph id="ph2">`PS C:\directory&gt;`</ph>.</source>
          <target state="new">You will know that you are in a PowerShell session when the prompt changes from <ph id="ph1">`C:\directory&gt;`</ph> to <ph id="ph2">`PS C:\directory&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This quick start will be focused on Docker commands however some steps such as managing firewall rules and copying files will be run with PowerShell commands.</source>
          <target state="new">This quick start will be focused on Docker commands however some steps such as managing firewall rules and copying files will be run with PowerShell commands.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Work through this walkthrough from a PowerShell session.</source>
          <target state="new">Work through this walkthrough from a PowerShell session.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Next make sure that your system has a valid IP Address using <ph id="ph1">`ipconfig`</ph> and take note of this address for later use.</source>
          <target state="new">Next make sure that your system has a valid IP Address using <ph id="ph1">`ipconfig`</ph> and take note of this address for later use.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you are working from an Azure VM instead of using <ph id="ph1">`ipconfig`</ph> you will need to get the public IP address of the Azure Virtual Machine.</source>
          <target state="new">If you are working from an Azure VM instead of using <ph id="ph1">`ipconfig`</ph> you will need to get the public IP address of the Azure Virtual Machine.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Step 1 - Create a New Container</source>
          <target state="new">Step 1 - Create a New Container</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Before creating a Windows Server Container with Docker you will need the name or ID of an exsisitng Windows Server Container image.</source>
          <target state="new">Before creating a Windows Server Container with Docker you will need the name or ID of an exsisitng Windows Server Container image.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To see all images loaded on the container host use the <ph id="ph1">`docker images`</ph> command.</source>
          <target state="new">To see all images loaded on the container host use the <ph id="ph1">`docker images`</ph> command.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Now, use <ph id="ph1">`docker run`</ph> To create a new Windows Server Container.</source>
          <target state="new">Now, use <ph id="ph1">`docker run`</ph> To create a new Windows Server Container.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This command as seen below will instruct the Docker daemon to create a new container named ‘dockerdemo’ from the image ‘windowsservercore’ and open an interactive (-it) console session (cmd) with the container.</source>
          <target state="new">This command as seen below will instruct the Docker daemon to create a new container named ‘dockerdemo’ from the image ‘windowsservercore’ and open an interactive (-it) console session (cmd) with the container.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When the command completes you will be working in a console session on the container.</source>
          <target state="new">When the command completes you will be working in a console session on the container.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Working in a container is almost identical to working with Windows installed on a virtual or physical machine.</source>
          <target state="new">Working in a container is almost identical to working with Windows installed on a virtual or physical machine.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can run commands such as <ph id="ph1">`ipconfig`</ph> to return the IP address of the container, <ph id="ph2">`mkdir`</ph> to create a new directory, or <ph id="ph3">`powershell`</ph> to start a PowerShell session.</source>
          <target state="new">You can run commands such as <ph id="ph1">`ipconfig`</ph> to return the IP address of the container, <ph id="ph2">`mkdir`</ph> to create a new directory, or <ph id="ph3">`powershell`</ph> to start a PowerShell session.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Go ahead and make a change to the container such as creating a file or folder.</source>
          <target state="new">Go ahead and make a change to the container such as creating a file or folder.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the following command will create a file which contains network configuration data about the container.</source>
          <target state="new">For example, the following command will create a file which contains network configuration data about the container.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can read the contents of the file to ensure the command completed successfully.</source>
          <target state="new">You can read the contents of the file to ensure the command completed successfully.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Notice that the IP address contained in the text file matches that of the container.</source>
          <target state="new">Notice that the IP address contained in the text file matches that of the container.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Now that the container has been modified, run the following to stop the console session placing you back in the console session of the container host.</source>
          <target state="new">Now that the container has been modified, run the following to stop the console session placing you back in the console session of the container host.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Finally to see a list of containers on the container host use the <ph id="ph1">`docker ps –a`</ph> command.</source>
          <target state="new">Finally to see a list of containers on the container host use the <ph id="ph1">`docker ps –a`</ph> command.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Notice from the output that a container named 'dockerdemo' has been created.</source>
          <target state="new">Notice from the output that a container named 'dockerdemo' has been created.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Step 2 - Create a New Container Image</source>
          <target state="new">Step 2 - Create a New Container Image</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An image can now be made from this container.</source>
          <target state="new">An image can now be made from this container.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This image will behave like a snapshot of the container and can be re-deployed many times.</source>
          <target state="new">This image will behave like a snapshot of the container and can be re-deployed many times.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To create a new image run the following.</source>
          <target state="new">To create a new image run the following.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This command instructs the Docker engine to create a new image named 'newcontainerimage' that will include all changes made to the 'deckerdemo' container.</source>
          <target state="new">This command instructs the Docker engine to create a new image named 'newcontainerimage' that will include all changes made to the 'deckerdemo' container.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To see all images on the host, run <ph id="ph1">`docker images`</ph>.</source>
          <target state="new">To see all images on the host, run <ph id="ph1">`docker images`</ph>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Notice that a new image has been created with the name 'newcontainerimage'.</source>
          <target state="new">Notice that a new image has been created with the name 'newcontainerimage'.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Step 3 - Create New Container From Image</source>
          <target state="new">Step 3 - Create New Container From Image</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Now that you have a custom container image, deploy a new container named 'newcontainer' from 'newcontainerimage' and open an interactive shell session with the container.</source>
          <target state="new">Now that you have a custom container image, deploy a new container named 'newcontainer' from 'newcontainerimage' and open an interactive shell session with the container.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Take a look at the c:\ drive of this new container and notice that the ipconfig.txt file is present.</source>
          <target state="new">Take a look at the c:\ drive of this new container and notice that the ipconfig.txt file is present.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Exit the newly created container to return to the container hosts console session.</source>
          <target state="new">Exit the newly created container to return to the container hosts console session.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This exercise has shown that an image taken from a modified container will include all modifications.</source>
          <target state="new">This exercise has shown that an image taken from a modified container will include all modifications.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>While the example here was a simple file modification, the same would apply if you were to install software into the container such as a web server.</source>
          <target state="new">While the example here was a simple file modification, the same would apply if you were to install software into the container such as a web server.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Using these methods, custom images can be created that will deploy application ready containers.</source>
          <target state="new">Using these methods, custom images can be created that will deploy application ready containers.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Step 4 - Remove Containers and Images</source>
          <target state="new">Step 4 - Remove Containers and Images</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To remove a container after it is no longer needed use the <ph id="ph1">`docker rm`</ph> command.</source>
          <target state="new">To remove a container after it is no longer needed use the <ph id="ph1">`docker rm`</ph> command.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following command will remove the container name 'newcontainer'.</source>
          <target state="new">The following command will remove the container name 'newcontainer'.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To remove container images when they are no longer needed use the <ph id="ph1">`docker rmi`</ph> command.</source>
          <target state="new">To remove container images when they are no longer needed use the <ph id="ph1">`docker rmi`</ph> command.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You cannot remove an image if it is referenced by an existing container.</source>
          <target state="new">You cannot remove an image if it is referenced by an existing container.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following command removes the container image named 'newcontainerimage'.</source>
          <target state="new">The following command removes the container image named 'newcontainerimage'.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Host a Web Server in a Container</source>
          <target state="new">Host a Web Server in a Container</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This next example will demonstrate a more practical use case for Windows Server Containers.</source>
          <target state="new">This next example will demonstrate a more practical use case for Windows Server Containers.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The steps included in this exercise will guide you through creating a web server container image that can be used for deploying web applications hosted inside of a Windows Server Container.</source>
          <target state="new">The steps included in this exercise will guide you through creating a web server container image that can be used for deploying web applications hosted inside of a Windows Server Container.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Step 1 - Download Web Server Software</source>
          <target state="new">Step 1 - Download Web Server Software</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Before creating a container image the web server software will need to be downloaded and staged on the container host.</source>
          <target state="new">Before creating a container image the web server software will need to be downloaded and staged on the container host.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>We will be using the nginx for Windows software for this example.</source>
          <target state="new">We will be using the nginx for Windows software for this example.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> that this step will require the container host to be connected to the internet.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> that this step will require the container host to be connected to the internet.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If this step produces a connectivity or name resolution error check the network configuration of the container host.</source>
          <target state="new">If this step produces a connectivity or name resolution error check the network configuration of the container host.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Run the following command on the container host to create the directory structure that will be used for this example.</source>
          <target state="new">Run the following command on the container host to create the directory structure that will be used for this example.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Run this command on the container host to download the nginx software to 'c:\nginx-1.9.3.zip'.</source>
          <target state="new">Run this command on the container host to download the nginx software to 'c:\nginx-1.9.3.zip'.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Finally the following command will extract the nginx software to 'C:\build\nginx\source'.</source>
          <target state="new">Finally the following command will extract the nginx software to 'C:\build\nginx\source'.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Step 2 - Create Web Server Image</source>
          <target state="new">Step 2 - Create Web Server Image</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In the previous example, you manually created, updated and captured a container image.</source>
          <target state="new">In the previous example, you manually created, updated and captured a container image.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This example will demonstrate an automated method for creating container images using a Dockerfile.</source>
          <target state="new">This example will demonstrate an automated method for creating container images using a Dockerfile.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Dockerfiles contain instructions that the Docker engine uses to build and modify a container, and then commit the container to a container image.</source>
          <target state="new">Dockerfiles contain instructions that the Docker engine uses to build and modify a container, and then commit the container to a container image.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information on dockerfiles, see <bpt id="p1">[</bpt>Dockerfile reference<ept id="p1">](https://docs.docker.com/reference/builder/)</ept>.</source>
          <target state="new">For more information on dockerfiles, see <bpt id="p1">[</bpt>Dockerfile reference<ept id="p1">](https://docs.docker.com/reference/builder/)</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Use the following command to create an empty dockerfile.</source>
          <target state="new">Use the following command to create an empty dockerfile.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Open the dockerfile with notepad.</source>
          <target state="new">Open the dockerfile with notepad.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Copy and paste the following text into notepad, save the file and close notepad.</source>
          <target state="new">Copy and paste the following text into notepad, save the file and close notepad.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>At this point the dockerfile will be in 'c:\build\nginx' and the nginx software extracted to 'c:\build\nginx\source'.</source>
          <target state="new">At this point the dockerfile will be in 'c:\build\nginx' and the nginx software extracted to 'c:\build\nginx\source'.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You are now ready to build the web server container image based on the instructions in the dockerfile.</source>
          <target state="new">You are now ready to build the web server container image based on the instructions in the dockerfile.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To do this, run the following command on the container host.</source>
          <target state="new">To do this, run the following command on the container host.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This command instructs the docker engine to use the dockerfile located at <ph id="ph1">`C:\build\nginx`</ph> to create an image named 'nginx_windows'.</source>
          <target state="new">This command instructs the docker engine to use the dockerfile located at <ph id="ph1">`C:\build\nginx`</ph> to create an image named 'nginx_windows'.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The output will look similar to this:</source>
          <target state="new">The output will look similar to this:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When completed, take a look at the images on the host using the <ph id="ph1">`docker images`</ph> command.</source>
          <target state="new">When completed, take a look at the images on the host using the <ph id="ph1">`docker images`</ph> command.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You should see a new image named 'nginx_windows'.</source>
          <target state="new">You should see a new image named 'nginx_windows'.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Step 3 – Configure Networking for Container Application</source>
          <target state="new">Step 3 – Configure Networking for Container Application</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Because you will be hosting a website inside of a container a few networking related configurations need to be made.</source>
          <target state="new">Because you will be hosting a website inside of a container a few networking related configurations need to be made.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>First a firewall rule needs to be created on the container host that will allow access to the website.</source>
          <target state="new">First a firewall rule needs to be created on the container host that will allow access to the website.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In this example we will be accessing the site through port 80.</source>
          <target state="new">In this example we will be accessing the site through port 80.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Run the following script to create this firewall rule.</source>
          <target state="new">Run the following script to create this firewall rule.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This script can be copied into the VM.</source>
          <target state="new">This script can be copied into the VM.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Next if you are working from Azure and have not already created a Virtual Machine endpoint you will need to create one now.</source>
          <target state="new">Next if you are working from Azure and have not already created a Virtual Machine endpoint you will need to create one now.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information on Azure VM Endpoints see this article: <bpt id="p1">[</bpt>Set up Azure VM Endpoints<ept id="p1">]( https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-set-up-endpoints/)</ept>.</source>
          <target state="new">For more information on Azure VM Endpoints see this article: <bpt id="p1">[</bpt>Set up Azure VM Endpoints<ept id="p1">]( https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-set-up-endpoints/)</ept>.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Step 4 - Deploy Web Server Ready Container</source>
          <target state="new">Step 4 - Deploy Web Server Ready Container</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To deploy a Windows Server Container based off of the 'nginx_windows' container run the following command.</source>
          <target state="new">To deploy a Windows Server Container based off of the 'nginx_windows' container run the following command.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This will create a new container named 'nginxcontainer' and start an console session on the container.</source>
          <target state="new">This will create a new container named 'nginxcontainer' and start an console session on the container.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The –p 80:80 portion of this command creates a port mapping between port 80 on the host to port 80 on the container.</source>
          <target state="new">The –p 80:80 portion of this command creates a port mapping between port 80 on the host to port 80 on the container.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Once working inside the container, the nginx web server can be started and web content staged.</source>
          <target state="new">Once working inside the container, the nginx web server can be started and web content staged.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>To start the nginx web server, change to the nginx installation directory.</source>
          <target state="new">To start the nginx web server, change to the nginx installation directory.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Start the nginx web server.</source>
          <target state="new">Start the nginx web server.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Step 5 – Access the Container Hosted Website</source>
          <target state="new">Step 5 – Access the Container Hosted Website</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>With the web server container created, you can now checkout the application hosted in the container.</source>
          <target state="new">With the web server container created, you can now checkout the application hosted in the container.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To do so, open up a browser on different machine and enter <ph id="ph1">`http://containerhost-ipaddress`</ph>.</source>
          <target state="new">To do so, open up a browser on different machine and enter <ph id="ph1">`http://containerhost-ipaddress`</ph>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Notice here that you will be browsing to the IP Address of the Container Host and not the container itself.</source>
          <target state="new">Notice here that you will be browsing to the IP Address of the Container Host and not the container itself.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you are working from an Azure Virtual Machine this will be the public IP address or Cloud Service name.</source>
          <target state="new">If you are working from an Azure Virtual Machine this will be the public IP address or Cloud Service name.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If everything has been correctly configured, you will see the nginx welcome page.</source>
          <target state="new">If everything has been correctly configured, you will see the nginx welcome page.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>At this point, feel free to update the website.</source>
          <target state="new">At this point, feel free to update the website.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Copy in your own sample website, or run the following command in the container to replace the nginx welcome page with a ‘Hello World’ web page.</source>
          <target state="new">Copy in your own sample website, or run the following command in the container to replace the nginx welcome page with a ‘Hello World’ web page.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>After the website has been updated, navigate back to <ph id="ph1">`http://containerhost-ipaddress`</ph>.</source>
          <target state="new">After the website has been updated, navigate back to <ph id="ph1">`http://containerhost-ipaddress`</ph>.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> If you would like to change the Docker Daemon settings (such as to change the port it listens to, to connect to a container remotely), you will need to edit the file "C:\ProgramData\docker\runDockerDaemon.cmd" in the container, and then you will need to restart the service with PowerShell, using <ph id="ph1">```Restart-Service docker```</ph>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> If you would like to change the Docker Daemon settings (such as to change the port it listens to, to connect to a container remotely), you will need to edit the file "C:\ProgramData\docker\runDockerDaemon.cmd" in the container, and then you will need to restart the service with PowerShell, using <ph id="ph1">```Restart-Service docker```</ph>.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Video Walkthrough</source>
          <target state="new">Video Walkthrough</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Now that you have containers set up and an introduction to the tools, go build your own containerized apps.</source>
          <target state="new">Now that you have containers set up and an introduction to the tools, go build your own containerized apps.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Remember, this is a <bpt id="p1">**</bpt>preview<ept id="p1">**</ept> there are bugs and we have a lot of work in progress.</source>
          <target state="new">Remember, this is a <bpt id="p1">**</bpt>preview<ept id="p1">**</ept> there are bugs and we have a lot of work in progress.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>This page<ept id="p1">](../about/work_in_progress.md)</ept> contains many of our known issues.</source>
          <target state="new"><bpt id="p1">[</bpt>This page<ept id="p1">](../about/work_in_progress.md)</ept> contains many of our known issues.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Be aware that there are some known Docker commands that <bpt id="p1">[</bpt>don't work<ept id="p1">](../about/work_in_progress.md#DockermanagementDockercommandsthatdontworkwithWindowsServerContainers)</ept> and some that only <bpt id="p2">[</bpt>partially work<ept id="p2">](../about/work_in_progress.md#DockermanagementDockercommandsthatpartiallyworkwithWindowsServerContainers)</ept></source>
          <target state="new">Be aware that there are some known Docker commands that <bpt id="p1">[</bpt>don't work<ept id="p1">](../about/work_in_progress.md#DockermanagementDockercommandsthatdontworkwithWindowsServerContainers)</ept> and some that only <bpt id="p2">[</bpt>partially work<ept id="p2">](../about/work_in_progress.md#DockermanagementDockercommandsthatpartiallyworkwithWindowsServerContainers)</ept></target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>We are also monitoring the <bpt id="p1">[</bpt>forums<ept id="p1">](https://social.msdn.microsoft.com/Forums/en-US/home?forum=windowscontainers)</ept> very closely.</source>
          <target state="new">We are also monitoring the <bpt id="p1">[</bpt>forums<ept id="p1">](https://social.msdn.microsoft.com/Forums/en-US/home?forum=windowscontainers)</ept> very closely.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>There are also pre-made samples on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/Microsoft/Virtualization-Documentation/tree/master/windows-server-container-samples)</ept>.</source>
          <target state="new">There are also pre-made samples on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/Microsoft/Virtualization-Documentation/tree/master/windows-server-container-samples)</ept>.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to Container Home<ept id="p1">](../containers_welcome.md)</ept><ph id="ph1"> </ph></source>
          <target state="new"><bpt id="p1">[</bpt>Back to Container Home<ept id="p1">](../containers_welcome.md)</ept><ph id="ph1"> </ph></target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Known Issues for Current Release</source>
          <target state="new">Known Issues for Current Release</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>