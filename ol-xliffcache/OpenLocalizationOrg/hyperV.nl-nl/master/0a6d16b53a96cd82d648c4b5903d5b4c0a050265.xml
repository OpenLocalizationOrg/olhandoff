{
  "nodes": [
    {
      "content": "Using SCIM to enable automatic provisioning of users and groups from Azure Active Directory to applications | Microsoft Azure",
      "pos": [
        27,
        152
      ]
    },
    {
      "content": "Azure Active Directory can automatically provision users and groups to any application or identity store that is fronted by a Web service with the interface defined in the SCIM protocol specification",
      "pos": [
        171,
        370
      ]
    },
    {
      "content": "Using SCIM to enable automatic provisioning of users and groups from Azure Active Directory to applications",
      "pos": [
        691,
        798
      ]
    },
    {
      "content": "Overview",
      "pos": [
        802,
        810
      ]
    },
    {
      "content": "Azure Active Directory can automatically provision users and groups to any application or identity store that is fronted by a Web service with the interface defined in the <bpt id=\"p1\">[</bpt>SCIM 2.0 protocol specification<ept id=\"p1\">](https://tools.ietf.org/html/draft-ietf-scim-api-19)</ept>.",
      "pos": [
        812,
        1070
      ]
    },
    {
      "content": "Azure Active Directory can send requests to create, modify and delete assigned users and groups to this Web service, which can then translate those requests into operations upon the target identity store.",
      "pos": [
        1071,
        1275
      ]
    },
    {
      "content": "Figure: Provisioning from Azure Active Directory to an identity store via a Web service",
      "pos": [
        1286,
        1373
      ]
    },
    {
      "pos": [
        1376,
        1736
      ],
      "content": "This capability can be used in conjunction with the “<bpt id=\"p1\">[</bpt>bring your own app<ept id=\"p1\">](http://blogs.technet.com/b/ad/archive/2015/06/17/bring-your-own-app-with-azure-ad-self-service-saml-configuration-gt-now-in-preview.aspx)</ept>” capability in Azure AD to enable single sign-on and automatic user provisioning for applications that provide or are fronted by a SCIM web service."
    },
    {
      "content": "There are two use cases for SCIM in Azure Active Directory:",
      "pos": [
        1738,
        1797
      ]
    },
    {
      "pos": [
        1801,
        2006
      ],
      "content": "<bpt id=\"p1\">**</bpt>Provisioning users and groups to applications that support SCIM<ept id=\"p1\">**</ept> - Applications that support SCIM 2.0 and are capable of accepting an OAuth bearer token from Azure AD will work with Azure AD of the box."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Build your own provisioning solution for applications that support other API-based provisioning<ept id=\"p1\">**</ept> - For non-SCIM applications, you can create a SCIM endpoint to translate between Azure AD’s SCIM endpoint and whatever API the application supports for user provisioning.",
      "pos": [
        2010,
        2280
      ]
    },
    {
      "content": "To aid in the development of a SCIM endpoint, we provide CLI libraries along with code samples that show you how to do provide a SCIM endpoint and translate SCIM messages.",
      "pos": [
        2282,
        2453
      ]
    },
    {
      "content": "Provisioning Users and Groups To Applications That Support SCIM",
      "pos": [
        2459,
        2522
      ]
    },
    {
      "content": "Azure Active Directory can be configured to automatically provision assigned users and groups to applications that implement a <bpt id=\"p1\">[</bpt>System for Cross-domain Identity Management 2 (SCIM)<ept id=\"p1\">](https://tools.ietf.org/html/draft-ietf-scim-api-19)</ept> Web service and accept OAuth bearer tokens for authentication.",
      "pos": [
        2524,
        2820
      ]
    },
    {
      "content": "Within the SCIM 2.0 specification, applications must meet these requirements:",
      "pos": [
        2821,
        2898
      ]
    },
    {
      "content": "Supports creating users and/or groups, as per section 3.3 of the SCIM protocol.",
      "pos": [
        2902,
        2981
      ]
    },
    {
      "content": "Supports modifying users and/or groups with patch requests as per section 3.5.2 of the SCIM protocol.",
      "pos": [
        2987,
        3088
      ]
    },
    {
      "content": "Supports retrieving a known resource as per section 3.4.1 of the SCIM protocol.",
      "pos": [
        3094,
        3173
      ]
    },
    {
      "content": "Supports querying users and/or groups, as per section 3.4.2 of the SCIM protocol.",
      "pos": [
        3180,
        3261
      ]
    },
    {
      "content": "By default, users are queried by externalId and groups are queried by displayName.",
      "pos": [
        3263,
        3345
      ]
    },
    {
      "content": "Supports querying user by ID and by manager as per section 3.4.2 of the SCIM protocol.",
      "pos": [
        3351,
        3437
      ]
    },
    {
      "content": "Supports querying groups by ID and by member as per section 3.4.2 of the SCIM protocol.",
      "pos": [
        3443,
        3530
      ]
    },
    {
      "content": "Accepts OAuth bearer tokens for authorization as per section 2.1 of the SCIM protocol.",
      "pos": [
        3536,
        3622
      ]
    },
    {
      "content": "Supports using Azure AD as the identity provider for the OAuth token (support for external identity providers coming soon)",
      "pos": [
        3628,
        3750
      ]
    },
    {
      "content": "You should check with your application provider, or your application provider's documentation for statements of compatibility with these requirements.",
      "pos": [
        3752,
        3902
      ]
    },
    {
      "content": "Getting Started",
      "pos": [
        3908,
        3923
      ]
    },
    {
      "content": "Applications that support the SCIM profile described above can be connected to Azure Active Directory using the \"custom\" app feature in the Azure AD application gallery.",
      "pos": [
        3925,
        4094
      ]
    },
    {
      "content": "Once connected, Azure AD runs a synchronization process every 5 minutes where it queries the application's SCIM endpoint for assigned users and groups, and creates or modifies them according to the assignment details.",
      "pos": [
        4095,
        4312
      ]
    },
    {
      "content": "To connect an applicaiton that supports SCIM:",
      "pos": [
        4316,
        4361
      ]
    },
    {
      "content": "In a web browser, launch the Azure management portal at https://manage.windowsazure.com.",
      "pos": [
        4369,
        4457
      ]
    },
    {
      "pos": [
        4462,
        4597
      ],
      "content": "Browse to <bpt id=\"p1\">**</bpt>Active Directory &gt; Directory &gt; [Your Directory] &gt; Applications<ept id=\"p1\">**</ept>, and select <bpt id=\"p2\">**</bpt>Add &gt; Add an application from the gallery<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        4602,
        4729
      ],
      "content": "Select the <bpt id=\"p1\">**</bpt>Custom<ept id=\"p1\">**</ept> tab on the left, enter a name for your application, and click the checkmark icon to create an app object."
    },
    {
      "pos": [
        4743,
        4828
      ],
      "content": "In the resulting screen, select the second <bpt id=\"p1\">**</bpt>Configure account provisioning<ept id=\"p1\">**</ept> button."
    },
    {
      "content": "In the dialog, enter the URL of the application's SCIM endpoin.",
      "pos": [
        4833,
        4896
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>, and click on the <bpt id=\"p2\">**</bpt>Start Test<ept id=\"p2\">**</ept> button to have Azure Active Directory attempt to connect to the SCIM endpoint.",
      "pos": [
        4903,
        5029
      ]
    },
    {
      "content": "If the attempts fail, diagnostic information will be displayed.",
      "pos": [
        5030,
        5093
      ]
    },
    {
      "pos": [
        5100,
        5243
      ],
      "content": "If the attempts to connect to the application succeed, then click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept> on the remaining screens, and click <bpt id=\"p2\">**</bpt>Complete<ept id=\"p2\">**</ept> to exit the dialog."
    },
    {
      "content": "In the resulting screen, select the third <bpt id=\"p1\">**</bpt>Assign Accounts<ept id=\"p1\">**</ept> button.",
      "pos": [
        5248,
        5317
      ]
    },
    {
      "content": "In the resulting Users and Groups section, assign the users or groups you want to provision to the application.",
      "pos": [
        5318,
        5429
      ]
    },
    {
      "pos": [
        5434,
        5525
      ],
      "content": "Once users and groups are assigned, click the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab near the top of the screen."
    },
    {
      "pos": [
        5530,
        5599
      ],
      "content": "Under <bpt id=\"p1\">**</bpt>Account Provisioning<ept id=\"p1\">**</ept>, confirm that the Status is set to On."
    },
    {
      "pos": [
        5605,
        5700
      ],
      "content": "Under <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Restart account provisioning<ept id=\"p2\">**</ept> to kick-start the provisioning process."
    },
    {
      "content": "Note that 5-10 minutes may elapse before the provisioning process will begin to send requests to the SCIM endpoint.",
      "pos": [
        5702,
        5817
      ]
    },
    {
      "content": "A summary of connection attempts is provided on the application’s Dashboard tab, and both a report of provisioning activity and any provisioning errors can be downloaded from the directory’s Reports tab.",
      "pos": [
        5819,
        6022
      ]
    },
    {
      "content": "Building Your Own Provisioning Solution For Any Application",
      "pos": [
        6026,
        6085
      ]
    },
    {
      "content": "By creating a SCIM web service that interfaces with Azure Active Directory, you can enable single sign-on and automatic user provisioning for virtually any application that provides a REST or SOAP user provisioning API.",
      "pos": [
        6087,
        6306
      ]
    },
    {
      "content": "Here’s how it works:",
      "pos": [
        6308,
        6328
      ]
    },
    {
      "content": "Azure AD provides a common language infrastructure library named <bpt id=\"p1\">[</bpt>Microsoft.SystemForCrossDomainIdentityManagement<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.SystemForCrossDomainIdentityManagement/)</ept>.",
      "pos": [
        6334,
        6532
      ]
    },
    {
      "content": "System integrators and developers can use this library to create and deploy a SCIM-based web service endpoint capable of connecting Azure AD to any application’s identity store.",
      "pos": [
        6533,
        6710
      ]
    },
    {
      "content": "Mappings are implemented in the web service to map the standardized user schema to the user schema and protocol required by the application.",
      "pos": [
        6715,
        6855
      ]
    },
    {
      "content": "The endpoint URL is registered in Azure AD as part of a custom application in the application gallery.",
      "pos": [
        6860,
        6962
      ]
    },
    {
      "content": "Users and groups are assigned to this application in Azure AD.",
      "pos": [
        6967,
        7029
      ]
    },
    {
      "content": "Upon assignment, they are put into a queue to be synchronized to the target application.",
      "pos": [
        7030,
        7118
      ]
    },
    {
      "content": "The synchronization process handling the queue runs every 5 minutes.",
      "pos": [
        7119,
        7187
      ]
    },
    {
      "content": "Code Samples",
      "pos": [
        7192,
        7204
      ]
    },
    {
      "content": "To make this process easier, a set of <bpt id=\"p1\">[</bpt>code samples<ept id=\"p1\">](https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master)</ept> are provided that create a SCIM web service endpoint and demonstrate automatic provisioning.",
      "pos": [
        7206,
        7423
      ]
    },
    {
      "content": "One sample is of a provider that maintains a file with rows of comma-separated values representing users and groups.",
      "pos": [
        7424,
        7540
      ]
    },
    {
      "content": "The other is of a provider that operates on the Amazon Web Services Identity and Access Management service.",
      "pos": [
        7542,
        7649
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        7655,
        7668
      ]
    },
    {
      "content": "Visual Studio 2013 or later",
      "pos": [
        7674,
        7701
      ]
    },
    {
      "content": "Azure SDK for .NET",
      "pos": [
        7705,
        7723
      ]
    },
    {
      "content": "Windows machine that supports the ASP.NET framework 4.5 to be used as the SCIM endpoint.",
      "pos": [
        7767,
        7855
      ]
    },
    {
      "content": "This machine must be accessible from the cloud",
      "pos": [
        7856,
        7902
      ]
    },
    {
      "content": "An Azure subscription with a trial or licensed version of Azure AD Premium",
      "pos": [
        7906,
        7980
      ]
    },
    {
      "content": "The Amazon AWS sample requires libraries from the <bpt id=\"p1\">[</bpt>AWS Toolkit for Visual Studio<ept id=\"p1\">](http://docs.aws.amazon.com/AWSToolkitVS/latest/UserGuide/tkv_setup.html)</ept>.",
      "pos": [
        8040,
        8195
      ]
    },
    {
      "content": "See the README file included with the sample for additional details",
      "pos": [
        8196,
        8263
      ]
    },
    {
      "content": "Getting Started",
      "pos": [
        8268,
        8283
      ]
    },
    {
      "content": "The easiest way to implement a SCIM endpoint that can accept provisioning requests from Azure AD is to build and deploy the code sample that outputs the provisioned users to a comma-separated value (CSV) file.",
      "pos": [
        8285,
        8494
      ]
    },
    {
      "content": "To create a sample SCIM endpoint:",
      "pos": [
        8498,
        8531
      ]
    },
    {
      "pos": [
        8539,
        8719
      ],
      "content": "Download the code sample package at <bpt id=\"p1\">[</bpt>https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master<ept id=\"p1\">](https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master)</ept>"
    },
    {
      "content": "Unzip the package and place it on your Windows machine at a location such as C:\\AzureAD-BYOA-Provisioning-Samples\\.",
      "pos": [
        8724,
        8839
      ]
    },
    {
      "content": "In this folder, launch the FileProvisioningAgent solution in Visual Studio.",
      "pos": [
        8844,
        8919
      ]
    },
    {
      "pos": [
        8924,
        9098
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>Tools &gt; Library Package Manager &gt; Package Manager Console<ept id=\"p1\">**</ept>, and execute the commands below for the FileProvisioningAgent project to resolve the solution references:"
    },
    {
      "pos": [
        9104,
        9333
      ],
      "content": "Install-Package Microsoft.SystemForCrossDomainIdentityManagement\nInstall-Package Microsoft.IdentityModel.Clients.ActiveDirectory\nInstall-Package Microsoft.Owin.Diagnostics\nInstall-Package Microsoft.Owin.Host.SystemWeb",
      "leadings": [
        "",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Install-Package Microsoft.SystemForCrossDomainIdentityManagement",
          "pos": [
            0,
            64
          ]
        },
        {
          "content": "Install-Package Microsoft.IdentityModel.Clients.ActiveDirectory",
          "pos": [
            65,
            128
          ]
        },
        {
          "content": "Install-Package Microsoft.Owin.Diagnostics",
          "pos": [
            129,
            171
          ]
        },
        {
          "content": "Install-Package Microsoft.Owin.Host.SystemWeb",
          "pos": [
            172,
            217
          ]
        }
      ]
    },
    {
      "content": "Build the FileProvisioningAgent project.",
      "pos": [
        9339,
        9379
      ]
    },
    {
      "pos": [
        9384,
        9589
      ],
      "content": "Launch the Command Prompt application in Windows (as an Administrator), and use the <bpt id=\"p1\">**</bpt>cd<ept id=\"p1\">**</ept> command to change the directory to your <bpt id=\"p2\">**</bpt>\\AzureAD-BYOA-Provisioning-Samples\\ProvisioningAgent\\bin\\Debug<ept id=\"p2\">**</ept> folder."
    },
    {
      "content": "Run the command below, replacing &lt;ip-address&gt; with the IP or domain name of the Windows Machine.",
      "pos": [
        9594,
        9690
      ]
    },
    {
      "content": "FileAgnt.exe http://&lt;ip-address&gt;:9000 TargetFile.csv",
      "pos": [
        9696,
        9748
      ]
    },
    {
      "pos": [
        9754,
        9947
      ],
      "content": "In Windows under <bpt id=\"p1\">**</bpt>Windows Settings &gt; Network &amp; Internet Settings<ept id=\"p1\">**</ept>, select the <bpt id=\"p2\">**</bpt>Windows Firewall &gt; Advanced Settings<ept id=\"p2\">**</ept>, and create an <bpt id=\"p3\">**</bpt>Inbound Rule<ept id=\"p3\">**</ept> that allows inbound access to port 9000."
    },
    {
      "content": "If the Windows machine is behind a router, the router will need to be configured to perform Network Access Translation between its port 9000 that is exposed to the internet, and port 9000 on the Windows machine.",
      "pos": [
        9952,
        10163
      ]
    },
    {
      "content": "This is required for Azure AD to be able to access this endpoint in the cloud.",
      "pos": [
        10164,
        10242
      ]
    },
    {
      "content": "To register the sample SCIM endpoint in Azure AD:",
      "pos": [
        10247,
        10296
      ]
    },
    {
      "content": "In a web browser, launch the Azure management portal at https://manage.windowsazure.com.",
      "pos": [
        10304,
        10392
      ]
    },
    {
      "pos": [
        10397,
        10532
      ],
      "content": "Browse to <bpt id=\"p1\">**</bpt>Active Directory &gt; Directory &gt; [Your Directory] &gt; Applications<ept id=\"p1\">**</ept>, and select <bpt id=\"p2\">**</bpt>Add &gt; Add an application from the gallery<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Select the <bpt id=\"p1\">**</bpt>Custom<ept id=\"p1\">**</ept> tab on the left, enter a name such as “SCIM Test App”, and click the checkmark icon to create an app object.",
      "pos": [
        10537,
        10667
      ]
    },
    {
      "content": "Note that the application object created is intend to represent the target app you would be provisioning to and implementing single sign-on for, and not just the SCIM endpoint.",
      "pos": [
        10668,
        10844
      ]
    },
    {
      "pos": [
        10858,
        10943
      ],
      "content": "In the resulting screen, select the second <bpt id=\"p1\">**</bpt>Configure account provisioning<ept id=\"p1\">**</ept> button."
    },
    {
      "content": "In the dialog, enter the internet-exposed URL and port of your SCIM endpoint.",
      "pos": [
        10948,
        11025
      ]
    },
    {
      "content": "This would be something like http://testmachine.contoso.com:9000 or http://&lt;ip-address&gt;:9000/, where &lt;ip-address&gt; is the internet exposed IP address.",
      "pos": [
        11026,
        11175
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>, and click on the <bpt id=\"p2\">**</bpt>Start Test<ept id=\"p2\">**</ept> button to have Azure Active Directory attempt to connect to the SCIM endpoint.",
      "pos": [
        11182,
        11308
      ]
    },
    {
      "content": "If the attempts fail, diagnostic information will be displayed.",
      "pos": [
        11309,
        11372
      ]
    },
    {
      "pos": [
        11379,
        11523
      ],
      "content": "If the attempts to connect to your Web service succeed, then click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept> on the remaining screens, and click <bpt id=\"p2\">**</bpt>Complete<ept id=\"p2\">**</ept> to exit the dialog."
    },
    {
      "content": "In the resulting screen, select the third <bpt id=\"p1\">**</bpt>Assign Accounts<ept id=\"p1\">**</ept> button.",
      "pos": [
        11528,
        11597
      ]
    },
    {
      "content": "In the resulting Users and Groups section, assign the users or groups you want to provision to the application.",
      "pos": [
        11598,
        11709
      ]
    },
    {
      "pos": [
        11714,
        11805
      ],
      "content": "Once users and groups are assigned, click the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab near the top of the screen."
    },
    {
      "pos": [
        11810,
        11879
      ],
      "content": "Under <bpt id=\"p1\">**</bpt>Account Provisioning<ept id=\"p1\">**</ept>, confirm that the Status is set to On."
    },
    {
      "pos": [
        11885,
        11980
      ],
      "content": "Under <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Restart account provisioning<ept id=\"p2\">**</ept> to kick-start the provisioning process."
    },
    {
      "content": "Note that 5-10 minutes may elapse before the provisioning process will begin to send requests to the SCIM endpoint.",
      "pos": [
        11982,
        12097
      ]
    },
    {
      "content": "A summary of connection attempts is provided on the application’s Dashboard tab, and both a report of provisioning activity and any provisioning errors can be downloaded from the directory’s Reports tab.",
      "pos": [
        12099,
        12302
      ]
    },
    {
      "content": "The final step in verifying the sample is to open the TargetFile.csv file in the \\AzureAD-BYOA-Provisioning-Samples\\ProvisioningAgent\\bin\\Debug folder on your Windows machine.",
      "pos": [
        12304,
        12479
      ]
    },
    {
      "content": "Once the provisioning process is run, this file shows the details of all assigned and provisioned users and groups.",
      "pos": [
        12480,
        12595
      ]
    },
    {
      "content": "Development Libraries",
      "pos": [
        12600,
        12621
      ]
    },
    {
      "content": "To develop your own Web service that conforms to the SCIM specification, first familiarize yourself with the following libraries provided by Microsoft to help accelerate the development process:",
      "pos": [
        12623,
        12817
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>1:<ept id=\"p1\">**</ept>  Common Language Infrastructure libraries are offered for use with languages based on that infrastructure, such as C#.",
      "pos": [
        12820,
        12945
      ]
    },
    {
      "content": "One of those libraries, <bpt id=\"p1\">[</bpt>Microsoft.SystemForCrossDomainIdentityManagement.Service<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.SystemForCrossDomainIdentityManagement/)</ept>, declares an interface, Microsoft.SystemForCrossDomainIdentityManagement.IProvider, shown in the figure below.",
      "pos": [
        12947,
        13222
      ]
    },
    {
      "content": "A developer using the libraries would implement that interface with a class that may be referred to, generically, as a provider.",
      "pos": [
        13224,
        13352
      ]
    },
    {
      "content": "The libraries enable the developer to easily deploy a Web service that conforms to the SCIM specification, either hosted within Internet Information Services, or any executable Common Language Infrastructure assembly.",
      "pos": [
        13354,
        13571
      ]
    },
    {
      "content": "Requests to that Web service will be translated into calls to the provider’s methods, which would be programmed by the developer to operate on some identity store.",
      "pos": [
        13573,
        13736
      ]
    },
    {
      "pos": [
        13750,
        13963
      ],
      "content": "<bpt id=\"p1\">**</bpt>2:<ept id=\"p1\">**</ept>  <bpt id=\"p2\">[</bpt>Express route handlers<ept id=\"p2\">](http://expressjs.com/guide/routing.html)</ept> are available for parsing node.js request objects representing calls (as defined by the SCIM specification), made to a node.js Web service."
    },
    {
      "content": "Building a Custom SCIM Endpoint",
      "pos": [
        13971,
        14002
      ]
    },
    {
      "content": "Using the libraries described above, developers using those libraries can host their services within any executable Common Language Infrastructure assembly, or within Internet Information Services.",
      "pos": [
        14004,
        14201
      ]
    },
    {
      "content": "Here is sample code for hosting a service within an executable assembly, at the address http://localhost:9000:",
      "pos": [
        14203,
        14313
      ]
    },
    {
      "content": "It is important to note that this service must have an HTTP address and server authentication certificate of which the root certification authority is one of the following:",
      "pos": [
        16215,
        16387
      ]
    },
    {
      "content": "CNNIC",
      "pos": [
        16392,
        16397
      ]
    },
    {
      "content": "Comodo",
      "pos": [
        16400,
        16406
      ]
    },
    {
      "content": "CyberTrust",
      "pos": [
        16409,
        16419
      ]
    },
    {
      "content": "DigiCert",
      "pos": [
        16422,
        16430
      ]
    },
    {
      "content": "GeoTrust",
      "pos": [
        16433,
        16441
      ]
    },
    {
      "content": "GlobalSign",
      "pos": [
        16444,
        16454
      ]
    },
    {
      "content": "Go Daddy",
      "pos": [
        16457,
        16465
      ]
    },
    {
      "content": "Verisign",
      "pos": [
        16468,
        16476
      ]
    },
    {
      "content": "WoSign",
      "pos": [
        16479,
        16485
      ]
    },
    {
      "content": "A server authentication certificate can be bound to a port on a Windows host using the network shell utility, like so:",
      "pos": [
        16487,
        16605
      ]
    },
    {
      "content": "Here, the value provided for the certhash argument is the thumbprint of the certificate, while the value provided for the appid argument is an arbitrary globally-unique identifier.",
      "pos": [
        16751,
        16931
      ]
    },
    {
      "content": "To host the service within Internet Information Services, a developer would build a Common Language Infrastructure code library assembly with a class named Startup in the default namespace of the assembly.",
      "pos": [
        16935,
        17140
      ]
    },
    {
      "content": "Here is a sample of such a class:",
      "pos": [
        17142,
        17175
      ]
    },
    {
      "content": "Handling Endpoint Authentication",
      "pos": [
        18185,
        18217
      ]
    },
    {
      "content": "Requests from Azure Active Directory include an OAuth 2.0 bearer token.",
      "pos": [
        18219,
        18290
      ]
    },
    {
      "content": "Any service receiving the request should authenticate the issuer as being Azure Active Directory on behalf of the expected Azure Active Directory tenant, for access to Azure Active Directory’s Graph Web service.",
      "pos": [
        18293,
        18504
      ]
    },
    {
      "content": "In the token, the issuer is identified by an iss claim, like, \"iss\":\"https://sts.windows.net/cbb1a5ac-f33b-45fa-9bf5-f37db0fed422/\".",
      "pos": [
        18506,
        18638
      ]
    },
    {
      "content": "In this example, the base address of the claim value, https://sts.windows.net, identifies Azure Active Directory as the issuer, while the relative address segment, cbb1a5ac-f33b-45fa-9bf5-f37db0fed422, is a unique identifier of the Azure Active Directory tenant on behalf of which the token was issued.",
      "pos": [
        18640,
        18942
      ]
    },
    {
      "content": "If the token was issued for accessing the Azure Active Directory’s Graph Web service, then the identifier of that service, 00000002-0000-0000-c000-000000000000, should be in the value of the token’s aud claim.",
      "pos": [
        18944,
        19153
      ]
    },
    {
      "content": "Developers using the Common Language Infrastructure libraries provided by Microsoft for building a SCIM service can authenticate requests from Azure Active Directory using the Microsoft.Owin.Security.ActiveDirectory package by following these steps:",
      "pos": [
        19157,
        19406
      ]
    },
    {
      "pos": [
        19409,
        19604
      ],
      "content": "<bpt id=\"p1\">**</bpt>1:<ept id=\"p1\">**</ept>  In a provider, implement the Microsoft.SystemForCrossDomainIdentityManagement.IProvider.StartupBehavior property by having it return a method to be called whenever the service is started:"
    },
    {
      "pos": [
        20011,
        20267
      ],
      "content": "<bpt id=\"p1\">**</bpt>2:<ept id=\"p1\">**</ept>  Add the following code to that method to have any request to any of the service’s endpoints authenticated as bearing a token issued by Azure Active Directory on behalf of a specified tenant, for access to Azure Active Directory’s Graph Web service:"
    },
    {
      "content": "User and Group Schema",
      "pos": [
        21751,
        21772
      ]
    },
    {
      "content": "Azure Active Directory can provision two types of resources to SCIM Web Services.",
      "pos": [
        21774,
        21855
      ]
    },
    {
      "content": "Those types of resources are users and groups.",
      "pos": [
        21857,
        21903
      ]
    },
    {
      "content": "User resources are identified by the schema identifier, urn:ietf:params:scim:schemas:extension:enterprise:2.0:User, which is included in this protocol specification: http://tools.ietf.org/html/draft-ietf-scim-core-schema.",
      "pos": [
        21907,
        22128
      ]
    },
    {
      "content": "The default mapping of the attributes of users in Azure Active Directory to the attributes of urn:ietf:params:scim:schemas:extension:enterprise:2.0:User resources is provided in table 1, below.",
      "pos": [
        22130,
        22323
      ]
    },
    {
      "content": "Group resources are identified by the schema identifier, http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group.",
      "pos": [
        22327,
        22453
      ]
    },
    {
      "content": "Table 2, below, shows the default mapping of the attributes of groups in Azure Active Directory to the attributes of http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group resources.",
      "pos": [
        22455,
        22651
      ]
    },
    {
      "content": "Table 1: Default user attribute mapping",
      "pos": [
        22658,
        22697
      ]
    },
    {
      "content": "Azure Active Directory user",
      "pos": [
        22701,
        22728
      ]
    },
    {
      "content": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
      "pos": [
        22731,
        22789
      ]
    },
    {
      "content": "IsSoftDeleted",
      "pos": [
        22828,
        22841
      ]
    },
    {
      "content": "active",
      "pos": [
        22844,
        22850
      ]
    },
    {
      "content": "displayName",
      "pos": [
        22855,
        22866
      ]
    },
    {
      "content": "displayName",
      "pos": [
        22869,
        22880
      ]
    },
    {
      "content": "Facsimile-TelephoneNumber",
      "pos": [
        22885,
        22910
      ]
    },
    {
      "content": "phoneNumbers[type eq \"fax\"].value",
      "pos": [
        22913,
        22946
      ]
    },
    {
      "content": "givenName",
      "pos": [
        22951,
        22960
      ]
    },
    {
      "content": "name.givenName",
      "pos": [
        22963,
        22977
      ]
    },
    {
      "content": "jobTitle",
      "pos": [
        22982,
        22990
      ]
    },
    {
      "content": "title",
      "pos": [
        22993,
        22998
      ]
    },
    {
      "content": "mail",
      "pos": [
        23003,
        23007
      ]
    },
    {
      "content": "emails[type eq \"work\"].value",
      "pos": [
        23010,
        23038
      ]
    },
    {
      "content": "mailNickname",
      "pos": [
        23043,
        23055
      ]
    },
    {
      "content": "externalId",
      "pos": [
        23058,
        23068
      ]
    },
    {
      "content": "manager",
      "pos": [
        23073,
        23080
      ]
    },
    {
      "content": "manager",
      "pos": [
        23083,
        23090
      ]
    },
    {
      "content": "mobile",
      "pos": [
        23095,
        23101
      ]
    },
    {
      "content": "phoneNumbers[type eq \"mobile\"].value",
      "pos": [
        23104,
        23140
      ]
    },
    {
      "content": "objectId",
      "pos": [
        23145,
        23153
      ]
    },
    {
      "content": "id",
      "pos": [
        23156,
        23158
      ]
    },
    {
      "content": "postalCode",
      "pos": [
        23163,
        23173
      ]
    },
    {
      "content": "addresses[type eq \"work\"].postalCode",
      "pos": [
        23176,
        23212
      ]
    },
    {
      "content": "proxy-Addresses",
      "pos": [
        23217,
        23232
      ]
    },
    {
      "content": "emails[type eq \"other\"].Value",
      "pos": [
        23235,
        23264
      ]
    },
    {
      "content": "physical-Delivery-OfficeName",
      "pos": [
        23269,
        23297
      ]
    },
    {
      "content": "addresses[type eq \"other\"].Formatted",
      "pos": [
        23300,
        23336
      ]
    },
    {
      "content": "streetAddress",
      "pos": [
        23341,
        23354
      ]
    },
    {
      "content": "addresses[type eq \"work\"].streetAddress",
      "pos": [
        23357,
        23396
      ]
    },
    {
      "content": "surname",
      "pos": [
        23401,
        23408
      ]
    },
    {
      "content": "name.familyName",
      "pos": [
        23411,
        23426
      ]
    },
    {
      "content": "telephone-Number",
      "pos": [
        23431,
        23447
      ]
    },
    {
      "content": "phoneNumbers[type eq \"work\"].value",
      "pos": [
        23450,
        23484
      ]
    },
    {
      "content": "user-PrincipalName",
      "pos": [
        23489,
        23507
      ]
    },
    {
      "content": "userName",
      "pos": [
        23510,
        23518
      ]
    },
    {
      "content": "Table 2: Default group attribute mapping",
      "pos": [
        23526,
        23566
      ]
    },
    {
      "content": "Azure Active Directory group",
      "pos": [
        23570,
        23598
      ]
    },
    {
      "content": "http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group",
      "pos": [
        23601,
        23669
      ]
    },
    {
      "content": "displayName",
      "pos": [
        23708,
        23719
      ]
    },
    {
      "content": "externalId",
      "pos": [
        23722,
        23732
      ]
    },
    {
      "content": "mail",
      "pos": [
        23737,
        23741
      ]
    },
    {
      "content": "emails[type eq \"work\"].value",
      "pos": [
        23744,
        23772
      ]
    },
    {
      "content": "mailNickname",
      "pos": [
        23777,
        23789
      ]
    },
    {
      "content": "displayName",
      "pos": [
        23792,
        23803
      ]
    },
    {
      "content": "members",
      "pos": [
        23808,
        23815
      ]
    },
    {
      "content": "members",
      "pos": [
        23818,
        23825
      ]
    },
    {
      "content": "objectId",
      "pos": [
        23830,
        23838
      ]
    },
    {
      "content": "id",
      "pos": [
        23841,
        23843
      ]
    },
    {
      "content": "proxyAddresses",
      "pos": [
        23848,
        23862
      ]
    },
    {
      "content": "emails[type eq \"other\"].Value",
      "pos": [
        23865,
        23894
      ]
    },
    {
      "content": "User Provisioning and De-Provisioning",
      "pos": [
        23901,
        23938
      ]
    },
    {
      "content": "The figure below shows the messages that Azure Active Directory will send to a SCIM service to manage the lifecycle of a user in another identity store.",
      "pos": [
        23940,
        24092
      ]
    },
    {
      "content": "The diagram also shows how a SCIM service implemented using the Common Language Infrastructure libraries provided by Microsoft for building such services will translate those requests into calls to the methods of a provider.",
      "pos": [
        24094,
        24318
      ]
    },
    {
      "content": "Figure: User provisioning and de-provisioning sequence",
      "pos": [
        24330,
        24384
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>1:<ept id=\"p1\">**</ept>  Azure Active Directory will query the service for a user with an externalId attribute value matching the mailNickname attribute value of a user in Azure Active Directory.",
      "pos": [
        24387,
        24565
      ]
    },
    {
      "content": "The query will be expressed as a Hypertext Transfer Protocol request like this one, wherein jyoung is a sample of a mailNickname of a user in Azure Active Directory:",
      "pos": [
        24567,
        24732
      ]
    },
    {
      "content": "If the service was built using the Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services, then the request will be translated into a call to the Query method of the service’s provider.",
      "pos": [
        24834,
        25058
      ]
    },
    {
      "content": "Here is the signature of that method:",
      "pos": [
        25060,
        25097
      ]
    },
    {
      "content": "Here is the definition of the Microsoft.SystemForCrossDomainIdentityManagement.IQueryParameters interface:",
      "pos": [
        25693,
        25799
      ]
    },
    {
      "content": "In the case of the foregoing sample of a query for a user with a given value for the externalId attribute, values of the arguments passed to the Query method will be as follows:",
      "pos": [
        26957,
        27134
      ]
    },
    {
      "content": "parameters.AlternateFilters.Count: 1",
      "pos": [
        27139,
        27175
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(0).AttributePath: \"externalId\"",
      "pos": [
        27178,
        27246
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(0).ComparisonOperator: ComparisonOperator.Equals",
      "pos": [
        27249,
        27335
      ]
    },
    {
      "content": "parameters.AlternateFilter.ElementAt(0).ComparisonValue: \"jyoung\"",
      "pos": [
        27338,
        27403
      ]
    },
    {
      "content": "correlationIdentifier: System.Net.Http.HttpRequestMessage.GetOwinEnvironment[\"owin.RequestId\"]",
      "pos": [
        27406,
        27500
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>2:<ept id=\"p1\">**</ept>  If the response to a query to the service for a user with an externalId attribute value matching the mailNickname attribute value of a user in Azure Active Directory does not return any users, then Azure Active Directory will request that the service provision a user corresponding to the one in Azure Active Directory.",
      "pos": [
        27503,
        27830
      ]
    },
    {
      "content": "Here is an example of such a request:",
      "pos": [
        27832,
        27869
      ]
    },
    {
      "content": "The Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services would translate that request into a call to the Create method of the service’s provider.",
      "pos": [
        28637,
        28823
      ]
    },
    {
      "content": "The Create method has this signature:",
      "pos": [
        28825,
        28862
      ]
    },
    {
      "content": "In the case of a request to provision a user, the value of the resource argument will be an instance of the Microsoft.SystemForCrossDomainIdentityManagement.",
      "pos": [
        29291,
        29448
      ]
    },
    {
      "content": "Core2EnterpriseUser class, defined in the Microsoft.SystemForCrossDomainIdentityManagement.Schemas library.",
      "pos": [
        29449,
        29556
      ]
    },
    {
      "content": "If the request to provision the user succeeds, then the implementation of the method is expected to return an instance of the the Microsoft.SystemForCrossDomainIdentityManagement.",
      "pos": [
        29558,
        29737
      ]
    },
    {
      "content": "Core2EnterpriseUser class, with the value of the Identifier property set to the unique identifier of the newly-provisioned user.",
      "pos": [
        29738,
        29866
      ]
    },
    {
      "pos": [
        29870,
        30078
      ],
      "content": "<bpt id=\"p1\">**</bpt>3:<ept id=\"p1\">**</ept>  To update a user known to exist in an identity store fronted by an SCIM, Azure Active Directory will proceed by requesting the current state of that user from the service with a request like this one:"
    },
    {
      "content": "In a service built using the Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services, the request will be translated into a call to the Retrieve method of the service’s provider.",
      "pos": [
        30179,
        30395
      ]
    },
    {
      "content": "Here is the signature of the Retrieve method:",
      "pos": [
        30397,
        30442
      ]
    },
    {
      "content": "In the case of the foregoing example of a request to retrieve the current state of a user, the values of the properties of the object provided as the value of the parameters argument will be as follows:",
      "pos": [
        31567,
        31769
      ]
    },
    {
      "content": "Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"",
      "pos": [
        31774,
        31824
      ]
    },
    {
      "content": "SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
      "pos": [
        31827,
        31905
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>4:<ept id=\"p1\">**</ept>  If a reference attribute is to be updated, then Azure Active Directory will query the service to determine whether or not the current value of the reference attribute in the identity store fronted by the service already matches the value of that attribute in Azure Active Directory.",
      "pos": [
        31907,
        32197
      ]
    },
    {
      "content": "In the case of users, the only attribute of which the current value will be queried in this way is the manager attribute.",
      "pos": [
        32199,
        32320
      ]
    },
    {
      "content": "Here is an example of a request to determine whether the manager attribute of a particular user object currently has a certain value:",
      "pos": [
        32322,
        32455
      ]
    },
    {
      "content": "The value of the attributes query parameter, id, signifies that if a user object exists that satisfies the expression provided as the value of the filter query parameter, then the service is expected to respond with a urn:ietf:params:scim:schemas:core:2.0:User or urn:ietf:params:scim:schemas:extension:enterprise:2.0:User resource, including only the value of that resource’s id attribute.",
      "pos": [
        32635,
        33025
      ]
    },
    {
      "content": "Of course, the value of the id attribute is known to the requestor—it is included in the value of the filter query parameter; the purpose of asking for it is actually to request a minimal representation of a resource that satisfying the filter expression as an indication of whether or not any such object exists.",
      "pos": [
        33027,
        33340
      ]
    },
    {
      "content": "If the service was built using the Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services, then the request will be translated into a call to the Query method of the service’s provider.",
      "pos": [
        33345,
        33569
      ]
    },
    {
      "content": "The value of the properties of the object provided as the value of the parameters argument will be as follows:",
      "pos": [
        33571,
        33681
      ]
    },
    {
      "content": "parameters.AlternateFilters.Count: 2",
      "pos": [
        33686,
        33722
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(x).AttributePath: \"id\"",
      "pos": [
        33725,
        33785
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(x).ComparisonOperator: ComparisonOperator.Equals",
      "pos": [
        33788,
        33874
      ]
    },
    {
      "content": "parameters.AlternateFilter.ElementAt(x).ComparisonValue: \"54D382A4-2050-4C03-94D1-E769F1D15682\"",
      "pos": [
        33877,
        33972
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(y).AttributePath: \"manager\"",
      "pos": [
        33975,
        34040
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(y).ComparisonOperator: ComparisonOperator.Equals",
      "pos": [
        34043,
        34129
      ]
    },
    {
      "content": "parameters.AlternateFilter.ElementAt(y).ComparisonValue: \"2819c223-7f76-453a-919d-413861904646\"",
      "pos": [
        34132,
        34227
      ]
    },
    {
      "content": "parameters.RequestedAttributePaths.ElementAt(0): \"id\"",
      "pos": [
        34230,
        34283
      ]
    },
    {
      "content": "parameters.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
      "pos": [
        34286,
        34375
      ]
    },
    {
      "content": "Here, the value of the index x may be 0 and the value of the index y may be 1, or the value of x may be 1 and the value of y may be 0, depending on the order of the expressions of the filter query parameter.",
      "pos": [
        34377,
        34584
      ]
    },
    {
      "pos": [
        34589,
        34693
      ],
      "content": "<bpt id=\"p1\">**</bpt>5:<ept id=\"p1\">**</ept>  Here is an example of a request from Azure Active Directory to an SCIM service to update a user:"
    },
    {
      "content": "The Microsoft Common Language Infrastructure libraries for implementing SCIM services would translate the request into a call to the Update method of the service’s provider.",
      "pos": [
        35211,
        35384
      ]
    },
    {
      "content": "Here is the signature of that method:",
      "pos": [
        35386,
        35423
      ]
    },
    {
      "content": "In the case of the foregoing example of a request to update a user, the object provided as the value of the patch argument will have these property values:",
      "pos": [
        38013,
        38168
      ]
    },
    {
      "content": "ResourceIdentifier.Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"",
      "pos": [
        38173,
        38242
      ]
    },
    {
      "content": "ResourceIdentifier.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
      "pos": [
        38245,
        38342
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.Count: 1",
      "pos": [
        38345,
        38396
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).OperationName: OperationName.Add",
      "pos": [
        38399,
        38487
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).Path.AttributePath: \"manager\"",
      "pos": [
        38490,
        38575
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.Count: 1",
      "pos": [
        38578,
        38648
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.ElementAt(0).Reference: http://.../scim/Users/2819c223-7f76-453a-919d-413861904646",
      "pos": [
        38651,
        38795
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.ElementAt(0).Value: 2819c223-7f76-453a-919d-413861904646",
      "pos": [
        38798,
        38916
      ]
    },
    {
      "pos": [
        38918,
        39057
      ],
      "content": "<bpt id=\"p1\">**</bpt>6:<ept id=\"p1\">**</ept>  To de-provision a user from an identity store fronted by an SCIM service, Azure Active Directory will send a request like this one:"
    },
    {
      "content": "If the service was built using the Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services, then the request will be translated into a call to the Delete method of the service’s provider.",
      "pos": [
        39165,
        39390
      ]
    },
    {
      "content": "That method has this signature:",
      "pos": [
        39393,
        39424
      ]
    },
    {
      "content": "The object provided as the value of the resourceIdentifier argument will have these property values in the case of the foregoing example of a request to de-provision a user:",
      "pos": [
        39837,
        40010
      ]
    },
    {
      "content": "ResourceIdentifier.Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"",
      "pos": [
        40015,
        40084
      ]
    },
    {
      "content": "ResourceIdentifier.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
      "pos": [
        40087,
        40184
      ]
    },
    {
      "content": "Group Provisioning and De-Provisioning",
      "pos": [
        40188,
        40226
      ]
    },
    {
      "content": "The figure below shows the messages that Azure Active Directory will send to a SCIM service to manage the lifecycle of a group in another identity store.",
      "pos": [
        40228,
        40381
      ]
    },
    {
      "content": "Those messages differ from the messages pertaining to users in three ways:",
      "pos": [
        40383,
        40457
      ]
    },
    {
      "content": "The schema of a group resource will be identified as http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group.",
      "pos": [
        40462,
        40584
      ]
    },
    {
      "content": "Requests to retrieve groups will stipulate that the members attribute is to be excluded from any resource provided in response to the request.",
      "pos": [
        40589,
        40731
      ]
    },
    {
      "content": "Requests to determine whether a reference attribute has a certain value will be requests about the members attribute.",
      "pos": [
        40736,
        40853
      ]
    },
    {
      "content": "Figure: Group provisioning and de-provisioning sequence",
      "pos": [
        40865,
        40920
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Using SCIM to enable automatic provisioning of users and groups from Azure Active Directory to applications | Microsoft Azure\"\n    description=\"Azure Active Directory can automatically provision users and groups to any application or identity store that is fronted by a Web service with the interface defined in the SCIM protocol specification\"\n    services=\"active-directory\"\n    documentationCenter=\"\"\n    authors=\"asmalser-msft\"\n    manager=\"stevenpo\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"active-directory\"\n    ms.workload=\"identity\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"10/29/2015\"\n    ms.author=\"asmalser-msft\"/>\n\n#Using SCIM to enable automatic provisioning of users and groups from Azure Active Directory to applications\n\n##Overview\n\nAzure Active Directory can automatically provision users and groups to any application or identity store that is fronted by a Web service with the interface defined in the [SCIM 2.0 protocol specification](https://tools.ietf.org/html/draft-ietf-scim-api-19). Azure Active Directory can send requests to create, modify and delete assigned users and groups to this Web service, which can then translate those requests into operations upon the target identity store. \n\n![][1]\n*Figure: Provisioning from Azure Active Directory to an identity store via a Web service*\n\nThis capability can be used in conjunction with the “[bring your own app](http://blogs.technet.com/b/ad/archive/2015/06/17/bring-your-own-app-with-azure-ad-self-service-saml-configuration-gt-now-in-preview.aspx)” capability in Azure AD to enable single sign-on and automatic user provisioning for applications that provide or are fronted by a SCIM web service.\n\nThere are two use cases for SCIM in Azure Active Directory:\n\n* **Provisioning users and groups to applications that support SCIM** - Applications that support SCIM 2.0 and are capable of accepting an OAuth bearer token from Azure AD will work with Azure AD of the box.\n\n* **Build your own provisioning solution for applications that support other API-based provisioning** - For non-SCIM applications, you can create a SCIM endpoint to translate between Azure AD’s SCIM endpoint and whatever API the application supports for user provisioning.  To aid in the development of a SCIM endpoint, we provide CLI libraries along with code samples that show you how to do provide a SCIM endpoint and translate SCIM messages.  \n\n##Provisioning Users and Groups To Applications That Support SCIM\n\nAzure Active Directory can be configured to automatically provision assigned users and groups to applications that implement a [System for Cross-domain Identity Management 2 (SCIM)](https://tools.ietf.org/html/draft-ietf-scim-api-19) Web service and accept OAuth bearer tokens for authentication. Within the SCIM 2.0 specification, applications must meet these requirements:\n\n* Supports creating users and/or groups, as per section 3.3 of the SCIM protocol.  \n\n* Supports modifying users and/or groups with patch requests as per section 3.5.2 of the SCIM protocol.  \n\n* Supports retrieving a known resource as per section 3.4.1 of the SCIM protocol.  \n\n*  Supports querying users and/or groups, as per section 3.4.2 of the SCIM protocol.  By default, users are queried by externalId and groups are queried by displayName.  \n\n* Supports querying user by ID and by manager as per section 3.4.2 of the SCIM protocol.  \n\n* Supports querying groups by ID and by member as per section 3.4.2 of the SCIM protocol.  \n\n* Accepts OAuth bearer tokens for authorization as per section 2.1 of the SCIM protocol.  \n\n* Supports using Azure AD as the identity provider for the OAuth token (support for external identity providers coming soon)\n\nYou should check with your application provider, or your application provider's documentation for statements of compatibility with these requirements.\n \n###Getting Started\n\nApplications that support the SCIM profile described above can be connected to Azure Active Directory using the \"custom\" app feature in the Azure AD application gallery. Once connected, Azure AD runs a synchronization process every 5 minutes where it queries the application's SCIM endpoint for assigned users and groups, and creates or modifies them according to the assignment details.\n\n**To connect an applicaiton that supports SCIM:**\n\n1.  In a web browser, launch the Azure management portal at https://manage.windowsazure.com.\n2.  Browse to **Active Directory > Directory > [Your Directory] > Applications**, and select **Add > Add an application from the gallery**.\n3.  Select the **Custom** tab on the left, enter a name for your application, and click the checkmark icon to create an app object.\n\n![][2]\n\n4.  In the resulting screen, select the second **Configure account provisioning** button.\n5.  In the dialog, enter the URL of the application's SCIM endpoin.  \n6.  Click **Next**, and click on the **Start Test** button to have Azure Active Directory attempt to connect to the SCIM endpoint. If the attempts fail, diagnostic information will be displayed.  \n7.  If the attempts to connect to the application succeed, then click **Next** on the remaining screens, and click **Complete** to exit the dialog.\n8.  In the resulting screen, select the third **Assign Accounts** button. In the resulting Users and Groups section, assign the users or groups you want to provision to the application.\n9.  Once users and groups are assigned, click the **Configure** tab near the top of the screen.\n10. Under **Account Provisioning**, confirm that the Status is set to On. \n11. Under **Tools**, click **Restart account provisioning** to kick-start the provisioning process.\n\nNote that 5-10 minutes may elapse before the provisioning process will begin to send requests to the SCIM endpoint.  A summary of connection attempts is provided on the application’s Dashboard tab, and both a report of provisioning activity and any provisioning errors can be downloaded from the directory’s Reports tab.\n\n##Building Your Own Provisioning Solution For Any Application\n\nBy creating a SCIM web service that interfaces with Azure Active Directory, you can enable single sign-on and automatic user provisioning for virtually any application that provides a REST or SOAP user provisioning API.\n\nHere’s how it works:\n\n1.  Azure AD provides a common language infrastructure library named [Microsoft.SystemForCrossDomainIdentityManagement](https://www.nuget.org/packages/Microsoft.SystemForCrossDomainIdentityManagement/). System integrators and developers can use this library to create and deploy a SCIM-based web service endpoint capable of connecting Azure AD to any application’s identity store.\n2.  Mappings are implemented in the web service to map the standardized user schema to the user schema and protocol required by the application.\n3.  The endpoint URL is registered in Azure AD as part of a custom application in the application gallery.\n4.  Users and groups are assigned to this application in Azure AD. Upon assignment, they are put into a queue to be synchronized to the target application. The synchronization process handling the queue runs every 5 minutes.\n\n###Code Samples\n\nTo make this process easier, a set of [code samples](https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master) are provided that create a SCIM web service endpoint and demonstrate automatic provisioning. One sample is of a provider that maintains a file with rows of comma-separated values representing users and groups.  The other is of a provider that operates on the Amazon Web Services Identity and Access Management service.  \n\n**Prerequisites**\n\n* Visual Studio 2013 or later\n* [Azure SDK for .NET](https://azure.microsoft.com/downloads/)\n* Windows machine that supports the ASP.NET framework 4.5 to be used as the SCIM endpoint. This machine must be accessible from the cloud\n* [An Azure subscription with a trial or licensed version of Azure AD Premium](https://azure.microsoft.com/services/active-directory/)\n* The Amazon AWS sample requires libraries from the [AWS Toolkit for Visual Studio](http://docs.aws.amazon.com/AWSToolkitVS/latest/UserGuide/tkv_setup.html). See the README file included with the sample for additional details\n\n###Getting Started\n\nThe easiest way to implement a SCIM endpoint that can accept provisioning requests from Azure AD is to build and deploy the code sample that outputs the provisioned users to a comma-separated value (CSV) file.\n\n**To create a sample SCIM endpoint:**\n\n1.  Download the code sample package at [https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master](https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master)\n2.  Unzip the package and place it on your Windows machine at a location such as C:\\AzureAD-BYOA-Provisioning-Samples\\.\n3.  In this folder, launch the FileProvisioningAgent solution in Visual Studio.\n4.  Select **Tools > Library Package Manager > Package Manager Console**, and execute the commands below for the FileProvisioningAgent project to resolve the solution references:\n\n    Install-Package Microsoft.SystemForCrossDomainIdentityManagement\n    Install-Package Microsoft.IdentityModel.Clients.ActiveDirectory\n    Install-Package Microsoft.Owin.Diagnostics\n    Install-Package Microsoft.Owin.Host.SystemWeb\n\n5.  Build the FileProvisioningAgent project.\n6.  Launch the Command Prompt application in Windows (as an Administrator), and use the **cd** command to change the directory to your **\\AzureAD-BYOA-Provisioning-Samples\\ProvisioningAgent\\bin\\Debug** folder.\n7.  Run the command below, replacing <ip-address> with the IP or domain name of the Windows Machine.\n\n    FileAgnt.exe http://<ip-address>:9000 TargetFile.csv\n\n8.  In Windows under **Windows Settings > Network & Internet Settings**, select the **Windows Firewall > Advanced Settings**, and create an **Inbound Rule** that allows inbound access to port 9000.\n9.  If the Windows machine is behind a router, the router will need to be configured to perform Network Access Translation between its port 9000 that is exposed to the internet, and port 9000 on the Windows machine. This is required for Azure AD to be able to access this endpoint in the cloud.\n\n\n**To register the sample SCIM endpoint in Azure AD:**\n\n1.  In a web browser, launch the Azure management portal at https://manage.windowsazure.com.\n2.  Browse to **Active Directory > Directory > [Your Directory] > Applications**, and select **Add > Add an application from the gallery**.\n3.  Select the **Custom** tab on the left, enter a name such as “SCIM Test App”, and click the checkmark icon to create an app object. Note that the application object created is intend to represent the target app you would be provisioning to and implementing single sign-on for, and not just the SCIM endpoint.\n\n![][2]\n\n4.  In the resulting screen, select the second **Configure account provisioning** button.\n5.  In the dialog, enter the internet-exposed URL and port of your SCIM endpoint. This would be something like http://testmachine.contoso.com:9000 or http://<ip-address>:9000/, where <ip-address> is the internet exposed IP address.  \n6.  Click **Next**, and click on the **Start Test** button to have Azure Active Directory attempt to connect to the SCIM endpoint. If the attempts fail, diagnostic information will be displayed.  \n7.  If the attempts to connect to your Web service succeed, then click **Next** on the remaining screens, and click **Complete** to exit the dialog.\n8.  In the resulting screen, select the third **Assign Accounts** button. In the resulting Users and Groups section, assign the users or groups you want to provision to the application.\n9.  Once users and groups are assigned, click the **Configure** tab near the top of the screen.\n10. Under **Account Provisioning**, confirm that the Status is set to On. \n11. Under **Tools**, click **Restart account provisioning** to kick-start the provisioning process.\n\nNote that 5-10 minutes may elapse before the provisioning process will begin to send requests to the SCIM endpoint.  A summary of connection attempts is provided on the application’s Dashboard tab, and both a report of provisioning activity and any provisioning errors can be downloaded from the directory’s Reports tab.\n\nThe final step in verifying the sample is to open the TargetFile.csv file in the \\AzureAD-BYOA-Provisioning-Samples\\ProvisioningAgent\\bin\\Debug folder on your Windows machine. Once the provisioning process is run, this file shows the details of all assigned and provisioned users and groups.\n\n###Development Libraries\n\nTo develop your own Web service that conforms to the SCIM specification, first familiarize yourself with the following libraries provided by Microsoft to help accelerate the development process: \n\n**1:**  Common Language Infrastructure libraries are offered for use with languages based on that infrastructure, such as C#.  One of those libraries, [Microsoft.SystemForCrossDomainIdentityManagement.Service](https://www.nuget.org/packages/Microsoft.SystemForCrossDomainIdentityManagement/), declares an interface, Microsoft.SystemForCrossDomainIdentityManagement.IProvider, shown in the figure below.  A developer using the libraries would implement that interface with a class that may be referred to, generically, as a provider.  The libraries enable the developer to easily deploy a Web service that conforms to the SCIM specification, either hosted within Internet Information Services, or any executable Common Language Infrastructure assembly.  Requests to that Web service will be translated into calls to the provider’s methods, which would be programmed by the developer to operate on some identity store.    \n\n![][3]\n\n**2:**  [Express route handlers](http://expressjs.com/guide/routing.html) are available for parsing node.js request objects representing calls (as defined by the SCIM specification), made to a node.js Web service.   \n\n###Building a Custom SCIM Endpoint\n\nUsing the libraries described above, developers using those libraries can host their services within any executable Common Language Infrastructure assembly, or within Internet Information Services.  Here is sample code for hosting a service within an executable assembly, at the address http://localhost:9000: \n\n    private static void Main(string[] arguments)\n    {\n    // Microsoft.SystemForCrossDomainIdentityManagement.IMonitor, \n    // Microsoft.SystemForCrossDomainIdentityManagement.IProvider and \n    // Microsoft.SystemForCrossDomainIdentityManagement.Service are all defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Service.dll.  \n    \n    Microsoft.SystemForCrossDomainIdentityManagement.IMonitor monitor = \n      new DevelopersMonitor();\n    Microsoft.SystemForCrossDomainIdentityManagement.IProvider provider = \n      new DevelopersProvider(arguments[1]);\n    Microsoft.SystemForCrossDomainIdentityManagement.Service webService = null;\n    try\n    {\n        webService = new WebService(monitor, provider);\n        webService.Start(\"http://localhost:9000\");\n\n        Console.ReadKey(true);\n    }\n    finally\n    {\n        if (webService != null)\n        {\n            webService.Dispose();\n            webService = null;\n        }\n    }\n    }\n\n    public class WebService : Microsoft.SystemForCrossDomainIdentityManagement.Service\n    {\n    private Microsoft.SystemForCrossDomainIdentityManagement.IMonitor monitor;\n    private Microsoft.SystemForCrossDomainIdentityManagement.IProvider provider;\n\n    public WebService(\n      Microsoft.SystemForCrossDomainIdentityManagement.IMonitor monitoringBehavior, \n      Microsoft.SystemForCrossDomainIdentityManagement.IProvider providerBehavior)\n    {\n        this.monitor = monitoringBehavior;\n        this.provider = providerBehavior;\n    }\n\n    public override IMonitor MonitoringBehavior\n    {\n        get\n        {\n            return this.monitor;\n        }\n\n        set\n        {\n            this.monitor = value;\n        }\n    }\n\n    public override IProvider ProviderBehavior\n    {\n        get\n        {\n            return this.provider;\n        }\n\n        set\n        {\n            this.provider = value;\n        }\n    }\n    }\n\nIt is important to note that this service must have an HTTP address and server authentication certificate of which the root certification authority is one of the following: \n\n* CNNIC\n* Comodo\n* CyberTrust\n* DigiCert\n* GeoTrust\n* GlobalSign\n* Go Daddy\n* Verisign\n* WoSign\n\nA server authentication certificate can be bound to a port on a Windows host using the network shell utility, like so: \n\n    netsh http add sslcert ipport=0.0.0.0:443 certhash=0000000000003ed9cd0c315bbb6dc1c08da5e6 appid={00112233-4455-6677-8899-AABBCCDDEEFF}  \n \nHere, the value provided for the certhash argument is the thumbprint of the certificate, while the value provided for the appid argument is an arbitrary globally-unique identifier.  \n\nTo host the service within Internet Information Services, a developer would build a Common Language Infrastructure code library assembly with a class named Startup in the default namespace of the assembly.  Here is a sample of such a class: \n\n    public class Startup\n    {\n    // Microsoft.SystemForCrossDomainIdentityManagement.IWebApplicationStarter, \n    // Microsoft.SystemForCrossDomainIdentityManagement.IMonitor and  \n    // Microsoft.SystemForCrossDomainIdentityManagement.Service are all defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Service.dll.  \n\n    Microsoft.SystemForCrossDomainIdentityManagement.IWebApplicationStarter starter;\n\n    public Startup()\n    {\n        Microsoft.SystemForCrossDomainIdentityManagement.IMonitor monitor = \n          new DevelopersMonitor();\n        Microsoft.SystemForCrossDomainIdentityManagement.IProvider provider = \n          new DevelopersProvider();\n        this.starter = \n          new Microsoft.SystemForCrossDomainIdentityManagement.WebApplicationStarter(\n            provider, \n            monitor);\n    }\n\n    public void Configuration(\n      Owin.IAppBuilder builder) // Defined in in Owin.dll.  \n    {\n        this.starter.ConfigureApplication(builder);\n    }\n    }\n\n###Handling Endpoint Authentication\n\nRequests from Azure Active Directory include an OAuth 2.0 bearer token.   Any service receiving the request should authenticate the issuer as being Azure Active Directory on behalf of the expected Azure Active Directory tenant, for access to Azure Active Directory’s Graph Web service.  In the token, the issuer is identified by an iss claim, like, \"iss\":\"https://sts.windows.net/cbb1a5ac-f33b-45fa-9bf5-f37db0fed422/\".  In this example, the base address of the claim value, https://sts.windows.net, identifies Azure Active Directory as the issuer, while the relative address segment, cbb1a5ac-f33b-45fa-9bf5-f37db0fed422, is a unique identifier of the Azure Active Directory tenant on behalf of which the token was issued.  If the token was issued for accessing the Azure Active Directory’s Graph Web service, then the identifier of that service, 00000002-0000-0000-c000-000000000000, should be in the value of the token’s aud claim.  \n\nDevelopers using the Common Language Infrastructure libraries provided by Microsoft for building a SCIM service can authenticate requests from Azure Active Directory using the Microsoft.Owin.Security.ActiveDirectory package by following these steps: \n\n**1:**  In a provider, implement the Microsoft.SystemForCrossDomainIdentityManagement.IProvider.StartupBehavior property by having it return a method to be called whenever the service is started: \n\n    public override Action\\<Owin.IAppBuilder, System.Web.Http.HttpConfiguration.HttpConfiguration\\> StartupBehavior\n    {\n      get\n      {\n        return this.OnServiceStartup;\n      }\n    }\n\n    private void OnServiceStartup(\n      Owin.IAppBuilder applicationBuilder,  // Defined in Owin.dll.  \n      System.Web.Http.HttpConfiguration configuration)  // Defined in System.Web.Http.dll.  \n    {\n    }\n\n**2:**  Add the following code to that method to have any request to any of the service’s endpoints authenticated as bearing a token issued by Azure Active Directory on behalf of a specified tenant, for access to Azure Active Directory’s Graph Web service: \n\n    private void OnServiceStartup(\n      Owin.IAppBuilder applicationBuilder IAppBuilder applicationBuilder, \n      System.Web.Http.HttpConfiguration HttpConfiguration configuration)\n    {\n      // IFilter is defined in System.Web.Http.dll.  \n      System.Web.Http.Filters.IFilter authorizationFilter = \n        new System.Web.Http.AuthorizeAttribute(); // Defined in System.Web.Http.dll.configuration.Filters.Add(authorizationFilter);\n\n      // SystemIdentityModel.Tokens.TokenValidationParameters is defined in    \n      // System.IdentityModel.Token.Jwt.dll.\n      SystemIdentityModel.Tokens.TokenValidationParameters tokenValidationParameters =     \n        new TokenValidationParameters()\n        {\n          ValidAudience = \"00000002-0000-0000-c000-000000000000\"\n        };\n\n      // WindowsAzureActiveDirectoryBearerAuthenticationOptions is defined in \n      // Microsoft.Owin.Security.ActiveDirectory.dll\n      Microsoft.Owin.Security.ActiveDirectory.\n      WindowsAzureActiveDirectoryBearerAuthenticationOptions authenticationOptions =\n        new WindowsAzureActiveDirectoryBearerAuthenticationOptions()    {\n        TokenValidationParameters = tokenValidationParameters,\n        Tenant = \"03F9FCBC-EA7B-46C2-8466-F81917F3C15E\" // Substitute the appropriate tenant’s \n                                                      // identifier for this one.  \n      };\n\n      applicationBuilder.UseWindowsAzureActiveDirectoryBearerAuthentication(authenticationOptions);\n    }\n\n##User and Group Schema\n\nAzure Active Directory can provision two types of resources to SCIM Web Services.  Those types of resources are users and groups.  \n\nUser resources are identified by the schema identifier, urn:ietf:params:scim:schemas:extension:enterprise:2.0:User, which is included in this protocol specification: http://tools.ietf.org/html/draft-ietf-scim-core-schema.  The default mapping of the attributes of users in Azure Active Directory to the attributes of urn:ietf:params:scim:schemas:extension:enterprise:2.0:User resources is provided in table 1, below.  \n\nGroup resources are identified by the schema identifier, http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group.  Table 2, below, shows the default mapping of the attributes of groups in Azure Active Directory to the attributes of http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group resources.  \n\n###Table 1: Default user attribute mapping\n\n| Azure Active Directory user | urn:ietf:params:scim:schemas:extension:enterprise:2.0:User |\n| ------------- | ------------- |\n| IsSoftDeleted | active |\n| displayName | displayName |\n| Facsimile-TelephoneNumber | phoneNumbers[type eq \"fax\"].value |\n| givenName | name.givenName |\n| jobTitle | title |\n| mail | emails[type eq \"work\"].value |\n| mailNickname | externalId |\n| manager | manager |\n| mobile | phoneNumbers[type eq \"mobile\"].value |\n| objectId | id |\n| postalCode | addresses[type eq \"work\"].postalCode |\n| proxy-Addresses | emails[type eq \"other\"].Value |\n| physical-Delivery-OfficeName | addresses[type eq \"other\"].Formatted |\n| streetAddress | addresses[type eq \"work\"].streetAddress |\n| surname | name.familyName |\n| telephone-Number | phoneNumbers[type eq \"work\"].value |\n| user-PrincipalName | userName |\n\n\n###Table 2: Default group attribute mapping\n\n| Azure Active Directory group | http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group |\n| ------------- | ------------- |\n| displayName | externalId |\n| mail | emails[type eq \"work\"].value |\n| mailNickname | displayName |\n| members | members |\n| objectId | id |\n| proxyAddresses | emails[type eq \"other\"].Value |\n\n\n##User Provisioning and De-Provisioning\n\nThe figure below shows the messages that Azure Active Directory will send to a SCIM service to manage the lifecycle of a user in another identity store.  The diagram also shows how a SCIM service implemented using the Common Language Infrastructure libraries provided by Microsoft for building such services will translate those requests into calls to the methods of a provider.  \n\n![][4]\n*Figure: User provisioning and de-provisioning sequence*\n\n**1:**  Azure Active Directory will query the service for a user with an externalId attribute value matching the mailNickname attribute value of a user in Azure Active Directory.  The query will be expressed as a Hypertext Transfer Protocol request like this one, wherein jyoung is a sample of a mailNickname of a user in Azure Active Directory: \n\n    GET https://.../scim/Users?filter=externalId eq jyoung HTTP/1.1\n    Authorization: Bearer ...\n\nIf the service was built using the Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services, then the request will be translated into a call to the Query method of the service’s provider.  Here is the signature of that method: \n\n    // System.Threading.Tasks.Tasks is defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.Resource is defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Schemas.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.IQueryParameters is defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Protocol.  \n\n    System.Threading.Tasks.Task<Microsoft.SystemForCrossDomainIdentityManagement.Resource[]> Query(\n      Microsoft.SystemForCrossDomainIdentityManagement.IQueryParameters parameters, \n      string correlationIdentifier);\n\nHere is the definition of the Microsoft.SystemForCrossDomainIdentityManagement.IQueryParameters interface: \n\n    public interface IQueryParameters: \n      Microsoft.SystemForCrossDomainIdentityManagement.IRetrievalParameters\n    {\n        System.Collections.Generic.IReadOnlyCollection <Microsoft.SystemForCrossDomainIdentityManagement.IFilter> AlternateFilters \n        { get; }\n    }\n\n    public interface Microsoft.SystemForCrossDomainIdentityManagement.IRetrievalParameters\n    {\n      system.Collections.Generic.IReadOnlyCollection<string> ExcludedAttributePaths \n      { get; }\n      System.Collections.Generic.IReadOnlyCollection<string> RequestedAttributePaths \n      { get; }\n      string SchemaIdentifier \n      { get; }\n    }\n\n    public interface Microsoft.SystemForCrossDomainIdentityManagement.IFilter\n    {\n        Microsoft.SystemForCrossDomainIdentityManagement.IFilter AdditionalFilter \n          { get; set; }\n        string AttributePath \n          { get; } \n        Microsoft.SystemForCrossDomainIdentityManagement.ComparisonOperator FilterOperator \n          { get; }\n        string ComparisonValue \n          { get; }\n    }\n    \n    public enum Microsoft.SystemForCrossDomainIdentityManagement.ComparisonOperator\n    {\n        Equals\n    }\n\nIn the case of the foregoing sample of a query for a user with a given value for the externalId attribute, values of the arguments passed to the Query method will be as follows: \n\n* parameters.AlternateFilters.Count: 1\n* parameters.AlternateFilters.ElementAt(0).AttributePath: \"externalId\"\n* parameters.AlternateFilters.ElementAt(0).ComparisonOperator: ComparisonOperator.Equals\n* parameters.AlternateFilter.ElementAt(0).ComparisonValue: \"jyoung\"\n* correlationIdentifier: System.Net.Http.HttpRequestMessage.GetOwinEnvironment[\"owin.RequestId\"] \n\n**2:**  If the response to a query to the service for a user with an externalId attribute value matching the mailNickname attribute value of a user in Azure Active Directory does not return any users, then Azure Active Directory will request that the service provision a user corresponding to the one in Azure Active Directory.  Here is an example of such a request: \n\n    POST https://.../scim/Users HTTP/1.1\n    Authorization: Bearer ...\n    Content-type: application/json\n    {\n      \"schemas\":\n      [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\",\n        \"urn:ietf:params:scim:schemas:extension:enterprise:2.0User\"],\n      \"externalId\":\"jyoung\",\n      \"userName\":\"jyoung\",\n      \"active\":true,\n      \"addresses\":null,\n      \"displayName\":\"Joy Young\",\n      \"emails\": [\n        {\n          \"type\":\"work\",\n          \"value\":\"jyoung@Contoso.com\",\n          \"primary\":true}],\n      \"meta\": {\n        \"resourceType\":\"User\"},\n       \"name\":{\n        \"familyName\":\"Young\",\n        \"givenName\":\"Joy\"},\n      \"phoneNumbers\":null,\n      \"preferredLanguage\":null,\n      \"title\":null,\n      \"department\":null,\n      \"manager\":null}\n\nThe Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services would translate that request into a call to the Create method of the service’s provider.  The Create method has this signature: \n\n    // System.Threading.Tasks.Tasks is defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.Resource is defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Schemas.  \n\n    System.Threading.Tasks.Task<Microsoft.SystemForCrossDomainIdentityManagement.Resource> Create(\n      Microsoft.SystemForCrossDomainIdentityManagement.Resource resource, \n      string correlationIdentifier);\n\nIn the case of a request to provision a user, the value of the resource argument will be an instance of the Microsoft.SystemForCrossDomainIdentityManagement. Core2EnterpriseUser class, defined in the Microsoft.SystemForCrossDomainIdentityManagement.Schemas library.  If the request to provision the user succeeds, then the implementation of the method is expected to return an instance of the the Microsoft.SystemForCrossDomainIdentityManagement. Core2EnterpriseUser class, with the value of the Identifier property set to the unique identifier of the newly-provisioned user.  \n\n**3:**  To update a user known to exist in an identity store fronted by an SCIM, Azure Active Directory will proceed by requesting the current state of that user from the service with a request like this one: \n\n    GET ~/scim/Users/54D382A4-2050-4C03-94D1-E769F1D15682 HTTP/1.1\n    Authorization: Bearer ...\n\nIn a service built using the Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services, the request will be translated into a call to the Retrieve method of the service’s provider.  Here is the signature of the Retrieve method: \n\n    // System.Threading.Tasks.Tasks is defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.Resource and \n    // Microsoft.SystemForCrossDomainIdentityManagement.IResourceRetrievalParameters \n    // are defined in Microsoft.SystemForCrossDomainIdentityManagement.Schemas.  \n    System.Threading.Tasks.Task<Microsoft.SystemForCrossDomainIdentityManagement.Resource> \n       Retrieve(\n         Microsoft.SystemForCrossDomainIdentityManagement.IResourceRetrievalParameters \n           parameters, \n           string correlationIdentifier);\n    \n    public interface \n      Microsoft.SystemForCrossDomainIdentityManagement.IResourceRetrievalParameters:   \n        IRetrievalParameters\n        {\n          Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier \n            ResourceIdentifier \n              { get; }\n    }\n    public interface Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier\n    {\n        string Identifier \n          { get; set; }\n        string Microsoft.SystemForCrossDomainIdentityManagement.SchemaIdentifier \n          { get; set; }\n    }\n\nIn the case of the foregoing example of a request to retrieve the current state of a user, the values of the properties of the object provided as the value of the parameters argument will be as follows: \n\n* Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"\n* SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n\n**4:**  If a reference attribute is to be updated, then Azure Active Directory will query the service to determine whether or not the current value of the reference attribute in the identity store fronted by the service already matches the value of that attribute in Azure Active Directory.  In the case of users, the only attribute of which the current value will be queried in this way is the manager attribute.  Here is an example of a request to determine whether the manager attribute of a particular user object currently has a certain value: \n\n    GET ~/scim/Users?filter=id eq 54D382A4-2050-4C03-94D1-E769F1D15682 and manager eq 2819c223-7f76-453a-919d-413861904646&attributes=id HTTP/1.1\n    Authorization: Bearer ...\n\nThe value of the attributes query parameter, id, signifies that if a user object exists that satisfies the expression provided as the value of the filter query parameter, then the service is expected to respond with a urn:ietf:params:scim:schemas:core:2.0:User or urn:ietf:params:scim:schemas:extension:enterprise:2.0:User resource, including only the value of that resource’s id attribute.  Of course, the value of the id attribute is known to the requestor—it is included in the value of the filter query parameter; the purpose of asking for it is actually to request a minimal representation of a resource that satisfying the filter expression as an indication of whether or not any such object exists.   \n\nIf the service was built using the Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services, then the request will be translated into a call to the Query method of the service’s provider.  The value of the properties of the object provided as the value of the parameters argument will be as follows: \n\n* parameters.AlternateFilters.Count: 2\n* parameters.AlternateFilters.ElementAt(x).AttributePath: \"id\"\n* parameters.AlternateFilters.ElementAt(x).ComparisonOperator: ComparisonOperator.Equals\n* parameters.AlternateFilter.ElementAt(x).ComparisonValue: \"54D382A4-2050-4C03-94D1-E769F1D15682\"\n* parameters.AlternateFilters.ElementAt(y).AttributePath: \"manager\"\n* parameters.AlternateFilters.ElementAt(y).ComparisonOperator: ComparisonOperator.Equals\n* parameters.AlternateFilter.ElementAt(y).ComparisonValue: \"2819c223-7f76-453a-919d-413861904646\"\n* parameters.RequestedAttributePaths.ElementAt(0): \"id\"\n* parameters.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n\nHere, the value of the index x may be 0 and the value of the index y may be 1, or the value of x may be 1 and the value of y may be 0, depending on the order of the expressions of the filter query parameter.   \n\n**5:**  Here is an example of a request from Azure Active Directory to an SCIM service to update a user: \n\n    PATCH ~/scim/Users/54D382A4-2050-4C03-94D1-E769F1D15682 HTTP/1.1\n    Authorization: Bearer ...\n    Content-type: application/json\n    {\n      \"schemas\": \n      [\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n      \"Operations\":\n      [\n        {\n          \"op\":\"Add\",\n          \"path\":\"manager\",\n          \"value\":\n            [\n              {\n                \"$ref\":\"http://.../scim/Users/2819c223-7f76-453a-919d-413861904646\",\n                \"value\":\"2819c223-7f76-453a-919d-413861904646\"}]}]}\n\nThe Microsoft Common Language Infrastructure libraries for implementing SCIM services would translate the request into a call to the Update method of the service’s provider.  Here is the signature of that method: \n\n    // System.Threading.Tasks.Tasks and \n    // System.Collections.Generic.IReadOnlyCollection<T>\n    // are defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.IPatch, \n    // Microsoft.SystemForCrossDomainIdentityManagement.PatchRequestBase, \n    // Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier, \n    // Microsoft.SystemForCrossDomainIdentityManagement.PatchOperation, \n    // Microsoft.SystemForCrossDomainIdentityManagement.OperationName, \n    // Microsoft.SystemForCrossDomainIdentityManagement.IPath and \n    // Microsoft.SystemForCrossDomainIdentityManagement.OperationValue \n    // are all defined in Microsoft.SystemForCrossDomainIdentityManagement.Protocol. \n\n    System.Threading.Tasks.Task Update(\n      Microsoft.SystemForCrossDomainIdentityManagement.IPatch patch, \n      string correlationIdentifier);\n\n    public interface Microsoft.SystemForCrossDomainIdentityManagement.IPatch\n    {\n    Microsoft.SystemForCrossDomainIdentityManagement.PatchRequestBase \n      PatchRequest \n        { get; set; }\n    Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier \n      ResourceIdentifier \n        { get; set; }        \n    }\n\n    public class PatchRequest2: \n      Microsoft.SystemForCrossDomainIdentityManagement.PatchRequestBase\n    {\n    public System.Collections.Generic.IReadOnlyCollection\n      <Microsoft.SystemForCrossDomainIdentityManagement.PatchOperation> \n        Operations\n        { get;}\n\n    public void AddOperation(\n      Microsoft.SystemForCrossDomainIdentityManagement.PatchOperation operation);\n    }\n\n    public class PatchOperation\n    {\n    public Microsoft.SystemForCrossDomainIdentityManagement.OperationName \n      Name\n      { get; set; }\n    \n    public Microsoft.SystemForCrossDomainIdentityManagement.IPath \n      Path\n      { get; set; }\n\n    public System.Collections.Generic.IReadOnlyCollection\n      <Microsoft.SystemForCrossDomainIdentityManagement.OperationValue> Value\n      { get; }\n\n    public void AddValue(\n      Microsoft.SystemForCrossDomainIdentityManagement.OperationValue value);\n    }\n\n    public enum OperationName\n    {\n      Add,\n      Remove,\n      Replace\n    }\n\n    public interface IPath\n    {\n      string AttributePath { get; }\n      System.Collections.Generic.IReadOnlyCollection<IFilter> SubAttributes { get; }\n      Microsoft.SystemForCrossDomainIdentityManagement.IPath ValuePath { get; }\n    }\n\n    public class OperationValue\n    {\n      public string Reference\n      { get; set; }\n      \n      public string Value\n      { get; set; }\n    }\n\n\n\nIn the case of the foregoing example of a request to update a user, the object provided as the value of the patch argument will have these property values: \n\n* ResourceIdentifier.Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"\n* ResourceIdentifier.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n* (PatchRequest as PatchRequest2).Operations.Count: 1\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).OperationName: OperationName.Add\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).Path.AttributePath: \"manager\"\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.Count: 1\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.ElementAt(0).Reference: http://.../scim/Users/2819c223-7f76-453a-919d-413861904646\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.ElementAt(0).Value: 2819c223-7f76-453a-919d-413861904646\n\n**6:**  To de-provision a user from an identity store fronted by an SCIM service, Azure Active Directory will send a request like this one: \n\n    DELETE ~/scim/Users/54D382A4-2050-4C03-94D1-E769F1D15682 HTTP/1.1\n    Authorization: Bearer ...\n    \nIf the service was built using the Common Language Infrastructure libraries provided by Microsoft for implementing SCIM services, then the request will be translated into a call to the Delete method of the service’s provider.   That method has this signature: \n\n    // System.Threading.Tasks.Tasks is defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier, \n    // is defined in Microsoft.SystemForCrossDomainIdentityManagement.Protocol. \n    System.Threading.Tasks.Task Delete(\n      Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier  \n        resourceIdentifier, \n      string correlationIdentifier);\n \nThe object provided as the value of the resourceIdentifier argument will have these property values in the case of the foregoing example of a request to de-provision a user: \n\n* ResourceIdentifier.Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"\n* ResourceIdentifier.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n\n##Group Provisioning and De-Provisioning\n\nThe figure below shows the messages that Azure Active Directory will send to a SCIM service to manage the lifecycle of a group in another identity store.  Those messages differ from the messages pertaining to users in three ways: \n\n* The schema of a group resource will be identified as http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group.  \n* Requests to retrieve groups will stipulate that the members attribute is to be excluded from any resource provided in response to the request.  \n* Requests to determine whether a reference attribute has a certain value will be requests about the members attribute.  \n\n![][5]\n*Figure: Group provisioning and de-provisioning sequence*\n\n    \n<!--Image references-->\n[1]: ./media/active-directory-scim-provisioning/scim-figure-1.PNG\n[2]: ./media/active-directory-scim-provisioning/scim-figure-2.PNG\n[3]: ./media/active-directory-scim-provisioning/scim-figure-3.PNG\n[4]: ./media/active-directory-scim-provisioning/scim-figure-4.PNG\n[5]: ./media/active-directory-scim-provisioning/scim-figure-5.PNG\n\n\n"
}