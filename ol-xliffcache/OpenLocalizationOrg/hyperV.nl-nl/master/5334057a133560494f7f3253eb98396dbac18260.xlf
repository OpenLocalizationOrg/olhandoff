<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="nl-nl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5334057a133560494f7f3253eb98396dbac18260</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure AD AngularJS Getting Started | Microsoft Azure</source>
          <target state="new">Azure AD AngularJS Getting Started | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to build an Angular JS Single Page app that signs in users with both personal Microsoft accounts and work or school accounts.</source>
          <target state="new">How to build an Angular JS Single Page app that signs in users with both personal Microsoft accounts and work or school accounts.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>App model v2.0 preview: Add sign-in to an AngularJS single page app - .NET</source>
          <target state="new">App model v2.0 preview: Add sign-in to an AngularJS single page app - .NET</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this article we'll add sign in with Microsoft powered accounts to an AngularJS app using Azure Active Directory's app model v2.0.</source>
          <target state="new">In this article we'll add sign in with Microsoft powered accounts to an AngularJS app using Azure Active Directory's app model v2.0.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>App model v2.0 enables you to perform a single integration in your app and authenticate users with both personal and work/school accounts.</source>
          <target state="new">App model v2.0 enables you to perform a single integration in your app and authenticate users with both personal and work/school accounts.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This sample is a simple To-Do List single page app that stores tasks in a backend REST API, written using the .NET 4.5 MVC framework and secured using OAuth bearer tokens from Azure AD.</source>
          <target state="new">This sample is a simple To-Do List single page app that stores tasks in a backend REST API, written using the .NET 4.5 MVC framework and secured using OAuth bearer tokens from Azure AD.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The AngularJS app will use our open source JavaScript authentication library <bpt id="p1">[</bpt>adal.js<ept id="p1">](https://github.com/AzureAD/azure-activedirectory-library-for-js)</ept> to handle the entire sign in process and acquire tokens for calling the REST API.</source>
          <target state="new">The AngularJS app will use our open source JavaScript authentication library <bpt id="p1">[</bpt>adal.js<ept id="p1">](https://github.com/AzureAD/azure-activedirectory-library-for-js)</ept> to handle the entire sign in process and acquire tokens for calling the REST API.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The same pattern can be applied to authenticate to other REST APIs, like the <bpt id="p1">[</bpt>Microsoft Graph<ept id="p1">](https://graph.microsoft.com)</ept> or the Azure Resource Manager APIs.</source>
          <target state="new">The same pattern can be applied to authenticate to other REST APIs, like the <bpt id="p1">[</bpt>Microsoft Graph<ept id="p1">](https://graph.microsoft.com)</ept> or the Azure Resource Manager APIs.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Download</source>
          <target state="new">Download</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To get started, you'll need to download &amp; install Visual Studio.</source>
          <target state="new">To get started, you'll need to download &amp; install Visual Studio.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Then you can clone or <bpt id="p1">[</bpt>download<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-SinglePageApp-AngularJS-DotNet/archive/skeleton.zip)</ept> a skeleton app:</source>
          <target state="new">Then you can clone or <bpt id="p1">[</bpt>download<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-SinglePageApp-AngularJS-DotNet/archive/skeleton.zip)</ept> a skeleton app:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The skeleton app includes all the boilerplate code for a simple AngularJS app, but is missing all of the identity-related pieces.</source>
          <target state="new">The skeleton app includes all the boilerplate code for a simple AngularJS app, but is missing all of the identity-related pieces.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you don't want to follow along, you can instead clone or <bpt id="p1">[</bpt>download<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-SinglePageApp-AngularJS-DotNet/archive/complete.zip)</ept> the completed sample.</source>
          <target state="new">If you don't want to follow along, you can instead clone or <bpt id="p1">[</bpt>download<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-SinglePageApp-AngularJS-DotNet/archive/complete.zip)</ept> the completed sample.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Register an app</source>
          <target state="new">Register an app</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>First, create an app in the <bpt id="p1">[</bpt>App Registration Portal<ept id="p1">](https://apps.dev.microsoft.com)</ept>, or follow these <bpt id="p2">[</bpt>detailed steps<ept id="p2">](active-directory-v2-app-registration.md)</ept>.</source>
          <target state="new">First, create an app in the <bpt id="p1">[</bpt>App Registration Portal<ept id="p1">](https://apps.dev.microsoft.com)</ept>, or follow these <bpt id="p2">[</bpt>detailed steps<ept id="p2">](active-directory-v2-app-registration.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Make sure to:</source>
          <target state="new">Make sure to:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Add the <bpt id="p1">**</bpt>Web<ept id="p1">**</ept> platform for your app.</source>
          <target state="new">Add the <bpt id="p1">**</bpt>Web<ept id="p1">**</ept> platform for your app.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Enter the correct <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept>.</source>
          <target state="new">Enter the correct <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default for this sample is <ph id="ph1">`https://localhost:44326/`</ph>.</source>
          <target state="new">The default for this sample is <ph id="ph1">`https://localhost:44326/`</ph>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Leave the <bpt id="p1">**</bpt>Allow Implicit Flow<ept id="p1">**</ept> checkbox enabled.</source>
          <target state="new">Leave the <bpt id="p1">**</bpt>Allow Implicit Flow<ept id="p1">**</ept> checkbox enabled.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Copy down the <bpt id="p1">**</bpt>Application ID<ept id="p1">**</ept> that is assigned to your app, you'll need it shortly.</source>
          <target state="new">Copy down the <bpt id="p1">**</bpt>Application ID<ept id="p1">**</ept> that is assigned to your app, you'll need it shortly.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Install adal.js</source>
          <target state="new">Install adal.js</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To start, navigate to project you downloaded and install adal.js.</source>
          <target state="new">To start, navigate to project you downloaded and install adal.js.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you have <bpt id="p1">[</bpt>bower<ept id="p1">](http://bower.io/)</ept> installed, you can just run this command.</source>
          <target state="new">If you have <bpt id="p1">[</bpt>bower<ept id="p1">](http://bower.io/)</ept> installed, you can just run this command.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For any dependency version mismatches, just choose the higher version.</source>
          <target state="new">For any dependency version mismatches, just choose the higher version.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Alternatively, you can manually download <bpt id="p1">[</bpt>adal.js<ept id="p1">](https://raw.githubusercontent.com/AzureAD/azure-activedirectory-library-for-js/experimental/dist/adal.min.js)</ept> and <bpt id="p2">[</bpt>adal-angular.js<ept id="p2">](https://raw.githubusercontent.com/AzureAD/azure-activedirectory-library-for-js/experimental/dist/adal-angular.min.js)</ept>.</source>
          <target state="new">Alternatively, you can manually download <bpt id="p1">[</bpt>adal.js<ept id="p1">](https://raw.githubusercontent.com/AzureAD/azure-activedirectory-library-for-js/experimental/dist/adal.min.js)</ept> and <bpt id="p2">[</bpt>adal-angular.js<ept id="p2">](https://raw.githubusercontent.com/AzureAD/azure-activedirectory-library-for-js/experimental/dist/adal-angular.min.js)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add both files to the <ph id="ph1">`app/lib/adal-angular-experimental/dist`</ph> directory of the <ph id="ph2">`TodoSPA`</ph> project.</source>
          <target state="new">Add both files to the <ph id="ph1">`app/lib/adal-angular-experimental/dist`</ph> directory of the <ph id="ph2">`TodoSPA`</ph> project.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Now open the project in Visual Studio, and load adal.js at the end of the main page's body:</source>
          <target state="new">Now open the project in Visual Studio, and load adal.js at the end of the main page's body:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Set up the REST API</source>
          <target state="new">Set up the REST API</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>While we're setting things up, let's get the backend REST API working.</source>
          <target state="new">While we're setting things up, let's get the backend REST API working.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the root of the project, open <ph id="ph1">`web.config`</ph> and replace the <ph id="ph2">`audience`</ph> value.</source>
          <target state="new">In the root of the project, open <ph id="ph1">`web.config`</ph> and replace the <ph id="ph2">`audience`</ph> value.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The REST API will use this value to validate tokens it receives from the Angular app on AJAX requests.</source>
          <target state="new">The REST API will use this value to validate tokens it receives from the Angular app on AJAX requests.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>That's all the time we're going to spend discussing how the REST API works.</source>
          <target state="new">That's all the time we're going to spend discussing how the REST API works.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Feel free to poke around in the code, but if you want to learn more about securing web APIs with Azure AD, check out <bpt id="p1">[</bpt>this article<ept id="p1">](active-directory-v2-devquickstarts-dotnet-api.md)</ept>.</source>
          <target state="new">Feel free to poke around in the code, but if you want to learn more about securing web APIs with Azure AD, check out <bpt id="p1">[</bpt>this article<ept id="p1">](active-directory-v2-devquickstarts-dotnet-api.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sign Users In</source>
          <target state="new">Sign Users In</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Time to write some identity code.</source>
          <target state="new">Time to write some identity code.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You might have already noticed that adal.js contains an AngularJS provider, which plays nicely with Angular routing mechanisms.</source>
          <target state="new">You might have already noticed that adal.js contains an AngularJS provider, which plays nicely with Angular routing mechanisms.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Start by adding the adal module to the app:</source>
          <target state="new">Start by adding the adal module to the app:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can now initialize the <ph id="ph1">`adalProvider`</ph> with your Application ID:</source>
          <target state="new">You can now initialize the <ph id="ph1">`adalProvider`</ph> with your Application ID:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Great, now adal.js has all the information it needs to secure your app and sign users in.</source>
          <target state="new">Great, now adal.js has all the information it needs to secure your app and sign users in.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To force sign in for a particular route in the app, all it takes is one line of code:</source>
          <target state="new">To force sign in for a particular route in the app, all it takes is one line of code:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Now when a user clicks the <ph id="ph1">`TodoList`</ph> link, adal.js will automatically redirect to Azure AD for sign-in if necessary.</source>
          <target state="new">Now when a user clicks the <ph id="ph1">`TodoList`</ph> link, adal.js will automatically redirect to Azure AD for sign-in if necessary.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also explicitly send sign-in and sign-out requests by invoking adal.js in your controllers:</source>
          <target state="new">You can also explicitly send sign-in and sign-out requests by invoking adal.js in your controllers:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Display User Info</source>
          <target state="new">Display User Info</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Now that the user is signed in, you'll probably need to access the signed-in user's authentication data in your application.</source>
          <target state="new">Now that the user is signed in, you'll probably need to access the signed-in user's authentication data in your application.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Adal.js exposes this information for you in the <ph id="ph1">`userInfo`</ph> object.</source>
          <target state="new">Adal.js exposes this information for you in the <ph id="ph1">`userInfo`</ph> object.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To access this object in a view, first add adal.js to the root scope of the corresponding controller:</source>
          <target state="new">To access this object in a view, first add adal.js to the root scope of the corresponding controller:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Then you can directly address the <ph id="ph1">`userInfo`</ph> object in your view:</source>
          <target state="new">Then you can directly address the <ph id="ph1">`userInfo`</ph> object in your view:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`userInfo`</ph> object to determine if the user is signed in or not.</source>
          <target state="new">You can also use the <ph id="ph1">`userInfo`</ph> object to determine if the user is signed in or not.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Call the REST API</source>
          <target state="new">Call the REST API</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Finally, it's time to get some tokens and call the REST API to create, read, update, and delete tasks.</source>
          <target state="new">Finally, it's time to get some tokens and call the REST API to create, read, update, and delete tasks.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Well guess what?</source>
          <target state="new">Well guess what?</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You don't have to do <bpt id="p1">*</bpt>a thing<ept id="p1">*</ept>.</source>
          <target state="new">You don't have to do <bpt id="p1">*</bpt>a thing<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Adal.js will automatically take care of getting, caching, and refreshing tokens.</source>
          <target state="new">Adal.js will automatically take care of getting, caching, and refreshing tokens.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It will also take care of attaching those tokens to outgoing AJAX requests that you send to the REST API.</source>
          <target state="new">It will also take care of attaching those tokens to outgoing AJAX requests that you send to the REST API.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>How exactly does this work?</source>
          <target state="new">How exactly does this work?</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It's all thanks to the magic of <bpt id="p1">[</bpt>AngularJS interceptors<ept id="p1">](https://docs.angularjs.org/api/ng/service/$http)</ept>, which allows adal.js to transform outgoing and incoming http messages.</source>
          <target state="new">It's all thanks to the magic of <bpt id="p1">[</bpt>AngularJS interceptors<ept id="p1">](https://docs.angularjs.org/api/ng/service/$http)</ept>, which allows adal.js to transform outgoing and incoming http messages.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Furthermore, adal.js assumes that any requests send to the same domain as the window should use tokens intended for the same Application ID as the AngularJS app.</source>
          <target state="new">Furthermore, adal.js assumes that any requests send to the same domain as the window should use tokens intended for the same Application ID as the AngularJS app.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is why we used the same Application ID in both the Angular app and in the NodeJS REST API.</source>
          <target state="new">This is why we used the same Application ID in both the Angular app and in the NodeJS REST API.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Of course, you can override this behavior and tell adal.js to get tokens for other REST APIs if necessary - but for this simple scenario the defaults will do.</source>
          <target state="new">Of course, you can override this behavior and tell adal.js to get tokens for other REST APIs if necessary - but for this simple scenario the defaults will do.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Here's a snippet that shows how easy it is to send requests with bearer tokens from Azure AD:</source>
          <target state="new">Here's a snippet that shows how easy it is to send requests with bearer tokens from Azure AD:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
          <target state="new">Congratulations!</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Your Azure AD integrated single page app is now complete.</source>
          <target state="new">Your Azure AD integrated single page app is now complete.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Go ahead, take a bow.</source>
          <target state="new">Go ahead, take a bow.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It can authenticate users, securely call its backend REST API using OpenID Connect, and get basic information about the user.</source>
          <target state="new">It can authenticate users, securely call its backend REST API using OpenID Connect, and get basic information about the user.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Out of the box, it supports any user with a personal Microsoft Account or a work/school account from Azure AD.</source>
          <target state="new">Out of the box, it supports any user with a personal Microsoft Account or a work/school account from Azure AD.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Run the app, and in a browser navigate to <ph id="ph1">`https://localhost:44326/`</ph>.</source>
          <target state="new">Run the app, and in a browser navigate to <ph id="ph1">`https://localhost:44326/`</ph>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Sign in using either a personal Microsoft account or a work/school account.</source>
          <target state="new">Sign in using either a personal Microsoft account or a work/school account.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Add tasks to the user's to-do list, and sign out.</source>
          <target state="new">Add tasks to the user's to-do list, and sign out.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Try signing in with the other type of account.</source>
          <target state="new">Try signing in with the other type of account.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you need an Azure AD tenant to create work/school users, <bpt id="p1">[</bpt>learn how to get one here<ept id="p1">](active-directory-howto-tenant.md)</ept> (it's free).</source>
          <target state="new">If you need an Azure AD tenant to create work/school users, <bpt id="p1">[</bpt>learn how to get one here<ept id="p1">](active-directory-howto-tenant.md)</ept> (it's free).</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To continue learning about the app model v2.0 preview, head back to our <bpt id="p1">[</bpt>v2.0 developer guide<ept id="p1">](active-directory-appmodel-v2-overview.md)</ept>.</source>
          <target state="new">To continue learning about the app model v2.0 preview, head back to our <bpt id="p1">[</bpt>v2.0 developer guide<ept id="p1">](active-directory-appmodel-v2-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For additional resources, check out:</source>
          <target state="new">For additional resources, check out:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Azure-Samples on GitHub &gt;&gt;</source>
          <target state="new">Azure-Samples on GitHub &gt;&gt;</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Azure AD on Stack Overflow &gt;&gt;</source>
          <target state="new">Azure AD on Stack Overflow &gt;&gt;</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Azure AD documentation on <bpt id="p1">[</bpt>Azure.com &gt;&gt;<ept id="p1">](http://azure.microsoft.com/documentation/services/active-directory/)</ept></source>
          <target state="new">Azure AD documentation on <bpt id="p1">[</bpt>Azure.com &gt;&gt;<ept id="p1">](http://azure.microsoft.com/documentation/services/active-directory/)</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>