<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="nl-nl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f83b225b0a6cf106df5606217791d95a5e9c7948</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using the Azure Machine Learning Connector in Logic Apps | Microsoft Azure App Service</source>
          <target state="new">Using the Azure Machine Learning Connector in Logic Apps | Microsoft Azure App Service</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to create and configure the Azure Machine Learning Connector and use it in a logic app in Azure App Service</source>
          <target state="new">How to create and configure the Azure Machine Learning Connector and use it in a logic app in Azure App Service</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Azure ML Connector for Logic Apps enables calling Azure ML APIs for batch scoring (Batch Execution Service) and retraining.</source>
          <target state="new">The Azure ML Connector for Logic Apps enables calling Azure ML APIs for batch scoring (Batch Execution Service) and retraining.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These features in combination with Logic App Triggers enable scheduling batch jobs and setting up scheduled retraining of models.</source>
          <target state="new">These features in combination with Logic App Triggers enable scheduling batch jobs and setting up scheduled retraining of models.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Get started with the Azure Machine Learning Connector and add it to your Logic App</source>
          <target state="new">Get started with the Azure Machine Learning Connector and add it to your Logic App</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To get started, create an experiment in Azure ML Studio, then set up and deploy a web service.</source>
          <target state="new">To get started, create an experiment in Azure ML Studio, then set up and deploy a web service.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can then use the API URL and Key of the BES Post URL found on the Batch Exaction Help page.</source>
          <target state="new">You can then use the API URL and Key of the BES Post URL found on the Batch Exaction Help page.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>more info<ept id="p1">](https://github.com/Azure/azure-content/blob/master/articles/machine-learning/machine-learning-walkthrough-5-publish-web-service.md)</ept>)</source>
          <target state="new">(<bpt id="p1">[</bpt>more info<ept id="p1">](https://github.com/Azure/azure-content/blob/master/articles/machine-learning/machine-learning-walkthrough-5-publish-web-service.md)</ept>)</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To run a BES job using the Connector, add the Azure ML Connector to your Logic App.</source>
          <target state="new">To run a BES job using the Connector, add the Azure ML Connector to your Logic App.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Then enter the required info (see below for more on that).</source>
          <target state="new">Then enter the required info (see below for more on that).</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To set up Retraining, add a second Azure ML Connector and provide the input parameters (see <bpt id="p1">[</bpt>here<ept id="p1">](machine-learning-retrain-models-programmatically.md)</ept> for more on setting a model up for retraining).</source>
          <target state="new">To set up Retraining, add a second Azure ML Connector and provide the input parameters (see <bpt id="p1">[</bpt>here<ept id="p1">](machine-learning-retrain-models-programmatically.md)</ept> for more on setting a model up for retraining).</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Running an Azure ML Batch Execution Job</source>
          <target state="new">Running an Azure ML Batch Execution Job</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Azure ML Connector provides the following four options for running Batch Execution (BES) jobs:</source>
          <target state="new">The Azure ML Connector provides the following four options for running Batch Execution (BES) jobs:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Batch Job With Input and Output: Experiment has web service input and output modules</source>
          <target state="new">Batch Job With Input and Output: Experiment has web service input and output modules</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Batch Job No Input and Output: Experiment does not have web service input or output module (e.g. uses Reader and Writer modules)</source>
          <target state="new">Batch Job No Input and Output: Experiment does not have web service input or output module (e.g. uses Reader and Writer modules)</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Batch Job With only Input: Experiment has a web service input module, but no web service output module (e.g. uses a Writer module)</source>
          <target state="new">Batch Job With only Input: Experiment has a web service input module, but no web service output module (e.g. uses a Writer module)</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Batch Job With only Output: Experiment has no web service input module, but has a web service output module (e.g. uses a Reader module)</source>
          <target state="new">Batch Job With only Output: Experiment has no web service input module, but has a web service output module (e.g. uses a Reader module)</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note that BES is an asynchronous request and could take time to complete depending on the size of your data and the complexity of the model.</source>
          <target state="new">Note that BES is an asynchronous request and could take time to complete depending on the size of your data and the complexity of the model.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When the job is completed, the Connector will return the output result.</source>
          <target state="new">When the job is completed, the Connector will return the output result.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Run Batch Execution: with Input and Output</source>
          <target state="new">Run Batch Execution: with Input and Output</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the Studio Experiment has web service input and output modules, you need to provide information on the Storage blob account and location (<bpt id="p1">[</bpt>more here<ept id="p1">](machine-learning-consume-web-services.md)</ept>).</source>
          <target state="new">If the Studio Experiment has web service input and output modules, you need to provide information on the Storage blob account and location (<bpt id="p1">[</bpt>more here<ept id="p1">](machine-learning-consume-web-services.md)</ept>).</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In addition, you can include Global (web service) Parameters if set up in your experiment (<bpt id="p1">[</bpt>more here<ept id="p1">](machine-learning-web-service-parameters.md)</ept>).</source>
          <target state="new">In addition, you can include Global (web service) Parameters if set up in your experiment (<bpt id="p1">[</bpt>more here<ept id="p1">](machine-learning-web-service-parameters.md)</ept>).</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Click on ellipsis to show and hide the Global Parameter fields.</source>
          <target state="new">Click on ellipsis to show and hide the Global Parameter fields.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This lets you provide one or more global (web service) parameters in a comma separated list of fields and values.</source>
          <target state="new">This lets you provide one or more global (web service) parameters in a comma separated list of fields and values.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Other variations on BES jobs, such as a job with no web service input or output, are also available through the Connector.</source>
          <target state="new">Other variations on BES jobs, such as a job with no web service input or output, are also available through the Connector.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Setting up Retraining</source>
          <target state="new">Setting up Retraining</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use the Set Up Retraining action to set up a one-time or scheduled retraining of your ML model.</source>
          <target state="new">Use the Set Up Retraining action to set up a one-time or scheduled retraining of your ML model.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In combination with a Batch Execution job created from the Connector, you can complete the steps for training and updating a web service’s model.</source>
          <target state="new">In combination with a Batch Execution job created from the Connector, you can complete the steps for training and updating a web service’s model.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this workflow, you would use the Connector twice.</source>
          <target state="new">In this workflow, you would use the Connector twice.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The first Connector is used to run the BES job to retrain your model and return the output.</source>
          <target state="new">The first Connector is used to run the BES job to retrain your model and return the output.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The output of this run will have the URL of the new model (.ilearner).</source>
          <target state="new">The output of this run will have the URL of the new model (.ilearner).</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can also optionally - if you have set it up in your experiment – return the URL of the output of the Evaluate module which is a csv file.</source>
          <target state="new">It can also optionally - if you have set it up in your experiment – return the URL of the output of the Evaluate module which is a csv file.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the next step, you can use the data in the Evaluate module output to make a decision on whether or not to replace the model in your web service (e.g. if Accuracy &gt; 0.85).</source>
          <target state="new">In the next step, you can use the data in the Evaluate module output to make a decision on whether or not to replace the model in your web service (e.g. if Accuracy &gt; 0.85).</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The second Connector is used to set up Retraining.</source>
          <target state="new">The second Connector is used to set up Retraining.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It uses parameters from the output of the first Connector to optionally check for the update model condition and update the web service with the newly trained model.</source>
          <target state="new">It uses parameters from the output of the first Connector to optionally check for the update model condition and update the web service with the newly trained model.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>As an example, you can access the output of the BES Job with the URL to the newly trained model by entering <ph id="ph1">`@{body('besconnector').Results.output2.FullURL}`</ph> in the Retrained Model URL field.</source>
          <target state="new">As an example, you can access the output of the BES Job with the URL to the newly trained model by entering <ph id="ph1">`@{body('besconnector').Results.output2.FullURL}`</ph> in the Retrained Model URL field.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This assumes that the web service output in your Training Experiment is called output2.</source>
          <target state="new">This assumes that the web service output in your Training Experiment is called output2.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For the Resource Name, use the full name of the saved Trained Model in the Predictive Experiment e.g. MyTrainedModel [trained model]</source>
          <target state="new">For the Resource Name, use the full name of the saved Trained Model in the Predictive Experiment e.g. MyTrainedModel [trained model]</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For the Evaluation Result Key field, you can enter any of the parameters returned in the output of the Evaluate Module of the Training Experiment (if you have included it).</source>
          <target state="new">For the Evaluation Result Key field, you can enter any of the parameters returned in the output of the Evaluate Module of the Training Experiment (if you have included it).</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can see the list of available parameters by visualizing the results of the Evaluate module in the Training Experiment in Azure ML Studio.</source>
          <target state="new">You can see the list of available parameters by visualizing the results of the Evaluate module in the Training Experiment in Azure ML Studio.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For a classification experiment, these would include Accuracy, Precision, Recall, F-Score, AUC, Average Log Loss, and Training Log Loss.</source>
          <target state="new">For a classification experiment, these would include Accuracy, Precision, Recall, F-Score, AUC, Average Log Loss, and Training Log Loss.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Scheduled Retraining</source>
          <target state="new">Scheduled Retraining</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Using Logic App Triggers, you can set up the Connector to run on a schedule.</source>
          <target state="new">Using Logic App Triggers, you can set up the Connector to run on a schedule.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This can enable retraining a model on a regular basis as new data arrives.</source>
          <target state="new">This can enable retraining a model on a regular basis as new data arrives.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The BES job would retrain the model, and the Retraining action would update the model after the retraining is completed.</source>
          <target state="new">The BES job would retrain the model, and the Retraining action would update the model after the retraining is completed.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Connector Output</source>
          <target state="new">Connector Output</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BES<ept id="p1">**</ept>: After the Batch job completes successfully, the Connector output will have the following information for each web service output.</source>
          <target state="new"><bpt id="p1">**</bpt>BES<ept id="p1">**</ept>: After the Batch job completes successfully, the Connector output will have the following information for each web service output.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Note that this will not be available if you have not included a web service output (e.g. you are using a Writer Module to write to a DB from the Experiment in the Studio).</source>
          <target state="new">Note that this will not be available if you have not included a web service output (e.g. you are using a Writer Module to write to a DB from the Experiment in the Studio).</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Retraining<ept id="p1">**</ept>: After Retraining completes successfully, the output will have the following info.</source>
          <target state="new"><bpt id="p1">**</bpt>Retraining<ept id="p1">**</ept>: After Retraining completes successfully, the output will have the following info.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Using the Azure ML Connector for Logic Apps, you can run batch scoring and retraining jobs to be executed on demand or on a recurring schedule.</source>
          <target state="new">Using the Azure ML Connector for Logic Apps, you can run batch scoring and retraining jobs to be executed on demand or on a recurring schedule.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The combination of the two actions can automatically, score your data, and retrain, evaluate, and update your web service’s model without a need to write any code.</source>
          <target state="new">The combination of the two actions can automatically, score your data, and retrain, evaluate, and update your web service’s model without a need to write any code.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>