{
  "nodes": [
    {
      "pos": [
        2,
        56
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create a Client Connection"
    },
    {
      "content": "Create a client connection by creating a <ph id=\"ph1\">`WindowsAzure.MobileServiceClient`</ph> object.",
      "pos": [
        58,
        141
      ]
    },
    {
      "content": "Replace <ph id=\"ph1\">`appUrl`</ph> with the URL to your Mobile App.",
      "pos": [
        143,
        192
      ]
    },
    {
      "pos": [
        260,
        306
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"table-reference\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Work with Tables"
    },
    {
      "content": "To access or update data, create a reference to the backend table.",
      "pos": [
        308,
        374
      ]
    },
    {
      "content": "Replace <ph id=\"ph1\">`tableName`</ph> with the name of your table",
      "pos": [
        375,
        422
      ]
    },
    {
      "content": "Once you have a table reference, you can work further with your table:",
      "pos": [
        473,
        543
      ]
    },
    {
      "content": "Query a Table",
      "pos": [
        548,
        561
      ]
    },
    {
      "content": "Filtering Data",
      "pos": [
        579,
        593
      ]
    },
    {
      "content": "Paging through Data",
      "pos": [
        615,
        634
      ]
    },
    {
      "content": "Sorting Data",
      "pos": [
        656,
        668
      ]
    },
    {
      "content": "Inserting Data",
      "pos": [
        688,
        702
      ]
    },
    {
      "content": "Modifying Data",
      "pos": [
        719,
        733
      ]
    },
    {
      "content": "Deleting Data",
      "pos": [
        750,
        763
      ]
    },
    {
      "pos": [
        780,
        834
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"querying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Query a Table Reference"
    },
    {
      "content": "Once you have a table reference, you can use it to query for data on the server.",
      "pos": [
        836,
        916
      ]
    },
    {
      "content": "Queries are made in a \"LINQ-like\" language.",
      "pos": [
        918,
        961
      ]
    },
    {
      "content": "To return all data from the table, use the following:",
      "pos": [
        962,
        1015
      ]
    },
    {
      "content": "The success function is called with the results.",
      "pos": [
        1621,
        1669
      ]
    },
    {
      "content": "Do not use <ph id=\"ph1\">`for (var i in results)`</ph> in",
      "pos": [
        1672,
        1710
      ]
    },
    {
      "content": "the success function as that will iterate over information that is included in the results",
      "pos": [
        1711,
        1801
      ]
    },
    {
      "content": "when other query functions (such as <ph id=\"ph1\">`.includeTotalCount()`</ph>) are used.",
      "pos": [
        1802,
        1871
      ]
    },
    {
      "content": "For more information on the Query syntax, refer to the [Query object documentation].",
      "pos": [
        1873,
        1957
      ]
    },
    {
      "pos": [
        1963,
        2018
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"table-filter\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Filtering Data on the server"
    },
    {
      "pos": [
        2020,
        2072
      ],
      "content": "You can use a <ph id=\"ph1\">`where`</ph> clause on the table reference:"
    },
    {
      "content": "You can also use a function that filters the object.",
      "pos": [
        2183,
        2235
      ]
    },
    {
      "content": "In this case the <ph id=\"ph1\">`this`</ph> variable is assigned to the",
      "pos": [
        2237,
        2288
      ]
    },
    {
      "content": "current object being filtered.",
      "pos": [
        2289,
        2319
      ]
    },
    {
      "content": "The following is functionally equivalent to the prior example:",
      "pos": [
        2321,
        2383
      ]
    },
    {
      "pos": [
        2598,
        2644
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"table-paging\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Paging through data"
    },
    {
      "content": "Utilize the take() and skip() methods.",
      "pos": [
        2646,
        2684
      ]
    },
    {
      "content": "For example, if you wish to split the table into 100-row records:",
      "pos": [
        2686,
        2751
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`.includeTotalCount()`</ph> method is used to add a totalCount field to the results object.",
      "pos": [
        3263,
        3353
      ]
    },
    {
      "content": "The",
      "pos": [
        3355,
        3358
      ]
    },
    {
      "content": "totalCount field is filled with the total number of records that would be returned if no paging",
      "pos": [
        3359,
        3454
      ]
    },
    {
      "content": "is used.",
      "pos": [
        3455,
        3463
      ]
    },
    {
      "content": "You can then use the pages variable and some UI buttons to provide a page list; use loadPage() to",
      "pos": [
        3465,
        3562
      ]
    },
    {
      "content": "load the new records for each page.",
      "pos": [
        3563,
        3598
      ]
    },
    {
      "content": "You should implement some sort of caching to speed access to",
      "pos": [
        3600,
        3660
      ]
    },
    {
      "content": "records that have already been loaded.",
      "pos": [
        3661,
        3699
      ]
    },
    {
      "pos": [
        3706,
        3759
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"sorting-data\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Return data sorted"
    },
    {
      "content": "Use the .orderBy() or .orderByDescending() query methods:",
      "pos": [
        3761,
        3818
      ]
    },
    {
      "content": "For more information on the Query object, refer to the [Query object documentation].",
      "pos": [
        3897,
        3981
      ]
    },
    {
      "pos": [
        3986,
        4029
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"inserting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Insert Data"
    },
    {
      "content": "Create a JavaScript object with the appropriate date and call table.insert() asynchronously:",
      "pos": [
        4031,
        4123
      ]
    },
    {
      "content": "On successful insertion, the inserted item is returned with the additional fields that are required",
      "pos": [
        4316,
        4415
      ]
    },
    {
      "content": "for sync operations.",
      "pos": [
        4416,
        4436
      ]
    },
    {
      "content": "You should update your own cache with this information for later updates.",
      "pos": [
        4438,
        4511
      ]
    },
    {
      "content": "Note that the Azure Mobile Apps Node.js Server SDK supports dynamic schema for development purposes.",
      "pos": [
        4513,
        4613
      ]
    },
    {
      "content": "In the case of dynamic schema, the schema of the table is updated on the fly, allowing you to add",
      "pos": [
        4614,
        4711
      ]
    },
    {
      "content": "columns to the table just by specifying them in an insert or update operation.",
      "pos": [
        4712,
        4790
      ]
    },
    {
      "content": "We recommend that",
      "pos": [
        4792,
        4809
      ]
    },
    {
      "content": "you turn off dynamic schema before moving your application to production.",
      "pos": [
        4810,
        4883
      ]
    },
    {
      "pos": [
        4888,
        4931
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"modifying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Modify Data"
    },
    {
      "content": "Similar to the .insert() method, you should create an Update object and then call .update().",
      "pos": [
        4933,
        5025
      ]
    },
    {
      "content": "The update",
      "pos": [
        5027,
        5037
      ]
    },
    {
      "content": "object must contain the ID of the record to be updated - this is obtained when reading the record or",
      "pos": [
        5038,
        5138
      ]
    },
    {
      "content": "when calling .insert().",
      "pos": [
        5139,
        5162
      ]
    },
    {
      "pos": [
        5400,
        5442
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"deleting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Delete Data"
    },
    {
      "content": "Call the .del() method to delete a record.",
      "pos": [
        5444,
        5486
      ]
    },
    {
      "content": "Pass the ID in an object reference:",
      "pos": [
        5488,
        5523
      ]
    }
  ],
  "content": "##<a name=\"create-client\"></a>Create a Client Connection\n\nCreate a client connection by creating a `WindowsAzure.MobileServiceClient` object.  Replace `appUrl` with the URL to your Mobile App.\n\n```\nvar client = WindowsAzure.MobileServiceClient(appUrl);\n```\n\n##<a name=\"table-reference\"></a>Work with Tables\n\nTo access or update data, create a reference to the backend table. Replace `tableName` with the name of your table\n\n```\nvar table = client.getTable(tableName);\n```\n\nOnce you have a table reference, you can work further with your table:\n\n* [Query a Table](#querying)\n  * [Filtering Data](#table-filter)\n  * [Paging through Data](#table-paging)\n  * [Sorting Data](#sorting-data)\n* [Inserting Data](#inserting)\n* [Modifying Data](#modifying)\n* [Deleting Data](#deleting)\n\n###<a name=\"querying\"></a>How to: Query a Table Reference\n\nOnce you have a table reference, you can use it to query for data on the server.  Queries are made in a \"LINQ-like\" language.\nTo return all data from the table, use the following:\n\n```\n/**\n * Process the results that are received by a call to table.read()\n *\n * @param {Object} results the results as a pseudo-array\n * @param {int} results.length the length of the results array\n * @param {Object} results[] the individual results\n */\nfunction success(results) {\n   var numItemsRead = results.length;\n\n   for (var i = 0 ; i < results.length ; i++) {\n       var row = results[i];\n       // Each row is an object - the properties are the columns\n   }\n}\n\nfunction failure(error) {\n    throw new Error('Error loading data: ', error);\n}\n\ntable\n    .read()\n    .then(success, failure);\n```\n\nThe success function is called with the results.   Do not use `for (var i in results)` in\nthe success function as that will iterate over information that is included in the results\nwhen other query functions (such as `.includeTotalCount()`) are used.\n\nFor more information on the Query syntax, refer to the [Query object documentation].\n\n####<a name=\"table-filter\"></a>Filtering Data on the server\n\nYou can use a `where` clause on the table reference:\n\n```\ntable\n    .where({ userId: user.userId, complete: false })\n    .read()\n    .then(success, failure);\n```\n\nYou can also use a function that filters the object.  In this case the `this` variable is assigned to the\ncurrent object being filtered.  The following is functionally equivalent to the prior example:\n\n```\nfunction filterByUserId(currentUserId) {\n    return this.userId === currentUserId && this.complete === false;\n}\n\ntable\n    .where(filterByUserId, user.userId)\n    .read()\n    .then(success, failure);\n```\n\n####<a name=\"table-paging\"></a>Paging through data\n\nUtilize the take() and skip() methods.  For example, if you wish to split the table into 100-row records:\n\n```\nvar totalCount = 0, pages = 0;\n\n// Step 1 - get the total number of records\ntable.includeTotalCount().take(0).read(function (results) {\n    totalCount = results.totalCount;\n    pages = Math.floor(totalCount/100) + 1;\n    loadPage(0);\n}, failure);\n\nfunction loadPage(pageNum) {\n    let skip = pageNum * 100;\n    table.skip(skip).take(100).read(function (results) {\n        for (var i = 0 ; i < results.length ; i++) {\n            var row = results[i];\n            // Process each row\n        }\n    }\n}\n```\n\nThe `.includeTotalCount()` method is used to add a totalCount field to the results object.  The\ntotalCount field is filled with the total number of records that would be returned if no paging\nis used.\n\nYou can then use the pages variable and some UI buttons to provide a page list; use loadPage() to\nload the new records for each page.  You should implement some sort of caching to speed access to\nrecords that have already been loaded.\n\n\n####<a name=\"sorting-data\"></a>How to: Return data sorted\n\nUse the .orderBy() or .orderByDescending() query methods:\n\n```\ntable\n    .orderBy('name')\n    .read()\n    .then(success, failure);\n```\n\nFor more information on the Query object, refer to the [Query object documentation].\n\n###<a name=\"inserting\"></a>How to: Insert Data\n\nCreate a JavaScript object with the appropriate date and call table.insert() asynchronously:\n\n```\nvar newItem = {\n    name: 'My Name',\n    signupDate: new Date()\n};\n\ntable\n    .insert(newItem)\n    .done(function (insertedItem) {\n        var id = insertedItem.id;\n    }, failure);\n```\n\nOn successful insertion, the inserted item is returned with the additional fields that are required\nfor sync operations.  You should update your own cache with this information for later updates.\n\nNote that the Azure Mobile Apps Node.js Server SDK supports dynamic schema for development purposes.\nIn the case of dynamic schema, the schema of the table is updated on the fly, allowing you to add\ncolumns to the table just by specifying them in an insert or update operation.  We recommend that\nyou turn off dynamic schema before moving your application to production.\n\n###<a name=\"modifying\"></a>How to: Modify Data\n\nSimilar to the .insert() method, you should create an Update object and then call .update().  The update\nobject must contain the ID of the record to be updated - this is obtained when reading the record or\nwhen calling .insert().\n\n```\nvar updateItem = {\n    id: '7163bc7a-70b2-4dde-98e9-8818969611bd',\n    name: 'My New Name'\n};\n\ntable\n    .update(updateItem)\n    .done(function (updatedItem) {\n        // You can now update your cached copy\n    }, failure);\n```\n\n###<a name=\"deleting\"></a>How to: Delete Data\n\nCall the .del() method to delete a record.  Pass the ID in an object reference:\n\n```\ntable\n    .del({ id: '7163bc7a-70b2-4dde-98e9-8818969611bd' })\n    .done(function () {\n        // Record is now deleted - update your cache\n    }, failure);\n```\n"
}