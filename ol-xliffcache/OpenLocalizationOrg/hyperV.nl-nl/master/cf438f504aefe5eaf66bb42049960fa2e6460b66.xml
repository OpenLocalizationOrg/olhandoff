{
  "nodes": [
    {
      "pos": [
        4,
        81
      ],
      "content": "In the MainPage.xaml.cs project file, add the following <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statements:"
    },
    {
      "pos": [
        164,
        229
      ],
      "content": "Replace the <bpt id=\"p1\">**</bpt>AuthenticateAsync<ept id=\"p1\">**</ept> method with the following code:"
    },
    {
      "content": "In this version of <bpt id=\"p1\">**</bpt>AuthenticateAsync<ept id=\"p1\">**</ept>, the app tries to use credentials stored in the <bpt id=\"p2\">**</bpt>PasswordVault<ept id=\"p2\">**</ept> to access the service.",
      "pos": [
        2758,
        2887
      ]
    },
    {
      "content": "A regular sign-in is also performed when there is no stored credential.",
      "pos": [
        2888,
        2959
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>A cached token may be expired, and token expiration can also occur after authentication when the app is in use.",
      "pos": [
        2966,
        3089
      ]
    },
    {
      "content": "To learn how to determine if a token is expired, see <bpt id=\"p1\">[</bpt>Check for expired authentication tokens<ept id=\"p1\">](http://aka.ms/jww5vp)</ept>.",
      "pos": [
        3090,
        3207
      ]
    },
    {
      "content": "For a solution to handling authorization errors related to expiring tokens, see the post <bpt id=\"p1\">[</bpt>Caching and handling expired tokens in Azure Mobile Services managed SDK<ept id=\"p1\">](http://blogs.msdn.com/b/carlosfigueira/archive/2014/03/13/caching-and-handling-expired-tokens-in-azure-mobile-services-managed-sdk.aspx)</ept>.",
      "pos": [
        3208,
        3509
      ]
    },
    {
      "content": "Restart the app twice.",
      "pos": [
        3515,
        3537
      ]
    },
    {
      "content": "Notice that on the first start-up, sign-in with the provider is again required.",
      "pos": [
        3543,
        3622
      ]
    },
    {
      "content": "However, on the second restart the cached credentials are used and sign-in is bypassed.",
      "pos": [
        3623,
        3710
      ]
    }
  ],
  "content": "\n1. In the MainPage.xaml.cs project file, add the following **using** statements:\n\n        using System.Linq;      \n        using Windows.Security.Credentials;\n\n2. Replace the **AuthenticateAsync** method with the following code:\n\n        private async System.Threading.Tasks.Task<bool> AuthenticateAsync()\n        {\n            string message;\n            bool success = false;\n\n            // This sample uses the Facebook provider.\n            var provider = MobileServiceAuthenticationProvider.Facebook;\n\n            // Use the PasswordVault to securely store and access credentials.\n            PasswordVault vault = new PasswordVault();\n            PasswordCredential credential = null;\n\n            try\n            {\n                // Try to get an existing credential from the vault.\n                credential = vault.FindAllByResource(provider.ToString()).FirstOrDefault();\n            }\n            catch (Exception)\n            {\n                // When there is no matching resource an error occurs, which we ignore.\n            }\n\n            if (credential != null)\n            {\n                // Create a user from the stored credentials.\n                user = new MobileServiceUser(credential.UserName);\n                credential.RetrievePassword();\n                user.MobileServiceAuthenticationToken = credential.Password;\n\n                // Set the user from the stored credentials.\n                App.MobileService.CurrentUser = user;\n\n                // Consider adding a check to determine if the token is \n                // expired, as shown in this post: http://aka.ms/jww5vp.\n\n                success = true;\n                message = string.Format(\"Cached credentials for user - {0}\", user.UserId);\n            }\n            else\n            {\n                try\n                {\n                    // Login with the identity provider.\n                    user = await App.MobileService\n                        .LoginAsync(provider);\n\n                    // Create and store the user credentials.\n                    credential = new PasswordCredential(provider.ToString(),\n                        user.UserId, user.MobileServiceAuthenticationToken);\n                    vault.Add(credential);\n\n                    success = true;\n                    message = string.Format(\"You are now logged in - {0}\", user.UserId);\n                }\n                catch (MobileServiceInvalidOperationException)\n                {\n                    message = \"You must log in. Login Required\";\n                }\n            }\n            \n            var dialog = new MessageDialog(message);\n            dialog.Commands.Add(new UICommand(\"OK\"));\n            await dialog.ShowAsync();\n\n            return success;\n        }\n\n    In this version of **AuthenticateAsync**, the app tries to use credentials stored in the **PasswordVault** to access the service. A regular sign-in is also performed when there is no stored credential.\n\n    >[AZURE.NOTE]A cached token may be expired, and token expiration can also occur after authentication when the app is in use. To learn how to determine if a token is expired, see [Check for expired authentication tokens](http://aka.ms/jww5vp). For a solution to handling authorization errors related to expiring tokens, see the post [Caching and handling expired tokens in Azure Mobile Services managed SDK](http://blogs.msdn.com/b/carlosfigueira/archive/2014/03/13/caching-and-handling-expired-tokens-in-azure-mobile-services-managed-sdk.aspx). \n\n3. Restart the app twice.\n\n    Notice that on the first start-up, sign-in with the provider is again required. However, on the second restart the cached credentials are used and sign-in is bypassed. \n"
}