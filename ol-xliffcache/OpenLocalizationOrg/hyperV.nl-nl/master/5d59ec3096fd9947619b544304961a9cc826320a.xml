{
  "nodes": [
    {
      "content": "Example config file for connection string security",
      "pos": [
        146,
        196
      ]
    },
    {
      "content": "It is unsound to put the connection string as literals in your C# code.",
      "pos": [
        199,
        270
      ]
    },
    {
      "content": "It is better to put the connection string in a config file.",
      "pos": [
        271,
        330
      ]
    },
    {
      "content": "There you can edit the string any time without the need to recompile.",
      "pos": [
        331,
        400
      ]
    },
    {
      "pos": [
        402,
        535
      ],
      "content": "Let's assume your compiled C# program is named <bpt id=\"p1\">**</bpt>ConsoleApplication1.exe<ept id=\"p1\">**</ept>, and that this .exe resides in a *<bpt id=\"p2\">*</bpt>bin\\debug\\*<ept id=\"p2\">*</ept> directory."
    },
    {
      "content": "In this example, most parts of your connection string are stored in a config file named exactly <bpt id=\"p1\">**</bpt>ConsoleApplication1.exe.config<ept id=\"p1\">**</ept>.",
      "pos": [
        537,
        668
      ]
    },
    {
      "content": "This config file must also reside in *<bpt id=\"p1\">*</bpt>bin\\debug\\*<ept id=\"p1\">*</ept>.",
      "pos": [
        669,
        721
      ]
    },
    {
      "content": "In the XML of the following config file you see a connection string named <bpt id=\"p1\">**</bpt>ConnectionString4NoUserIDNoPassword<ept id=\"p1\">**</ept>.",
      "pos": [
        723,
        837
      ]
    },
    {
      "content": "The C# code looks for this string.",
      "pos": [
        838,
        872
      ]
    },
    {
      "content": "You must edit real names in for the placeholders:",
      "pos": [
        874,
        923
      ]
    },
    {
      "content": "{your_serverName_here}",
      "pos": [
        927,
        949
      ]
    },
    {
      "content": "{your_databaseName_here}",
      "pos": [
        952,
        976
      ]
    },
    {
      "content": "For this illustration we chose to omit two parameters:",
      "pos": [
        1722,
        1776
      ]
    },
    {
      "content": "User ID={your_userName_here};",
      "pos": [
        1780,
        1809
      ]
    },
    {
      "content": "Password={your_password_here};",
      "pos": [
        1812,
        1842
      ]
    },
    {
      "content": "You can include them, but sometimes it is better to have your program get those values from keyboard input by the user.",
      "pos": [
        1845,
        1964
      ]
    },
    {
      "content": "It depends.",
      "pos": [
        1965,
        1976
      ]
    }
  ],
  "content": "\n<!--\nincludes/sql-database-include-connection-string-40-config.md\n\nLatest Freshness check:  2015-09-04 , GeneMi.\n\n## Connection string\n-->\n\n\n### Example config file for connection string security\n\n\nIt is unsound to put the connection string as literals in your C# code. It is better to put the connection string in a config file. There you can edit the string any time without the need to recompile.\n\nLet's assume your compiled C# program is named **ConsoleApplication1.exe**, and that this .exe resides in a **bin\\debug\\** directory.\n\nIn this example, most parts of your connection string are stored in a config file named exactly **ConsoleApplication1.exe.config**. This config file must also reside in **bin\\debug\\**.\n\nIn the XML of the following config file you see a connection string named **ConnectionString4NoUserIDNoPassword**. The C# code looks for this string.\n\nYou must edit real names in for the placeholders:\n\n- {your_serverName_here}\n- {your_databaseName_here}\n\n\n\n        <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n        <configuration>\n            <startup> \n                <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />\n            </startup>\n        \n            <connectionStrings>\n                <clear />\n                <add name=\"ConnectionString4NoUserIDNoPassword\"\n                providerName=\"System.Data.ProviderName\"\n        \n                connectionString=\n                \"Server=tcp:{your_serverName_here}.database.windows.net,1433;\n                Database={your_databaseName_here};\n                Connection Timeout=30;\n                Encrypt=True;\n                TrustServerCertificate=False;\" />\n            </connectionStrings>\n        </configuration>\n\n\n\nFor this illustration we chose to omit two parameters:\n\n- User ID={your_userName_here};\n- Password={your_password_here};\n\n\nYou can include them, but sometimes it is better to have your program get those values from keyboard input by the user. It depends.\n\n\n\n<!--\nThese three includes/ files are a sequenced set, but you can pick and choose:\n\nincludes/sql-database-include-connection-string-20-portalshots.md\nincludes/sql-database-include-connection-string-30-compare.md\nincludes/sql-database-include-connection-string-40-config.md\n-->\n\n\n"
}