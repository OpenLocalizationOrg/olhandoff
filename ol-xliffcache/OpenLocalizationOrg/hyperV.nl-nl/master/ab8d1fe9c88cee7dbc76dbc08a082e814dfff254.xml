{
  "nodes": [
    {
      "content": "Create a device identity",
      "pos": [
        3,
        27
      ]
    },
    {
      "content": "In this section, you'll create a Node.js console app that creates a new device identity in the identity registry in your IoT hub.",
      "pos": [
        29,
        158
      ]
    },
    {
      "content": "A device cannot connect to IoT hub unless it has an entry in the device identity registry.",
      "pos": [
        159,
        249
      ]
    },
    {
      "content": "Refer to the <bpt id=\"p1\">**</bpt>Device Identity Registry<ept id=\"p1\">**</ept> section of the <bpt id=\"p2\">[</bpt>IoT Hub Developer Guide<ept id=\"p2\">][lnk-devguide-identity]</ept> for more information.",
      "pos": [
        250,
        377
      ]
    },
    {
      "content": "When you run this console application, it generates a unique device ID and key that your device can identify itself with when it sends device-to-cloud messages to IoT Hub.",
      "pos": [
        378,
        549
      ]
    },
    {
      "content": "Create a new empty folder called <bpt id=\"p1\">**</bpt>createdeviceidentity<ept id=\"p1\">**</ept>.",
      "pos": [
        554,
        612
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>createdeviceidentity<ept id=\"p1\">**</ept> folder, create a new package.json file using the following command at your command-prompt.",
      "pos": [
        613,
        735
      ]
    },
    {
      "content": "Accept all the defaults:",
      "pos": [
        736,
        760
      ]
    },
    {
      "pos": [
        795,
        924
      ],
      "content": "At your command-prompt in the <bpt id=\"p1\">**</bpt>createdeviceidentity<ept id=\"p1\">**</ept> folder, run the following command to install the <bpt id=\"p2\">**</bpt>azure-iothub<ept id=\"p2\">**</ept> package:"
    },
    {
      "pos": [
        982,
        1088
      ],
      "content": "Using a text editor, create a new <bpt id=\"p1\">**</bpt>CreateDeviceIdentity.js<ept id=\"p1\">**</ept> file in the <bpt id=\"p2\">**</bpt>createdeviceidentity<ept id=\"p2\">**</ept> folder."
    },
    {
      "pos": [
        1093,
        1184
      ],
      "content": "Add the following <ph id=\"ph1\">`require`</ph> statement at the start of the <bpt id=\"p1\">**</bpt>CreateDeviceIdentity.js<ept id=\"p1\">**</ept> file:"
    },
    {
      "pos": [
        1271,
        1446
      ],
      "content": "Add the following code to the <bpt id=\"p1\">**</bpt>CreateDeviceIdentity.js<ept id=\"p1\">**</ept> file, replacing the placeholder value with the connection string for the IoT hub you created in the previous section:"
    },
    {
      "content": "Add the following code to create a new device definition in the device identity registry in your IoT hub.",
      "pos": [
        1606,
        1711
      ]
    },
    {
      "content": "This code creates a new device if the device id does not exist in the registry, otherwise it returns the key of the existing device:",
      "pos": [
        1712,
        1844
      ]
    },
    {
      "pos": [
        2414,
        2462
      ],
      "content": "Save and close <bpt id=\"p1\">**</bpt>CreateDeviceIdentity.js<ept id=\"p1\">**</ept> file."
    },
    {
      "pos": [
        2467,
        2603
      ],
      "content": "To run the <bpt id=\"p1\">**</bpt>createdeviceidentity<ept id=\"p1\">**</ept> application, execute the following command at the command-prompt in the createdeviceidentity folder:"
    },
    {
      "content": "Make a note of the <bpt id=\"p1\">**</bpt>Device id<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Device key<ept id=\"p2\">**</ept>.",
      "pos": [
        2659,
        2711
      ]
    },
    {
      "content": "You will need these later when you create an application that connects to IoT Hub as a device.",
      "pos": [
        2712,
        2806
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The IoT Hub identity registry only stores device identities to enable secure access to the hub.",
      "pos": [
        2810,
        2918
      ]
    },
    {
      "content": "It stores device IDs and keys to use as security credentials and an enabled/disabled flag that enables you to disable access for an individual device.",
      "pos": [
        2919,
        3069
      ]
    },
    {
      "content": "If you application needs to store other device-specific metadata, it should use an application-specific store.",
      "pos": [
        3070,
        3180
      ]
    },
    {
      "content": "Refer to <bpt id=\"p1\">[</bpt>IoT Hub Developer Guide<ept id=\"p1\">][lnk-devguide-identity]</ept> for more information.",
      "pos": [
        3181,
        3260
      ]
    },
    {
      "content": "Receive device-to-cloud messages",
      "pos": [
        3265,
        3297
      ]
    },
    {
      "content": "In this section, you'll create a Node.js console app that reads device-to-cloud messages from IoT Hub.",
      "pos": [
        3299,
        3401
      ]
    },
    {
      "content": "An IoT hub exposes an <bpt id=\"p1\">[</bpt>Event Hubs<ept id=\"p1\">][lnk-event-hubs-overview]</ept>-compatible endpoint to enable you to read device-to-cloud messages.",
      "pos": [
        3402,
        3529
      ]
    },
    {
      "content": "To keep things simple, this tutorial creates a basic reader that is not suitable for a high throughput deployment.",
      "pos": [
        3530,
        3644
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>Process device-to-cloud messages<ept id=\"p1\">][lnk-processd2c-tutorial]</ept> tutorial shows you how to process device-to-cloud messages at scale.",
      "pos": [
        3645,
        3777
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>Get Started with Event Hubs<ept id=\"p1\">][lnk-eventhubs-tutorial]</ept> tutorial provides further information on how to process messages from Event Hubs and is applicable to the IoT Hub Event Hub-compatible endpoints.",
      "pos": [
        3778,
        3981
      ]
    },
    {
      "content": "Create a new empty folder called <bpt id=\"p1\">**</bpt>readdevicetocloudmessages<ept id=\"p1\">**</ept>.",
      "pos": [
        3986,
        4049
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>readdevicetocloudmessages<ept id=\"p1\">**</ept> folder, create a new package.json file using the following command at your command-prompt.",
      "pos": [
        4050,
        4177
      ]
    },
    {
      "content": "Accept all the defaults:",
      "pos": [
        4178,
        4202
      ]
    },
    {
      "pos": [
        4237,
        4383
      ],
      "content": "At your command-prompt in the <bpt id=\"p1\">**</bpt>readdevicetocloudmessages<ept id=\"p1\">**</ept> folder, run the following command to install the <bpt id=\"p2\">**</bpt>amqp10<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>bluebird<ept id=\"p3\">**</ept> packages:"
    },
    {
      "pos": [
        4444,
        4560
      ],
      "content": "Using a text editor, create a new <bpt id=\"p1\">**</bpt>ReadDeviceToCloudMessages.js<ept id=\"p1\">**</ept> file in the <bpt id=\"p2\">**</bpt>readdevicetocloudmessages<ept id=\"p2\">**</ept> folder."
    },
    {
      "pos": [
        4565,
        4662
      ],
      "content": "Add the following <ph id=\"ph1\">`require`</ph> statements at the start of the <bpt id=\"p1\">**</bpt>ReadDeviceToCloudMessages.js<ept id=\"p1\">**</ept> file:"
    },
    {
      "content": "Add the following variable declarations, replacing the placeholders with the values you noted previously.",
      "pos": [
        4883,
        4988
      ]
    },
    {
      "content": "The value of the <bpt id=\"p1\">**</bpt>{your event hub-compatible namespace}<ept id=\"p1\">**</ept> placeholder comes from the <bpt id=\"p2\">**</bpt>Event Hub-compatible endpoint<ept id=\"p2\">**</ept> field in the portal - it takes the form <bpt id=\"p3\">**</bpt>namespace.servicebus.windows.net<ept id=\"p3\">**</ept> (without the <bpt id=\"p4\">*</bpt>sb://<ept id=\"p4\">*</ept> prefix).",
      "pos": [
        4989,
        5215
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This code assumes you created your IoT hub in the F1 (free) tier.",
      "pos": [
        5490,
        5568
      ]
    },
    {
      "content": "A free IoT hub has two partitions named \"0\" and \"1\".",
      "pos": [
        5569,
        5621
      ]
    },
    {
      "content": "If you created your IoT hub using one of the other pricing tiers, you should adjust the code to create a <bpt id=\"p1\">**</bpt>MessageReceiver<ept id=\"p1\">**</ept> for each partition.",
      "pos": [
        5622,
        5766
      ]
    },
    {
      "content": "Add the following filter definition.",
      "pos": [
        5771,
        5807
      ]
    },
    {
      "content": "This application uses a filter when it creates a receiver so that the receiver only reads messages sent to IoT Hub after the receiver starts running.",
      "pos": [
        5808,
        5957
      ]
    },
    {
      "content": "This is useful in a test environment so you can see the current set of messages, but in a production environment your code should make sure that it processes all the messages - see the <bpt id=\"p1\">[</bpt>How to process IoT Hub device-to-cloud messages<ept id=\"p1\">][lnk-processd2c-tutorial]</ept> tutorial for more information.",
      "pos": [
        5958,
        6248
      ]
    },
    {
      "content": "Add the following code to create the receive address and an AMQP client:",
      "pos": [
        6652,
        6724
      ]
    },
    {
      "content": "Add the following two functions that print output to the console:",
      "pos": [
        6993,
        7058
      ]
    },
    {
      "content": "Add the following function that acts as a receiver for a given partition using the filter:",
      "pos": [
        7325,
        7415
      ]
    },
    {
      "content": "Add the following code to connect to the Event Hub-compatible endpoint and start the receivers:",
      "pos": [
        7863,
        7958
      ]
    },
    {
      "pos": [
        8331,
        8388
      ],
      "content": "Save and close the <bpt id=\"p1\">**</bpt>ReadDeviceToCloudMessages.js<ept id=\"p1\">**</ept> file."
    }
  ],
  "content": "## Create a device identity\n\nIn this section, you'll create a Node.js console app that creates a new device identity in the identity registry in your IoT hub. A device cannot connect to IoT hub unless it has an entry in the device identity registry. Refer to the **Device Identity Registry** section of the [IoT Hub Developer Guide][lnk-devguide-identity] for more information. When you run this console application, it generates a unique device ID and key that your device can identify itself with when it sends device-to-cloud messages to IoT Hub.\n\n1. Create a new empty folder called **createdeviceidentity**. In the **createdeviceidentity** folder, create a new package.json file using the following command at your command-prompt. Accept all the defaults:\n\n    ```\n    npm init\n    ```\n\n2. At your command-prompt in the **createdeviceidentity** folder, run the following command to install the **azure-iothub** package:\n\n    ```\n    npm install azure-iothub --save\n    ```\n\n3. Using a text editor, create a new **CreateDeviceIdentity.js** file in the **createdeviceidentity** folder.\n\n4. Add the following `require` statement at the start of the **CreateDeviceIdentity.js** file:\n\n    ```\n    'use strict';\n    \n    var iothub = require('azure-iothub');\n    ```\n\n5. Add the following code to the **CreateDeviceIdentity.js** file, replacing the placeholder value with the connection string for the IoT hub you created in the previous section: \n\n    ```\n    var connectionString = '{iothub connection string}';\n    \n    var registry = iothub.Registry.fromConnectionString(connectionString);\n    ```\n\n6. Add the following code to create a new device definition in the device identity registry in your IoT hub. This code creates a new device if the device id does not exist in the registry, otherwise it returns the key of the existing device:\n\n    ```\n    var device = new iothub.Device(null);\n    device.deviceId = 'myFirstDevice';\n    registry.create(device, function(err, deviceInfo, res) {\n      if (err) {\n        registry.get(device.deviceId, printDeviceInfo);\n      }\n      if (deviceInfo) {\n        printDeviceInfo(err, deviceInfo, res)\n      }\n    });\n\n    function printDeviceInfo(err, deviceInfo, res) {\n      if (deviceInfo) {\n        console.log('Device id: ' + deviceInfo.deviceId);\n        console.log('Device key: ' + deviceInfo.authentication.SymmetricKey.primaryKey);\n      }\n    }\n    ```\n\n7. Save and close **CreateDeviceIdentity.js** file.\n\n8. To run the **createdeviceidentity** application, execute the following command at the command-prompt in the createdeviceidentity folder:\n\n    ```\n    node CreateDeviceIdentity.js \n    ```\n\n9. Make a note of the **Device id** and **Device key**. You will need these later when you create an application that connects to IoT Hub as a device.\n\n> [AZURE.NOTE] The IoT Hub identity registry only stores device identities to enable secure access to the hub. It stores device IDs and keys to use as security credentials and an enabled/disabled flag that enables you to disable access for an individual device. If you application needs to store other device-specific metadata, it should use an application-specific store. Refer to [IoT Hub Developer Guide][lnk-devguide-identity] for more information.\n\n## Receive device-to-cloud messages\n\nIn this section, you'll create a Node.js console app that reads device-to-cloud messages from IoT Hub. An IoT hub exposes an [Event Hubs][lnk-event-hubs-overview]-compatible endpoint to enable you to read device-to-cloud messages. To keep things simple, this tutorial creates a basic reader that is not suitable for a high throughput deployment. The [Process device-to-cloud messages][lnk-processd2c-tutorial] tutorial shows you how to process device-to-cloud messages at scale. The [Get Started with Event Hubs][lnk-eventhubs-tutorial] tutorial provides further information on how to process messages from Event Hubs and is applicable to the IoT Hub Event Hub-compatible endpoints.\n\n1. Create a new empty folder called **readdevicetocloudmessages**. In the **readdevicetocloudmessages** folder, create a new package.json file using the following command at your command-prompt. Accept all the defaults:\n\n    ```\n    npm init\n    ```\n\n2. At your command-prompt in the **readdevicetocloudmessages** folder, run the following command to install the **amqp10** and **bluebird** packages:\n\n    ```\n    npm install amqp10 bluebird --save\n    ```\n\n3. Using a text editor, create a new **ReadDeviceToCloudMessages.js** file in the **readdevicetocloudmessages** folder.\n\n4. Add the following `require` statements at the start of the **ReadDeviceToCloudMessages.js** file:\n\n    ```\n    'use strict';\n\n    var AMQPClient = require('amqp10').Client;\n    var Policy = require('amqp10').Policy;\n    var translator = require('amqp10').translator;\n    var Promise = require('bluebird');\n    ```\n\n5. Add the following variable declarations, replacing the placeholders with the values you noted previously. The value of the **{your event hub-compatible namespace}** placeholder comes from the **Event Hub-compatible endpoint** field in the portal - it takes the form **namespace.servicebus.windows.net** (without the *sb://* prefix).\n\n    ```\n    var protocol = 'amqps';\n    var eventHubHost = '{your event hub-compatible namespace}';\n    var sasName = 'iothubowner';\n    var sasKey = '{your iot hub key}';\n    var eventHubName = '{your event hub-compatible name}';\n    var numPartitions = 2;\n    ```\n\n    > [AZURE.NOTE] This code assumes you created your IoT hub in the F1 (free) tier. A free IoT hub has two partitions named \"0\" and \"1\". If you created your IoT hub using one of the other pricing tiers, you should adjust the code to create a **MessageReceiver** for each partition.\n\n6. Add the following filter definition. This application uses a filter when it creates a receiver so that the receiver only reads messages sent to IoT Hub after the receiver starts running. This is useful in a test environment so you can see the current set of messages, but in a production environment your code should make sure that it processes all the messages - see the [How to process IoT Hub device-to-cloud messages][lnk-processd2c-tutorial] tutorial for more information.\n\n    ```\n    var filterOffset = new Date().getTime();\n    var filterOption;\n    if (filterOffset) {\n      filterOption = {\n      attach: { source: { filter: {\n      'apache.org:selector-filter:string': translator(\n        ['described', ['symbol', 'apache.org:selector-filter:string'], ['string', \"amqp.annotation.x-opt-enqueuedtimeutc > \" + filterOffset + \"\"]])\n        } } }\n      };\n    }\n    ```\n\n7. Add the following code to create the receive address and an AMQP client:\n\n    ```\n    var uri = protocol + '://' + encodeURIComponent(sasName) + ':' + encodeURIComponent(sasKey) + '@' + eventHubHost;\n    var recvAddr = eventHubName + '/ConsumerGroups/$default/Partitions/';\n    \n    var client = new AMQPClient(Policy.EventHub);\n    ```\n\n8. Add the following two functions that print output to the console:\n\n    ```\n    var messageHandler = function (partitionId, message) {\n      console.log('Received(' + partitionId + '): ', message.body);\n    };\n    \n    var errorHandler = function(partitionId, err) {\n      console.warn('** Receive error: ', err);\n    };\n    ```\n\n9. Add the following function that acts as a receiver for a given partition using the filter:\n\n    ```\n    var createPartitionReceiver = function(partitionId, receiveAddress, filterOption) {\n      return client.createReceiver(receiveAddress, filterOption)\n        .then(function (receiver) {\n          console.log('Listening on partition: ' + partitionId);\n          receiver.on('message', messageHandler.bind(null, partitionId));\n          receiver.on('errorReceived', errorHandler.bind(null, partitionId));\n        });\n    };\n    ```\n\n10. Add the following code to connect to the Event Hub-compatible endpoint and start the receivers:\n\n    ```\n    client.connect(uri)\n      .then(function () {\n        var partitions = [];\n        for (var i = 0; i < numPartitions; ++i) {\n          partitions.push(createPartitionReceiver(i, recvAddr + i, filterOption));\n        }\n        return Promise.all(partitions);\n    })\n    .error(function (e) {\n        console.warn('Connection error: ', e);\n    });\n    ```\n\n11. Save and close the **ReadDeviceToCloudMessages.js** file.\n\n<!-- Links -->\n\n[lnk-eventhubs-tutorial]: ../event-hubs/event-hubs-csharp-ephcs-getstarted.md\n[lnk-devguide-identity]: iot-hub-devguide.md#identityregistry\n[lnk-event-hubs-overview]: ../event-hubs/event-hubs-overview.md\n[lnk-processd2c-tutorial]: iot-hub-csharp-csharp-process-d2c.md\n\n"
}