{
  "nodes": [
    {
      "content": "Step 8: Experiment with Windows PowerShell",
      "pos": [
        2,
        44
      ]
    },
    {
      "content": "Now that you have walked through the basics of deploying Hyper-V, creating virtual machines and managing these virtual machines, let’s explore how you can automate many of these activities with PowerShell.",
      "pos": [
        46,
        251
      ]
    },
    {
      "content": "Return a list of Hyper-V commands",
      "pos": [
        257,
        290
      ]
    },
    {
      "pos": [
        296,
        351
      ],
      "content": "Click on the Windows start button, type <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Run the following command to display a searchable list of PowerShell commands available with the Hyper-V PowerShell Module.",
      "pos": [
        356,
        479
      ]
    },
    {
      "content": "You get something like this:",
      "pos": [
        545,
        573
      ]
    },
    {
      "content": "To learn more about a particular PowerShell command use <ph id=\"ph1\">`get-help`</ph>.",
      "pos": [
        609,
        676
      ]
    },
    {
      "content": "For instance running the following command will return information about the <ph id=\"ph1\">`get-vm`</ph> Hyper-V command.",
      "pos": [
        677,
        779
      ]
    },
    {
      "content": "The output shows you how to structure the command, what the required and optional parameters are, and the aliases that you can use.",
      "pos": [
        818,
        949
      ]
    },
    {
      "content": "Return a list of virtual machines",
      "pos": [
        982,
        1015
      ]
    },
    {
      "pos": [
        1017,
        1079
      ],
      "content": "Use the <ph id=\"ph1\">`get-vm`</ph> command to return a list of virtual machines."
    },
    {
      "content": "In PowerShell, run the following command:",
      "pos": [
        1084,
        1125
      ]
    },
    {
      "content": "This displays something like this:",
      "pos": [
        1155,
        1189
      ]
    },
    {
      "content": "To return a list of only powered on virtual machines add a filter to the <ph id=\"ph1\">`get-vm`</ph> command.",
      "pos": [
        1218,
        1308
      ]
    },
    {
      "content": "A filter can be added by using the where-object command.",
      "pos": [
        1309,
        1365
      ]
    },
    {
      "content": "For more information on filtering see the <bpt id=\"p1\">[</bpt>Using the Where-Object<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/ee177028.aspx)</ept> documentation.",
      "pos": [
        1366,
        1506
      ]
    },
    {
      "content": "To list all virtual machines in a powered off state, run the following command.",
      "pos": [
        1576,
        1655
      ]
    },
    {
      "content": "This command is a copy of the command from step 2 with the filter changed from ‘Running’ to ‘Off’.",
      "pos": [
        1656,
        1754
      ]
    },
    {
      "content": "Start and shut down virtual machines",
      "pos": [
        1818,
        1854
      ]
    },
    {
      "content": "To start a particular virtual machine, run the following command with name of the virtual machine:",
      "pos": [
        1859,
        1957
      ]
    },
    {
      "content": "To start all currently powered off virtual machines, get a list of those machines and pipe the list to the 'start-vm' command:",
      "pos": [
        2020,
        2146
      ]
    },
    {
      "content": "To shut down all running virtual machines, run this:",
      "pos": [
        2220,
        2272
      ]
    },
    {
      "content": "Create a VM checkpoint",
      "pos": [
        2352,
        2374
      ]
    },
    {
      "content": "To create a checkpoint using PowerShell, select the virtual machine using the <ph id=\"ph1\">`get-vm`</ph> command and pipe this to the <ph id=\"ph2\">`checkpoint-vm`</ph> command.",
      "pos": [
        2376,
        2516
      ]
    },
    {
      "content": "Finally give the checkpoint a name using <ph id=\"ph1\">`-snapshotname`</ph>.",
      "pos": [
        2517,
        2574
      ]
    },
    {
      "content": "The complete command will look like the following:",
      "pos": [
        2575,
        2625
      ]
    },
    {
      "content": "For example, here is a checkpoint with the name DEMOCP:",
      "pos": [
        2717,
        2772
      ]
    },
    {
      "content": "Create a new virtual machine",
      "pos": [
        2805,
        2833
      ]
    },
    {
      "content": "The following example shows how to create a new virtual machine in the PowerShell Integrated Scripting Environment (ISE).",
      "pos": [
        2835,
        2956
      ]
    },
    {
      "content": "This is a simple example and could be expanded on to include additional PowerShell features and more advanced VM deployments.",
      "pos": [
        2957,
        3082
      ]
    },
    {
      "pos": [
        3087,
        3154
      ],
      "content": "To open the PowerShell ISE click on start, type <bpt id=\"p1\">**</bpt>PowerShell ISE<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Run the following code to create a virtual machine.",
      "pos": [
        3158,
        3209
      ]
    },
    {
      "content": "See the <bpt id=\"p1\">[</bpt>New-VM<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/hh848537.aspx)</ept> documentation for detailed information on the New-VM command.",
      "pos": [
        3210,
        3347
      ]
    },
    {
      "content": "Wrap up and References",
      "pos": [
        3704,
        3726
      ]
    },
    {
      "content": "This document has shown some simple steps to explorer the Hyper-V PowerShell module as well as some sample scenarios.",
      "pos": [
        3728,
        3845
      ]
    },
    {
      "content": "For more information on the Hyper-V PowerShell module, see the <bpt id=\"p1\">[</bpt>Hyper-V Cmdlets in Windows PowerShell reference<ept id=\"p1\">](https://technet.microsoft.com/%5Clibrary/Hh848559.aspx)</ept>.",
      "pos": [
        3846,
        4015
      ]
    }
  ],
  "content": "# Step 8: Experiment with Windows PowerShell\n\nNow that you have walked through the basics of deploying Hyper-V, creating virtual machines and managing these virtual machines, let’s explore how you can automate many of these activities with PowerShell.\n\n### Return a list of Hyper-V commands\n\n1.  Click on the Windows start button, type **PowerShell**.\n2.  Run the following command to display a searchable list of PowerShell commands available with the Hyper-V PowerShell Module.\n\n ```powershell\nget-command –module hyper-v | out-gridview\n```\n  You get something like this:\n\n  ![](media\\command_grid.png)\n\n3. To learn more about a particular PowerShell command use `get-help`. For instance running the following command will return information about the `get-vm` Hyper-V command.\n\n  ```powershell\nget-help get-vm\n```\n The output shows you how to structure the command, what the required and optional parameters are, and the aliases that you can use.\n\n ![](media\\get_help.png)\n\n\n### Return a list of virtual machines\n\nUse the `get-vm` command to return a list of virtual machines.\n\n1. In PowerShell, run the following command:\n \n ```powershell\nget-vm\n```\n This displays something like this:\n\n ![](media\\get_vm.png)\n\n2. To return a list of only powered on virtual machines add a filter to the `get-vm` command. A filter can be added by using the where-object command. For more information on filtering see the [Using the Where-Object](https://technet.microsoft.com/en-us/library/ee177028.aspx) documentation.   \n\n ```powershell\n get-vm | where {$_.State –eq ‘Running’}\n ```\n3.  To list all virtual machines in a powered off state, run the following command. This command is a copy of the command from step 2 with the filter changed from ‘Running’ to ‘Off’.\n\n ```powershell\n get-vm | where {$_.State –eq ‘Off’}\n ```\n\n### Start and shut down virtual machines\n\n1. To start a particular virtual machine, run the following command with name of the virtual machine:\n\n ```powershell\n Start-vm –Name virtual machine name\n ```\n\n2. To start all currently powered off virtual machines, get a list of those machines and pipe the list to the 'start-vm' command:\n\n  ```powershell\n get-vm | where {$_.State –eq ‘Off’} | start-vm\n ```\n3. To shut down all running virtual machines, run this:\n \n  ```powershell\n get-vm | where {$_.State –eq ‘Running’} | stop-vm\n ```\n\n### Create a VM checkpoint\n\nTo create a checkpoint using PowerShell, select the virtual machine using the `get-vm` command and pipe this to the `checkpoint-vm` command. Finally give the checkpoint a name using `-snapshotname`. The complete command will look like the following:\n\n ```powershell\n get-vm -Name VM Name | checkpoint-vm -snapshotname name for snapshot\n ```\nFor example, here is a checkpoint with the name DEMOCP:\n \n ![](media\\POSH_CP2.png)\n\n### Create a new virtual machine\n\nThe following example shows how to create a new virtual machine in the PowerShell Integrated Scripting Environment (ISE). This is a simple example and could be expanded on to include additional PowerShell features and more advanced VM deployments.\n\n1. To open the PowerShell ISE click on start, type **PowerShell ISE**.\n2. Run the following code to create a virtual machine. See the [New-VM](https://technet.microsoft.com/en-us/library/hh848537.aspx) documentation for detailed information on the New-VM command.\n\n  ```powershell\n $VMName = \"VMNAME\"\n\n $VM = @{\n     Name = $VMName \n     MemoryStartupBytes = 2147483648\n     Generation = 2\n     NewVHDPath = \"C:\\Virtual Machines\\$VMName\\$VMName.vhdx\"\n     NewVHDSizeBytes = 53687091200\n     BootDevice = \"VHD\"\n     Path = \"C:\\Virtual Machines\\$VMName \"\n     SwitchName = (get-vmswitch).Name[0]\n }\n\n New-VM @VM\n  ```\n\n## Wrap up and References\n\nThis document has shown some simple steps to explorer the Hyper-V PowerShell module as well as some sample scenarios. For more information on the Hyper-V PowerShell module, see the [Hyper-V Cmdlets in Windows PowerShell reference](https://technet.microsoft.com/%5Clibrary/Hh848559.aspx).  \n "
}