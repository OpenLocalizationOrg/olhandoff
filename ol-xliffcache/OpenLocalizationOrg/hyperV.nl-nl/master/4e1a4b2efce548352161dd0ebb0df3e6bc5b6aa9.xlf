<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="nl-nl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e1a4b2efce548352161dd0ebb0df3e6bc5b6aa9</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure AD Connect sync: Understanding the architecture | Microsoft Azure</source>
          <target state="new">Azure AD Connect sync: Understanding the architecture | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic describes the architecture of Azure AD Connect sync and explains the terms used.</source>
          <target state="new">This topic describes the architecture of Azure AD Connect sync and explains the terms used.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure AD Connect sync: Understanding the architecture</source>
          <target state="new">Azure AD Connect sync: Understanding the architecture</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic covers the basic architecture for Azure AD Connect sync.</source>
          <target state="new">This topic covers the basic architecture for Azure AD Connect sync.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In many aspects it is very similar to its predecessors MIIS 2003, ILM 2007, and FIM 2010.</source>
          <target state="new">In many aspects it is very similar to its predecessors MIIS 2003, ILM 2007, and FIM 2010.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure AD Connect sync is the evolution of these technologies.</source>
          <target state="new">Azure AD Connect sync is the evolution of these technologies.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you are familiar with any of these earlier technologies, the content of this topic will be familiar to you as well.</source>
          <target state="new">If you are familiar with any of these earlier technologies, the content of this topic will be familiar to you as well.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are new to synchronization, then this topic is for you.</source>
          <target state="new">If you are new to synchronization, then this topic is for you.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is however not a requirement to know the details of this topic to be successful in making customizations to Azure AD Connect sync (called sync engine in this topic).</source>
          <target state="new">It is however not a requirement to know the details of this topic to be successful in making customizations to Azure AD Connect sync (called sync engine in this topic).</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Architecture</source>
          <target state="new">Architecture</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The sync engine creates an integrated view of objects that are stored in multiple connected data sources and manages identity information in those data sources.</source>
          <target state="new">The sync engine creates an integrated view of objects that are stored in multiple connected data sources and manages identity information in those data sources.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This integrated view is determined by the identity information retrieved from connected data sources and a set of rules that determine how to process this information.</source>
          <target state="new">This integrated view is determined by the identity information retrieved from connected data sources and a set of rules that determine how to process this information.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Connected Data Sources and Connectors</source>
          <target state="new">Connected Data Sources and Connectors</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The sync engine processes identity information from different data repositories, such as Active Directory or a SQL Server database.</source>
          <target state="new">The sync engine processes identity information from different data repositories, such as Active Directory or a SQL Server database.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Every data repository that organizes its data in a database-like format and that provides standard data-access methods is a potential data source candidate for the sync engine.</source>
          <target state="new">Every data repository that organizes its data in a database-like format and that provides standard data-access methods is a potential data source candidate for the sync engine.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data repositories that are synchronized by sync engine are called <bpt id="p1">**</bpt>connected data sources<ept id="p1">**</ept> or <bpt id="p2">**</bpt>connected directories<ept id="p2">**</ept> (CD).</source>
          <target state="new">The data repositories that are synchronized by sync engine are called <bpt id="p1">**</bpt>connected data sources<ept id="p1">**</ept> or <bpt id="p2">**</bpt>connected directories<ept id="p2">**</ept> (CD).</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The sync engine encapsulates interaction with a connected data source within a module called a <bpt id="p1">**</bpt>Connector<ept id="p1">**</ept>.</source>
          <target state="new">The sync engine encapsulates interaction with a connected data source within a module called a <bpt id="p1">**</bpt>Connector<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each type of connected data source has a specific Connector.</source>
          <target state="new">Each type of connected data source has a specific Connector.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Connector translates a required operation into the format that the connected data source understands.</source>
          <target state="new">The Connector translates a required operation into the format that the connected data source understands.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Connectors make API calls to exchange identity information (both read and write) with a connected data source.</source>
          <target state="new">Connectors make API calls to exchange identity information (both read and write) with a connected data source.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is also possible to add a custom Connector using the extensible connectivity framework.</source>
          <target state="new">It is also possible to add a custom Connector using the extensible connectivity framework.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following illustration shows how a Connector connects a connected data source to the sync engine.</source>
          <target state="new">The following illustration shows how a Connector connects a connected data source to the sync engine.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Arch1</source>
          <target state="new">Arch1</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Data can flow in either direction, but it cannot flow in both directions simultaneously.</source>
          <target state="new">Data can flow in either direction, but it cannot flow in both directions simultaneously.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In other words, a Connector can be configured to allow data to flow from the connected data source to sync engine or from sync engine to the connected data source, but only one of those operations can occur at any one time for one object and attribute.</source>
          <target state="new">In other words, a Connector can be configured to allow data to flow from the connected data source to sync engine or from sync engine to the connected data source, but only one of those operations can occur at any one time for one object and attribute.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The direction can be different for different objects and for different attributes.</source>
          <target state="new">The direction can be different for different objects and for different attributes.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To configure a Connector, you specify the object types that you want to synchronize.</source>
          <target state="new">To configure a Connector, you specify the object types that you want to synchronize.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifying the object types defines the scope of objects that are included in the synchronization process.</source>
          <target state="new">Specifying the object types defines the scope of objects that are included in the synchronization process.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The next step is to select the attributes to synchronize, which is known as an attribute inclusion list.</source>
          <target state="new">The next step is to select the attributes to synchronize, which is known as an attribute inclusion list.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These settings can be changed any time in response to changes to your business rules.</source>
          <target state="new">These settings can be changed any time in response to changes to your business rules.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When you use the Azure AD Connect installation wizard, these settings are configured for you.</source>
          <target state="new">When you use the Azure AD Connect installation wizard, these settings are configured for you.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To export objects to a connected data source, the attribute inclusion list must include at least the minimum attributes required to create a specific object type in a connected data source.</source>
          <target state="new">To export objects to a connected data source, the attribute inclusion list must include at least the minimum attributes required to create a specific object type in a connected data source.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>sAMAccountName<ept id="p1">**</ept> attribute must be included in the attribute inclusion list to export a user object to Active Directory because all user objects in Active Directory must have a <bpt id="p2">**</bpt>sAMAccountName<ept id="p2">**</ept> attribute defined.</source>
          <target state="new">For example, the <bpt id="p1">**</bpt>sAMAccountName<ept id="p1">**</ept> attribute must be included in the attribute inclusion list to export a user object to Active Directory because all user objects in Active Directory must have a <bpt id="p2">**</bpt>sAMAccountName<ept id="p2">**</ept> attribute defined.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Again, the installation wizard will do this for you.</source>
          <target state="new">Again, the installation wizard will do this for you.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the connected data source uses structural components, such as partitions or containers to organize objects, you can limit the areas in the connected data source that are used for a given solution.</source>
          <target state="new">If the connected data source uses structural components, such as partitions or containers to organize objects, you can limit the areas in the connected data source that are used for a given solution.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Internal structure of the sync engine namespace</source>
          <target state="new">Internal structure of the sync engine namespace</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The entire sync engine namespace consists of two namespaces that store the identity information.</source>
          <target state="new">The entire sync engine namespace consists of two namespaces that store the identity information.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The two namespaces are:</source>
          <target state="new">The two namespaces are:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The connector space (CS)</source>
          <target state="new">The connector space (CS)</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The metaverse (MV)</source>
          <target state="new">The metaverse (MV)</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>connector space<ept id="p1">**</ept> is a staging area that contains representations of the designated objects from a connected data source and the attributes specified in the attribute inclusion list.</source>
          <target state="new">The <bpt id="p1">**</bpt>connector space<ept id="p1">**</ept> is a staging area that contains representations of the designated objects from a connected data source and the attributes specified in the attribute inclusion list.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The sync engine uses the connector space to determine what has changed in the connected data source and to stage incoming changes.</source>
          <target state="new">The sync engine uses the connector space to determine what has changed in the connected data source and to stage incoming changes.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The sync engine also uses the connector space to stage outgoing changes for export to the connected data source.</source>
          <target state="new">The sync engine also uses the connector space to stage outgoing changes for export to the connected data source.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The sync engine maintains a distinct connector space as a staging area for each Connector.</source>
          <target state="new">The sync engine maintains a distinct connector space as a staging area for each Connector.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By using a staging area, the sync engine remains independent of the connected data sources and is not affected by their availability and accessibility.</source>
          <target state="new">By using a staging area, the sync engine remains independent of the connected data sources and is not affected by their availability and accessibility.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As a result, you can process identity information at any time by using the data in the staging area.</source>
          <target state="new">As a result, you can process identity information at any time by using the data in the staging area.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The sync engine can request only the changes made inside the connected data source since the last communication session terminated or push out only the changes to identity information that the connected data source has not yet received, which reduces the network traffic between the sync engine and the connected data source.</source>
          <target state="new">The sync engine can request only the changes made inside the connected data source since the last communication session terminated or push out only the changes to identity information that the connected data source has not yet received, which reduces the network traffic between the sync engine and the connected data source.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In addition, sync engine stores status information about all objects that it stages in the connector space.</source>
          <target state="new">In addition, sync engine stores status information about all objects that it stages in the connector space.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When new data is received, sync engine always evaluates whether the data has already been synchronized.</source>
          <target state="new">When new data is received, sync engine always evaluates whether the data has already been synchronized.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>metaverse<ept id="p1">**</ept> is a storage area that contains the aggregated identity information from multiple connected data sources, providing a single global, integrated view of all combined objects.</source>
          <target state="new">The <bpt id="p1">**</bpt>metaverse<ept id="p1">**</ept> is a storage area that contains the aggregated identity information from multiple connected data sources, providing a single global, integrated view of all combined objects.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Metaverse objects are created based on the identity information that is retrieved from the connected data sources and a set of rules that allow you to customize the synchronization process.</source>
          <target state="new">Metaverse objects are created based on the identity information that is retrieved from the connected data sources and a set of rules that allow you to customize the synchronization process.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following illustration shows the connector space namespace and the metaverse namespace within the sync engine.</source>
          <target state="new">The following illustration shows the connector space namespace and the metaverse namespace within the sync engine.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Arch2</source>
          <target state="new">Arch2</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Sync engine identity objects</source>
          <target state="new">Sync engine identity objects</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The objects in the sync engine are representations of either objects in the connected data source or the integrated view that sync engine has of those objects.</source>
          <target state="new">The objects in the sync engine are representations of either objects in the connected data source or the integrated view that sync engine has of those objects.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Every sync engine object must have a globally unique identifier (GUID).</source>
          <target state="new">Every sync engine object must have a globally unique identifier (GUID).</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>GUIDs provide data integrity and express relationships between objects.</source>
          <target state="new">GUIDs provide data integrity and express relationships between objects.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Connector space objects</source>
          <target state="new">Connector space objects</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When sync engine communicates with a connected data source, it reads the identity information in the connected data source and uses that information to create a representation of the identity object in the connector space.</source>
          <target state="new">When sync engine communicates with a connected data source, it reads the identity information in the connected data source and uses that information to create a representation of the identity object in the connector space.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You cannot create or delete these objects individually.</source>
          <target state="new">You cannot create or delete these objects individually.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>However, you can manually delete all objects in a connector space.</source>
          <target state="new">However, you can manually delete all objects in a connector space.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>All objects in the connector space have two attributes:</source>
          <target state="new">All objects in the connector space have two attributes:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A globally unique identifier (GUID)</source>
          <target state="new">A globally unique identifier (GUID)</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A distinguished name (also known as DN)</source>
          <target state="new">A distinguished name (also known as DN)</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Objects in the connector space can also have an anchor attribute if the connected data source assigns a unique attribute to the object.</source>
          <target state="new">Objects in the connector space can also have an anchor attribute if the connected data source assigns a unique attribute to the object.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The anchor attribute uniquely identifies an object in the connected data source.</source>
          <target state="new">The anchor attribute uniquely identifies an object in the connected data source.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The sync engine uses the anchor to locate the corresponding representation of this object in the connected data source.</source>
          <target state="new">The sync engine uses the anchor to locate the corresponding representation of this object in the connected data source.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Sync engine assumes that the anchor of an object never changes over the lifetime of the object.</source>
          <target state="new">Sync engine assumes that the anchor of an object never changes over the lifetime of the object.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Many of the Connectors use a known unique identifier to generate an anchor automatically for each object when it is imported.</source>
          <target state="new">Many of the Connectors use a known unique identifier to generate an anchor automatically for each object when it is imported.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, the Active Directory Connector uses the <bpt id="p1">**</bpt>objectGUID<ept id="p1">**</ept> attribute for an anchor.</source>
          <target state="new">For example, the Active Directory Connector uses the <bpt id="p1">**</bpt>objectGUID<ept id="p1">**</ept> attribute for an anchor.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For connected data sources that do not provide a clearly defined unique identifier, you can specify anchor generation as part of the Connector configuration.</source>
          <target state="new">For connected data sources that do not provide a clearly defined unique identifier, you can specify anchor generation as part of the Connector configuration.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In that case, the anchor is built from one or more unique attributes of an object type, neither of which changes, and that uniquely identifies the object in the connector space (for example, an employee number or a user ID).</source>
          <target state="new">In that case, the anchor is built from one or more unique attributes of an object type, neither of which changes, and that uniquely identifies the object in the connector space (for example, an employee number or a user ID).</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A connector space object can be one of the following:</source>
          <target state="new">A connector space object can be one of the following:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A staging object</source>
          <target state="new">A staging object</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A placeholder</source>
          <target state="new">A placeholder</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Staging Objects</source>
          <target state="new">Staging Objects</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A staging object represents an instance of the designated object types from the connected data source.</source>
          <target state="new">A staging object represents an instance of the designated object types from the connected data source.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In addition to the GUID and the distinguished name, a staging object always has a value that indicates the object type.</source>
          <target state="new">In addition to the GUID and the distinguished name, a staging object always has a value that indicates the object type.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Staging objects that have been imported always have a value for the anchor attribute.</source>
          <target state="new">Staging objects that have been imported always have a value for the anchor attribute.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Staging objects that have been newly provisioned by sync engine and are in the process of being created in the connected data source do not have a value for the anchor attribute.</source>
          <target state="new">Staging objects that have been newly provisioned by sync engine and are in the process of being created in the connected data source do not have a value for the anchor attribute.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Staging objects also carry current values of business attributes, and operational information needed by sync engine to perform the synchronization process.</source>
          <target state="new">Staging objects also carry current values of business attributes, and operational information needed by sync engine to perform the synchronization process.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Operational information includes flags that indicate the type of updates that are staged on the staging object.</source>
          <target state="new">Operational information includes flags that indicate the type of updates that are staged on the staging object.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If a staging object has received new identity information from the connected data source that has not yet been processed, the object is flagged as <bpt id="p1">**</bpt>pending import<ept id="p1">**</ept>.</source>
          <target state="new">If a staging object has received new identity information from the connected data source that has not yet been processed, the object is flagged as <bpt id="p1">**</bpt>pending import<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If a staging object has new identity information that has not yet been exported to the connected data source, it is flagged as <bpt id="p1">**</bpt>pending export<ept id="p1">**</ept>.</source>
          <target state="new">If a staging object has new identity information that has not yet been exported to the connected data source, it is flagged as <bpt id="p1">**</bpt>pending export<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A staging object can be an import object or an export object.</source>
          <target state="new">A staging object can be an import object or an export object.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The sync engine creates an import object by using object information received from the connected data source.</source>
          <target state="new">The sync engine creates an import object by using object information received from the connected data source.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When sync engine receives information about the existence of a new object that matches one of the object types selected in the Connector, it creates an import object in the connector space as a representation of the object in the connected data source.</source>
          <target state="new">When sync engine receives information about the existence of a new object that matches one of the object types selected in the Connector, it creates an import object in the connector space as a representation of the object in the connected data source.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following illustration shows an import object that represents an object in the connected data source.</source>
          <target state="new">The following illustration shows an import object that represents an object in the connected data source.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Arch3</source>
          <target state="new">Arch3</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The sync engine creates an export object by using object information in the metaverse.</source>
          <target state="new">The sync engine creates an export object by using object information in the metaverse.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Export objects are exported to the connected data source during the next communication session.</source>
          <target state="new">Export objects are exported to the connected data source during the next communication session.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>From the perspective of the sync engine, export objects do not exist in the connected data source yet.</source>
          <target state="new">From the perspective of the sync engine, export objects do not exist in the connected data source yet.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Therefore, the anchor attribute for an export object is not available.</source>
          <target state="new">Therefore, the anchor attribute for an export object is not available.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>After it receives the object from sync engine, the connected data source creates a unique value for the anchor attribute of the object.</source>
          <target state="new">After it receives the object from sync engine, the connected data source creates a unique value for the anchor attribute of the object.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following illustration shows how an export object is created by using identity information in the metaverse.</source>
          <target state="new">The following illustration shows how an export object is created by using identity information in the metaverse.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Arch4</source>
          <target state="new">Arch4</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The sync engine confirms the export of the object by re-importing the object from the connected data source.</source>
          <target state="new">The sync engine confirms the export of the object by re-importing the object from the connected data source.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Export objects become import objects as soon as sync engine receives them during the next import from that connected data source.</source>
          <target state="new">Export objects become import objects as soon as sync engine receives them during the next import from that connected data source.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Placeholders</source>
          <target state="new">Placeholders</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The sync engine uses a flat namespace to store objects.</source>
          <target state="new">The sync engine uses a flat namespace to store objects.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>However, some connected data sources such as Active Directory use a hierarchical namespace.</source>
          <target state="new">However, some connected data sources such as Active Directory use a hierarchical namespace.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To transform information from a hierarchical namespace into a flat namespace, sync engine uses placeholders to preserve the hierarchy.</source>
          <target state="new">To transform information from a hierarchical namespace into a flat namespace, sync engine uses placeholders to preserve the hierarchy.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Each placeholder represents a component (for example, an organizational unit) of an object's hierarchical name that has not been imported into sync engine but is required to construct the hierarchical name.</source>
          <target state="new">Each placeholder represents a component (for example, an organizational unit) of an object's hierarchical name that has not been imported into sync engine but is required to construct the hierarchical name.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>They fill gaps created by references in the connected data source to objects that are not staging objects in the connector space.</source>
          <target state="new">They fill gaps created by references in the connected data source to objects that are not staging objects in the connector space.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The sync engine also uses placeholders to store referenced objects that have not yet been imported.</source>
          <target state="new">The sync engine also uses placeholders to store referenced objects that have not yet been imported.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For example, if sync is configured to include the manager attribute for the <bpt id="p1">*</bpt>Abbie Spencer<ept id="p1">*</ept> object and the received value is an object that has not been imported yet, such as <bpt id="p2">*</bpt>CN=Lee Sperry,CN=Users,DC=fabrikam,DC=com<ept id="p2">*</ept>, the manager information is stored as placeholders in the connector space.</source>
          <target state="new">For example, if sync is configured to include the manager attribute for the <bpt id="p1">*</bpt>Abbie Spencer<ept id="p1">*</ept> object and the received value is an object that has not been imported yet, such as <bpt id="p2">*</bpt>CN=Lee Sperry,CN=Users,DC=fabrikam,DC=com<ept id="p2">*</ept>, the manager information is stored as placeholders in the connector space.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If the manager object is later imported, the placeholder object is overwritten by the staging object that represents the manager.</source>
          <target state="new">If the manager object is later imported, the placeholder object is overwritten by the staging object that represents the manager.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Metaverse objects</source>
          <target state="new">Metaverse objects</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A metaverse object contains the aggregated view that sync engine has of the staging objects in the connector space.</source>
          <target state="new">A metaverse object contains the aggregated view that sync engine has of the staging objects in the connector space.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Sync engine creates metaverse objects by using the information in import objects.</source>
          <target state="new">Sync engine creates metaverse objects by using the information in import objects.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Several connector space objects can be linked to a single metaverse object, but a connector space object cannot be linked to more than one metaverse object.</source>
          <target state="new">Several connector space objects can be linked to a single metaverse object, but a connector space object cannot be linked to more than one metaverse object.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Metaverse objects cannot be manually created or deleted.</source>
          <target state="new">Metaverse objects cannot be manually created or deleted.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The sync engine automatically deletes metaverse objects that do not have a link to any connector space object in the connector space.</source>
          <target state="new">The sync engine automatically deletes metaverse objects that do not have a link to any connector space object in the connector space.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To map objects within a connected data source to a corresponding object type within the metaverse, sync engine provides an extensible schema with a predefined set of object types and associated attributes.</source>
          <target state="new">To map objects within a connected data source to a corresponding object type within the metaverse, sync engine provides an extensible schema with a predefined set of object types and associated attributes.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can create new object types and attributes for metaverse objects.</source>
          <target state="new">You can create new object types and attributes for metaverse objects.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Attributes can be single-valued or multivalued, and the attribute types can be strings, references, numbers, and Boolean values.</source>
          <target state="new">Attributes can be single-valued or multivalued, and the attribute types can be strings, references, numbers, and Boolean values.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Relationships between staging objects and metaverse objects</source>
          <target state="new">Relationships between staging objects and metaverse objects</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Within the sync engine namespace, the data flow is enabled by the link relationship between staging objects and metaverse objects.</source>
          <target state="new">Within the sync engine namespace, the data flow is enabled by the link relationship between staging objects and metaverse objects.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A staging object that is linked to a metaverse object is called a <bpt id="p1">**</bpt>joined object<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>connector object<ept id="p2">**</ept>).</source>
          <target state="new">A staging object that is linked to a metaverse object is called a <bpt id="p1">**</bpt>joined object<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>connector object<ept id="p2">**</ept>).</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A staging object that is not linked to a metaverse object is called a  <bpt id="p1">**</bpt>disjoined object<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>disconnector object<ept id="p2">**</ept>).</source>
          <target state="new">A staging object that is not linked to a metaverse object is called a  <bpt id="p1">**</bpt>disjoined object<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>disconnector object<ept id="p2">**</ept>).</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The terms joined and disjoined are preferred to not confuse with the Connectors responsible for importing and exporting data from a connected directory.</source>
          <target state="new">The terms joined and disjoined are preferred to not confuse with the Connectors responsible for importing and exporting data from a connected directory.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Placeholders are never linked to a metaverse object</source>
          <target state="new">Placeholders are never linked to a metaverse object</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A joined object comprises a staging object and its linked relationship to a single metaverse object.</source>
          <target state="new">A joined object comprises a staging object and its linked relationship to a single metaverse object.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Joined objects are used to synchronize attribute values between a connector space object and a metaverse object.</source>
          <target state="new">Joined objects are used to synchronize attribute values between a connector space object and a metaverse object.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When a staging object becomes a joined object during synchronization, attributes can flow between the staging object and the metaverse object.</source>
          <target state="new">When a staging object becomes a joined object during synchronization, attributes can flow between the staging object and the metaverse object.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Attribute flow is bidirectional and is configured by using import attribute rules and export attribute rules.</source>
          <target state="new">Attribute flow is bidirectional and is configured by using import attribute rules and export attribute rules.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A single connector space object can be linked to only one metaverse object.</source>
          <target state="new">A single connector space object can be linked to only one metaverse object.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, each metaverse object can be linked to multiple connector space objects in the same or in different connector spaces, as shown in the following illustration.</source>
          <target state="new">However, each metaverse object can be linked to multiple connector space objects in the same or in different connector spaces, as shown in the following illustration.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Arch5</source>
          <target state="new">Arch5</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The linked relationship between the staging object and a metaverse object is persistent and can be removed only by rules that you specify.</source>
          <target state="new">The linked relationship between the staging object and a metaverse object is persistent and can be removed only by rules that you specify.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A disjoined object is a staging object that is not linked to any metaverse object.</source>
          <target state="new">A disjoined object is a staging object that is not linked to any metaverse object.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The attribute values of a disjoined object are not processed any further within the metaverse.</source>
          <target state="new">The attribute values of a disjoined object are not processed any further within the metaverse.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This means that the attribute values of the corresponding object in the connected data source are not updated by sync engine.</source>
          <target state="new">This means that the attribute values of the corresponding object in the connected data source are not updated by sync engine.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>By using disjoined objects, you can store identity information in sync engine and process it at a later time.</source>
          <target state="new">By using disjoined objects, you can store identity information in sync engine and process it at a later time.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Keeping a staging object as a disjoined object in the connector space has many advantages.</source>
          <target state="new">Keeping a staging object as a disjoined object in the connector space has many advantages.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Because the system has already staged the required information about this object, it is not necessary to create a representation of this object again during the next import from the connected data source.</source>
          <target state="new">Because the system has already staged the required information about this object, it is not necessary to create a representation of this object again during the next import from the connected data source.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This way, sync engine always has a complete snapshot of the connected data source, even if there is no current connection to the connected data source.</source>
          <target state="new">This way, sync engine always has a complete snapshot of the connected data source, even if there is no current connection to the connected data source.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Disjoined objects can be converted into joined objects, and vice versa, depending on the rules that you specify.</source>
          <target state="new">Disjoined objects can be converted into joined objects, and vice versa, depending on the rules that you specify.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>An import object is created as a disjoined object.</source>
          <target state="new">An import object is created as a disjoined object.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An export object must be a joined object.</source>
          <target state="new">An export object must be a joined object.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The system logic enforces this rule and deletes every export object that is not a joined object.</source>
          <target state="new">The system logic enforces this rule and deletes every export object that is not a joined object.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Sync engine identity management process</source>
          <target state="new">Sync engine identity management process</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The identity management process controls how identity information is updated between different connected data sources.</source>
          <target state="new">The identity management process controls how identity information is updated between different connected data sources.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Identity management occurs in three processes:</source>
          <target state="new">Identity management occurs in three processes:</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Import</source>
          <target state="new">Import</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Synchronization</source>
          <target state="new">Synchronization</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Export</source>
          <target state="new">Export</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>During the import process, sync engine evaluates the incoming identity information from a connected data source.</source>
          <target state="new">During the import process, sync engine evaluates the incoming identity information from a connected data source.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>When changes are detected, it either creates new staging objects or updates existing staging objects in the connector space for synchronization.</source>
          <target state="new">When changes are detected, it either creates new staging objects or updates existing staging objects in the connector space for synchronization.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>During the synchronization process, sync engine updates the metaverse to reflect changes that have occurred in the connector space and updates the connector space to reflect changes that have occurred in the metaverse.</source>
          <target state="new">During the synchronization process, sync engine updates the metaverse to reflect changes that have occurred in the connector space and updates the connector space to reflect changes that have occurred in the metaverse.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>During the export process, sync engine pushes out changes that are staged on staging objects and that are flagged as pending export.</source>
          <target state="new">During the export process, sync engine pushes out changes that are staged on staging objects and that are flagged as pending export.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The following illustration shows where each of the processes occurs as identity information flows from one connected data source to another.</source>
          <target state="new">The following illustration shows where each of the processes occurs as identity information flows from one connected data source to another.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Arch6</source>
          <target state="new">Arch6</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Import process</source>
          <target state="new">Import process</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>During the import process, sync engine evaluates updates to identity information.</source>
          <target state="new">During the import process, sync engine evaluates updates to identity information.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Sync engine compares the identity information received from the connected data source with the identity information about a staging object and determines whether the staging object requires updates.</source>
          <target state="new">Sync engine compares the identity information received from the connected data source with the identity information about a staging object and determines whether the staging object requires updates.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If it is necessary to update the staging object with new data, the staging object is flagged as pending import.</source>
          <target state="new">If it is necessary to update the staging object with new data, the staging object is flagged as pending import.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>By staging objects in the connector space prior to synchronization, sync engine can process only the identity information that has changed.</source>
          <target state="new">By staging objects in the connector space prior to synchronization, sync engine can process only the identity information that has changed.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This provides the following benefits:</source>
          <target state="new">This provides the following benefits:</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Efficient synchronization<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Efficient synchronization<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The amount of data processed during synchronization is minimized.</source>
          <target state="new">The amount of data processed during synchronization is minimized.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Efficient resynchronization<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Efficient resynchronization<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You can change how sync engine processes identity information without reconnecting the sync engine to the data source.</source>
          <target state="new">You can change how sync engine processes identity information without reconnecting the sync engine to the data source.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Opportunity to preview synchronization<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Opportunity to preview synchronization<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You can preview synchronization to verify that your assumptions about the identity management process are correct.</source>
          <target state="new">You can preview synchronization to verify that your assumptions about the identity management process are correct.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For each object specified in the Connector, the sync engine first tries to locate a representation of the object in the connector space of the Connector.</source>
          <target state="new">For each object specified in the Connector, the sync engine first tries to locate a representation of the object in the connector space of the Connector.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Sync engine examines all of the staging objects in the connector space and tries to find a corresponding staging object that has a matching anchor attribute.</source>
          <target state="new">Sync engine examines all of the staging objects in the connector space and tries to find a corresponding staging object that has a matching anchor attribute.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If no existing staging object has a matching anchor attribute, sync engine tries to find a corresponding staging object with the same distinguished name.</source>
          <target state="new">If no existing staging object has a matching anchor attribute, sync engine tries to find a corresponding staging object with the same distinguished name.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>When sync engine finds a staging object that matches by distinguished name but not by anchor, the following special behavior occurs:</source>
          <target state="new">When sync engine finds a staging object that matches by distinguished name but not by anchor, the following special behavior occurs:</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If the object located in the connector space has no anchor, then sync engine removes this object from the connector space and marks the metaverse object it is linked to as <bpt id="p1">**</bpt>retry provisioning on next synchronization run<ept id="p1">**</ept>.</source>
          <target state="new">If the object located in the connector space has no anchor, then sync engine removes this object from the connector space and marks the metaverse object it is linked to as <bpt id="p1">**</bpt>retry provisioning on next synchronization run<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Then it creates the new import object.</source>
          <target state="new">Then it creates the new import object.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If the object located in the connector space has an anchor, then sync engine assumes that this object has either been renamed or deleted in the connected directory.</source>
          <target state="new">If the object located in the connector space has an anchor, then sync engine assumes that this object has either been renamed or deleted in the connected directory.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>It assigns a temporary, new distinguished name for the connector space object so that it can stage the incoming object.</source>
          <target state="new">It assigns a temporary, new distinguished name for the connector space object so that it can stage the incoming object.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The old object then becomes <bpt id="p1">**</bpt>transient<ept id="p1">**</ept>, waiting for the Connector to import the rename or deletion to resolve the situation.</source>
          <target state="new">The old object then becomes <bpt id="p1">**</bpt>transient<ept id="p1">**</ept>, waiting for the Connector to import the rename or deletion to resolve the situation.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If sync engine locates a staging object that corresponds to the object specified in the Connector, it determines what kind of changes to apply.</source>
          <target state="new">If sync engine locates a staging object that corresponds to the object specified in the Connector, it determines what kind of changes to apply.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>For example, sync engine might rename or delete the object in the connected data source, or it might only update the object’s attribute values.</source>
          <target state="new">For example, sync engine might rename or delete the object in the connected data source, or it might only update the object’s attribute values.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Staging objects with updated data are marked as pending import.</source>
          <target state="new">Staging objects with updated data are marked as pending import.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Different types of pending imports are available.</source>
          <target state="new">Different types of pending imports are available.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Depending on the result of the import process, a staging object in the connector space has one of the following pending import types:</source>
          <target state="new">Depending on the result of the import process, a staging object in the connector space has one of the following pending import types:</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>None<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>None<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>No changes to any of the attributes of the staging object are available.</source>
          <target state="new">No changes to any of the attributes of the staging object are available.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Sync engine does not flag this as pending import.</source>
          <target state="new">Sync engine does not flag this as pending import.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The staging object is a new import object in the connector space.</source>
          <target state="new">The staging object is a new import object in the connector space.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Sync engine flags this as pending import for additional processing in the metaverse.</source>
          <target state="new">Sync engine flags this as pending import for additional processing in the metaverse.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Update<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Update<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Sync engine finds a corresponding staging object in the connector space and flags this as pending import so that updates to the attributes can be processed in the metaverse.</source>
          <target state="new">Sync engine finds a corresponding staging object in the connector space and flags this as pending import so that updates to the attributes can be processed in the metaverse.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Updates include object renaming.</source>
          <target state="new">Updates include object renaming.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Delete<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Delete<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Sync engine finds a corresponding staging object in the connector space and flags this as pending import so that the joined object can be deleted.</source>
          <target state="new">Sync engine finds a corresponding staging object in the connector space and flags this as pending import so that the joined object can be deleted.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Delete/Add<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Delete/Add<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Sync engine finds a corresponding staging object in the connector space, but the object types do not match.</source>
          <target state="new">Sync engine finds a corresponding staging object in the connector space, but the object types do not match.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>In this case, a delete-add modification is staged.</source>
          <target state="new">In this case, a delete-add modification is staged.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A delete-add modification indicates to the synch engine that a complete resynchronization of this object must occur because different sets of rules will apply to this object when the object type changes.</source>
          <target state="new">A delete-add modification indicates to the synch engine that a complete resynchronization of this object must occur because different sets of rules will apply to this object when the object type changes.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>By setting the pending import status of a staging object, it is possible to reduce significantly the amount of data processed during synchronization because doing so allows the system to process only those objects that have updated data.</source>
          <target state="new">By setting the pending import status of a staging object, it is possible to reduce significantly the amount of data processed during synchronization because doing so allows the system to process only those objects that have updated data.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Synchronization process</source>
          <target state="new">Synchronization process</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Synchronization consists of two related processes:</source>
          <target state="new">Synchronization consists of two related processes:</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Inbound synchronization, when the content of the metaverse is updated by using the data in the connector space.</source>
          <target state="new">Inbound synchronization, when the content of the metaverse is updated by using the data in the connector space.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Outbound synchronization, when the content of the connector space is updated by using data in the metaverse.</source>
          <target state="new">Outbound synchronization, when the content of the connector space is updated by using data in the metaverse.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>By using the information staged in the connector space, the inbound synchronization process creates in the metaverse the integrated view of the data that is stored in the connected data sources.</source>
          <target state="new">By using the information staged in the connector space, the inbound synchronization process creates in the metaverse the integrated view of the data that is stored in the connected data sources.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Either all staging objects or only those with pending import information are aggregated, depending on how the rules are configured.</source>
          <target state="new">Either all staging objects or only those with pending import information are aggregated, depending on how the rules are configured.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The outbound synchronization process updates export objects when metaverse objects change.</source>
          <target state="new">The outbound synchronization process updates export objects when metaverse objects change.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Inbound synchronization creates the integrated view in the metaverse of the identity information that is received from the connected data sources.</source>
          <target state="new">Inbound synchronization creates the integrated view in the metaverse of the identity information that is received from the connected data sources.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Sync engine can process identity information at any time by using the latest identity information that it has from the connected data source.</source>
          <target state="new">Sync engine can process identity information at any time by using the latest identity information that it has from the connected data source.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Inbound synchronization</source>
          <target state="new">Inbound synchronization</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Inbound synchronization includes the following processes:</source>
          <target state="new">Inbound synchronization includes the following processes:</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Provision<ept id="p1">**</ept> (also called <bpt id="p2">**</bpt>Projection<ept id="p2">**</ept> if it is important to distinguish this process from outbound synchronization provisioning).</source>
          <target state="new"><bpt id="p1">**</bpt>Provision<ept id="p1">**</ept> (also called <bpt id="p2">**</bpt>Projection<ept id="p2">**</ept> if it is important to distinguish this process from outbound synchronization provisioning).</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The Sync engine creates a new metaverse object based on a staging object and links them.</source>
          <target state="new">The Sync engine creates a new metaverse object based on a staging object and links them.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Provision is an object-level operation.</source>
          <target state="new">Provision is an object-level operation.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Join<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Join<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The Sync engine links a staging object to an existing metaverse object.</source>
          <target state="new">The Sync engine links a staging object to an existing metaverse object.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A join is an object-level operation.</source>
          <target state="new">A join is an object-level operation.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import attribute flow<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Import attribute flow<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Sync engine updates the attribute values, called attribute flow, of the object in the metaverse.</source>
          <target state="new">Sync engine updates the attribute values, called attribute flow, of the object in the metaverse.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Import attribute flow is an attribute-level operation that requires a link between a staging object and a metaverse object.</source>
          <target state="new">Import attribute flow is an attribute-level operation that requires a link between a staging object and a metaverse object.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Provision is the only process that creates objects in the metaverse.</source>
          <target state="new">Provision is the only process that creates objects in the metaverse.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Provision affects only import objects that are disjoined objects.</source>
          <target state="new">Provision affects only import objects that are disjoined objects.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>During provision, sync engine creates a metaverse object that corresponds to the object type of the import object and establishes a link between both objects, thus creating a joined object.</source>
          <target state="new">During provision, sync engine creates a metaverse object that corresponds to the object type of the import object and establishes a link between both objects, thus creating a joined object.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The join process also establishes a link between import objects and a metaverse object.</source>
          <target state="new">The join process also establishes a link between import objects and a metaverse object.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The difference between join and provision is that the join process requires that the import object be linked to an existing metaverse object, where the provision process creates a new metaverse object.</source>
          <target state="new">The difference between join and provision is that the join process requires that the import object be linked to an existing metaverse object, where the provision process creates a new metaverse object.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Sync engine tries to join an import object to a metaverse object by using criteria that is specified in the Synchronization Rule configuration.</source>
          <target state="new">Sync engine tries to join an import object to a metaverse object by using criteria that is specified in the Synchronization Rule configuration.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>During the provision and join processes, sync engine links a disjoind object to a metaverse object, thereby making them joined.</source>
          <target state="new">During the provision and join processes, sync engine links a disjoind object to a metaverse object, thereby making them joined.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>After these object-level operations are completed, sync engine can update the attribute values of the associated metaverse object.</source>
          <target state="new">After these object-level operations are completed, sync engine can update the attribute values of the associated metaverse object.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This process is called import attribute flow.</source>
          <target state="new">This process is called import attribute flow.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Import attribute flow occurs on all import objects that carry new data and are linked to a metaverse object.</source>
          <target state="new">Import attribute flow occurs on all import objects that carry new data and are linked to a metaverse object.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Outbound synchronization</source>
          <target state="new">Outbound synchronization</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Outbound synchronization updates export objects when a metaverse object changes but is not deleted.</source>
          <target state="new">Outbound synchronization updates export objects when a metaverse object changes but is not deleted.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The objective of outbound synchronization is to evaluate whether changes to metaverse objects require updates to staging objects in the connector spaces.</source>
          <target state="new">The objective of outbound synchronization is to evaluate whether changes to metaverse objects require updates to staging objects in the connector spaces.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>In some cases, the changes can require that staging objects in all connector spaces be updated.</source>
          <target state="new">In some cases, the changes can require that staging objects in all connector spaces be updated.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Staging objects that are changed are flagged as pending export, making them export objects.</source>
          <target state="new">Staging objects that are changed are flagged as pending export, making them export objects.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>These export objects are subsequently pushed out to the connected data source during the export process.</source>
          <target state="new">These export objects are subsequently pushed out to the connected data source during the export process.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Outbound synchronization has three processes:</source>
          <target state="new">Outbound synchronization has three processes:</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Provisioning</source>
          <target state="new">Provisioning</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Deprovisioning</source>
          <target state="new">Deprovisioning</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Export attribute flow</source>
          <target state="new">Export attribute flow</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Provisioning and deprovisioning are both object-level operations.</source>
          <target state="new">Provisioning and deprovisioning are both object-level operations.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Deprovisioning depends on provisioning because only provisioning can initiate it.</source>
          <target state="new">Deprovisioning depends on provisioning because only provisioning can initiate it.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Deprovisioning is triggered when provisioning removes the link between a metaverse object and an export object.</source>
          <target state="new">Deprovisioning is triggered when provisioning removes the link between a metaverse object and an export object.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Provisioning is always triggered when changes are applied to objects in the metaverse.</source>
          <target state="new">Provisioning is always triggered when changes are applied to objects in the metaverse.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>When changes are made to metaverse objects, sync engine can perform any of the following tasks as part of the provisioning process:</source>
          <target state="new">When changes are made to metaverse objects, sync engine can perform any of the following tasks as part of the provisioning process:</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Create joined objects, where a metaverse object is linked to a newly created export object.</source>
          <target state="new">Create joined objects, where a metaverse object is linked to a newly created export object.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Rename a joined object.</source>
          <target state="new">Rename a joined object.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Disjoin links between a metaverse object and staging objects, thereby creating a disjoined object.</source>
          <target state="new">Disjoin links between a metaverse object and staging objects, thereby creating a disjoined object.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If provisioning requires sync engine to create a new connector object, the staging object to which the metaverse object is linked is always an export object, because the object will not yet exist in the connected data source.</source>
          <target state="new">If provisioning requires sync engine to create a new connector object, the staging object to which the metaverse object is linked is always an export object, because the object will not yet exist in the connected data source.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>If provisioning requires sync engine to disjoin a joined object, thereby creating a disjoined object, deprovisioning is triggered.</source>
          <target state="new">If provisioning requires sync engine to disjoin a joined object, thereby creating a disjoined object, deprovisioning is triggered.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The deprovisioning process will  delete the object.</source>
          <target state="new">The deprovisioning process will  delete the object.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>During deprovisioning, deleting an export object does not physically delete the object.</source>
          <target state="new">During deprovisioning, deleting an export object does not physically delete the object.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The object is flagged as <bpt id="p1">**</bpt>deleted<ept id="p1">**</ept>, which means that the delete operation is staged on the object.</source>
          <target state="new">The object is flagged as <bpt id="p1">**</bpt>deleted<ept id="p1">**</ept>, which means that the delete operation is staged on the object.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Export attribute flow also occurs during the outbound synchronization process, similar to the way that import attribute flow occurs during inbound synchronization.</source>
          <target state="new">Export attribute flow also occurs during the outbound synchronization process, similar to the way that import attribute flow occurs during inbound synchronization.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Export attribute flow occurs only between metaverse and export objects that are joined.</source>
          <target state="new">Export attribute flow occurs only between metaverse and export objects that are joined.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Export process</source>
          <target state="new">Export process</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>During the export process, sync engine examines all export objects that are flagged as pending export in the connector space, and then sends updates to the connected data source.</source>
          <target state="new">During the export process, sync engine examines all export objects that are flagged as pending export in the connector space, and then sends updates to the connected data source.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The sync engine can determine the success of an export but it cannot sufficiently determine that the identity management process is complete.</source>
          <target state="new">The sync engine can determine the success of an export but it cannot sufficiently determine that the identity management process is complete.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Objects in the connected data source can always be changed by other processes.</source>
          <target state="new">Objects in the connected data source can always be changed by other processes.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Because sync engine does not have a persistent connection to the connected data source, it is not sufficient to make assumptions about the properties of an object in the connected data source based only on a successful export notification.</source>
          <target state="new">Because sync engine does not have a persistent connection to the connected data source, it is not sufficient to make assumptions about the properties of an object in the connected data source based only on a successful export notification.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>For example, a process in the connected data source could change the object’s attributes back to their original values (that is, the connected data source could overwrite the values immediately after the data is pushed out by sync engine and successfully applied in the connected data source).</source>
          <target state="new">For example, a process in the connected data source could change the object’s attributes back to their original values (that is, the connected data source could overwrite the values immediately after the data is pushed out by sync engine and successfully applied in the connected data source).</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The sync engine stores export and import status information about each staging object.</source>
          <target state="new">The sync engine stores export and import status information about each staging object.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>If values of the attributes that are specified in the attribute inclusion list have changed since the last export, the storage of import and export status enables sync engine to react appropriately.</source>
          <target state="new">If values of the attributes that are specified in the attribute inclusion list have changed since the last export, the storage of import and export status enables sync engine to react appropriately.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Sync engine uses the import process to confirm attribute values that have been exported to the connected data source.</source>
          <target state="new">Sync engine uses the import process to confirm attribute values that have been exported to the connected data source.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A comparison between the imported and exported information, as shown in the following illustration, enables sync engine to determine whether the export was successful or if it needs to be repeated.</source>
          <target state="new">A comparison between the imported and exported information, as shown in the following illustration, enables sync engine to determine whether the export was successful or if it needs to be repeated.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Arch7</source>
          <target state="new">Arch7</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>For example, if sync engine exports attribute C, which has a value of 5, to a connected data source, it stores C=5 in its export status memory.</source>
          <target state="new">For example, if sync engine exports attribute C, which has a value of 5, to a connected data source, it stores C=5 in its export status memory.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Each additional export on this object results in an attempt to export C=5 to the connected data source again because sync engine assumes that this value has not been persistently applied to the object (that is, unless a different value was imported recently from the connected data source).</source>
          <target state="new">Each additional export on this object results in an attempt to export C=5 to the connected data source again because sync engine assumes that this value has not been persistently applied to the object (that is, unless a different value was imported recently from the connected data source).</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The export memory is cleared as soon as C=5 is received during an import operation on the object.</source>
          <target state="new">The export memory is cleared as soon as C=5 is received during an import operation on the object.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Learn more about the <bpt id="p1">[</bpt>Azure AD Connect sync<ept id="p1">](active-directory-aadconnectsync-whatis.md)</ept> configuration.</source>
          <target state="new">Learn more about the <bpt id="p1">[</bpt>Azure AD Connect sync<ept id="p1">](active-directory-aadconnectsync-whatis.md)</ept> configuration.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Learn more about <bpt id="p1">[</bpt>Integrating your on-premises identities with Azure Active Directory<ept id="p1">](active-directory-aadconnect.md)</ept>.</source>
          <target state="new">Learn more about <bpt id="p1">[</bpt>Integrating your on-premises identities with Azure Active Directory<ept id="p1">](active-directory-aadconnect.md)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>