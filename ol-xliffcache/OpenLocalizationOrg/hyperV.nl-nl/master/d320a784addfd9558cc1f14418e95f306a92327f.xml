{
  "nodes": [
    {
      "content": "How to work with the .NET backend server SDK for Mobile Apps | Azure App Service",
      "pos": [
        27,
        107
      ]
    },
    {
      "content": "Learn how to work with the .NET backend server SDK for Azure App Service Mobile Apps.",
      "pos": [
        126,
        211
      ]
    },
    {
      "content": "Work with the .NET backend server SDK for Azure Mobile Apps",
      "pos": [
        669,
        728
      ]
    },
    {
      "content": "This topic shows you how to use the .NET backend server SDK in key Azure App Service Mobile Apps scenarios.",
      "pos": [
        846,
        953
      ]
    },
    {
      "content": "The Azure Mobile Apps SDK helps you work with mobile clients from your ASP.NET application.",
      "pos": [
        954,
        1045
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> The <bpt id=\"p1\">[</bpt>.NET server SDK for Azure Mobile Apps<ept id=\"p1\">](https://github.com/Azure/azure-mobile-apps-net-server)</ept> is open source on GitHub.",
      "pos": [
        1048,
        1184
      ]
    },
    {
      "content": "The repository contains the entire server SDK unit test suite as well as some sample projects.",
      "pos": [
        1185,
        1279
      ]
    },
    {
      "content": "Reference documentation",
      "pos": [
        1284,
        1307
      ]
    },
    {
      "pos": [
        1309,
        1464
      ],
      "content": "The reference documentation for the server SDK is located here: <bpt id=\"p1\">[</bpt>Azure Mobile Apps .NET Reference<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn961176.aspx)</ept>."
    },
    {
      "pos": [
        1469,
        1551
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create a .NET backend for your mobile application"
    },
    {
      "content": "If you are starting a new project, you can create an App Service application using either the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept> or Visual Studio.",
      "pos": [
        1553,
        1679
      ]
    },
    {
      "content": "This section will help you use one of these to create a new mobile application backend which hosts a simple todo list API.",
      "pos": [
        1680,
        1802
      ]
    },
    {
      "content": "You can run this locally or publish the project to your cloud-based App Service mobile app.",
      "pos": [
        1803,
        1894
      ]
    },
    {
      "pos": [
        1896,
        2028
      ],
      "content": "If you are adding mobile capabilities to an existing project, see the <bpt id=\"p1\">[</bpt>Download and initialize the SDK<ept id=\"p1\">](#install-sdk)</ept> section below."
    },
    {
      "content": "Create a .NET backend using the Azure portal",
      "pos": [
        2034,
        2078
      ]
    },
    {
      "content": "You can create a new mobile application right in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept>.",
      "pos": [
        2080,
        2148
      ]
    },
    {
      "content": "You can either follow the steps below, or create a new client and server together by following the <bpt id=\"p1\">[</bpt>Create a mobile app<ept id=\"p1\">](app-service-mobile-ios-get-started.md)</ept> tutorial.",
      "pos": [
        2149,
        2318
      ]
    },
    {
      "content": "&amp;nbsp;&amp;nbsp;9.",
      "pos": [
        2464,
        2478
      ]
    },
    {
      "content": "Back in the <bpt id=\"p1\">_</bpt>Get started<ept id=\"p1\">_</ept> blade, under <bpt id=\"p2\">**</bpt>Create a table API<ept id=\"p2\">**</ept>, choose <bpt id=\"p3\">**</bpt>C#<ept id=\"p3\">**</ept> as your <bpt id=\"p4\">**</bpt>Backend language<ept id=\"p4\">**</ept>.",
      "pos": [
        2479,
        2585
      ]
    },
    {
      "content": "&amp;nbsp;&amp;nbsp;10.",
      "pos": [
        2587,
        2602
      ]
    },
    {
      "content": "Click Download, extract the compressed project files to your local computer, and open the solution in Visual Studio.",
      "pos": [
        2603,
        2719
      ]
    },
    {
      "content": "Create a .NET backend using Visual Studio 2013 and Visual Studio 2015",
      "pos": [
        2725,
        2794
      ]
    },
    {
      "content": "In order to create a Mobile Apps project in Visual Studio, you will need to install the <bpt id=\"p1\">[</bpt>Azure SDK for .NET<ept id=\"p1\">](https://azure.microsoft.com/downloads/)</ept>, version 2.8.1 or later.",
      "pos": [
        2796,
        2969
      ]
    },
    {
      "content": "Once you have installed the SDK, create a new ASP.NET application:",
      "pos": [
        2970,
        3036
      ]
    },
    {
      "pos": [
        3041,
        3114
      ],
      "content": "Open the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog (from <bpt id=\"p2\">*</bpt>File<ept id=\"p2\">*</ept> &gt; <bpt id=\"p3\">**</bpt>New<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>Project...<ept id=\"p4\">**</ept>)."
    },
    {
      "pos": [
        3119,
        3176
      ],
      "content": "Expand <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept>, and select <bpt id=\"p3\">**</bpt>Web<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        3181,
        3216
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>ASP.NET Web Application<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Fill in the project name.",
      "pos": [
        3221,
        3246
      ]
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        3247,
        3265
      ]
    },
    {
      "content": "Under <bpt id=\"p1\">_</bpt>ASP.NET 4.5.2 Templates<ept id=\"p1\">_</ept>, select <bpt id=\"p2\">**</bpt>Azure Mobile App<ept id=\"p2\">**</ept>.",
      "pos": [
        3270,
        3331
      ]
    },
    {
      "content": "Check <bpt id=\"p1\">**</bpt>Host in the cloud<ept id=\"p1\">**</ept> to create a new mobile app in the cloud to which you can publish this project.",
      "pos": [
        3332,
        3438
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        3443,
        3456
      ]
    },
    {
      "content": "Your application will be created and appear in the Solution Explorer.",
      "pos": [
        3457,
        3526
      ]
    },
    {
      "pos": [
        3531,
        3596
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"install-sdk\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Download and initialize the SDK"
    },
    {
      "content": "The SDK is available on <bpt id=\"p1\">[</bpt><ept id=\"p1\">NuGet.org]</ept>.",
      "pos": [
        3598,
        3634
      ]
    },
    {
      "content": "This package includes the base functionality required to get started using the SDK.",
      "pos": [
        3635,
        3718
      ]
    },
    {
      "content": "To initialize the SDK, you need to perform actions on the <bpt id=\"p1\">**</bpt>HttpConfiguration<ept id=\"p1\">**</ept> object.",
      "pos": [
        3719,
        3806
      ]
    },
    {
      "content": "Install the SDK",
      "pos": [
        3811,
        3826
      ]
    },
    {
      "pos": [
        3828,
        4075
      ],
      "content": "To install the SDK, right-click on the server project in Visual Studio, select <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept>, search for the <bpt id=\"p2\">[</bpt>Microsoft.Azure.Mobile.Server<ept id=\"p2\">](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server/)</ept> package, then click <bpt id=\"p3\">**</bpt>Install<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        4080,
        4145
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"server-project-setup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Initialize the server project"
    },
    {
      "content": "A .NET backend server project is initialized similar to other ASP.NET projects, by including an OWIN startup class.",
      "pos": [
        4147,
        4262
      ]
    },
    {
      "content": "Ensure that you have referenced the NuGet package <ph id=\"ph1\">`Microsoft.Owin.Host.SystemWeb`</ph>.",
      "pos": [
        4263,
        4345
      ]
    },
    {
      "content": "To add this class in Visual Studio, right-click on your server project and select <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>New Item<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>Web<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>General<ept id=\"p4\">**</ept> &gt; <bpt id=\"p5\">**</bpt>OWIN Startup class<ept id=\"p5\">**</ept>.",
      "pos": [
        4346,
        4504
      ]
    },
    {
      "content": "This will generate a class with the following attribute:",
      "pos": [
        4506,
        4562
      ]
    },
    {
      "content": "In the <ph id=\"ph1\">`Configuration()`</ph> method of your OWIN startup class, set up the server project using an <bpt id=\"p1\">**</bpt>HttpConfiguration<ept id=\"p1\">**</ept> object which represents the configuration options for the service.",
      "pos": [
        4639,
        4822
      ]
    },
    {
      "content": "The following example initialize the server project, with no added features:",
      "pos": [
        4823,
        4899
      ]
    },
    {
      "content": "To enable individual features, you must call extension methods on the <bpt id=\"p1\">**</bpt>MobileAppConfiguration<ept id=\"p1\">**</ept> object before calling <bpt id=\"p2\">**</bpt>ApplyTo<ept id=\"p2\">**</ept>.",
      "pos": [
        5183,
        5314
      ]
    },
    {
      "content": "For example, the following code adds the default routes to all API controllers that have the attribute <ph id=\"ph1\">`[MobileAppController]`</ph> during initialization:",
      "pos": [
        5315,
        5464
      ]
    },
    {
      "pos": [
        5555,
        5650
      ],
      "content": "Note that <ph id=\"ph1\">`MapApiControllers`</ph> only maps controllers with the attribute <ph id=\"ph2\">`[MobileAppController]`</ph>."
    },
    {
      "content": "Many of the feature extension methods are available via additional NuGet packages you can include, which are described in the section below.",
      "pos": [
        5652,
        5792
      ]
    },
    {
      "content": "The server quickstart from the Azure portal calls <bpt id=\"p1\">**</bpt>UseDefaultConfiguration()<ept id=\"p1\">**</ept>.",
      "pos": [
        5794,
        5874
      ]
    },
    {
      "content": "This equivalent to the following setup:",
      "pos": [
        5875,
        5914
      ]
    },
    {
      "content": "SDK extensions",
      "pos": [
        6548,
        6562
      ]
    },
    {
      "content": "The following NuGet-based extension packages provide various mobile features that can be used by your application.",
      "pos": [
        6564,
        6678
      ]
    },
    {
      "content": "You enable extensions during initialization by using the <bpt id=\"p1\">**</bpt>MobileAppConfiguration<ept id=\"p1\">**</ept> object.",
      "pos": [
        6679,
        6770
      ]
    },
    {
      "pos": [
        6774,
        7186
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Quickstart]\n   Supports the basic Mobile Apps setup. Added to the configuration by calling the **UseDefaultConfiguration** extension method during initialization. This extension includes following extensions: Notifications, Authentication, Entity, Tables, Crossdomain and Home packages. This is equivalent to the quickstart server project that you download from the Azure portal.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Quickstart]</ept>\n   Supports the basic Mobile Apps setup.",
          "pos": [
            0,
            83
          ]
        },
        {
          "content": "Added to the configuration by calling the <bpt id=\"p1\">**</bpt>UseDefaultConfiguration<ept id=\"p1\">**</ept> extension method during initialization.",
          "pos": [
            84,
            193
          ]
        },
        {
          "content": "This extension includes following extensions: Notifications, Authentication, Entity, Tables, Crossdomain and Home packages.",
          "pos": [
            194,
            317
          ]
        },
        {
          "content": "This is equivalent to the quickstart server project that you download from the Azure portal.",
          "pos": [
            318,
            410
          ]
        }
      ]
    },
    {
      "pos": [
        7190,
        7473
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Home](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Home/)\n  Implements the default *this mobile app is up and running page* for the web site root. Add to the configuration by calling the **AddMobileAppHomeController** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Microsoft.Azure.Mobile.Server.Home",
          "pos": [
            1,
            35
          ]
        },
        {
          "content": "  Implements the default *this mobile app is up and running page* for the web site root. Add to the configuration by calling the **AddMobileAppHomeController** extension method.",
          "pos": [
            104,
            281
          ],
          "nodes": [
            {
              "content": "Implements the default <bpt id=\"p1\">*</bpt>this mobile app is up and running page<ept id=\"p1\">*</ept> for the web site root.",
              "pos": [
                2,
                88
              ]
            },
            {
              "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddMobileAppHomeController<ept id=\"p1\">**</ept> extension method.",
              "pos": [
                89,
                177
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        7477,
        7730
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Tables](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Tables/)\n  includes classes for working with data and sets-up the data pipeline. Add to the configuration by calling the **AddTables** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Microsoft.Azure.Mobile.Server.Tables",
          "pos": [
            1,
            37
          ]
        },
        {
          "content": "  includes classes for working with data and sets-up the data pipeline. Add to the configuration by calling the **AddTables** extension method.",
          "pos": [
            108,
            251
          ],
          "nodes": [
            {
              "content": "includes classes for working with data and sets-up the data pipeline.",
              "pos": [
                2,
                71
              ]
            },
            {
              "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddTables<ept id=\"p1\">**</ept> extension method.",
              "pos": [
                72,
                143
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        7734,
        8001
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Entity](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Entity/)\n  Enables the Entity Framework to access data in the SQL Database. Add to the configuration by calling the **AddTablesWithEntityFramework** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Microsoft.Azure.Mobile.Server.Entity",
          "pos": [
            1,
            37
          ]
        },
        {
          "content": "  Enables the Entity Framework to access data in the SQL Database. Add to the configuration by calling the **AddTablesWithEntityFramework** extension method.",
          "pos": [
            108,
            265
          ],
          "nodes": [
            {
              "content": "Enables the Entity Framework to access data in the SQL Database.",
              "pos": [
                2,
                66
              ]
            },
            {
              "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddTablesWithEntityFramework<ept id=\"p1\">**</ept> extension method.",
              "pos": [
                67,
                157
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        8005,
        8278
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Authentication]\n  Enables authentication and sets-up the OWIN middleware used to validate tokens. Add to the configuration by calling the **AddAppServiceAuthentication** and **IAppBuilder**.**UseAppServiceAuthentication** extension methods.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Authentication]</ept>\n  Enables authentication and sets-up the OWIN middleware used to validate tokens.",
          "pos": [
            0,
            128
          ]
        },
        {
          "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddAppServiceAuthentication<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>IAppBuilder<ept id=\"p2\">**</ept>.<bpt id=\"p3\">**</bpt>UseAppServiceAuthentication<ept id=\"p3\">**</ept> extension methods.",
          "pos": [
            129,
            271
          ]
        }
      ]
    },
    {
      "pos": [
        8282,
        8483
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Notifications]\n  Enables push notifications and defines a push registration endpoint. Add to the configuration by calling the **AddPushNotifications** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Notifications]</ept>\n  Enables push notifications and defines a push registration endpoint.",
          "pos": [
            0,
            116
          ]
        },
        {
          "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>AddPushNotifications<ept id=\"p1\">**</ept> extension method.",
          "pos": [
            117,
            199
          ]
        }
      ]
    },
    {
      "pos": [
        8487,
        8784
      ],
      "content": "[Microsoft.Azure.Mobile.Server.CrossDomain](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.CrossDomain/)\n  Creates a controller that serves data to legacy web browsers from your Mobile App. Add to the configuration by calling the **MapLegacyCrossDomainController** extension method.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Microsoft.Azure.Mobile.Server.CrossDomain",
          "pos": [
            1,
            42
          ]
        },
        {
          "content": "  Creates a controller that serves data to legacy web browsers from your Mobile App. Add to the configuration by calling the **MapLegacyCrossDomainController** extension method.",
          "pos": [
            118,
            295
          ],
          "nodes": [
            {
              "content": "Creates a controller that serves data to legacy web browsers from your Mobile App.",
              "pos": [
                2,
                84
              ]
            },
            {
              "content": "Add to the configuration by calling the <bpt id=\"p1\">**</bpt>MapLegacyCrossDomainController<ept id=\"p1\">**</ept> extension method.",
              "pos": [
                85,
                177
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        8788,
        9012
      ],
      "content": "[Microsoft.Azure.Mobile.Server.Login]\n   Provides preview support for custom authentication via the AppServiceLoginHandler.CreateToken() method. This is a static method and does not need to be enabled in the configuration.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Login]</ept>\n   Provides preview support for custom authentication via the AppServiceLoginHandler.CreateToken() method.",
          "pos": [
            0,
            144
          ]
        },
        {
          "content": "This is a static method and does not need to be enabled in the configuration.",
          "pos": [
            145,
            222
          ]
        }
      ]
    },
    {
      "pos": [
        9017,
        9088
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"publish-server-project\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Publish the server project"
    },
    {
      "content": "This section shows you how to publish your .NET backend project from Visual Studio.",
      "pos": [
        9090,
        9173
      ]
    },
    {
      "content": "You can also deploy your backend project using Git or any of the other methods covered in the <bpt id=\"p1\">[</bpt>Azure App Service deployment documentation<ept id=\"p1\">](../app-service-web/web-sites-deploy.md)</ept>.",
      "pos": [
        9174,
        9353
      ]
    },
    {
      "content": "In Visual Studio, rebuild the project to restore NuGet packages.",
      "pos": [
        9358,
        9422
      ]
    },
    {
      "content": "In Solution Explorer, right-click the project, click <bpt id=\"p1\">**</bpt>Publish<ept id=\"p1\">**</ept>.",
      "pos": [
        9427,
        9492
      ]
    },
    {
      "content": "The first time you publish, you will need to define a publishing profile.",
      "pos": [
        9493,
        9566
      ]
    },
    {
      "content": "When you already have a profile defined, you can just select it and click <bpt id=\"p1\">**</bpt>Publish<ept id=\"p1\">**</ept>.",
      "pos": [
        9567,
        9653
      ]
    },
    {
      "content": "If asked to select a publish target, click <bpt id=\"p1\">**</bpt>Microsoft Azure App Service<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Next<ept id=\"p2\">**</ept>, then (if needed) sign-in with your Azure credentials.",
      "pos": [
        9658,
        9798
      ]
    },
    {
      "content": "Visual Studio downloads and securely stores your publish settings directly from Azure.",
      "pos": [
        9799,
        9885
      ]
    },
    {
      "pos": [
        9985,
        10130
      ],
      "content": "Choose your <bpt id=\"p1\">**</bpt>Subscription<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Resource Type<ept id=\"p2\">**</ept> from <bpt id=\"p3\">**</bpt>View<ept id=\"p3\">**</ept>, expand <bpt id=\"p4\">**</bpt>Mobile App<ept id=\"p4\">**</ept> and click your Mobile App backend, then click <bpt id=\"p5\">**</bpt>OK<ept id=\"p5\">**</ept>."
    },
    {
      "pos": [
        10230,
        10291
      ],
      "content": "Verify the publish profile information and click <bpt id=\"p1\">**</bpt>Publish<ept id=\"p1\">**</ept>."
    },
    {
      "content": "When your Mobile App backend has published successfully, you will see a landing page indicating success.",
      "pos": [
        10392,
        10496
      ]
    },
    {
      "pos": [
        10594,
        10666
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"define-table-controller\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> How to: Define a table controller"
    },
    {
      "content": "A table controller provides access to entity data in a table-based data store, such as SQL Database or Azure Table storage.",
      "pos": [
        10668,
        10791
      ]
    },
    {
      "content": "Table controllers inherit from the <bpt id=\"p1\">**</bpt>TableController<ept id=\"p1\">**</ept> generic class, where the generic type is an entity in the model that represents the table schema, as follows:",
      "pos": [
        10792,
        10956
      ]
    },
    {
      "content": "Table controllers are initialized by using the <bpt id=\"p1\">**</bpt>AddTables<ept id=\"p1\">**</ept> extension method.",
      "pos": [
        11049,
        11127
      ]
    },
    {
      "content": "This adds routes under <ph id=\"ph1\">`/tables/`</ph> for all subclasses of <ph id=\"ph2\">`TableController`</ph>.",
      "pos": [
        11128,
        11202
      ]
    },
    {
      "content": "The following example initializes a table controller that uses Entity Framework for data access:",
      "pos": [
        11204,
        11300
      ]
    },
    {
      "pos": [
        11468,
        11676
      ],
      "content": "For an example of a table controller that uses Entity Framework to access data from an Azure SQL Database, see the <bpt id=\"p1\">**</bpt>TodoItemController<ept id=\"p1\">**</ept> class in the quickstart server project download from the Azure portal."
    },
    {
      "content": "How to: Define a custom API controller",
      "pos": [
        11681,
        11719
      ]
    },
    {
      "content": "The custom API controller provides the most basic functionality to your Mobile App backend by exposing an endpoint.",
      "pos": [
        11721,
        11836
      ]
    },
    {
      "content": "You can register a mobile-specific API controller using the [MobileAppController] attribute.",
      "pos": [
        11837,
        11929
      ]
    },
    {
      "content": "This attribute registers the route and also sets up the Mobile Apps JSON serializer.",
      "pos": [
        11930,
        12014
      ]
    },
    {
      "pos": [
        12019,
        12172
      ],
      "content": "In Visual Studio, right-click the Controllers folder, then click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Controller<ept id=\"p2\">**</ept>, select <bpt id=\"p3\">**</bpt>Web API 2 Controller&amp;mdash;Empty<ept id=\"p3\">**</ept> and click <bpt id=\"p4\">**</bpt>Add<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Supply a <bpt id=\"p1\">**</bpt>Controller name<ept id=\"p1\">**</ept>, such as <ph id=\"ph1\">`CustomController`</ph>, and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.",
      "pos": [
        12177,
        12253
      ]
    },
    {
      "content": "This creates a new <bpt id=\"p1\">**</bpt>CustomController<ept id=\"p1\">**</ept> class that inherits from <bpt id=\"p2\">**</bpt>ApiController<ept id=\"p2\">**</ept>.",
      "pos": [
        12254,
        12337
      ]
    },
    {
      "content": "In the new controller class file, add the following using statement:",
      "pos": [
        12342,
        12410
      ]
    },
    {
      "pos": [
        12468,
        12582
      ],
      "content": "Apply the <bpt id=\"p1\">**</bpt>[MobileAppController]<ept id=\"p1\">**</ept> attribute to the API controller class definition, as in the following example:"
    },
    {
      "pos": [
        12712,
        12839
      ],
      "content": "In App_Start/Startup.MobileApp.cs file, add a call to the  <bpt id=\"p1\">**</bpt>MapApiControllers<ept id=\"p1\">**</ept> extension method, as in the following example:"
    },
    {
      "pos": [
        12946,
        13082
      ],
      "content": "Note that you do not need to call <bpt id=\"p1\">**</bpt>MapApiControllers<ept id=\"p1\">**</ept> if you instead call <bpt id=\"p2\">**</bpt>UseDefaultConfiguration<ept id=\"p2\">**</ept>, which initializes all features."
    },
    {
      "pos": [
        13084,
        13273
      ],
      "content": "Any controller that does not have <bpt id=\"p1\">**</bpt>MobileAppControllerAttribute<ept id=\"p1\">**</ept> applied can still be accessed by clients, but it may not be correctly consumed by clients using any Mobile App client SDK."
    },
    {
      "content": "How to: Work with authentication",
      "pos": [
        13278,
        13310
      ]
    },
    {
      "content": "Mobile Apps uses the facilities of App Service authentication and ASP.NET to simply the process of enabling authentication for your apps.",
      "pos": [
        13312,
        13449
      ]
    },
    {
      "content": "This section shows you how to perform the following authentication-related tasks in your .NET backend server project:",
      "pos": [
        13450,
        13567
      ]
    },
    {
      "content": "How to: Add authentication to a server project",
      "pos": [
        13572,
        13618
      ]
    },
    {
      "content": "How to: Use custom authentication for your application",
      "pos": [
        13634,
        13688
      ]
    },
    {
      "content": "How to: Retrieve authenticated user information",
      "pos": [
        13707,
        13754
      ]
    },
    {
      "content": "How to: Restrict data access for authorized users",
      "pos": [
        13771,
        13820
      ]
    },
    {
      "pos": [
        13839,
        13908
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add-auth\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Add authentication to a server project"
    },
    {
      "content": "You can add authentication to your server project by extending the <bpt id=\"p1\">**</bpt>MobileAppConfiguration<ept id=\"p1\">**</ept> object and configuring OWIN middleware.",
      "pos": [
        13910,
        14043
      ]
    },
    {
      "content": "When you install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Quickstart]</ept> package and call the <bpt id=\"p2\">**</bpt>UseDefaultConfiguration<ept id=\"p2\">**</ept> extension method, you can skip to step 3.",
      "pos": [
        14044,
        14198
      ]
    },
    {
      "pos": [
        14203,
        14288
      ],
      "content": "In Visual Studio, install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Authentication]</ept> package."
    },
    {
      "pos": [
        14293,
        14405
      ],
      "content": "In the Startup.cs project file, add the following line of code at the beginning of the <bpt id=\"p1\">**</bpt>Configuration<ept id=\"p1\">**</ept> method:"
    },
    {
      "content": "This adds the OWIN middleware component that enables your Azure Mobile App to validate tokens issued by the associated App Service gateway.",
      "pos": [
        14461,
        14600
      ]
    },
    {
      "content": "Add the <ph id=\"ph1\">`[Authorize]`</ph> attribute to any controller or method that requires authentication.",
      "pos": [
        14605,
        14694
      ]
    },
    {
      "content": "Users must now be authenticated to access that endpoint or specific APIs.",
      "pos": [
        14695,
        14768
      ]
    },
    {
      "pos": [
        14770,
        14924
      ],
      "content": "To learn about how to authenticate clients to your Mobile Apps backend, see <bpt id=\"p1\">[</bpt>Add authentication to your app<ept id=\"p1\">](app-service-mobile-ios-get-started-users.md)</ept>."
    },
    {
      "pos": [
        14930,
        15010
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"custom-auth\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Use custom authentication for your application"
    },
    {
      "content": "You can choose to provide your own login system if you do not wish to use one of the App Service Authentication/Authorization providers.",
      "pos": [
        15012,
        15148
      ]
    },
    {
      "content": "To do so, install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Login]</ept> package.",
      "pos": [
        15149,
        15217
      ]
    },
    {
      "content": "You will need to provide your own logic for determining if a user should be signed in.",
      "pos": [
        15219,
        15305
      ]
    },
    {
      "content": "For example, you might check against salted and hashed passwords in a database.",
      "pos": [
        15306,
        15385
      ]
    },
    {
      "content": "In the example below, the <ph id=\"ph1\">`isValidAssertion()`</ph> method is responsible for these checks and is defined elsewhere.",
      "pos": [
        15386,
        15497
      ]
    },
    {
      "content": "The custom authentication is exposed by creating a new ApiController and exposing register and login actions like the one below.",
      "pos": [
        15499,
        15627
      ]
    },
    {
      "content": "The client can attempt login by collecting the relevant information from the user and submitting an HTTPS POST to the API with the user information in the body.",
      "pos": [
        15628,
        15788
      ]
    },
    {
      "content": "Once the server validates the assertion, a token can be issued using the <ph id=\"ph1\">`AppServiceLoginHandler.CreateToken()`</ph> method.",
      "pos": [
        15789,
        15908
      ]
    },
    {
      "content": "An example login action might be:",
      "pos": [
        15910,
        15943
      ]
    },
    {
      "content": "In the above, LoginResult and LoginResultUser are just simple objects exposing the properties shown.",
      "pos": [
        16818,
        16918
      ]
    },
    {
      "content": "The client expects login responses to come back as JSON objects of the form:",
      "pos": [
        16919,
        16995
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`MobileAppLoginHAppServiceLoginHandlerandler.CreateToken()`</ph> method includes an <bpt id=\"p1\">_</bpt>audience<ept id=\"p1\">_</ept> and an <bpt id=\"p2\">_</bpt>issuer<ept id=\"p2\">_</ept> parameter.",
      "pos": [
        17137,
        17257
      ]
    },
    {
      "content": "Both of these are typically set to the URL of your application root, using the HTTPS scheme.",
      "pos": [
        17258,
        17350
      ]
    },
    {
      "content": "Similarly you should set <bpt id=\"p1\">_</bpt>secretKey<ept id=\"p1\">_</ept> to be the value of your application's signing key.",
      "pos": [
        17351,
        17438
      ]
    },
    {
      "content": "This is a sensitive value that should never be shared or included in a client.",
      "pos": [
        17439,
        17517
      ]
    },
    {
      "content": "You can obtain this value while hosted in App Service by referencing the <bpt id=\"p1\">_</bpt>WEBSITE_AUTH_SIGNING_KEY<ept id=\"p1\">_</ept> environment variable.",
      "pos": [
        17518,
        17639
      ]
    },
    {
      "content": "If needed in a local debugging context, follow the instructions in the <bpt id=\"p1\">[</bpt>Local debugging with authentication<ept id=\"p1\">](#local-debug)</ept> section to retrieve the key and store it as an application setting.",
      "pos": [
        17640,
        17830
      ]
    },
    {
      "content": "You also need to provide a lifetime for the issued token, as well as any claims you would like included.",
      "pos": [
        17832,
        17936
      ]
    },
    {
      "content": "It is required that you provide a subject claim, as shown in the example code.",
      "pos": [
        17937,
        18015
      ]
    },
    {
      "content": "You can also simplify the client code to use the <ph id=\"ph1\">`loginAsync()`</ph> method (naming may vary across platforms) instead of a manual HTTP POST.",
      "pos": [
        18017,
        18153
      ]
    },
    {
      "content": "You would use the overload which takes an additional token parameter, which correlates to the assertion object you would POST.",
      "pos": [
        18154,
        18280
      ]
    },
    {
      "content": "The provider in this case should be a custom name of your choosing.",
      "pos": [
        18281,
        18348
      ]
    },
    {
      "content": "Then on the server, your login action should be on the <bpt id=\"p1\">_</bpt>/.auth/login/{customProviderName}<ept id=\"p1\">_</ept> path which includes this custom name.",
      "pos": [
        18349,
        18477
      ]
    },
    {
      "content": "To put your controller on this path, add a route to your HttpConfiguration before applying your MobileAppConfiguration.",
      "pos": [
        18478,
        18597
      ]
    },
    {
      "content": "Replace the string \"CustomAuth\" above with the name of the controller hosting your login action.",
      "pos": [
        18711,
        18807
      ]
    },
    {
      "pos": [
        18810,
        18944
      ],
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> Using the loginAsync() approach ensures that the authentication token is attached to every subsequent call to the service."
    },
    {
      "pos": [
        18949,
        19020
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"user-info\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Retrieve authenticated user information"
    },
    {
      "content": "When a user is authenticated by App Service, you can access the assigned user ID and other information in your .NET backend code.",
      "pos": [
        19022,
        19151
      ]
    },
    {
      "content": "This is useful for making authorization decisions for a given user in the backend, such as whether a specific user can access a table row or other resource.",
      "pos": [
        19152,
        19308
      ]
    },
    {
      "content": "The following code shows how to obtain the",
      "pos": [
        19309,
        19351
      ]
    },
    {
      "content": "user ID for a logged-in user:",
      "pos": [
        19352,
        19381
      ]
    },
    {
      "content": "The SID is derived from the provider-specific user ID and is static for a given user and login provider.",
      "pos": [
        19557,
        19661
      ]
    },
    {
      "content": "App Service also lets you request specific claims from your login provider.",
      "pos": [
        19663,
        19738
      ]
    },
    {
      "content": "This lets you request more information from the provider, such as by using the Facebook Graph APIs.",
      "pos": [
        19739,
        19838
      ]
    },
    {
      "content": "You can specify claims in the provider blade in the portal.",
      "pos": [
        19839,
        19898
      ]
    },
    {
      "content": "Some claims require additional configuration with the provider.",
      "pos": [
        19899,
        19962
      ]
    },
    {
      "pos": [
        19964,
        20157
      ],
      "content": "The following code calls the <bpt id=\"p1\">**</bpt>GetAppServiceIdentityAsync<ept id=\"p1\">**</ept> extension method to get the login credentials, which include the access token needed to make requests against the Facebook Graph API:"
    },
    {
      "pos": [
        20945,
        21084
      ],
      "content": "Note that you must add a using statement for <ph id=\"ph1\">`System.Security.Principal`</ph> to make the <bpt id=\"p1\">**</bpt>GetAppServiceIdentityAsync<ept id=\"p1\">**</ept> extension method  work."
    },
    {
      "pos": [
        21089,
        21162
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"authorize\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Restrict data access for authorized users"
    },
    {
      "content": "It is often desired to restrict the data that is returned to a specific authenticated user.",
      "pos": [
        21164,
        21255
      ]
    },
    {
      "content": "This kind of data partitioning is done by including a userId column on the table and storing the SID of the user when the data is inserted",
      "pos": [
        21256,
        21394
      ]
    },
    {
      "content": "How to: Add push notifications to a server project",
      "pos": [
        21400,
        21450
      ]
    },
    {
      "content": "You can add push notifications to your server project by extending the <bpt id=\"p1\">**</bpt>MobileAppConfiguration<ept id=\"p1\">**</ept> object and creating a Notification Hubs client.",
      "pos": [
        21452,
        21597
      ]
    },
    {
      "content": "When you install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Quickstart]</ept> package and call the <bpt id=\"p2\">**</bpt>UseDefaultConfiguration<ept id=\"p2\">**</ept> extension method, you can skip down to step 3.",
      "pos": [
        21598,
        21757
      ]
    },
    {
      "content": "In Visual Studio, right-click the server project and click <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept>, search for Microsoft.Azure.Mobile.Server.Notifications`, then click <bpt id=\"p2\">**</bpt>Install<ept id=\"p2\">**</ept>.",
      "pos": [
        21762,
        21928
      ]
    },
    {
      "content": "This installs the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Notifications]</ept> package.",
      "pos": [
        21929,
        22001
      ]
    },
    {
      "pos": [
        22006,
        22134
      ],
      "content": "Repeat this step to install the <ph id=\"ph1\">`Microsoft.Azure.NotificationHubs`</ph> package, which includes the Notification Hubs client library."
    },
    {
      "pos": [
        22139,
        22292
      ],
      "content": "In App_Start/Startup.MobileApp.cs, and add a call to the <bpt id=\"p1\">**</bpt>AddPushNotifications<ept id=\"p1\">**</ept> extension method during initialization, which looks like the following:"
    },
    {
      "content": "This creates the push notification registration endpoint in your server project.",
      "pos": [
        22435,
        22515
      ]
    },
    {
      "content": "This endpoint is used by clients to register with the associated notification hub.",
      "pos": [
        22516,
        22598
      ]
    },
    {
      "content": "Now you need to add the Notification Hub client that is used to send notifications.",
      "pos": [
        22599,
        22682
      ]
    },
    {
      "content": "In a controller from which you want to send push notifications, add the following using statement:",
      "pos": [
        22687,
        22785
      ]
    },
    {
      "content": "Add the following code that creates a Notification Hubs client:",
      "pos": [
        22881,
        22944
      ]
    },
    {
      "content": "At this point, you can use the Notification Hubs client to send push notifications to registered devices.",
      "pos": [
        23661,
        23766
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Add push notifications to your app<ept id=\"p1\">](app-service-mobile-ios-get-started-push.md)</ept>.",
      "pos": [
        23767,
        23874
      ]
    },
    {
      "content": "To learn more about all that you can do with Notification Hubs, see <bpt id=\"p1\">[</bpt>Notification Hubs Overview<ept id=\"p1\">](../notification-hubs/notification-hubs-overview.md)</ept>.",
      "pos": [
        23875,
        24024
      ]
    },
    {
      "pos": [
        24028,
        24112
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"tags\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Add tags to a device installation to enable targeted push"
    },
    {
      "content": "Notification Hubs lets you send targeted notifications to specific registrations by using tags.",
      "pos": [
        24114,
        24209
      ]
    },
    {
      "content": "One tag that gets created automatically is the installation ID, which is specific to an instance of the app on a given device.",
      "pos": [
        24210,
        24336
      ]
    },
    {
      "content": "A registration with an installation ID is also called an <bpt id=\"p1\">*</bpt>installation<ept id=\"p1\">*</ept>.",
      "pos": [
        24337,
        24409
      ]
    },
    {
      "content": "You can use the installation ID to manage installation, such as for adding tags.",
      "pos": [
        24410,
        24490
      ]
    },
    {
      "content": "The installation ID can be accessed  from the <bpt id=\"p1\">**</bpt>installationId<ept id=\"p1\">**</ept> property on the <bpt id=\"p2\">**</bpt>MobileServiceClient<ept id=\"p2\">**</ept>.",
      "pos": [
        24491,
        24596
      ]
    },
    {
      "content": "The following example shows how to use an installation ID to add a tag to a specific installation in Notification Hubs:",
      "pos": [
        24598,
        24717
      ]
    },
    {
      "content": "Note that any tags supplied by the client during push notification registration are ignored by the backend when creating the installation.",
      "pos": [
        24951,
        25089
      ]
    },
    {
      "content": "To enable a client to add tags to the installation, you must create a new custom API that adds tags using the pattern above.",
      "pos": [
        25090,
        25214
      ]
    },
    {
      "content": "For an example of a custom API controller that lets clients add tags to an installation, see <bpt id=\"p1\">[</bpt>Client-added push notification tags<ept id=\"p1\">](https://github.com/Azure-Samples/app-service-mobile-dotnet-backend-quickstart/blob/master/README.md#client-added-push-notification-tags)</ept> in the App Service Mobile Apps completed quickstart sample for .NET backend.",
      "pos": [
        25215,
        25559
      ]
    },
    {
      "pos": [
        25563,
        25643
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"push-user\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Send push notifications to an authenticated user"
    },
    {
      "content": "When an authenticated user registers for push notifications, a user ID tag is automatically added to the registration.",
      "pos": [
        25645,
        25763
      ]
    },
    {
      "content": "By using this tag, you can send push notifications to all devices registered by a specific user.",
      "pos": [
        25764,
        25860
      ]
    },
    {
      "content": "The following code gets the SID of user making the request and sends a template push notification to every device registration for that user:",
      "pos": [
        25861,
        26002
      ]
    },
    {
      "content": "When registering for push notifications from an authenticated client, make sure that authentication is complete before attempting registration.",
      "pos": [
        26525,
        26668
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Push to users<ept id=\"p1\">](https://github.com/Azure-Samples/app-service-mobile-dotnet-backend-quickstart/blob/master/README.md#push-to-users)</ept> in the App Service Mobile Apps completed quickstart sample for .NET backend.",
      "pos": [
        26669,
        26902
      ]
    },
    {
      "content": "How to: Debug and troubleshoot the .NET Server SDK",
      "pos": [
        26907,
        26957
      ]
    },
    {
      "content": "Azure App Service provides several debugging and troubleshooting techniques for ASP.NET applications:",
      "pos": [
        26959,
        27060
      ]
    },
    {
      "content": "Monitoring an Azure App Service",
      "pos": [
        27065,
        27096
      ]
    },
    {
      "content": "Enable Diagnostic Logging in Azure App Service",
      "pos": [
        27142,
        27188
      ]
    },
    {
      "content": "Toubleshoot an Azure App Service in Visual Studio",
      "pos": [
        27248,
        27297
      ]
    },
    {
      "content": "Logging",
      "pos": [
        27371,
        27378
      ]
    },
    {
      "content": "You can write to App Service diagnostic logs by using the standard ASP.NET trace writing.",
      "pos": [
        27380,
        27469
      ]
    },
    {
      "content": "Before you can write to the logs, you must enable diagnostics in your Mobile App backend.",
      "pos": [
        27470,
        27559
      ]
    },
    {
      "content": "To enable enable diagnostics and write to the logs:",
      "pos": [
        27561,
        27612
      ]
    },
    {
      "pos": [
        27617,
        27731
      ],
      "content": "Follow the steps in <bpt id=\"p1\">[</bpt>How to enable diagnostics<ept id=\"p1\">](../app-service-web/web-sites-enable-diagnostic-log.md#enablediag)</ept>."
    },
    {
      "content": "Add the following using statement in your code file:",
      "pos": [
        27736,
        27788
      ]
    },
    {
      "content": "Create a trace writer to write from the .NET backend to the diagnostic logs, as follows:",
      "pos": [
        27833,
        27921
      ]
    },
    {
      "content": "Republish your server project, and access the Mobile App backend to execute the code path with the logging.",
      "pos": [
        28050,
        28157
      ]
    },
    {
      "pos": [
        28162,
        28298
      ],
      "content": "Download and evaluate the logs, as described in <bpt id=\"p1\">[</bpt>How to: Download logs<ept id=\"p1\">](../app-service-web/web-sites-enable-diagnostic-log.md#download)</ept>."
    },
    {
      "pos": [
        28304,
        28365
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"local-debug\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Local debugging with authentication"
    },
    {
      "content": "You can run your application locally to test changes before publishing them to the cloud.",
      "pos": [
        28367,
        28456
      ]
    },
    {
      "content": "For many apps, this is just a matter of pressing <bpt id=\"p1\">*</bpt>F5<ept id=\"p1\">*</ept> while in Visual Studio.",
      "pos": [
        28457,
        28534
      ]
    },
    {
      "content": "However, there are some additional considerations when using authentication.",
      "pos": [
        28535,
        28611
      ]
    },
    {
      "content": "You must have a cloud-based mobile app with App Service Authentication/Authorization configured, and your client must have the cloud endpoint specified as the alternate login host.",
      "pos": [
        28613,
        28793
      ]
    },
    {
      "content": "Please see the documentation for your chosen client platform (<bpt id=\"p1\">[</bpt>iOS<ept id=\"p1\">](app-service-mobile-ios-how-to-use-client-library.md)</ept>, <bpt id=\"p2\">[</bpt>Windows/Xamarin<ept id=\"p2\">](app-service-mobile-dotnet-how-to-use-client-library.md)</ept>) for the specific steps required.",
      "pos": [
        28794,
        29023
      ]
    },
    {
      "content": "Ensure that your application has <bpt id=\"p1\">[</bpt><ept id=\"p1\">Microsoft.Azure.Mobile.Server.Authentication]</ept> installed.",
      "pos": [
        29025,
        29115
      ]
    },
    {
      "content": "Then, in your application's OWIN startup class, add the following, after <ph id=\"ph1\">`MobileAppConfiguration`</ph> has been applied to your <ph id=\"ph2\">`HttpConfiguration`</ph>:",
      "pos": [
        29116,
        29259
      ]
    },
    {
      "content": "In the above example, you should configure the <bpt id=\"p1\">_</bpt>authAudience<ept id=\"p1\">_</ept> and <bpt id=\"p2\">_</bpt>authIssuer<ept id=\"p2\">_</ept> application settings within your Web.config file to each be the URL of your application root, using the HTTPS scheme.",
      "pos": [
        29674,
        29870
      ]
    },
    {
      "content": "Similarly you should set <bpt id=\"p1\">_</bpt>authSigningKey<ept id=\"p1\">_</ept> to be the value of your application's signing key.",
      "pos": [
        29871,
        29963
      ]
    },
    {
      "content": "This is a sensitive value that should never be shared or included in a client.",
      "pos": [
        29964,
        30042
      ]
    },
    {
      "content": "To obtain it, navigate to your app within the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept> and click <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept>.",
      "pos": [
        30043,
        30124
      ]
    },
    {
      "content": "Then select <bpt id=\"p1\">**</bpt>Kudu<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>Go<ept id=\"p2\">**</ept>.",
      "pos": [
        30125,
        30163
      ]
    },
    {
      "content": "This will take you to the Kudu management endpoint for your site.",
      "pos": [
        30164,
        30229
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Environment<ept id=\"p1\">**</ept> and find the value under <bpt id=\"p2\">_</bpt>WEBSITE_AUTH_SIGNING_KEY<ept id=\"p2\">_</ept>.",
      "pos": [
        30230,
        30304
      ]
    },
    {
      "content": "This is the value you should use for <bpt id=\"p1\">_</bpt>authSigningKey<ept id=\"p1\">_</ept> in your local app config.",
      "pos": [
        30305,
        30384
      ]
    },
    {
      "content": "Your locally-running server is now equipped to validate tokens which the client obtains from the cloud-based endpoint.",
      "pos": [
        30386,
        30504
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to work with the .NET backend server SDK for Mobile Apps | Azure App Service\"\n    description=\"Learn how to work with the .NET backend server SDK for Azure App Service Mobile Apps.\"\n    keywords=\"app service, azure app service, mobile app, mobile service, scale, scalable, app deployment, azure app deployment\"\n    services=\"app-service\\mobile\"\n    documentationCenter=\"\"\n    authors=\"ggailey777\"\n    manager=\"erikre\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-mobile\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-multiple\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.date=\"03/06/2016\"\n    ms.author=\"glenga\"/>\n\n# Work with the .NET backend server SDK for Azure Mobile Apps\n\n[AZURE.INCLUDE [app-service-mobile-selector-server-sdk](../../includes/app-service-mobile-selector-server-sdk.md)]\n\nThis topic shows you how to use the .NET backend server SDK in key Azure App Service Mobile Apps scenarios. The Azure Mobile Apps SDK helps you work with mobile clients from your ASP.NET application.\n\n>[AZURE.TIP] The [.NET server SDK for Azure Mobile Apps](https://github.com/Azure/azure-mobile-apps-net-server) is open source on GitHub. The repository contains the entire server SDK unit test suite as well as some sample projects.\n\n## Reference documentation\n\nThe reference documentation for the server SDK is located here: [Azure Mobile Apps .NET Reference](https://msdn.microsoft.com/library/azure/dn961176.aspx).\n\n## <a name=\"create-app\"></a>How to: Create a .NET backend for your mobile application\n\nIf you are starting a new project, you can create an App Service application using either the [Azure portal] or Visual Studio. This section will help you use one of these to create a new mobile application backend which hosts a simple todo list API. You can run this locally or publish the project to your cloud-based App Service mobile app.\n\nIf you are adding mobile capabilities to an existing project, see the [Download and initialize the SDK](#install-sdk) section below.\n\n### Create a .NET backend using the Azure portal\n\nYou can create a new mobile application right in the [Azure portal]. You can either follow the steps below, or create a new client and server together by following the [Create a mobile app](app-service-mobile-ios-get-started.md) tutorial.\n\n[AZURE.INCLUDE [app-service-mobile-dotnet-backend-create-new-service](../../includes/app-service-mobile-dotnet-backend-create-new-service.md)]\n\n&nbsp;&nbsp;9. Back in the _Get started_ blade, under **Create a table API**, choose **C#** as your **Backend language**.\n\n&nbsp;&nbsp;10. Click Download, extract the compressed project files to your local computer, and open the solution in Visual Studio.\n\n### Create a .NET backend using Visual Studio 2013 and Visual Studio 2015\n\nIn order to create a Mobile Apps project in Visual Studio, you will need to install the [Azure SDK for .NET](https://azure.microsoft.com/downloads/), version 2.8.1 or later. Once you have installed the SDK, create a new ASP.NET application:\n\n1. Open the **New Project** dialog (from *File* > **New** > **Project...**).\n\n2. Expand **Templates** > **Visual C#**, and select **Web**.\n\n3. Select **ASP.NET Web Application**.\n\n4. Fill in the project name. Then click **OK**.\n\n5. Under _ASP.NET 4.5.2 Templates_, select **Azure Mobile App**. Check **Host in the cloud** to create a new mobile app in the cloud to which you can publish this project.\n\n6. Click **OK**. Your application will be created and appear in the Solution Explorer.\n\n## <a name=\"install-sdk\"></a>How to: Download and initialize the SDK\n\nThe SDK is available on [NuGet.org]. This package includes the base functionality required to get started using the SDK. To initialize the SDK, you need to perform actions on the **HttpConfiguration** object.\n\n###Install the SDK\n\nTo install the SDK, right-click on the server project in Visual Studio, select **Manage NuGet Packages**, search for the [Microsoft.Azure.Mobile.Server](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server/) package, then click **Install**.\n\n###<a name=\"server-project-setup\"></a> Initialize the server project\n\nA .NET backend server project is initialized similar to other ASP.NET projects, by including an OWIN startup class. Ensure that you have referenced the NuGet package `Microsoft.Owin.Host.SystemWeb`. To add this class in Visual Studio, right-click on your server project and select **Add** > **New Item**, then **Web** > **General** > **OWIN Startup class**.\n\nThis will generate a class with the following attribute:\n\n    [assembly: OwinStartup(typeof(YourServiceName.YourStartupClassName))]\n\nIn the `Configuration()` method of your OWIN startup class, set up the server project using an **HttpConfiguration** object which represents the configuration options for the service. The following example initialize the server project, with no added features:\n\n    // in OWIN startup class\n    public void Configuration(IAppBuilder app)\n    {\n        HttpConfiguration config = new HttpConfiguration();\n\n        new MobileAppConfiguration()\n            // no added features\n            .ApplyTo(config);\n\n        app.UseWebApi(config);\n    }\n\nTo enable individual features, you must call extension methods on the **MobileAppConfiguration** object before calling **ApplyTo**. For example, the following code adds the default routes to all API controllers that have the attribute `[MobileAppController]` during initialization:\n\n    new MobileAppConfiguration()\n        .MapApiControllers()\n        .ApplyTo(config);\n\nNote that `MapApiControllers` only maps controllers with the attribute `[MobileAppController]`.\n\nMany of the feature extension methods are available via additional NuGet packages you can include, which are described in the section below.\n\nThe server quickstart from the Azure portal calls **UseDefaultConfiguration()**. This equivalent to the following setup:\n\n        new MobileAppConfiguration()\n            .AddMobileAppHomeController()             // from the Home package\n            .MapApiControllers()\n            .AddTables(                               // from the Tables package\n                new MobileAppTableConfiguration()\n                    .MapTableControllers()\n                    .AddEntityFramework()             // from the Entity package\n                )\n            .AddPushNotifications()                   // from the Notifications package\n            .MapLegacyCrossDomainController()         // from the CrossDomain package\n            .ApplyTo(config);\n\n\n### SDK extensions\n\nThe following NuGet-based extension packages provide various mobile features that can be used by your application. You enable extensions during initialization by using the **MobileAppConfiguration** object.\n\n- [Microsoft.Azure.Mobile.Server.Quickstart]\n     Supports the basic Mobile Apps setup. Added to the configuration by calling the **UseDefaultConfiguration** extension method during initialization. This extension includes following extensions: Notifications, Authentication, Entity, Tables, Crossdomain and Home packages. This is equivalent to the quickstart server project that you download from the Azure portal.\n\n- [Microsoft.Azure.Mobile.Server.Home](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Home/)\n    Implements the default *this mobile app is up and running page* for the web site root. Add to the configuration by calling the **AddMobileAppHomeController** extension method.\n\n- [Microsoft.Azure.Mobile.Server.Tables](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Tables/)\n    includes classes for working with data and sets-up the data pipeline. Add to the configuration by calling the **AddTables** extension method.\n\n- [Microsoft.Azure.Mobile.Server.Entity](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Entity/)\n    Enables the Entity Framework to access data in the SQL Database. Add to the configuration by calling the **AddTablesWithEntityFramework** extension method.\n\n- [Microsoft.Azure.Mobile.Server.Authentication]\n    Enables authentication and sets-up the OWIN middleware used to validate tokens. Add to the configuration by calling the **AddAppServiceAuthentication** and **IAppBuilder**.**UseAppServiceAuthentication** extension methods.\n\n- [Microsoft.Azure.Mobile.Server.Notifications]\n    Enables push notifications and defines a push registration endpoint. Add to the configuration by calling the **AddPushNotifications** extension method.\n\n- [Microsoft.Azure.Mobile.Server.CrossDomain](http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.CrossDomain/)\n    Creates a controller that serves data to legacy web browsers from your Mobile App. Add to the configuration by calling the **MapLegacyCrossDomainController** extension method.\n\n- [Microsoft.Azure.Mobile.Server.Login]\n     Provides preview support for custom authentication via the AppServiceLoginHandler.CreateToken() method. This is a static method and does not need to be enabled in the configuration.\n\n## <a name=\"publish-server-project\"></a>How to: Publish the server project\n\nThis section shows you how to publish your .NET backend project from Visual Studio. You can also deploy your backend project using Git or any of the other methods covered in the [Azure App Service deployment documentation](../app-service-web/web-sites-deploy.md).\n\n1. In Visual Studio, rebuild the project to restore NuGet packages.\n\n2. In Solution Explorer, right-click the project, click **Publish**. The first time you publish, you will need to define a publishing profile. When you already have a profile defined, you can just select it and click **Publish**.\n\n2. If asked to select a publish target, click **Microsoft Azure App Service** > **Next**, then (if needed) sign-in with your Azure credentials. Visual Studio downloads and securely stores your publish settings directly from Azure.\n\n    ![](./media/app-service-mobile-dotnet-backend-how-to-use-server-sdk/publish-wizard-1.png)\n\n3. Choose your **Subscription**, select **Resource Type** from **View**, expand **Mobile App** and click your Mobile App backend, then click **OK**.\n\n    ![](./media/app-service-mobile-dotnet-backend-how-to-use-server-sdk/publish-wizard-2.png)\n\n4. Verify the publish profile information and click **Publish**.\n\n    ![](./media/app-service-mobile-dotnet-backend-how-to-use-server-sdk/publish-wizard-3.png)\n\n    When your Mobile App backend has published successfully, you will see a landing page indicating success.\n\n    ![](./media/app-service-mobile-dotnet-backend-how-to-use-server-sdk/publish-success.png)\n\n##<a name=\"define-table-controller\"></a> How to: Define a table controller\n\nA table controller provides access to entity data in a table-based data store, such as SQL Database or Azure Table storage. Table controllers inherit from the **TableController** generic class, where the generic type is an entity in the model that represents the table schema, as follows:\n\n    public class TodoItemController : TableController<TodoItem>\n    {\n        //...\n    }\n\nTable controllers are initialized by using the **AddTables** extension method. This adds routes under `/tables/` for all subclasses of `TableController`.\n\nThe following example initializes a table controller that uses Entity Framework for data access:\n\n    new MobileAppConfiguration().AddTables(\n        new MobileAppTableConfiguration()\n        .MapTableControllers()\n        .AddEntityFramework()).ApplyTo(config);\n\nFor an example of a table controller that uses Entity Framework to access data from an Azure SQL Database, see the **TodoItemController** class in the quickstart server project download from the Azure portal.\n\n## How to: Define a custom API controller\n\nThe custom API controller provides the most basic functionality to your Mobile App backend by exposing an endpoint. You can register a mobile-specific API controller using the [MobileAppController] attribute. This attribute registers the route and also sets up the Mobile Apps JSON serializer.\n\n1. In Visual Studio, right-click the Controllers folder, then click **Add** > **Controller**, select **Web API 2 Controller&mdash;Empty** and click **Add**.\n\n2. Supply a **Controller name**, such as `CustomController`, and click **Add**. This creates a new **CustomController** class that inherits from **ApiController**.\n\n3. In the new controller class file, add the following using statement:\n\n        using Microsoft.Azure.Mobile.Server.Config;\n\n4. Apply the **[MobileAppController]** attribute to the API controller class definition, as in the following example:\n\n        [MobileAppController]\n        public class CustomController : ApiController\n        {\n              //...\n        }\n\n4. In App_Start/Startup.MobileApp.cs file, add a call to the  **MapApiControllers** extension method, as in the following example:\n\n        new MobileAppConfiguration()\n            .MapApiControllers()\n            .ApplyTo(config);\n\n    Note that you do not need to call **MapApiControllers** if you instead call **UseDefaultConfiguration**, which initializes all features.\n\nAny controller that does not have **MobileAppControllerAttribute** applied can still be accessed by clients, but it may not be correctly consumed by clients using any Mobile App client SDK.\n\n## How to: Work with authentication\n\nMobile Apps uses the facilities of App Service authentication and ASP.NET to simply the process of enabling authentication for your apps. This section shows you how to perform the following authentication-related tasks in your .NET backend server project:\n\n+ [How to: Add authentication to a server project](#add-auth)\n+ [How to: Use custom authentication for your application](#custom-auth)\n+ [How to: Retrieve authenticated user information](#user-info)\n+ [How to: Restrict data access for authorized users](#authorize)\n\n### <a name=\"add-auth\"></a>How to: Add authentication to a server project\n\nYou can add authentication to your server project by extending the **MobileAppConfiguration** object and configuring OWIN middleware. When you install the [Microsoft.Azure.Mobile.Server.Quickstart] package and call the **UseDefaultConfiguration** extension method, you can skip to step 3.\n\n1. In Visual Studio, install the [Microsoft.Azure.Mobile.Server.Authentication] package.\n\n2. In the Startup.cs project file, add the following line of code at the beginning of the **Configuration** method:\n\n        app.UseAppServiceAuthentication(config);\n\n    This adds the OWIN middleware component that enables your Azure Mobile App to validate tokens issued by the associated App Service gateway.\n\n3. Add the `[Authorize]` attribute to any controller or method that requires authentication. Users must now be authenticated to access that endpoint or specific APIs.\n\nTo learn about how to authenticate clients to your Mobile Apps backend, see [Add authentication to your app](app-service-mobile-ios-get-started-users.md).\n\n### <a name=\"custom-auth\"></a>How to: Use custom authentication for your application\n\nYou can choose to provide your own login system if you do not wish to use one of the App Service Authentication/Authorization providers. To do so, install the [Microsoft.Azure.Mobile.Server.Login] package.\n\nYou will need to provide your own logic for determining if a user should be signed in. For example, you might check against salted and hashed passwords in a database. In the example below, the `isValidAssertion()` method is responsible for these checks and is defined elsewhere.\n\nThe custom authentication is exposed by creating a new ApiController and exposing register and login actions like the one below. The client can attempt login by collecting the relevant information from the user and submitting an HTTPS POST to the API with the user information in the body. Once the server validates the assertion, a token can be issued using the `AppServiceLoginHandler.CreateToken()` method.\n\nAn example login action might be:\n\n        public IHttpActionResult Post([FromBody] JObject assertion)\n        {\n            if (isValidAssertion(assertion)) // user-defined function, checks against a database\n            {\n                JwtSecurityToken token = AppServiceLoginHandler.CreateToken(new Claim[] { new Claim(JwtRegisteredClaimNames.Sub, assertion[\"username\"]) },\n                    mySigningKey,\n                    myAppURL,\n                    myAppURL,\n                    TimeSpan.FromHours(24) );\n                return Ok(new LoginResult()\n                {\n                    AuthenticationToken = token.RawData,\n                    User = new LoginResultUser() { UserId = userName.ToString() }\n                });\n            }\n            else // user assertion was not valid\n            {\n                return this.Request.CreateUnauthorizedResponse();\n            }\n        }\n\nIn the above, LoginResult and LoginResultUser are just simple objects exposing the properties shown. The client expects login responses to come back as JSON objects of the form:\n\n        {\n            \"authenticationToken\": \"<token>\",\n            \"user\": {\n                \"userId\": \"<userId>\"\n            }\n        }\n\nThe `MobileAppLoginHAppServiceLoginHandlerandler.CreateToken()` method includes an _audience_ and an _issuer_ parameter. Both of these are typically set to the URL of your application root, using the HTTPS scheme. Similarly you should set _secretKey_ to be the value of your application's signing key. This is a sensitive value that should never be shared or included in a client. You can obtain this value while hosted in App Service by referencing the _WEBSITE_AUTH_SIGNING_KEY_ environment variable. If needed in a local debugging context, follow the instructions in the [Local debugging with authentication](#local-debug) section to retrieve the key and store it as an application setting.\n\nYou also need to provide a lifetime for the issued token, as well as any claims you would like included. It is required that you provide a subject claim, as shown in the example code.\n\nYou can also simplify the client code to use the `loginAsync()` method (naming may vary across platforms) instead of a manual HTTP POST. You would use the overload which takes an additional token parameter, which correlates to the assertion object you would POST. The provider in this case should be a custom name of your choosing. Then on the server, your login action should be on the _/.auth/login/{customProviderName}_ path which includes this custom name. To put your controller on this path, add a route to your HttpConfiguration before applying your MobileAppConfiguration.\n\n        config.Routes.MapHttpRoute(\"CustomAuth\", \".auth/login/CustomAuth\", new { controller = \"CustomAuth\" });\n\nReplace the string \"CustomAuth\" above with the name of the controller hosting your login action.\n\n>[AZURE.TIP] Using the loginAsync() approach ensures that the authentication token is attached to every subsequent call to the service.\n\n###<a name=\"user-info\"></a>How to: Retrieve authenticated user information\n\nWhen a user is authenticated by App Service, you can access the assigned user ID and other information in your .NET backend code. This is useful for making authorization decisions for a given user in the backend, such as whether a specific user can access a table row or other resource. The following code shows how to obtain the\nuser ID for a logged-in user:\n\n    // Get the SID of the current user.\n    var claimsPrincipal = this.User as ClaimsPrincipal;\n    string sid = claimsPrincipal.FindFirst(ClaimTypes.NameIdentifier).Value;\n\nThe SID is derived from the provider-specific user ID and is static for a given user and login provider.\n\nApp Service also lets you request specific claims from your login provider. This lets you request more information from the provider, such as by using the Facebook Graph APIs. You can specify claims in the provider blade in the portal. Some claims require additional configuration with the provider.\n\nThe following code calls the **GetAppServiceIdentityAsync** extension method to get the login credentials, which include the access token needed to make requests against the Facebook Graph API:\n\n    // Get the credentials for the logged-in user.\n    var credentials =\n        await this.User\n        .GetAppServiceIdentityAsync<FacebookCredentials>(this.Request);\n\n    if (credentials.Provider == \"Facebook\")\n    {\n        // Create a query string with the Facebook access token.\n        var fbRequestUrl = \"https://graph.facebook.com/me/feed?access_token=\"\n            + credentials.AccessToken;\n\n        // Create an HttpClient request.\n        var client = new System.Net.Http.HttpClient();\n\n        // Request the current user info from Facebook.\n        var resp = await client.GetAsync(fbRequestUrl);\n        resp.EnsureSuccessStatusCode();\n\n        // Do something here with the Facebook user information.\n        var fbInfo = await resp.Content.ReadAsStringAsync();\n    }\n\nNote that you must add a using statement for `System.Security.Principal` to make the **GetAppServiceIdentityAsync** extension method  work.\n\n###<a name=\"authorize\"></a>How to: Restrict data access for authorized users\n\nIt is often desired to restrict the data that is returned to a specific authenticated user. This kind of data partitioning is done by including a userId column on the table and storing the SID of the user when the data is inserted \n\n## How to: Add push notifications to a server project\n\nYou can add push notifications to your server project by extending the **MobileAppConfiguration** object and creating a Notification Hubs client. When you install the [Microsoft.Azure.Mobile.Server.Quickstart] package and call the **UseDefaultConfiguration** extension method, you can skip down to step 3.\n\n1. In Visual Studio, right-click the server project and click **Manage NuGet Packages**, search for Microsoft.Azure.Mobile.Server.Notifications`, then click **Install**. This installs the [Microsoft.Azure.Mobile.Server.Notifications] package.\n\n3. Repeat this step to install the `Microsoft.Azure.NotificationHubs` package, which includes the Notification Hubs client library.\n\n2. In App_Start/Startup.MobileApp.cs, and add a call to the **AddPushNotifications** extension method during initialization, which looks like the following:\n\n        new MobileAppConfiguration()\n            // other features...\n            .AddPushNotifications()\n            .ApplyTo(config);\n\n    This creates the push notification registration endpoint in your server project. This endpoint is used by clients to register with the associated notification hub. Now you need to add the Notification Hub client that is used to send notifications.\n\n3. In a controller from which you want to send push notifications, add the following using statement:\n\n        using System.Collections.Generic;\n        using Microsoft.Azure.NotificationHubs;\n\n4. Add the following code that creates a Notification Hubs client:\n\n        // Get the settings for the server project.\n        HttpConfiguration config = this.Configuration;\n        MobileAppSettingsDictionary settings =\n            config.GetMobileAppSettingsProvider().GetMobileAppSettings();\n\n        // Get the Notification Hubs credentials for the Mobile App.\n        string notificationHubName = settings.NotificationHubName;\n        string notificationHubConnection = settings\n            .Connections[MobileAppSettingsKeys.NotificationHubConnectionString].ConnectionString;\n\n        // Create a new Notification Hub client.\n        NotificationHubClient hub = NotificationHubClient\n        .CreateClientFromConnectionString(notificationHubConnection, notificationHubName);\n\nAt this point, you can use the Notification Hubs client to send push notifications to registered devices. For more information, see [Add push notifications to your app](app-service-mobile-ios-get-started-push.md). To learn more about all that you can do with Notification Hubs, see [Notification Hubs Overview](../notification-hubs/notification-hubs-overview.md).\n\n##<a name=\"tags\"></a>How to: Add tags to a device installation to enable targeted push\n\nNotification Hubs lets you send targeted notifications to specific registrations by using tags. One tag that gets created automatically is the installation ID, which is specific to an instance of the app on a given device. A registration with an installation ID is also called an *installation*. You can use the installation ID to manage installation, such as for adding tags. The installation ID can be accessed  from the **installationId** property on the **MobileServiceClient**.\n\nThe following example shows how to use an installation ID to add a tag to a specific installation in Notification Hubs:\n\n    hub.PatchInstallation(\"my-installation-id\", new[]\n    {\n        new PartialUpdateOperation\n        {\n            Operation = UpdateOperationType.Add,\n            Path = \"/tags\",\n            Value = \"{my-tag}\"\n        }\n    });\n\nNote that any tags supplied by the client during push notification registration are ignored by the backend when creating the installation. To enable a client to add tags to the installation, you must create a new custom API that adds tags using the pattern above. For an example of a custom API controller that lets clients add tags to an installation, see [Client-added push notification tags](https://github.com/Azure-Samples/app-service-mobile-dotnet-backend-quickstart/blob/master/README.md#client-added-push-notification-tags) in the App Service Mobile Apps completed quickstart sample for .NET backend.\n\n##<a name=\"push-user\"></a>How to: Send push notifications to an authenticated user\n\nWhen an authenticated user registers for push notifications, a user ID tag is automatically added to the registration. By using this tag, you can send push notifications to all devices registered by a specific user. The following code gets the SID of user making the request and sends a template push notification to every device registration for that user:\n\n    // Get the current user SID and create a tag for the current user.\n    var claimsPrincipal = this.User as ClaimsPrincipal;\n    string sid = claimsPrincipal.FindFirst(ClaimTypes.NameIdentifier).Value;\n    string userTag = \"_UserId:\" + sid;\n\n    // Build a dictionary for the template with the item message text.\n    var notification = new Dictionary<string, string> { { \"message\", item.Text } };\n\n    // Send a template notification to the user ID.\n    await hub.SendTemplateNotificationAsync(notification, userTag);\n\nWhen registering for push notifications from an authenticated client, make sure that authentication is complete before attempting registration. For more information, see [Push to users](https://github.com/Azure-Samples/app-service-mobile-dotnet-backend-quickstart/blob/master/README.md#push-to-users) in the App Service Mobile Apps completed quickstart sample for .NET backend.\n\n## How to: Debug and troubleshoot the .NET Server SDK\n\nAzure App Service provides several debugging and troubleshooting techniques for ASP.NET applications:\n\n- [Monitoring an Azure App Service](../app-service-web/web-sites-monitor.md)\n- [Enable Diagnostic Logging in Azure App Service](../app-service-web/web-sites-enable-diagnostic-log.md)\n- [Toubleshoot an Azure App Service in Visual Studio](../app-service-web/web-sites-dotnet-troubleshoot-visual-studio.md)\n\n### Logging\n\nYou can write to App Service diagnostic logs by using the standard ASP.NET trace writing. Before you can write to the logs, you must enable diagnostics in your Mobile App backend.\n\nTo enable enable diagnostics and write to the logs:\n\n1. Follow the steps in [How to enable diagnostics](../app-service-web/web-sites-enable-diagnostic-log.md#enablediag).\n\n2. Add the following using statement in your code file:\n\n        using System.Web.Http.Tracing;\n\n3. Create a trace writer to write from the .NET backend to the diagnostic logs, as follows:\n\n        ITraceWriter traceWriter = this.Configuration.Services.GetTraceWriter();\n        traceWriter.Info(\"Hello, World\");\n\n4. Republish your server project, and access the Mobile App backend to execute the code path with the logging.\n\n5. Download and evaluate the logs, as described in [How to: Download logs](../app-service-web/web-sites-enable-diagnostic-log.md#download).\n\n### <a name=\"local-debug\"></a>Local debugging with authentication\n\nYou can run your application locally to test changes before publishing them to the cloud. For many apps, this is just a matter of pressing *F5* while in Visual Studio. However, there are some additional considerations when using authentication.\n\nYou must have a cloud-based mobile app with App Service Authentication/Authorization configured, and your client must have the cloud endpoint specified as the alternate login host. Please see the documentation for your chosen client platform ([iOS](app-service-mobile-ios-how-to-use-client-library.md), [Windows/Xamarin](app-service-mobile-dotnet-how-to-use-client-library.md)) for the specific steps required.\n\nEnsure that your application has [Microsoft.Azure.Mobile.Server.Authentication] installed. Then, in your application's OWIN startup class, add the following, after `MobileAppConfiguration` has been applied to your `HttpConfiguration`:\n\n        app.UseAppServiceAuthentication(new AppServiceAuthenticationOptions()\n        {\n            SigningKey = ConfigurationManager.AppSettings[\"authSigningKey\"],\n            ValidAudiences = new[] { ConfigurationManager.AppSettings[\"authAudience\"] },\n            ValidIssuers = new[] { ConfigurationManager.AppSettings[\"authIssuer\"] },\n            TokenHandler = config.GetMobileAppTokenHandler()\n        });\n\nIn the above example, you should configure the _authAudience_ and _authIssuer_ application settings within your Web.config file to each be the URL of your application root, using the HTTPS scheme. Similarly you should set _authSigningKey_ to be the value of your application's signing key. This is a sensitive value that should never be shared or included in a client. To obtain it, navigate to your app within the [Azure portal] and click **Tools**. Then select **Kudu** and click **Go**. This will take you to the Kudu management endpoint for your site. Click **Environment** and find the value under _WEBSITE_AUTH_SIGNING_KEY_. This is the value you should use for _authSigningKey_ in your local app config.\n\nYour locally-running server is now equipped to validate tokens which the client obtains from the cloud-based endpoint.\n\n\n[Azure portal]: https://portal.azure.com\n[NuGet.org]: http://www.nuget.org/\n[Microsoft.Azure.Mobile.Server.Quickstart]: http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Quickstart/\n[Microsoft.Azure.Mobile.Server.Authentication]: http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Authentication/\n[Microsoft.Azure.Mobile.Server.Login]: http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Login/\n[Microsoft.Azure.Mobile.Server.Notifications]: http://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Notifications/\n"
}