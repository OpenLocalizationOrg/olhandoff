<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="69711eed-9b90-4b87-9860-513fb84b5801" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="69711eed-9b90-4b87-9860-513fb84b5801" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
      <olfilehash xmlns="">f0a28c4f0a7ae280a0e4c4a5dfda3bfa27ef7a88</olfilehash>
    </header>
    <body>
      <group id="0133fe15-7bab-4569-bd75-98e1666b14aa">
        <trans-unit id="6ffed226-f675-4202-97ee-d22c82d25504" xml:space="preserve">
          <source>.NET Compiler Platform ("Roslyn") Overview</source>
          <target state="new">.NET Compiler Platform ("Roslyn") Overview</target>
        </trans-unit>
        <trans-unit id="d1277f3c-9c6b-405b-a74e-3f9f989eb8b4" xml:space="preserve">
          <source>In this document</source>
          <target state="new">In this document</target>
        </trans-unit>
        <trans-unit id="5d68bc60-0be7-47fc-ab0e-2b2d6a617dec" xml:space="preserve">
          <source><bpt id="15f41a53-c5b4-4da6-b1d7-9bee60363345CapsExtId1">&lt;linkText&gt;</bpt>Introduction<ept id="15f41a53-c5b4-4da6-b1d7-9bee60363345CapsExtId1">&lt;/linkText&gt;</ept><bpt id="15f41a53-c5b4-4da6-b1d7-9bee60363345CapsExtId2">&lt;title&gt;</bpt><ept id="15f41a53-c5b4-4da6-b1d7-9bee60363345CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="15f41a53-c5b4-4da6-b1d7-9bee60363345CapsExtId1">&lt;linkText&gt;</bpt>Introduction<ept id="15f41a53-c5b4-4da6-b1d7-9bee60363345CapsExtId1">&lt;/linkText&gt;</ept><bpt id="15f41a53-c5b4-4da6-b1d7-9bee60363345CapsExtId2">&lt;title&gt;</bpt><ept id="15f41a53-c5b4-4da6-b1d7-9bee60363345CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="73e31e32-5ba8-447d-ba18-50f88e7437e6" xml:space="preserve">
          <source><bpt id="c5ec8685-a861-4613-ac00-320cb170d3a5CapsExtId1">&lt;linkText&gt;</bpt>Exposing the Compiler APIs<ept id="c5ec8685-a861-4613-ac00-320cb170d3a5CapsExtId1">&lt;/linkText&gt;</ept><bpt id="c5ec8685-a861-4613-ac00-320cb170d3a5CapsExtId2">&lt;title&gt;</bpt><ept id="c5ec8685-a861-4613-ac00-320cb170d3a5CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="c5ec8685-a861-4613-ac00-320cb170d3a5CapsExtId1">&lt;linkText&gt;</bpt>Exposing the Compiler APIs<ept id="c5ec8685-a861-4613-ac00-320cb170d3a5CapsExtId1">&lt;/linkText&gt;</ept><bpt id="c5ec8685-a861-4613-ac00-320cb170d3a5CapsExtId2">&lt;title&gt;</bpt><ept id="c5ec8685-a861-4613-ac00-320cb170d3a5CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="c834e399-c7b5-48e8-b1a6-cb8c1c00da69" xml:space="preserve">
          <source><bpt id="25c66bf8-93da-4532-9713-84c974ecc708CapsExtId1">&lt;linkText&gt;</bpt>Compiler Pipeline Functional
Areas<ept id="25c66bf8-93da-4532-9713-84c974ecc708CapsExtId1">&lt;/linkText&gt;</ept><bpt id="25c66bf8-93da-4532-9713-84c974ecc708CapsExtId2">&lt;title&gt;</bpt><ept id="25c66bf8-93da-4532-9713-84c974ecc708CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="25c66bf8-93da-4532-9713-84c974ecc708CapsExtId1">&lt;linkText&gt;</bpt>Compiler Pipeline Functional
Areas<ept id="25c66bf8-93da-4532-9713-84c974ecc708CapsExtId1">&lt;/linkText&gt;</ept><bpt id="25c66bf8-93da-4532-9713-84c974ecc708CapsExtId2">&lt;title&gt;</bpt><ept id="25c66bf8-93da-4532-9713-84c974ecc708CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="dbaef021-7444-40cd-b9b1-fcb551d8f381" xml:space="preserve">
          <source><bpt id="c492e308-05cc-40b3-bcf2-67003137233eCapsExtId1">&lt;linkText&gt;</bpt>API Layers<ept id="c492e308-05cc-40b3-bcf2-67003137233eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="c492e308-05cc-40b3-bcf2-67003137233eCapsExtId2">&lt;title&gt;</bpt><ept id="c492e308-05cc-40b3-bcf2-67003137233eCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="c492e308-05cc-40b3-bcf2-67003137233eCapsExtId1">&lt;linkText&gt;</bpt>API Layers<ept id="c492e308-05cc-40b3-bcf2-67003137233eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="c492e308-05cc-40b3-bcf2-67003137233eCapsExtId2">&lt;title&gt;</bpt><ept id="c492e308-05cc-40b3-bcf2-67003137233eCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="6626d8df-947f-4b69-aaf7-ef57033ddd2b" xml:space="preserve">
          <source><bpt id="8f0e749d-b931-4354-948e-c64fc40ea78bCapsExtId1">&lt;linkText&gt;</bpt>Compiler APIs<ept id="8f0e749d-b931-4354-948e-c64fc40ea78bCapsExtId1">&lt;/linkText&gt;</ept><bpt id="8f0e749d-b931-4354-948e-c64fc40ea78bCapsExtId2">&lt;title&gt;</bpt><ept id="8f0e749d-b931-4354-948e-c64fc40ea78bCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="8f0e749d-b931-4354-948e-c64fc40ea78bCapsExtId1">&lt;linkText&gt;</bpt>Compiler APIs<ept id="8f0e749d-b931-4354-948e-c64fc40ea78bCapsExtId1">&lt;/linkText&gt;</ept><bpt id="8f0e749d-b931-4354-948e-c64fc40ea78bCapsExtId2">&lt;title&gt;</bpt><ept id="8f0e749d-b931-4354-948e-c64fc40ea78bCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="6e161e0f-bd3e-4d1a-939e-28e540347f85" xml:space="preserve">
          <source><bpt id="c90ad568-cc01-4255-a44c-5aeb137018d0CapsExtId1">&lt;linkText&gt;</bpt>Workspaces APIs<ept id="c90ad568-cc01-4255-a44c-5aeb137018d0CapsExtId1">&lt;/linkText&gt;</ept><bpt id="c90ad568-cc01-4255-a44c-5aeb137018d0CapsExtId2">&lt;title&gt;</bpt><ept id="c90ad568-cc01-4255-a44c-5aeb137018d0CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="c90ad568-cc01-4255-a44c-5aeb137018d0CapsExtId1">&lt;linkText&gt;</bpt>Workspaces APIs<ept id="c90ad568-cc01-4255-a44c-5aeb137018d0CapsExtId1">&lt;/linkText&gt;</ept><bpt id="c90ad568-cc01-4255-a44c-5aeb137018d0CapsExtId2">&lt;title&gt;</bpt><ept id="c90ad568-cc01-4255-a44c-5aeb137018d0CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="b4dc7453-11e6-461d-94b1-0c8b16865c12" xml:space="preserve">
          <source><bpt id="4252675e-ee8b-44eb-8dc2-62fe0a6fd558CapsExtId1">&lt;linkText&gt;</bpt>Working with Syntax<ept id="4252675e-ee8b-44eb-8dc2-62fe0a6fd558CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4252675e-ee8b-44eb-8dc2-62fe0a6fd558CapsExtId2">&lt;title&gt;</bpt><ept id="4252675e-ee8b-44eb-8dc2-62fe0a6fd558CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="4252675e-ee8b-44eb-8dc2-62fe0a6fd558CapsExtId1">&lt;linkText&gt;</bpt>Working with Syntax<ept id="4252675e-ee8b-44eb-8dc2-62fe0a6fd558CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4252675e-ee8b-44eb-8dc2-62fe0a6fd558CapsExtId2">&lt;title&gt;</bpt><ept id="4252675e-ee8b-44eb-8dc2-62fe0a6fd558CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="bc062da6-113c-4287-a5f5-dd7cd3a59e2c" xml:space="preserve">
          <source><bpt id="03d16e74-fb67-4ce4-bd24-681a32bffc61CapsExtId1">&lt;linkText&gt;</bpt>Syntax Trees<ept id="03d16e74-fb67-4ce4-bd24-681a32bffc61CapsExtId1">&lt;/linkText&gt;</ept><bpt id="03d16e74-fb67-4ce4-bd24-681a32bffc61CapsExtId2">&lt;title&gt;</bpt><ept id="03d16e74-fb67-4ce4-bd24-681a32bffc61CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="03d16e74-fb67-4ce4-bd24-681a32bffc61CapsExtId1">&lt;linkText&gt;</bpt>Syntax Trees<ept id="03d16e74-fb67-4ce4-bd24-681a32bffc61CapsExtId1">&lt;/linkText&gt;</ept><bpt id="03d16e74-fb67-4ce4-bd24-681a32bffc61CapsExtId2">&lt;title&gt;</bpt><ept id="03d16e74-fb67-4ce4-bd24-681a32bffc61CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="0124fb18-639f-4b5c-a224-51c8b0d6086b" xml:space="preserve">
          <source><bpt id="97d0f702-d117-49af-b9db-be6606054bbaCapsExtId1">&lt;linkText&gt;</bpt>Syntax Nodes<ept id="97d0f702-d117-49af-b9db-be6606054bbaCapsExtId1">&lt;/linkText&gt;</ept><bpt id="97d0f702-d117-49af-b9db-be6606054bbaCapsExtId2">&lt;title&gt;</bpt><ept id="97d0f702-d117-49af-b9db-be6606054bbaCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="97d0f702-d117-49af-b9db-be6606054bbaCapsExtId1">&lt;linkText&gt;</bpt>Syntax Nodes<ept id="97d0f702-d117-49af-b9db-be6606054bbaCapsExtId1">&lt;/linkText&gt;</ept><bpt id="97d0f702-d117-49af-b9db-be6606054bbaCapsExtId2">&lt;title&gt;</bpt><ept id="97d0f702-d117-49af-b9db-be6606054bbaCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="38bc2b8b-f557-448e-9e77-5ccc6faadea2" xml:space="preserve">
          <source><bpt id="eeb7aeb5-62d8-4002-95a0-bb95c52689cdCapsExtId1">&lt;linkText&gt;</bpt>Syntax Tokens<ept id="eeb7aeb5-62d8-4002-95a0-bb95c52689cdCapsExtId1">&lt;/linkText&gt;</ept><bpt id="eeb7aeb5-62d8-4002-95a0-bb95c52689cdCapsExtId2">&lt;title&gt;</bpt><ept id="eeb7aeb5-62d8-4002-95a0-bb95c52689cdCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="eeb7aeb5-62d8-4002-95a0-bb95c52689cdCapsExtId1">&lt;linkText&gt;</bpt>Syntax Tokens<ept id="eeb7aeb5-62d8-4002-95a0-bb95c52689cdCapsExtId1">&lt;/linkText&gt;</ept><bpt id="eeb7aeb5-62d8-4002-95a0-bb95c52689cdCapsExtId2">&lt;title&gt;</bpt><ept id="eeb7aeb5-62d8-4002-95a0-bb95c52689cdCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="cda19008-270e-4216-835c-09d7ab1a7178" xml:space="preserve">
          <source><bpt id="57489345-1db9-4d67-a69f-dbba385f51f2CapsExtId1">&lt;linkText&gt;</bpt>Syntax Trivia<ept id="57489345-1db9-4d67-a69f-dbba385f51f2CapsExtId1">&lt;/linkText&gt;</ept><bpt id="57489345-1db9-4d67-a69f-dbba385f51f2CapsExtId2">&lt;title&gt;</bpt><ept id="57489345-1db9-4d67-a69f-dbba385f51f2CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="57489345-1db9-4d67-a69f-dbba385f51f2CapsExtId1">&lt;linkText&gt;</bpt>Syntax Trivia<ept id="57489345-1db9-4d67-a69f-dbba385f51f2CapsExtId1">&lt;/linkText&gt;</ept><bpt id="57489345-1db9-4d67-a69f-dbba385f51f2CapsExtId2">&lt;title&gt;</bpt><ept id="57489345-1db9-4d67-a69f-dbba385f51f2CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="06609df5-e215-44aa-b74b-5517a9e95bff" xml:space="preserve">
          <source><bpt id="3b837db4-9955-43d2-9b39-8784118bb03fCapsExtId1">&lt;linkText&gt;</bpt>Spans<ept id="3b837db4-9955-43d2-9b39-8784118bb03fCapsExtId1">&lt;/linkText&gt;</ept><bpt id="3b837db4-9955-43d2-9b39-8784118bb03fCapsExtId2">&lt;title&gt;</bpt><ept id="3b837db4-9955-43d2-9b39-8784118bb03fCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="3b837db4-9955-43d2-9b39-8784118bb03fCapsExtId1">&lt;linkText&gt;</bpt>Spans<ept id="3b837db4-9955-43d2-9b39-8784118bb03fCapsExtId1">&lt;/linkText&gt;</ept><bpt id="3b837db4-9955-43d2-9b39-8784118bb03fCapsExtId2">&lt;title&gt;</bpt><ept id="3b837db4-9955-43d2-9b39-8784118bb03fCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="b7aeb069-9eb6-48b2-bdc7-bfa9ebc2ec04" xml:space="preserve">
          <source><bpt id="b13169ee-256f-4713-9361-27e08cb3533cCapsExtId1">&lt;linkText&gt;</bpt>Kinds<ept id="b13169ee-256f-4713-9361-27e08cb3533cCapsExtId1">&lt;/linkText&gt;</ept><bpt id="b13169ee-256f-4713-9361-27e08cb3533cCapsExtId2">&lt;title&gt;</bpt><ept id="b13169ee-256f-4713-9361-27e08cb3533cCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="b13169ee-256f-4713-9361-27e08cb3533cCapsExtId1">&lt;linkText&gt;</bpt>Kinds<ept id="b13169ee-256f-4713-9361-27e08cb3533cCapsExtId1">&lt;/linkText&gt;</ept><bpt id="b13169ee-256f-4713-9361-27e08cb3533cCapsExtId2">&lt;title&gt;</bpt><ept id="b13169ee-256f-4713-9361-27e08cb3533cCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="bf4db2c9-b180-4b50-a9c8-567568abb2da" xml:space="preserve">
          <source><bpt id="f99b247a-6b27-4aa0-8935-9cfbb53eb85cCapsExtId1">&lt;linkText&gt;</bpt>Errors<ept id="f99b247a-6b27-4aa0-8935-9cfbb53eb85cCapsExtId1">&lt;/linkText&gt;</ept><bpt id="f99b247a-6b27-4aa0-8935-9cfbb53eb85cCapsExtId2">&lt;title&gt;</bpt><ept id="f99b247a-6b27-4aa0-8935-9cfbb53eb85cCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="f99b247a-6b27-4aa0-8935-9cfbb53eb85cCapsExtId1">&lt;linkText&gt;</bpt>Errors<ept id="f99b247a-6b27-4aa0-8935-9cfbb53eb85cCapsExtId1">&lt;/linkText&gt;</ept><bpt id="f99b247a-6b27-4aa0-8935-9cfbb53eb85cCapsExtId2">&lt;title&gt;</bpt><ept id="f99b247a-6b27-4aa0-8935-9cfbb53eb85cCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="9acd8926-28e4-4197-9547-6e8d868d0391" xml:space="preserve">
          <source><bpt id="f1cc8f20-826f-4890-b8c8-e0b6f2a48762CapsExtId1">&lt;linkText&gt;</bpt>Working with Semantics<ept id="f1cc8f20-826f-4890-b8c8-e0b6f2a48762CapsExtId1">&lt;/linkText&gt;</ept><bpt id="f1cc8f20-826f-4890-b8c8-e0b6f2a48762CapsExtId2">&lt;title&gt;</bpt><ept id="f1cc8f20-826f-4890-b8c8-e0b6f2a48762CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="f1cc8f20-826f-4890-b8c8-e0b6f2a48762CapsExtId1">&lt;linkText&gt;</bpt>Working with Semantics<ept id="f1cc8f20-826f-4890-b8c8-e0b6f2a48762CapsExtId1">&lt;/linkText&gt;</ept><bpt id="f1cc8f20-826f-4890-b8c8-e0b6f2a48762CapsExtId2">&lt;title&gt;</bpt><ept id="f1cc8f20-826f-4890-b8c8-e0b6f2a48762CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="9fef0739-4adc-453e-9fe9-6d319fdfb891" xml:space="preserve">
          <source><bpt id="f7146e7c-4ce7-4e57-a6ac-3eae00288a2aCapsExtId1">&lt;linkText&gt;</bpt>Compilation<ept id="f7146e7c-4ce7-4e57-a6ac-3eae00288a2aCapsExtId1">&lt;/linkText&gt;</ept><bpt id="f7146e7c-4ce7-4e57-a6ac-3eae00288a2aCapsExtId2">&lt;title&gt;</bpt><ept id="f7146e7c-4ce7-4e57-a6ac-3eae00288a2aCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="f7146e7c-4ce7-4e57-a6ac-3eae00288a2aCapsExtId1">&lt;linkText&gt;</bpt>Compilation<ept id="f7146e7c-4ce7-4e57-a6ac-3eae00288a2aCapsExtId1">&lt;/linkText&gt;</ept><bpt id="f7146e7c-4ce7-4e57-a6ac-3eae00288a2aCapsExtId2">&lt;title&gt;</bpt><ept id="f7146e7c-4ce7-4e57-a6ac-3eae00288a2aCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="4738e113-cedf-4b8f-9218-ff49837fcba0" xml:space="preserve">
          <source><bpt id="e2e026de-ce42-456f-8d73-372a0b44a87eCapsExtId1">&lt;linkText&gt;</bpt>Symbols<ept id="e2e026de-ce42-456f-8d73-372a0b44a87eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="e2e026de-ce42-456f-8d73-372a0b44a87eCapsExtId2">&lt;title&gt;</bpt><ept id="e2e026de-ce42-456f-8d73-372a0b44a87eCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="e2e026de-ce42-456f-8d73-372a0b44a87eCapsExtId1">&lt;linkText&gt;</bpt>Symbols<ept id="e2e026de-ce42-456f-8d73-372a0b44a87eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="e2e026de-ce42-456f-8d73-372a0b44a87eCapsExtId2">&lt;title&gt;</bpt><ept id="e2e026de-ce42-456f-8d73-372a0b44a87eCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="ec8682d7-85a7-4269-8c2c-d3c2d85f466e" xml:space="preserve">
          <source><bpt id="de55456a-fb2b-428a-9b4f-15d23fb21f65CapsExtId1">&lt;linkText&gt;</bpt>Semantic Model<ept id="de55456a-fb2b-428a-9b4f-15d23fb21f65CapsExtId1">&lt;/linkText&gt;</ept><bpt id="de55456a-fb2b-428a-9b4f-15d23fb21f65CapsExtId2">&lt;title&gt;</bpt><ept id="de55456a-fb2b-428a-9b4f-15d23fb21f65CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="de55456a-fb2b-428a-9b4f-15d23fb21f65CapsExtId1">&lt;linkText&gt;</bpt>Semantic Model<ept id="de55456a-fb2b-428a-9b4f-15d23fb21f65CapsExtId1">&lt;/linkText&gt;</ept><bpt id="de55456a-fb2b-428a-9b4f-15d23fb21f65CapsExtId2">&lt;title&gt;</bpt><ept id="de55456a-fb2b-428a-9b4f-15d23fb21f65CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="8fbacda3-9d55-4bb7-bda3-cbcacde2b967" xml:space="preserve">
          <source><bpt id="8d49ad18-610f-43c5-a085-b512aad44c72CapsExtId1">&lt;linkText&gt;</bpt>Working with a Workspace<ept id="8d49ad18-610f-43c5-a085-b512aad44c72CapsExtId1">&lt;/linkText&gt;</ept><bpt id="8d49ad18-610f-43c5-a085-b512aad44c72CapsExtId2">&lt;title&gt;</bpt><ept id="8d49ad18-610f-43c5-a085-b512aad44c72CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="8d49ad18-610f-43c5-a085-b512aad44c72CapsExtId1">&lt;linkText&gt;</bpt>Working with a Workspace<ept id="8d49ad18-610f-43c5-a085-b512aad44c72CapsExtId1">&lt;/linkText&gt;</ept><bpt id="8d49ad18-610f-43c5-a085-b512aad44c72CapsExtId2">&lt;title&gt;</bpt><ept id="8d49ad18-610f-43c5-a085-b512aad44c72CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="3ff2cf43-3668-4d51-b915-af0c92e64b7a" xml:space="preserve">
          <source><bpt id="2d183b02-3c04-4f25-90f3-5737b1d5738dCapsExtId1">&lt;linkText&gt;</bpt>Workspace<ept id="2d183b02-3c04-4f25-90f3-5737b1d5738dCapsExtId1">&lt;/linkText&gt;</ept><bpt id="2d183b02-3c04-4f25-90f3-5737b1d5738dCapsExtId2">&lt;title&gt;</bpt><ept id="2d183b02-3c04-4f25-90f3-5737b1d5738dCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="2d183b02-3c04-4f25-90f3-5737b1d5738dCapsExtId1">&lt;linkText&gt;</bpt>Workspace<ept id="2d183b02-3c04-4f25-90f3-5737b1d5738dCapsExtId1">&lt;/linkText&gt;</ept><bpt id="2d183b02-3c04-4f25-90f3-5737b1d5738dCapsExtId2">&lt;title&gt;</bpt><ept id="2d183b02-3c04-4f25-90f3-5737b1d5738dCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="ec8e4640-5802-4359-a7b3-dbf9e5050ad9" xml:space="preserve">
          <source><bpt id="ae1f25a5-e6d3-4b11-a20f-da07d09e3ebcCapsExtId1">&lt;linkText&gt;</bpt>Solutions, Projects and
Documents<ept id="ae1f25a5-e6d3-4b11-a20f-da07d09e3ebcCapsExtId1">&lt;/linkText&gt;</ept><bpt id="ae1f25a5-e6d3-4b11-a20f-da07d09e3ebcCapsExtId2">&lt;title&gt;</bpt><ept id="ae1f25a5-e6d3-4b11-a20f-da07d09e3ebcCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="ae1f25a5-e6d3-4b11-a20f-da07d09e3ebcCapsExtId1">&lt;linkText&gt;</bpt>Solutions, Projects and
Documents<ept id="ae1f25a5-e6d3-4b11-a20f-da07d09e3ebcCapsExtId1">&lt;/linkText&gt;</ept><bpt id="ae1f25a5-e6d3-4b11-a20f-da07d09e3ebcCapsExtId2">&lt;title&gt;</bpt><ept id="ae1f25a5-e6d3-4b11-a20f-da07d09e3ebcCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="f393ce76-7203-4020-8fc3-b888ab0258d7" xml:space="preserve">
          <source>Introduction</source>
          <target state="new">Introduction</target>
        </trans-unit>
        <trans-unit id="0b992c81-e154-4906-8022-00244002b914" xml:space="preserve">
          <source>Traditionally, compilers are black boxes -- source code goes in one end,
magic happens in the middle, and object files or assemblies come out the
other end.</source>
          <target state="new">Traditionally, compilers are black boxes -- source code goes in one end,
magic happens in the middle, and object files or assemblies come out the
other end.</target>
        </trans-unit>
        <trans-unit id="89199404-3fa3-4664-a3f5-693c13d322a7" xml:space="preserve">
          <source>As compilers perform their magic, they build up deep
understanding of the code they are processing, but that knowledge is
unavailable to anyone but the compiler implementation wizards.</source>
          <target state="new">As compilers perform their magic, they build up deep
understanding of the code they are processing, but that knowledge is
unavailable to anyone but the compiler implementation wizards.</target>
        </trans-unit>
        <trans-unit id="574e530d-6fe2-4650-80b0-3ae2d03de5bb" xml:space="preserve">
          <source>The
information is promptly forgotten after the translated output is
produced.</source>
          <target state="new">The
information is promptly forgotten after the translated output is
produced.</target>
        </trans-unit>
        <trans-unit id="f3071a02-ae4c-47e9-b907-6f10681da652" xml:space="preserve">
          <source>For decades, this world view has served us well, but it is no longer
sufficient.</source>
          <target state="new">For decades, this world view has served us well, but it is no longer
sufficient.</target>
        </trans-unit>
        <trans-unit id="d50e2736-4f5e-4722-87c1-5fe7d6af2f53" xml:space="preserve">
          <source>Increasingly we rely on integrated development environment
(IDE) features such as IntelliSense, refactoring, intelligent rename,
“Find all references,” and “Go to definition” to increase our
productivity.</source>
          <target state="new">Increasingly we rely on integrated development environment
(IDE) features such as IntelliSense, refactoring, intelligent rename,
“Find all references,” and “Go to definition” to increase our
productivity.</target>
        </trans-unit>
        <trans-unit id="96fce7a3-00fc-49e6-b64e-7bb5febde912" xml:space="preserve">
          <source>We rely on code analysis tools to improve our code quality
and code generators to aid in application construction.</source>
          <target state="new">We rely on code analysis tools to improve our code quality
and code generators to aid in application construction.</target>
        </trans-unit>
        <trans-unit id="c7dc64f6-1693-4580-b5bd-d944687cfde4" xml:space="preserve">
          <source>As these tools
get smarter, they need access to more and more of the deep code
knowledge that only compilers possess.</source>
          <target state="new">As these tools
get smarter, they need access to more and more of the deep code
knowledge that only compilers possess.</target>
        </trans-unit>
        <trans-unit id="fa3c0649-96d8-42c6-a1b3-55ebf9b7bf1e" xml:space="preserve">
          <source>This is the core mission of the
.NET Compiler Platform (“Roslyn”): opening up the black boxes and
allowing tools and end users to share in the wealth of information
compilers have about our code.</source>
          <target state="new">This is the core mission of the
.NET Compiler Platform (“Roslyn”): opening up the black boxes and
allowing tools and end users to share in the wealth of information
compilers have about our code.</target>
        </trans-unit>
        <trans-unit id="5f89be73-8ee1-4974-82da-87029da6f120" xml:space="preserve">
          <source>Instead of being opaque source-code-in
and object-code-out translators, through the .NET Compiler Platform
(“Roslyn”), compilers become platforms—APIs that you can use for code
related tasks in your tools and applications.</source>
          <target state="new">Instead of being opaque source-code-in
and object-code-out translators, through the .NET Compiler Platform
(“Roslyn”), compilers become platforms—APIs that you can use for code
related tasks in your tools and applications.</target>
        </trans-unit>
        <trans-unit id="e8a5d24e-70f6-4325-9769-773049f0a634" xml:space="preserve">
          <source>The transition to compilers as platforms dramatically lowers the barrier
to entry for creating code focused tools and applications.</source>
          <target state="new">The transition to compilers as platforms dramatically lowers the barrier
to entry for creating code focused tools and applications.</target>
        </trans-unit>
        <trans-unit id="76e7d91d-55f6-46c1-85fc-d56fc31150a6" xml:space="preserve">
          <source>It creates
many opportunities for innovation in areas such as meta-programming,
code generation and transformation, interactive use of the C\# and VB
languages, and embedding of C\# and VB in domain specific languages.</source>
          <target state="new">It creates
many opportunities for innovation in areas such as meta-programming,
code generation and transformation, interactive use of the C\# and VB
languages, and embedding of C\# and VB in domain specific languages.</target>
        </trans-unit>
        <trans-unit id="3d48a701-eaf1-46c0-9a34-34fa74c2ba98" xml:space="preserve">
          <source>The .NET Compiler Platform (“Roslyn”) SDK Preview includes the latest
drafts of new language object models for code generation, analysis, and
refactoring.</source>
          <target state="new">The .NET Compiler Platform (“Roslyn”) SDK Preview includes the latest
drafts of new language object models for code generation, analysis, and
refactoring.</target>
        </trans-unit>
        <trans-unit id="2a71411c-b1db-4b04-aa21-fab85a6ce24b" xml:space="preserve">
          <source>We hope to include drafts of API support for scripting and
interactive use of C\# and Visual Basic in a future preview.</source>
          <target state="new">We hope to include drafts of API support for scripting and
interactive use of C\# and Visual Basic in a future preview.</target>
        </trans-unit>
        <trans-unit id="a4f600ea-8504-4e9d-b296-402fb3a9eb3b" xml:space="preserve">
          <source>This
document provides a conceptual overview of the .NET Compiler Platform
(“Roslyn”).</source>
          <target state="new">This
document provides a conceptual overview of the .NET Compiler Platform
(“Roslyn”).</target>
        </trans-unit>
        <trans-unit id="a9b9bc1c-a46a-45fa-b16f-cc3f43bd58a8" xml:space="preserve">
          <source>Further details can be found in the walkthroughs and samples
included in the SDK Preview.</source>
          <target state="new">Further details can be found in the walkthroughs and samples
included in the SDK Preview.</target>
        </trans-unit>
        <trans-unit id="274ac72f-4ee4-4af0-aa2d-47d8e59c2c86" xml:space="preserve">
          <source>Exposing the Compiler APIs</source>
          <target state="new">Exposing the Compiler APIs</target>
        </trans-unit>
        <trans-unit id="7eb2577d-7af2-43cb-8195-585abec63691" xml:space="preserve">
          <source>Compiler Pipeline Functional Areas</source>
          <target state="new">Compiler Pipeline Functional Areas</target>
        </trans-unit>
        <trans-unit id="70567727-15e2-4300-9f1a-7ad1d6084b86" xml:space="preserve">
          <source>The .NET Compiler Platform (“Roslyn”) exposes the C\# and Visual Basic
compiler’s code analysis to you as a consumer by providing an API layer
that mirrors a traditional compiler pipeline.</source>
          <target state="new">The .NET Compiler Platform (“Roslyn”) exposes the C\# and Visual Basic
compiler’s code analysis to you as a consumer by providing an API layer
that mirrors a traditional compiler pipeline.</target>
        </trans-unit>
        <trans-unit id="8e019756-af4c-45ff-bd3f-222dd4c64883" xml:space="preserve">
          <source><bpt id="eb385e20-9469-432b-934b-9a8e8cf95172">&lt;linkText&gt;</bpt>image<ept id="eb385e20-9469-432b-934b-9a8e8cf95172">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="eb385e20-9469-432b-934b-9a8e8cf95172">&lt;linkText&gt;</bpt>image<ept id="eb385e20-9469-432b-934b-9a8e8cf95172">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="5b7d48c5-afe0-4d02-b0fb-072ef10109ac" xml:space="preserve">
          <source>Each phase of this pipeline is now a separate component.</source>
          <target state="new">Each phase of this pipeline is now a separate component.</target>
        </trans-unit>
        <trans-unit id="fb630f26-a67c-4b2e-aad0-5c38b79ca977" xml:space="preserve">
          <source>First the parse
phase, where source is tokenized and parsed into syntax that follows the
language grammar.</source>
          <target state="new">First the parse
phase, where source is tokenized and parsed into syntax that follows the
language grammar.</target>
        </trans-unit>
        <trans-unit id="18fa71ba-7750-48f7-b552-b7b5fd884dfe" xml:space="preserve">
          <source>Second the declaration phase, where declarations from
source and imported metadata are analyzed to form named symbols.</source>
          <target state="new">Second the declaration phase, where declarations from
source and imported metadata are analyzed to form named symbols.</target>
        </trans-unit>
        <trans-unit id="c81add02-d94a-4b98-898b-fdb607b84fc4" xml:space="preserve">
          <source>Next
the bind phase, where identifiers in the code are matched to symbols.</source>
          <target state="new">Next
the bind phase, where identifiers in the code are matched to symbols.</target>
        </trans-unit>
        <trans-unit id="2922d5ca-52a6-4cbf-9456-79d31773e3b7" xml:space="preserve">
          <source>Finally, the emit phase, where all the information built up by the
compiler is emitted as an assembly.</source>
          <target state="new">Finally, the emit phase, where all the information built up by the
compiler is emitted as an assembly.</target>
        </trans-unit>
        <trans-unit id="2a72f866-65f1-429f-a1a3-a2dc6186325c" xml:space="preserve">
          <source><bpt id="fe194439-cf18-4c06-9bcf-c81707f472f4">&lt;linkText&gt;</bpt>image<ept id="fe194439-cf18-4c06-9bcf-c81707f472f4">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="fe194439-cf18-4c06-9bcf-c81707f472f4">&lt;linkText&gt;</bpt>image<ept id="fe194439-cf18-4c06-9bcf-c81707f472f4">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="b0381163-9d86-472f-b4e1-d8ab27f355ad" xml:space="preserve">
          <source>Corresponding to each of those phases, an object model is surfaced that
allows access to the information at that phase.</source>
          <target state="new">Corresponding to each of those phases, an object model is surfaced that
allows access to the information at that phase.</target>
        </trans-unit>
        <trans-unit id="44ec3253-2fbd-4446-a526-9e91159a1c42" xml:space="preserve">
          <source>The parsing phase is
exposed as a syntax tree, the declaration phase as a hierarchical symbol
table, the binding phase as a model that exposes the result of the
compiler’s semantic analysis and the emit phase as an API that produces
IL byte codes.</source>
          <target state="new">The parsing phase is
exposed as a syntax tree, the declaration phase as a hierarchical symbol
table, the binding phase as a model that exposes the result of the
compiler’s semantic analysis and the emit phase as an API that produces
IL byte codes.</target>
        </trans-unit>
        <trans-unit id="b4c812ef-ebc6-435a-a0c8-2b2c3bf5ad26" xml:space="preserve">
          <source><bpt id="84adce54-788c-4377-a40e-5339c2398727">&lt;linkText&gt;</bpt>image<ept id="84adce54-788c-4377-a40e-5339c2398727">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="84adce54-788c-4377-a40e-5339c2398727">&lt;linkText&gt;</bpt>image<ept id="84adce54-788c-4377-a40e-5339c2398727">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="d3feaada-47a6-45a2-95bd-8d90f0775d89" xml:space="preserve">
          <source>Each compiler combines these components together as a single end-to-end
whole.</source>
          <target state="new">Each compiler combines these components together as a single end-to-end
whole.</target>
        </trans-unit>
        <trans-unit id="f904bccf-adf1-4d08-bc69-06462f75131e" xml:space="preserve">
          <source>To ensure that the public Compiler APIs are sufficient for building
world-class IDE features, the language services that will be used to
power the C\# and VB experiences in Visual Studio vNext have been
rebuilt using them.</source>
          <target state="new">To ensure that the public Compiler APIs are sufficient for building
world-class IDE features, the language services that will be used to
power the C\# and VB experiences in Visual Studio vNext have been
rebuilt using them.</target>
        </trans-unit>
        <trans-unit id="17ed1556-d0f5-473b-a349-c29d0da6a544" xml:space="preserve">
          <source>For instance, the code outlining and formatting
features use the syntax trees, the Object Browser and navigation
features use the symbol table, refactorings and Go to Definition use the
semantic model, and Edit and Continue uses all of these, including the
Emit API.</source>
          <target state="new">For instance, the code outlining and formatting
features use the syntax trees, the Object Browser and navigation
features use the symbol table, refactorings and Go to Definition use the
semantic model, and Edit and Continue uses all of these, including the
Emit API.</target>
        </trans-unit>
        <trans-unit id="e1a83cdd-9772-40eb-9363-4c1d7570df35" xml:space="preserve">
          <source>These experiences may be previewed on Visual Studio 2013
through the “Roslyn” End-User Preview.</source>
          <target state="new">These experiences may be previewed on Visual Studio 2013
through the “Roslyn” End-User Preview.</target>
        </trans-unit>
        <trans-unit id="77af9a4a-33df-4437-887e-57debc946d1e" xml:space="preserve">
          <source>This preview is required in order
to build and test applications build on top of the .NET Compiler
Platform (“Roslyn”) SDK meant for integration into Visual Studio though
the .NET Compiler Platform (“Roslyn”) APIs can be used in your own
applications independently of Visual Studio without requiring the
End-User Preview.</source>
          <target state="new">This preview is required in order
to build and test applications build on top of the .NET Compiler
Platform (“Roslyn”) SDK meant for integration into Visual Studio though
the .NET Compiler Platform (“Roslyn”) APIs can be used in your own
applications independently of Visual Studio without requiring the
End-User Preview.</target>
        </trans-unit>
        <trans-unit id="0fbf9ead-dcb6-447e-948d-098eb51b1ce7" xml:space="preserve">
          <source>API Layers</source>
          <target state="new">API Layers</target>
        </trans-unit>
        <trans-unit id="59698c06-5763-4cd9-bacd-577d3522f1eb" xml:space="preserve">
          <source>The .NET Compiler Platform (“Roslyn”) consists of two main layers of
APIs – the Compiler APIs and Workspaces APIs.</source>
          <target state="new">The .NET Compiler Platform (“Roslyn”) consists of two main layers of
APIs – the Compiler APIs and Workspaces APIs.</target>
        </trans-unit>
        <trans-unit id="0a9b841e-f1f8-4cec-9a80-1a6dc755189c" xml:space="preserve">
          <source><bpt id="b11ed84c-21a8-443e-b130-dd6d3e54d49d">&lt;linkText&gt;</bpt>image<ept id="b11ed84c-21a8-443e-b130-dd6d3e54d49d">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="b11ed84c-21a8-443e-b130-dd6d3e54d49d">&lt;linkText&gt;</bpt>image<ept id="b11ed84c-21a8-443e-b130-dd6d3e54d49d">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="728f41cd-878d-4f12-a2fc-b2da309fcdbc" xml:space="preserve">
          <source>Compiler APIs</source>
          <target state="new">Compiler APIs</target>
        </trans-unit>
        <trans-unit id="49a4f349-b713-4bfd-9203-424b500592be" xml:space="preserve">
          <source>The compiler layer contains the object models that correspond with
information exposed at each phase of the compiler pipeline, both
syntactic and semantic.</source>
          <target state="new">The compiler layer contains the object models that correspond with
information exposed at each phase of the compiler pipeline, both
syntactic and semantic.</target>
        </trans-unit>
        <trans-unit id="527fb776-d4ff-4dd5-8bac-1b6ba62a04f5" xml:space="preserve">
          <source>The compiler layer also contains an immutable
snapshot of a single invocation of a compiler, including assembly
references, compiler options, and source code files.</source>
          <target state="new">The compiler layer also contains an immutable
snapshot of a single invocation of a compiler, including assembly
references, compiler options, and source code files.</target>
        </trans-unit>
        <trans-unit id="22ef2481-e40d-47ff-9e02-ae540c765b0d" xml:space="preserve">
          <source>There are two
distinct APIs that represent the C\# language and the Visual Basic
language.</source>
          <target state="new">There are two
distinct APIs that represent the C\# language and the Visual Basic
language.</target>
        </trans-unit>
        <trans-unit id="e7e97aa8-30f3-4b50-b566-e9adef705872" xml:space="preserve">
          <source>These two APIs are similar in shape but tailored for
high-fidelity to each individual language.</source>
          <target state="new">These two APIs are similar in shape but tailored for
high-fidelity to each individual language.</target>
        </trans-unit>
        <trans-unit id="afa01afe-75f0-44ac-ad33-7093f038066b" xml:space="preserve">
          <source>This layer has no
dependencies on Visual Studio components.</source>
          <target state="new">This layer has no
dependencies on Visual Studio components.</target>
        </trans-unit>
        <trans-unit id="5e6e97a4-a5f6-4b24-b33f-76aeb4bc5d4b" xml:space="preserve">
          <source>Diagnostic APIs</source>
          <target state="new">Diagnostic APIs</target>
        </trans-unit>
        <trans-unit id="85607802-e511-4ca9-bbb7-f8ca5f0d48d0" xml:space="preserve">
          <source>As part of their analysis the compiler may produce a set of diagnostics
covering everything from syntax, semantic, and definite assignment
errors to various warnings and informational diagnostics.</source>
          <target state="new">As part of their analysis the compiler may produce a set of diagnostics
covering everything from syntax, semantic, and definite assignment
errors to various warnings and informational diagnostics.</target>
        </trans-unit>
        <trans-unit id="518fe4f9-d158-456d-a709-56255e2424da" xml:space="preserve">
          <source>The Compiler
API layer exposes diagnostics through an extensible API allowing for
user-defined analyzers to be plugged into a Compilation and user-defined
diagnostics, such as those produced by tools like StyleCop or FxCop, to
be produced alongside compiler-defined diagnostics.</source>
          <target state="new">The Compiler
API layer exposes diagnostics through an extensible API allowing for
user-defined analyzers to be plugged into a Compilation and user-defined
diagnostics, such as those produced by tools like StyleCop or FxCop, to
be produced alongside compiler-defined diagnostics.</target>
        </trans-unit>
        <trans-unit id="69958a53-df26-4b23-a785-ca12c32d58ba" xml:space="preserve">
          <source>Producing
diagnostics in this way has the benefit of integrating naturally with
tools such as MSBuild and Visual Studio which depend on diagnostics for
experiences such as halting a build based on policy and showing live
squiggles in the editor and suggesting code fixes.</source>
          <target state="new">Producing
diagnostics in this way has the benefit of integrating naturally with
tools such as MSBuild and Visual Studio which depend on diagnostics for
experiences such as halting a build based on policy and showing live
squiggles in the editor and suggesting code fixes.</target>
        </trans-unit>
        <trans-unit id="0da06e45-cb53-4aa9-990a-ac06435dc3d8" xml:space="preserve">
          <source>Scripting APIs</source>
          <target state="new">Scripting APIs</target>
        </trans-unit>
        <trans-unit id="60b01cc9-541c-4bfa-b1b6-5f6f1d5b7ce6" xml:space="preserve">
          <source>As a part of the compiler layer, the team prototyped hosting/scripting
APIs for executing code snippets and accumulating a runtime execution
context.</source>
          <target state="new">As a part of the compiler layer, the team prototyped hosting/scripting
APIs for executing code snippets and accumulating a runtime execution
context.</target>
        </trans-unit>
        <trans-unit id="3493f9a9-ffbb-4134-bf70-57b61885f022" xml:space="preserve">
          <source>The REPL used these APIs, but neither the REPL nor the
Scripting APIs are part of the .NET Compiler Platform project currently.</source>
          <target state="new">The REPL used these APIs, but neither the REPL nor the
Scripting APIs are part of the .NET Compiler Platform project currently.</target>
        </trans-unit>
        <trans-unit id="360f3263-2a02-4c50-9128-cd1027998f44" xml:space="preserve">
          <source>The team is reviewing these designs before re-introducing these
components.</source>
          <target state="new">The team is reviewing these designs before re-introducing these
components.</target>
        </trans-unit>
        <trans-unit id="597eeffd-90f3-43e5-a1d5-a538807fdf57" xml:space="preserve">
          <source>Workspaces APIs</source>
          <target state="new">Workspaces APIs</target>
        </trans-unit>
        <trans-unit id="ca4e0613-2e41-4d30-b7f7-a9fd50771c62" xml:space="preserve">
          <source>The Workspaces layer contains the Workspace API, which is the starting
point for doing code analysis and refactoring over entire solutions.</source>
          <target state="new">The Workspaces layer contains the Workspace API, which is the starting
point for doing code analysis and refactoring over entire solutions.</target>
        </trans-unit>
        <trans-unit id="719e5757-27d5-414f-8d11-ab1be5bb48a4" xml:space="preserve">
          <source>It
assists you in organizing all the information about the projects in a
solution into single object model, offering you direct access to the
compiler layer object models without needing to parse files, configure
options or manage project to project dependencies.</source>
          <target state="new">It
assists you in organizing all the information about the projects in a
solution into single object model, offering you direct access to the
compiler layer object models without needing to parse files, configure
options or manage project to project dependencies.</target>
        </trans-unit>
        <trans-unit id="f32ebdf3-19a3-4185-bec0-5ad33a8cc8fe" xml:space="preserve">
          <source>In addition, the Workspaces layer surfaces a set of commonly used APIs
used when implementing code analysis and refactoring tools that function
within a host environment like the Visual Studio IDE, such as the Find
All References, Formatting, and Code Generation APIs.</source>
          <target state="new">In addition, the Workspaces layer surfaces a set of commonly used APIs
used when implementing code analysis and refactoring tools that function
within a host environment like the Visual Studio IDE, such as the Find
All References, Formatting, and Code Generation APIs.</target>
        </trans-unit>
        <trans-unit id="ddb68cab-7f40-491a-a39a-15ad9867efd9" xml:space="preserve">
          <source>This layer has no dependencies on Visual Studio components.</source>
          <target state="new">This layer has no dependencies on Visual Studio components.</target>
        </trans-unit>
        <trans-unit id="8ef150c7-2337-4b61-9059-79cf16bd5e1c" xml:space="preserve">
          <source>Working with Syntax</source>
          <target state="new">Working with Syntax</target>
        </trans-unit>
        <trans-unit id="776ab3ea-0922-4c19-b20e-6c2478702e5d" xml:space="preserve">
          <source>The most fundamental data structure exposed by the Compiler APIs is the
syntax tree.</source>
          <target state="new">The most fundamental data structure exposed by the Compiler APIs is the
syntax tree.</target>
        </trans-unit>
        <trans-unit id="a0b6855f-d0bc-4d9a-8c78-264b7c7175fd" xml:space="preserve">
          <source>These trees represent the lexical and syntactic structure
of source code.</source>
          <target state="new">These trees represent the lexical and syntactic structure
of source code.</target>
        </trans-unit>
        <trans-unit id="d2beffdd-74de-44a7-8e00-16bd819070de" xml:space="preserve">
          <source>They serve two important purposes:</source>
          <target state="new">They serve two important purposes:</target>
        </trans-unit>
        <trans-unit id="5707174f-465c-4854-987a-b8a013270a88" xml:space="preserve">
          <source>To allow tools - such as an IDE, add-ins, code analysis tools, and
refactorings - to see and process the syntactic structure of source
code in a user’s project.</source>
          <target state="new">To allow tools - such as an IDE, add-ins, code analysis tools, and
refactorings - to see and process the syntactic structure of source
code in a user’s project.</target>
        </trans-unit>
        <trans-unit id="395bac85-a699-4242-8c46-046b2fb1a2a9" xml:space="preserve">
          <source>To enable tools - such as refactorings and an IDE - to create,
modify, and rearrange source code in a natural manner without having
use direct text edits.</source>
          <target state="new">To enable tools - such as refactorings and an IDE - to create,
modify, and rearrange source code in a natural manner without having
use direct text edits.</target>
        </trans-unit>
        <trans-unit id="46d7e7cd-0979-47fa-9563-2d219db5b753" xml:space="preserve">
          <source>By creating and manipulating trees, tools can
easily create and rearrange source code.</source>
          <target state="new">By creating and manipulating trees, tools can
easily create and rearrange source code.</target>
        </trans-unit>
        <trans-unit id="8692b021-829f-45c1-9ade-20a102910334" xml:space="preserve">
          <source>Syntax Trees</source>
          <target state="new">Syntax Trees</target>
        </trans-unit>
        <trans-unit id="51e7f1fa-b409-40e7-9790-22adb24d6e38" xml:space="preserve">
          <source>Syntax trees are the primary structure used for compilation, code
analysis, binding, refactoring, IDE features, and code generation.</source>
          <target state="new">Syntax trees are the primary structure used for compilation, code
analysis, binding, refactoring, IDE features, and code generation.</target>
        </trans-unit>
        <trans-unit id="1d3a39b6-44b4-4d44-8f96-1afff2127695" xml:space="preserve">
          <source>No
part of the source code is understood without it first being identified
and categorized into one of many well-known structural language
elements.</source>
          <target state="new">No
part of the source code is understood without it first being identified
and categorized into one of many well-known structural language
elements.</target>
        </trans-unit>
        <trans-unit id="1c217099-1c17-4b8f-a9b5-5871e682fe22" xml:space="preserve">
          <source>Syntax trees have three key attributes.</source>
          <target state="new">Syntax trees have three key attributes.</target>
        </trans-unit>
        <trans-unit id="c6768fa1-1a2f-43f7-82c3-72002062d19d" xml:space="preserve">
          <source>The first attribute is that
syntax trees hold all the source information in full fidelity.</source>
          <target state="new">The first attribute is that
syntax trees hold all the source information in full fidelity.</target>
        </trans-unit>
        <trans-unit id="d6d2f70f-4131-4428-840f-7546730ec0fe" xml:space="preserve">
          <source>This
means that the syntax tree contains every piece of information found in
the source text, every grammatical construct, every lexical token, and
everything else in between including whitespace, comments, and
preprocessor directives.</source>
          <target state="new">This
means that the syntax tree contains every piece of information found in
the source text, every grammatical construct, every lexical token, and
everything else in between including whitespace, comments, and
preprocessor directives.</target>
        </trans-unit>
        <trans-unit id="e3680486-f61d-4c54-bdbf-1dbc0b06c8a5" xml:space="preserve">
          <source>For example, each literal mentioned in the
source is represented exactly as it was typed.</source>
          <target state="new">For example, each literal mentioned in the
source is represented exactly as it was typed.</target>
        </trans-unit>
        <trans-unit id="cf648ed3-91e4-4df9-aa54-1c67be08c3a8" xml:space="preserve">
          <source>The syntax trees also
represent errors in source code when the program is incomplete or
malformed, by representing skipped or missing tokens in the syntax tree.</source>
          <target state="new">The syntax trees also
represent errors in source code when the program is incomplete or
malformed, by representing skipped or missing tokens in the syntax tree.</target>
        </trans-unit>
        <trans-unit id="e4b0cea1-6492-4a80-a58c-3f7126d372be" xml:space="preserve">
          <source>This enables the second attribute of syntax trees.</source>
          <target state="new">This enables the second attribute of syntax trees.</target>
        </trans-unit>
        <trans-unit id="74bf74d5-4f7e-4648-b1ba-9cc15a746f41" xml:space="preserve">
          <source>A syntax tree
obtained from the parser is completely round-trippable back to the text
it was parsed from.</source>
          <target state="new">A syntax tree
obtained from the parser is completely round-trippable back to the text
it was parsed from.</target>
        </trans-unit>
        <trans-unit id="3f44d2fb-07d6-4e23-8a95-636360d4f928" xml:space="preserve">
          <source>From any syntax node, it is possible to get the text
representation of the sub-tree rooted at that node.</source>
          <target state="new">From any syntax node, it is possible to get the text
representation of the sub-tree rooted at that node.</target>
        </trans-unit>
        <trans-unit id="aa042b38-9301-49ad-8117-4f031332eb1b" xml:space="preserve">
          <source>This means that
syntax trees can be used as a way to construct and edit source text.</source>
          <target state="new">This means that
syntax trees can be used as a way to construct and edit source text.</target>
        </trans-unit>
        <trans-unit id="070acc6c-a22d-4878-af1b-cbf616957c15" xml:space="preserve">
          <source>By
creating a tree you have by implication created the equivalent text, and
by editing a syntax tree, making a new tree out of changes to an
existing tree, you have effectively edited the text.</source>
          <target state="new">By
creating a tree you have by implication created the equivalent text, and
by editing a syntax tree, making a new tree out of changes to an
existing tree, you have effectively edited the text.</target>
        </trans-unit>
        <trans-unit id="288db22e-3527-4046-8bba-aec28a0b4d2f" xml:space="preserve">
          <source>The third attribute of syntax trees is that they are immutable and
thread-safe.</source>
          <target state="new">The third attribute of syntax trees is that they are immutable and
thread-safe.</target>
        </trans-unit>
        <trans-unit id="64f0831b-8c14-4598-88e0-ad8ba77c2744" xml:space="preserve">
          <source>This means that after a tree is obtained, it is a snapshot
of the current state of the code, and never changes.</source>
          <target state="new">This means that after a tree is obtained, it is a snapshot
of the current state of the code, and never changes.</target>
        </trans-unit>
        <trans-unit id="7e2953ae-e315-4746-a01a-788ea731e91d" xml:space="preserve">
          <source>This allows
multiple users to interact with the same syntax tree at the same time in
different threads without locking or duplication.</source>
          <target state="new">This allows
multiple users to interact with the same syntax tree at the same time in
different threads without locking or duplication.</target>
        </trans-unit>
        <trans-unit id="e0e33ef2-8ff0-4487-9293-91c9d860e225" xml:space="preserve">
          <source>Because the trees are
immutable and no modifications can be made directly to a tree, factory
methods help create and modify syntax trees by creating additional
snapshots of the tree.</source>
          <target state="new">Because the trees are
immutable and no modifications can be made directly to a tree, factory
methods help create and modify syntax trees by creating additional
snapshots of the tree.</target>
        </trans-unit>
        <trans-unit id="5a63c2f2-b234-410f-b159-eb455f8e08c9" xml:space="preserve">
          <source>The trees are efficient in the way they reuse
underlying nodes, so the new version can be rebuilt fast and with little
extra memory.</source>
          <target state="new">The trees are efficient in the way they reuse
underlying nodes, so the new version can be rebuilt fast and with little
extra memory.</target>
        </trans-unit>
        <trans-unit id="fe6a5295-57cd-4511-af97-4770ea08b590" xml:space="preserve">
          <source>A syntax tree is literally a tree data structure, where non-terminal
structural elements parent other elements.</source>
          <target state="new">A syntax tree is literally a tree data structure, where non-terminal
structural elements parent other elements.</target>
        </trans-unit>
        <trans-unit id="a5e1567c-743e-47b5-8b7d-606b7a8277dc" xml:space="preserve">
          <source>Each syntax tree is made up
of nodes, tokens, and trivia.</source>
          <target state="new">Each syntax tree is made up
of nodes, tokens, and trivia.</target>
        </trans-unit>
        <trans-unit id="54c4d61f-70b9-441b-908f-114cca108142" xml:space="preserve">
          <source>Syntax Nodes</source>
          <target state="new">Syntax Nodes</target>
        </trans-unit>
        <trans-unit id="2d1ed76e-7c80-40e8-83a5-9228e37f5478" xml:space="preserve">
          <source>Syntax nodes are one of the primary elements of syntax trees.</source>
          <target state="new">Syntax nodes are one of the primary elements of syntax trees.</target>
        </trans-unit>
        <trans-unit id="65e6215a-d77a-48ff-99c2-7b7fad7ea7a5" xml:space="preserve">
          <source>These
nodes represent syntactic constructs such as declarations, statements,
clauses, and expressions.</source>
          <target state="new">These
nodes represent syntactic constructs such as declarations, statements,
clauses, and expressions.</target>
        </trans-unit>
        <trans-unit id="c2c27f31-0b7b-45dd-8dfa-4b0723b5ecfc" xml:space="preserve">
          <source>Each category of syntax nodes is represented
by a separate class derived from SyntaxNode.</source>
          <target state="new">Each category of syntax nodes is represented
by a separate class derived from SyntaxNode.</target>
        </trans-unit>
        <trans-unit id="56f6a585-1a64-419b-a0a2-004ca7a2d6ac" xml:space="preserve">
          <source>The set of node classes is
not extensible.</source>
          <target state="new">The set of node classes is
not extensible.</target>
        </trans-unit>
        <trans-unit id="b9527902-b4c8-4845-89bf-d62ed5556880" xml:space="preserve">
          <source>All syntax nodes are non-terminal nodes in the syntax tree, which means
they always have other nodes and tokens as children.</source>
          <target state="new">All syntax nodes are non-terminal nodes in the syntax tree, which means
they always have other nodes and tokens as children.</target>
        </trans-unit>
        <trans-unit id="1835df26-ac6b-431d-963d-28dbea9db54f" xml:space="preserve">
          <source>As a child of
another node, each node has a parent node that can be accessed through
the Parent property.</source>
          <target state="new">As a child of
another node, each node has a parent node that can be accessed through
the Parent property.</target>
        </trans-unit>
        <trans-unit id="39670bd2-e7bb-4d26-8582-c09e0d557e2c" xml:space="preserve">
          <source>Because nodes and trees are immutable, the parent
of a node never changes.</source>
          <target state="new">Because nodes and trees are immutable, the parent
of a node never changes.</target>
        </trans-unit>
        <trans-unit id="45b8d8ac-8c20-448d-801f-5f1c7de933be" xml:space="preserve">
          <source>The root of the tree has a null parent.</source>
          <target state="new">The root of the tree has a null parent.</target>
        </trans-unit>
        <trans-unit id="9ab9c7bc-82d9-448b-84d5-ae015490979c" xml:space="preserve">
          <source>Each node has a ChildNodes method, which returns a list of child nodes
in sequential order based on its position in the source text.</source>
          <target state="new">Each node has a ChildNodes method, which returns a list of child nodes
in sequential order based on its position in the source text.</target>
        </trans-unit>
        <trans-unit id="9fc59d83-ffd5-447c-ad80-ee0fcd534da4" xml:space="preserve">
          <source>This list
does not contain tokens.</source>
          <target state="new">This list
does not contain tokens.</target>
        </trans-unit>
        <trans-unit id="a90b8da3-487c-4924-ab30-16b3485daea4" xml:space="preserve">
          <source>Each node also has a collection of Descendant
methods - such as DescendantNodes, DescendantTokens, or DescendantTrivia</source>
          <target state="new">Each node also has a collection of Descendant
methods - such as DescendantNodes, DescendantTokens, or DescendantTrivia</target>
        </trans-unit>
        <trans-unit id="199b3348-301c-47a1-91c8-b5a59df5bca7" xml:space="preserve">
          <source>that represent a list of all the nodes, tokens, or trivia that exist
in the sub-tree rooted by that node.</source>
          <target state="new">that represent a list of all the nodes, tokens, or trivia that exist
in the sub-tree rooted by that node.</target>
        </trans-unit>
        <trans-unit id="f7cf947f-2383-4f9f-8bee-59e9827ad4eb" xml:space="preserve">
          <source>In addition, each syntax node subclass exposes all the same children
through strongly typed properties.</source>
          <target state="new">In addition, each syntax node subclass exposes all the same children
through strongly typed properties.</target>
        </trans-unit>
        <trans-unit id="7c038dcb-a4c1-4ece-a2c8-a898e81b3a2a" xml:space="preserve">
          <source>For example, a BinaryExpressionSyntax
node class has three additional properties specific to binary operators:
Left, OperatorToken, and Right.</source>
          <target state="new">For example, a BinaryExpressionSyntax
node class has three additional properties specific to binary operators:
Left, OperatorToken, and Right.</target>
        </trans-unit>
        <trans-unit id="3b0f6f0b-7895-4aa0-a0c3-0954968fb49f" xml:space="preserve">
          <source>The type of Left and Right is
ExpressionSyntax, and the type of OperatorToken is SyntaxToken.</source>
          <target state="new">The type of Left and Right is
ExpressionSyntax, and the type of OperatorToken is SyntaxToken.</target>
        </trans-unit>
        <trans-unit id="aa4508dd-5009-42cc-9ff8-08b4f86f7729" xml:space="preserve">
          <source>Some syntax nodes have optional children.</source>
          <target state="new">Some syntax nodes have optional children.</target>
        </trans-unit>
        <trans-unit id="d8342bd5-6156-45d6-85ff-34f4eaef4ba2" xml:space="preserve">
          <source>For example, an
IfStatementSyntax has an optional ElseClauseSyntax.</source>
          <target state="new">For example, an
IfStatementSyntax has an optional ElseClauseSyntax.</target>
        </trans-unit>
        <trans-unit id="986cf6de-f3e4-4d3e-8490-ec8e9bc96cea" xml:space="preserve">
          <source>If the child is not
present, the property returns null.</source>
          <target state="new">If the child is not
present, the property returns null.</target>
        </trans-unit>
        <trans-unit id="cf28ef1c-cf4d-40bc-a622-8ccf45f19ff4" xml:space="preserve">
          <source>Syntax Tokens</source>
          <target state="new">Syntax Tokens</target>
        </trans-unit>
        <trans-unit id="9d696b6c-0fb5-4dd2-8bed-c5dcc71898c8" xml:space="preserve">
          <source>Syntax tokens are the terminals of the language grammar, representing
the smallest syntactic fragments of the code.</source>
          <target state="new">Syntax tokens are the terminals of the language grammar, representing
the smallest syntactic fragments of the code.</target>
        </trans-unit>
        <trans-unit id="331a74b5-059a-4738-b697-4ac7c1dc22cc" xml:space="preserve">
          <source>They are never parents of
other nodes or tokens.</source>
          <target state="new">They are never parents of
other nodes or tokens.</target>
        </trans-unit>
        <trans-unit id="8d804b68-a58e-4f43-928e-a10769263ef7" xml:space="preserve">
          <source>Syntax tokens consist of keywords, identifiers,
literals, and punctuation.</source>
          <target state="new">Syntax tokens consist of keywords, identifiers,
literals, and punctuation.</target>
        </trans-unit>
        <trans-unit id="70aca718-8870-425e-a1d0-fd5253bcfe1e" xml:space="preserve">
          <source>For efficiency purposes, the SyntaxToken type is a CLR value type.</source>
          <target state="new">For efficiency purposes, the SyntaxToken type is a CLR value type.</target>
        </trans-unit>
        <trans-unit id="91ab13d5-709f-4a3b-901e-c94abdca5db2" xml:space="preserve">
          <source>Therefore, unlike syntax nodes, there is only one structure for all
kinds of tokens with a mix of properties that have meaning depending on
the kind of token that is being represented.</source>
          <target state="new">Therefore, unlike syntax nodes, there is only one structure for all
kinds of tokens with a mix of properties that have meaning depending on
the kind of token that is being represented.</target>
        </trans-unit>
        <trans-unit id="75de7256-557a-4953-bc0e-998eb757b88f" xml:space="preserve">
          <source>For example, an integer literal token represents a numeric value.</source>
          <target state="new">For example, an integer literal token represents a numeric value.</target>
        </trans-unit>
        <trans-unit id="b41323aa-1777-449c-89c8-ebcf3c428c45" xml:space="preserve">
          <source>In
addition to the raw source text the token spans, the literal token has a
Value property that tells you the exact decoded integer value.</source>
          <target state="new">In
addition to the raw source text the token spans, the literal token has a
Value property that tells you the exact decoded integer value.</target>
        </trans-unit>
        <trans-unit id="19857b87-d4f7-4ec9-ac5f-5ee40c6c501d" xml:space="preserve">
          <source>This
property is typed as Object because it may be one of many primitive
types.</source>
          <target state="new">This
property is typed as Object because it may be one of many primitive
types.</target>
        </trans-unit>
        <trans-unit id="b9d5916d-5fcd-4c36-9b29-4e52c78c33f4" xml:space="preserve">
          <source>The ValueText property tells you the same information as the Value
property; however this property is always typed as String.</source>
          <target state="new">The ValueText property tells you the same information as the Value
property; however this property is always typed as String.</target>
        </trans-unit>
        <trans-unit id="7b74ad5d-16d3-4561-8f4d-58d7eb400ab6" xml:space="preserve">
          <source>An identifier
in C\# source text may include Unicode escape characters, yet the syntax
of the escape sequence itself is not considered part of the identifier
name.</source>
          <target state="new">An identifier
in C\# source text may include Unicode escape characters, yet the syntax
of the escape sequence itself is not considered part of the identifier
name.</target>
        </trans-unit>
        <trans-unit id="747bc945-0a79-4ed6-b61e-afd7682ab2de" xml:space="preserve">
          <source>So although the raw text spanned by the token does include the
escape sequence, the ValueText property does not.</source>
          <target state="new">So although the raw text spanned by the token does include the
escape sequence, the ValueText property does not.</target>
        </trans-unit>
        <trans-unit id="1e03bc50-3071-4fe0-8796-709ef6447ddc" xml:space="preserve">
          <source>Instead, it includes
the Unicode characters identified by the escape.</source>
          <target state="new">Instead, it includes
the Unicode characters identified by the escape.</target>
        </trans-unit>
        <trans-unit id="43083518-7324-4484-bf71-b0d78c98e095" xml:space="preserve">
          <source>Syntax Trivia</source>
          <target state="new">Syntax Trivia</target>
        </trans-unit>
        <trans-unit id="f4350b20-6d3b-4d9a-9882-e0b60e73985d" xml:space="preserve">
          <source>Syntax trivia represent the parts of the source text that are largely
insignificant for normal understanding of the code, such as whitespace,
comments, and preprocessor directives.</source>
          <target state="new">Syntax trivia represent the parts of the source text that are largely
insignificant for normal understanding of the code, such as whitespace,
comments, and preprocessor directives.</target>
        </trans-unit>
        <trans-unit id="7a136669-ef34-4751-a59f-d61f44c4f4b6" xml:space="preserve">
          <source>Because trivia are not part of the normal language syntax and can appear
anywhere between any two tokens, they are not included in the syntax
tree as a child of a node.</source>
          <target state="new">Because trivia are not part of the normal language syntax and can appear
anywhere between any two tokens, they are not included in the syntax
tree as a child of a node.</target>
        </trans-unit>
        <trans-unit id="9abda1b7-c049-4a29-b540-41fcf1cae5b6" xml:space="preserve">
          <source>Yet, because they are important when
implementing a feature like refactoring and to maintain full fidelity
with the source text, they do exist as part of the syntax tree.</source>
          <target state="new">Yet, because they are important when
implementing a feature like refactoring and to maintain full fidelity
with the source text, they do exist as part of the syntax tree.</target>
        </trans-unit>
        <trans-unit id="1dfcf9fd-d5e0-4338-af7b-9e6adf58504b" xml:space="preserve">
          <source>You can access trivia by inspecting a token’s LeadingTrivia or
TrailingTrivia collections.</source>
          <target state="new">You can access trivia by inspecting a token’s LeadingTrivia or
TrailingTrivia collections.</target>
        </trans-unit>
        <trans-unit id="e83325c7-03e0-44c5-b26c-4f160d6a9d2d" xml:space="preserve">
          <source>When source text is parsed, sequences of
trivia are associated with tokens.</source>
          <target state="new">When source text is parsed, sequences of
trivia are associated with tokens.</target>
        </trans-unit>
        <trans-unit id="7aba543f-6961-4e72-a821-e875d6bebe06" xml:space="preserve">
          <source>In general, a token owns any trivia
after it on the same line up to the next token.</source>
          <target state="new">In general, a token owns any trivia
after it on the same line up to the next token.</target>
        </trans-unit>
        <trans-unit id="00d7e730-1118-47df-b86f-ebbac092f761" xml:space="preserve">
          <source>Any trivia after that
line is associated with the following token.</source>
          <target state="new">Any trivia after that
line is associated with the following token.</target>
        </trans-unit>
        <trans-unit id="8da32ed2-eb86-4b6e-923a-808accdb9216" xml:space="preserve">
          <source>The first token in the
source file gets all the initial trivia, and the last sequence of trivia
in the file is tacked onto the end-of-file token, which otherwise has
zero width.</source>
          <target state="new">The first token in the
source file gets all the initial trivia, and the last sequence of trivia
in the file is tacked onto the end-of-file token, which otherwise has
zero width.</target>
        </trans-unit>
        <trans-unit id="7d5fe213-e7cb-47f8-a3c1-7cca084bf2a0" xml:space="preserve">
          <source>Unlike syntax nodes and tokens, syntax trivia do not have parents.</source>
          <target state="new">Unlike syntax nodes and tokens, syntax trivia do not have parents.</target>
        </trans-unit>
        <trans-unit id="9cdfb339-f793-4d46-8c59-17d62e53a573" xml:space="preserve">
          <source>Yet,
because they are part of the tree and each is associated with a single
token, you may access the token it is associated with using the Token
property.</source>
          <target state="new">Yet,
because they are part of the tree and each is associated with a single
token, you may access the token it is associated with using the Token
property.</target>
        </trans-unit>
        <trans-unit id="bc856ccf-34e8-4bd8-8126-ab38cabb245b" xml:space="preserve">
          <source>Like syntax tokens, trivia are value types.</source>
          <target state="new">Like syntax tokens, trivia are value types.</target>
        </trans-unit>
        <trans-unit id="74063085-1bf9-49ef-b3c1-5f432dc7ad73" xml:space="preserve">
          <source>The single SyntaxTrivia type
is used to describe all kinds of trivia.</source>
          <target state="new">The single SyntaxTrivia type
is used to describe all kinds of trivia.</target>
        </trans-unit>
        <trans-unit id="8131bc2f-d872-47ea-99ce-e85af6208bc0" xml:space="preserve">
          <source>Spans</source>
          <target state="new">Spans</target>
        </trans-unit>
        <trans-unit id="79b6921f-e993-4938-9ce1-28f894da3273" xml:space="preserve">
          <source>Each node, token, or trivia knows its position within the source text
and the number of characters it consists of.</source>
          <target state="new">Each node, token, or trivia knows its position within the source text
and the number of characters it consists of.</target>
        </trans-unit>
        <trans-unit id="619640a1-be2f-4f74-90d7-44d728254523" xml:space="preserve">
          <source>A text position is
represented as a 32-bit integer, which is a zero-based Unicode character
index.</source>
          <target state="new">A text position is
represented as a 32-bit integer, which is a zero-based Unicode character
index.</target>
        </trans-unit>
        <trans-unit id="b6679c0a-4606-41ba-ba47-34360cdde857" xml:space="preserve">
          <source>A TextSpan object is the beginning position and a count of
characters, both represented as integers.</source>
          <target state="new">A TextSpan object is the beginning position and a count of
characters, both represented as integers.</target>
        </trans-unit>
        <trans-unit id="9643429c-4595-4280-8447-907d4a767ee2" xml:space="preserve">
          <source>If TextSpan has a zero length,
it refers to a location between two characters.</source>
          <target state="new">If TextSpan has a zero length,
it refers to a location between two characters.</target>
        </trans-unit>
        <trans-unit id="aa2cc430-becd-4756-ae7e-04e35f3cf4d4" xml:space="preserve">
          <source>Each node has two TextSpan properties: Span and FullSpan.</source>
          <target state="new">Each node has two TextSpan properties: Span and FullSpan.</target>
        </trans-unit>
        <trans-unit id="b680b108-ba77-475e-bbd3-a3c4fcdae840" xml:space="preserve">
          <source>The Span property is the text span from the start of the first token in
the node’s sub-tree to the end of the last token.</source>
          <target state="new">The Span property is the text span from the start of the first token in
the node’s sub-tree to the end of the last token.</target>
        </trans-unit>
        <trans-unit id="16390949-003d-4d34-a831-9a2736fdaa89" xml:space="preserve">
          <source>This span does not
include any leading or trailing trivia.</source>
          <target state="new">This span does not
include any leading or trailing trivia.</target>
        </trans-unit>
        <trans-unit id="428d3607-f040-46d2-a59a-f983ffa48b3f" xml:space="preserve">
          <source>The FullSpan property is the text span that includes the node’s normal
span, plus the span of any leading or trailing trivia.</source>
          <target state="new">The FullSpan property is the text span that includes the node’s normal
span, plus the span of any leading or trailing trivia.</target>
        </trans-unit>
        <trans-unit id="13d91124-0952-4693-8569-1b30192c6a22" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="861d095a-2dbe-40b8-b5d9-5722fb66546b" xml:space="preserve">
          <source>The statement node inside the block has a span indicated by the single
vertical bars (|).</source>
          <target state="new">The statement node inside the block has a span indicated by the single
vertical bars (|).</target>
        </trans-unit>
        <trans-unit id="41c0e1fc-72e0-4e15-aa01-c405b77857f3" xml:space="preserve">
          <source>It includes the characters +throw new Exception(“Not
right.”);+.</source>
          <target state="new">It includes the characters +throw new Exception(“Not
right.”);+.</target>
        </trans-unit>
        <trans-unit id="e3948a4d-ede0-416b-9f24-fcaafc2bb80f" xml:space="preserve">
          <source>The full span is indicated by the double vertical bars (||).</source>
          <target state="new">The full span is indicated by the double vertical bars (||).</target>
        </trans-unit>
        <trans-unit id="35e76bce-c1da-4cfa-a906-af3b31e9b103" xml:space="preserve">
          <source>It includes the same characters as the span and the characters
associated with the leading and trailing trivia.</source>
          <target state="new">It includes the same characters as the span and the characters
associated with the leading and trailing trivia.</target>
        </trans-unit>
        <trans-unit id="d3e11f95-26fa-4308-a210-48e4356dd080" xml:space="preserve">
          <source>Kinds</source>
          <target state="new">Kinds</target>
        </trans-unit>
        <trans-unit id="0822c806-d232-48a7-a817-0ee08153c86a" xml:space="preserve">
          <source>Each node, token, or trivia has a RawKind property, of type
System.Int32, that identifies the exact syntax element represented.</source>
          <target state="new">Each node, token, or trivia has a RawKind property, of type
System.Int32, that identifies the exact syntax element represented.</target>
        </trans-unit>
        <trans-unit id="23b3dfdd-e416-4e2c-944e-be7a72ac2e4e" xml:space="preserve">
          <source>This
value can be cast to a language-specific enumeration; each language, C\#
or VB, has a single SyntaxKind enumeration that lists all the possible
nodes, tokens, and trivia elements in the grammar.</source>
          <target state="new">This
value can be cast to a language-specific enumeration; each language, C\#
or VB, has a single SyntaxKind enumeration that lists all the possible
nodes, tokens, and trivia elements in the grammar.</target>
        </trans-unit>
        <trans-unit id="c1f0bb19-693a-4997-a21e-c5e80189f1e9" xml:space="preserve">
          <source>This conversion can
be done automatically by accessing the CSharpSyntaxKind() or
VisualBasicSyntaxKind() extension methods.</source>
          <target state="new">This conversion can
be done automatically by accessing the CSharpSyntaxKind() or
VisualBasicSyntaxKind() extension methods.</target>
        </trans-unit>
        <trans-unit id="40495d55-d8e8-4ae3-9e46-545da99b4e43" xml:space="preserve">
          <source>The RawKind property allows for easy disambiguation of syntax node types
that share the same node class.</source>
          <target state="new">The RawKind property allows for easy disambiguation of syntax node types
that share the same node class.</target>
        </trans-unit>
        <trans-unit id="054fd868-a45d-4b3a-9a4d-dbdd3d4eb8de" xml:space="preserve">
          <source>For tokens and trivia, this property is
the only way to distinguish one type of element from another.</source>
          <target state="new">For tokens and trivia, this property is
the only way to distinguish one type of element from another.</target>
        </trans-unit>
        <trans-unit id="66d6b61f-2f65-43f0-bbab-23c3d3f3a081" xml:space="preserve">
          <source>For example, a single BinaryExpressionSyntax class has Left,
OperatorToken, and Right as children.</source>
          <target state="new">For example, a single BinaryExpressionSyntax class has Left,
OperatorToken, and Right as children.</target>
        </trans-unit>
        <trans-unit id="80bbfccc-eccd-4222-a655-14b74ab3ee00" xml:space="preserve">
          <source>The Kind property distinguishes
whether it is an AddExpression, SubtractExpression, or
MultiplyExpression kind of syntax node.</source>
          <target state="new">The Kind property distinguishes
whether it is an AddExpression, SubtractExpression, or
MultiplyExpression kind of syntax node.</target>
        </trans-unit>
        <trans-unit id="f0484178-e8aa-4d5a-9bb2-a6ce6b09a7ea" xml:space="preserve">
          <source>Errors</source>
          <target state="new">Errors</target>
        </trans-unit>
        <trans-unit id="af78a810-0162-4720-acc2-b2f5a23d97a1" xml:space="preserve">
          <source>Even when the source text contains syntax errors, a full syntax tree
that is round-trippable to the source is exposed.</source>
          <target state="new">Even when the source text contains syntax errors, a full syntax tree
that is round-trippable to the source is exposed.</target>
        </trans-unit>
        <trans-unit id="e56e2e94-3848-4d94-9b46-01f6c3f5a263" xml:space="preserve">
          <source>When the parser
encounters code that does not conform to the defined syntax of the
language, it uses one of two techniques to create a syntax tree.</source>
          <target state="new">When the parser
encounters code that does not conform to the defined syntax of the
language, it uses one of two techniques to create a syntax tree.</target>
        </trans-unit>
        <trans-unit id="d7572670-9305-499d-9de4-28ef16da3253" xml:space="preserve">
          <source>First, if the parser expects a particular kind of token, but does not
find it, it may insert a missing token into the syntax tree in the
location that the token was expected.</source>
          <target state="new">First, if the parser expects a particular kind of token, but does not
find it, it may insert a missing token into the syntax tree in the
location that the token was expected.</target>
        </trans-unit>
        <trans-unit id="681e1175-efd2-4ad3-a574-57fd547c77c8" xml:space="preserve">
          <source>A missing token represents the
actual token that was expected, but it has an empty span, and its
IsMissing property returns true.</source>
          <target state="new">A missing token represents the
actual token that was expected, but it has an empty span, and its
IsMissing property returns true.</target>
        </trans-unit>
        <trans-unit id="41d12fca-d66c-419b-b49f-f63467819ee4" xml:space="preserve">
          <source>Second, the parser may skip tokens until it finds one where it can
continue parsing.</source>
          <target state="new">Second, the parser may skip tokens until it finds one where it can
continue parsing.</target>
        </trans-unit>
        <trans-unit id="d03fe2b4-3e70-4c02-8466-5b0554f4ef60" xml:space="preserve">
          <source>In this case, the skipped tokens that were skipped are
attached as a trivia node with the kind SkippedTokens.</source>
          <target state="new">In this case, the skipped tokens that were skipped are
attached as a trivia node with the kind SkippedTokens.</target>
        </trans-unit>
        <trans-unit id="6c9e4ea9-c340-4578-ab24-7925e72dbb44" xml:space="preserve">
          <source>Working with Semantics</source>
          <target state="new">Working with Semantics</target>
        </trans-unit>
        <trans-unit id="0e0129df-c656-43bb-b922-724e179a8368" xml:space="preserve">
          <source>Syntax trees represent the lexical and syntactic structure of source
code.</source>
          <target state="new">Syntax trees represent the lexical and syntactic structure of source
code.</target>
        </trans-unit>
        <trans-unit id="9968e49d-cf54-4d00-b5e8-2df81165e95d" xml:space="preserve">
          <source>Although this information alone is enough to describe all the
declarations and logic in the source, it is not enough information to
identify what is being referenced.</source>
          <target state="new">Although this information alone is enough to describe all the
declarations and logic in the source, it is not enough information to
identify what is being referenced.</target>
        </trans-unit>
        <trans-unit id="44f7b938-214c-4fec-b17f-abc084802948" xml:space="preserve">
          <source>For example, many types, fields, methods, and local variables with the
same name may be spread throughout the source.</source>
          <target state="new">For example, many types, fields, methods, and local variables with the
same name may be spread throughout the source.</target>
        </trans-unit>
        <trans-unit id="505a7dbb-37f6-416e-ab0f-689d21c163ac" xml:space="preserve">
          <source>Although each of these is
uniquely different, determining which one an identifier actually refers
to often requires a deep understanding of the language rules.</source>
          <target state="new">Although each of these is
uniquely different, determining which one an identifier actually refers
to often requires a deep understanding of the language rules.</target>
        </trans-unit>
        <trans-unit id="a0936a35-d0ef-4469-840c-33f9ed02a2de" xml:space="preserve">
          <source>There are program elements represented in source code, and programs can
also refer to previously compiled libraries, packaged in assembly files.</source>
          <target state="new">There are program elements represented in source code, and programs can
also refer to previously compiled libraries, packaged in assembly files.</target>
        </trans-unit>
        <trans-unit id="53780f8a-f3eb-44e0-8590-34bdd2efc9c7" xml:space="preserve">
          <source>Although no source code is available for assemblies and therefore no
syntax nodes or trees, programs can still refer to elements inside them.</source>
          <target state="new">Although no source code is available for assemblies and therefore no
syntax nodes or trees, programs can still refer to elements inside them.</target>
        </trans-unit>
        <trans-unit id="ee27e32a-df41-4783-8786-90f759dcc9c1" xml:space="preserve">
          <source>In addition to a syntactic model of the source code, a semantic model
encapsulates the language rules, giving you an easy way to make these
distinctions.</source>
          <target state="new">In addition to a syntactic model of the source code, a semantic model
encapsulates the language rules, giving you an easy way to make these
distinctions.</target>
        </trans-unit>
        <trans-unit id="4e0bc098-6d17-4dae-9352-0e70aba27f7c" xml:space="preserve">
          <source>Compilation</source>
          <target state="new">Compilation</target>
        </trans-unit>
        <trans-unit id="31540517-ed78-450d-b476-bd27b8211a75" xml:space="preserve">
          <source>A compilation is a representation of everything needed to compile a C\#
or Visual Basic program, which includes all the assembly references,
compiler options, and source files.</source>
          <target state="new">A compilation is a representation of everything needed to compile a C\#
or Visual Basic program, which includes all the assembly references,
compiler options, and source files.</target>
        </trans-unit>
        <trans-unit id="5a70e881-bf3c-483e-8a68-fd896e3a95ea" xml:space="preserve">
          <source>Because all this information is in one place, the elements contained in
the source code can be described in more detail.</source>
          <target state="new">Because all this information is in one place, the elements contained in
the source code can be described in more detail.</target>
        </trans-unit>
        <trans-unit id="b5e31bb5-66fe-441d-b84c-72867bce8880" xml:space="preserve">
          <source>The compilation
represents each declared type, member, or variable as a symbol.</source>
          <target state="new">The compilation
represents each declared type, member, or variable as a symbol.</target>
        </trans-unit>
        <trans-unit id="a5675504-ceb8-4479-b94a-d7baa6d047fc" xml:space="preserve">
          <source>The
compilation contains a variety of methods that help you find and relate
the symbols that have either been declared in the source code or
imported as metadata from an assembly.</source>
          <target state="new">The
compilation contains a variety of methods that help you find and relate
the symbols that have either been declared in the source code or
imported as metadata from an assembly.</target>
        </trans-unit>
        <trans-unit id="f3064c01-d936-4012-9e5c-1a5499f04ca3" xml:space="preserve">
          <source>Similar to syntax trees, compilations are immutable.</source>
          <target state="new">Similar to syntax trees, compilations are immutable.</target>
        </trans-unit>
        <trans-unit id="03d657e2-8cc1-4ad5-b08e-6db778adc416" xml:space="preserve">
          <source>After you create a
compilation, it cannot be changed by you or anyone else you might be
sharing it with.</source>
          <target state="new">After you create a
compilation, it cannot be changed by you or anyone else you might be
sharing it with.</target>
        </trans-unit>
        <trans-unit id="56fa4781-4847-4699-8130-33ad5b5e60ad" xml:space="preserve">
          <source>However, you can create a new compilation from an
existing compilation, specifying a change as you do so.</source>
          <target state="new">However, you can create a new compilation from an
existing compilation, specifying a change as you do so.</target>
        </trans-unit>
        <trans-unit id="e9d26e57-d648-4e08-9174-3a2b30a1ddb1" xml:space="preserve">
          <source>For example, you
might create a compilation that is the same in every way as an existing
compilation, except it may include an additional source file or assembly
reference.</source>
          <target state="new">For example, you
might create a compilation that is the same in every way as an existing
compilation, except it may include an additional source file or assembly
reference.</target>
        </trans-unit>
        <trans-unit id="fcebe797-78ef-4b17-8685-c6eb924a41ef" xml:space="preserve">
          <source>Symbols</source>
          <target state="new">Symbols</target>
        </trans-unit>
        <trans-unit id="e009107b-f431-41ef-86b7-39c71af67efc" xml:space="preserve">
          <source>A symbol represents a distinct element declared by the source code or
imported from an assembly as metadata.</source>
          <target state="new">A symbol represents a distinct element declared by the source code or
imported from an assembly as metadata.</target>
        </trans-unit>
        <trans-unit id="44f3ff3d-27e5-4c8c-9a0a-175f7587008e" xml:space="preserve">
          <source>Every namespace, type, method,
property, field, event, parameter, or local variable is represented by a
symbol.</source>
          <target state="new">Every namespace, type, method,
property, field, event, parameter, or local variable is represented by a
symbol.</target>
        </trans-unit>
        <trans-unit id="b8de8107-5659-4710-8a19-dd8640bed297" xml:space="preserve">
          <source>A variety of methods and properties on the Compilation type help you
find symbols.</source>
          <target state="new">A variety of methods and properties on the Compilation type help you
find symbols.</target>
        </trans-unit>
        <trans-unit id="38083827-d6f6-4ca2-9c05-1e159c23c262" xml:space="preserve">
          <source>For example, you can find a symbol for a declared type by
its common metadata name.</source>
          <target state="new">For example, you can find a symbol for a declared type by
its common metadata name.</target>
        </trans-unit>
        <trans-unit id="bffed9c5-9b4d-4adc-94b8-49e9e93d54ca" xml:space="preserve">
          <source>You can also access the entire symbol table as
a tree of symbols rooted by the global namespace.</source>
          <target state="new">You can also access the entire symbol table as
a tree of symbols rooted by the global namespace.</target>
        </trans-unit>
        <trans-unit id="2c95f291-8a10-439b-a574-6b73a014336a" xml:space="preserve">
          <source>Symbols also contain additional information that the compiler determined
from the source or metadata, such as other referenced symbols.</source>
          <target state="new">Symbols also contain additional information that the compiler determined
from the source or metadata, such as other referenced symbols.</target>
        </trans-unit>
        <trans-unit id="b35fe5a9-79b6-40f5-aee6-5a335d3c1635" xml:space="preserve">
          <source>Each kind
of symbol is represented by a separate interface derived from ISymbol,
each with its own methods and properties detailing the information the
compiler has gathered.</source>
          <target state="new">Each kind
of symbol is represented by a separate interface derived from ISymbol,
each with its own methods and properties detailing the information the
compiler has gathered.</target>
        </trans-unit>
        <trans-unit id="1184df33-3790-4f7d-afd5-8b52c37a6871" xml:space="preserve">
          <source>Many of these properties directly reference other
symbols.</source>
          <target state="new">Many of these properties directly reference other
symbols.</target>
        </trans-unit>
        <trans-unit id="44917468-578a-447a-a38e-4fa75af893b9" xml:space="preserve">
          <source>For example, the ReturnType property of the IMethodSymbol class
tells you the actual type symbol that the method declaration referenced.</source>
          <target state="new">For example, the ReturnType property of the IMethodSymbol class
tells you the actual type symbol that the method declaration referenced.</target>
        </trans-unit>
        <trans-unit id="b02648fc-93cb-471c-ba5c-e076a7218243" xml:space="preserve">
          <source>Symbols present a common representation of namespaces, types, and
members, between source code and metadata.</source>
          <target state="new">Symbols present a common representation of namespaces, types, and
members, between source code and metadata.</target>
        </trans-unit>
        <trans-unit id="56ec059e-df87-4240-a206-c6646fed4ae1" xml:space="preserve">
          <source>For example, a method that
was declared in source code and a method that was imported from metadata
are both represented by an IMethodSymbol with the same properties.</source>
          <target state="new">For example, a method that
was declared in source code and a method that was imported from metadata
are both represented by an IMethodSymbol with the same properties.</target>
        </trans-unit>
        <trans-unit id="59a3cad3-0bd1-484a-8e61-142fae94823e" xml:space="preserve">
          <source>Symbols are similar in concept to the CLR type system as represented by
the System.Reflection API, yet they are richer in that they model more
than just types.</source>
          <target state="new">Symbols are similar in concept to the CLR type system as represented by
the System.Reflection API, yet they are richer in that they model more
than just types.</target>
        </trans-unit>
        <trans-unit id="13cbf23f-3ccc-48b5-88b9-cad8c1c3c37f" xml:space="preserve">
          <source>Namespaces, local variables, and labels are all
symbols.</source>
          <target state="new">Namespaces, local variables, and labels are all
symbols.</target>
        </trans-unit>
        <trans-unit id="92eb6591-049b-4773-a749-49d49b15f9e6" xml:space="preserve">
          <source>In addition, symbols are a representation of language concepts,
not CLR concepts.</source>
          <target state="new">In addition, symbols are a representation of language concepts,
not CLR concepts.</target>
        </trans-unit>
        <trans-unit id="fda1af3a-1662-45ce-ab93-15ac0895d1f2" xml:space="preserve">
          <source>There is a lot of overlap, but there are many
meaningful distinctions as well.</source>
          <target state="new">There is a lot of overlap, but there are many
meaningful distinctions as well.</target>
        </trans-unit>
        <trans-unit id="b87d76e3-ea36-40dd-a135-4dade5874a7c" xml:space="preserve">
          <source>For instance, an iterator method in C\#
or Visual Basic is a single symbol.</source>
          <target state="new">For instance, an iterator method in C\#
or Visual Basic is a single symbol.</target>
        </trans-unit>
        <trans-unit id="b0a6b299-441c-4854-85f1-b99e0eddc735" xml:space="preserve">
          <source>However, when the iterator method is
translated to CLR metadata, it is a type and multiple methods.</source>
          <target state="new">However, when the iterator method is
translated to CLR metadata, it is a type and multiple methods.</target>
        </trans-unit>
        <trans-unit id="c5009a6f-06f1-49d1-876b-261974f46fb4" xml:space="preserve">
          <source>Semantic Model</source>
          <target state="new">Semantic Model</target>
        </trans-unit>
        <trans-unit id="39645691-1f38-4c4a-b43a-006d4f9fbab3" xml:space="preserve">
          <source>A semantic model represents all the semantic information for a single
source file.</source>
          <target state="new">A semantic model represents all the semantic information for a single
source file.</target>
        </trans-unit>
        <trans-unit id="ae0f3b6d-cec6-486a-b057-c74f23c4520b" xml:space="preserve">
          <source>You can use it to discover the following:</source>
          <target state="new">You can use it to discover the following:</target>
        </trans-unit>
        <trans-unit id="36ff4417-eab6-4350-bba1-031a22243bae" xml:space="preserve">
          <source>The symbols referenced at a specific location in source.</source>
          <target state="new">The symbols referenced at a specific location in source.</target>
        </trans-unit>
        <trans-unit id="ef92999c-c19f-477f-a026-683b5821a768" xml:space="preserve">
          <source>The resultant type of any expression.</source>
          <target state="new">The resultant type of any expression.</target>
        </trans-unit>
        <trans-unit id="b23dbc7c-2303-4131-9291-d55fbcb7576c" xml:space="preserve">
          <source>All diagnostics, which are errors and warnings.</source>
          <target state="new">All diagnostics, which are errors and warnings.</target>
        </trans-unit>
        <trans-unit id="7c50c643-6b43-4b6b-b69c-17914ca37051" xml:space="preserve">
          <source>How variables flow in and out of regions of source.</source>
          <target state="new">How variables flow in and out of regions of source.</target>
        </trans-unit>
        <trans-unit id="19533f7a-aed9-4ccb-9ce6-bb94ede94e6c" xml:space="preserve">
          <source>The answers to more speculative questions.</source>
          <target state="new">The answers to more speculative questions.</target>
        </trans-unit>
        <trans-unit id="9ed770c5-2b73-4a65-a0b6-3fe0be313bd2" xml:space="preserve">
          <source>Working with a Workspace</source>
          <target state="new">Working with a Workspace</target>
        </trans-unit>
        <trans-unit id="3e36fb4b-d5ac-406e-930a-1e2c721483a6" xml:space="preserve">
          <source>The Workspaces layer is the starting point for doing code analysis and
refactoring over entire solutions.</source>
          <target state="new">The Workspaces layer is the starting point for doing code analysis and
refactoring over entire solutions.</target>
        </trans-unit>
        <trans-unit id="3dd5c15c-75c9-43e8-8bcd-610255db8539" xml:space="preserve">
          <source>Within this layer, the Workspace API
assists you in organizing all the information about the projects in a
solution into single object model, offering you direct access to
compiler layer object models like source text, syntax trees, semantic
models and compilations without needing to parse files, configure
options or manage inter-project dependencies.</source>
          <target state="new">Within this layer, the Workspace API
assists you in organizing all the information about the projects in a
solution into single object model, offering you direct access to
compiler layer object models like source text, syntax trees, semantic
models and compilations without needing to parse files, configure
options or manage inter-project dependencies.</target>
        </trans-unit>
        <trans-unit id="634ddaa9-6bfb-48a8-a40b-38f0f1757df5" xml:space="preserve">
          <source>Host environments, like an IDE, provide a workspace for you
corresponding to the open solution.</source>
          <target state="new">Host environments, like an IDE, provide a workspace for you
corresponding to the open solution.</target>
        </trans-unit>
        <trans-unit id="9e535903-2656-41a0-aeab-2dbaf949d75f" xml:space="preserve">
          <source>It is also possible to use this
model outside of an IDE by simply loading a solution file.</source>
          <target state="new">It is also possible to use this
model outside of an IDE by simply loading a solution file.</target>
        </trans-unit>
        <trans-unit id="2894c56a-3856-4731-8188-c40ef2ecc4c4" xml:space="preserve">
          <source>Workspace</source>
          <target state="new">Workspace</target>
        </trans-unit>
        <trans-unit id="fa932173-3fb9-49c1-add5-c833b95f6ecc" xml:space="preserve">
          <source>A workspace is an active representation of your solution as a collection
of projects, each with a collection of documents.</source>
          <target state="new">A workspace is an active representation of your solution as a collection
of projects, each with a collection of documents.</target>
        </trans-unit>
        <trans-unit id="007b65d8-6a5b-4e2d-8072-b8e702521baa" xml:space="preserve">
          <source>A workspace is
typically tied to a host environment that is constantly changing as a
user types or manipulates properties.</source>
          <target state="new">A workspace is
typically tied to a host environment that is constantly changing as a
user types or manipulates properties.</target>
        </trans-unit>
        <trans-unit id="4659e0e3-79a2-4be7-ae22-711148db514e" xml:space="preserve">
          <source>The workspace provides access to the current model of the solution.</source>
          <target state="new">The workspace provides access to the current model of the solution.</target>
        </trans-unit>
        <trans-unit id="8097468e-5c5d-4a70-9bf7-850fb8ca7b94" xml:space="preserve">
          <source>When
a change in the host environment occurs, the workspace fires
corresponding events, and the CurrentSolution property is updated.</source>
          <target state="new">When
a change in the host environment occurs, the workspace fires
corresponding events, and the CurrentSolution property is updated.</target>
        </trans-unit>
        <trans-unit id="f7c2d9ed-bcda-456f-bc22-455fbaeda9bc" xml:space="preserve">
          <source>For
example, when the user types in a text editor corresponding to one of
the source documents, the workspace uses an event to signal that the
overall model of the solution has changed and which document was
modified.</source>
          <target state="new">For
example, when the user types in a text editor corresponding to one of
the source documents, the workspace uses an event to signal that the
overall model of the solution has changed and which document was
modified.</target>
        </trans-unit>
        <trans-unit id="a2100161-efd6-4b47-9d1c-a16b6b82a22c" xml:space="preserve">
          <source>You can then react to those changes by analyzing the new model
for correctness, highlighting areas of significance, or by making a
suggestion for a code change.</source>
          <target state="new">You can then react to those changes by analyzing the new model
for correctness, highlighting areas of significance, or by making a
suggestion for a code change.</target>
        </trans-unit>
        <trans-unit id="e159f051-7959-4b49-8ff5-95e6e650b9bf" xml:space="preserve">
          <source>You can also create stand-alone workspaces that are disconnected from
the host environment or used in an application that has no host
environment.</source>
          <target state="new">You can also create stand-alone workspaces that are disconnected from
the host environment or used in an application that has no host
environment.</target>
        </trans-unit>
        <trans-unit id="bb48b569-6623-4992-afc4-f82ec4831436" xml:space="preserve">
          <source>Solutions, Projects, Documents</source>
          <target state="new">Solutions, Projects, Documents</target>
        </trans-unit>
        <trans-unit id="4df12f44-9027-4c0b-aed5-ba3ef637cad4" xml:space="preserve">
          <source>Although a workspace may change every time a key is pressed, you can
work with the model of the solution in isolation.</source>
          <target state="new">Although a workspace may change every time a key is pressed, you can
work with the model of the solution in isolation.</target>
        </trans-unit>
        <trans-unit id="415a2f3d-c0cb-4a33-b178-bcf39985f575" xml:space="preserve">
          <source>A solution is an immutable model of the projects and documents.</source>
          <target state="new">A solution is an immutable model of the projects and documents.</target>
        </trans-unit>
        <trans-unit id="805552e4-8f3a-408e-94eb-f7900a59b4d2" xml:space="preserve">
          <source>This
means that the model can be shared without locking or duplication.</source>
          <target state="new">This
means that the model can be shared without locking or duplication.</target>
        </trans-unit>
        <trans-unit id="c1f679f6-e14c-4b8d-8e13-eccedecfcc0a" xml:space="preserve">
          <source>After
you obtain a solution instance from the Workspace’s CurrentSolution
property, that instance will never change.</source>
          <target state="new">After
you obtain a solution instance from the Workspace’s CurrentSolution
property, that instance will never change.</target>
        </trans-unit>
        <trans-unit id="2031fe87-3616-47f9-9866-bf7943c28648" xml:space="preserve">
          <source>However, like with syntax
trees and compilations, you can modify solutions by constructing new
instances based on existing solutions and specific changes.</source>
          <target state="new">However, like with syntax
trees and compilations, you can modify solutions by constructing new
instances based on existing solutions and specific changes.</target>
        </trans-unit>
        <trans-unit id="dfb11283-a678-40f1-8377-3f9e48c10a71" xml:space="preserve">
          <source>To get the
workspace to reflect your changes, you must explicitly apply the changed
solution back to the workspace.</source>
          <target state="new">To get the
workspace to reflect your changes, you must explicitly apply the changed
solution back to the workspace.</target>
        </trans-unit>
        <trans-unit id="2d219870-edda-434c-aafc-a01717daf3be" xml:space="preserve">
          <source>A project is a part of the overall immutable solution model.</source>
          <target state="new">A project is a part of the overall immutable solution model.</target>
        </trans-unit>
        <trans-unit id="58fd373c-ff8d-4413-bef8-3c68f74e83b7" xml:space="preserve">
          <source>It
represents all the source code documents, parse and compilation options,
and both assembly and project-to-project references.</source>
          <target state="new">It
represents all the source code documents, parse and compilation options,
and both assembly and project-to-project references.</target>
        </trans-unit>
        <trans-unit id="31ab9e4b-6dd0-4e19-933b-1cbf135d7823" xml:space="preserve">
          <source>From a project, you
can access the corresponding compilation without needing to determine
project dependencies or parse any source files.</source>
          <target state="new">From a project, you
can access the corresponding compilation without needing to determine
project dependencies or parse any source files.</target>
        </trans-unit>
        <trans-unit id="a579c8e8-f313-441f-b338-f91a4893b0a2" xml:space="preserve">
          <source>A document is also a part of the overall immutable solution model.</source>
          <target state="new">A document is also a part of the overall immutable solution model.</target>
        </trans-unit>
        <trans-unit id="e86ab4cb-bb80-4377-99c2-ae541f004ff2" xml:space="preserve">
          <source>A
document represents a single source file from which you can access the
text of the file, the syntax tree, and the semantic model.</source>
          <target state="new">A
document represents a single source file from which you can access the
text of the file, the syntax tree, and the semantic model.</target>
        </trans-unit>
        <trans-unit id="28bf7576-ea0e-4cbb-badf-2171574c550e" xml:space="preserve">
          <source>The following diagram is a representation of how the Workspace relates
to the host environment, tools, and how edits are made.</source>
          <target state="new">The following diagram is a representation of how the Workspace relates
to the host environment, tools, and how edits are made.</target>
        </trans-unit>
        <trans-unit id="26bddc1b-3daf-48b6-9238-aad624c22878" xml:space="preserve">
          <source><bpt id="7c75c65e-33b1-43d4-869e-0cdcfcb662aa">&lt;linkText&gt;</bpt>image<ept id="7c75c65e-33b1-43d4-869e-0cdcfcb662aa">&lt;/linkText&gt;</ept></source>
          <target state="new"><bpt id="7c75c65e-33b1-43d4-869e-0cdcfcb662aa">&lt;linkText&gt;</bpt>image<ept id="7c75c65e-33b1-43d4-869e-0cdcfcb662aa">&lt;/linkText&gt;</ept></target>
        </trans-unit>
        <trans-unit id="fc533f22-ccb9-4c1e-a096-2287b72b16e2" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="16759f07-a689-47b4-b014-b232d8e2a460" xml:space="preserve">
          <source>The .NET Compiler Platform (“Roslyn”) exposes a set of Compiler APIs and
Workspaces APIs that provides rich information about your source code
and that has full fidelity with the C\# and Visual Basic languages.</source>
          <target state="new">The .NET Compiler Platform (“Roslyn”) exposes a set of Compiler APIs and
Workspaces APIs that provides rich information about your source code
and that has full fidelity with the C\# and Visual Basic languages.</target>
        </trans-unit>
        <trans-unit id="0c720b21-2668-4fa8-a3dc-a8f9278eefe5" xml:space="preserve">
          <source>The
transition to compilers as a platform dramatically lowers the barrier to
entry for creating code focused tools and applications.</source>
          <target state="new">The
transition to compilers as a platform dramatically lowers the barrier to
entry for creating code focused tools and applications.</target>
        </trans-unit>
        <trans-unit id="2ce659d1-a4ad-4650-8dfa-2a8decbe8c38" xml:space="preserve">
          <source>It creates many
opportunities for innovation in areas such as meta-programming, code
generation and transformation, interactive use of the C\# and VB
languages, and embedding of C\# and VB in domain specific languages.</source>
          <target state="new">It creates many
opportunities for innovation in areas such as meta-programming, code
generation and transformation, interactive use of the C\# and VB
languages, and embedding of C\# and VB in domain specific languages.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>