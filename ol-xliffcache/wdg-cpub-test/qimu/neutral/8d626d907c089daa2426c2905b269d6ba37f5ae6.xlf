<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\threading-async\call-asynchronous-apis-in-csharp-or-visual-basic.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d626d907c089daa2426c2905b269d6ba37f5ae6</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Call asynchronous APIs in C# or Visual Basic</source>
          <target state="new">Call asynchronous APIs in C# or Visual Basic</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</source>
          <target state="new">The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Call asynchronous APIs in C# or Visual Basic</source>
          <target state="new">Call asynchronous APIs in C# or Visual Basic</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</source>
          <target state="new">The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.</source>
          <target state="new">This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Asynchronous APIs keep your app from waiting for large operations to complete before continuing execution.</source>
          <target state="new">Asynchronous APIs keep your app from waiting for large operations to complete before continuing execution.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, an app that downloads info from the Internet might spend several seconds waiting for the info to arrive.</source>
          <target state="new">For example, an app that downloads info from the Internet might spend several seconds waiting for the info to arrive.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you use a synchronous method to retrieve the info, the app is blocked until the method returns.</source>
          <target state="new">If you use a synchronous method to retrieve the info, the app is blocked until the method returns.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The app won't respond to user interaction and because it seems non-responsive, the user might become frustrated.</source>
          <target state="new">The app won't respond to user interaction and because it seems non-responsive, the user might become frustrated.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By providing asynchronous APIs, the UWP helps to ensure that your app stays responsive to the user when it's performing long operations.</source>
          <target state="new">By providing asynchronous APIs, the UWP helps to ensure that your app stays responsive to the user when it's performing long operations.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Most of the asynchronous APIs in the UWP don't have synchronous counterparts, so you need to be sure to understand how to use the asynchronous APIs with C# or Visual Basic in your Universal Windows Platform (UWP) app.</source>
          <target state="new">Most of the asynchronous APIs in the UWP don't have synchronous counterparts, so you need to be sure to understand how to use the asynchronous APIs with C# or Visual Basic in your Universal Windows Platform (UWP) app.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Here we show how to call asynchronous APIs of the UWP.</source>
          <target state="new">Here we show how to call asynchronous APIs of the UWP.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Using asynchronous APIs</source>
          <target state="new">Using asynchronous APIs</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By convention, asynchronous methods are given names that end in "Async".</source>
          <target state="new">By convention, asynchronous methods are given names that end in "Async".</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You typically call asynchronous APIs in response to a user's action, such as when the user clicks a button.</source>
          <target state="new">You typically call asynchronous APIs in response to a user's action, such as when the user clicks a button.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Calling an asynchronous method in an event handler is one of the simplest ways of using asynchronous APIs.</source>
          <target state="new">Calling an asynchronous method in an event handler is one of the simplest ways of using asynchronous APIs.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Here we use the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator as an example.</source>
          <target state="new">Here we use the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator as an example.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Suppose that you have an app that lists the titles of blog posts from a certain location.</source>
          <target state="new">Suppose that you have an app that lists the titles of blog posts from a certain location.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The app has a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> that the user clicks to get the titles.</source>
          <target state="new">The app has a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> that the user clicks to get the titles.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The titles are displayed in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept>.</source>
          <target state="new">The titles are displayed in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the user clicks the button, it is important that the app remains responsive while it waits for the info from the blog's website.</source>
          <target state="new">When the user clicks the button, it is important that the app remains responsive while it waits for the info from the blog's website.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To ensure this responsiveness, the UWP provides an asynchronous method, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SyndicationClient.RetrieveFeedAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, to download the feed.</source>
          <target state="new">To ensure this responsiveness, the UWP provides an asynchronous method, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SyndicationClient.RetrieveFeedAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, to download the feed.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The example here gets the lists of blog posts from a blog by calling the asynchronous method, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SyndicationClient.RetrieveFeedAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, and awaiting the result.</source>
          <target state="new">The example here gets the lists of blog posts from a blog by calling the asynchronous method, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SyndicationClient.RetrieveFeedAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, and awaiting the result.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets" data-resources="OutlookServices.Calendar"] <bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Main<ept id="p2">](./AsyncSnippets/csharp/MainPage.xaml.cs#SnippetDownloadRSS)</ept><ept id="p1">]</ept><ph id="ph1">
</ph><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Main<ept id="p4">](./AsyncSnippets/vbnet/MainPage.xaml.vb#SnippetDownloadRSS)</ept><ept id="p3">]</ept></source>
          <target state="new">[!div class="tabbedCodeSnippets" data-resources="OutlookServices.Calendar"] <bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Main<ept id="p2">](./AsyncSnippets/csharp/MainPage.xaml.cs#SnippetDownloadRSS)</ept><ept id="p1">]</ept><ph id="ph1">
</ph><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Main<ept id="p4">](./AsyncSnippets/vbnet/MainPage.xaml.vb#SnippetDownloadRSS)</ept><ept id="p3">]</ept></target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>There are a couple of important things about this example.</source>
          <target state="new">There are a couple of important things about this example.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>First, the line, <ph id="ph1">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph> uses the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator with the call to the asynchronous method, <bpt id="p2">[</bpt><bpt id="p3">**</bpt>RetrieveFeedAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>.</source>
          <target state="new">First, the line, <ph id="ph1">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph> uses the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator with the call to the asynchronous method, <bpt id="p2">[</bpt><bpt id="p3">**</bpt>RetrieveFeedAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can think of the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator as telling the compiler that you are calling an asynchronous method, which causes the compiler to do some extra work so you don’t have to.</source>
          <target state="new">You can think of the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator as telling the compiler that you are calling an asynchronous method, which causes the compiler to do some extra work so you don’t have to.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Next, the declaration of the event handler includes the keyword <bpt id="p1">**</bpt>async<ept id="p1">**</ept>.</source>
          <target state="new">Next, the declaration of the event handler includes the keyword <bpt id="p1">**</bpt>async<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You must include this keyword in the method declaration of any method in which you use the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator.</source>
          <target state="new">You must include this keyword in the method declaration of any method in which you use the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this topic, we won't go into a lot of the details of what the compiler does with the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, but let's examine what your app does so that it is asynchronous and responsive.</source>
          <target state="new">In this topic, we won't go into a lot of the details of what the compiler does with the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, but let's examine what your app does so that it is asynchronous and responsive.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Consider what happens when you use synchronous code.</source>
          <target state="new">Consider what happens when you use synchronous code.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, suppose that there is a method called <ph id="ph1">`SyndicationClient.RetrieveFeed`</ph> that is synchronous.</source>
          <target state="new">For example, suppose that there is a method called <ph id="ph1">`SyndicationClient.RetrieveFeed`</ph> that is synchronous.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(There is no such method, but imagine that there is.) If your app included the line <ph id="ph1">`SyndicationFeed feed = client.RetrieveFeed(feedUri)`</ph>, instead of <ph id="ph2">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph>, execution of the app would stop until the return value of <ph id="ph3">`RetrieveFeed`</ph> is available.</source>
          <target state="new">(There is no such method, but imagine that there is.) If your app included the line <ph id="ph1">`SyndicationFeed feed = client.RetrieveFeed(feedUri)`</ph>, instead of <ph id="ph2">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph>, execution of the app would stop until the return value of <ph id="ph3">`RetrieveFeed`</ph> is available.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>And while your app waits for the method to complete, it can't respond to any other events, such another <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Click<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227737)</ept> event.</source>
          <target state="new">And while your app waits for the method to complete, it can't respond to any other events, such another <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Click<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227737)</ept> event.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>That is, your app would be blocked until <ph id="ph1">`RetrieveFeed`</ph> returns.</source>
          <target state="new">That is, your app would be blocked until <ph id="ph1">`RetrieveFeed`</ph> returns.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>But if you call <ph id="ph1">`client.RetrieveFeedAsync`</ph>, the method initiates the retrieval and immediately returns.</source>
          <target state="new">But if you call <ph id="ph1">`client.RetrieveFeedAsync`</ph>, the method initiates the retrieval and immediately returns.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you use <bpt id="p1">**</bpt>await<ept id="p1">**</ept> with <bpt id="p2">[</bpt><bpt id="p3">**</bpt>RetrieveFeedAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, the app temporarily exits the event handler.</source>
          <target state="new">When you use <bpt id="p1">**</bpt>await<ept id="p1">**</ept> with <bpt id="p2">[</bpt><bpt id="p3">**</bpt>RetrieveFeedAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, the app temporarily exits the event handler.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Then it can process other events while <bpt id="p1">**</bpt>RetrieveFeedAsync<ept id="p1">**</ept> executes asynchronously.</source>
          <target state="new">Then it can process other events while <bpt id="p1">**</bpt>RetrieveFeedAsync<ept id="p1">**</ept> executes asynchronously.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This keeps the app responsive to the user.</source>
          <target state="new">This keeps the app responsive to the user.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>RetrieveFeedAsync<ept id="p1">**</ept> completes and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SyndicationFeed<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR243485)</ept> is available, the app essentially reenters the event handler where it left off, after <ph id="ph1">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph>, and finishes the rest of the method.</source>
          <target state="new">When <bpt id="p1">**</bpt>RetrieveFeedAsync<ept id="p1">**</ept> completes and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SyndicationFeed<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR243485)</ept> is available, the app essentially reenters the event handler where it left off, after <ph id="ph1">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph>, and finishes the rest of the method.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The nice thing about using the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator is that the code doesn't look much different from how the code looks if you used the imaginary <ph id="ph1">`RetrieveFeed`</ph> method.</source>
          <target state="new">The nice thing about using the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator is that the code doesn't look much different from how the code looks if you used the imaginary <ph id="ph1">`RetrieveFeed`</ph> method.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>There are ways to write asynchronous code in C# or Visual Basic without the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, but the resulting code tends to emphasize the mechanics of executing asynchronously.</source>
          <target state="new">There are ways to write asynchronous code in C# or Visual Basic without the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, but the resulting code tends to emphasize the mechanics of executing asynchronously.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This makes asynchronous code hard to write, hard to understand, and hard to maintain.</source>
          <target state="new">This makes asynchronous code hard to write, hard to understand, and hard to maintain.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>By using the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, you get the benefits of an asynchronous app without making your code complex.</source>
          <target state="new">By using the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, you get the benefits of an asynchronous app without making your code complex.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Return types and results of asynchronous APIs</source>
          <target state="new">Return types and results of asynchronous APIs</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you followed the link to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RetrieveFeedAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, you might have noticed that the return type of <bpt id="p3">**</bpt>RetrieveFeedAsync<ept id="p3">**</ept> is not a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SyndicationFeed<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR243485)</ept>.</source>
          <target state="new">If you followed the link to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RetrieveFeedAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, you might have noticed that the return type of <bpt id="p3">**</bpt>RetrieveFeedAsync<ept id="p3">**</ept> is not a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SyndicationFeed<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR243485)</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Instead, the return type is <ph id="ph1">`IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;`</ph>.</source>
          <target state="new">Instead, the return type is <ph id="ph1">`IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Viewed from the raw syntax, an asynchronous API returns an object that contains the result within it.</source>
          <target state="new">Viewed from the raw syntax, an asynchronous API returns an object that contains the result within it.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>While it is common, and sometimes useful, to think of an asynchronous method as being awaitable, the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator actually operates on the method’s return value, not on the method.</source>
          <target state="new">While it is common, and sometimes useful, to think of an asynchronous method as being awaitable, the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator actually operates on the method’s return value, not on the method.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you apply the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, what you get back is the result of calling <bpt id="p2">**</bpt>GetResult<ept id="p2">**</ept> on the object returned by the method.</source>
          <target state="new">When you apply the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, what you get back is the result of calling <bpt id="p2">**</bpt>GetResult<ept id="p2">**</ept> on the object returned by the method.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the example, the <bpt id="p1">**</bpt>SyndicationFeed<ept id="p1">**</ept> is the result of <bpt id="p2">**</bpt>RetrieveFeedAsync.GetResult()<ept id="p2">**</ept>.</source>
          <target state="new">In the example, the <bpt id="p1">**</bpt>SyndicationFeed<ept id="p1">**</ept> is the result of <bpt id="p2">**</bpt>RetrieveFeedAsync.GetResult()<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you use an asynchronous method, you can examine the signature to see what you’ll get back after awaiting the value returned from the method.</source>
          <target state="new">When you use an asynchronous method, you can examine the signature to see what you’ll get back after awaiting the value returned from the method.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>All asynchronous APIs in the UWP return one of the following types:</source>
          <target state="new">All asynchronous APIs in the UWP return one of the following types:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>IAsyncOperation<ph id="ph1">&amp;lt;</ph>TResult</source>
          <target state="new">IAsyncOperation<ph id="ph1">&amp;lt;</ph>TResult</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>TResult, TProgress</source>
          <target state="new">IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>TResult, TProgress</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>IAsyncAction</source>
          <target state="new">IAsyncAction</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>IAsyncActionWithProgress<ph id="ph1">&amp;lt;</ph>TProgress</source>
          <target state="new">IAsyncActionWithProgress<ph id="ph1">&amp;lt;</ph>TProgress</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The result type of an asynchronous method is the same as the <ph id="ph1">`      TResult`</ph> type parameter.</source>
          <target state="new">The result type of an asynchronous method is the same as the <ph id="ph1">`      TResult`</ph> type parameter.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Types without a <ph id="ph1">`TResult`</ph> don't have a result.</source>
          <target state="new">Types without a <ph id="ph1">`TResult`</ph> don't have a result.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can think of the result as being <bpt id="p1">**</bpt>void<ept id="p1">**</ept>.</source>
          <target state="new">You can think of the result as being <bpt id="p1">**</bpt>void<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In Visual Basic, a <bpt id="p1">[</bpt>Sub<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/831f9wka.aspx)</ept> procedure is equivalent to a method with a <bpt id="p2">**</bpt>void<ept id="p2">**</ept> return type.</source>
          <target state="new">In Visual Basic, a <bpt id="p1">[</bpt>Sub<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/831f9wka.aspx)</ept> procedure is equivalent to a method with a <bpt id="p2">**</bpt>void<ept id="p2">**</ept> return type.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The table here gives examples of asynchronous methods and lists the return type and result type of each.</source>
          <target state="new">The table here gives examples of asynchronous methods and lists the return type and result type of each.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Asynchronous method</source>
          <target state="new">Asynchronous method</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Return type</source>
          <target state="new">Return type</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Result type</source>
          <target state="new">Result type</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>SyndicationClient.RetrieveFeedAsync</source>
          <target state="new">SyndicationClient.RetrieveFeedAsync</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>SyndicationFeed, RetrievalProgress</source>
          <target state="new">IAsyncOperationWithProgress<ph id="ph1">&amp;lt;</ph>SyndicationFeed, RetrievalProgress</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>SyndicationFeed</source>
          <target state="new">SyndicationFeed</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>FileOpenPicker.PickSingleFileAsync</source>
          <target state="new">FileOpenPicker.PickSingleFileAsync</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>IAsyncOperation<ph id="ph1">&amp;lt;</ph>StorageFile</source>
          <target state="new">IAsyncOperation<ph id="ph1">&amp;lt;</ph>StorageFile</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>StorageFile</source>
          <target state="new">StorageFile</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>XmlDocument.SaveToFileAsync</source>
          <target state="new">XmlDocument.SaveToFileAsync</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>IAsyncAction</source>
          <target state="new">IAsyncAction</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>void</source>
          <target state="new">void</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>InkStrokeContainer.LoadAsync</source>
          <target state="new">InkStrokeContainer.LoadAsync</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>IAsyncActionWithProgress<ph id="ph1">&amp;lt;</ph>UInt64</source>
          <target state="new">IAsyncActionWithProgress<ph id="ph1">&amp;lt;</ph>UInt64</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>void</source>
          <target state="new">void</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>DataReader.LoadAsync</source>
          <target state="new">DataReader.LoadAsync</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataReaderLoadOperation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208120)</ept>, a custom results class that implements <bpt id="p3">**</bpt>IAsyncOperation<ph id="ph1">&amp;lt;</ph>UInt32<ph id="ph2">&amp;gt;</ph><ept id="p3">**</ept></source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataReaderLoadOperation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208120)</ept>, a custom results class that implements <bpt id="p3">**</bpt>IAsyncOperation<ph id="ph1">&amp;lt;</ph>UInt32<ph id="ph2">&amp;gt;</ph><ept id="p3">**</ept></target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>UInt32</source>
          <target state="new">UInt32</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Asynchronous methods that are defined in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>.NET for UWP apps<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230232.aspx)</ept> have the return type <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Task<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.aspx)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Task<ph id="ph1">&amp;lt;</ph>TResult<ph id="ph2">&amp;gt;</ph><ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/dd321424.aspx)</ept>.</source>
          <target state="new">Asynchronous methods that are defined in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>.NET for UWP apps<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230232.aspx)</ept> have the return type <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Task<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.aspx)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Task<ph id="ph1">&amp;lt;</ph>TResult<ph id="ph2">&amp;gt;</ph><ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/dd321424.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Methods that return <bpt id="p1">**</bpt>Task<ept id="p1">**</ept> are similar to the asynchronous methods in the UWP that return <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IAsyncAction<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR206580)</ept>.</source>
          <target state="new">Methods that return <bpt id="p1">**</bpt>Task<ept id="p1">**</ept> are similar to the asynchronous methods in the UWP that return <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IAsyncAction<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR206580)</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In each case, the result of the asynchronous method is <bpt id="p1">**</bpt>void<ept id="p1">**</ept>.</source>
          <target state="new">In each case, the result of the asynchronous method is <bpt id="p1">**</bpt>void<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The return type <bpt id="p1">**</bpt>Task<ph id="ph1">&amp;lt;</ph>TResult<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> is similar to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IAsyncOperation<ph id="ph3">&amp;lt;</ph>TResult<ph id="ph4">&amp;gt;</ph><ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR206598)</ept> in that the result of the asynchronous method when running the task is the same type as the <ph id="ph5">`TResult`</ph> type parameter.</source>
          <target state="new">The return type <bpt id="p1">**</bpt>Task<ph id="ph1">&amp;lt;</ph>TResult<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> is similar to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IAsyncOperation<ph id="ph3">&amp;lt;</ph>TResult<ph id="ph4">&amp;gt;</ph><ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR206598)</ept> in that the result of the asynchronous method when running the task is the same type as the <ph id="ph5">`TResult`</ph> type parameter.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more info about using <bpt id="p1">**</bpt>.NET for UWP apps<ept id="p1">**</ept> and tasks, see <bpt id="p2">[</bpt>.NET for Windows Runtime apps overview<ept id="p2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230302.aspx)</ept>.</source>
          <target state="new">For more info about using <bpt id="p1">**</bpt>.NET for UWP apps<ept id="p1">**</ept> and tasks, see <bpt id="p2">[</bpt>.NET for Windows Runtime apps overview<ept id="p2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230302.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Handling errors</source>
          <target state="new">Handling errors</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>When you use the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator to retrieve your results from an asynchronous method, you can use a <bpt id="p2">**</bpt>try/catch<ept id="p2">**</ept> block to handle errors that occur in asynchronous methods, just as you do for synchronous methods.</source>
          <target state="new">When you use the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator to retrieve your results from an asynchronous method, you can use a <bpt id="p2">**</bpt>try/catch<ept id="p2">**</ept> block to handle errors that occur in asynchronous methods, just as you do for synchronous methods.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The previous example wraps the <bpt id="p1">**</bpt>RetrieveFeedAsync<ept id="p1">**</ept> method and <bpt id="p2">**</bpt>await<ept id="p2">**</ept> operation in a <bpt id="p3">**</bpt>try/catch<ept id="p3">**</ept> block to handle errors when an exception is thrown.</source>
          <target state="new">The previous example wraps the <bpt id="p1">**</bpt>RetrieveFeedAsync<ept id="p1">**</ept> method and <bpt id="p2">**</bpt>await<ept id="p2">**</ept> operation in a <bpt id="p3">**</bpt>try/catch<ept id="p3">**</ept> block to handle errors when an exception is thrown.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When asynchronous methods call other asynchronous methods, any asynchronous method that results in an exception will be propagated to the outer methods.</source>
          <target state="new">When asynchronous methods call other asynchronous methods, any asynchronous method that results in an exception will be propagated to the outer methods.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This means that you can put a <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> block on the outer-most method to catch errors for the nested asynchronous methods.</source>
          <target state="new">This means that you can put a <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> block on the outer-most method to catch errors for the nested asynchronous methods.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Again, this is similar to how you catch exceptions for synchronous methods.</source>
          <target state="new">Again, this is similar to how you catch exceptions for synchronous methods.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>However, you can't use <bpt id="p1">**</bpt>await<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block.</source>
          <target state="new">However, you can't use <bpt id="p1">**</bpt>await<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>  Starting with C# in Microsoft Visual Studio 2005, you can use <bpt id="p2">**</bpt>await<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>catch<ept id="p3">**</ept> block.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>  Starting with C# in Microsoft Visual Studio 2005, you can use <bpt id="p2">**</bpt>await<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>catch<ept id="p3">**</ept> block.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Summary and next steps</source>
          <target state="new">Summary and next steps</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The pattern of calling an asynchronous method that we show here is the simplest one to use when you call asynchronous APIs in an event handler.</source>
          <target state="new">The pattern of calling an asynchronous method that we show here is the simplest one to use when you call asynchronous APIs in an event handler.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can also use this pattern when you call an asynchronous method in an overridden method that returns <bpt id="p1">**</bpt>void<ept id="p1">**</ept> or a <bpt id="p2">**</bpt>Sub<ept id="p2">**</ept> in Visual Basic.</source>
          <target state="new">You can also use this pattern when you call an asynchronous method in an overridden method that returns <bpt id="p1">**</bpt>void<ept id="p1">**</ept> or a <bpt id="p2">**</bpt>Sub<ept id="p2">**</ept> in Visual Basic.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>As you encounter asynchronous methods in the UWP, it is important to remember:</source>
          <target state="new">As you encounter asynchronous methods in the UWP, it is important to remember:</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>By convention, asynchronous methods are given names that end in "Async".</source>
          <target state="new">By convention, asynchronous methods are given names that end in "Async".</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Any method that uses the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator must have its declaration marked with the <bpt id="p2">**</bpt>async<ept id="p2">**</ept> keyword.</source>
          <target state="new">Any method that uses the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator must have its declaration marked with the <bpt id="p2">**</bpt>async<ept id="p2">**</ept> keyword.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When an app finds the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, the app remains responsive to user interaction while the asynchronous method executes.</source>
          <target state="new">When an app finds the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator, the app remains responsive to user interaction while the asynchronous method executes.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Awaiting the value returned by an asynchronous method returns an object that contains the result.</source>
          <target state="new">Awaiting the value returned by an asynchronous method returns an object that contains the result.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In most cases, the result contained within the return value is what's useful, not the return value itself.</source>
          <target state="new">In most cases, the result contained within the return value is what's useful, not the return value itself.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can find the type of the value that is contained inside the result by looking at the return type of the async method.</source>
          <target state="new">You can find the type of the value that is contained inside the result by looking at the return type of the async method.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Using asynchronous APIs and <bpt id="p1">**</bpt>async<ept id="p1">**</ept> patterns is often a way to improve the responsiveness of your app.</source>
          <target state="new">Using asynchronous APIs and <bpt id="p1">**</bpt>async<ept id="p1">**</ept> patterns is often a way to improve the responsiveness of your app.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The example in this topic outputs text that looks like this.</source>
          <target state="new">The example in this topic outputs text that looks like this.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>