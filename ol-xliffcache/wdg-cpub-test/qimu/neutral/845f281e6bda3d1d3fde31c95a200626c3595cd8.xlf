<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\security\microsoft-passport-login-auth-service.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">845f281e6bda3d1d3fde31c95a200626c3595cd8</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create a Microsoft Passport login service</source>
          <target state="new">Create a Microsoft Passport login service</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This is Part 2 of a complete walkthrough on how to use Microsoft Passport as an alternative to traditional username and password authentication systems in Windows 10 UWP (Universal Windows platform) apps.</source>
          <target state="new">This is Part 2 of a complete walkthrough on how to use Microsoft Passport as an alternative to traditional username and password authentication systems in Windows 10 UWP (Universal Windows platform) apps.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create a Microsoft Passport login service</source>
          <target state="new">Create a Microsoft Passport login service</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target state="new">Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.</source>
          <target state="new">Microsoft makes no warranties, express or implied, with respect to the information provided here.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is Part 2 of a complete walkthrough on how to use Microsoft Passport as an alternative to traditional username and password authentication systems in Windows 10 UWP (Universal Windows platform) apps.</source>
          <target state="new">This is Part 2 of a complete walkthrough on how to use Microsoft Passport as an alternative to traditional username and password authentication systems in Windows 10 UWP (Universal Windows platform) apps.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article picks up where Part 1, <bpt id="p1">[</bpt>Microsoft Passport login app<ept id="p1">](microsoft-passport-login.md)</ept>, left off and extends the functionality to demonstrate how you can integrate Microsoft Passport into your existing application.</source>
          <target state="new">This article picks up where Part 1, <bpt id="p1">[</bpt>Microsoft Passport login app<ept id="p1">](microsoft-passport-login.md)</ept>, left off and extends the functionality to demonstrate how you can integrate Microsoft Passport into your existing application.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In order to build this project, you'll need some experience with C#, and XAML.</source>
          <target state="new">In order to build this project, you'll need some experience with C#, and XAML.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You'll also need to be using Visual Studio 2015 (Community Edition or greater) on a Windows 10 machine.</source>
          <target state="new">You'll also need to be using Visual Studio 2015 (Community Edition or greater) on a Windows 10 machine.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Exercise 1: Server Side Logic</source>
          <target state="new">Exercise 1: Server Side Logic</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this exercise you will be starting with the Passport application built in the first lab and creating a local mock server and database.</source>
          <target state="new">In this exercise you will be starting with the Passport application built in the first lab and creating a local mock server and database.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This hands on lab is designed to teach how Microsoft Passport could be integrated into an existing system.</source>
          <target state="new">This hands on lab is designed to teach how Microsoft Passport could be integrated into an existing system.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>By using a mock server and mock database a lot of unrelated setup is eliminated.</source>
          <target state="new">By using a mock server and mock database a lot of unrelated setup is eliminated.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In your own applications you will need to replace the mock objects with the real services and databases.</source>
          <target state="new">In your own applications you will need to replace the mock objects with the real services and databases.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To begin, open up the PassportLogin solution from the first Passport Hands On Lab.</source>
          <target state="new">To begin, open up the PassportLogin solution from the first Passport Hands On Lab.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You will start by implementing the mock server and mock database.</source>
          <target state="new">You will start by implementing the mock server and mock database.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a new folder called "AuthService".</source>
          <target state="new">Create a new folder called "AuthService".</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In solution explorer right click on the solution "PassportLogin (Universal Windows)" and select Add &gt; New Folder.</source>
          <target state="new">In solution explorer right click on the solution "PassportLogin (Universal Windows)" and select Add &gt; New Folder.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create UserAccount and PassportDevices classes that will act as models for data to be saved in the mock database.</source>
          <target state="new">Create UserAccount and PassportDevices classes that will act as models for data to be saved in the mock database.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The UserAccount will be similar to the user model implemented on a traditional authentication server.</source>
          <target state="new">The UserAccount will be similar to the user model implemented on a traditional authentication server.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Right click on the AuthService folder and add a new class called "UserAccount.cs."</source>
          <target state="new">Right click on the AuthService folder and add a new class called "UserAccount.cs."</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Change the class definition to be public and then add the following public properties.</source>
          <target state="new">Change the class definition to be public and then add the following public properties.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You will need the following reference.</source>
          <target state="new">You will need the following reference.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You may have noticed the commented out list of PassportDevices.</source>
          <target state="new">You may have noticed the commented out list of PassportDevices.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is a modification you will need to make to an existing user model in your current implementation.</source>
          <target state="new">This is a modification you will need to make to an existing user model in your current implementation.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The list of PassportDevices will contain a deviceID, the public key made from Microsoft Passport, and a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyCredentialAttestationResult<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn973034)</ept>.</source>
          <target state="new">The list of PassportDevices will contain a deviceID, the public key made from Microsoft Passport, and a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyCredentialAttestationResult<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn973034)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For this hands on lab you will need to implement the keyAttestationResult as they are only provided by Microsoft Passport on devices that have a TPM (Trusted Platform Modules) chip.</source>
          <target state="new">For this hands on lab you will need to implement the keyAttestationResult as they are only provided by Microsoft Passport on devices that have a TPM (Trusted Platform Modules) chip.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>KeyCredentialAttestationResult<ept id="p1">**</ept> is a combination of multiple properties and would need to be split in order to save and load them with a database.</source>
          <target state="new">The <bpt id="p1">**</bpt>KeyCredentialAttestationResult<ept id="p1">**</ept> is a combination of multiple properties and would need to be split in order to save and load them with a database.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Create a new class in the AuthService folder called "PassportDevice.cs".</source>
          <target state="new">Create a new class in the AuthService folder called "PassportDevice.cs".</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This is the model for the passport devices as discussed above.</source>
          <target state="new">This is the model for the passport devices as discussed above.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Change the class definition to be public and add the following properties.</source>
          <target state="new">Change the class definition to be public and add the following properties.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Return to in UserAccount.cs and uncomment the list of Passport devices.</source>
          <target state="new">Return to in UserAccount.cs and uncomment the list of Passport devices.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>With the model for the UserAccount and the PassportDevice created, you need to create another new class in the AuthService that will act as the mock database.</source>
          <target state="new">With the model for the UserAccount and the PassportDevice created, you need to create another new class in the AuthService that will act as the mock database.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>As this is a mock database from where you will be saving and loading a list of user accounts locally.</source>
          <target state="new">As this is a mock database from where you will be saving and loading a list of user accounts locally.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the real world this would be your database implementation.</source>
          <target state="new">In the real world this would be your database implementation.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Create a new class in AuthService called "MockStore.cs".</source>
          <target state="new">Create a new class in AuthService called "MockStore.cs".</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Change the class definition to public.</source>
          <target state="new">Change the class definition to public.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>As the mock store will save and load a list of user accounts locally you can implement the logic to save and load that list using an XmlSerializer.</source>
          <target state="new">As the mock store will save and load a list of user accounts locally you can implement the logic to save and load that list using an XmlSerializer.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You will also need to remember the filename and save location.</source>
          <target state="new">You will also need to remember the filename and save location.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In MockStore.cs implement the following:</source>
          <target state="new">In MockStore.cs implement the following:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the load method you may have noticed that an InitializeSampleUserAccounts method was commented out.</source>
          <target state="new">In the load method you may have noticed that an InitializeSampleUserAccounts method was commented out.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You will need to create this method in the MockStore.cs.</source>
          <target state="new">You will need to create this method in the MockStore.cs.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This method will populate the user accounts list so that a login can take place.</source>
          <target state="new">This method will populate the user accounts list so that a login can take place.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the real world the user database would already be populated.</source>
          <target state="new">In the real world the user database would already be populated.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this step you will also be creating a constructor that will initialise the user list and call load.</source>
          <target state="new">In this step you will also be creating a constructor that will initialise the user list and call load.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now that the InitalizeSampleUserAccounts method exists uncomment the method call in the LoadAccountListAsync method.</source>
          <target state="new">Now that the InitalizeSampleUserAccounts method exists uncomment the method call in the LoadAccountListAsync method.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The user accounts list in mock store can now be saved and loaded.</source>
          <target state="new">The user accounts list in mock store can now be saved and loaded.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Other parts of the application will need to have access to this list so there will need to be some methods to retrieve this data.</source>
          <target state="new">Other parts of the application will need to have access to this list so there will need to be some methods to retrieve this data.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Underneath the InitializeSampleUserAccounts method, add the following get methods.</source>
          <target state="new">Underneath the InitializeSampleUserAccounts method, add the following get methods.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>They will allow you to get a userid, a single user, a list of users for a specific Passport device, and also get the public key for the user on a specific device.</source>
          <target state="new">They will allow you to get a userid, a single user, a list of users for a specific Passport device, and also get the public key for the user on a specific device.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The next methods to implement will handle simple operations to add account, remove account, and also remove device.</source>
          <target state="new">The next methods to implement will handle simple operations to add account, remove account, and also remove device.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remove device is needed as Microsoft Passport is device specific.</source>
          <target state="new">Remove device is needed as Microsoft Passport is device specific.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For each device to which you log in, a new public and private key pair will be created by Microsoft Passport.</source>
          <target state="new">For each device to which you log in, a new public and private key pair will be created by Microsoft Passport.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It is like having a different password for each device you sign in on, the only thing is you don’t need to remember all those passwords the server does.</source>
          <target state="new">It is like having a different password for each device you sign in on, the only thing is you don’t need to remember all those passwords the server does.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add the following methods into the MockStore.cs</source>
          <target state="new">Add the following methods into the MockStore.cs</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the MockStore class add a method that will add Passport related information to an existing UserAccount.</source>
          <target state="new">In the MockStore class add a method that will add Passport related information to an existing UserAccount.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This method will be called PassportUpdateDetails and will take parameters to identify the user, and the Passport details.</source>
          <target state="new">This method will be called PassportUpdateDetails and will take parameters to identify the user, and the Passport details.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The KeyAttestationResult has been commented out when creating a PassportDevice, in a real world application you would require this.</source>
          <target state="new">The KeyAttestationResult has been commented out when creating a PassportDevice, in a real world application you would require this.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The MockStore class is now complete, as this represents the database it should be considered private.</source>
          <target state="new">The MockStore class is now complete, as this represents the database it should be considered private.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In order to access the MockStore an AuthService class is needed to manipulate the database data.</source>
          <target state="new">In order to access the MockStore an AuthService class is needed to manipulate the database data.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the AuthService folder create a new class called "AuthService.cs".</source>
          <target state="new">In the AuthService folder create a new class called "AuthService.cs".</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Change the class definition to public and add a singleton instance pattern to make sure only one instance is ever created.</source>
          <target state="new">Change the class definition to public and add a singleton instance pattern to make sure only one instance is ever created.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The AuthService class will need to create an instance of the MockStore class and provide access to the properties of the MockStore object.</source>
          <target state="new">The AuthService class will need to create an instance of the MockStore class and provide access to the properties of the MockStore object.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You need methods in the AuthService class to access add, remove, and update passport details methods in the MockStore object.</source>
          <target state="new">You need methods in the AuthService class to access add, remove, and update passport details methods in the MockStore object.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>At the end of the AuthService class file add the following methods.</source>
          <target state="new">At the end of the AuthService class file add the following methods.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The AuthService class will need to provide a method to validate credentials.</source>
          <target state="new">The AuthService class will need to provide a method to validate credentials.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This method will take a username and password and make sure that account exists and the password is valid.</source>
          <target state="new">This method will take a username and password and make sure that account exists and the password is valid.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An existing system would have an equivalent method to this that checks the user is authorized.</source>
          <target state="new">An existing system would have an equivalent method to this that checks the user is authorized.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Add the following ValidateCredentials to the AuthService.cs file.</source>
          <target state="new">Add the following ValidateCredentials to the AuthService.cs file.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The AuthService class needs a request challenge method that will return a challenge to the client to validate the user is who they claim to be.</source>
          <target state="new">The AuthService class needs a request challenge method that will return a challenge to the client to validate the user is who they claim to be.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Then a method is needed in the AuthService class to receive the signed challenge back from the client.</source>
          <target state="new">Then a method is needed in the AuthService class to receive the signed challenge back from the client.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For this hands on lab the method of how you determine if the signed challenge has been completed has been left incomplete.</source>
          <target state="new">For this hands on lab the method of how you determine if the signed challenge has been completed has been left incomplete.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Every implementation of Microsoft Passport into an existing authentication system will be slightly different.</source>
          <target state="new">Every implementation of Microsoft Passport into an existing authentication system will be slightly different.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The public key stored on the server needs to match with the result the client returned to the server.</source>
          <target state="new">The public key stored on the server needs to match with the result the client returned to the server.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Add these two methods to AuthService.cs.</source>
          <target state="new">Add these two methods to AuthService.cs.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Exercise 2: Client Side Logic</source>
          <target state="new">Exercise 2: Client Side Logic</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this exercise you will be changing the client side views and helper classes from the first lab to use the AuthService class.</source>
          <target state="new">In this exercise you will be changing the client side views and helper classes from the first lab to use the AuthService class.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In the real world the AuthService would be the authentication server and you would need to use Web API’s to send and receive data from the server.</source>
          <target state="new">In the real world the AuthService would be the authentication server and you would need to use Web API’s to send and receive data from the server.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For this hands on lab client and server are all local to keep things simple.</source>
          <target state="new">For this hands on lab client and server are all local to keep things simple.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The objective is to learn how to use the Microsoft Passport APIs.</source>
          <target state="new">The objective is to learn how to use the Microsoft Passport APIs.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the MainPage.xaml.cs you can remove the AccountHelper.LoadAccountListAsync method call in the loaded method as the AuthService class creates an instance of the MockStore which loads the accounts list.</source>
          <target state="new">In the MainPage.xaml.cs you can remove the AccountHelper.LoadAccountListAsync method call in the loaded method as the AuthService class creates an instance of the MockStore which loads the accounts list.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The loaded method should now look like below.</source>
          <target state="new">The loaded method should now look like below.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Note the async method definition is removed as nothing is being awaiting.</source>
          <target state="new">Note the async method definition is removed as nothing is being awaiting.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Update the Login page interface to require a passport be entered.</source>
          <target state="new">Update the Login page interface to require a passport be entered.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This hands on lab demonstrates how an existing system could be migrated to use Microsoft Passport and existing accounts will have a username and a password.</source>
          <target state="new">This hands on lab demonstrates how an existing system could be migrated to use Microsoft Passport and existing accounts will have a username and a password.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Also update the explanation at the bottom of the XAML to include the default password.</source>
          <target state="new">Also update the explanation at the bottom of the XAML to include the default password.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Update the following XAML in Login.xaml</source>
          <target state="new">Update the following XAML in Login.xaml</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In the Login class code behind you will need to change the Account private variable at the top of the class to be a UserAccount.</source>
          <target state="new">In the Login class code behind you will need to change the Account private variable at the top of the class to be a UserAccount.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Change the OnNavigateTo event to cast the type to be a UserAccount.</source>
          <target state="new">Change the OnNavigateTo event to cast the type to be a UserAccount.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You will need the following reference.</source>
          <target state="new">You will need the following reference.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>As the Login page is using a UserAccount object instead of the previous Account object the MicrosoftPassportHelper.cs will need to be updated to use a UserAccount as a parameter for some methods.</source>
          <target state="new">As the Login page is using a UserAccount object instead of the previous Account object the MicrosoftPassportHelper.cs will need to be updated to use a UserAccount as a parameter for some methods.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You will need to change the following parameters for the CreatePassportKeyAsync, RemovePassportAccountAsync and GetPassportAuthenticationMessageAsync methods.</source>
          <target state="new">You will need to change the following parameters for the CreatePassportKeyAsync, RemovePassportAccountAsync and GetPassportAuthenticationMessageAsync methods.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>As the UserAccount class has a Guid for a UserId you will start using the Id in more places to be more specific.</source>
          <target state="new">As the UserAccount class has a Guid for a UserId you will start using the Id in more places to be more specific.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The SignInPassport method in Login.xaml.cs file will need to be updated to use the AuthService instead of the AccountHelper.</source>
          <target state="new">The SignInPassport method in Login.xaml.cs file will need to be updated to use the AuthService instead of the AccountHelper.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Validation of credentials will happen through the AuthService.</source>
          <target state="new">Validation of credentials will happen through the AuthService.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For this hands on lab the only configured account is "sampleUsername".</source>
          <target state="new">For this hands on lab the only configured account is "sampleUsername".</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This account is created in the InitializeSampleUserAccounts method in MockStore.cs.</source>
          <target state="new">This account is created in the InitializeSampleUserAccounts method in MockStore.cs.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Update the SignInPassport method in Login.xaml.cs now to reflect the code snippet below.</source>
          <target state="new">Update the SignInPassport method in Login.xaml.cs now to reflect the code snippet below.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>As Microsoft Passport will create a different public and private key pair for each account on each device the Welcome page will need to display a list of registered devices for the logged in account, and allow each one to be forgotten.</source>
          <target state="new">As Microsoft Passport will create a different public and private key pair for each account on each device the Welcome page will need to display a list of registered devices for the logged in account, and allow each one to be forgotten.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In Welcome.xaml add in the following XAML underneath the ForgetButton.</source>
          <target state="new">In Welcome.xaml add in the following XAML underneath the ForgetButton.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This will implement a forget device button, an error text area and a list to display all devices.</source>
          <target state="new">This will implement a forget device button, an error text area and a list to display all devices.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In the Welcome.xaml.cs file you will need to change the private Account variable at the top of the class to be a private UserAccount variable.</source>
          <target state="new">In the Welcome.xaml.cs file you will need to change the private Account variable at the top of the class to be a private UserAccount variable.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Then update the OnNavigatedTo method to use the AuthService and retrieve information for the current account.</source>
          <target state="new">Then update the OnNavigatedTo method to use the AuthService and retrieve information for the current account.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When you have the account information you can set the itemsource of the list to display the devices.</source>
          <target state="new">When you have the account information you can set the itemsource of the list to display the devices.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You will need to add a reference to the AuthService namespace.</source>
          <target state="new">You will need to add a reference to the AuthService namespace.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>As you will be using the AuthService when removing an account the reference to the AccountHelper in the Button<ph id="ph1">\_</ph>Forget<ph id="ph2">\_</ph>User<ph id="ph3">\_</ph>Click method can be removed.</source>
          <target state="new">As you will be using the AuthService when removing an account the reference to the AccountHelper in the Button<ph id="ph1">\_</ph>Forget<ph id="ph2">\_</ph>User<ph id="ph3">\_</ph>Click method can be removed.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The method should now look as below.</source>
          <target state="new">The method should now look as below.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The MicrosoftPassportHelper method is not using the AuthService to remove the account.</source>
          <target state="new">The MicrosoftPassportHelper method is not using the AuthService to remove the account.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You need to make a call to the AuthService and pass the userId.</source>
          <target state="new">You need to make a call to the AuthService and pass the userId.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Before you can finish implementing the Welcome page class, you need to create a method in MicrosoftPassportHelper.cs that will allow a device to be removed.</source>
          <target state="new">Before you can finish implementing the Welcome page class, you need to create a method in MicrosoftPassportHelper.cs that will allow a device to be removed.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Create a new method that will call PassportRemoveDevice in AuthService.</source>
          <target state="new">Create a new method that will call PassportRemoveDevice in AuthService.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In Welcome.xaml.cs implement the Forget Device click event.</source>
          <target state="new">In Welcome.xaml.cs implement the Forget Device click event.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This will use the selected device from the list of devices and use the passport helper to call remove device.</source>
          <target state="new">This will use the selected device from the list of devices and use the passport helper to call remove device.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The next page you will update is the UserSelection page.</source>
          <target state="new">The next page you will update is the UserSelection page.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The UserSelection page will need to use the AuthService to retrieve all user accounts for the current device.</source>
          <target state="new">The UserSelection page will need to use the AuthService to retrieve all user accounts for the current device.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Currently there is no way for you get a device id to pass to the AuthService so it can return user accounts for that device.</source>
          <target state="new">Currently there is no way for you get a device id to pass to the AuthService so it can return user accounts for that device.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>In the Utils folder create a new class called "Helpers.cs".</source>
          <target state="new">In the Utils folder create a new class called "Helpers.cs".</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Change the class definition to be public static and then add the following method that will allow you to retrieve the current device id.</source>
          <target state="new">Change the class definition to be public static and then add the following method that will allow you to retrieve the current device id.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In the UserSelection page class only the code behind needs to change, not the user interface.</source>
          <target state="new">In the UserSelection page class only the code behind needs to change, not the user interface.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In UserSelection.xaml.cs update the loaded method and the user selection method to use the UserAccount class instead of the Account class.</source>
          <target state="new">In UserSelection.xaml.cs update the loaded method and the user selection method to use the UserAccount class instead of the Account class.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You will also need to get all users for this device through the AuthService.</source>
          <target state="new">You will also need to get all users for this device through the AuthService.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The PassportRegister page needs to update the code behind, the user interface does not need changing.</source>
          <target state="new">The PassportRegister page needs to update the code behind, the user interface does not need changing.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In PassportRegister.xaml.cs remove the private Account variable at the top of the class as it is no longer needed.</source>
          <target state="new">In PassportRegister.xaml.cs remove the private Account variable at the top of the class as it is no longer needed.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Update the RegisterButton click event to use the AuthService.</source>
          <target state="new">Update the RegisterButton click event to use the AuthService.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This method will create a new UserAccount and then try and update its passport details.</source>
          <target state="new">This method will create a new UserAccount and then try and update its passport details.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If passport fails to create a passport key the account will be removed as the registration process failed.</source>
          <target state="new">If passport fails to create a passport key the account will be removed as the registration process failed.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Build and run the application (F5).</source>
          <target state="new">Build and run the application (F5).</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Sign into the sample user account, with the credentials "sampleUsername" and "samplePassword".</source>
          <target state="new">Sign into the sample user account, with the credentials "sampleUsername" and "samplePassword".</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>On the welcome screen you may notice the Forget devices button is displayed but there are no devices.</source>
          <target state="new">On the welcome screen you may notice the Forget devices button is displayed but there are no devices.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When you are creating or migrating a user to work with Microsoft Passport the Passport information is not being pushed to the AuthService.</source>
          <target state="new">When you are creating or migrating a user to work with Microsoft Passport the Passport information is not being pushed to the AuthService.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To get the Passport information to the AuthService the MicrosoftPassportHelper.cs will need to be updated.</source>
          <target state="new">To get the Passport information to the AuthService the MicrosoftPassportHelper.cs will need to be updated.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In the CreatePassportKeyAsync method, instead of only returning true in the case that it is successful, you will need to call a new method which will try to get the KeyAttestation.</source>
          <target state="new">In the CreatePassportKeyAsync method, instead of only returning true in the case that it is successful, you will need to call a new method which will try to get the KeyAttestation.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>While this hands on lab is not recording this information in the AuthService you will learn how you would get it this information on the client side.</source>
          <target state="new">While this hands on lab is not recording this information in the AuthService you will learn how you would get it this information on the client side.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Update the CreatePassportKeyAsync method.</source>
          <target state="new">Update the CreatePassportKeyAsync method.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Create this GetKeyAttestationAsync method in MicrosoftPassportHelper.cs.</source>
          <target state="new">Create this GetKeyAttestationAsync method in MicrosoftPassportHelper.cs.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This method will demonstrate how to obtain all the necessary information that can be provided by Microsoft Passport for each account on a specific device.</source>
          <target state="new">This method will demonstrate how to obtain all the necessary information that can be provided by Microsoft Passport for each account on a specific device.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You may have noticed in the GetKeyAttestationAsync method that you just added the last line was commented out.</source>
          <target state="new">You may have noticed in the GetKeyAttestationAsync method that you just added the last line was commented out.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This last line will be a new method you create that will send all the Microsoft Passport information to the AuthService.</source>
          <target state="new">This last line will be a new method you create that will send all the Microsoft Passport information to the AuthService.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>In the real world you would need to send this to an actual server with a Web API.</source>
          <target state="new">In the real world you would need to send this to an actual server with a Web API.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Uncomment the last line in the GetKeyAttestationAsync method so that the Microsoft Passport information is being sent to the AuthService.</source>
          <target state="new">Uncomment the last line in the GetKeyAttestationAsync method so that the Microsoft Passport information is being sent to the AuthService.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Build and run the application and sign in with the default credentials as before.</source>
          <target state="new">Build and run the application and sign in with the default credentials as before.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>On the welcome screen you will now see that the device Id is displayed.</source>
          <target state="new">On the welcome screen you will now see that the device Id is displayed.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If you signed in on another device that would also be displayed here (if you had a cloud hosted auth service).</source>
          <target state="new">If you signed in on another device that would also be displayed here (if you had a cloud hosted auth service).</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For this hands on lab the actual device Id is being displayed.</source>
          <target state="new">For this hands on lab the actual device Id is being displayed.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>In a real implementation you would want to display a friendly name that a person could understand and use to determine each device.</source>
          <target state="new">In a real implementation you would want to display a friendly name that a person could understand and use to determine each device.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To complete this hands on lab you need a request and challenge for the user when they select from the user selection page and sign back in.</source>
          <target state="new">To complete this hands on lab you need a request and challenge for the user when they select from the user selection page and sign back in.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The AuthService has two methods that you created to request a challenge, one that uses a signed challenge.</source>
          <target state="new">The AuthService has two methods that you created to request a challenge, one that uses a signed challenge.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In MicrosoftPassportHelper.cs create a new method called "RequestSignAsync" This will request a challenge from the AuthService, locally sign that challenge using a Passport API and send the signed challenge to the AuthService.</source>
          <target state="new">In MicrosoftPassportHelper.cs create a new method called "RequestSignAsync" This will request a challenge from the AuthService, locally sign that challenge using a Passport API and send the signed challenge to the AuthService.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>In this hands on lab the AuthService will receive the signed challenge and return true.</source>
          <target state="new">In this hands on lab the AuthService will receive the signed challenge and return true.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In an actual implementation you would need to implement a verification mechanism to determine is the challenge was signed by the correct user on the correct device.</source>
          <target state="new">In an actual implementation you would need to implement a verification mechanism to determine is the challenge was signed by the correct user on the correct device.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Add the method below to the MicrosoftPassportHelper.cs</source>
          <target state="new">Add the method below to the MicrosoftPassportHelper.cs</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In the MicrosoftPassportHelper class call the RequestSignAsync method from the GetPassportAuthenticationMessageAsync method.</source>
          <target state="new">In the MicrosoftPassportHelper class call the RequestSignAsync method from the GetPassportAuthenticationMessageAsync method.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Throughout this exercise, you have updated the client side application to use the AuthService.</source>
          <target state="new">Throughout this exercise, you have updated the client side application to use the AuthService.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>By doing this you have been able to eliminate the need for the Account class and the AccountHelper class.</source>
          <target state="new">By doing this you have been able to eliminate the need for the Account class and the AccountHelper class.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Delete the Account class, the Models folder, and the AccountHelper class in the Utils folder.</source>
          <target state="new">Delete the Account class, the Models folder, and the AccountHelper class in the Utils folder.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>You will need to remove all reference to the Models namespace throughout the application before the solution will successfully build.</source>
          <target state="new">You will need to remove all reference to the Models namespace throughout the application before the solution will successfully build.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Build and run the application and enjoy using Microsoft Passport with the mock service and database.</source>
          <target state="new">Build and run the application and enjoy using Microsoft Passport with the mock service and database.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In this hands on lab you have learned how to use the Passport APIs to replace the need for passwords when using authenticate from a Windows 10 machine.</source>
          <target state="new">In this hands on lab you have learned how to use the Passport APIs to replace the need for passwords when using authenticate from a Windows 10 machine.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>When you consider how much energy is expended by people maintaining passwords and supporting lost passwords in existing systems, you should see the benefit of moving to this new Microsoft Passport system of authentication.</source>
          <target state="new">When you consider how much energy is expended by people maintaining passwords and supporting lost passwords in existing systems, you should see the benefit of moving to this new Microsoft Passport system of authentication.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>We have left as an exercise for you the details of how you will implement the authentication on the service and server side.</source>
          <target state="new">We have left as an exercise for you the details of how you will implement the authentication on the service and server side.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>It is expected that most of you will have existing systems that will need to be migrated to start working with Microsoft Passport and the details of each system will differ.</source>
          <target state="new">It is expected that most of you will have existing systems that will need to be migrated to start working with Microsoft Passport and the details of each system will differ.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Microsoft Passport and Windows Hello</source>
          <target state="new">Microsoft Passport and Windows Hello</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Microsoft Passport login app</source>
          <target state="new">Microsoft Passport login app</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>