<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\controls-and-patterns\resourcedictionary-and-xaml-resource-references.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6012c225b320c480f8db94ad83ac6d832529b2fa</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Explains how to define a ResourceDictionary element and keyed resources, and how XAML resources relate to other resources that you define as part of your app or app package.</source>
          <target state="new">Explains how to define a ResourceDictionary element and keyed resources, and how XAML resources relate to other resources that you define as part of your app or app package.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ResourceDictionary and XAML resource references</source>
          <target state="new">ResourceDictionary and XAML resource references</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ResourceDictionary and XAML resource references</source>
          <target state="new">ResourceDictionary and XAML resource references</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can define the UI or resources for your app using XAML.</source>
          <target state="new">You can define the UI or resources for your app using XAML.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Resources are typically definitions of some object that you expect to use more than once.</source>
          <target state="new">Resources are typically definitions of some object that you expect to use more than once.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To refer to a XAML resource later, you specify a key for a resource that acts like its name.</source>
          <target state="new">To refer to a XAML resource later, you specify a key for a resource that acts like its name.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can reference a resource throughout an app or from any XAML page within it.</source>
          <target state="new">You can reference a resource throughout an app or from any XAML page within it.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can define your resources using a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> element from the Windows Runtime XAML.</source>
          <target state="new">You can define your resources using a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> element from the Windows Runtime XAML.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Then, you can reference your resources by using a <bpt id="p1">[</bpt>StaticResource markup extension<ept id="p1">](../xaml-platform/staticresource-markup-extension.md)</ept> or <bpt id="p2">[</bpt>ThemeResource markup extension<ept id="p2">](../xaml-platform/themeresource-markup-extension.md)</ept>.</source>
          <target state="new">Then, you can reference your resources by using a <bpt id="p1">[</bpt>StaticResource markup extension<ept id="p1">](../xaml-platform/staticresource-markup-extension.md)</ept> or <bpt id="p2">[</bpt>ThemeResource markup extension<ept id="p2">](../xaml-platform/themeresource-markup-extension.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The XAML elements you might want to declare most often as XAML resources include <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ControlTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept>, animation components, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Brush<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> subclasses.</source>
          <target state="new">The XAML elements you might want to declare most often as XAML resources include <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ControlTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept>, animation components, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Brush<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> subclasses.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Here, we explain how to define a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> and keyed resources, and how XAML resources relate to other resources that you define as part of your app or app package.</source>
          <target state="new">Here, we explain how to define a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> and keyed resources, and how XAML resources relate to other resources that you define as part of your app or app package.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>We also explain resource dictionary advanced features such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ThemeDictionaries<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208807)</ept>.</source>
          <target state="new">We also explain resource dictionary advanced features such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ThemeDictionaries<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208807)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>We assume that you understand XAML markup and have read the <bpt id="p1">[</bpt>XAML overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185595)</ept>.</source>
          <target state="new">We assume that you understand XAML markup and have read the <bpt id="p1">[</bpt>XAML overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185595)</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Define and use XAML resources</source>
          <target state="new">Define and use XAML resources</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>XAML resources are objects that are referenced from markup more than once.</source>
          <target state="new">XAML resources are objects that are referenced from markup more than once.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Resources are defined in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, typically in a separate file or at the top of the markup page, like this.</source>
          <target state="new">Resources are defined in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, typically in a separate file or at the top of the markup page, like this.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example:</source>
          <target state="new">In this example:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>- Defines the resource dictionary.</source>
          <target state="new">- Defines the resource dictionary.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>- Defines the resource with the key "greeting".</source>
          <target state="new">- Defines the resource with the key "greeting".</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>- Looks up the resource with the key "greeting", which is assigned to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Text<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209676)</ept> property of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TextBlock<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept>.</source>
          <target state="new">- Looks up the resource with the key "greeting", which is assigned to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Text<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209676)</ept> property of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TextBlock<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Don't confuse the concepts related to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ResourceDictionary<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> with the <bpt id="p4">**</bpt>Resource<ept id="p4">**</ept> build action, resource (.resw) files, or other "resources" that are discussed in the context of structuring the code project that produces your app package.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>Don't confuse the concepts related to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ResourceDictionary<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> with the <bpt id="p4">**</bpt>Resource<ept id="p4">**</ept> build action, resource (.resw) files, or other "resources" that are discussed in the context of structuring the code project that produces your app package.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Resources don't have to be strings; they can be any shareable object, such as styles, templates, brushes, and colors.</source>
          <target state="new">Resources don't have to be strings; they can be any shareable object, such as styles, templates, brushes, and colors.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, controls, shapes, and other <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>s are not shareable, so they can't be declared as reusable resources.</source>
          <target state="new">However, controls, shapes, and other <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>s are not shareable, so they can't be declared as reusable resources.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more info about sharing, see the <bpt id="p1">[</bpt>XAML resources must be shareable<ept id="p1">](#xaml_resources_must_be_sharable)</ept> section later in this topic.</source>
          <target state="new">For more info about sharing, see the <bpt id="p1">[</bpt>XAML resources must be shareable<ept id="p1">](#xaml_resources_must_be_sharable)</ept> section later in this topic.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Here, both a brush and a string are declared as resources and used by controls in a page.</source>
          <target state="new">Here, both a brush and a string are declared as resources and used by controls in a page.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All resources need to have a key.</source>
          <target state="new">All resources need to have a key.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Usually that key is a string defined with <ph id="ph1">`x:Key=”myString”`</ph>.</source>
          <target state="new">Usually that key is a string defined with <ph id="ph1">`x:Key=”myString”`</ph>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, there are a few other ways to specify a key:</source>
          <target state="new">However, there are a few other ways to specify a key:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ControlTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> require a <bpt id="p5">**</bpt>TargetType<ept id="p5">**</ept>, and will use the <bpt id="p6">**</bpt>TargetType<ept id="p6">**</ept> as the key if <bpt id="p7">[</bpt>x:Key<ept id="p7">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> is not specified.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ControlTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> require a <bpt id="p5">**</bpt>TargetType<ept id="p5">**</ept>, and will use the <bpt id="p6">**</bpt>TargetType<ept id="p6">**</ept> as the key if <bpt id="p7">[</bpt>x:Key<ept id="p7">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> is not specified.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this case, the key is the actual Type object, not a string.</source>
          <target state="new">In this case, the key is the actual Type object, not a string.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(See examples below)</source>
          <target state="new">(See examples below)</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataTemplate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242348)</ept> resources that have a <bpt id="p3">**</bpt>TargetType<ept id="p3">**</ept> will use the <bpt id="p4">**</bpt>TargetType<ept id="p4">**</ept> as the key if <bpt id="p5">[</bpt>x:Key<ept id="p5">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> is not specified.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataTemplate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242348)</ept> resources that have a <bpt id="p3">**</bpt>TargetType<ept id="p3">**</ept> will use the <bpt id="p4">**</bpt>TargetType<ept id="p4">**</ept> as the key if <bpt id="p5">[</bpt>x:Key<ept id="p5">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> is not specified.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this case, the key is the actual Type object, not a string.</source>
          <target state="new">In this case, the key is the actual Type object, not a string.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Name<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204788)</ept> can be used instead of <bpt id="p2">[</bpt>x:Key<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>x:Name<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204788)</ept> can be used instead of <bpt id="p2">[</bpt>x:Key<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, x:Name also generates a code behind field for the resource.</source>
          <target state="new">However, x:Name also generates a code behind field for the resource.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As a result, x:Name is less efficient than x:Key because that field needs to be initialized when the page is loaded.</source>
          <target state="new">As a result, x:Name is less efficient than x:Key because that field needs to be initialized when the page is loaded.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>StaticResource markup extension<ept id="p1">](../xaml-platform/staticresource-markup-extension.md)</ept> can retrieve resources only with a string name (<bpt id="p2">[</bpt>x:Key<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> or <bpt id="p3">[</bpt>x:Name<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt204788)</ept>).</source>
          <target state="new">The <bpt id="p1">[</bpt>StaticResource markup extension<ept id="p1">](../xaml-platform/staticresource-markup-extension.md)</ept> can retrieve resources only with a string name (<bpt id="p2">[</bpt>x:Key<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> or <bpt id="p3">[</bpt>x:Name<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt204788)</ept>).</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, the XAML framework also looks for implicit style resources (those which use <bpt id="p1">**</bpt>TargetType<ept id="p1">**</ept> rather than x:Key or x:Name) when it decides which style &amp; template to use for a control that hasn't set the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Style<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ContentTemplate<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209369)</ept> or <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ItemTemplate<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br242830)</ept> properties.</source>
          <target state="new">However, the XAML framework also looks for implicit style resources (those which use <bpt id="p1">**</bpt>TargetType<ept id="p1">**</ept> rather than x:Key or x:Name) when it decides which style &amp; template to use for a control that hasn't set the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Style<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ContentTemplate<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209369)</ept> or <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ItemTemplate<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br242830)</ept> properties.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Here, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> has an implicit key of <bpt id="p3">**</bpt>typeof(Button)<ept id="p3">**</ept>, and since the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Button<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> at the bottom of the page doesn't specify a <bpt id="p6">[</bpt><bpt id="p7">**</bpt>Style<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> property, it looks for a style with key of <bpt id="p8">**</bpt>typeof(Button)<ept id="p8">**</ept>:</source>
          <target state="new">Here, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> has an implicit key of <bpt id="p3">**</bpt>typeof(Button)<ept id="p3">**</ept>, and since the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Button<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> at the bottom of the page doesn't specify a <bpt id="p6">[</bpt><bpt id="p7">**</bpt>Style<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> property, it looks for a style with key of <bpt id="p8">**</bpt>typeof(Button)<ept id="p8">**</ept>:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more info about implicit styles and how they work, see <bpt id="p1">[</bpt>Styling controls<ept id="p1">](styling-controls.md)</ept> and <bpt id="p2">[</bpt>Control templates<ept id="p2">](control-templates.md)</ept>.</source>
          <target state="new">For more info about implicit styles and how they work, see <bpt id="p1">[</bpt>Styling controls<ept id="p1">](styling-controls.md)</ept> and <bpt id="p2">[</bpt>Control templates<ept id="p2">](control-templates.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Look up resources in code</source>
          <target state="new">Look up resources in code</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You access members of the resource dictionary like any other dictionary.</source>
          <target state="new">You access members of the resource dictionary like any other dictionary.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>When you perform a resource lookup in code, only the resources in the <ph id="ph2">`Page.Resources`</ph> dictionary are looked at.</source>
          <target state="new"><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>When you perform a resource lookup in code, only the resources in the <ph id="ph2">`Page.Resources`</ph> dictionary are looked at.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">[</bpt>StaticResource markup extension<ept id="p1">](../xaml-platform/staticresource-markup-extension.md)</ept>, the code doesn't fall back to the <ph id="ph1">`Application.Resources`</ph> dictionary if the resources aren’t found in the first dictionary.</source>
          <target state="new">Unlike the <bpt id="p1">[</bpt>StaticResource markup extension<ept id="p1">](../xaml-platform/staticresource-markup-extension.md)</ept>, the code doesn't fall back to the <ph id="ph1">`Application.Resources`</ph> dictionary if the resources aren’t found in the first dictionary.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This example shows how to retrieve the <ph id="ph1">`redButtonStyle`</ph> resource out of a page’s resource dictionary:</source>
          <target state="new">This example shows how to retrieve the <ph id="ph1">`redButtonStyle`</ph> resource out of a page’s resource dictionary:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To look up app-wide resources from code, use <bpt id="p1">**</bpt>Application.Current.Resources<ept id="p1">**</ept> to get the app's resource dictionary, as shown here.</source>
          <target state="new">To look up app-wide resources from code, use <bpt id="p1">**</bpt>Application.Current.Resources<ept id="p1">**</ept> to get the app's resource dictionary, as shown here.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can also add an application resource in code.</source>
          <target state="new">You can also add an application resource in code.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>There are two things to keep in mind when doing this.</source>
          <target state="new">There are two things to keep in mind when doing this.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>First, you need to add the resources before any page tries to use the resource.</source>
          <target state="new">First, you need to add the resources before any page tries to use the resource.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Second, you can’t add resources in the App’s constructor.</source>
          <target state="new">Second, you can’t add resources in the App’s constructor.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can avoid both problems if you add the resource in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application.OnLaunched<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242335)</ept> method, like this.</source>
          <target state="new">You can avoid both problems if you add the resource in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application.OnLaunched<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242335)</ept> method, like this.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Every FrameworkElement can have a ResourceDictionary</source>
          <target state="new">Every FrameworkElement can have a ResourceDictionary</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> is a base class that controls inherit from, and it has a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Resources<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> property.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> is a base class that controls inherit from, and it has a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Resources<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> property.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>So, you can add a local resource dictionary to any <bpt id="p1">**</bpt>FrameworkElement<ept id="p1">**</ept>.</source>
          <target state="new">So, you can add a local resource dictionary to any <bpt id="p1">**</bpt>FrameworkElement<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Here, a resource dictionary is added to a page element.</source>
          <target state="new">Here, a resource dictionary is added to a page element.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Here, both the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept> and the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Border<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> have resource dictionaries, and they both have a resource called "greeting".</source>
          <target state="new">Here, both the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept> and the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Border<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> have resource dictionaries, and they both have a resource called "greeting".</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> is inside the <bpt id="p3">**</bpt>Border<ept id="p3">**</ept>, so its resource lookup looks first to the <bpt id="p4">**</bpt>Border<ept id="p4">**</ept>’s resources, then the <bpt id="p5">**</bpt>Page<ept id="p5">**</ept>’s resources, and then the <bpt id="p6">[</bpt><bpt id="p7">**</bpt>Application<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br242324)</ept> resources.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> is inside the <bpt id="p3">**</bpt>Border<ept id="p3">**</ept>, so its resource lookup looks first to the <bpt id="p4">**</bpt>Border<ept id="p4">**</ept>’s resources, then the <bpt id="p5">**</bpt>Page<ept id="p5">**</ept>’s resources, and then the <bpt id="p6">[</bpt><bpt id="p7">**</bpt>Application<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/br242324)</ept> resources.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> will read "Hola mundo".</source>
          <target state="new">The <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> will read "Hola mundo".</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To access that element’s resources from code, use that element’s <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> property.</source>
          <target state="new">To access that element’s resources from code, use that element’s <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> property.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Accessing a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>’s resources in code, rather than XAML, will look only in that dictionary, not in parent element’s dictionaries.</source>
          <target state="new">Accessing a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept>’s resources in code, rather than XAML, will look only in that dictionary, not in parent element’s dictionaries.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Merged resource dictionaries</source>
          <target state="new">Merged resource dictionaries</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>merged resource dictionary<ept id="p1">*</ept> combines one resource dictionary into another, usually in another file.</source>
          <target state="new">A <bpt id="p1">*</bpt>merged resource dictionary<ept id="p1">*</ept> combines one resource dictionary into another, usually in another file.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>You can create a resource dictionary file in Microsoft Visual Studio by using the <bpt id="p2">**</bpt>Add <ph id="ph2">&amp;gt;</ph> New Item… <ph id="ph3">&amp;gt;</ph> Resource Dictionary<ept id="p2">**</ept> option from the <bpt id="p3">**</bpt>Project<ept id="p3">**</ept> menu.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>You can create a resource dictionary file in Microsoft Visual Studio by using the <bpt id="p2">**</bpt>Add <ph id="ph2">&amp;gt;</ph> New Item… <ph id="ph3">&amp;gt;</ph> Resource Dictionary<ept id="p2">**</ept> option from the <bpt id="p3">**</bpt>Project<ept id="p3">**</ept> menu.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Here, you define a resource dictionary in a separate XAML file called Dictionary1.xaml.</source>
          <target state="new">Here, you define a resource dictionary in a separate XAML file called Dictionary1.xaml.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To use that dictionary, you merge it with your page’s dictionary:</source>
          <target state="new">To use that dictionary, you merge it with your page’s dictionary:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Here's what happens in this example.</source>
          <target state="new">Here's what happens in this example.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`&lt;Page.Resources&gt;`</ph>, you declare <ph id="ph2">`&lt;ResourceDictionary&gt;`</ph>.</source>
          <target state="new">In <ph id="ph1">`&lt;Page.Resources&gt;`</ph>, you declare <ph id="ph2">`&lt;ResourceDictionary&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The XAML framework implicitly creates a resource dictionary for you when you add resources to <ph id="ph1">`&lt;Page.Resources&gt;`</ph>; however, in this case, you don’t want just any resource dictionary, you want one that contains merged dictionaries.</source>
          <target state="new">The XAML framework implicitly creates a resource dictionary for you when you add resources to <ph id="ph1">`&lt;Page.Resources&gt;`</ph>; however, in this case, you don’t want just any resource dictionary, you want one that contains merged dictionaries.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>So you declare <ph id="ph1">`&lt;ResourceDictionary&gt;`</ph>, then add things to its <ph id="ph2">`&lt;ResourceDictionary.MergedDictionaries&gt;`</ph> collection.</source>
          <target state="new">So you declare <ph id="ph1">`&lt;ResourceDictionary&gt;`</ph>, then add things to its <ph id="ph2">`&lt;ResourceDictionary.MergedDictionaries&gt;`</ph> collection.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Each of those entries takes the form <ph id="ph1">`&lt;ResourceDictionary Source="Dictionary1.xaml"/&gt;`</ph>.</source>
          <target state="new">Each of those entries takes the form <ph id="ph1">`&lt;ResourceDictionary Source="Dictionary1.xaml"/&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To add more than one dictionary, just add a <ph id="ph1">`&lt;ResourceDictionary Source="Dictionary2.xaml"/&gt;`</ph> entry after the first entry.</source>
          <target state="new">To add more than one dictionary, just add a <ph id="ph1">`&lt;ResourceDictionary Source="Dictionary2.xaml"/&gt;`</ph> entry after the first entry.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`&lt;ResourceDictionary.MergedDictionaries&gt;…&lt;/ResourceDictionary.MergedDictionaries&gt;`</ph>, you can optionally put additional resources in your main dictionary.</source>
          <target state="new">After <ph id="ph1">`&lt;ResourceDictionary.MergedDictionaries&gt;…&lt;/ResourceDictionary.MergedDictionaries&gt;`</ph>, you can optionally put additional resources in your main dictionary.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You use resources from a merged to dictionary just like a regular dictionary.</source>
          <target state="new">You use resources from a merged to dictionary just like a regular dictionary.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the example above, <ph id="ph1">`{StaticResource brush}`</ph> finds the resource in the child/merged dictionary (Dictionary1.xaml), while <ph id="ph2">`{StaticResource greeting}`</ph> finds its resource in the main page dictionary.</source>
          <target state="new">In the example above, <ph id="ph1">`{StaticResource brush}`</ph> finds the resource in the child/merged dictionary (Dictionary1.xaml), while <ph id="ph2">`{StaticResource greeting}`</ph> finds its resource in the main page dictionary.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the resource-lookup sequence, a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> dictionary is checked only after a check of all the other keyed resources of that <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ResourceDictionary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>.</source>
          <target state="new">In the resource-lookup sequence, a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> dictionary is checked only after a check of all the other keyed resources of that <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ResourceDictionary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>After searching that level, the lookup reaches the merged dictionaries, and each item in <bpt id="p1">**</bpt>MergedDictionaries<ept id="p1">**</ept> is checked.</source>
          <target state="new">After searching that level, the lookup reaches the merged dictionaries, and each item in <bpt id="p1">**</bpt>MergedDictionaries<ept id="p1">**</ept> is checked.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If multiple merged dictionaries exist, these dictionaries are checked in the inverse of the order in which they are declared in the <bpt id="p1">**</bpt>MergedDictionaries<ept id="p1">**</ept> property.</source>
          <target state="new">If multiple merged dictionaries exist, these dictionaries are checked in the inverse of the order in which they are declared in the <bpt id="p1">**</bpt>MergedDictionaries<ept id="p1">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the following example, if both Dictionary2.xaml and Dictionary1.xaml declared the same key, the key from Dictionary2.xaml is used first because it's last in the <bpt id="p1">**</bpt>MergedDictionaries<ept id="p1">**</ept> set.</source>
          <target state="new">In the following example, if both Dictionary2.xaml and Dictionary1.xaml declared the same key, the key from Dictionary2.xaml is used first because it's last in the <bpt id="p1">**</bpt>MergedDictionaries<ept id="p1">**</ept> set.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Within the scope of any one <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, the dictionary is checked for key uniqueness.</source>
          <target state="new">Within the scope of any one <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, the dictionary is checked for key uniqueness.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, that scope does not extend across different items in different <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> files.</source>
          <target state="new">However, that scope does not extend across different items in different <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> files.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can use the combination of the lookup sequence and lack of unique key enforcement across merged-dictionary scopes to create a fallback value sequence of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> resources.</source>
          <target state="new">You can use the combination of the lookup sequence and lack of unique key enforcement across merged-dictionary scopes to create a fallback value sequence of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> resources.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, you might store user preferences for a particular brush color in the last merged resource dictionary in the sequence, using a resource dictionary that synchronizes to your app's state and user preference data.</source>
          <target state="new">For example, you might store user preferences for a particular brush color in the last merged resource dictionary in the sequence, using a resource dictionary that synchronizes to your app's state and user preference data.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>However, if no user preferences exist yet, you can define that same key string for a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> resource in the initial <bpt id="p2">[</bpt><bpt id="p3">**</bpt>MergedDictionaries<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> file, and it can serve as the fallback value.</source>
          <target state="new">However, if no user preferences exist yet, you can define that same key string for a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> resource in the initial <bpt id="p2">[</bpt><bpt id="p3">**</bpt>MergedDictionaries<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> file, and it can serve as the fallback value.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remember that any value you provide in a primary resource dictionary is always checked before the merged dictionaries are checked, so if you want to use the fallback technique, don't define that resource in a primary resource dictionary.</source>
          <target state="new">Remember that any value you provide in a primary resource dictionary is always checked before the merged dictionaries are checked, so if you want to use the fallback technique, don't define that resource in a primary resource dictionary.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Theme resources and theme dictionaries</source>
          <target state="new">Theme resources and theme dictionaries</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>ThemeResource<ept id="p1">](../xaml-platform/themeresource-markup-extension.md)</ept> is similar to a <bpt id="p2">[</bpt>StaticResource<ept id="p2">](../xaml-platform/staticresource-markup-extension.md)</ept>, but the resource lookup is reevaluated when the theme changes.</source>
          <target state="new">A <bpt id="p1">[</bpt>ThemeResource<ept id="p1">](../xaml-platform/themeresource-markup-extension.md)</ept> is similar to a <bpt id="p2">[</bpt>StaticResource<ept id="p2">](../xaml-platform/staticresource-markup-extension.md)</ept>, but the resource lookup is reevaluated when the theme changes.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In this example, you set the foreground of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> to a value from the current theme.</source>
          <target state="new">In this example, you set the foreground of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> to a value from the current theme.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A theme dictionary is a special type of merged dictionary that holds the resources that vary with the theme a user is currently using on his or her device.</source>
          <target state="new">A theme dictionary is a special type of merged dictionary that holds the resources that vary with the theme a user is currently using on his or her device.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example, the "light" theme might use a white color brush whereas the "dark" theme might use a dark color brush.</source>
          <target state="new">For example, the "light" theme might use a white color brush whereas the "dark" theme might use a dark color brush.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The brush changes the resource that it resolves to, but otherwise the composition of a control that uses the brush as a resource could be the same.</source>
          <target state="new">The brush changes the resource that it resolves to, but otherwise the composition of a control that uses the brush as a resource could be the same.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To reproduce the theme-switching behavior in your own templates and styles, instead of using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> as the property to merge items into the main dictionaries, use the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ThemeDictionaries<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208807)</ept> property.</source>
          <target state="new">To reproduce the theme-switching behavior in your own templates and styles, instead of using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> as the property to merge items into the main dictionaries, use the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ThemeDictionaries<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208807)</ept> property.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> element within <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ThemeDictionaries<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208807)</ept> must have an <bpt id="p5">[</bpt>x:Key<ept id="p5">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> value.</source>
          <target state="new">Each <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> element within <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ThemeDictionaries<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208807)</ept> must have an <bpt id="p5">[</bpt>x:Key<ept id="p5">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> value.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The value is a string that names the relevant theme—for example, "Default", "Dark", "Light", or "HighContrast".</source>
          <target state="new">The value is a string that names the relevant theme—for example, "Default", "Dark", "Light", or "HighContrast".</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Typically, <ph id="ph1">`Dictionary1`</ph> and <ph id="ph2">`Dictionary2`</ph> will define resources that have the same names but different values.</source>
          <target state="new">Typically, <ph id="ph1">`Dictionary1`</ph> and <ph id="ph2">`Dictionary2`</ph> will define resources that have the same names but different values.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Here, you use red text for the light theme and blue text for the dark theme.</source>
          <target state="new">Here, you use red text for the light theme and blue text for the dark theme.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In this example, you set the foreground of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> to a value from the current theme.</source>
          <target state="new">In this example, you set the foreground of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> to a value from the current theme.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For theme dictionaries, the active dictionary to be used for resource lookup changes dynamically, whenever <bpt id="p1">[</bpt>ThemeResource markup extension<ept id="p1">](../xaml-platform/themeresource-markup-extension.md)</ept> is used to make the reference and the system detects a theme change.</source>
          <target state="new">For theme dictionaries, the active dictionary to be used for resource lookup changes dynamically, whenever <bpt id="p1">[</bpt>ThemeResource markup extension<ept id="p1">](../xaml-platform/themeresource-markup-extension.md)</ept> is used to make the reference and the system detects a theme change.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The lookup behavior that is done by the system is based on mapping the active theme to the <bpt id="p1">[</bpt>x:Key<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> of a specific theme dictionary.</source>
          <target state="new">The lookup behavior that is done by the system is based on mapping the active theme to the <bpt id="p1">[</bpt>x:Key<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204787)</ept> of a specific theme dictionary.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It can be useful to examine the way that the theme dictionaries are structured in the default XAML design resources, which parallel the templates that the Windows Runtime uses by default for its controls.</source>
          <target state="new">It can be useful to examine the way that the theme dictionaries are structured in the default XAML design resources, which parallel the templates that the Windows Runtime uses by default for its controls.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Open the XAML files in <ph id="ph1">\\</ph>(Program Files)<ph id="ph2">\\</ph>Windows Kits<ph id="ph3">\\</ph>10<ph id="ph4">\\</ph>DesignTime<ph id="ph5">\\</ph>CommonConfiguration<ph id="ph6">\\</ph>Neutral<ph id="ph7">\\</ph>UAP<ph id="ph8">\\&amp;lt;</ph>SDK version<ph id="ph9">&amp;gt;\\</ph>Generic using a text editor or your IDE.</source>
          <target state="new">Open the XAML files in <ph id="ph1">\\</ph>(Program Files)<ph id="ph2">\\</ph>Windows Kits<ph id="ph3">\\</ph>10<ph id="ph4">\\</ph>DesignTime<ph id="ph5">\\</ph>CommonConfiguration<ph id="ph6">\\</ph>Neutral<ph id="ph7">\\</ph>UAP<ph id="ph8">\\&amp;lt;</ph>SDK version<ph id="ph9">&amp;gt;\\</ph>Generic using a text editor or your IDE.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Note how the theme dictionaries are defined first in generic.xaml, and how each theme dictionary defines the same keys.</source>
          <target state="new">Note how the theme dictionaries are defined first in generic.xaml, and how each theme dictionary defines the same keys.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Each such key is then referenced by elements of composition in the various keyed elements that are outside the theme dictionaries and defined later in the XAML.</source>
          <target state="new">Each such key is then referenced by elements of composition in the various keyed elements that are outside the theme dictionaries and defined later in the XAML.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>There's also a separate themeresources.xaml file for design that contains only the theme resources and extra templates, not the default control templates.</source>
          <target state="new">There's also a separate themeresources.xaml file for design that contains only the theme resources and extra templates, not the default control templates.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The theme areas are duplicates of what you'd see in generic.xaml.</source>
          <target state="new">The theme areas are duplicates of what you'd see in generic.xaml.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When you use XAML design tools to edit copies of styles and templates, the design tools extract sections from the XAML design resource dictionaries and place them as local copies of XAML dictionary elements that are part of your app and project.</source>
          <target state="new">When you use XAML design tools to edit copies of styles and templates, the design tools extract sections from the XAML design resource dictionaries and place them as local copies of XAML dictionary elements that are part of your app and project.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For more info and for a list of the theme-specific and system resources that are available to your app, see <bpt id="p1">[</bpt>XAML theme resources<ept id="p1">](xaml-theme-resources.md)</ept>.</source>
          <target state="new">For more info and for a list of the theme-specific and system resources that are available to your app, see <bpt id="p1">[</bpt>XAML theme resources<ept id="p1">](xaml-theme-resources.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Lookup behavior for XAML resource references</source>
          <target state="new">Lookup behavior for XAML resource references</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Lookup behavior<ept id="p1">*</ept> is the term that describes how the XAML resources system tries to find a XAML resource.</source>
          <target state="new"><bpt id="p1">*</bpt>Lookup behavior<ept id="p1">*</ept> is the term that describes how the XAML resources system tries to find a XAML resource.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The lookup occurs when a key is referenced as a XAML resource reference from somewhere in the app's XAML.</source>
          <target state="new">The lookup occurs when a key is referenced as a XAML resource reference from somewhere in the app's XAML.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>First, the resources system has predictable behavior for where it will check for the existence of a resource based on scope.</source>
          <target state="new">First, the resources system has predictable behavior for where it will check for the existence of a resource based on scope.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If a resource isn't found in the initial scope, the scope expands.</source>
          <target state="new">If a resource isn't found in the initial scope, the scope expands.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The lookup behavior continues on throughout the locations and scopes that a XAML resource could possibly be defined by an app or by the system.</source>
          <target state="new">The lookup behavior continues on throughout the locations and scopes that a XAML resource could possibly be defined by an app or by the system.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If all possible resource lookup attempts fail, an error often results.</source>
          <target state="new">If all possible resource lookup attempts fail, an error often results.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>It's usually possible to eliminate these errors during the development process.</source>
          <target state="new">It's usually possible to eliminate these errors during the development process.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The lookup behavior for XAML resource references starts with the object where the actual usage is applied and its own <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> property.</source>
          <target state="new">The lookup behavior for XAML resource references starts with the object where the actual usage is applied and its own <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> property.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> exists there, that <bpt id="p3">**</bpt>ResourceDictionary<ept id="p3">**</ept> is checked for an item that has the requested key.</source>
          <target state="new">If a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> exists there, that <bpt id="p3">**</bpt>ResourceDictionary<ept id="p3">**</ept> is checked for an item that has the requested key.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This first level of lookup is rarely relevant because you usually do not define and then reference a resource on the same object.</source>
          <target state="new">This first level of lookup is rarely relevant because you usually do not define and then reference a resource on the same object.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In fact, a <bpt id="p1">**</bpt>Resources<ept id="p1">**</ept> property often doesn't exist here.</source>
          <target state="new">In fact, a <bpt id="p1">**</bpt>Resources<ept id="p1">**</ept> property often doesn't exist here.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can make XAML resource references from nearly anywhere in XAML; you aren't limited to properties of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> subclasses.</source>
          <target state="new">You can make XAML resource references from nearly anywhere in XAML; you aren't limited to properties of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> subclasses.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The lookup sequence then checks the next parent object in the runtime object tree of the app.</source>
          <target state="new">The lookup sequence then checks the next parent object in the runtime object tree of the app.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> exists and holds a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ResourceDictionary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, the dictionary item with the specified key string is requested.</source>
          <target state="new">If a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept> exists and holds a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ResourceDictionary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, the dictionary item with the specified key string is requested.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If the resource is found, the lookup sequence stops and the object is provided to the location where the reference was made.</source>
          <target state="new">If the resource is found, the lookup sequence stops and the object is provided to the location where the reference was made.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Otherwise, the lookup behavior advances to the next parent level towards the object tree root.</source>
          <target state="new">Otherwise, the lookup behavior advances to the next parent level towards the object tree root.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The search continues recursively upwards until the root element of the XAML is reached, exhausting the search of all possible immediate resource locations.</source>
          <target state="new">The search continues recursively upwards until the root element of the XAML is reached, exhausting the search of all possible immediate resource locations.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>It is a common practice to define all the immediate resources at the root level of a page, both to take advantage of this resource-lookup behavior and also as a convention of XAML markup style.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept><ph id="ph1">&amp;nbsp;&amp;nbsp;</ph>It is a common practice to define all the immediate resources at the root level of a page, both to take advantage of this resource-lookup behavior and also as a convention of XAML markup style.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If the requested resource is not found in the immediate resources, the next lookup step is to check the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242338)</ept> property.</source>
          <target state="new">If the requested resource is not found in the immediate resources, the next lookup step is to check the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242338)</ept> property.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Application.Resources<ept id="p1">**</ept> is the best place to put any app-specific resources that are referenced by multiple pages in your app's navigation structure.</source>
          <target state="new"><bpt id="p1">**</bpt>Application.Resources<ept id="p1">**</ept> is the best place to put any app-specific resources that are referenced by multiple pages in your app's navigation structure.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Control templates have another possible location in the reference lookup: theme dictionaries.</source>
          <target state="new">Control templates have another possible location in the reference lookup: theme dictionaries.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A theme dictionary is a single XAML file that has a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> element as its root.</source>
          <target state="new">A theme dictionary is a single XAML file that has a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> element as its root.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The theme dictionary might be a merged dictionary from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242338)</ept>.</source>
          <target state="new">The theme dictionary might be a merged dictionary from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242338)</ept>.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The theme dictionary might also be the control-specific theme dictionary for a templated custom control.</source>
          <target state="new">The theme dictionary might also be the control-specific theme dictionary for a templated custom control.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Finally, there is a resource lookup against platform resources.</source>
          <target state="new">Finally, there is a resource lookup against platform resources.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Platform resources include the control templates that are defined for each of the system UI themes, and which define the default appearance of all the controls that you use for UI in a Windows Runtime app.</source>
          <target state="new">Platform resources include the control templates that are defined for each of the system UI themes, and which define the default appearance of all the controls that you use for UI in a Windows Runtime app.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Platform resources also include a set of named resources that relate to system-wide appearance and themes.</source>
          <target state="new">Platform resources also include a set of named resources that relate to system-wide appearance and themes.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>These resources are technically a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> item, and thus are available for lookup from XAML or code once the app has loaded.</source>
          <target state="new">These resources are technically a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept> item, and thus are available for lookup from XAML or code once the app has loaded.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For example, the system theme resources include a resource named "SystemColorWindowTextColor" that provides a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Color<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept> definition to match app text color to a system window's text color that comes from the operating system and user preferences.</source>
          <target state="new">For example, the system theme resources include a resource named "SystemColorWindowTextColor" that provides a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Color<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept> definition to match app text color to a system window's text color that comes from the operating system and user preferences.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Other XAML styles for your app can refer to this style, or your code can get a resource lookup value (and cast it to <bpt id="p1">**</bpt>Color<ept id="p1">**</ept> in the example case).</source>
          <target state="new">Other XAML styles for your app can refer to this style, or your code can get a resource lookup value (and cast it to <bpt id="p1">**</bpt>Color<ept id="p1">**</ept> in the example case).</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more info and for a list of the theme-specific and system resources that are available to a Windows Store app that uses XAML, see <bpt id="p1">[</bpt>XAML theme resources<ept id="p1">](xaml-theme-resources.md)</ept>.</source>
          <target state="new">For more info and for a list of the theme-specific and system resources that are available to a Windows Store app that uses XAML, see <bpt id="p1">[</bpt>XAML theme resources<ept id="p1">](xaml-theme-resources.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the requested key is still not found in any of these locations, a XAML parsing error/exception occurs.</source>
          <target state="new">If the requested key is still not found in any of these locations, a XAML parsing error/exception occurs.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>In certain circumstances, the XAML parse exception may be a run-time exception that is not detected either by a XAML markup compile action, or by a XAML design environment.</source>
          <target state="new">In certain circumstances, the XAML parse exception may be a run-time exception that is not detected either by a XAML markup compile action, or by a XAML design environment.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Because of the tiered lookup behavior for resource dictionaries, you can deliberately define multiple resource items that each have the same string value as the key, as long as each resource is defined at a different level.</source>
          <target state="new">Because of the tiered lookup behavior for resource dictionaries, you can deliberately define multiple resource items that each have the same string value as the key, as long as each resource is defined at a different level.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>In other words, although keys must be unique within any given <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, the uniqueness requirement does not extend to the lookup behavior sequence as a whole.</source>
          <target state="new">In other words, although keys must be unique within any given <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, the uniqueness requirement does not extend to the lookup behavior sequence as a whole.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>During lookup, only the first such object that's successfully retrieved is used for the XAML resource reference, and then the lookup stops.</source>
          <target state="new">During lookup, only the first such object that's successfully retrieved is used for the XAML resource reference, and then the lookup stops.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You could use this behavior to request the same XAML resource by key at various positions within your app's XAML but get different resources back, depending on the scope from which the XAML resource reference was made and how that particular lookup behaves.</source>
          <target state="new">You could use this behavior to request the same XAML resource by key at various positions within your app's XAML but get different resources back, depending on the scope from which the XAML resource reference was made and how that particular lookup behaves.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Forward references within a ResourceDictionary</source>
          <target state="new">Forward references within a ResourceDictionary</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>XAML resource references within a particular resource dictionary must reference a resource that has already been defined with a key, and that resource must appear lexically before the resource reference.</source>
          <target state="new">XAML resource references within a particular resource dictionary must reference a resource that has already been defined with a key, and that resource must appear lexically before the resource reference.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Forward references cannot be resolved by a XAML resource reference.</source>
          <target state="new">Forward references cannot be resolved by a XAML resource reference.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For this reason, if you use XAML resource references from within another resource, you must design your resource dictionary structure so that the resources that are used by other resources are defined first in a resource dictionary.</source>
          <target state="new">For this reason, if you use XAML resource references from within another resource, you must design your resource dictionary structure so that the resources that are used by other resources are defined first in a resource dictionary.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Resources defined at the app level cannot make references to immediate resources.</source>
          <target state="new">Resources defined at the app level cannot make references to immediate resources.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This is equivalent to attempting a forward reference, because the app resources are actually processed first (when the app first starts, and before any navigation-page content is loaded).</source>
          <target state="new">This is equivalent to attempting a forward reference, because the app resources are actually processed first (when the app first starts, and before any navigation-page content is loaded).</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>However, any immediate resource can make a reference to an app resource, and this can be a useful technique for avoiding forward-reference situations.</source>
          <target state="new">However, any immediate resource can make a reference to an app resource, and this can be a useful technique for avoiding forward-reference situations.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>XAML resources must be shareable</source>
          <target state="new">XAML resources must be shareable</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For an object to exist in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, that object must be <bpt id="p3">*</bpt>shareable<ept id="p3">*</ept>.</source>
          <target state="new">For an object to exist in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, that object must be <bpt id="p3">*</bpt>shareable<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Being shareable is required because, when the object tree of an app is constructed and used at run time, objects cannot exist at multiple locations in the tree.</source>
          <target state="new">Being shareable is required because, when the object tree of an app is constructed and used at run time, objects cannot exist at multiple locations in the tree.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Internally, the resource system creates copies of resource values to use in the object graph of your app when each XAML resource is requested.</source>
          <target state="new">Internally, the resource system creates copies of resource values to use in the object graph of your app when each XAML resource is requested.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> and Windows Runtime XAML in general supports these objects for shareable usage:</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> and Windows Runtime XAML in general supports these objects for shareable usage:</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Styles and templates (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> and classes derived from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208753)</ept>)</source>
          <target state="new">Styles and templates (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> and classes derived from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208753)</ept>)</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Brushes and colors (classes derived from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Brush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept>, and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Color<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept> values)</source>
          <target state="new">Brushes and colors (classes derived from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Brush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept>, and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Color<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh673723)</ept> values)</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Animation types including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Storyboard<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept></source>
          <target state="new">Animation types including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Storyboard<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept></target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Transforms (classes derived from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GeneralTransform<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210034)</ept>)</source>
          <target state="new">Transforms (classes derived from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GeneralTransform<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210034)</ept>)</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Matrix<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210127)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Matrix3D<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br243266)</ept></source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Matrix<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br210127)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Matrix3D<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br243266)</ept></target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Point<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> values</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Point<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225870)</ept> values</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Certain other UI-related structures such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Thickness<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208864)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CornerRadius<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242343)</ept></source>
          <target state="new">Certain other UI-related structures such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Thickness<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208864)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CornerRadius<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242343)</ept></target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>XAML intrinsic data types</source>
          <target state="new">XAML intrinsic data types</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>You can also use custom types as a shareable resource if you follow the necessary implementation patterns.</source>
          <target state="new">You can also use custom types as a shareable resource if you follow the necessary implementation patterns.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You define such classes in your backing code (or in runtime components that you include) and then instantiate those classes in XAML as a resource.</source>
          <target state="new">You define such classes in your backing code (or in runtime components that you include) and then instantiate those classes in XAML as a resource.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Examples are object data sources and <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209903)</ept> implementations for data binding.</source>
          <target state="new">Examples are object data sources and <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209903)</ept> implementations for data binding.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Custom types must have a default constructor, because that's what a XAML parser uses to instantiate a class.</source>
          <target state="new">Custom types must have a default constructor, because that's what a XAML parser uses to instantiate a class.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Custom types used as resources can't have the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> class in their inheritance, because a <bpt id="p3">**</bpt>UIElement<ept id="p3">**</ept> can never be shareable (it's always intended to represent exactly one UI element that exists at one position in the object graph of your runtime app).</source>
          <target state="new">Custom types used as resources can't have the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> class in their inheritance, because a <bpt id="p3">**</bpt>UIElement<ept id="p3">**</ept> can never be shareable (it's always intended to represent exactly one UI element that exists at one position in the object graph of your runtime app).</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>UserControl usage scope</source>
          <target state="new">UserControl usage scope</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UserControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227647)</ept> element has a special situation for resource-lookup behavior because it has the inherent concepts of a definition scope and a usage scope.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UserControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227647)</ept> element has a special situation for resource-lookup behavior because it has the inherent concepts of a definition scope and a usage scope.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>UserControl<ept id="p1">**</ept> that makes a XAML resource reference from its definition scope must be able to support the lookup of that resource within its own definition-scope lookup sequence—that is, it cannot access app resources.</source>
          <target state="new">A <bpt id="p1">**</bpt>UserControl<ept id="p1">**</ept> that makes a XAML resource reference from its definition scope must be able to support the lookup of that resource within its own definition-scope lookup sequence—that is, it cannot access app resources.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>From a <bpt id="p1">**</bpt>UserControl<ept id="p1">**</ept> usage scope, a resource reference is treated as being within the lookup sequence towards its usage page root (just like any other resource reference made from an object in a loaded object tree) and can access app resources.</source>
          <target state="new">From a <bpt id="p1">**</bpt>UserControl<ept id="p1">**</ept> usage scope, a resource reference is treated as being within the lookup sequence towards its usage page root (just like any other resource reference made from an object in a loaded object tree) and can access app resources.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>ResourceDictionary and XamlReader.Load</source>
          <target state="new">ResourceDictionary and XamlReader.Load</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> as either the root or a part of the XAML input for the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>XamlReader.Load<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br228048)</ept> method.</source>
          <target state="new">You can use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> as either the root or a part of the XAML input for the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>XamlReader.Load<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br228048)</ept> method.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>You can also include XAML resource references in that XAML if all such references are completely self-contained in the XAML submitted for loading.</source>
          <target state="new">You can also include XAML resource references in that XAML if all such references are completely self-contained in the XAML submitted for loading.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XamlReader.Load<ept id="p1">**</ept> parses the XAML in a context that is not aware of any other <bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept> objects, not even <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Application.Resources<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242338)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>XamlReader.Load<ept id="p1">**</ept> parses the XAML in a context that is not aware of any other <bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept> objects, not even <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Application.Resources<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242338)</ept>.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Also, don't use <ph id="ph1">`{ThemeResource}`</ph> from within XAML submitted to <bpt id="p1">**</bpt>XamlReader.Load<ept id="p1">**</ept>.</source>
          <target state="new">Also, don't use <ph id="ph1">`{ThemeResource}`</ph> from within XAML submitted to <bpt id="p1">**</bpt>XamlReader.Load<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Using a ResourceDictionary from code</source>
          <target state="new">Using a ResourceDictionary from code</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Most of the scenarios for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> are handled exclusively in XAML.</source>
          <target state="new">Most of the scenarios for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> are handled exclusively in XAML.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You declare the <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> container and the resources within as a XAML file or set of XAML nodes in a UI definition file.</source>
          <target state="new">You declare the <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> container and the resources within as a XAML file or set of XAML nodes in a UI definition file.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>And then you use XAML resource references to request those resources from other parts of XAML.</source>
          <target state="new">And then you use XAML resource references to request those resources from other parts of XAML.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Still, there are certain scenarios where your app might want to adjust the contents of a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> using code that executes while the app is running, or at least to query the contents of a <bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept> to see if a resource is already defined.</source>
          <target state="new">Still, there are certain scenarios where your app might want to adjust the contents of a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> using code that executes while the app is running, or at least to query the contents of a <bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept> to see if a resource is already defined.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>These code calls are made on a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> instance, so you must first retrieve one—either an immediate <bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept> somewhere in the object tree by getting <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.Resources<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept>, or <ph id="ph1">`Application.Current.Resources`</ph>.</source>
          <target state="new">These code calls are made on a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> instance, so you must first retrieve one—either an immediate <bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept> somewhere in the object tree by getting <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.Resources<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208740)</ept>, or <ph id="ph1">`Application.Current.Resources`</ph>.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>In C<ph id="ph1">\#</ph> or Microsoft Visual Basic code, you can reference a resource in a given <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> by using the indexer (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>Item<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/jj603134)</ept>).</source>
          <target state="new">In C<ph id="ph1">\#</ph> or Microsoft Visual Basic code, you can reference a resource in a given <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> by using the indexer (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>Item<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/jj603134)</ept>).</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> is a string-keyed dictionary, so the indexer uses the string key instead of an integer index.</source>
          <target state="new">A <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> is a string-keyed dictionary, so the indexer uses the string key instead of an integer index.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>In Visual C++ component extensions (C++/CX) code, use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Lookup<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208800)</ept>.</source>
          <target state="new">In Visual C++ component extensions (C++/CX) code, use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Lookup<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208800)</ept>.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>When using code to examine or change a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, the behavior for APIs like <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Lookup<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208800)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Item<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/jj603134)</ept> does not traverse from immediate resources to app resources; that's a XAML parser behavior that only happens as XAML pages are loaded.</source>
          <target state="new">When using code to examine or change a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, the behavior for APIs like <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Lookup<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208800)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Item<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/jj603134)</ept> does not traverse from immediate resources to app resources; that's a XAML parser behavior that only happens as XAML pages are loaded.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>At run time, scope for keys is self-contained to the <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> instance that you are using at the time.</source>
          <target state="new">At run time, scope for keys is self-contained to the <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> instance that you are using at the time.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>However, that scope does extend into <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept>.</source>
          <target state="new">However, that scope does extend into <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept>.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Also, if you request a key that does not exist in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, there may not be an error; the return value may simply be provided as <bpt id="p3">**</bpt>null<ept id="p3">**</ept>.</source>
          <target state="new">Also, if you request a key that does not exist in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>, there may not be an error; the return value may simply be provided as <bpt id="p3">**</bpt>null<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>You may still get an error, though, if you try to use the returned <bpt id="p1">**</bpt>null<ept id="p1">**</ept> as a value.</source>
          <target state="new">You may still get an error, though, if you try to use the returned <bpt id="p1">**</bpt>null<ept id="p1">**</ept> as a value.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The error would come from the property's setter, not your <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> call.</source>
          <target state="new">The error would come from the property's setter, not your <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> call.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The only way you'd avoid an error is if the property accepted <bpt id="p1">**</bpt>null<ept id="p1">**</ept> as a valid value.</source>
          <target state="new">The only way you'd avoid an error is if the property accepted <bpt id="p1">**</bpt>null<ept id="p1">**</ept> as a valid value.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Note how this behavior contrasts with XAML lookup behavior at XAML parse time; a failure to resolve the provided key from XAML at parse time results in a XAML parse error, even in cases where the property could have accepted <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</source>
          <target state="new">Note how this behavior contrasts with XAML lookup behavior at XAML parse time; a failure to resolve the provided key from XAML at parse time results in a XAML parse error, even in cases where the property could have accepted <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Merged resource dictionaries are included into the index scope of the primary resource dictionary that references the merged dictionary at run time.</source>
          <target state="new">Merged resource dictionaries are included into the index scope of the primary resource dictionary that references the merged dictionary at run time.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In other words, you can use <bpt id="p1">**</bpt>Item<ept id="p1">**</ept> or <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Lookup<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208800)</ept> of the primary dictionary to find any objects that were actually defined in the merged dictionary.</source>
          <target state="new">In other words, you can use <bpt id="p1">**</bpt>Item<ept id="p1">**</ept> or <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Lookup<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208800)</ept> of the primary dictionary to find any objects that were actually defined in the merged dictionary.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>In this case, the lookup behavior does resemble the parse-time XAML lookup behavior: if there are multiple objects in merged dictionaries that each have the same key, the object from the last-added dictionary is returned.</source>
          <target state="new">In this case, the lookup behavior does resemble the parse-time XAML lookup behavior: if there are multiple objects in merged dictionaries that each have the same key, the object from the last-added dictionary is returned.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>You are permitted to add items to an existing <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> by calling <bpt id="p3">**</bpt>Add<ept id="p3">**</ept> (C<ph id="ph1">\#</ph> or Visual Basic) or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Insert<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208799)</ept> (C++/CX).</source>
          <target state="new">You are permitted to add items to an existing <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> by calling <bpt id="p3">**</bpt>Add<ept id="p3">**</ept> (C<ph id="ph1">\#</ph> or Visual Basic) or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Insert<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208799)</ept> (C++/CX).</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>You could add the items to either immediate resources or app resources.</source>
          <target state="new">You could add the items to either immediate resources or app resources.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Either of these API calls requires a key, which satisfies the requirement that each item in a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> must have a key.</source>
          <target state="new">Either of these API calls requires a key, which satisfies the requirement that each item in a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> must have a key.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>However, items that you add to a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> at run time are not relevant to XAML resource references.</source>
          <target state="new">However, items that you add to a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> at run time are not relevant to XAML resource references.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The necessary lookup for XAML resource references happens when that XAML is first parsed as the app is loaded (or a theme change is detected).</source>
          <target state="new">The necessary lookup for XAML resource references happens when that XAML is first parsed as the app is loaded (or a theme change is detected).</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Resources added to collections at run time weren't available then, and altering the <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> doesn't invalidate an already retrieved resource from it even if you change the value of that resource.</source>
          <target state="new">Resources added to collections at run time weren't available then, and altering the <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> doesn't invalidate an already retrieved resource from it even if you change the value of that resource.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>You also can remove items from a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> at run time, make copies of some or all items, or other operations.</source>
          <target state="new">You also can remove items from a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> at run time, make copies of some or all items, or other operations.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The members listing for <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> indicates which APIs are available.</source>
          <target state="new">The members listing for <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> indicates which APIs are available.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Note that because <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> has a projected API to support its underlying collection interfaces, your API options differ depending on whether you are using C<ph id="ph1">\#</ph> or Visual Basic versus C++/CX.</source>
          <target state="new">Note that because <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> has a projected API to support its underlying collection interfaces, your API options differ depending on whether you are using C<ph id="ph1">\#</ph> or Visual Basic versus C++/CX.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>ResourceDictionary and localization</source>
          <target state="new">ResourceDictionary and localization</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A XAML <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> might initially contain strings that are to be localized.</source>
          <target state="new">A XAML <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> might initially contain strings that are to be localized.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If so, store these strings as project resources instead of in a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept>.</source>
          <target state="new">If so, store these strings as project resources instead of in a <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Take the strings out of the XAML, and instead give the owning element an <bpt id="p1">[</bpt>x:Uid directive<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204791)</ept> value.</source>
          <target state="new">Take the strings out of the XAML, and instead give the owning element an <bpt id="p1">[</bpt>x:Uid directive<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204791)</ept> value.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Then, define a resource in a resources file.</source>
          <target state="new">Then, define a resource in a resources file.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Provide a resource name in the form <bpt id="p1">*</bpt>XUIDValue<ept id="p1">*</ept>.<bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> and a resource value of the string that should be localized.</source>
          <target state="new">Provide a resource name in the form <bpt id="p1">*</bpt>XUIDValue<ept id="p1">*</ept>.<bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> and a resource value of the string that should be localized.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Custom resource lookup</source>
          <target state="new">Custom resource lookup</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For advanced scenarios, you can implement a class that can have different behavior than the XAML resource reference lookup behavior described in this topic.</source>
          <target state="new">For advanced scenarios, you can implement a class that can have different behavior than the XAML resource reference lookup behavior described in this topic.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>To do this, you implement the class <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CustomXamlResourceLoader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br243327)</ept>, and then you can access that behavior by using the <bpt id="p3">[</bpt>CustomResource markup extension<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt185580)</ept> for resource references rather than using <bpt id="p4">[</bpt>StaticResource<ept id="p4">](../xaml-platform/staticresource-markup-extension.md)</ept> or <bpt id="p5">[</bpt>ThemeResource<ept id="p5">](../xaml-platform/themeresource-markup-extension.md)</ept>.</source>
          <target state="new">To do this, you implement the class <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CustomXamlResourceLoader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br243327)</ept>, and then you can access that behavior by using the <bpt id="p3">[</bpt>CustomResource markup extension<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt185580)</ept> for resource references rather than using <bpt id="p4">[</bpt>StaticResource<ept id="p4">](../xaml-platform/staticresource-markup-extension.md)</ept> or <bpt id="p5">[</bpt>ThemeResource<ept id="p5">](../xaml-platform/themeresource-markup-extension.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Most apps won't have scenarios that require this.</source>
          <target state="new">Most apps won't have scenarios that require this.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CustomXamlResourceLoader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br243327)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CustomXamlResourceLoader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br243327)</ept>.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
          <target state="new">This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</source>
          <target state="new">If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>ResourceDictionary</source>
          <target state="new">ResourceDictionary</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>XAML overview</source>
          <target state="new">XAML overview</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>StaticResource markup extension</source>
          <target state="new">StaticResource markup extension</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>ThemeResource markup extension</source>
          <target state="new">ThemeResource markup extension</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>XAML theme resources</source>
          <target state="new">XAML theme resources</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Styling controls</source>
          <target state="new">Styling controls</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>x:Key attribute</source>
          <target state="new">x:Key attribute</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>