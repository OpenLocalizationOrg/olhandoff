<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\debug-test-perf\best-practices-for-your-app-s-startup-performance.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf95b9dbce0b164237a3edfd801984a592112c74</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Best practices for your app's startup performance</source>
          <target state="new">Best practices for your app's startup performance</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</source>
          <target state="new">Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Best practices for your app's startup performance</source>
          <target state="new">Best practices for your app's startup performance</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</source>
          <target state="new">Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Best practices for your app's startup performance</source>
          <target state="new">Best practices for your app's startup performance</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In part, users perceive whether your app is fast or slow based on how long it takes to start up.</source>
          <target state="new">In part, users perceive whether your app is fast or slow based on how long it takes to start up.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For the purposes of this topic, an app's startup time begins when the user starts the app, and ends when the user can interact with the app in some meaningful way.</source>
          <target state="new">For the purposes of this topic, an app's startup time begins when the user starts the app, and ends when the user can interact with the app in some meaningful way.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This section provides suggestions on how to get better performance out of your app when it starts.</source>
          <target state="new">This section provides suggestions on how to get better performance out of your app when it starts.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Measuring your app's startup time</source>
          <target state="new">Measuring your app's startup time</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Be sure to start your app a few times before you actually measure its startup time.</source>
          <target state="new">Be sure to start your app a few times before you actually measure its startup time.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This gives you a baseline for your measurement and ensures that you're measuring as reasonably short a startup time as possible.</source>
          <target state="new">This gives you a baseline for your measurement and ensures that you're measuring as reasonably short a startup time as possible.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>By the time your UWP app arrives on your customers' computers, your app has been compiled with the .NET Native toolchain.</source>
          <target state="new">By the time your UWP app arrives on your customers' computers, your app has been compiled with the .NET Native toolchain.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>.NET Native is an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</source>
          <target state="new">.NET Native is an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</source>
          <target state="new">.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Applications built with .NET Native statically link in a custom runtime and the new converged .NET Core that can run on all devices, so they don’t depend on the in-box .NET implementation.</source>
          <target state="new">Applications built with .NET Native statically link in a custom runtime and the new converged .NET Core that can run on all devices, so they don’t depend on the in-box .NET implementation.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On your development machine, by default your app uses .NET Native if you’re building it in “Release” mode, and it uses CoreCLR if you’re building it in “Debug” mode.</source>
          <target state="new">On your development machine, by default your app uses .NET Native if you’re building it in “Release” mode, and it uses CoreCLR if you’re building it in “Debug” mode.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can configure this in Visual Studio from the Build page in “Properties” (C#) or Compile-&gt;Advanced in "My Project" (VB).</source>
          <target state="new">You can configure this in Visual Studio from the Build page in “Properties” (C#) or Compile-&gt;Advanced in "My Project" (VB).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Look for a checkbox that says “Compile with .NET Native Toolchain”.</source>
          <target state="new">Look for a checkbox that says “Compile with .NET Native Toolchain”.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Of course, you should take measurements that are representative of what the end user will experience.</source>
          <target state="new">Of course, you should take measurements that are representative of what the end user will experience.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>So, if you're not sure you're compiling your app to native code on your development machine, you could run the Native Image Generator (Ngen.exe) tool to precompile your app before you measure its startup time.</source>
          <target state="new">So, if you're not sure you're compiling your app to native code on your development machine, you could run the Native Image Generator (Ngen.exe) tool to precompile your app before you measure its startup time.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following procedure describes how to run Ngen.exe to precompile your app.</source>
          <target state="new">The following procedure describes how to run Ngen.exe to precompile your app.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To run Ngen.exe</source>
          <target state="new">To run Ngen.exe</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Run your app at least one time to ensure that Ngen.exe detects it.</source>
          <target state="new">Run your app at least one time to ensure that Ngen.exe detects it.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Task Scheduler<ept id="p1">**</ept> by doing one of the following:</source>
          <target state="new">Open the <bpt id="p1">**</bpt>Task Scheduler<ept id="p1">**</ept> by doing one of the following:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Search for "Task Scheduler" from the start screen.</source>
          <target state="new">Search for "Task Scheduler" from the start screen.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Run "taskschd.msc."</source>
          <target state="new">Run "taskschd.msc."</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the left-hand pane of <bpt id="p1">**</bpt>Task Scheduler<ept id="p1">**</ept>, expand <bpt id="p2">**</bpt>Task Scheduler Library<ept id="p2">**</ept>.</source>
          <target state="new">In the left-hand pane of <bpt id="p1">**</bpt>Task Scheduler<ept id="p1">**</ept>, expand <bpt id="p2">**</bpt>Task Scheduler Library<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Expand <bpt id="p1">**</bpt>Microsoft.<ept id="p1">**</ept></source>
          <target state="new">Expand <bpt id="p1">**</bpt>Microsoft.<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Expand <bpt id="p1">**</bpt>Windows.<ept id="p1">**</ept></source>
          <target state="new">Expand <bpt id="p1">**</bpt>Windows.<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>.NET Framework<ept id="p1">**</ept>.</source>
          <target state="new">Select <bpt id="p1">**</bpt>.NET Framework<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>.NET Framework NGEN 4.x<ept id="p1">**</ept> from the task list.</source>
          <target state="new">Select <bpt id="p1">**</bpt>.NET Framework NGEN 4.x<ept id="p1">**</ept> from the task list.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you are using a 64-bit computer, there is also a <bpt id="p1">**</bpt>.NET Framework NGEN v4.x 64<ept id="p1">**</ept>.</source>
          <target state="new">If you are using a 64-bit computer, there is also a <bpt id="p1">**</bpt>.NET Framework NGEN v4.x 64<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you are building a 64-bit app, select .<bpt id="p1">**</bpt>NET Framework NGEN v4.x 64<ept id="p1">**</ept>.</source>
          <target state="new">If you are building a 64-bit app, select .<bpt id="p1">**</bpt>NET Framework NGEN v4.x 64<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Action<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Run<ept id="p2">**</ept>.</source>
          <target state="new">From the <bpt id="p1">**</bpt>Action<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Run<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Ngen.exe precompiles all the apps on the machine that have been used and do not have native images.</source>
          <target state="new">Ngen.exe precompiles all the apps on the machine that have been used and do not have native images.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If there are a lot of apps that need to be precompiled, this can take a long time, but subsequent runs are much faster.</source>
          <target state="new">If there are a lot of apps that need to be precompiled, this can take a long time, but subsequent runs are much faster.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you recompile your app, the native image is no longer used.</source>
          <target state="new">When you recompile your app, the native image is no longer used.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Instead, the app is just-in-time compiled, which means that it is compiled as the app runs.</source>
          <target state="new">Instead, the app is just-in-time compiled, which means that it is compiled as the app runs.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You must rerun Ngen.exe to get a new native image.</source>
          <target state="new">You must rerun Ngen.exe to get a new native image.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Defer work as long as possible</source>
          <target state="new">Defer work as long as possible</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To increase your app's startup time, do only the work that absolutely needs to be done to let the user start interacting with the app.</source>
          <target state="new">To increase your app's startup time, do only the work that absolutely needs to be done to let the user start interacting with the app.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This can be especially beneficial if you can delay loading additional assemblies.</source>
          <target state="new">This can be especially beneficial if you can delay loading additional assemblies.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The common language runtime loads an assembly the first time it is used.</source>
          <target state="new">The common language runtime loads an assembly the first time it is used.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you can minimize the number of assemblies that are loaded, you might be able to improve your app's startup time and its memory consumption.</source>
          <target state="new">If you can minimize the number of assemblies that are loaded, you might be able to improve your app's startup time and its memory consumption.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Do long-running work independently</source>
          <target state="new">Do long-running work independently</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Your app can be interactive even though there are parts of the app that aren't fully functional.</source>
          <target state="new">Your app can be interactive even though there are parts of the app that aren't fully functional.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, if your app displays data that takes a while to retrieve, you can make that code execute independently of the app's startup code by retrieving the data asynchronously.</source>
          <target state="new">For example, if your app displays data that takes a while to retrieve, you can make that code execute independently of the app's startup code by retrieving the data asynchronously.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the data is available, populate the app's user interface with the data.</source>
          <target state="new">When the data is available, populate the app's user interface with the data.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Many of the Universal Windows Platform (UWP) APIs that retrieve data are asynchronous, so you will probably be retrieving data asynchronously anyway.</source>
          <target state="new">Many of the Universal Windows Platform (UWP) APIs that retrieve data are asynchronous, so you will probably be retrieving data asynchronously anyway.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more info about asynchronous APIs, see <bpt id="p1">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187337)</ept>.</source>
          <target state="new">For more info about asynchronous APIs, see <bpt id="p1">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187337)</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you do work that doesn't use asynchronous APIs, you can use the Task class to do long running work so that you don't block the user from interacting with the app.</source>
          <target state="new">If you do work that doesn't use asynchronous APIs, you can use the Task class to do long running work so that you don't block the user from interacting with the app.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This will keep your app responsive to the user while the data loads.</source>
          <target state="new">This will keep your app responsive to the user while the data loads.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If your app takes an especially long time to load part of its UI, consider adding a string in that area that says something like, "Getting latest data," so that your users know that the app is still processing.</source>
          <target state="new">If your app takes an especially long time to load part of its UI, consider adding a string in that area that says something like, "Getting latest data," so that your users know that the app is still processing.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Minimize startup time</source>
          <target state="new">Minimize startup time</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>All but the simplest apps require a perceivable amount of time to load resources, parse XAML, set up data structures, and run logic at activation.</source>
          <target state="new">All but the simplest apps require a perceivable amount of time to load resources, parse XAML, set up data structures, and run logic at activation.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Here, we analyze the process of activation by breaking it into three phases.</source>
          <target state="new">Here, we analyze the process of activation by breaking it into three phases.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>We also provide tips for reducing the time spent in each phase, and techniques for making each phase of your app's startup more palatable to the user.</source>
          <target state="new">We also provide tips for reducing the time spent in each phase, and techniques for making each phase of your app's startup more palatable to the user.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The activation period is the time between the moment a user starts the app and the moment the app is functional.</source>
          <target state="new">The activation period is the time between the moment a user starts the app and the moment the app is functional.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is a critical time because it’s a user’s first impression of your app.</source>
          <target state="new">This is a critical time because it’s a user’s first impression of your app.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>They expect instant and continuous feedback from the system and apps.</source>
          <target state="new">They expect instant and continuous feedback from the system and apps.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The system and the app are perceived to be broken or poorly designed when apps don't start quickly.</source>
          <target state="new">The system and the app are perceived to be broken or poorly designed when apps don't start quickly.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Even worse, if an app takes too long to activate, the Process Lifetime Manager (PLM) might kill it, or the user might uninstall it.</source>
          <target state="new">Even worse, if an app takes too long to activate, the Process Lifetime Manager (PLM) might kill it, or the user might uninstall it.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Introduction to the stages of startup</source>
          <target state="new">Introduction to the stages of startup</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Startup involves a number of moving pieces, and all of them need to be correctly coordinated for the best user experience.</source>
          <target state="new">Startup involves a number of moving pieces, and all of them need to be correctly coordinated for the best user experience.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following steps occur between your user clicking on your app tile and the application content being shown.</source>
          <target state="new">The following steps occur between your user clicking on your app tile and the application content being shown.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The Windows shell starts the process and Main is called.</source>
          <target state="new">The Windows shell starts the process and Main is called.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The Application object is created.</source>
          <target state="new">The Application object is created.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>(Project template) Constructor calls InitializeComponent, which causes App.xaml to be parsed and objects created.</source>
          <target state="new">(Project template) Constructor calls InitializeComponent, which causes App.xaml to be parsed and objects created.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Application.OnLaunched event is raised.</source>
          <target state="new">Application.OnLaunched event is raised.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>(ProjectTemplate) App code creates a Frame and navigates to MainPage.</source>
          <target state="new">(ProjectTemplate) App code creates a Frame and navigates to MainPage.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>(ProjectTemplate) Mainpage constructor calls InitializeComponent which causes MainPage.xaml to be parsed and objects created.</source>
          <target state="new">(ProjectTemplate) Mainpage constructor calls InitializeComponent which causes MainPage.xaml to be parsed and objects created.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>ProjectTemplate) Window.Current.Activate() is called.</source>
          <target state="new">ProjectTemplate) Window.Current.Activate() is called.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>XAML Platform runs the Layout pass including Measure &amp; Arrange.</source>
          <target state="new">XAML Platform runs the Layout pass including Measure &amp; Arrange.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ApplyTemplate will cause control template content to be created for each control, which is typically the bulk of Layout time for startup.</source>
          <target state="new">ApplyTemplate will cause control template content to be created for each control, which is typically the bulk of Layout time for startup.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Render is called to create visuals for all the window contents.</source>
          <target state="new">Render is called to create visuals for all the window contents.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Frame is presented to the Desktop Windows Manager (DWM).</source>
          <target state="new">Frame is presented to the Desktop Windows Manager (DWM).</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Do less in your Startup path</source>
          <target state="new">Do less in your Startup path</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Keep your startup code path free from anything that is not needed for your first frame.</source>
          <target state="new">Keep your startup code path free from anything that is not needed for your first frame.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you have user dlls containing controls that are not needed during first frame, consider delay loading them.</source>
          <target state="new">If you have user dlls containing controls that are not needed during first frame, consider delay loading them.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you have a portion of your UI dependent on data from the cloud, then split that UI.</source>
          <target state="new">If you have a portion of your UI dependent on data from the cloud, then split that UI.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>First, bring up the UI that is not dependent on cloud data and asynchronously bring up the cloud-dependent UI.</source>
          <target state="new">First, bring up the UI that is not dependent on cloud data and asynchronously bring up the cloud-dependent UI.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You should also consider caching data locally so that the application will work offline or not be affected by slow network connectivity.</source>
          <target state="new">You should also consider caching data locally so that the application will work offline or not be affected by slow network connectivity.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Show progress UI if your UI is waiting for data.</source>
          <target state="new">Show progress UI if your UI is waiting for data.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Be cautious of app designs that involve a lot of parsing of configuration files, or UI that is dynamically generated by code.</source>
          <target state="new">Be cautious of app designs that involve a lot of parsing of configuration files, or UI that is dynamically generated by code.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Reduce element count</source>
          <target state="new">Reduce element count</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Startup performance in a XAML app is directly correlated to the number of elements you create during startup.</source>
          <target state="new">Startup performance in a XAML app is directly correlated to the number of elements you create during startup.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The fewer elements you create, the less time your app will take to start up.</source>
          <target state="new">The fewer elements you create, the less time your app will take to start up.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>As a rough benchmark, consider each element to take 1ms to create.</source>
          <target state="new">As a rough benchmark, consider each element to take 1ms to create.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Templates used in items controls can have the biggest impact, as they are repeated multiple times.</source>
          <target state="new">Templates used in items controls can have the biggest impact, as they are repeated multiple times.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ListView and GridView UI optimization<ept id="p1">](optimize-gridview-and-listview.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>ListView and GridView UI optimization<ept id="p1">](optimize-gridview-and-listview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>UserControls and control templates will be expanded, so those should also be taken into account.</source>
          <target state="new">UserControls and control templates will be expanded, so those should also be taken into account.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If you create any XAML that does not appear on the screen, then you should justify whether those pieces of XAML should be created during your startup.</source>
          <target state="new">If you create any XAML that does not appear on the screen, then you should justify whether those pieces of XAML should be created during your startup.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Visual Studio Live Visual Tree<ept id="p1">](http://blogs.msdn.com/b/visualstudio/archive/2015/02/24/introducing-the-ui-debugging-tools-for-xaml.aspx)</ept> window shows the child element counts for each node in the tree.</source>
          <target state="new">The <bpt id="p1">[</bpt>Visual Studio Live Visual Tree<ept id="p1">](http://blogs.msdn.com/b/visualstudio/archive/2015/02/24/introducing-the-ui-debugging-tools-for-xaml.aspx)</ept> window shows the child element counts for each node in the tree.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Live visual tree.</source>
          <target state="new">Live visual tree.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Use x:DeferLoadStrategy<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Use x:DeferLoadStrategy<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Collapsing an element, or setting its opacity to 0, will not prevent the element from being created.</source>
          <target state="new">Collapsing an element, or setting its opacity to 0, will not prevent the element from being created.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Using x:DeferLoadStrategy, you can delay the loading of a piece of UI, and load it when needed.</source>
          <target state="new">Using x:DeferLoadStrategy, you can delay the loading of a piece of UI, and load it when needed.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This is good way to delay processing UI that is not visible during the startup screen, so that you can load it when needed, or as part of a set of delayed logic.</source>
          <target state="new">This is good way to delay processing UI that is not visible during the startup screen, so that you can load it when needed, or as part of a set of delayed logic.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>To trigger the loading, you need only call FindName for the element.</source>
          <target state="new">To trigger the loading, you need only call FindName for the element.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For an example and more information, see <bpt id="p1">[</bpt>x:DeferLoadStrategy attribute<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204785)</ept>.</source>
          <target state="new">For an example and more information, see <bpt id="p1">[</bpt>x:DeferLoadStrategy attribute<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204785)</ept>.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Virtualization<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Virtualization<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you have list or repeater content in your UI then it’s highly advised that you use UI virtualization.</source>
          <target state="new">If you have list or repeater content in your UI then it’s highly advised that you use UI virtualization.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If list UI is not virtualized then you are paying the cost of creating all the elements up front, and that can slow down your startup.</source>
          <target state="new">If list UI is not virtualized then you are paying the cost of creating all the elements up front, and that can slow down your startup.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ListView and GridView UI optimization<ept id="p1">](optimize-gridview-and-listview.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>ListView and GridView UI optimization<ept id="p1">](optimize-gridview-and-listview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Application performance is not only about raw performance, it’s also about perception.</source>
          <target state="new">Application performance is not only about raw performance, it’s also about perception.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Changing the order of operations so that visual aspects occur first will commonly make the user feel like the application is faster.</source>
          <target state="new">Changing the order of operations so that visual aspects occur first will commonly make the user feel like the application is faster.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Users will consider the application loaded when the content is on the screen.</source>
          <target state="new">Users will consider the application loaded when the content is on the screen.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Commonly, applications need to do multiple things as part of the startup, and not all of that is required to bring up the UI, so those should be delayed or prioritized lower than the UI.</source>
          <target state="new">Commonly, applications need to do multiple things as part of the startup, and not all of that is required to bring up the UI, so those should be delayed or prioritized lower than the UI.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This topic talks about the “first frame” which comes from animation/TV, and is a measure of how long until content is seen by the end user.</source>
          <target state="new">This topic talks about the “first frame” which comes from animation/TV, and is a measure of how long until content is seen by the end user.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Improve startup perception</source>
          <target state="new">Improve startup perception</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Let’s use the example of a simple online game to identify each phase of startup and different techniques to give the user feedback throughout the process.</source>
          <target state="new">Let’s use the example of a simple online game to identify each phase of startup and different techniques to give the user feedback throughout the process.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For this example, the first phase of activation is the time between the user tapping the game’s tile and the game starting to run its code.</source>
          <target state="new">For this example, the first phase of activation is the time between the user tapping the game’s tile and the game starting to run its code.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>During this time, the system doesn’t have any content to display to the user to even indicate that the correct game has started.</source>
          <target state="new">During this time, the system doesn’t have any content to display to the user to even indicate that the correct game has started.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>But providing a splash screen gives that content to the system.</source>
          <target state="new">But providing a splash screen gives that content to the system.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The game then informs the user that the first phase of activation has completed by replacing the static splash screen with its own UI when it begins running code.</source>
          <target state="new">The game then informs the user that the first phase of activation has completed by replacing the static splash screen with its own UI when it begins running code.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The second phase of activation encompasses creating and initializing structures critical for the game.</source>
          <target state="new">The second phase of activation encompasses creating and initializing structures critical for the game.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If an app can quickly create its initial UI with the data available after the first phase of activation, then the second phase is trivial and you can display the UI immediately.</source>
          <target state="new">If an app can quickly create its initial UI with the data available after the first phase of activation, then the second phase is trivial and you can display the UI immediately.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Otherwise we recommend that the app display a loading page while it is initialized.</source>
          <target state="new">Otherwise we recommend that the app display a loading page while it is initialized.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>What the loading page looks like is up to you and it can be as simple as displaying a progress bar or a progress ring.</source>
          <target state="new">What the loading page looks like is up to you and it can be as simple as displaying a progress bar or a progress ring.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The key point is that the app indicates that it is performing tasks before becoming responsive.</source>
          <target state="new">The key point is that the app indicates that it is performing tasks before becoming responsive.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In the case of the game, it would like to display its initial screen but that UI requires that some images and sounds be loaded from disk into memory.</source>
          <target state="new">In the case of the game, it would like to display its initial screen but that UI requires that some images and sounds be loaded from disk into memory.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>These tasks take a couple of seconds, so the app keeps the user informed by replacing the splash screen with a loading page, which shows a simple animation related to the theme of the game.</source>
          <target state="new">These tasks take a couple of seconds, so the app keeps the user informed by replacing the splash screen with a loading page, which shows a simple animation related to the theme of the game.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The third stage begins after the game has a minimal set of info to create an interactive UI, which replaces the loading page.</source>
          <target state="new">The third stage begins after the game has a minimal set of info to create an interactive UI, which replaces the loading page.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>At this point the only info available to the online game is the content that the app loaded from disk.</source>
          <target state="new">At this point the only info available to the online game is the content that the app loaded from disk.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The game can ship with enough content to create an interactive UI; but because it’s an online game it won’t be functional until it connects to the internet and downloads some additional info.</source>
          <target state="new">The game can ship with enough content to create an interactive UI; but because it’s an online game it won’t be functional until it connects to the internet and downloads some additional info.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Until it has all the info it needs to be functional, the user can interact with the UI, but features that need additional data from the web should give feedback that content is still loading.</source>
          <target state="new">Until it has all the info it needs to be functional, the user can interact with the UI, but features that need additional data from the web should give feedback that content is still loading.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It may take some time for an app to become fully functional, so it’s important that functionality be made available as soon as possible.</source>
          <target state="new">It may take some time for an app to become fully functional, so it’s important that functionality be made available as soon as possible.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Now that we identified the three stages of activation in the online game, let’s tie them to actual code.</source>
          <target state="new">Now that we identified the three stages of activation in the online game, let’s tie them to actual code.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Phase 1</source>
          <target state="new">Phase 1</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Before an app starts, it needs to tell the system what it wants to display as the splash screen.</source>
          <target state="new">Before an app starts, it needs to tell the system what it wants to display as the splash screen.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It does so by providing an image and background color to the SplashScreen element in an app’s manifest, as in the example.</source>
          <target state="new">It does so by providing an image and background color to the SplashScreen element in an app’s manifest, as in the example.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Windows displays this after the app begins activation.</source>
          <target state="new">Windows displays this after the app begins activation.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Add a splash screen<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187306)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Add a splash screen<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187306)</ept>.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Use the app’s constructor only to initialize data structures that are critical to the app.</source>
          <target state="new">Use the app’s constructor only to initialize data structures that are critical to the app.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The constructor is called only the first time the app is run and not necessarily each time the app is activated.</source>
          <target state="new">The constructor is called only the first time the app is run and not necessarily each time the app is activated.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For example, the constructor isn't called for an app that has been run, placed in the background, and then activated via the search contract.</source>
          <target state="new">For example, the constructor isn't called for an app that has been run, placed in the background, and then activated via the search contract.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Phase 2</source>
          <target state="new">Phase 2</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>There are a number of reasons for an app to be activated, each of which you may want to handle differently.</source>
          <target state="new">There are a number of reasons for an app to be activated, each of which you may want to handle differently.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>You can override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnActivated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242330)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnCachedFileUpdaterActivated<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701797)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>OnFileActivated<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242331)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>OnFileOpenPickerActivated<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/Hh701799)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>OnFileSavePickerActivated<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/Hh701801)</ept>, <bpt id="p11">[</bpt><bpt id="p12">**</bpt>OnLaunched<ept id="p12">**</ept><ept id="p11">](https://msdn.microsoft.com/library/windows/apps/BR242335)</ept>, <bpt id="p13">[</bpt><bpt id="p14">**</bpt>OnSearchActivated<ept id="p14">**</ept><ept id="p13">](https://msdn.microsoft.com/library/windows/apps/BR242336)</ept>, and <bpt id="p15">[</bpt><bpt id="p16">**</bpt>OnShareTargetActivated<ept id="p16">**</ept><ept id="p15">](https://msdn.microsoft.com/library/windows/apps/Hh701806)</ept> methods to handle each reason of activation.</source>
          <target state="new">You can override <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnActivated<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242330)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnCachedFileUpdaterActivated<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701797)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>OnFileActivated<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242331)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>OnFileOpenPickerActivated<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/Hh701799)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>OnFileSavePickerActivated<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/Hh701801)</ept>, <bpt id="p11">[</bpt><bpt id="p12">**</bpt>OnLaunched<ept id="p12">**</ept><ept id="p11">](https://msdn.microsoft.com/library/windows/apps/BR242335)</ept>, <bpt id="p13">[</bpt><bpt id="p14">**</bpt>OnSearchActivated<ept id="p14">**</ept><ept id="p13">](https://msdn.microsoft.com/library/windows/apps/BR242336)</ept>, and <bpt id="p15">[</bpt><bpt id="p16">**</bpt>OnShareTargetActivated<ept id="p16">**</ept><ept id="p15">](https://msdn.microsoft.com/library/windows/apps/Hh701806)</ept> methods to handle each reason of activation.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>One of the things that an app must do in these methods is create a UI, assign it to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Window.Content<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209051)</ept>, and then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Window.Activate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209046)</ept>.</source>
          <target state="new">One of the things that an app must do in these methods is create a UI, assign it to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Window.Content<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209051)</ept>, and then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Window.Activate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209046)</ept>.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>At this point the splash screen is replaced by the UI that the app created.</source>
          <target state="new">At this point the splash screen is replaced by the UI that the app created.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This visual could either be loading screen or the app's actual UI if enough info is available at activation to create it.</source>
          <target state="new">This visual could either be loading screen or the app's actual UI if enough info is available at activation to create it.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Apps that display a loading page in the activation handler begin work to create the UI in the background.</source>
          <target state="new">Apps that display a loading page in the activation handler begin work to create the UI in the background.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>After that element has been created, its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement.Loaded<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208723)</ept> event occurs.</source>
          <target state="new">After that element has been created, its <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement.Loaded<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208723)</ept> event occurs.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>In the event handler you replace the window's content, which is currently the loading screen, with the newly created home page.</source>
          <target state="new">In the event handler you replace the window's content, which is currently the loading screen, with the newly created home page.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It’s critical that an app with an extended initialization period show a loading page.</source>
          <target state="new">It’s critical that an app with an extended initialization period show a loading page.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Aside from providing the sure feedback about the activation process, the process will be terminated if <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Window.Activate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209046)</ept> is not called within 15 seconds of the start of the activation process.</source>
          <target state="new">Aside from providing the sure feedback about the activation process, the process will be terminated if <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Window.Activate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209046)</ept> is not called within 15 seconds of the start of the activation process.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For an example of using extended splash screens, see <bpt id="p1">[</bpt>Splash screen sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=234889)</ept>.</source>
          <target state="new">For an example of using extended splash screens, see <bpt id="p1">[</bpt>Splash screen sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=234889)</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Phase 3</source>
          <target state="new">Phase 3</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Just because the app displayed the UI doesn't mean it is completely ready for use.</source>
          <target state="new">Just because the app displayed the UI doesn't mean it is completely ready for use.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>In the case of our game, the UI is displayed with placeholders for features that require data from the internet.</source>
          <target state="new">In the case of our game, the UI is displayed with placeholders for features that require data from the internet.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>At this point the game downloads the additional data needed to make the app fully functional and progressively enables features as data is acquired.</source>
          <target state="new">At this point the game downloads the additional data needed to make the app fully functional and progressively enables features as data is acquired.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Sometimes much of the content needed for activation can be packaged with the app.</source>
          <target state="new">Sometimes much of the content needed for activation can be packaged with the app.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Such is the case with a simple game.</source>
          <target state="new">Such is the case with a simple game.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This makes the activation process quite simple.</source>
          <target state="new">This makes the activation process quite simple.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>But many programs (such as news readers and photo viewers) must pull info from the web to become functional.</source>
          <target state="new">But many programs (such as news readers and photo viewers) must pull info from the web to become functional.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This data can be large and take a fair amount of time to download.</source>
          <target state="new">This data can be large and take a fair amount of time to download.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>How the app gets this data during the activation process can have a huge impact on the perceived performance of an app.</source>
          <target state="new">How the app gets this data during the activation process can have a huge impact on the perceived performance of an app.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You could display a loading page, or worse, a splash screen, for minutes if an app tried to download an entire data set it needs for functionality in phase one or two of activation.</source>
          <target state="new">You could display a loading page, or worse, a splash screen, for minutes if an app tried to download an entire data set it needs for functionality in phase one or two of activation.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This makes an app look like it’s hung or cause it to be terminated by the system.</source>
          <target state="new">This makes an app look like it’s hung or cause it to be terminated by the system.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>We recommend that an app download the minimal amount of data to show an interactive UI with placeholder elements in phase 2 and then progressively load data, which replaces the placeholder elements, in phase 3.</source>
          <target state="new">We recommend that an app download the minimal amount of data to show an interactive UI with placeholder elements in phase 2 and then progressively load data, which replaces the placeholder elements, in phase 3.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more info on dealing with data, see <bpt id="p1">[</bpt>Optimize ListView and GridView<ept id="p1">](optimize-gridview-and-listview.md)</ept>.</source>
          <target state="new">For more info on dealing with data, see <bpt id="p1">[</bpt>Optimize ListView and GridView<ept id="p1">](optimize-gridview-and-listview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>How exactly an app reacts to each phase of startup is completely up to you, but providing the user as much feedback as possible (splash screen, loading screen, UI while data loads) makes the user feel as though an app, and the system as a whole, are fast.</source>
          <target state="new">How exactly an app reacts to each phase of startup is completely up to you, but providing the user as much feedback as possible (splash screen, loading screen, UI while data loads) makes the user feel as though an app, and the system as a whole, are fast.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Minimize managed assemblies in the startup path</source>
          <target state="new">Minimize managed assemblies in the startup path</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Reusable code often comes in the form of modules (DLLs) included in a project.</source>
          <target state="new">Reusable code often comes in the form of modules (DLLs) included in a project.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Loading these modules requires accessing the disk, and as you can imagine, the cost of doing so can add up.</source>
          <target state="new">Loading these modules requires accessing the disk, and as you can imagine, the cost of doing so can add up.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This has the greatest impact on cold startup, but it can have an impact on warm startup, too.</source>
          <target state="new">This has the greatest impact on cold startup, but it can have an impact on warm startup, too.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>In the case of C# and Visual Basic, the CLR tries to delay that cost as much as possible by loading assemblies on demand.</source>
          <target state="new">In the case of C# and Visual Basic, the CLR tries to delay that cost as much as possible by loading assemblies on demand.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>That is, the CLR doesn’t load a module until an executed method references it.</source>
          <target state="new">That is, the CLR doesn’t load a module until an executed method references it.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>So, reference only assemblies that are necessary to the launch of your app in startup code so that the CLR doesn’t load unnecessary modules.</source>
          <target state="new">So, reference only assemblies that are necessary to the launch of your app in startup code so that the CLR doesn’t load unnecessary modules.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If you have unused code paths in your startup path that have unnecessary references, you can move these code paths to other methods to avoid the unnecessary loads.</source>
          <target state="new">If you have unused code paths in your startup path that have unnecessary references, you can move these code paths to other methods to avoid the unnecessary loads.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Another way to reduce module loads is to combine your app modules.</source>
          <target state="new">Another way to reduce module loads is to combine your app modules.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Loading one large assembly typically takes less time than loading two small ones.</source>
          <target state="new">Loading one large assembly typically takes less time than loading two small ones.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This is not always possible, and you should combine modules only if it doesn't make a material difference to developer productivity or code reusability.</source>
          <target state="new">This is not always possible, and you should combine modules only if it doesn't make a material difference to developer productivity or code reusability.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>You can use tools such as <bpt id="p1">[</bpt>PerfView<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=251609)</ept> or the <bpt id="p2">[</bpt>Windows Performance Analyzer (WPA)<ept id="p2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/ff191077.aspx)</ept> to find out what modules are loaded on startup.</source>
          <target state="new">You can use tools such as <bpt id="p1">[</bpt>PerfView<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=251609)</ept> or the <bpt id="p2">[</bpt>Windows Performance Analyzer (WPA)<ept id="p2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/ff191077.aspx)</ept> to find out what modules are loaded on startup.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Make smart web requests</source>
          <target state="new">Make smart web requests</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>You can dramatically improve the loading time of an app by packaging its contents locally, including XAML, images, and any other files important to the app.</source>
          <target state="new">You can dramatically improve the loading time of an app by packaging its contents locally, including XAML, images, and any other files important to the app.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Disk operations are faster than network operations.</source>
          <target state="new">Disk operations are faster than network operations.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If an app needs a particular file at initialization, you can reduce the overall startup time by loading it from disk instead of retrieving it from a remote server.</source>
          <target state="new">If an app needs a particular file at initialization, you can reduce the overall startup time by loading it from disk instead of retrieving it from a remote server.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Journal and Cache Pages Efficiently</source>
          <target state="new">Journal and Cache Pages Efficiently</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The Frame control provides navigation features.</source>
          <target state="new">The Frame control provides navigation features.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>It offers navigation to a Page (Navigate method), navigation journaling (BackStack/ForwardStack properties, GoForward/GoBack method), Page caching (Page.NavigationCacheMode), and serialization support (GetNavigationState method).</source>
          <target state="new">It offers navigation to a Page (Navigate method), navigation journaling (BackStack/ForwardStack properties, GoForward/GoBack method), Page caching (Page.NavigationCacheMode), and serialization support (GetNavigationState method).</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The performance to be aware of with Frame is primarily around the journaling and page caching.</source>
          <target state="new">The performance to be aware of with Frame is primarily around the journaling and page caching.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Frame journaling<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Frame journaling<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>When you navigate to a page with Frame.Navigate(), a PageStackEntry for the current page is added to Frame.BackStack collection.</source>
          <target state="new">When you navigate to a page with Frame.Navigate(), a PageStackEntry for the current page is added to Frame.BackStack collection.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>PageStackEntry is relatively small, but there’s no built-in limit to the size of the BackStack collection.</source>
          <target state="new">PageStackEntry is relatively small, but there’s no built-in limit to the size of the BackStack collection.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Potentially, a user could navigate in a loop and grow this collection indefinitely.</source>
          <target state="new">Potentially, a user could navigate in a loop and grow this collection indefinitely.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The PageStackEntry also includes the parameter that was passed to the Frame.Navigate() method.</source>
          <target state="new">The PageStackEntry also includes the parameter that was passed to the Frame.Navigate() method.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>It’s recommended that that parameter be a primitive serializable type (such as an int or string), in order to allow the Frame.GetNavigationState() method to work.</source>
          <target state="new">It’s recommended that that parameter be a primitive serializable type (such as an int or string), in order to allow the Frame.GetNavigationState() method to work.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>But that parameter could potentially reference an object that accounts for more significant amounts of working set or other resources, making each entry in the BackStack that much more expensive.</source>
          <target state="new">But that parameter could potentially reference an object that accounts for more significant amounts of working set or other resources, making each entry in the BackStack that much more expensive.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For example, you could potentially use a StorageFile as a parameter, and consequently the BackStack is keeping an indefinite number of files open.</source>
          <target state="new">For example, you could potentially use a StorageFile as a parameter, and consequently the BackStack is keeping an indefinite number of files open.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Therefore it’s recommended to keep the navigation parameters small, and to limit the size of the BackStack.</source>
          <target state="new">Therefore it’s recommended to keep the navigation parameters small, and to limit the size of the BackStack.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The BackStack is a standard vector (IList in C#, Platform::Vector in C++/CX), and so can be trimmed simply by removing entries.</source>
          <target state="new">The BackStack is a standard vector (IList in C#, Platform::Vector in C++/CX), and so can be trimmed simply by removing entries.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Page caching<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Page caching<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>By default, when you navigate to a page with the Frame.Navigate method, a new instance of the page is instantiated.</source>
          <target state="new">By default, when you navigate to a page with the Frame.Navigate method, a new instance of the page is instantiated.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Similarly, if you then navigate back to the previous page with Frame.GoBack, a new instance of the previous page is allocated.</source>
          <target state="new">Similarly, if you then navigate back to the previous page with Frame.GoBack, a new instance of the previous page is allocated.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Frame, though, offers an optional page cache that can avoid these instantiations.</source>
          <target state="new">Frame, though, offers an optional page cache that can avoid these instantiations.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>To get a page put into the cache, use the Page.NavigationCacheMode property.</source>
          <target state="new">To get a page put into the cache, use the Page.NavigationCacheMode property.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Setting that mode to Required will force the page to be cached, setting it to Enabled will allow it to be cached.</source>
          <target state="new">Setting that mode to Required will force the page to be cached, setting it to Enabled will allow it to be cached.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>By default the cache size is 10 pages, but this can be overridden with the Frame.CacheSize property.</source>
          <target state="new">By default the cache size is 10 pages, but this can be overridden with the Frame.CacheSize property.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>All Required pages will be cached, and if there are fewer than CacheSize Required pages, Enabled pages can be cached as well.</source>
          <target state="new">All Required pages will be cached, and if there are fewer than CacheSize Required pages, Enabled pages can be cached as well.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Page caching can help performance by avoiding instantiations, and therefore improving navigation performance.</source>
          <target state="new">Page caching can help performance by avoiding instantiations, and therefore improving navigation performance.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Page caching can hurt performance by over-caching and therefore impacting working set.</source>
          <target state="new">Page caching can hurt performance by over-caching and therefore impacting working set.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Therefore it’s recommend to use page caching as appropriate for your application.</source>
          <target state="new">Therefore it’s recommend to use page caching as appropriate for your application.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For example, say you have an app that shows a list of items in a Frame, and when you tap on an item, it navigates the frame to a detail page for that item.</source>
          <target state="new">For example, say you have an app that shows a list of items in a Frame, and when you tap on an item, it navigates the frame to a detail page for that item.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The list page should probably be set to cache.</source>
          <target state="new">The list page should probably be set to cache.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>If the detail page is the same for all items, it should probably be cached as well.</source>
          <target state="new">If the detail page is the same for all items, it should probably be cached as well.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>But if the detail page is more heterogeneous, it might be better to leave caching off.</source>
          <target state="new">But if the detail page is more heterogeneous, it might be better to leave caching off.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>