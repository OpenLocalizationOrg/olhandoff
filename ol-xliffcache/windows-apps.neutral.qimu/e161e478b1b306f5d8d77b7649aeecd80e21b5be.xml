{"nodes":[{"content":"Set up a geofence","pos":[33,50]},{"content":"Set up a Geofence in your app, and learn how to handle notifications in the foreground and background.","pos":[64,166]},{"content":"Set up a geofence","pos":[223,240]},{"content":"Updated for UWP apps on Windows 10.","pos":[246,281]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[282,374]},{"pos":[380,546],"content":"Set up a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Geofence<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263587)</ept> in your app, and learn how to handle notifications in the foreground and background."},{"pos":[548,739],"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept> To learn more about accessing location in your app, download the following sample from the <bpt id=\"p2\">[</bpt>Windows-universal-samples repo<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?LinkId=619979)</ept> on GitHub."},{"content":"Universal Windows Platform (UWP) map sample","pos":[746,789]},{"content":"Enable the location capability","pos":[844,874]},{"pos":[881,984],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, double-click on <bpt id=\"p2\">**</bpt>package.appxmanifest<ept id=\"p2\">**</ept> and select the <bpt id=\"p3\">**</bpt>Capabilities<ept id=\"p3\">**</ept> tab."},{"content":"In the <bpt id=\"p1\">**</bpt>Capabilities<ept id=\"p1\">**</ept> list, check <bpt id=\"p2\">**</bpt>Location<ept id=\"p2\">**</ept>.","pos":[989,1038]},{"content":"This adds the <ph id=\"ph1\">`Location`</ph> device capability to the package manifest file.","pos":[1039,1111]},{"content":"Set up a geofence","pos":[1287,1304]},{"content":"Step 1: Request access to the user's location","pos":[1311,1356]},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept> You must request access to the user's location by using the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>RequestAccessAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn859152)</ept> method before attempting to access the user's location.","pos":[1358,1570]},{"content":"You must call the <bpt id=\"p1\">**</bpt>RequestAccessAsync<ept id=\"p1\">**</ept> method from the UI thread and your app must be in the foreground.","pos":[1571,1677]},{"content":"Your app will not be able to access the user's location information until after the user grants permission to your app.","pos":[1678,1797]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestAccessAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn859152)</ept> method prompts the user for permission to access their location.","pos":[1911,2062]},{"content":"The user is only prompted once (per app).","pos":[2063,2104]},{"content":"After the first time they grant or deny permission, this method no longer prompts the user for permission.","pos":[2105,2211]},{"content":"To help the user change location permissions after they've been prompted, we recommend that you provide a link to the location settings as demonstrated later in this topic.","pos":[2212,2384]},{"content":"Step 2: Register for changes in geofence state and location permissions","pos":[2390,2461]},{"content":"In this example, a <bpt id=\"p1\">**</bpt>switch<ept id=\"p1\">**</ept> statement is used with <bpt id=\"p2\">**</bpt>accessStatus<ept id=\"p2\">**</ept> (from the previous example) to act only when access to the user's location is allowed.","pos":[2463,2619]},{"content":"If access to the user's location is allowed, the code accesses the current geofences, registers for geofence state changes, and registers for changes in location permissions.","pos":[2620,2794]},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept> When using a geofence, monitor changes in location permissions using the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>StatusChanged<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn263646)</ept> event from the GeofenceMonitor class instead of the StatusChanged event from the Geolocator class.","pos":[2796,3053]},{"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GeofenceMonitorStatus<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263599)</ept> of <bpt id=\"p3\">**</bpt>Disabled<ept id=\"p3\">**</ept> is equivalent to a disabled <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>PositionStatus<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br225599)</ept> - both indicate that the app does not have permission to access the user's location.","pos":[3054,3349]},{"content":"Then, when navigating away from your foreground app, unregister the event listeners.","pos":[4082,4166]},{"content":"Step 3: Create the geofence","pos":[4438,4465]},{"content":"Now, you are ready to define and set up a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Geofence<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263587)</ept> object.","pos":[4467,4589]},{"content":"There are several different constructor overloads to choose from, depending on your needs.","pos":[4590,4680]},{"content":"In the most basic geofence constructor, specify only the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Id<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263724)</ept> and the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Geoshape<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn263718)</ept> as shown here.","pos":[4681,4900]},{"content":"You can fine-tune your geofence further by using one of the other constructors.","pos":[5331,5410]},{"content":"In the next example, the geofence constructor specifies these additional parameters:","pos":[5411,5495]},{"pos":[5501,5736],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MonitoredStates<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263728)</ept> - Indicates what geofence events you want to receive notifications for entering the defined region, leaving the defined region, or removal of the geofence."},{"pos":[5741,5908],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SingleUse<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263732)</ept> - Removes the geofence once all the states the geofence is being monitored for have been met."},{"pos":[5913,6098],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DwellTime<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263703)</ept> - Indicates how long the user must be in or out of the defined area before the enter/exit events are triggered."},{"pos":[6103,6227],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StartTime<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263735)</ept> - Indicates when to start monitoring the geofence."},{"pos":[6232,6362],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Duration<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263697)</ept> - Indicates the period for which to monitor the geofence."},{"content":"Step 4: Handle changes in location permissions","pos":[7443,7489]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GeofenceMonitor<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263595)</ept> object triggers the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>StatusChanged<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn263646)</ept> event to indicate that the user's location settings changed.","pos":[7491,7733]},{"content":"That event passes the corresponding status via the argument's <bpt id=\"p1\">**</bpt>sender.Status<ept id=\"p1\">**</ept> property (of type <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>GeofenceMonitorStatus<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn263599)</ept>).","pos":[7734,7919]},{"content":"Note that this method is not called from the UI thread and the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Dispatcher<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept> object invokes the UI changes.","pos":[7920,8088]},{"content":"Set up foreground notifications","pos":[9671,9702]},{"content":"After your geofences are created, you must add the logic to handle what happens when a geofence event occurs.","pos":[9705,9814]},{"content":"Depending on the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MonitoredStates<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263728)</ept> that you have set up, you may receive an event when:","pos":[9815,9964]},{"content":"The user enters a region of interest.","pos":[9970,10007]},{"content":"The user leaves a region of interest.","pos":[10012,10049]},{"content":"The geofence has expired or been removed.","pos":[10054,10095]},{"content":"Note that a background app is not activated for a removal event.","pos":[10096,10160]},{"content":"You can listen for events directly from your app when it is running or register for a background task so that you receive a background notification when an event occurs.","pos":[10162,10331]},{"content":"Step 1: Register for geofence state change events","pos":[10337,10386]},{"content":"For your app to receive a foreground notification of a geofence state change, you must register an event handler.","pos":[10388,10501]},{"content":"This is typically set up when you create the geofence.","pos":[10502,10556]},{"content":"Step 2: Implement the geofence event handler","pos":[10719,10763]},{"content":"The next step is to implement the event handlers.","pos":[10765,10814]},{"content":"The action taken here depends on what your app is using the geofence for.","pos":[10815,10888]},{"content":"Set up background notifications","pos":[12126,12157]},{"content":"After your geofences are created, you must add the logic to handle what happens when a geofence event occurs.","pos":[12160,12269]},{"content":"Depending on the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MonitoredStates<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263728)</ept> that you have set up, you may receive an event when:","pos":[12270,12419]},{"content":"The user enters a region of interest.","pos":[12425,12462]},{"content":"The user leaves a region of interest.","pos":[12467,12504]},{"content":"The geofence has expired or been removed.","pos":[12509,12550]},{"content":"Note that a background app is not activated for a removal event.","pos":[12551,12615]},{"content":"To listen for a geofence event in the background","pos":[12617,12665]},{"content":"Declare the background task in your app’s manifest.","pos":[12671,12722]},{"content":"Register the background task in your app.","pos":[12727,12768]},{"content":"If your app needs internet access, say for accessing a cloud service, you can set a flag for that when the event is triggered.","pos":[12769,12895]},{"content":"You can also set a flag to make sure that the user is present when the event is triggered so that you are sure that the user gets notified.","pos":[12896,13035]},{"content":"While your app is running in the foreground, prompt the user to grant your app location permissions.","pos":[13040,13140]},{"content":"Step 1: Register for geofence state change events","pos":[13146,13195]},{"content":"In your app's manifest, under the <bpt id=\"p1\">**</bpt>Declarations<ept id=\"p1\">**</ept> tab, add a declaration for a location background task.","pos":[13197,13302]},{"content":"To do this:","pos":[13303,13314]},{"pos":[13320,13367],"content":"Add a declaration of type <bpt id=\"p1\">**</bpt>Background Tasks<ept id=\"p1\">**</ept>."},{"pos":[13372,13413],"content":"Set a property task type of <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept>."},{"content":"Set an entry point into your app to call when the event is triggered.","pos":[13418,13487]},{"content":"Step 2: Register the background task","pos":[13493,13529]},{"content":"The code in this step registers the geofencing background task.","pos":[13531,13594]},{"content":"Remember that when the geofence was created, we checked for location permissions.","pos":[13595,13676]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Set up a geofence<ept id=\"p1\">](#setup)</ept>.","pos":[13677,13724]},{"content":"Step 3: Handling the background notification","pos":[15730,15774]},{"content":"The action that you take to notify the user depends on what your app does, but you can display a toast notification, play an audio sound, or update a live tile.","pos":[15776,15936]},{"content":"The code in this step handles the notification.","pos":[15937,15984]},{"content":"Change the privacy settings","pos":[17225,17252]},{"content":"If the location privacy settings don't allow your app to access the user's location, we recommend that you provide a convenient link to the <bpt id=\"p1\">**</bpt>location privacy settings<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>Settings<ept id=\"p2\">**</ept> app.","pos":[17255,17449]},{"content":"In this example, a Hyperlink control is used navigate to the <ph id=\"ph1\">`ms-settings:privacy-location`</ph> URI.","pos":[17450,17546]},{"content":"Alternatively, your app can call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LaunchUriAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701476)</ept> method to launch the <bpt id=\"p3\">**</bpt>Settings<ept id=\"p3\">**</ept> app from code.","pos":[18075,18239]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Launch the Windows Settings app<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt228342)</ept>.","pos":[18240,18351]},{"content":"Test and debug your app","pos":[18483,18506]},{"content":"Testing and debugging geofencing apps can be a challenge because they depend on a device's location.","pos":[18509,18609]},{"content":"Here, we outline several methods for testing both foreground and background geofences.","pos":[18610,18696]},{"content":"To debug a geofencing app","pos":[18700,18725]},{"content":"Physically move the device to new locations.","pos":[18733,18777]},{"content":"Test entering a geofence by creating a geofence region that includes your current physical location, so you're already inside the geofence and the \"geofence entered\" event is triggered immediately.","pos":[18782,18979]},{"content":"Use the Microsoft Visual Studio emulator to simulate locations for the device.","pos":[18984,19062]},{"content":"Test and debug a geofencing app that is running in the foreground","pos":[19068,19133]},{"content":"To test your geofencing app that is running the foreground","pos":[19137,19195]},{"content":"Build your app in Visual Studio.","pos":[19203,19235]},{"content":"Launch your app in the Visual Studio emulator.","pos":[19240,19286]},{"content":"Use these tools to simulate various locations inside and outside of your geofence region.","pos":[19291,19380]},{"content":"Be sure to wait long enough past the time specified by the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DwellTime<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263703)</ept> property to trigger the event.","pos":[19381,19544]},{"content":"Note that you must accept the prompt to enable location permissions for the app.","pos":[19545,19625]},{"content":"For more info about simulating locations, see <bpt id=\"p1\">[</bpt>Set the simulated geolocation of the device<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=325245)</ept>.","pos":[19626,19767]},{"content":"You can also use the emulator to estimate the size of fences and dwell times approximately needed to be detected at different speeds.","pos":[19772,19905]},{"content":"Test and debug a geofencing app that is running in the background","pos":[19911,19976]},{"content":"To test your geofencing app that is running the background","pos":[19980,20038]},{"content":"Build your app in Visual Studio.","pos":[20046,20078]},{"content":"Note that your app should set the <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> background task type.","pos":[20079,20147]},{"content":"Deploy the app locally first.","pos":[20152,20181]},{"content":"Close your app that is running locally.","pos":[20186,20225]},{"content":"Launch your app in the Visual Studio emulator.","pos":[20230,20276]},{"content":"Note that background geofencing simulation is supported on only one app at a time within the emulator.","pos":[20277,20379]},{"content":"Do not launch multiple geofencing apps within the emulator.","pos":[20380,20439]},{"content":"From the emulator, simulate various locations inside and outside of your geofence region.","pos":[20444,20533]},{"content":"Be sure to wait long enough past the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DwellTime<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263703)</ept> to trigger the event.","pos":[20534,20666]},{"content":"Note that you must accept the prompt to enable location permissions for the app.","pos":[20667,20747]},{"content":"Use Visual Studio to trigger the location background task.","pos":[20752,20810]},{"content":"For more info about triggering background tasks in Visual Studio, see <bpt id=\"p1\">[</bpt>How to trigger background tasks<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=325378)</ept>.","pos":[20811,20964]},{"content":"Troubleshoot your app","pos":[20969,20990]},{"content":"Before your app can access location, <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> must be enabled on the device.","pos":[20993,21073]},{"content":"In the <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> app, check that the following <bpt id=\"p2\">**</bpt>location privacy settings<ept id=\"p2\">**</ept> are turned on:","pos":[21074,21168]},{"pos":[21174,21260],"content":"<bpt id=\"p1\">**</bpt>Location for this device...<ept id=\"p1\">**</ept> is turned <bpt id=\"p2\">**</bpt>on<ept id=\"p2\">**</ept> (not applicable in Windows 10 Mobile)"},{"pos":[21265,21326],"content":"The location services setting, <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept>, is turned <bpt id=\"p2\">**</bpt>on<ept id=\"p2\">**</ept>"},{"pos":[21331,21406],"content":"Under <bpt id=\"p1\">**</bpt>Choose apps that can use your location<ept id=\"p1\">**</ept>, your app is set to <bpt id=\"p2\">**</bpt>on<ept id=\"p2\">**</ept>"},{"content":"Related topics","pos":[21411,21425]},{"content":"UWP geolocation sample","pos":[21430,21452]},{"content":"Design guidelines for geofencing","pos":[21506,21538]},{"content":"Design guidelines for location-aware apps","pos":[21601,21642]}],"content":"---\nauthor: PatrickFarley\ntitle: Set up a geofence\ndescription: Set up a Geofence in your app, and learn how to handle notifications in the foreground and background.\nms.assetid: A3A46E03-0751-4DBD-A2A1-2323DB09BDBA\n---\n\n# Set up a geofence\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nSet up a [**Geofence**](https://msdn.microsoft.com/library/windows/apps/dn263587) in your app, and learn how to handle notifications in the foreground and background.\n\n**Tip** To learn more about accessing location in your app, download the following sample from the [Windows-universal-samples repo](http://go.microsoft.com/fwlink/p/?LinkId=619979) on GitHub.\n\n-   [Universal Windows Platform (UWP) map sample](http://go.microsoft.com/fwlink/p/?LinkId=619977)\n\n## Enable the location capability\n\n\n1.  In **Solution Explorer**, double-click on **package.appxmanifest** and select the **Capabilities** tab.\n2.  In the **Capabilities** list, check **Location**. This adds the `Location` device capability to the package manifest file.\n\n```xml\n  <Capabilities>\n    <!-- DeviceCapability elements must follow Capability elements (if present) -->\n    <DeviceCapability Name=\"location\"/>\n  </Capabilities>\n```\n\n## Set up a geofence\n\n\n### Step 1: Request access to the user's location\n\n**Important** You must request access to the user's location by using the [**RequestAccessAsync**](https://msdn.microsoft.com/library/windows/apps/dn859152) method before attempting to access the user's location. You must call the **RequestAccessAsync** method from the UI thread and your app must be in the foreground. Your app will not be able to access the user's location information until after the user grants permission to your app.\n\n```csharp\nusing Windows.Devices.Geolocation;\n...\nvar accessStatus = await Geolocator.RequestAccessAsync();\n```\n\nThe [**RequestAccessAsync**](https://msdn.microsoft.com/library/windows/apps/dn859152) method prompts the user for permission to access their location. The user is only prompted once (per app). After the first time they grant or deny permission, this method no longer prompts the user for permission. To help the user change location permissions after they've been prompted, we recommend that you provide a link to the location settings as demonstrated later in this topic.\n\n### Step 2: Register for changes in geofence state and location permissions\n\nIn this example, a **switch** statement is used with **accessStatus** (from the previous example) to act only when access to the user's location is allowed. If access to the user's location is allowed, the code accesses the current geofences, registers for geofence state changes, and registers for changes in location permissions.\n\n**Tip** When using a geofence, monitor changes in location permissions using the [**StatusChanged**](https://msdn.microsoft.com/library/windows/apps/dn263646) event from the GeofenceMonitor class instead of the StatusChanged event from the Geolocator class. A [**GeofenceMonitorStatus**](https://msdn.microsoft.com/library/windows/apps/dn263599) of **Disabled** is equivalent to a disabled [**PositionStatus**](https://msdn.microsoft.com/library/windows/apps/br225599) - both indicate that the app does not have permission to access the user's location.\n\n```csharp\nswitch (accessStatus)\n{\n    case GeolocationAccessStatus.Allowed:\n        geofences = GeofenceMonitor.Current.Geofences;\n\n        FillRegisteredGeofenceListBoxWithExistingGeofences();\n        FillEventListBoxWithExistingEvents();\n\n        // Register for state change events.\n        GeofenceMonitor.Current.GeofenceStateChanged += OnGeofenceStateChanged;\n        GeofenceMonitor.Current.StatusChanged += OnGeofenceStatusChanged;\n        break;\n\n    case GeolocationAccessStatus.Denied:\n        _rootPage.NotifyUser(\"Access denied.\", NotifyType.ErrorMessage);\n        break;\n\n    case GeolocationAccessStatus.Unspecified:\n        _rootPage.NotifyUser(\"Unspecified error.\", NotifyType.ErrorMessage);\n        break;\n}\n```\n\nThen, when navigating away from your foreground app, unregister the event listeners.\n\n```csharp\nprotected override void OnNavigatingFrom(NavigatingCancelEventArgs e)\n{\n    GeofenceMonitor.Current.GeofenceStateChanged -= OnGeofenceStateChanged;\n    GeofenceMonitor.Current.StatusChanged -= OnGeofenceStatusChanged;\n\n    base.OnNavigatingFrom(e);\n}\n```\n\n### Step 3: Create the geofence\n\nNow, you are ready to define and set up a [**Geofence**](https://msdn.microsoft.com/library/windows/apps/dn263587) object. There are several different constructor overloads to choose from, depending on your needs. In the most basic geofence constructor, specify only the [**Id**](https://msdn.microsoft.com/library/windows/apps/dn263724) and the [**Geoshape**](https://msdn.microsoft.com/library/windows/apps/dn263718) as shown here.\n\n```csharp\n// Set the fence ID.\nstring fenceId = \"fence1\";\n\n// Define the fence location and radius.\nBasicGeoposition position;\nposition.Latitude = 47.6510;\nposition.Longitude = -122.3473;\nposition.Altitude = 0.0;\ndouble radius = 10; // in meters\n\n// Set a circular region for the geofence.\nGeocircle geocircle = new Geocircle(position, radius);\n\n// Create the geofence.\nGeofence geofence = new Geofence(fenceId, geocircle);\n```\n\nYou can fine-tune your geofence further by using one of the other constructors. In the next example, the geofence constructor specifies these additional parameters:\n\n-   [**MonitoredStates**](https://msdn.microsoft.com/library/windows/apps/dn263728) - Indicates what geofence events you want to receive notifications for entering the defined region, leaving the defined region, or removal of the geofence.\n-   [**SingleUse**](https://msdn.microsoft.com/library/windows/apps/dn263732) - Removes the geofence once all the states the geofence is being monitored for have been met.\n-   [**DwellTime**](https://msdn.microsoft.com/library/windows/apps/dn263703) - Indicates how long the user must be in or out of the defined area before the enter/exit events are triggered.\n-   [**StartTime**](https://msdn.microsoft.com/library/windows/apps/dn263735) - Indicates when to start monitoring the geofence.\n-   [**Duration**](https://msdn.microsoft.com/library/windows/apps/dn263697) - Indicates the period for which to monitor the geofence.\n\n```csharp\n// Set the fence ID.\nstring fenceId = \"fence2\";\n\n// Define the fence location and radius.\nBasicGeoposition position;\nposition.Latitude = 47.6510;\nposition.Longitude = -122.3473;\nposition.Altitude = 0.0;\ndouble radius = 10; // in meters\n\n// Set the circular region for geofence.\nGeocircle geocircle = new Geocircle(position, radius);\n\n// Remove the geofence after the first trigger.\nbool singleUse = true;\n\n// Set the monitored states.\nMonitoredGeofenceStates monitoredStates = \n                MonitoredGeofenceStates.Entered | \n                MonitoredGeofenceStates.Exited | \n                MonitoredGeofenceStates.Removed;\n\n// Set how long you need to be in geofence for the enter event to fire.\nTimeSpan dwellTime = TimeSpan.FromMinutes(5);\n\n// Set how long the geofence should be active.\nTimeSpan duration = TimeSpan.FromDays(1);\n\n// Set up the start time of the geofence.\nDateTimeOffset startTime = DateTime.Now;\n\n// Create the geofence.\nGeofence geofence = new Geofence(fenceId, geocircle, monitoredStates, singleUse, dwellTime, startTime, duration);\n```\n\n### Step 4: Handle changes in location permissions\n\nThe [**GeofenceMonitor**](https://msdn.microsoft.com/library/windows/apps/dn263595) object triggers the [**StatusChanged**](https://msdn.microsoft.com/library/windows/apps/dn263646) event to indicate that the user's location settings changed. That event passes the corresponding status via the argument's **sender.Status** property (of type [**GeofenceMonitorStatus**](https://msdn.microsoft.com/library/windows/apps/dn263599)). Note that this method is not called from the UI thread and the [**Dispatcher**](https://msdn.microsoft.com/library/windows/apps/br208211) object invokes the UI changes.\n\n```csharp\nusing Windows.UI.Core;\n...\npublic async void OnGeofenceStatusChanged(GeofenceMonitor sender, object e)\n{\n   await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n   {\n    // Show the location setting message only if the status is disabled.\n    LocationDisabledMessage.Visibility = Visibility.Collapsed;\n\n    switch (sender.Status)\n    {\n     case GeofenceMonitorStatus.Ready:\n      _rootPage.NotifyUser(\"The monitor is ready and active.\", NotifyType.StatusMessage);\n      break;\n\n     case GeofenceMonitorStatus.Initializing:\n      _rootPage.NotifyUser(\"The monitor is in the process of initializing.\", NotifyType.StatusMessage);\n      break;\n\n     case GeofenceMonitorStatus.NoData:\n      _rootPage.NotifyUser(\"There is no data on the status of the monitor.\", NotifyType.ErrorMessage);\n      break;\n\n     case GeofenceMonitorStatus.Disabled:\n      _rootPage.NotifyUser(\"Access to location is denied.\", NotifyType.ErrorMessage);\n\n      // Show the message to the user to go to the location settings.\n      LocationDisabledMessage.Visibility = Visibility.Visible;\n      break;\n\n     case GeofenceMonitorStatus.NotInitialized:\n      _rootPage.NotifyUser(\"The geofence monitor has not been initialized.\", NotifyType.StatusMessage);\n      break;\n\n     case GeofenceMonitorStatus.NotAvailable:\n      _rootPage.NotifyUser(\"The geofence monitor is not available.\", NotifyType.ErrorMessage);\n      break;\n\n     default:\n      ScenarioOutput_Status.Text = \"Unknown\";\n      _rootPage.NotifyUser(string.Empty, NotifyType.StatusMessage);\n      break;\n    }\n   });\n}\n```\n\n## Set up foreground notifications\n\n\nAfter your geofences are created, you must add the logic to handle what happens when a geofence event occurs. Depending on the [**MonitoredStates**](https://msdn.microsoft.com/library/windows/apps/dn263728) that you have set up, you may receive an event when:\n\n-   The user enters a region of interest.\n-   The user leaves a region of interest.\n-   The geofence has expired or been removed. Note that a background app is not activated for a removal event.\n\nYou can listen for events directly from your app when it is running or register for a background task so that you receive a background notification when an event occurs.\n\n### Step 1: Register for geofence state change events\n\nFor your app to receive a foreground notification of a geofence state change, you must register an event handler. This is typically set up when you create the geofence.\n\n```csharp\nprivate void Initialize()\n{\n    // Other initialization logic\n\n    GeofenceMonitor.Current.GeofenceStateChanged += OnGeofenceStateChanged;\n}\n\n```\n\n### Step 2: Implement the geofence event handler\n\nThe next step is to implement the event handlers. The action taken here depends on what your app is using the geofence for.\n\n```csharp\npublic async void OnGeofenceStateChanged(GeofenceMonitor sender, object e)\n{\n    var reports = sender.ReadReports();\n\n    await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n    {\n        foreach (GeofenceStateChangeReport report in reports)\n        {\n            GeofenceState state = report.NewState;\n\n            Geofence geofence = report.Geofence;\n\n            if (state == GeofenceState.Removed)\n            {\n                // Remove the geofence from the geofences collection.\n                GeofenceMonitor.Current.Geofences.Remove(geofence);\n            }\n            else if (state == GeofenceState.Entered)\n            {\n                // Your app takes action based on the entered event.\n\n                // NOTE: You might want to write your app to take a particular\n                // action based on whether the app has internet connectivity.\n\n            }\n            else if (state == GeofenceState.Exited)\n            {\n                // Your app takes action based on the exited event.\n\n                // NOTE: You might want to write your app to take a particular\n                // action based on whether the app has internet connectivity.\n\n            }\n        }\n    });\n}\n\n\n\n```\n\n## Set up background notifications\n\n\nAfter your geofences are created, you must add the logic to handle what happens when a geofence event occurs. Depending on the [**MonitoredStates**](https://msdn.microsoft.com/library/windows/apps/dn263728) that you have set up, you may receive an event when:\n\n-   The user enters a region of interest.\n-   The user leaves a region of interest.\n-   The geofence has expired or been removed. Note that a background app is not activated for a removal event.\n\nTo listen for a geofence event in the background\n\n-   Declare the background task in your app’s manifest.\n-   Register the background task in your app. If your app needs internet access, say for accessing a cloud service, you can set a flag for that when the event is triggered. You can also set a flag to make sure that the user is present when the event is triggered so that you are sure that the user gets notified.\n-   While your app is running in the foreground, prompt the user to grant your app location permissions.\n\n### Step 1: Register for geofence state change events\n\nIn your app's manifest, under the **Declarations** tab, add a declaration for a location background task. To do this:\n\n-   Add a declaration of type **Background Tasks**.\n-   Set a property task type of **Location**.\n-   Set an entry point into your app to call when the event is triggered.\n\n### Step 2: Register the background task\n\nThe code in this step registers the geofencing background task. Remember that when the geofence was created, we checked for location permissions. For more info, see [Set up a geofence](#setup).\n\n```csharp\nasync private void RegisterBackgroundTask(object sender, RoutedEventArgs e)\n{\n    // Get permission for a background task from the user. If the user has already answered once,\n    // this does nothing and the user must manually update their preference via PC Settings.\n    BackgroundAccessStatus backgroundAccessStatus = await BackgroundExecutionManager.RequestAccessAsync();\n\n    // Regardless of the answer, register the background task. Note that the user can use\n    // the Settings app to prevent your app from running background tasks.\n    // Create a new background task builder.\n    BackgroundTaskBuilder geofenceTaskBuilder = new BackgroundTaskBuilder();\n\n    geofenceTaskBuilder.Name = SampleBackgroundTaskName;\n    geofenceTaskBuilder.TaskEntryPoint = SampleBackgroundTaskEntryPoint;\n\n    // Create a new location trigger.\n    var trigger = new LocationTrigger(LocationTriggerType.Geofence);\n\n    // Associate the location trigger with the background task builder.\n    geofenceTaskBuilder.SetTrigger(trigger);\n\n    // If it is important that there is user presence and/or\n    // internet connection when OnCompleted is called\n    // the following could be called before calling Register().\n    // SystemCondition condition = new SystemCondition(SystemConditionType.UserPresent | SystemConditionType.InternetAvailable);\n    // geofenceTaskBuilder.AddCondition(condition);\n\n    // Register the background task.\n    geofenceTask = geofenceTaskBuilder.Register();\n\n    // Associate an event handler with the new background task.\n    geofenceTask.Completed += new BackgroundTaskCompletedEventHandler(OnCompleted);\n\n    BackgroundTaskState.RegisterBackgroundTask(BackgroundTaskState.LocationTriggerBackgroundTaskName);\n\n    switch (backgroundAccessStatus)\n    {\n    case BackgroundAccessStatus.Unspecified:\n    case BackgroundAccessStatus.Denied:\n        rootPage.NotifyUser(\"This app is not allowed to run in the background.\", NotifyType.ErrorMessage);\n        break;\n\n    }\n}\n\n\n```\n\n### Step 3: Handling the background notification\n\nThe action that you take to notify the user depends on what your app does, but you can display a toast notification, play an audio sound, or update a live tile. The code in this step handles the notification.\n\n```csharp\nasync private void OnCompleted(IBackgroundTaskRegistration sender, BackgroundTaskCompletedEventArgs e)\n{\n    if (sender != null)\n    {\n        // Update the UI with progress reported by the background task.\n        await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n        {\n            try\n            {\n                // If the background task threw an exception, display the exception in\n                // the error text box.\n                e.CheckResult();\n\n                // Update the UI with the completion status of the background task.\n                // The Run method of the background task sets the LocalSettings. \n                var settings = ApplicationData.Current.LocalSettings;\n\n                // Get the status.\n                if (settings.Values.ContainsKey(\"Status\"))\n                {\n                    rootPage.NotifyUser(settings.Values[\"Status\"].ToString(), NotifyType.StatusMessage);\n                }\n\n                // Do your app work here.\n\n            }\n            catch (Exception ex)\n            {\n                // The background task had an error.\n                rootPage.NotifyUser(ex.ToString(), NotifyType.ErrorMessage);\n            }\n        });\n    }\n}\n\n\n```\n\n## Change the privacy settings\n\n\nIf the location privacy settings don't allow your app to access the user's location, we recommend that you provide a convenient link to the **location privacy settings** in the **Settings** app. In this example, a Hyperlink control is used navigate to the `ms-settings:privacy-location` URI.\n\n```xml\n<!--Set Visibility to Visible when access to the user's location is denied. -->  \n<TextBlock x:Name=\"LocationDisabledMessage\" FontStyle=\"Italic\" \n                 Visibility=\"Collapsed\" Margin=\"0,15,0,0\" TextWrapping=\"Wrap\" >\n          <Run Text=\"This app is not able to access Location. Go to \" />\n              <Hyperlink NavigateUri=\"ms-settings:privacy-location\">\n                  <Run Text=\"Settings\" />\n              </Hyperlink>\n          <Run Text=\" to check the location privacy settings.\"/>\n</TextBlock>\n```\n\nAlternatively, your app can call the [**LaunchUriAsync**](https://msdn.microsoft.com/library/windows/apps/hh701476) method to launch the **Settings** app from code. For more info, see [Launch the Windows Settings app](https://msdn.microsoft.com/library/windows/apps/mt228342).\n\n```csharp\nusing Windows.System;\n...\nbool result = await Launcher.LaunchUriAsync(new Uri(\"ms-settings:privacy-location\"));\n```\n\n## Test and debug your app\n\n\nTesting and debugging geofencing apps can be a challenge because they depend on a device's location. Here, we outline several methods for testing both foreground and background geofences.\n\n**To debug a geofencing app**\n\n1.  Physically move the device to new locations.\n2.  Test entering a geofence by creating a geofence region that includes your current physical location, so you're already inside the geofence and the \"geofence entered\" event is triggered immediately.\n3.  Use the Microsoft Visual Studio emulator to simulate locations for the device.\n\n### Test and debug a geofencing app that is running in the foreground\n\n**To test your geofencing app that is running the foreground**\n\n1.  Build your app in Visual Studio.\n2.  Launch your app in the Visual Studio emulator.\n3.  Use these tools to simulate various locations inside and outside of your geofence region. Be sure to wait long enough past the time specified by the [**DwellTime**](https://msdn.microsoft.com/library/windows/apps/dn263703) property to trigger the event. Note that you must accept the prompt to enable location permissions for the app. For more info about simulating locations, see [Set the simulated geolocation of the device](http://go.microsoft.com/fwlink/p/?LinkID=325245).\n4.  You can also use the emulator to estimate the size of fences and dwell times approximately needed to be detected at different speeds.\n\n### Test and debug a geofencing app that is running in the background\n\n**To test your geofencing app that is running the background**\n\n1.  Build your app in Visual Studio. Note that your app should set the **Location** background task type.\n2.  Deploy the app locally first.\n3.  Close your app that is running locally.\n4.  Launch your app in the Visual Studio emulator. Note that background geofencing simulation is supported on only one app at a time within the emulator. Do not launch multiple geofencing apps within the emulator.\n5.  From the emulator, simulate various locations inside and outside of your geofence region. Be sure to wait long enough past the [**DwellTime**](https://msdn.microsoft.com/library/windows/apps/dn263703) to trigger the event. Note that you must accept the prompt to enable location permissions for the app.\n6.  Use Visual Studio to trigger the location background task. For more info about triggering background tasks in Visual Studio, see [How to trigger background tasks](http://go.microsoft.com/fwlink/p/?LinkID=325378).\n\n## Troubleshoot your app\n\n\nBefore your app can access location, **Location** must be enabled on the device. In the **Settings** app, check that the following **location privacy settings** are turned on:\n\n-   **Location for this device...** is turned **on** (not applicable in Windows 10 Mobile)\n-   The location services setting, **Location**, is turned **on**\n-   Under **Choose apps that can use your location**, your app is set to **on**\n\n## Related topics\n\n* [UWP geolocation sample](http://go.microsoft.com/fwlink/p/?linkid=533278)\n* [Design guidelines for geofencing](https://msdn.microsoft.com/library/windows/apps/dn631756)\n* [Design guidelines for location-aware apps](https://msdn.microsoft.com/library/windows/apps/hh465148)\n\n\n"}