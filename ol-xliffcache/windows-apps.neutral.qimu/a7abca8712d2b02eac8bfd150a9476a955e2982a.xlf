<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\controls-and-patterns\app-bars.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">a7abca8712d2b02eac8bfd150a9476a955e2982a</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>App bar and command bar</source>
          <target>App bar and command bar</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Command bars (also called "app bars") provide users with easy access to your app's most common tasks, and can be used to show commands or options that are specific to the user's context, such as a photo selection or drawing mode.</source>
          <target>Command bars (also called "app bars") provide users with easy access to your app's most common tasks, and can be used to show commands or options that are specific to the user's context, such as a photo selection or drawing mode.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>They can also be used for navigation among app pages or between app sections.</source>
          <target>They can also be used for navigation among app pages or between app sections.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Command bars can be used with any navigation pattern.</source>
          <target>Command bars can be used with any navigation pattern.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Example of a command bar with icons</source>
          <target>Example of a command bar with icons</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Important APIs</source>
          <target>Important APIs</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>CommandBar</source>
          <target>CommandBar</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>AppBarButton</source>
          <target>AppBarButton</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>AppBarToggleButton</source>
          <target>AppBarToggleButton</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>AppBarSeparator</source>
          <target>AppBarSeparator</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Is this the right control</source>
          <target>Is this the right control</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.appbarbutton.aspx)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.appbartogglebutton.aspx)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.appbarseparator.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>The CommandBar control is a general-purpose, flexible, light-weight control that can display both complex content, such as images or text blocks, as well as simple commands such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AppBarButton</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppBarToggleButton</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AppBarSeparator</pc> controls.</source>
          <target>The CommandBar control is a general-purpose, flexible, light-weight control that can display both complex content, such as images or text blocks, as well as simple commands such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AppBarButton</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppBarToggleButton</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AppBarSeparator</pc> controls.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>XAML provides both the AppBar control and the CommandBar control.</source>
          <target>XAML provides both the AppBar control and the CommandBar control.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>You should use the AppBar only when you are upgrading a Universal Windows 8 app that uses the AppBar, and need to minimize changes.</source>
          <target>You should use the AppBar only when you are upgrading a Universal Windows 8 app that uses the AppBar, and need to minimize changes.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>For new apps in Windows 10, we recommend using the CommandBar control instead.</source>
          <target>For new apps in Windows 10, we recommend using the CommandBar control instead.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>This document assumes you are using the CommandBar control.</source>
          <target>This document assumes you are using the CommandBar control.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Examples</source>
          <target>Examples</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>An expanded command bar in the Microsoft Photos app.</source>
          <target>An expanded command bar in the Microsoft Photos app.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Command bar in Microsoft Photos app</source>
          <target>Command bar in Microsoft Photos app</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>A command bar in the Outlook Calendar on Windows Phone.</source>
          <target>A command bar in the Outlook Calendar on Windows Phone.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Command bar in Outlook Calendar app</source>
          <target>Command bar in Outlook Calendar app</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Anatomy</source>
          <target>Anatomy</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>By default, the command bar shows a row of icon buttons and an optional "see more" button, which is represented by an ellipsis <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" />.</source>
          <target>By default, the command bar shows a row of icon buttons and an optional "see more" button, which is represented by an ellipsis <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Here's the command bar created by the example code shown later.</source>
          <target>Here's the command bar created by the example code shown later.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>It's shown in its closed compact state.</source>
          <target>It's shown in its closed compact state.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>A closed command bar</source>
          <target>A closed command bar</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>The command bar can also be shown in a closed minimal state that looks like this.</source>
          <target>The command bar can also be shown in a closed minimal state that looks like this.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#open-and-closed-states)</data>
        </originalData>
        <segment state="initial">
          <source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Open and closed states</pc> section for more info.</source>
          <target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Open and closed states</pc> section for more info.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>A closed command bar</source>
          <target>A closed command bar</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Here's the same command bar in its open state.</source>
          <target>Here's the same command bar in its open state.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>The labels identify the main parts of the control.</source>
          <target>The labels identify the main parts of the control.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>A closed command bar</source>
          <target>A closed command bar</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>The command bar is divided into 4 main areas:</source>
          <target>The command bar is divided into 4 main areas:</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>The "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button is shown on the right of the bar.</source>
          <target>The "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button is shown on the right of the bar.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>Pressing the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button has 2 effects: it reveals the labels on the primary command buttons, and it opens the overflow menu if any secondary commands are present.</source>
          <target>Pressing the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button has 2 effects: it reveals the labels on the primary command buttons, and it opens the overflow menu if any secondary commands are present.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>The button will not be visible when no secondary commands and no hidden labels are present.</source>
          <target>The button will not be visible when no secondary commands and no hidden labels are present.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.commandbar.overflowbuttonvisibility.aspx)</data>
          <data id="id3">`OverflowButtonVisibility`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <ph dataRef="id3" id="ph1" />
            </pc> property allows apps to change this default auto-hide behavior.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <ph dataRef="id3" id="ph1" />
            </pc> property allows apps to change this default auto-hide behavior.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>The content area is aligned to the left side of the bar.</source>
          <target>The content area is aligned to the left side of the bar.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">`Content`</data>
        </originalData>
        <segment state="initial">
          <source>It is shown if the <ph dataRef="id1" id="ph1" /> property is populated.</source>
          <target>It is shown if the <ph dataRef="id1" id="ph1" /> property is populated.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>The primary command area is aligned to the right side of the bar, next to the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button.</source>
          <target>The primary command area is aligned to the right side of the bar, next to the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">`PrimaryCommands`</data>
        </originalData>
        <segment state="initial">
          <source>It is shown if the <ph dataRef="id1" id="ph1" /> property is populated.</source>
          <target>It is shown if the <ph dataRef="id1" id="ph1" /> property is populated.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">`SecondaryCommands`</data>
        </originalData>
        <segment state="initial">
          <source>The overflow menu is shown only when the command bar is open and the <ph dataRef="id1" id="ph1" /> property is populated.</source>
          <target>The overflow menu is shown only when the command bar is open and the <ph dataRef="id1" id="ph1" /> property is populated.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]()</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>The layout is reversed when the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlowDirection</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RightToLeft</pc>.</source>
          <target>The layout is reversed when the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlowDirection</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RightToLeft</pc>.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Create a command bar</source>
          <target>Create a command bar</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>This example creates the command bar shown previously.</source>
          <target>This example creates the command bar shown previously.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Commands and content</source>
          <target>Commands and content</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.commandbar.primarycommands.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.commandbar.secondarycommands.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.contentcontrol.content.aspx)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source>The CommandBar control has 3 properties you can use to add commands and content: <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PrimaryCommands</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SecondaryCommands</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Content</pc></pc>.</source>
          <target>The CommandBar control has 3 properties you can use to add commands and content: <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PrimaryCommands</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SecondaryCommands</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Content</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Primary actions and overflow</source>
          <target>Primary actions and overflow</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>By default, items you add to the command bar are added to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PrimaryCommands</pc> collection.</source>
          <target>By default, items you add to the command bar are added to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PrimaryCommands</pc> collection.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>These commands are shown to the left of the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button, in what we call the action space.</source>
          <target>These commands are shown to the left of the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button, in what we call the action space.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Place the most important commands, the ones that you want to remain visible in the bar, in the action space.</source>
          <target>Place the most important commands, the ones that you want to remain visible in the bar, in the action space.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>On the smallest screens (320 epx width), a maximum of 4 items will fit in the command bar's action space.</source>
          <target>On the smallest screens (320 epx width), a maximum of 4 items will fit in the command bar's action space.</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You can add commands to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SecondaryCommands</pc> collection, and these items are shown in the overflow area.</source>
          <target>You can add commands to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SecondaryCommands</pc> collection, and these items are shown in the overflow area.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Place less important commands within the overflow area.</source>
          <target>Place less important commands within the overflow area.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>The default overflow area is styled to be distinct from the bar.</source>
          <target>The default overflow area is styled to be distinct from the bar.</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.commandbar.commandbaroverflowpresenterstyle.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.style.aspx)</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.commandbaroverflowpresenter.aspx)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source>You can adjust the styling by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommandBarOverflowPresenterStyle</pc></pc> property to a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Style</pc> that targets the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">CommandBarOverflowPresenter</pc></pc>.</source>
          <target>You can adjust the styling by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommandBarOverflowPresenterStyle</pc></pc> property to a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Style</pc> that targets the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">CommandBarOverflowPresenter</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>You can programmatically move commands between the PrimaryCommands and SecondaryCommands as needed.</source>
          <target>You can programmatically move commands between the PrimaryCommands and SecondaryCommands as needed.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>App bar buttons</source>
          <target>App bar buttons</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbarbutton.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbartogglebutton.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbarseparator.aspx)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source>Both the PrimaryCommands and SecondaryCommands can be populated only with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppBarButton</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AppBarToggleButton</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">AppBarSeparator</pc></pc> command elements.</source>
          <target>Both the PrimaryCommands and SecondaryCommands can be populated only with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppBarButton</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AppBarToggleButton</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">AppBarSeparator</pc></pc> command elements.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>These controls are optimized for use in a command bar, and their appearance changes depending on whether the control is used in the action space or overflow area.</source>
          <target>These controls are optimized for use in a command bar, and their appearance changes depending on whether the control is used in the action space or overflow area.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>The app bar button controls are characterized by an icon and associated label.</source>
          <target>The app bar button controls are characterized by an icon and associated label.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>They have two sizes; normal and compact.</source>
          <target>They have two sizes; normal and compact.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>By default, the text label is shown.</source>
          <target>By default, the text label is shown.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbarbutton.iscompact.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsCompact</pc></pc> property is set to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">true</pc>, the text label is hidden.</source>
          <target>When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsCompact</pc></pc> property is set to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">true</pc>, the text label is hidden.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>When used in a CommandBar control, the command bar overwrites the button's IsCompact property automatically as the command bar is opened and closed.</source>
          <target>When used in a CommandBar control, the command bar overwrites the button's IsCompact property automatically as the command bar is opened and closed.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.commandbar.defaultlabelposition.aspx)</data>
          <data id="id3">`DefaultLabelPosition`</data>
        </originalData>
        <segment state="initial">
          <source>To position app bar button labels to the right of their icons, apps can use CommandBar's new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" /></pc> property.</source>
          <target>To position app bar button labels to the right of their icons, apps can use CommandBar's new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" /></pc> property.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>Individual app bar buttons cannot move their label position, this must be done on the command bar as a whole.</source>
          <target>Individual app bar buttons cannot move their label position, this must be done on the command bar as a whole.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Here is what the code snippet above looks like when drawn by an app.</source>
          <target>Here is what the code snippet above looks like when drawn by an app.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>Command bar with labels on the right</source>
          <target>Command bar with labels on the right</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>When you place an app bar button in the overflow menu (SecondaryCommands), it's shown as text only.</source>
          <target>When you place an app bar button in the overflow menu (SecondaryCommands), it's shown as text only.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Here's the same app bar toggle button shown in the action space as a primary command (top), and in the overflow area as a secondary command (bottom).</source>
          <target>Here's the same app bar toggle button shown in the action space as a primary command (top), and in the overflow area as a secondary command (bottom).</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>App bar button as primary and secondary command</source>
          <target>App bar button as primary and secondary command</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>If there is a command that would appear consistently across pages, it's best to keep that command in a consistent location.</source>
          <target>If there is a command that would appear consistently across pages, it's best to keep that command in a consistent location.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>We recommended placing Accept, Yes, and OK commands to the left of Reject, No, and Cancel.</source>
          <target>We recommended placing Accept, Yes, and OK commands to the left of Reject, No, and Cancel.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>Consistency gives users the confidence to move around the system and helps them transfer their knowledge of app navigation from app to app.</source>
          <target>Consistency gives users the confidence to move around the system and helps them transfer their knowledge of app navigation from app to app.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>Button labels</source>
          <target>Button labels</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>We recommend keeping app bar button labels short, preferably a single word.</source>
          <target>We recommend keeping app bar button labels short, preferably a single word.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Longer labels positioned bellow an app bar button's icon will wrap to multiple lines thus increasing the overall height of the opened command bar.</source>
          <target>Longer labels positioned bellow an app bar button's icon will wrap to multiple lines thus increasing the overall height of the opened command bar.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>You can include a soft-hyphen character (0x00AD) in the text for a label to hint at the character boundary where a word break should occur.</source>
          <target>You can include a soft-hyphen character (0x00AD) in the text for a label to hint at the character boundary where a word break should occur.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>In XAML, you express this using an escape sequence, like this:</source>
          <target>In XAML, you express this using an escape sequence, like this:</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>When the label wraps at the hinted location, it looks like this.</source>
          <target>When the label wraps at the hinted location, it looks like this.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>App bar button with wrapping label</source>
          <target>App bar button with wrapping label</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>Other content</source>
          <target>Other content</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You can add any XAML elements to the content area by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content</pc> property.</source>
          <target>You can add any XAML elements to the content area by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content</pc> property.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>If you want to add more than one element, you need to place them in a panel container and make the panel the single child of the Content property.</source>
          <target>If you want to add more than one element, you need to place them in a panel container and make the panel the single child of the Content property.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>When there are both primary commands and content, the primary commands take precedence and may cause the content to be clipped.</source>
          <target>When there are both primary commands and content, the primary commands take precedence and may cause the content to be clipped.</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.closeddisplaymode.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ClosedDisplayMode</pc></pc> is <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Compact</pc>, the content can be clipped if it is larger than the compact size of the command bar.</source>
          <target>When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ClosedDisplayMode</pc></pc> is <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Compact</pc>, the content can be clipped if it is larger than the compact size of the command bar.</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.opening.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.closed.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>You should handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Opening</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Closed</pc></pc> events to show or hide parts of the UI in the content area so that they aren't clipped.</source>
          <target>You should handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Opening</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Closed</pc></pc> events to show or hide parts of the UI in the content area so that they aren't clipped.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#open-and-closed-states)</data>
        </originalData>
        <segment state="initial">
          <source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Open and closed states</pc> section for more info.</source>
          <target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Open and closed states</pc> section for more info.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>Open and closed states</source>
          <target>Open and closed states</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>The command bar can be open or closed.</source>
          <target>The command bar can be open or closed.</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>A user can switch between these states by pressing the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button.</source>
          <target>A user can switch between these states by pressing the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.isopen.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can switch between them programmatically by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsOpen</pc></pc> property.</source>
          <target>You can switch between them programmatically by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsOpen</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>When open, the primary command buttons are shown with text labels and the overflow menu is open if secondary commands are present, as shown previously.</source>
          <target>When open, the primary command buttons are shown with text labels and the overflow menu is open if secondary commands are present, as shown previously.</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.opening.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.opened.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.closing.aspx)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.closed.aspx)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Opening</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Opened</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Closing</pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Closed</pc></pc> events to respond to the command bar being opened or closed.</source>
          <target>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Opening</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Opened</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Closing</pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Closed</pc></pc> events to respond to the command bar being opened or closed.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>The Opening and Closing events occur before the transition animation begins.</source>
          <target>The Opening and Closing events occur before the transition animation begins.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>The Opened and Closed events occur after the transition completes.</source>
          <target>The Opened and Closed events occur after the transition completes.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>In this example, the Opening and Closing events are used to change the opacity of the command bar.</source>
          <target>In this example, the Opening and Closing events are used to change the opacity of the command bar.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>When the command bar is closed, it's semi-transparent so the app background shows through.</source>
          <target>When the command bar is closed, it's semi-transparent so the app background shows through.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>When the command bar is opened, the command bar is made opaque so the user can focus on the commands.</source>
          <target>When the command bar is opened, the command bar is made opaque so the user can focus on the commands.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>ClosedDisplayMode</source>
          <target>ClosedDisplayMode</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.closeddisplaymode.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can control how the command bar is shown in its closed state by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ClosedDisplayMode</pc></pc> property.</source>
          <target>You can control how the command bar is shown in its closed state by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ClosedDisplayMode</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>There are 3 closed display modes to choose from:</source>
          <target>There are 3 closed display modes to choose from:</target>
        </segment>
      </unit>
      <unit id="204">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Compact</pc>: The default mode.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Compact</pc>: The default mode.</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>Shows content, primary command icons without labels, and the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button.</source>
          <target>Shows content, primary command icons without labels, and the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button.</target>
        </segment>
      </unit>
      <unit id="206">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\[</data>
          <data id="id4">\]</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Minimal</pc>: Shows only a thin bar that acts as the "see more" <ph dataRef="id3" id="ph1" />•••<ph dataRef="id4" id="ph2" /> button.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Minimal</pc>: Shows only a thin bar that acts as the "see more" <ph dataRef="id3" id="ph1" />•••<ph dataRef="id4" id="ph2" /> button.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>The user can press anywhere on the bar to open it.</source>
          <target>The user can press anywhere on the bar to open it.</target>
        </segment>
      </unit>
      <unit id="208">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hidden</pc>: The command bar is not shown when it's closed.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hidden</pc>: The command bar is not shown when it's closed.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>This can be useful for showing contextual commands with an inline command bar.</source>
          <target>This can be useful for showing contextual commands with an inline command bar.</target>
        </segment>
      </unit>
      <unit id="210">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In this case, you must open the command bar programmatically by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsOpen</pc> property or changing the ClosedDisplayMode to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Minimal</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Compact</pc>.</source>
          <target>In this case, you must open the command bar programmatically by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsOpen</pc> property or changing the ClosedDisplayMode to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Minimal</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Compact</pc>.</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richeditbox.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>Here, a command bar is used to hold simple formatting commands for a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichEditBox</pc>.</source>
          <target>Here, a command bar is used to hold simple formatting commands for a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichEditBox</pc>.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>When the edit box doesn't have focus, the formatting commands can be distracting, so they're hidden.</source>
          <target>When the edit box doesn't have focus, the formatting commands can be distracting, so they're hidden.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>When the edit box is being used, the command bar's ClosedDisplayMode is changed to Compact so the formatting commands are visible.</source>
          <target>When the edit box is being used, the command bar's ClosedDisplayMode is changed to Compact so the formatting commands are visible.</target>
        </segment>
      </unit>
      <unit id="214">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;nbsp;&amp;nbsp;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />The implementation of the editing commands is beyond the scope of this example.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>
            <ph dataRef="id3" id="ph1" />The implementation of the editing commands is beyond the scope of this example.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](rich-edit-box.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichEditBox</pc> article.</source>
          <target>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichEditBox</pc> article.</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source>Although the Minimal and Hidden modes are useful in some situations, keep in mind that hiding all actions could confuse users.</source>
          <target>Although the Minimal and Hidden modes are useful in some situations, keep in mind that hiding all actions could confuse users.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Changing the ClosedDisplayMode to provide more or less of a hint to the user affects the layout of surrounding elements.</source>
          <target>Changing the ClosedDisplayMode to provide more or less of a hint to the user affects the layout of surrounding elements.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>In contrast, when the CommandBar transitions between closed and open, it does not affect the layout of other elements.</source>
          <target>In contrast, when the CommandBar transitions between closed and open, it does not affect the layout of other elements.</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>IsSticky</source>
          <target>IsSticky</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>After opening the command bar, if the user interacts with the app anywhere outside of the control then by default the overflow menu is dismissed and the labels are hidden.</source>
          <target>After opening the command bar, if the user interacts with the app anywhere outside of the control then by default the overflow menu is dismissed and the labels are hidden.</target>
        </segment>
      </unit>
      <unit id="221">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Closing it in this way is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">light dismiss</pc>.</source>
          <target>Closing it in this way is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">light dismiss</pc>.</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbar.issticky.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can control how the bar is dismissed by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsSticky</pc></pc> property.</source>
          <target>You can control how the bar is dismissed by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsSticky</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="223">
        <originalData>
          <data id="id1">`IsSticky="true"`</data>
        </originalData>
        <segment state="initial">
          <source>When the bar is sticky (<ph dataRef="id1" id="ph1" />), it's not closed by a light dismiss gesture.</source>
          <target>When the bar is sticky (<ph dataRef="id1" id="ph1" />), it's not closed by a light dismiss gesture.</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>The bar remains open until the user presses the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button or, if present, selects an item from the overflow menu.</source>
          <target>The bar remains open until the user presses the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button or, if present, selects an item from the overflow menu.</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>Do's and don'ts</source>
          <target>Do's and don'ts</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>Placement</source>
          <target>Placement</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>Command bars can be placed at the top of the app window, at the bottom of the app window, and inline.</source>
          <target>Command bars can be placed at the top of the app window, at the bottom of the app window, and inline.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>Example 1 of app bar placement</source>
          <target>Example 1 of app bar placement</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>For small handheld devices, we recommend positioning command bars at the bottom of the screen for easy reachability.</source>
          <target>For small handheld devices, we recommend positioning command bars at the bottom of the screen for easy reachability.</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source>For devices with larger screens, if you're placing just one command bar, we recommend placing it near the top of the window.</source>
          <target>For devices with larger screens, if you're placing just one command bar, we recommend placing it near the top of the window.</target>
        </segment>
      </unit>
      <unit id="231">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.graphics.display.displayinformation.diagonalsizeininches.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DiagonalSizeInInches</pc></pc> API to determine physical screen size.</source>
          <target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DiagonalSizeInInches</pc></pc> API to determine physical screen size.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source>Command bars can be placed in the following screen regions on single-view screens (left example) and on multi-view screens (right example).</source>
          <target>Command bars can be placed in the following screen regions on single-view screens (left example) and on multi-view screens (right example).</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>Inline command bars can be placed anywhere in the action space.</source>
          <target>Inline command bars can be placed anywhere in the action space.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>Example 2 of app bar placement</source>
          <target>Example 2 of app bar placement</target>
        </segment>
      </unit>
      <unit id="235">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`BottomAppBar`</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Touch devices</pc>: If the command bar must remain visible to a user when the touch keyboard, or Soft Input Panel (SIP), appears then you can assign the command bar to the <ph dataRef="id3" id="ph1" /> property of a Page and it will move to remain visible when the SIP is present.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Touch devices</pc>: If the command bar must remain visible to a user when the touch keyboard, or Soft Input Panel (SIP), appears then you can assign the command bar to the <ph dataRef="id3" id="ph1" /> property of a Page and it will move to remain visible when the SIP is present.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>Otherwise, you should place the command bar inline and positioned relative to your app content.</source>
          <target>Otherwise, you should place the command bar inline and positioned relative to your app content.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>Actions</source>
          <target>Actions</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>Prioritize the actions that go in the command bar based on their visibility.</source>
          <target>Prioritize the actions that go in the command bar based on their visibility.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>Place the most important commands, the ones that you want to remain visible in the bar, in the first few slots of the action space.</source>
          <target>Place the most important commands, the ones that you want to remain visible in the bar, in the first few slots of the action space.</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>On the smallest screens (320 epx width), between 2-4 items will fit in the command bar's action space, depending on other on-screen UI.</source>
          <target>On the smallest screens (320 epx width), between 2-4 items will fit in the command bar's action space, depending on other on-screen UI.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>Place less-important commands later in the bar's action space or within the first few slots of the overflow area.</source>
          <target>Place less-important commands later in the bar's action space or within the first few slots of the overflow area.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source>These commands will be visible when the bar has enough screen real estate, but will fall into the overflow area's drop-down menu when there isn't enough room.</source>
          <target>These commands will be visible when the bar has enough screen real estate, but will fall into the overflow area's drop-down menu when there isn't enough room.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>Place the least-important commands within the overflow area.</source>
          <target>Place the least-important commands within the overflow area.</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source>These commands will always appear in the drop-down menu.</source>
          <target>These commands will always appear in the drop-down menu.</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>If there is a command that would appear consistently across pages, it's best to keep that command in a consistent location.</source>
          <target>If there is a command that would appear consistently across pages, it's best to keep that command in a consistent location.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>We recommended placing Accept, Yes, and OK commands to the left of Reject, No, and Cancel.</source>
          <target>We recommended placing Accept, Yes, and OK commands to the left of Reject, No, and Cancel.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>Consistency gives users the confidence to move around the system and helps them transfer their knowledge of app navigation from app to app.</source>
          <target>Consistency gives users the confidence to move around the system and helps them transfer their knowledge of app navigation from app to app.</target>
        </segment>
      </unit>
      <unit id="248">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>Although you can place all actions within the overflow area so that only the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button is visible on the command bar, keep in mind that hiding all actions could confuse users.</source>
          <target>Although you can place all actions within the overflow area so that only the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button is visible on the command bar, keep in mind that hiding all actions could confuse users.</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>Command bar flyouts</source>
          <target>Command bar flyouts</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>Consider logical groupings for the commands, such as placing Reply, Reply All, and Forward in a Respond menu.</source>
          <target>Consider logical groupings for the commands, such as placing Reply, Reply All, and Forward in a Respond menu.</target>
        </segment>
      </unit>
      <unit id="251">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.menuflyout.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.flyout.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>While typically an app bar button activates a single command, an app bar button can be used to show a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MenuFlyout</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Flyout</pc></pc> with custom content.</source>
          <target>While typically an app bar button activates a single command, an app bar button can be used to show a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MenuFlyout</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Flyout</pc></pc> with custom content.</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source>Example of flyouts on a command bar</source>
          <target>Example of flyouts on a command bar</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>Overflow menu</source>
          <target>Overflow menu</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>Example of command bar with "More" area</source>
          <target>Example of command bar with "More" area</target>
        </segment>
      </unit>
      <unit id="255">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>The overflow menu is represented by the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button, the visible entry point for the menu.</source>
          <target>The overflow menu is represented by the "see more" <ph dataRef="id1" id="ph1" />•••<ph dataRef="id2" id="ph2" /> button, the visible entry point for the menu.</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source>It's on the far-right of the toolbar, adjacent to primary actions.</source>
          <target>It's on the far-right of the toolbar, adjacent to primary actions.</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>The overflow area is allocated for actions that are less frequently used.</source>
          <target>The overflow area is allocated for actions that are less frequently used.</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source>Actions can come and go between the primary action space and the overflow menu at breakpoints.</source>
          <target>Actions can come and go between the primary action space and the overflow menu at breakpoints.</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source>You can also designate actions to always remain in the primary action space regardless of screen or app window size.</source>
          <target>You can also designate actions to always remain in the primary action space regardless of screen or app window size.</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source>Infrequently used actions can remain in the overflow menu even when the app bar is expanded on larger screens.</source>
          <target>Infrequently used actions can remain in the overflow menu even when the app bar is expanded on larger screens.</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source>Adaptability</source>
          <target>Adaptability</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source>The same number of actions in the app bar should be visible in both portrait and landscape orientation, which reduces the user's cognitive load.</source>
          <target>The same number of actions in the app bar should be visible in both portrait and landscape orientation, which reduces the user's cognitive load.</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source>The number of actions available should be determined by the device's width in portrait orientation.</source>
          <target>The number of actions available should be determined by the device's width in portrait orientation.</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>On small screens that are likely to be used one-handed, app bars should be positioned near the bottom of the screen.</source>
          <target>On small screens that are likely to be used one-handed, app bars should be positioned near the bottom of the screen.</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>On larger screens, placing app bars closer to the top of the window makes them more noticeable and discoverable.</source>
          <target>On larger screens, placing app bars closer to the top of the window makes them more noticeable and discoverable.</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source>By targeting breakpoints, you can move actions in and out of the menu as the window size changes.</source>
          <target>By targeting breakpoints, you can move actions in and out of the menu as the window size changes.</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source>By targeting screen diagonal, you can modify app bar position based on device screen size.</source>
          <target>By targeting screen diagonal, you can modify app bar position based on device screen size.</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source>Consider moving labels to the right of app bar button icons to improve legibility.</source>
          <target>Consider moving labels to the right of app bar button icons to improve legibility.</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source>Labels on the bottom require users to open the command bar to reveal labels, while labels on the right are visible even when command bar is closed.</source>
          <target>Labels on the bottom require users to open the command bar to reveal labels, while labels on the right are visible even when command bar is closed.</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source>This optimization works well on larger windows.</source>
          <target>This optimization works well on larger windows.</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source>Related articles</source>
          <target>Related articles</target>
        </segment>
      </unit>
      <unit id="272">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">
          </data>
          <data id="id4">[</data>
          <data id="id5">](https://msdn.microsoft.com/library/windows/apps/dn958433)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">For designers</pc>
            <ph dataRef="id3" id="ph1" />
            <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Command design basics for UWP apps</pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">For designers</pc>
            <ph dataRef="id3" id="ph1" />
            <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Command design basics for UWP apps</pc>
          </target>
        </segment>
      </unit>
      <unit id="273">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">
          </data>
          <data id="id4">[</data>
          <data id="id5">](https://msdn.microsoft.com/library/windows/apps/dn279427)</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">For developers (XAML)</pc>
            <ph dataRef="id3" id="ph1" />
            <pc dataRefEnd="id5" dataRefStart="id4" id="p2">
              <pc dataRefEnd="id7" dataRefStart="id6" id="p3">CommandBar</pc>
            </pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">For developers (XAML)</pc>
            <ph dataRef="id3" id="ph1" />
            <pc dataRefEnd="id5" dataRefStart="id4" id="p2">
              <pc dataRefEnd="id7" dataRefStart="id6" id="p3">CommandBar</pc>
            </pc>
          </target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>