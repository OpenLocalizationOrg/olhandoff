{"nodes":[{"content":"You can customize a control's visual structure and visual behavior by creating a control template in the XAML framework.","pos":[32,152]},{"content":"Control templates","pos":[296,313]},{"content":"Control templates","pos":[416,433]},{"content":"Important APIs","pos":[439,453]},{"content":"ControlTemplate class","pos":[464,485]},{"content":"Control.Template property","pos":[554,579]},{"content":"You can customize a control's visual structure and visual behavior by creating a control template in the XAML framework.","pos":[685,805]},{"content":"Controls have many properties, such as <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Background<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209395)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Foreground<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209414)</ept>, and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>FontFamily<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br209404)</ept>, that you can set to specify different aspects of the control's appearance.","pos":[806,1151]},{"content":"But the changes that you can make by setting these properties are limited.","pos":[1152,1226]},{"content":"You can specify additional customizations by creating a template using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ControlTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> class.","pos":[1227,1388]},{"content":"Here, we show you how to create a <bpt id=\"p1\">**</bpt>ControlTemplate<ept id=\"p1\">**</ept> to customize the appearance of a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CheckBox<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> control.","pos":[1389,1557]},{"content":"Custom control template example","pos":[1562,1593]},{"content":"By default, a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CheckBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> control puts its content (the string or object next to the <bpt id=\"p3\">**</bpt>CheckBox<ept id=\"p3\">**</ept>) to the right of the selection box, and a check mark indicates that a user selected the <bpt id=\"p4\">**</bpt>CheckBox<ept id=\"p4\">**</ept>.","pos":[1596,1856]},{"content":"These characteristics represent the visual structure and visual behavior of the <bpt id=\"p1\">**</bpt>CheckBox<ept id=\"p1\">**</ept>.","pos":[1857,1950]},{"pos":[1952,2196],"content":"Here's a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CheckBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> using the default <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ControlTemplate<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> shown in the <ph id=\"ph1\">`Unchecked`</ph>, <ph id=\"ph2\">`Checked`</ph>, and <ph id=\"ph3\">`Indeterminate`</ph> states."},{"content":"default checkbox template","pos":[2200,2225]},{"content":"You can change these characteristics by creating a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ControlTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> for the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CheckBox<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept>.","pos":[2274,2486]},{"content":"For example, if you want the content of the check box to be below the selection box, and you want to use an <bpt id=\"p1\">**</bpt>X<ept id=\"p1\">**</ept> to indicate that a user selected the check box.","pos":[2487,2648]},{"content":"You specify these characteristics in the <bpt id=\"p1\">**</bpt>ControlTemplate<ept id=\"p1\">**</ept> of the <bpt id=\"p2\">**</bpt>CheckBox<ept id=\"p2\">**</ept>.","pos":[2649,2730]},{"content":"To use a custom template with a control, assign the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ControlTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> to the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Template<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209465)</ept> property of the control.","pos":[2732,2968]},{"content":"Here's a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CheckBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> using a <bpt id=\"p3\">**</bpt>ControlTemplate<ept id=\"p3\">**</ept> called <ph id=\"ph1\">`CheckBoxTemplate1`</ph>.","pos":[2969,3106]},{"content":"We show the Extensible Application Markup Language (XAML) for the <bpt id=\"p1\">**</bpt>ControlTemplate<ept id=\"p1\">**</ept> in the next section.","pos":[3107,3213]},{"pos":[3337,3518],"content":"Here's how this <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CheckBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> looks in the <ph id=\"ph1\">`Unchecked`</ph>, <ph id=\"ph2\">`Checked`</ph>, and <ph id=\"ph3\">`Indeterminate`</ph> states after we apply our template."},{"content":"custom checkbox template","pos":[3522,3546]},{"content":"Specify the visual structure of a control","pos":[3590,3631]},{"content":"When you create a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ControlTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept>, you combine <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>FrameworkElement<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> objects to build a single control.","pos":[3634,3860]},{"content":"A <bpt id=\"p1\">**</bpt>ControlTemplate<ept id=\"p1\">**</ept> must have only one <bpt id=\"p2\">**</bpt>FrameworkElement<ept id=\"p2\">**</ept> as its root element.","pos":[3861,3943]},{"content":"The root element usually contains other <bpt id=\"p1\">**</bpt>FrameworkElement<ept id=\"p1\">**</ept> objects.","pos":[3944,4013]},{"content":"The combination of objects makes up the control's visual structure.","pos":[4014,4081]},{"content":"This XAML creates a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ControlTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept> for a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CheckBox<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> that specifies that the content of the control is below the selection box.","pos":[4083,4336]},{"content":"The root element is a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Border<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept>.","pos":[4337,4430]},{"content":"The example specifies a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Path<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br243355)</ept> to create an <bpt id=\"p3\">**</bpt>X<ept id=\"p3\">**</ept> that indicates that a user selected the <bpt id=\"p4\">**</bpt>CheckBox<ept id=\"p4\">**</ept>, and an <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Ellipse<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br243343)</ept> that indicates an indeterminate state.","pos":[4431,4714]},{"content":"Note that the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Opacity<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208962)</ept> is set to 0 on the <bpt id=\"p3\">**</bpt>Path<ept id=\"p3\">**</ept> and the <bpt id=\"p4\">**</bpt>Ellipse<ept id=\"p4\">**</ept> so that by default, neither appear.","pos":[4715,4884]},{"content":"Specify the visual behavior of a control","pos":[6765,6805]},{"content":"A visual behavior specifies the appearance of a control when it is in a certain state.","pos":[6808,6894]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CheckBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> control has 3 check states: <ph id=\"ph1\">`Checked`</ph>, <ph id=\"ph2\">`Unchecked`</ph>, and <ph id=\"ph3\">`Indeterminate`</ph>.","pos":[6895,7044]},{"content":"The value of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IsChecked<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209798)</ept> property determines the state of the <bpt id=\"p3\">**</bpt>CheckBox<ept id=\"p3\">**</ept>, and its state determines what appears in the box.","pos":[7045,7236]},{"pos":[7238,7498],"content":"This table lists the possible values of <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IsChecked<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209798)</ept>, the corresponding states of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CheckBox<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept>, and the appearance of the <bpt id=\"p5\">**</bpt>CheckBox<ept id=\"p5\">**</ept>."},{"pos":[7644,7663],"content":"<bpt id=\"p1\">**</bpt>IsChecked<ept id=\"p1\">**</ept> value"},{"pos":[7666,7684],"content":"<bpt id=\"p1\">**</bpt>CheckBox<ept id=\"p1\">**</ept> state"},{"pos":[7687,7710],"content":"<bpt id=\"p1\">**</bpt>CheckBox<ept id=\"p1\">**</ept> appearance"},{"content":"true","pos":[7717,7721]},{"content":"Contains an \"X\".","pos":[7758,7774]},{"content":"false","pos":[7788,7793]},{"content":"Empty.","pos":[7829,7835]},{"content":"null","pos":[7859,7863]},{"content":"Contains a circle.","pos":[7900,7918]},{"content":"You specify the appearance of a control when it is in a certain state by using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualState<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209007)</ept> objects.","pos":[7930,8093]},{"content":"A <bpt id=\"p1\">**</bpt>VisualState<ept id=\"p1\">**</ept> contains a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Setter<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept> or <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Storyboard<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br243053)</ept> that changes the appearance of the elements in the <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>ControlTemplate<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept>.","pos":[8094,8403]},{"content":"When the control enters the state that the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualState.Name<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209031)</ept> property specifies, the property changes in the <bpt id=\"p3\">**</bpt>Setter<ept id=\"p3\">**</ept> or <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Storyboard<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept> are applied.","pos":[8404,8677]},{"content":"When the control exits the state, the changes are removed.","pos":[8678,8736]},{"content":"You add <bpt id=\"p1\">**</bpt>VisualState<ept id=\"p1\">**</ept> objects to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>VisualStateGroup<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209014)</ept> objects.","pos":[8737,8861]},{"content":"You add <bpt id=\"p1\">**</bpt>VisualStateGroup<ept id=\"p1\">**</ept> objects to the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>VisualStateManager.VisualStateGroups<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh738505)</ept> attached property, which you set on the root <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>FrameworkElement<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br208706)</ept> of the <bpt id=\"p6\">**</bpt>ControlTemplate<ept id=\"p6\">**</ept>.","pos":[8862,9160]},{"content":"This XAML shows the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualState<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209007)</ept> objects for the <ph id=\"ph1\">`Checked`</ph>, <ph id=\"ph2\">`Unchecked`</ph>, and <ph id=\"ph3\">`Indeterminate`</ph> states.","pos":[9162,9325]},{"content":"The example sets the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualStateManager.VisualStateGroups<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh738505)</ept> attached property on the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Border<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept>, which is the root element of the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>ControlTemplate<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br209391)</ept>.","pos":[9326,9658]},{"content":"The <ph id=\"ph1\">`Checked`</ph> <bpt id=\"p1\">**</bpt>VisualState<ept id=\"p1\">**</ept> specifies that the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Opacity<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208962)</ept> of the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Path<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br243355)</ept> named <ph id=\"ph2\">`CheckGlyph`</ph> (which we show in the previous example) is 1.","pos":[9659,9920]},{"content":"The <ph id=\"ph1\">`Indeterminate`</ph> <bpt id=\"p1\">**</bpt>VisualState<ept id=\"p1\">**</ept> specifies that the <bpt id=\"p2\">**</bpt>Opacity<ept id=\"p2\">**</ept> of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Ellipse<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br243343)</ept> named <ph id=\"ph2\">`IndeterminateGlyph`</ph> is 1.","pos":[9921,10099]},{"content":"The <ph id=\"ph1\">`Unchecked`</ph> <bpt id=\"p1\">**</bpt>VisualState<ept id=\"p1\">**</ept> has no <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Setter<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept> or <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Storyboard<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept>, so the <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>CheckBox<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> returns to its default appearance.","pos":[10100,10403]},{"content":"To better understand how <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualState<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209007)</ept> objects work, consider what happens when the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CheckBox<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> goes from the <ph id=\"ph1\">`Unchecked`</ph> state to the <ph id=\"ph2\">`Checked`</ph> state, then to the <ph id=\"ph3\">`Indeterminate`</ph> state, and then back to the <ph id=\"ph4\">`Unchecked`</ph> state.","pos":[13631,13980]},{"content":"Here are the transitions.","pos":[13981,14006]},{"content":"State transition","pos":[14870,14886]},{"content":"What happens","pos":[14909,14921]},{"content":"CheckBox appearance when the transition completes","pos":[15246,15295]},{"pos":[15300,15330],"content":"From <ph id=\"ph1\">`Unchecked`</ph> to <ph id=\"ph2\">`Checked`</ph>."},{"pos":[15339,15625],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Setter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept> value of the <ph id=\"ph1\">`Checked`</ph> <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>VisualState<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209007)</ept> is applied, so the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Opacity<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br208962)</ept> of <ph id=\"ph2\">`CheckGlyph`</ph> is 1."},{"content":"An X is displayed.","pos":[15780,15798]},{"pos":[15834,15868],"content":"From <ph id=\"ph1\">`Checked`</ph> to <ph id=\"ph2\">`Indeterminate`</ph>."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Setter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept> value of the <ph id=\"ph1\">`Indeterminate`</ph> <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>VisualState<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209007)</ept> is applied, so the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Opacity<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br208962)</ept> of <ph id=\"ph2\">`IndeterminateGlyph`</ph> is 1.","pos":[15873,16173]},{"content":"The <bpt id=\"p1\">**</bpt>Setter<ept id=\"p1\">**</ept> value of the <ph id=\"ph1\">`Checked`</ph> <bpt id=\"p2\">**</bpt>VisualState<ept id=\"p2\">**</ept> is removed, so the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Opacity<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br228078)</ept> of <ph id=\"ph2\">`CheckGlyph`</ph> is 0.","pos":[16174,16340]},{"content":"A circle is displayed.","pos":[16343,16365]},{"pos":[16397,16433],"content":"From <ph id=\"ph1\">`Indeterminate`</ph> to <ph id=\"ph2\">`Unchecked`</ph>."},{"pos":[16436,16736],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Setter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept> value of the <ph id=\"ph1\">`Indeterminate`</ph> <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>VisualState<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209007)</ept> is removed, so the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Opacity<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br208962)</ept> of <ph id=\"ph2\">`IndeterminateGlyph`</ph> is 0."},{"content":"Nothing is displayed.","pos":[16877,16898]},{"pos":[16932,17244],"content":"For more info about how to create visual states for controls, and in particular how to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Storyboard<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br210490)</ept> class and the animation types, see <bpt id=\"p3\">[</bpt>Storyboarded animations for visual states<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/jj819808)</ept>."},{"content":"Use tools to work with themes easily","pos":[17249,17285]},{"content":"A fast way to apply themes to your controls is to right-click on a control on the Microsoft Visual Studio <bpt id=\"p1\">**</bpt>Document Outline<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Edit Theme<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Edit Style<ept id=\"p3\">**</ept> (depending on the control you are right-clicking on).","pos":[17287,17511]},{"content":"You can then apply an existing theme by selecting <bpt id=\"p1\">**</bpt>Apply Resource<ept id=\"p1\">**</ept> or define a new one by selecting <bpt id=\"p2\">**</bpt>Create Empty<ept id=\"p2\">**</ept>.","pos":[17512,17631]},{"content":"Controls and accessibility","pos":[17636,17662]},{"content":"When you create a new template for a control, in addition to possibly changing the control's behavior and visual appearance, you might also be changing how the control represents itself to accessibility frameworks.","pos":[17664,17878]},{"content":"The Universal Windows Platform (UWP) supports the Microsoft UI Automation framework for accessibility.","pos":[17879,17981]},{"content":"All of the default controls and their templates have support for common UI Automation control types and patterns that are appropriate for the control's purpose and function.","pos":[17982,18155]},{"content":"These control types and patterns are interpreted by UI Automation clients such as assistive technologies, and this enables a control to be accessible as a part of a larger accessible app UI.","pos":[18156,18346]},{"content":"To separate the basic control logic and also to satisfy some of the architectural requirements of UI Automation, control classes include their accessibility support in a separate class, an automation peer.","pos":[18348,18553]},{"content":"The automation peers sometimes have interactions with the control templates because the peers expect certain named parts to exist in the templates, so that functionality such as enabling assistive technologies to invoke actions of buttons is possible.","pos":[18554,18805]},{"content":"When you create a completely new custom control, you sometimes also will want to create a new automation peer to go along with it.","pos":[18807,18937]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Custom automation peers<ept id=\"p1\">](../accessibility/custom-automation-peers.md)</ept>.","pos":[18938,19028]},{"content":"Learn more about a control's default template","pos":[19033,19078]},{"content":"The topics that document the styles and templates for XAML controls show you excerpts of the same starting XAML you'd see if you used the <bpt id=\"p1\">**</bpt>Edit Theme<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Edit Style<ept id=\"p2\">**</ept> techniques explained previously.","pos":[19080,19283]},{"content":"Each topic lists the names of the visual states, the theme resources used, and the full XAML for the style that contains the template.","pos":[19284,19418]},{"content":"The topics can be useful guidance if you've already started modifying a template and want to see what the original template looked like, or to verify that your new template has all of the required named visual states.","pos":[19419,19636]},{"content":"Theme resources in control templates","pos":[19641,19677]},{"content":"For some of the attributes in the XAML examples, you may have noticed resource references that use the <bpt id=\"p1\">[</bpt>{ThemeResource} markup extension<ept id=\"p1\">](../xaml-platform/themeresource-markup-extension.md)</ept>.","pos":[19679,19869]},{"content":"This is a technique that enables a single control template to use resources that can be different values depending on which theme is currently active.","pos":[19870,20020]},{"content":"This is particularly important for brushes and colors, because the main purpose of the themes is to enable users to choose whether they want a dark, light, or high contrast theme applied to the system overall.","pos":[20021,20230]},{"content":"Apps that use the XAML resource system can use a resource set that's appropriate for that theme, so that the theme choices in an app's UI are reflective of the user's systemwide theme choice.","pos":[20231,20422]},{"content":"Note","pos":[20426,20430]},{"content":"This article is for Windows 10 developers writing UWP apps.","pos":[20435,20494]},{"content":"If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id=\"p1\">[</bpt>archived documentation<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.","pos":[20495,20636]}],"content":"---\nauthor: Jwmsft\nDescription: You can customize a control's visual structure and visual behavior by creating a control template in the XAML framework.\nMS-HAID: 'dev\\_ctrl\\_layout\\_txt.control\\_templates'\nMSHAttr: 'PreferredLib:/library/windows/apps'\nSearch.Product: eADQiWindows 10XVcnh\ntitle: Control templates\nms.assetid: 6E642626-A1D6-482F-9F7E-DBBA7A071DAD\nlabel: Control templates\ntemplate: detail.hbs\n---\n\n# Control templates\n\n\n\n**Important APIs**\n\n-   [**ControlTemplate class**](https://msdn.microsoft.com/library/windows/apps/br209391)\n-   [**Control.Template property**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.template.aspx)\n\nYou can customize a control's visual structure and visual behavior by creating a control template in the XAML framework. Controls have many properties, such as [**Background**](https://msdn.microsoft.com/library/windows/apps/br209395), [**Foreground**](https://msdn.microsoft.com/library/windows/apps/br209414), and [**FontFamily**](https://msdn.microsoft.com/library/windows/apps/br209404), that you can set to specify different aspects of the control's appearance. But the changes that you can make by setting these properties are limited. You can specify additional customizations by creating a template using the [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/br209391) class. Here, we show you how to create a **ControlTemplate** to customize the appearance of a [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) control.\n\n## Custom control template example\n\n\nBy default, a [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) control puts its content (the string or object next to the **CheckBox**) to the right of the selection box, and a check mark indicates that a user selected the **CheckBox**. These characteristics represent the visual structure and visual behavior of the **CheckBox**.\n\nHere's a [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) using the default [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/br209391) shown in the `Unchecked`, `Checked`, and `Indeterminate` states.\n\n![default checkbox template](images/templates-checkbox-states-default.png)\n\nYou can change these characteristics by creating a [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/br209391) for the [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316). For example, if you want the content of the check box to be below the selection box, and you want to use an **X** to indicate that a user selected the check box. You specify these characteristics in the **ControlTemplate** of the **CheckBox**.\n\nTo use a custom template with a control, assign the [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/br209391) to the [**Template**](https://msdn.microsoft.com/library/windows/apps/br209465) property of the control. Here's a [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) using a **ControlTemplate** called `CheckBoxTemplate1`. We show the Extensible Application Markup Language (XAML) for the **ControlTemplate** in the next section.\n\n```XAML\n<CheckBox Content=\"CheckBox\" Template=\"{StaticResource CheckBoxTemplate1}\" IsThreeState=\"True\" Margin=\"20\"/>\n```\n\nHere's how this [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) looks in the `Unchecked`, `Checked`, and `Indeterminate` states after we apply our template.\n\n![custom checkbox template](images/templates-checkbox-states.png)\n\n## Specify the visual structure of a control\n\n\nWhen you create a [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/br209391), you combine [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/br208706) objects to build a single control. A **ControlTemplate** must have only one **FrameworkElement** as its root element. The root element usually contains other **FrameworkElement** objects. The combination of objects makes up the control's visual structure.\n\nThis XAML creates a [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/br209391) for a [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) that specifies that the content of the control is below the selection box. The root element is a [**Border**](https://msdn.microsoft.com/library/windows/apps/br209250). The example specifies a [**Path**](https://msdn.microsoft.com/library/windows/apps/br243355) to create an **X** that indicates that a user selected the **CheckBox**, and an [**Ellipse**](https://msdn.microsoft.com/library/windows/apps/br243343) that indicates an indeterminate state. Note that the [**Opacity**](https://msdn.microsoft.com/library/windows/apps/br208962) is set to 0 on the **Path** and the **Ellipse** so that by default, neither appear.\n\n```XAML\n<ControlTemplate x:Key=\"CheckBoxTemplate1\" TargetType=\"CheckBox\">\n    <Border BorderBrush=\"{TemplateBinding BorderBrush}\" \n            BorderThickness=\"{TemplateBinding BorderThickness}\" \n            Background=\"{TemplateBinding Background}\">\n        <Grid>\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"*\"/>\n                <RowDefinition Height=\"25\"/>\n            </Grid.RowDefinitions>\n            <Rectangle x:Name=\"NormalRectangle\" Fill=\"Transparent\" Height=\"20\" Width=\"20\" \n                       Stroke=\"{ThemeResource SystemControlForegroundBaseMediumHighBrush}\" \n                       StrokeThickness=\"{ThemeResource CheckBoxBorderThemeThickness}\" \n                       UseLayoutRounding=\"False\"/>\n            <!-- Create an X to indicate that the CheckBox is selected. -->\n            <Path x:Name=\"CheckGlyph\" \n                  Data=\"M103,240 L111,240 119,248 127,240 135,240 123,252 135,264 127,264 119,257 111,264 103,264 114,252 z\" \n                  Fill=\"{ThemeResource CheckBoxForegroundThemeBrush}\" \n                  FlowDirection=\"LeftToRight\" \n                  Height=\"14\" Width=\"16\" Opacity=\"0\" Stretch=\"Fill\"/>\n            <Ellipse x:Name=\"IndeterminateGlyph\" \n                     Fill=\"{ThemeResource CheckBoxForegroundThemeBrush}\" \n                     Height=\"8\" Width=\"8\" Opacity=\"0\" UseLayoutRounding=\"False\" />\n            <ContentPresenter x:Name=\"ContentPresenter\" \n                              ContentTemplate=\"{TemplateBinding ContentTemplate}\" \n                              Content=\"{TemplateBinding Content}\" \n                              Margin=\"{TemplateBinding Padding}\" Grid.Row=\"1\" \n                              HorizontalAlignment=\"Center\" \n                              VerticalAlignment=\"{TemplateBinding VerticalContentAlignment}\"/>\n        </Grid>\n    </Border>\n</ControlTemplate>\n```\n\n## Specify the visual behavior of a control\n\n\nA visual behavior specifies the appearance of a control when it is in a certain state. The [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) control has 3 check states: `Checked`, `Unchecked`, and `Indeterminate`. The value of the [**IsChecked**](https://msdn.microsoft.com/library/windows/apps/br209798) property determines the state of the **CheckBox**, and its state determines what appears in the box.\n\nThis table lists the possible values of [**IsChecked**](https://msdn.microsoft.com/library/windows/apps/br209798), the corresponding states of the [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316), and the appearance of the **CheckBox**.\n\n|                     |                    |                         |\n|---------------------|--------------------|-------------------------|\n| **IsChecked** value | **CheckBox** state | **CheckBox** appearance |\n| **true**            | `Checked`          | Contains an \"X\".        |\n| **false**           | `Unchecked`        | Empty.                  |\n| **null**            | `Indeterminate`    | Contains a circle.      |\n\n \n\nYou specify the appearance of a control when it is in a certain state by using [**VisualState**](https://msdn.microsoft.com/library/windows/apps/br209007) objects. A **VisualState** contains a [**Setter**](https://msdn.microsoft.com/library/windows/apps/br208817) or [**Storyboard**](https://msdn.microsoft.com/library/windows/apps/br243053) that changes the appearance of the elements in the [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/br209391). When the control enters the state that the [**VisualState.Name**](https://msdn.microsoft.com/library/windows/apps/br209031) property specifies, the property changes in the **Setter** or [**Storyboard**](https://msdn.microsoft.com/library/windows/apps/br210490) are applied. When the control exits the state, the changes are removed. You add **VisualState** objects to [**VisualStateGroup**](https://msdn.microsoft.com/library/windows/apps/br209014) objects. You add **VisualStateGroup** objects to the [**VisualStateManager.VisualStateGroups**](https://msdn.microsoft.com/library/windows/apps/hh738505) attached property, which you set on the root [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/br208706) of the **ControlTemplate**.\n\nThis XAML shows the [**VisualState**](https://msdn.microsoft.com/library/windows/apps/br209007) objects for the `Checked`, `Unchecked`, and `Indeterminate` states. The example sets the [**VisualStateManager.VisualStateGroups**](https://msdn.microsoft.com/library/windows/apps/hh738505) attached property on the [**Border**](https://msdn.microsoft.com/library/windows/apps/br209250), which is the root element of the [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/br209391). The `Checked` **VisualState** specifies that the [**Opacity**](https://msdn.microsoft.com/library/windows/apps/br208962) of the [**Path**](https://msdn.microsoft.com/library/windows/apps/br243355) named `CheckGlyph` (which we show in the previous example) is 1. The `Indeterminate` **VisualState** specifies that the **Opacity** of the [**Ellipse**](https://msdn.microsoft.com/library/windows/apps/br243343) named `IndeterminateGlyph` is 1. The `Unchecked` **VisualState** has no [**Setter**](https://msdn.microsoft.com/library/windows/apps/br208817) or [**Storyboard**](https://msdn.microsoft.com/library/windows/apps/br210490), so the [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) returns to its default appearance.\n\n```XAML\n<ControlTemplate x:Key=\"CheckBoxTemplate1\" TargetType=\"CheckBox\">\n    <Border BorderBrush=\"{TemplateBinding BorderBrush}\" \n            BorderThickness=\"{TemplateBinding BorderThickness}\" \n            Background=\"{TemplateBinding Background}\">\n            \n        <VisualStateManager.VisualStateGroups>\n            <VisualStateGroup x:Name=\"CheckStates\">\n                <VisualState x:Name=\"Checked\">\n                    <VisualState.Setters>\n                        <Setter Target=\"CheckGlyph.Opacity\" Value=\"1\"/>\n                    </VisualState.Setters>\n                    <!-- This Storyboard is equivalent to the Setter. -->\n                    <!--<Storyboard>\n                        <DoubleAnimation Duration=\"0\" To=\"1\" \n                         Storyboard.TargetName=\"CheckGlyph\" Storyboard.TargetProperty=\"Opacity\"/>\n                    </Storyboard>-->\n                </VisualState>\n                <VisualState x:Name=\"Unchecked\"/>\n                <VisualState x:Name=\"Indeterminate\">\n                    <VisualState.Setters>\n                        <Setter Target=\"IndeterminateGlyph.Opacity\" Value=\"1\"/>\n                    </VisualState.Setters>\n                    <!-- This Storyboard is equivalent to the Setter. -->\n                    <!--<Storyboard>\n                        <DoubleAnimation Duration=\"0\" To=\"1\"\n                         Storyboard.TargetName=\"IndeterminateGlyph\" Storyboard.TargetProperty=\"Opacity\"/>\n                    </Storyboard>-->\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateManager.VisualStateGroups>\n\n        <Grid>\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"*\"/>\n                <RowDefinition Height=\"25\"/>\n            </Grid.RowDefinitions>\n            <Rectangle x:Name=\"NormalRectangle\" Fill=\"Transparent\" Height=\"20\" Width=\"20\" \n                       Stroke=\"{ThemeResource SystemControlForegroundBaseMediumHighBrush}\" \n                       StrokeThickness=\"{ThemeResource CheckBoxBorderThemeThickness}\" \n                       UseLayoutRounding=\"False\"/>\n            <!-- Create an X to indicate that the CheckBox is selected. -->\n            <Path x:Name=\"CheckGlyph\" \n                  Data=\"M103,240 L111,240 119,248 127,240 135,240 123,252 135,264 127,264 119,257 111,264 103,264 114,252 z\" \n                  Fill=\"{ThemeResource CheckBoxForegroundThemeBrush}\" \n                  FlowDirection=\"LeftToRight\" \n                  Height=\"14\" Width=\"16\" Opacity=\"0\" Stretch=\"Fill\"/>\n            <Ellipse x:Name=\"IndeterminateGlyph\" \n                     Fill=\"{ThemeResource CheckBoxForegroundThemeBrush}\" \n                     Height=\"8\" Width=\"8\" Opacity=\"0\" UseLayoutRounding=\"False\" />\n            <ContentPresenter x:Name=\"ContentPresenter\" \n                              ContentTemplate=\"{TemplateBinding ContentTemplate}\" \n                              Content=\"{TemplateBinding Content}\" \n                              Margin=\"{TemplateBinding Padding}\" Grid.Row=\"1\" \n                              HorizontalAlignment=\"Center\" \n                              VerticalAlignment=\"{TemplateBinding VerticalContentAlignment}\"/>\n        </Grid>\n    </Border>\n</ControlTemplate>\n```\n\nTo better understand how [**VisualState**](https://msdn.microsoft.com/library/windows/apps/br209007) objects work, consider what happens when the [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) goes from the `Unchecked` state to the `Checked` state, then to the `Indeterminate` state, and then back to the `Unchecked` state. Here are the transitions.\n\n|                                      |                                                                                                                                                                                                                                                                                                                                                |                                                   |\n|--------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------|\n| State transition                     | What happens                                                                                                                                                                                                                                                                                                                                   | CheckBox appearance when the transition completes |\n| From `Unchecked` to `Checked`.       | The [**Setter**](https://msdn.microsoft.com/library/windows/apps/br208817) value of the `Checked` [**VisualState**](https://msdn.microsoft.com/library/windows/apps/br209007) is applied, so the [**Opacity**](https://msdn.microsoft.com/library/windows/apps/br208962) of `CheckGlyph` is 1.                                                                                                                                                         | An X is displayed.                                |\n| From `Checked` to `Indeterminate`.   | The [**Setter**](https://msdn.microsoft.com/library/windows/apps/br208817) value of the `Indeterminate` [**VisualState**](https://msdn.microsoft.com/library/windows/apps/br209007) is applied, so the [**Opacity**](https://msdn.microsoft.com/library/windows/apps/br208962) of `IndeterminateGlyph` is 1. The **Setter** value of the `Checked` **VisualState** is removed, so the [**Opacity**](https://msdn.microsoft.com/library/windows/apps/br228078) of `CheckGlyph` is 0. | A circle is displayed.                            |\n| From `Indeterminate` to `Unchecked`. | The [**Setter**](https://msdn.microsoft.com/library/windows/apps/br208817) value of the `Indeterminate` [**VisualState**](https://msdn.microsoft.com/library/windows/apps/br209007) is removed, so the [**Opacity**](https://msdn.microsoft.com/library/windows/apps/br208962) of `IndeterminateGlyph` is 0.                                                                                                                                           | Nothing is displayed.                             |\n\n \nFor more info about how to create visual states for controls, and in particular how to use the [**Storyboard**](https://msdn.microsoft.com/library/windows/apps/br210490) class and the animation types, see [Storyboarded animations for visual states](https://msdn.microsoft.com/library/windows/apps/xaml/jj819808).\n\n## Use tools to work with themes easily\n\nA fast way to apply themes to your controls is to right-click on a control on the Microsoft Visual Studio **Document Outline** and select **Edit Theme** or **Edit Style** (depending on the control you are right-clicking on). You can then apply an existing theme by selecting **Apply Resource** or define a new one by selecting **Create Empty**.\n\n## Controls and accessibility\n\nWhen you create a new template for a control, in addition to possibly changing the control's behavior and visual appearance, you might also be changing how the control represents itself to accessibility frameworks. The Universal Windows Platform (UWP) supports the Microsoft UI Automation framework for accessibility. All of the default controls and their templates have support for common UI Automation control types and patterns that are appropriate for the control's purpose and function. These control types and patterns are interpreted by UI Automation clients such as assistive technologies, and this enables a control to be accessible as a part of a larger accessible app UI.\n\nTo separate the basic control logic and also to satisfy some of the architectural requirements of UI Automation, control classes include their accessibility support in a separate class, an automation peer. The automation peers sometimes have interactions with the control templates because the peers expect certain named parts to exist in the templates, so that functionality such as enabling assistive technologies to invoke actions of buttons is possible.\n\nWhen you create a completely new custom control, you sometimes also will want to create a new automation peer to go along with it. For more info, see [Custom automation peers](../accessibility/custom-automation-peers.md).\n\n## Learn more about a control's default template\n\nThe topics that document the styles and templates for XAML controls show you excerpts of the same starting XAML you'd see if you used the **Edit Theme** or **Edit Style** techniques explained previously. Each topic lists the names of the visual states, the theme resources used, and the full XAML for the style that contains the template. The topics can be useful guidance if you've already started modifying a template and want to see what the original template looked like, or to verify that your new template has all of the required named visual states.\n\n## Theme resources in control templates\n\nFor some of the attributes in the XAML examples, you may have noticed resource references that use the [{ThemeResource} markup extension](../xaml-platform/themeresource-markup-extension.md). This is a technique that enables a single control template to use resources that can be different values depending on which theme is currently active. This is particularly important for brushes and colors, because the main purpose of the themes is to enable users to choose whether they want a dark, light, or high contrast theme applied to the system overall. Apps that use the XAML resource system can use a resource set that's appropriate for that theme, so that the theme choices in an app's UI are reflective of the user's systemwide theme choice.\n\n**Note**  \nThis article is for Windows 10 developers writing UWP apps. If you’re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132).\n\n \n\n \n\n \n\n\n\n"}