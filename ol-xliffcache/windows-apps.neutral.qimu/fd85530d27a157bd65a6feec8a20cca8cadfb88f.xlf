<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\devices-sensors\generate-3mf.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">fd85530d27a157bd65a6feec8a20cca8cadfb88f</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Describes the structure of the 3D Manufacturing Format file type and how it can be created and manipulated with the Windows.Graphics.Printing3D API.</source>
          <target>Describes the structure of the 3D Manufacturing Format file type and how it can be created and manipulated with the Windows.Graphics.Printing3D API.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Generate a 3MF package</source>
          <target>Generate a 3MF package</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Generate a 3MF package</source>
          <target>Generate a 3MF package</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Important APIs</source>
          <target>Important APIs</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Windows.Graphics.Printing3D</source>
          <target>Windows.Graphics.Printing3D</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target>Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.</source>
          <target>Microsoft makes no warranties, express or implied, with respect to the information provided here.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.graphics.printing3d.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Describes the structure of the 3D Manufacturing Format document and how it can be created and manipulated with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Graphics.Printing3D</pc></pc> API.</source>
          <target>Describes the structure of the 3D Manufacturing Format document and how it can be created and manipulated with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Graphics.Printing3D</pc></pc> API.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>What is 3MF?</source>
          <target>What is 3MF?</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>The 3D Manufacturing Format is a set of conventions for using XML to describe the appearance and structure of 3D models for the purpose of manufacturing (3D printing).</source>
          <target>The 3D Manufacturing Format is a set of conventions for using XML to describe the appearance and structure of 3D models for the purpose of manufacturing (3D printing).</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>It defines a set of parts (some required and some optional) and their relationships, with the goal of providing all necessary information to a 3D manufacturing device.</source>
          <target>It defines a set of parts (some required and some optional) and their relationships, with the goal of providing all necessary information to a 3D manufacturing device.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>A data set that adheres to the 3D Manufacturing Format can be saved as a file with the .3mf extension.</source>
          <target>A data set that adheres to the 3D Manufacturing Format can be saved as a file with the .3mf extension.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.graphics.printing3d.printing3d3mfpackage.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In Windows 10, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3D3MFPackage</pc></pc> class in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows.Graphics.Printing3D</pc> namespace is analogous to a single .3mf file, and other classes map to the particular XML elements in the file.</source>
          <target>In Windows 10, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3D3MFPackage</pc></pc> class in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows.Graphics.Printing3D</pc> namespace is analogous to a single .3mf file, and other classes map to the particular XML elements in the file.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\#</data>
        </originalData>
        <segment state="initial">
          <source>This guide describes how each of the main parts of a 3MF document can be created and set programmatically, how the 3MF Materials Extension can be utilized, and finally how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3D3MFPackage</pc> object in C<ph dataRef="id3" id="ph1" /> can be converted and saved as a .3mf file.</source>
          <target>This guide describes how each of the main parts of a 3MF document can be created and set programmatically, how the 3MF Materials Extension can be utilized, and finally how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3D3MFPackage</pc> object in C<ph dataRef="id3" id="ph1" /> can be converted and saved as a .3mf file.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://3mf.io/what-is-3mf/3mf-specification/)</data>
        </originalData>
        <segment state="initial">
          <source>For more information on the standards of 3MF or the 3MF Materials Extension, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3MF Specification</pc>.</source>
          <target>For more information on the standards of 3MF or the 3MF Materials Extension, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3MF Specification</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Core classes in the 3MF structure</source>
          <target>Core classes in the 3MF structure</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/windows.graphics.printing3d.printing3dmodel.aspx)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3D3MFPackage</pc> class represents a complete 3MF document, and at the core of a 3MF document is its model part, represented by the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Printing3DModel</pc></pc> class.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3D3MFPackage</pc> class represents a complete 3MF document, and at the core of a 3MF document is its model part, represented by the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Printing3DModel</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Most of the information we wish to specify about a 3D model will be stored by setting the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DModel</pc> class and the properties of their underlying classes.</source>
          <target>Most of the information we wish to specify about a 3D model will be stored by setting the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DModel</pc> class and the properties of their underlying classes.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>InitClasses</source>
          <target>InitClasses</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Metadata</source>
          <target>Metadata</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The model part of a 3MF document can hold metadata in the form of key/value pairs of strings stored in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Metadata</pc> property.</source>
          <target>The model part of a 3MF document can hold metadata in the form of key/value pairs of strings stored in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Metadata</pc> property.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://3mf.io/what-is-3mf/3mf-specification/)</data>
        </originalData>
        <segment state="initial">
          <source>There are a number of predefined names of metadata, but other pairs can be added as part of an extension (described in more detail in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3MF specification</pc>).</source>
          <target>There are a number of predefined names of metadata, but other pairs can be added as part of an extension (described in more detail in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3MF specification</pc>).</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>It is up to the receiver of the package (a 3D manufacturing device) to determine whether and how to handle metadata, but it is good practice to include as much basic info as possible in the 3MF package:</source>
          <target>It is up to the receiver of the package (a 3D manufacturing device) to determine whether and how to handle metadata, but it is good practice to include as much basic info as possible in the 3MF package:</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Metadata</source>
          <target>Metadata</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Mesh data</source>
          <target>Mesh data</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>In the context of this guide, a mesh is a body of 3-dimensional geometry constructed from a single set of vertices (though it does not have to appear as a single solid).</source>
          <target>In the context of this guide, a mesh is a body of 3-dimensional geometry constructed from a single set of vertices (though it does not have to appear as a single solid).</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.graphics.printing3d.printing3dmesh.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>A mesh part is represented by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DMesh</pc></pc> class.</source>
          <target>A mesh part is represented by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DMesh</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>A valid mesh object must contain information about the location of all of its vertices as well as all the triangle faces that exist between certain sets of vertices.</source>
          <target>A valid mesh object must contain information about the location of all of its vertices as well as all the triangle faces that exist between certain sets of vertices.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>The following method adds vertices to a mesh and then gives them locations in 3D space:</source>
          <target>The following method adds vertices to a mesh and then gives them locations in 3D space:</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Vertices</source>
          <target>Vertices</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>The next method defines all of the triangles to be drawn across these vertices:</source>
          <target>The next method defines all of the triangles to be drawn across these vertices:</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>TriangleIndices</source>
          <target>TriangleIndices</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> All triangles must have their indices defined in counter-clockwise order (when viewing the triangle from outside of the mesh object), so that their face-normal vectors point outward.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> All triangles must have their indices defined in counter-clockwise order (when viewing the triangle from outside of the mesh object), so that their face-normal vectors point outward.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When a Printing3DMesh object contains valid sets of vertices and triangles, it should then be added to the model's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Meshes</pc> property.</source>
          <target>When a Printing3DMesh object contains valid sets of vertices and triangles, it should then be added to the model's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Meshes</pc> property.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>All <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DMesh</pc> objects in a package must be stored under the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Meshes</pc> property of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Printing3DModel</pc> class.</source>
          <target>All <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DMesh</pc> objects in a package must be stored under the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Meshes</pc> property of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Printing3DModel</pc> class.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>MeshAdd</source>
          <target>MeshAdd</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Create materials</source>
          <target>Create materials</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>A 3D model can hold data for multiple materials.</source>
          <target>A 3D model can hold data for multiple materials.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>This convention is intended to take advantage of 3D manufacturing devices that can use multiple materials on a single print job.</source>
          <target>This convention is intended to take advantage of 3D manufacturing devices that can use multiple materials on a single print job.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>There are also multiple <pc dataRefEnd="id2" dataRefStart="id1" id="p1">types</pc> of material gropus, each one capable of supporting a number of different individual materals.</source>
          <target>There are also multiple <pc dataRefEnd="id2" dataRefStart="id1" id="p1">types</pc> of material gropus, each one capable of supporting a number of different individual materals.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>Each material group must have a unique reference id number, and each material within that group must also have a unique id.</source>
          <target>Each material group must have a unique reference id number, and each material within that group must also have a unique id.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>The different mesh objects within a model can then reference these materials.</source>
          <target>The different mesh objects within a model can then reference these materials.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Furthermore, individual triangles on each mesh can specify different materials.</source>
          <target>Furthermore, individual triangles on each mesh can specify different materials.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Further still, different materials can even be represented within a single triangle, with each triangle vertex having a different material assigned to it and the face material calculated as the gradient between them.</source>
          <target>Further still, different materials can even be represented within a single triangle, with each triangle vertex having a different material assigned to it and the face material calculated as the gradient between them.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>This guide will first show how to create different kinds of materials within their respective material groups and store them as resources on the model object.</source>
          <target>This guide will first show how to create different kinds of materials within their respective material groups and store them as resources on the model object.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Then, we will go about assigning different materials to individual meshes and individual triangles.</source>
          <target>Then, we will go about assigning different materials to individual meshes and individual triangles.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Base materials</source>
          <target>Base materials</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>The default material type is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Base Material</pc>, which has both a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Color Material</pc> value (described below) and a name attribute that is intended to specify the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">type</pc> of material to use.</source>
          <target>The default material type is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Base Material</pc>, which has both a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Color Material</pc> value (described below) and a name attribute that is intended to specify the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">type</pc> of material to use.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>BaseMaterialGroup</source>
          <target>BaseMaterialGroup</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The 3D manufacturing device will determine which available physical materials map to which virtual material elements stored in the 3MF.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The 3D manufacturing device will determine which available physical materials map to which virtual material elements stored in the 3MF.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Material mapping doesn't have to be 1:1: if a 3D printer only uses one material, it will print the whole model in that material, regardless of which objects or faces were assigned different materials.</source>
          <target>Material mapping doesn't have to be 1:1: if a 3D printer only uses one material, it will print the whole model in that material, regardless of which objects or faces were assigned different materials.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Color materials</source>
          <target>Color materials</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color Materials</pc> are similar to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Base Materials</pc>, but they do not contain a name.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color Materials</pc> are similar to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Base Materials</pc>, but they do not contain a name.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Thus, they give no instructions as to what type of material should be used by the machine.</source>
          <target>Thus, they give no instructions as to what type of material should be used by the machine.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>They hold only color data, and let the machine choose the material type (and the machine may then prompt the user to choose).</source>
          <target>They hold only color data, and let the machine choose the material type (and the machine may then prompt the user to choose).</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">`colrMat`</data>
        </originalData>
        <segment state="initial">
          <source>In the code below, the <ph dataRef="id1" id="ph1" /> objects from the previous method are used on their own.</source>
          <target>In the code below, the <ph dataRef="id1" id="ph1" /> objects from the previous method are used on their own.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>ColorMaterialGroup</source>
          <target>ColorMaterialGroup</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Composite materials</source>
          <target>Composite materials</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Composite Materials</pc> simply instruct the manufacturing device to use a uniform mixture of different <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Base Materials</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Composite Materials</pc> simply instruct the manufacturing device to use a uniform mixture of different <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Base Materials</pc>.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Each <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Composite Material Group</pc> must reference exactly one <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Base Material Group</pc> from which to draw ingredients.</source>
          <target>Each <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Composite Material Group</pc> must reference exactly one <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Base Material Group</pc> from which to draw ingredients.</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source>Additonally, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Base Materials</pc> within this group that are to be made available must be listed out in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Material Indices</pc> list, which each <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Composite Material</pc> will then reference when specifying the ratios (every <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Composite Material</pc> is simply a ratio of <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Base Materials</pc>).</source>
          <target>Additonally, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Base Materials</pc> within this group that are to be made available must be listed out in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Material Indices</pc> list, which each <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Composite Material</pc> will then reference when specifying the ratios (every <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Composite Material</pc> is simply a ratio of <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Base Materials</pc>).</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>CompositeMaterialGroup</source>
          <target>CompositeMaterialGroup</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Texture coordinate materials</source>
          <target>Texture coordinate materials</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>3MF supports the use of 2D images to color the surfaces of 3D models.</source>
          <target>3MF supports the use of 2D images to color the surfaces of 3D models.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>This way, the model can convey much more color data per triangle face (as opposed to having just one color value per triangle vertex).</source>
          <target>This way, the model can convey much more color data per triangle face (as opposed to having just one color value per triangle vertex).</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color Materials</pc>, texture coordinate materials only convery color data.</source>
          <target>Like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color Materials</pc>, texture coordinate materials only convery color data.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>To use a 2D texture, a texture resource must first be declared:</source>
          <target>To use a 2D texture, a texture resource must first be declared:</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>TextureResource</source>
          <target>TextureResource</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> Texture data belongs to the 3MF Package itself, not to the model part within the package.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> Texture data belongs to the 3MF Package itself, not to the model part within the package.</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Next, we must fill out <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Texture3Coord Materials</pc>.</source>
          <target>Next, we must fill out <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Texture3Coord Materials</pc>.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>Each of these references a texture resource and specifies a particular point on the image (in UV coordinates).</source>
          <target>Each of these references a texture resource and specifies a particular point on the image (in UV coordinates).</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Texture2CoordMaterialGroup</source>
          <target>Texture2CoordMaterialGroup</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>Map materials to faces</source>
          <target>Map materials to faces</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>In order to dictate which materials are mapped to which vertices on each triangle, we must do some more work on the mesh object of our model (if a model contains multiple meshes, they must each have their materials assigned separately).</source>
          <target>In order to dictate which materials are mapped to which vertices on each triangle, we must do some more work on the mesh object of our model (if a model contains multiple meshes, they must each have their materials assigned separately).</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>As mentioned above, materials are assigned per-vertex, per-triangle.</source>
          <target>As mentioned above, materials are assigned per-vertex, per-triangle.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Refer to the code below to see how this information is entered and interpreted.</source>
          <target>Refer to the code below to see how this information is entered and interpreted.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>MaterialIndices</source>
          <target>MaterialIndices</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>Components and build</source>
          <target>Components and build</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>The component structure allows the user to place more than one mesh object in a printable 3D model.</source>
          <target>The component structure allows the user to place more than one mesh object in a printable 3D model.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.graphics.printing3d.printing3dcomponent.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DComponent</pc></pc> object contains a single mesh and a list of references to other components.</source>
          <target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DComponent</pc></pc> object contains a single mesh and a list of references to other components.</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.graphics.printing3d.printing3dcomponentwithmatrix.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>This is actually a list of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DComponentWithMatrix</pc></pc> objects.</source>
          <target>This is actually a list of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DComponentWithMatrix</pc></pc> objects.</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DComponentWithMatrix</pc> objects each contain a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DComponent</pc> and, importantly, a transform matrix that applies to the mesh and contained components of said <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Printing3DComponent</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DComponentWithMatrix</pc> objects each contain a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DComponent</pc> and, importantly, a transform matrix that applies to the mesh and contained components of said <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Printing3DComponent</pc>.</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>For example, a model of a car might consist of a "Body" <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DComponent</pc> that holds the mesh for the car's body.</source>
          <target>For example, a model of a car might consist of a "Body" <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DComponent</pc> that holds the mesh for the car's body.</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>The "Body" component may then contain references to four different <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DComponentWithMatrix</pc> objects, which all reference the same <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DComponent</pc> with the "Wheel" mesh and contain four different transform matrices (mapping the wheels to four different positions on the car's body).</source>
          <target>The "Body" component may then contain references to four different <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DComponentWithMatrix</pc> objects, which all reference the same <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DComponent</pc> with the "Wheel" mesh and contain four different transform matrices (mapping the wheels to four different positions on the car's body).</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>In this scenario, the "Body" mesh and "Wheel" mesh would each only need to be stored once, even though the final product would feature five meshes in total.</source>
          <target>In this scenario, the "Body" mesh and "Wheel" mesh would each only need to be stored once, even though the final product would feature five meshes in total.</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>All <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DComponent</pc> objects must be directly referenced in the model's <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Components</pc> property.</source>
          <target>All <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DComponent</pc> objects must be directly referenced in the model's <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Components</pc> property.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The one particular component that is to be used in the printing job is stored in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build</pc> Property.</source>
          <target>The one particular component that is to be used in the printing job is stored in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build</pc> Property.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>Components</source>
          <target>Components</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>Save package</source>
          <target>Save package</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Now that we have a model, with defined materials and components, we can save it to the package.</source>
          <target>Now that we have a model, with defined materials and components, we can save it to the package.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>SavePackage</source>
          <target>SavePackage</target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt204541.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>From here, we can either initiate a print job within the app (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3D printing from your app</pc>), or save this <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3D3MFPackage</pc> as a .3mf file.</source>
          <target>From here, we can either initiate a print job within the app (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3D printing from your app</pc>), or save this <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3D3MFPackage</pc> as a .3mf file.</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The following method takes a finished <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3D3MFPackage</pc> and saves its data to a .3mf file.</source>
          <target>The following method takes a finished <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3D3MFPackage</pc> and saves its data to a .3mf file.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>SaveTo3mf</source>
          <target>SaveTo3mf</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>3D printing from your app</source>
          <target>3D printing from your app</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>