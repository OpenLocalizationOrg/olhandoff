{"nodes":[{"content":"Create a periodic work item","pos":[78,105]},{"content":"Learn how to create a work item that repeats periodically.","pos":[119,177]},{"content":"Create a periodic work item","pos":[184,211]},{"content":"Updated for UWP apps on Windows 10.","pos":[216,251]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[252,344]},{"content":"Important APIs","pos":[352,366]},{"content":"CreatePeriodicTimer","pos":[378,397]},{"content":"ThreadPoolTimer","pos":[466,481]},{"content":"Learn how to create a work item that repeats periodically.","pos":[544,602]},{"content":"Create the periodic work item","pos":[607,636]},{"content":"Use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CreatePeriodicTimer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh967915)</ept> method to create a periodic work item.","pos":[638,768]},{"content":"Supply a lambda that accomplishes the work, and use the <bpt id=\"p1\">*</bpt>period<ept id=\"p1\">*</ept> parameter to specify the interval between submissions.","pos":[769,888]},{"content":"The period is specified using a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TimeSpan<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR225996)</ept> structure.","pos":[889,1004]},{"content":"The work item will be resubmitted every time the period elapses, so make sure the period is long enough for work to complete.","pos":[1005,1130]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CreateTimer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.createtimer.aspx)</ept> returns a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ThreadPoolTimer<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR230587)</ept> object.","pos":[1132,1360]},{"content":"Store this object in case the timer needs to be canceled.","pos":[1361,1418]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Avoid specifying a value of zero (or any value less than one millisecond) for the interval.","pos":[1422,1523]},{"content":"This causes the periodic timer to behave as a single-shot timer instead.","pos":[1524,1596]},{"pos":[1600,1764],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  You can use <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CoreDispatcher.RunAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</ept> to access the UI and show progress from the work item."},{"content":"The following example creates a work item that runs once every 60 seconds:","pos":[1766,1840]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[1844,1877]},{"content":"Handle cancellation of the periodic work item (optional)","pos":[3234,3290]},{"content":"If needed, you can handle cancellation of the periodic timer with a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TimerDestroyedHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh967926)</ept>.","pos":[3292,3446]},{"content":"Use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CreatePeriodicTimer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh967915)</ept> overload to supply an additional lambda that handles cancellation of the periodic work item.","pos":[3447,3631]},{"content":"The following example creates a periodic work item that repeats every 60 seconds and it also supplies a cancellation handler:","pos":[3633,3758]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[3762,3795]},{"content":"Cancel the timer","pos":[6325,6341]},{"content":"When necessary, call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Cancel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.cancel.aspx)</ept> method to stop the periodic work item from repeating.","pos":[6343,6542]},{"content":"If the work item is running when the periodic timer is cancelled it is allowed to complete.","pos":[6543,6634]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TimerDestroyedHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh967926)</ept> (if provided) is called when all instances of the periodic work item have completed.","pos":[6635,6809]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[6813,6846]},{"content":"Remarks","pos":[6939,6946]},{"pos":[6948,7067],"content":"For information about single-use timers, see <bpt id=\"p1\">[</bpt>Use a timer to submit a work item<ept id=\"p1\">](use-a-timer-to-submit-a-work-item.md)</ept>."},{"content":"Related topics","pos":[7072,7086]},{"content":"Submit a work item to the thread pool","pos":[7091,7128]},{"content":"Best practices for using the thread pool","pos":[7175,7215]},{"content":"Use a timer to submit a work item","pos":[7265,7298]}],"content":"---\nauthor: TylerMSFT\nms.assetid: 1B077801-0A58-4A34-887C-F1E85E9A37B0\ntitle: Create a periodic work item\ndescription: Learn how to create a work item that repeats periodically.\n---\n# Create a periodic work item\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n** Important APIs **\n\n-   [**CreatePeriodicTimer**](https://msdn.microsoft.com/library/windows/apps/Hh967915)\n-   [**ThreadPoolTimer**](https://msdn.microsoft.com/library/windows/apps/BR230587)\n\nLearn how to create a work item that repeats periodically.\n\n## Create the periodic work item\n\nUse the [**CreatePeriodicTimer**](https://msdn.microsoft.com/library/windows/apps/Hh967915) method to create a periodic work item. Supply a lambda that accomplishes the work, and use the *period* parameter to specify the interval between submissions. The period is specified using a [**TimeSpan**](https://msdn.microsoft.com/library/windows/apps/BR225996) structure. The work item will be resubmitted every time the period elapses, so make sure the period is long enough for work to complete.\n\n[**CreateTimer**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.createtimer.aspx) returns a [**ThreadPoolTimer**](https://msdn.microsoft.com/library/windows/apps/BR230587) object. Store this object in case the timer needs to be canceled.\n\n> **Note**  Avoid specifying a value of zero (or any value less than one millisecond) for the interval. This causes the periodic timer to behave as a single-shot timer instead.\n\n> **Note**  You can use [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/Hh750317) to access the UI and show progress from the work item.\n\nThe following example creates a work item that runs once every 60 seconds:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```csharp\n> TimeSpan period = TimeSpan.FromSeconds(60);\n> \n> ThreadPoolTimer PeriodicTimer = ThreadPoolTimer.CreatePeriodicTimer((source) =>\n>     {\n>         // \n>         // TODO: Work\n>         // \n>         \n>         // \n>         // Update the UI thread by using the UI core dispatcher.\n>         // \n>         Dispatcher.RunAsync(CoreDispatcherPriority.High,\n>             () =>\n>             {\n>                 // \n>                 // UI components can be accessed within this scope.\n>                 // \n> \n>             });\n> \n>     }, period);\n> ```\n> ``` cpp\n> TimeSpan period;\n> period.Duration = 60 * 10000000; // 10,000,000 ticks per second\n> \n> ThreadPoolTimer ^ PeriodicTimer = ThreadPoolTimer::CreatePeriodicTimer(\n>         ref new TimerElapsedHandler([this](ThreadPoolTimer^ source)\n>         {\n>             // \n>             // TODO: Work\n>             // \n>             \n>             // \n>             // Update the UI thread by using the UI core dispatcher.\n>             // \n>             Dispatcher->RunAsync(CoreDispatcherPriority::High,\n>                 ref new DispatchedHandler([this]()\n>                 {\n>                     // \n>                     // UI components can be accessed within this scope.\n>                     // \n>                         \n>                 }));\n> \n>         }), period);\n> ```\n\n## Handle cancellation of the periodic work item (optional)\n\nIf needed, you can handle cancellation of the periodic timer with a [**TimerDestroyedHandler**](https://msdn.microsoft.com/library/windows/apps/Hh967926). Use the [**CreatePeriodicTimer**](https://msdn.microsoft.com/library/windows/apps/Hh967915) overload to supply an additional lambda that handles cancellation of the periodic work item.\n\nThe following example creates a periodic work item that repeats every 60 seconds and it also supplies a cancellation handler:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ``` csharp\n> using Windows.System.Threading;\n> \n>     TimeSpan period = TimeSpan.FromSeconds(60);\n> \n>     ThreadPoolTimer PeriodicTimer = ThreadPoolTimer.CreatePeriodicTimer((source) =>\n>     {\n>         // \n>         // TODO: Work\n>         // \n>         \n>         // \n>         // Update the UI thread by using the UI core dispatcher.\n>         // \n>         Dispatcher.RunAsync(CoreDispatcherPriority.High,\n>             () =>\n>             {\n>                 // \n>                 // UI components can be accessed within this scope.\n>                 // \n> \n>             });\n>     },\n>     period,\n>     (source) =>\n>     {\n>         // \n>         // TODO: Handle periodic timer cancellation.\n>         // \n> \n>         // \n>         // Update the UI thread by using the UI core dispatcher.\n>         // \n>         Dispatcher->RunAsync(CoreDispatcherPriority.High,\n>             ()=>\n>             {\n>                 // \n>                 // UI components can be accessed within this scope.\n>                 //                 \n> \n>                 // Periodic timer cancelled.\n> \n>             }));\n>     });\n> ```\n> ``` cpp\n> using namespace Windows::System::Threading;\n> using namespace Windows::UI::Core;\n> \n> TimeSpan period;\n> period.Duration = 60 * 10000000; // 10,000,000 ticks per second\n> \n> ThreadPoolTimer ^ PeriodicTimer = ThreadPoolTimer::CreatePeriodicTimer(\n>         ref new TimerElapsedHandler([this](ThreadPoolTimer^ source)\n>         {\n>             // \n>             // TODO: Work\n>             // \n>                 \n>             // \n>             // Update the UI thread by using the UI core dispatcher.\n>             // \n>             Dispatcher->RunAsync(CoreDispatcherPriority::High,\n>                 ref new DispatchedHandler([this]()\n>                 {\n>                     // \n>                     // UI components can be accessed within this scope.\n>                     // \n> \n>                 }));\n> \n>         }),\n>         period,\n>         ref new TimerDestroyedHandler([&](ThreadPoolTimer ^ source)\n>         {\n>             // \n>             // TODO: Handle periodic timer cancellation.\n>             // \n> \n>             Dispatcher->RunAsync(CoreDispatcherPriority::High,\n>                 ref new DispatchedHandler([&]()\n>                 {\n>                     // \n>                     // UI components can be accessed within this scope.\n>                     // \n> \n>                     // Periodic timer cancelled.\n> \n>                 }));\n>         }));\n> ```\n\n## Cancel the timer\n\nWhen necessary, call the [**Cancel**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.cancel.aspx) method to stop the periodic work item from repeating. If the work item is running when the periodic timer is cancelled it is allowed to complete. The [**TimerDestroyedHandler**](https://msdn.microsoft.com/library/windows/apps/Hh967926) (if provided) is called when all instances of the periodic work item have completed.\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ``` csharp\n> PeriodicTimer.Cancel();\n> ```\n> ``` cpp\n> PeriodicTimer->Cancel();\n> ```\n\n## Remarks\n\nFor information about single-use timers, see [Use a timer to submit a work item](use-a-timer-to-submit-a-work-item.md).\n\n## Related topics\n\n* [Submit a work item to the thread pool](submit-a-work-item-to-the-thread-pool.md)\n* [Best practices for using the thread pool](best-practices-for-using-the-thread-pool.md)\n* [Use a timer to submit a work item](use-a-timer-to-submit-a-work-item.md)\n \n\n"}