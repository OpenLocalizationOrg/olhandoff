{"nodes":[{"content":"Lists language-level support in XAML for the Windows Runtime for certain data types in the common language runtime (CLR) and in other programming languages such as C++.","pos":[32,200]},{"content":"XAML intrinsic data types","pos":[208,233]},{"content":"XAML intrinsic data types","pos":[290,315]},{"content":"Updated for UWP apps on Windows 10.","pos":[320,355]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[356,448]},{"content":"XAML for the Windows Runtime provides language-level support for several data types that are frequently used primitives in the common language runtime (CLR) and in other programming languages such as C++.","pos":[453,657]},{"content":"The most common place you'll see XAML intrinsic data type usages is when resources are defined in a XAML resource dictionary.","pos":[659,784]},{"content":"You might define constants there, for example numbers that you use for multiple values.","pos":[785,872]},{"content":"Or you might use a storyboarded animation that animates using a string or Boolean value, and you'll then need a XAML object element representing the string or Boolean to fill the keyframe of your <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ObjectAnimationUsingKeyFrames<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br210320)</ept> definition.","pos":[873,1174]},{"content":"The Windows Runtime default XAML templates use both these techniques.","pos":[1175,1244]},{"content":"XAML for the Windows Runtime provides language-level support for these types.","pos":[1246,1323]},{"content":"XAML primitive","pos":[1327,1341]},{"content":"Description","pos":[1344,1355]},{"content":"x:Boolean","pos":[1386,1395]},{"content":"For CLR support, corresponds to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Boolean<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/system.boolean.aspx)</ept>.","pos":[1401,1521]},{"content":"XAML parses values for <bpt id=\"p1\">**</bpt>x:Boolean<ept id=\"p1\">**</ept> as case insensitive.","pos":[1522,1579]},{"content":"Note that \"x:Bool\" is not an accepted alternative.","pos":[1580,1630]},{"content":"x:String","pos":[1637,1645]},{"content":"For CLR support, corresponds to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>String<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/system.string.aspx)</ept>.","pos":[1652,1770]},{"content":"Encoding for the string defaults to the surrounding XML encoding.","pos":[1771,1836]},{"content":"x:Double","pos":[1843,1851]},{"content":"For CLR support, corresponds to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Double<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</ept>.","pos":[1858,1976]},{"content":"In addition to the numeric values, text syntax for <bpt id=\"p1\">**</bpt>x:Double<ept id=\"p1\">**</ept> permits the token \"NaN\", which is how \"Auto\" for layout behavior can be stored as a resource value.","pos":[1977,2140]},{"content":"The tokens are treated as case sensitive.","pos":[2141,2182]},{"content":"You can use scientific notation, for example \"1+E06\" for <ph id=\"ph1\">`1,000,000`</ph>.","pos":[2183,2252]},{"content":"x:Int32","pos":[2259,2266]},{"content":"For CLR support, corresponds to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Int32<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/system.int32.aspx)</ept>.","pos":[2274,2390]},{"content":"<bpt id=\"p1\">**</bpt>x:Int32<ept id=\"p1\">**</ept> is treated as signed, and you can include the minus (\"-\") symbol for a negative integer.","pos":[2391,2491]},{"content":"In XAML, the absence of a sign in text syntax implies a positive signed value.","pos":[2492,2570]},{"content":"These XAML language primitives are generally the only cases in which you define an object element that uses the <bpt id=\"p1\">**</bpt>x:<ept id=\"p1\">**</ept> prefix in your XAML.","pos":[2574,2713]},{"content":"All other XAML language features are typically used in attribute form, or as a markup extension.","pos":[2714,2810]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  By convention, the language primitives for XAML and all other XAML language elements are shown with the \"x:\" prefix.","pos":[2812,2938]},{"content":"This is how XAML language elements are typically used in real-world markup.","pos":[2939,3014]},{"content":"This convention is followed in the documentation for XAML and also in the XAML specification.","pos":[3015,3108]},{"content":"Other XAML primitives","pos":[3113,3134]},{"content":"The XAML 2009 specification notes other XAML language-level primitives such as <bpt id=\"p1\">**</bpt>x:Uri<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>x:Single<ept id=\"p2\">**</ept>.","pos":[3136,3242]},{"content":"Unless listed in the table in this topic, other XAML language primitives as defined by other XAML vocabularies or by the XAML 2009 specification are not currently supported in XAML for the Windows Runtime.","pos":[3243,3448]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Dates and times (properties that use <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DateTime<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br206576)</ept> or <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>DateTimeOffset<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/xaml/system.datetimeoffset.aspx)</ept>, <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>TimeSpan<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br225996)</ept> or <bpt id=\"p8\">[</bpt><bpt id=\"p9\">**</bpt>System.TimeSpan<ept id=\"p9\">**</ept><ept id=\"p8\">](https://msdn.microsoft.com/library/windows/apps/xaml/system.timespan.aspx)</ept>) aren't settable with a XAML primitive.","pos":[3450,3888]},{"content":"These properties generally aren't settable in XAML at all, because there's no default from-string conversion behavior in the Windows Runtime XAML parser for dates and times.","pos":[3889,4062]},{"content":"For initialization values of any date and time properties, you'll have to use code-behind that runs when a page or element loads.","pos":[4063,4192]},{"content":"Related topics","pos":[4197,4211]},{"content":"XAML overview","pos":[4216,4229]},{"content":"XAML syntax guide","pos":[4252,4269]},{"content":"Storyboarded animations","pos":[4296,4319]}],"content":"---\nauthor: jwmsft\ndescription: Lists language-level support in XAML for the Windows Runtime for certain data types in the common language runtime (CLR) and in other programming languages such as C++.\ntitle: XAML intrinsic data types\nms.assetid: D50E6127-395D-4E27-BAA2-2FE627F4B711\n---\n\n# XAML intrinsic data types\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nXAML for the Windows Runtime provides language-level support for several data types that are frequently used primitives in the common language runtime (CLR) and in other programming languages such as C++.\n\nThe most common place you'll see XAML intrinsic data type usages is when resources are defined in a XAML resource dictionary. You might define constants there, for example numbers that you use for multiple values. Or you might use a storyboarded animation that animates using a string or Boolean value, and you'll then need a XAML object element representing the string or Boolean to fill the keyframe of your [**ObjectAnimationUsingKeyFrames**](https://msdn.microsoft.com/library/windows/apps/br210320) definition. The Windows Runtime default XAML templates use both these techniques.\n\nXAML for the Windows Runtime provides language-level support for these types.\n\n| XAML primitive | Description |\n|-------|-------------|\n| **x:Boolean**  | For CLR support, corresponds to [**Boolean**](https://msdn.microsoft.com/library/windows/apps/xaml/system.boolean.aspx). XAML parses values for **x:Boolean** as case insensitive. Note that \"x:Bool\" is not an accepted alternative. |\n| **x:String**   | For CLR support, corresponds to [**String**](https://msdn.microsoft.com/library/windows/apps/xaml/system.string.aspx). Encoding for the string defaults to the surrounding XML encoding. |\n| **x:Double**   | For CLR support, corresponds to [**Double**](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx). In addition to the numeric values, text syntax for **x:Double** permits the token \"NaN\", which is how \"Auto\" for layout behavior can be stored as a resource value. The tokens are treated as case sensitive. You can use scientific notation, for example \"1+E06\" for `1,000,000`. |\n| **x:Int32**    | For CLR support, corresponds to [**Int32**](https://msdn.microsoft.com/library/windows/apps/xaml/system.int32.aspx). **x:Int32** is treated as signed, and you can include the minus (\"-\") symbol for a negative integer. In XAML, the absence of a sign in text syntax implies a positive signed value. |\n\nThese XAML language primitives are generally the only cases in which you define an object element that uses the **x:** prefix in your XAML. All other XAML language features are typically used in attribute form, or as a markup extension.\n\n**Note**  By convention, the language primitives for XAML and all other XAML language elements are shown with the \"x:\" prefix. This is how XAML language elements are typically used in real-world markup. This convention is followed in the documentation for XAML and also in the XAML specification.\n\n## Other XAML primitives\n\nThe XAML 2009 specification notes other XAML language-level primitives such as **x:Uri** and **x:Single**. Unless listed in the table in this topic, other XAML language primitives as defined by other XAML vocabularies or by the XAML 2009 specification are not currently supported in XAML for the Windows Runtime.\n\n**Note**  Dates and times (properties that use [**DateTime**](https://msdn.microsoft.com/library/windows/apps/br206576) or [**DateTimeOffset**](https://msdn.microsoft.com/library/windows/apps/xaml/system.datetimeoffset.aspx), [**TimeSpan**](https://msdn.microsoft.com/library/windows/apps/br225996) or [**System.TimeSpan**](https://msdn.microsoft.com/library/windows/apps/xaml/system.timespan.aspx)) aren't settable with a XAML primitive. These properties generally aren't settable in XAML at all, because there's no default from-string conversion behavior in the Windows Runtime XAML parser for dates and times. For initialization values of any date and time properties, you'll have to use code-behind that runs when a page or element loads.\n\n## Related topics\n\n* [XAML overview](xaml-overview.md)\n* [XAML syntax guide](xaml-syntax-guide.md)\n* [Storyboarded animations](https://msdn.microsoft.com/library/windows/apps/mt187354)\n \n\n"}