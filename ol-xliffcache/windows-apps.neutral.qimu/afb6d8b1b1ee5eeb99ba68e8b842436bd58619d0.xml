{"nodes":[{"content":"Submit a work item to the thread pool","pos":[78,115]},{"content":"Learn how to do work in a separate thread by submitting a work item to the thread pool.","pos":[129,216]},{"content":"Submit a work item to the thread pool","pos":[223,260]},{"content":"Updated for UWP apps on Windows 10.","pos":[265,300]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[301,393]},{"content":"Important APIs","pos":[401,415]},{"content":"RunAsync","pos":[427,435]},{"content":"IAsyncAction","pos":[504,516]},{"content":"Learn how to do work in a separate thread by submitting a work item to the thread pool.","pos":[579,666]},{"content":"Use this to maintain a responsive UI while still completing work that takes a noticeable amount of time, and use it to complete multiple tasks in parallel.","pos":[667,822]},{"content":"Create and submit the work item","pos":[827,858]},{"content":"Create a work item by calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RunAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR230593)</ept>.","pos":[860,963]},{"content":"Supply a delegate to do the work (you can use a lambda, or a delegate function).","pos":[964,1044]},{"content":"Note that <bpt id=\"p1\">**</bpt>RunAsync<ept id=\"p1\">**</ept> returns an <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>IAsyncAction<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR206580)</ept> object; store this object for use in the next step.","pos":[1045,1207]},{"pos":[1209,1443],"content":"Three versions of <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RunAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR230593)</ept> are available so that you can optionally specify the priority of the work item, and control whether it runs concurrently with other work items."},{"pos":[1445,1608],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Use <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CoreDispatcher.RunAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</ept> to access the UI thread and show progress from the work item."},{"content":"The following example creates a work item and supplies a lambda to do the work:","pos":[1610,1689]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[1693,1726]},{"content":"Following the call to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RunAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR230593)</ept>, the work item is queued by the thread pool and runs when a thread becomes available.","pos":[6032,6212]},{"content":"Thread pool work items run asynchronously and they can run in any order, so make sure your work items function independently.","pos":[6213,6338]},{"pos":[6340,6507],"content":"Note that the work item checks the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IAsyncInfo.Status<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR206593)</ept> property, and exits if the work item is cancelled."},{"content":"Handle work item completion","pos":[6512,6539]},{"content":"Provide a completion handler by setting the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IAsyncAction.Completed<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.foundation.iasyncaction.completed.aspx)</ept> property of the work item.","pos":[6541,6742]},{"content":"Supply a delegate (you can use a lambda or a delegate function) to handle work item completion.","pos":[6743,6838]},{"content":"For example, use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CoreDispatcher.RunAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</ept> to access the UI thread and show the result.","pos":[6839,6988]},{"content":"The following example updates the UI with the result of the work item submitted in step 1:","pos":[6990,7080]},{"content":"[!div class=\"tabbedCodeSnippets\"]","pos":[7084,7117]},{"content":"Note that the completion handler checks whether the work item was cancelled before dispatching a UI update.","pos":[8302,8409]},{"content":"Summary and next steps","pos":[8414,8436]},{"pos":[8438,8683],"content":"You can learn more by downloading the code from this quickstart in the <bpt id=\"p1\">[</bpt>Creating a ThreadPool work item sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=328569)</ept> written for Windows 8.1, and re-using the source code in a win<ph id=\"ph1\">\\_</ph>unap Windows 10 app."},{"content":"Related topics","pos":[8688,8702]},{"content":"Submit a work item to the thread pool","pos":[8707,8744]},{"content":"Best practices for using the thread pool","pos":[8791,8831]},{"content":"Use a timer to submit a work item","pos":[8881,8914]}],"content":"---\nauthor: TylerMSFT\nms.assetid: E2A1200C-9583-40FA-AE4D-C9E6F6C32BCF\ntitle: Submit a work item to the thread pool\ndescription: Learn how to do work in a separate thread by submitting a work item to the thread pool.\n---\n# Submit a work item to the thread pool\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n** Important APIs **\n\n-   [**RunAsync**](https://msdn.microsoft.com/library/windows/apps/BR230593)\n-   [**IAsyncAction**](https://msdn.microsoft.com/library/windows/apps/BR206580)\n\nLearn how to do work in a separate thread by submitting a work item to the thread pool. Use this to maintain a responsive UI while still completing work that takes a noticeable amount of time, and use it to complete multiple tasks in parallel.\n\n## Create and submit the work item\n\nCreate a work item by calling [**RunAsync**](https://msdn.microsoft.com/library/windows/apps/BR230593). Supply a delegate to do the work (you can use a lambda, or a delegate function). Note that **RunAsync** returns an [**IAsyncAction**](https://msdn.microsoft.com/library/windows/apps/BR206580) object; store this object for use in the next step.\n\nThree versions of [**RunAsync**](https://msdn.microsoft.com/library/windows/apps/BR230593) are available so that you can optionally specify the priority of the work item, and control whether it runs concurrently with other work items.\n\n**Note**  Use [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/Hh750317) to access the UI thread and show progress from the work item.\n\nThe following example creates a work item and supplies a lambda to do the work:\n\n> [!div class=\"tabbedCodeSnippets\"]\n``` cpp\n// The nth prime number to find.\nconst unsigned int n = 9999;\n\n// A shared pointer to the result.\n// We use a shared pointer to keep the result alive until the \n// thread is done.\nstd::shared_ptr<unsigned long> nthPrime = make_shared<unsigned long int>(0);\n\n// Simulates work by searching for the nth prime number. Uses a\n// naive algorithm and counts 2 as the first prime number.\nauto workItem = ref new WorkItemHandler(\n    \\[this, n, nthPrime](IAsyncAction^ workItem)\n{\n    unsigned int progress = 0; // For progress reporting.\n    unsigned int primes = 0;   // Number of primes found so far.\n    unsigned long int i = 2;   // Number iterator.\n\n    if ((n >= 0) && (n <= 2))\n    {\n        *nthPrime = n;\n        return;\n    }\n\n    while (primes < (n - 1))\n    {\n        if (workItem->Status == AsyncStatus::Canceled)\n        {\n            break;\n        }\n\n        // Go to the next number.\n        i++;\n\n        // Check for prime.\n        bool prime = true;\n        for (unsigned int j = 2; j < i; ++j)\n        {\n            if ((i % j) == 0)\n            {\n                prime = false;\n                break;\n            }\n        };\n\n        if (prime)\n        {\n            // Found another prime number.\n            primes++;\n\n            // Report progress at every 10 percent.\n            unsigned int temp = progress;\n            progress = static_cast<unsigned int>(10.f*primes / n);\n\n            if (progress != temp)\n            {\n                String^ updateString;\n                updateString = \"Progress to \" + n + \"th prime: \"\n                    + (10 * progress).ToString() + \"%\\n\";\n\n                // Update the UI thread with the CoreDispatcher.\n                CoreApplication::MainView->CoreWindow->Dispatcher->RunAsync(\n                    CoreDispatcherPriority::High,\n                    ref new DispatchedHandler([this, updateString]()\n                {\n                    UpdateUI(updateString);\n                }));\n            }\n        }\n    }\n\n    // Return the nth prime number.\n    *nthPrime = i;\n});\n\nauto asyncAction = ThreadPool::RunAsync(workItem);\n\n// A reference to the work item is cached so that we can trigger a \n// cancellation when the user presses the Cancel button.\nm_workItem = asyncAction;\n```\n``` csharp\n// The nth prime number to find.\nconst uint n = 9999;\n\n// A shared pointer to the result.\n// We use a shared pointer to keep the result alive until the \n// thread is done.\nulong nthPrime = 0;\n\n// Simulates work by searching for the nth prime number. Uses a\n// naive algorithm and counts 2 as the first prime number.\nIAsyncAction asyncAction = Windows.System.Threading.ThreadPool.RunAsync(\n    (workItem) =>\n{\n    uint  progress = 0; // For progress reporting.\n    uint  primes = 0;   // Number of primes found so far.\n    ulong i = 2;        // Number iterator.\n\n    if ((n >= 0) && (n <= 2))\n    {\n        nthPrime = n;\n        return;\n    }\n\n    while (primes < (n - 1))\n    {\n        if (workItem.Status == AsyncStatus.Canceled)\n        {\n            break;\n        }\n\n        // Go to the next number.\n        i++;\n\n        // Check for prime.\n        bool prime = true;\n        for (uint j = 2; j < i; ++j)\n        {\n            if ((i % j) == 0)\n            {\n                prime = false;\n                break;\n            }\n        };\n\n        if (prime)\n        {\n            // Found another prime number.\n            primes++;\n\n            // Report progress at every 10 percent.\n            uint temp = progress;\n            progress = (uint)(10.0*primes/n);\n\n            if (progress != temp)\n            {\n                String updateString;\n                updateString = \"Progress to \" + n + \"th prime: \"\n                    + (10 * progress) + \"%\\n\";\n\n                // Update the UI thread with the CoreDispatcher.\n                CoreApplication.MainView.CoreWindow.Dispatcher.RunAsync(\n                    CoreDispatcherPriority.High,\n                    new DispatchedHandler(() =>\n                {\n                    UpdateUI(updateString);\n                }));\n            }\n        }\n    }\n\n    // Return the nth prime number.\n    nthPrime = i;\n});\n\n// A reference to the work item is cached so that we can trigger a\n// cancellation when the user presses the Cancel button.\nm_workItem = asyncAction;\n```\n\nFollowing the call to [**RunAsync**](https://msdn.microsoft.com/library/windows/apps/BR230593), the work item is queued by the thread pool and runs when a thread becomes available. Thread pool work items run asynchronously and they can run in any order, so make sure your work items function independently.\n\nNote that the work item checks the [**IAsyncInfo.Status**](https://msdn.microsoft.com/library/windows/apps/BR206593) property, and exits if the work item is cancelled.\n\n## Handle work item completion\n\nProvide a completion handler by setting the [**IAsyncAction.Completed**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.foundation.iasyncaction.completed.aspx) property of the work item. Supply a delegate (you can use a lambda or a delegate function) to handle work item completion. For example, use [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/Hh750317) to access the UI thread and show the result.\n\nThe following example updates the UI with the result of the work item submitted in step 1:\n\n> [!div class=\"tabbedCodeSnippets\"]\n``` cpp\nasyncAction->Completed = ref new AsyncActionCompletedHandler(\n    \\[this, n, nthPrime](IAsyncAction^ asyncInfo, AsyncStatus asyncStatus)\n{\n    if (asyncStatus == AsyncStatus::Canceled)\n    {\n        return;\n    }\n    \n    String^ updateString;\n    updateString = \"\\n\" + \"The \" + n + \"th prime number is \" \n        + (*nthPrime).ToString() + \".\\n\";\n\n    // Update the UI thread with the CoreDispatcher.\n    CoreApplication::MainView->CoreWindow->Dispatcher->RunAsync(\n        CoreDispatcherPriority::High,\n        ref new DispatchedHandler([this, updateString]()\n    {\n        UpdateUI(updateString);\n    }));\n});\n```\n``` csharp\nasyncAction.Completed = new AsyncActionCompletedHandler(\n    (IAsyncAction asyncInfo, AsyncStatus asyncStatus) =>\n{\n    if (asyncStatus == AsyncStatus.Canceled)\n    {\n        return;\n    }\n\n    String updateString;\n    updateString = \"\\n\" + \"The \" + n + \"th prime number is \" \n        + nthPrime + \".\\n\";\n\n    // Update the UI thread with the CoreDispatcher.\n    CoreApplication.MainView.CoreWindow.Dispatcher.RunAsync(\n        CoreDispatcherPriority.High,\n        new DispatchedHandler(()=>\n    {\n        UpdateUI(updateString);\n    }));\n});\n```\n\nNote that the completion handler checks whether the work item was cancelled before dispatching a UI update.\n\n## Summary and next steps\n\nYou can learn more by downloading the code from this quickstart in the [Creating a ThreadPool work item sample](http://go.microsoft.com/fwlink/p/?LinkID=328569) written for Windows 8.1, and re-using the source code in a win\\_unap Windows 10 app.\n\n## Related topics\n\n* [Submit a work item to the thread pool](submit-a-work-item-to-the-thread-pool.md)\n* [Best practices for using the thread pool](best-practices-for-using-the-thread-pool.md)\n* [Use a timer to submit a work item](use-a-timer-to-submit-a-work-item.md)\n \n\n"}