{"nodes":[{"content":"Call asynchronous APIs in C# or Visual Basic","pos":[78,122]},{"content":"The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.","pos":[136,309]},{"content":"Call asynchronous APIs in C# or Visual Basic","pos":[316,360]},{"content":"Updated for UWP apps on Windows 10.","pos":[365,400]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>","pos":[401,493]},{"content":"The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.","pos":[499,672]},{"content":"This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.","pos":[673,771]},{"content":"Asynchronous APIs keep your app from waiting for large operations to complete before continuing execution.","pos":[773,879]},{"content":"For example, an app that downloads info from the Internet might spend several seconds waiting for the info to arrive.","pos":[880,997]},{"content":"If you use a synchronous method to retrieve the info, the app is blocked until the method returns.","pos":[998,1096]},{"content":"The app won't respond to user interaction and because it seems non-responsive, the user might become frustrated.","pos":[1097,1209]},{"content":"By providing asynchronous APIs, the UWP helps to ensure that your app stays responsive to the user when it's performing long operations.","pos":[1210,1346]},{"content":"Most of the asynchronous APIs in the UWP don't have synchronous counterparts, so you need to be sure to understand how to use the asynchronous APIs with C# or Visual Basic in your Universal Windows Platform (UWP) app.","pos":[1348,1565]},{"content":"Here we show how to call asynchronous APIs of the UWP.","pos":[1566,1620]},{"content":"Using asynchronous APIs","pos":[1625,1648]},{"content":"By convention, asynchronous methods are given names that end in \"Async\".","pos":[1651,1723]},{"content":"You typically call asynchronous APIs in response to a user's action, such as when the user clicks a button.","pos":[1724,1831]},{"content":"Calling an asynchronous method in an event handler is one of the simplest ways of using asynchronous APIs.","pos":[1832,1938]},{"content":"Here we use the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator as an example.","pos":[1939,1988]},{"content":"Suppose that you have an app that lists the titles of blog posts from a certain location.","pos":[1990,2079]},{"content":"The app has a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> that the user clicks to get the titles.","pos":[2080,2204]},{"content":"The titles are displayed in a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept>.","pos":[2205,2309]},{"content":"When the user clicks the button, it is important that the app remains responsive while it waits for the info from the blog's website.","pos":[2310,2443]},{"content":"To ensure this responsiveness, the UWP provides an asynchronous method, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SyndicationClient.RetrieveFeedAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, to download the feed.","pos":[2444,2638]},{"pos":[2640,2859],"content":"The example here gets the lists of blog posts from a blog by calling the asynchronous method, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SyndicationClient.RetrieveFeedAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, and awaiting the result."},{"pos":[2863,3095],"content":"[!div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"] <bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Main<ept id=\"p2\">](./AsyncSnippets/csharp/MainPage.xaml.cs#SnippetDownloadRSS)</ept><ept id=\"p1\">]</ept><ph id=\"ph1\">\n</ph><bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Main<ept id=\"p4\">](./AsyncSnippets/vbnet/MainPage.xaml.vb#SnippetDownloadRSS)</ept><ept id=\"p3\">]</ept>"},{"content":"There are a couple of important things about this example.","pos":[3097,3155]},{"content":"First, the line, <ph id=\"ph1\">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph> uses the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator with the call to the asynchronous method, <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>RetrieveFeedAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>.","pos":[3156,3390]},{"content":"You can think of the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator as telling the compiler that you are calling an asynchronous method, which causes the compiler to do some extra work so you don’t have to.","pos":[3391,3569]},{"content":"Next, the declaration of the event handler includes the keyword <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept>.","pos":[3570,3644]},{"content":"You must include this keyword in the method declaration of any method in which you use the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator.","pos":[3645,3755]},{"content":"In this topic, we won't go into a lot of the details of what the compiler does with the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator, but let's examine what your app does so that it is asynchronous and responsive.","pos":[3757,3944]},{"content":"Consider what happens when you use synchronous code.","pos":[3945,3997]},{"content":"For example, suppose that there is a method called <ph id=\"ph1\">`SyndicationClient.RetrieveFeed`</ph> that is synchronous.","pos":[3998,4102]},{"content":"(There is no such method, but imagine that there is.) If your app included the line <ph id=\"ph1\">`SyndicationFeed feed = client.RetrieveFeed(feedUri)`</ph>, instead of <ph id=\"ph2\">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph>, execution of the app would stop until the return value of <ph id=\"ph3\">`RetrieveFeed`</ph> is available.","pos":[4103,4405]},{"content":"And while your app waits for the method to complete, it can't respond to any other events, such another <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR227737)</ept> event.","pos":[4406,4586]},{"content":"That is, your app would be blocked until <ph id=\"ph1\">`RetrieveFeed`</ph> returns.","pos":[4587,4651]},{"content":"But if you call <ph id=\"ph1\">`client.RetrieveFeedAsync`</ph>, the method initiates the retrieval and immediately returns.","pos":[4653,4756]},{"content":"When you use <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> with <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>RetrieveFeedAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, the app temporarily exits the event handler.","pos":[4757,4912]},{"content":"Then it can process other events while <bpt id=\"p1\">**</bpt>RetrieveFeedAsync<ept id=\"p1\">**</ept> executes asynchronously.","pos":[4913,4998]},{"content":"This keeps the app responsive to the user.","pos":[4999,5041]},{"content":"When <bpt id=\"p1\">**</bpt>RetrieveFeedAsync<ept id=\"p1\">**</ept> completes and the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>SyndicationFeed<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR243485)</ept> is available, the app essentially reenters the event handler where it left off, after <ph id=\"ph1\">`SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`</ph>, and finishes the rest of the method.","pos":[5042,5355]},{"content":"The nice thing about using the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator is that the code doesn't look much different from how the code looks if you used the imaginary <ph id=\"ph1\">`RetrieveFeed`</ph> method.","pos":[5357,5524]},{"content":"There are ways to write asynchronous code in C# or Visual Basic without the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator, but the resulting code tends to emphasize the mechanics of executing asynchronously.","pos":[5525,5705]},{"content":"This makes asynchronous code hard to write, hard to understand, and hard to maintain.","pos":[5706,5791]},{"content":"By using the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator, you get the benefits of an asynchronous app without making your code complex.","pos":[5792,5902]},{"content":"Return types and results of asynchronous APIs","pos":[5907,5952]},{"content":"If you followed the link to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RetrieveFeedAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR243460)</ept>, you might have noticed that the return type of <bpt id=\"p3\">**</bpt>RetrieveFeedAsync<ept id=\"p3\">**</ept> is not a <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>SyndicationFeed<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/BR243485)</ept>.","pos":[5955,6224]},{"content":"Instead, the return type is <ph id=\"ph1\">`IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;`</ph>.","pos":[6225,6319]},{"content":"Viewed from the raw syntax, an asynchronous API returns an object that contains the result within it.","pos":[6320,6421]},{"content":"While it is common, and sometimes useful, to think of an asynchronous method as being awaitable, the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator actually operates on the method’s return value, not on the method.","pos":[6422,6608]},{"content":"When you apply the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator, what you get back is the result of calling <bpt id=\"p2\">**</bpt>GetResult<ept id=\"p2\">**</ept> on the object returned by the method.","pos":[6609,6742]},{"content":"In the example, the <bpt id=\"p1\">**</bpt>SyndicationFeed<ept id=\"p1\">**</ept> is the result of <bpt id=\"p2\">**</bpt>RetrieveFeedAsync.GetResult()<ept id=\"p2\">**</ept>.","pos":[6743,6834]},{"content":"When you use an asynchronous method, you can examine the signature to see what you’ll get back after awaiting the value returned from the method.","pos":[6836,6981]},{"content":"All asynchronous APIs in the UWP return one of the following types:","pos":[6982,7049]},{"content":"IAsyncOperation<ph id=\"ph1\">&amp;lt;</ph>TResult","pos":[7058,7084]},{"content":"IAsyncOperationWithProgress<ph id=\"ph1\">&amp;lt;</ph>TResult, TProgress","pos":[7157,7206]},{"content":"IAsyncAction","pos":[7279,7291]},{"content":"IAsyncActionWithProgress<ph id=\"ph1\">&amp;lt;</ph>TProgress","pos":[7360,7397]},{"content":"The result type of an asynchronous method is the same as the <ph id=\"ph1\">`      TResult`</ph> type parameter.","pos":[7478,7570]},{"content":"Types without a <ph id=\"ph1\">`TResult`</ph> don't have a result.","pos":[7571,7617]},{"content":"You can think of the result as being <bpt id=\"p1\">**</bpt>void<ept id=\"p1\">**</ept>.","pos":[7618,7664]},{"content":"In Visual Basic, a <bpt id=\"p1\">[</bpt>Sub<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/831f9wka.aspx)</ept> procedure is equivalent to a method with a <bpt id=\"p2\">**</bpt>void<ept id=\"p2\">**</ept> return type.","pos":[7665,7828]},{"content":"The table here gives examples of asynchronous methods and lists the return type and result type of each.","pos":[7830,7934]},{"content":"Asynchronous method","pos":[7938,7957]},{"content":"Return type","pos":[8034,8045]},{"content":"Result type","pos":[8183,8194]},{"content":"SyndicationClient.RetrieveFeedAsync","pos":[8539,8574]},{"content":"IAsyncOperationWithProgress<ph id=\"ph1\">&amp;lt;</ph>SyndicationFeed, RetrievalProgress","pos":[8645,8710]},{"content":"SyndicationFeed","pos":[8813,8828]},{"content":"FileOpenPicker.PickSingleFileAsync","pos":[8897,8931]},{"content":"IAsyncOperation<ph id=\"ph1\">&amp;lt;</ph>StorageFile","pos":[8998,9028]},{"content":"StorageFile","pos":[9178,9189]},{"content":"XmlDocument.SaveToFileAsync","pos":[9267,9294]},{"content":"IAsyncAction","pos":[9377,9389]},{"content":"void","pos":[9561,9565]},{"content":"InkStrokeContainer.LoadAsync","pos":[9616,9644]},{"content":"IAsyncActionWithProgress<ph id=\"ph1\">&amp;lt;</ph>UInt64","pos":[9725,9759]},{"content":"void","pos":[9909,9913]},{"content":"DataReader.LoadAsync","pos":[9964,9984]},{"pos":[10075,10236],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataReaderLoadOperation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208120)</ept>, a custom results class that implements <bpt id=\"p3\">**</bpt>IAsyncOperation<ph id=\"ph1\">&amp;lt;</ph>UInt32<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p3\">**</ept>"},{"content":"UInt32","pos":[10242,10248]},{"content":"Asynchronous methods that are defined in <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>.NET for UWP apps<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230232.aspx)</ept> have the return type <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Task<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.aspx)</ept> or <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Task<ph id=\"ph1\">&amp;lt;</ph>TResult<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/dd321424.aspx)</ept>.","pos":[10295,10662]},{"content":"Methods that return <bpt id=\"p1\">**</bpt>Task<ept id=\"p1\">**</ept> are similar to the asynchronous methods in the UWP that return <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>IAsyncAction<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR206580)</ept>.","pos":[10663,10832]},{"content":"In each case, the result of the asynchronous method is <bpt id=\"p1\">**</bpt>void<ept id=\"p1\">**</ept>.","pos":[10833,10897]},{"content":"The return type <bpt id=\"p1\">**</bpt>Task<ph id=\"ph1\">&amp;lt;</ph>TResult<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> is similar to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>IAsyncOperation<ph id=\"ph3\">&amp;lt;</ph>TResult<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR206598)</ept> in that the result of the asynchronous method when running the task is the same type as the <ph id=\"ph5\">`TResult`</ph> type parameter.","pos":[10898,11164]},{"content":"For more info about using <bpt id=\"p1\">**</bpt>.NET for UWP apps<ept id=\"p1\">**</ept> and tasks, see <bpt id=\"p2\">[</bpt>.NET for Windows Runtime apps overview<ept id=\"p2\">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230302.aspx)</ept>.","pos":[11165,11343]},{"content":"Handling errors","pos":[11348,11363]},{"content":"When you use the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator to retrieve your results from an asynchronous method, you can use a <bpt id=\"p2\">**</bpt>try/catch<ept id=\"p2\">**</ept> block to handle errors that occur in asynchronous methods, just as you do for synchronous methods.","pos":[11366,11582]},{"content":"The previous example wraps the <bpt id=\"p1\">**</bpt>RetrieveFeedAsync<ept id=\"p1\">**</ept> method and <bpt id=\"p2\">**</bpt>await<ept id=\"p2\">**</ept> operation in a <bpt id=\"p3\">**</bpt>try/catch<ept id=\"p3\">**</ept> block to handle errors when an exception is thrown.","pos":[11583,11737]},{"content":"When asynchronous methods call other asynchronous methods, any asynchronous method that results in an exception will be propagated to the outer methods.","pos":[11739,11891]},{"content":"This means that you can put a <bpt id=\"p1\">**</bpt>try/catch<ept id=\"p1\">**</ept> block on the outer-most method to catch errors for the nested asynchronous methods.","pos":[11892,12019]},{"content":"Again, this is similar to how you catch exceptions for synchronous methods.","pos":[12020,12095]},{"content":"However, you can't use <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> block.","pos":[12096,12152]},{"pos":[12154,12258],"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  Starting with C# in Microsoft Visual Studio 2005, you can use <bpt id=\"p2\">**</bpt>await<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>catch<ept id=\"p3\">**</ept> block."},{"content":"Summary and next steps","pos":[12263,12285]},{"content":"The pattern of calling an asynchronous method that we show here is the simplest one to use when you call asynchronous APIs in an event handler.","pos":[12287,12430]},{"content":"You can also use this pattern when you call an asynchronous method in an overridden method that returns <bpt id=\"p1\">**</bpt>void<ept id=\"p1\">**</ept> or a <bpt id=\"p2\">**</bpt>Sub<ept id=\"p2\">**</ept> in Visual Basic.","pos":[12431,12573]},{"content":"As you encounter asynchronous methods in the UWP, it is important to remember:","pos":[12575,12653]},{"content":"By convention, asynchronous methods are given names that end in \"Async\".","pos":[12659,12731]},{"pos":[12736,12840],"content":"Any method that uses the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator must have its declaration marked with the <bpt id=\"p2\">**</bpt>async<ept id=\"p2\">**</ept> keyword."},{"pos":[12845,12973],"content":"When an app finds the <bpt id=\"p1\">**</bpt>await<ept id=\"p1\">**</ept> operator, the app remains responsive to user interaction while the asynchronous method executes."},{"content":"Awaiting the value returned by an asynchronous method returns an object that contains the result.","pos":[12978,13075]},{"content":"In most cases, the result contained within the return value is what's useful, not the return value itself.","pos":[13076,13182]},{"content":"You can find the type of the value that is contained inside the result by looking at the return type of the async method.","pos":[13183,13304]},{"pos":[13309,13413],"content":"Using asynchronous APIs and <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> patterns is often a way to improve the responsiveness of your app."},{"content":"The example in this topic outputs text that looks like this.","pos":[13415,13475]}],"content":"---\nauthor: TylerMSFT\nms.assetid: 066711E0-D5C4-467E-8683-3CC64EDBCC83\ntitle: Call asynchronous APIs in C# or Visual Basic\ndescription: The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.\n---\n# Call asynchronous APIs in C# or Visual Basic\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nThe Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time. This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.\n\nAsynchronous APIs keep your app from waiting for large operations to complete before continuing execution. For example, an app that downloads info from the Internet might spend several seconds waiting for the info to arrive. If you use a synchronous method to retrieve the info, the app is blocked until the method returns. The app won't respond to user interaction and because it seems non-responsive, the user might become frustrated. By providing asynchronous APIs, the UWP helps to ensure that your app stays responsive to the user when it's performing long operations.\n\nMost of the asynchronous APIs in the UWP don't have synchronous counterparts, so you need to be sure to understand how to use the asynchronous APIs with C# or Visual Basic in your Universal Windows Platform (UWP) app. Here we show how to call asynchronous APIs of the UWP.\n\n## Using asynchronous APIs\n\n\nBy convention, asynchronous methods are given names that end in \"Async\". You typically call asynchronous APIs in response to a user's action, such as when the user clicks a button. Calling an asynchronous method in an event handler is one of the simplest ways of using asynchronous APIs. Here we use the **await** operator as an example.\n\nSuppose that you have an app that lists the titles of blog posts from a certain location. The app has a [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) that the user clicks to get the titles. The titles are displayed in a [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652). When the user clicks the button, it is important that the app remains responsive while it waits for the info from the blog's website. To ensure this responsiveness, the UWP provides an asynchronous method, [**SyndicationClient.RetrieveFeedAsync**](https://msdn.microsoft.com/library/windows/apps/BR243460), to download the feed.\n\nThe example here gets the lists of blog posts from a blog by calling the asynchronous method, [**SyndicationClient.RetrieveFeedAsync**](https://msdn.microsoft.com/library/windows/apps/BR243460), and awaiting the result.\n\n> [!div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"]\n[!code-csharp[Main](./AsyncSnippets/csharp/MainPage.xaml.cs#SnippetDownloadRSS)]\n[!code-vb[Main](./AsyncSnippets/vbnet/MainPage.xaml.vb#SnippetDownloadRSS)]\n\nThere are a couple of important things about this example. First, the line, `SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)` uses the **await** operator with the call to the asynchronous method, [**RetrieveFeedAsync**](https://msdn.microsoft.com/library/windows/apps/BR243460). You can think of the **await** operator as telling the compiler that you are calling an asynchronous method, which causes the compiler to do some extra work so you don’t have to. Next, the declaration of the event handler includes the keyword **async**. You must include this keyword in the method declaration of any method in which you use the **await** operator.\n\nIn this topic, we won't go into a lot of the details of what the compiler does with the **await** operator, but let's examine what your app does so that it is asynchronous and responsive. Consider what happens when you use synchronous code. For example, suppose that there is a method called `SyndicationClient.RetrieveFeed` that is synchronous. (There is no such method, but imagine that there is.) If your app included the line `SyndicationFeed feed = client.RetrieveFeed(feedUri)`, instead of `SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`, execution of the app would stop until the return value of `RetrieveFeed` is available. And while your app waits for the method to complete, it can't respond to any other events, such another [**Click**](https://msdn.microsoft.com/library/windows/apps/BR227737) event. That is, your app would be blocked until `RetrieveFeed` returns.\n\nBut if you call `client.RetrieveFeedAsync`, the method initiates the retrieval and immediately returns. When you use **await** with [**RetrieveFeedAsync**](https://msdn.microsoft.com/library/windows/apps/BR243460), the app temporarily exits the event handler. Then it can process other events while **RetrieveFeedAsync** executes asynchronously. This keeps the app responsive to the user. When **RetrieveFeedAsync** completes and the [**SyndicationFeed**](https://msdn.microsoft.com/library/windows/apps/BR243485) is available, the app essentially reenters the event handler where it left off, after `SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)`, and finishes the rest of the method.\n\nThe nice thing about using the **await** operator is that the code doesn't look much different from how the code looks if you used the imaginary `RetrieveFeed` method. There are ways to write asynchronous code in C# or Visual Basic without the **await** operator, but the resulting code tends to emphasize the mechanics of executing asynchronously. This makes asynchronous code hard to write, hard to understand, and hard to maintain. By using the **await** operator, you get the benefits of an asynchronous app without making your code complex.\n\n## Return types and results of asynchronous APIs\n\n\nIf you followed the link to [**RetrieveFeedAsync**](https://msdn.microsoft.com/library/windows/apps/BR243460), you might have noticed that the return type of **RetrieveFeedAsync** is not a [**SyndicationFeed**](https://msdn.microsoft.com/library/windows/apps/BR243485). Instead, the return type is `IAsyncOperationWithProgress<SyndicationFeed, RetrievalProgress>`. Viewed from the raw syntax, an asynchronous API returns an object that contains the result within it. While it is common, and sometimes useful, to think of an asynchronous method as being awaitable, the **await** operator actually operates on the method’s return value, not on the method. When you apply the **await** operator, what you get back is the result of calling **GetResult** on the object returned by the method. In the example, the **SyndicationFeed** is the result of **RetrieveFeedAsync.GetResult()**.\n\nWhen you use an asynchronous method, you can examine the signature to see what you’ll get back after awaiting the value returned from the method. All asynchronous APIs in the UWP return one of the following types:\n\n-   [**IAsyncOperation&lt;TResult&gt;**](https://msdn.microsoft.com/library/windows/apps/BR206598)\n-   [**IAsyncOperationWithProgress&lt;TResult, TProgress&gt;**](https://msdn.microsoft.com/library/windows/apps/BR206594)\n-   [**IAsyncAction**](https://msdn.microsoft.com/library/windows/apps/BR206580)\n-   [**IAsyncActionWithProgress&lt;TProgress&gt;**](https://msdn.microsoft.com/library/windows/apps/BR206580withprogress_1)\n\nThe result type of an asynchronous method is the same as the `      TResult` type parameter. Types without a `TResult` don't have a result. You can think of the result as being **void**. In Visual Basic, a [Sub](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/831f9wka.aspx) procedure is equivalent to a method with a **void** return type.\n\nThe table here gives examples of asynchronous methods and lists the return type and result type of each.\n\n| Asynchronous method                                                                           | Return type                                                                                                                                        | Result type                                       |\n|-----------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------|\n| [**SyndicationClient.RetrieveFeedAsync**](https://msdn.microsoft.com/library/windows/apps/BR243460)     | [**IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;**](https://msdn.microsoft.com/library/windows/apps/BR206594)                                 | [**SyndicationFeed**](https://msdn.microsoft.com/library/windows/apps/BR243485) |\n| [**FileOpenPicker.PickSingleFileAsync**](https://msdn.microsoft.com/library/windows/apps/JJ635275) | [**IAsyncOperation&lt;StorageFile&gt;**](https://msdn.microsoft.com/library/windows/apps/BR206598)                                                                                | [**StorageFile**](https://msdn.microsoft.com/library/windows/apps/BR227171)          |\n| [**XmlDocument.SaveToFileAsync**](https://msdn.microsoft.com/library/windows/apps/BR206284)                 | [**IAsyncAction**](https://msdn.microsoft.com/library/windows/apps/BR206580)                                                                                                           | **void**                                          |\n| [**InkStrokeContainer.LoadAsync**](https://msdn.microsoft.com/library/windows/apps/Hh701757)               | [**IAsyncActionWithProgress&lt;UInt64&gt;**](https://msdn.microsoft.com/library/windows/apps/BR206580withprogress_1)                                                                   | **void**                                          |\n| [**DataReader.LoadAsync**](https://msdn.microsoft.com/library/windows/apps/BR208135)                            | [**DataReaderLoadOperation**](https://msdn.microsoft.com/library/windows/apps/BR208120), a custom results class that implements **IAsyncOperation&lt;UInt32&gt;** | [**UInt32**](T:System.UInt32)                     |\n\n \n\nAsynchronous methods that are defined in [**.NET for UWP apps**](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230232.aspx) have the return type [**Task**](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.aspx) or [**Task&lt;TResult&gt;**](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/dd321424.aspx). Methods that return **Task** are similar to the asynchronous methods in the UWP that return [**IAsyncAction**](https://msdn.microsoft.com/library/windows/apps/BR206580). In each case, the result of the asynchronous method is **void**. The return type **Task&lt;TResult&gt;** is similar to [**IAsyncOperation&lt;TResult&gt;**](https://msdn.microsoft.com/library/windows/apps/BR206598) in that the result of the asynchronous method when running the task is the same type as the `TResult` type parameter. For more info about using **.NET for UWP apps** and tasks, see [.NET for Windows Runtime apps overview](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230302.aspx).\n\n## Handling errors\n\n\nWhen you use the **await** operator to retrieve your results from an asynchronous method, you can use a **try/catch** block to handle errors that occur in asynchronous methods, just as you do for synchronous methods. The previous example wraps the **RetrieveFeedAsync** method and **await** operation in a **try/catch** block to handle errors when an exception is thrown.\n\nWhen asynchronous methods call other asynchronous methods, any asynchronous method that results in an exception will be propagated to the outer methods. This means that you can put a **try/catch** block on the outer-most method to catch errors for the nested asynchronous methods. Again, this is similar to how you catch exceptions for synchronous methods. However, you can't use **await** in the **catch** block.\n\n**Tip**  Starting with C# in Microsoft Visual Studio 2005, you can use **await** in the **catch** block.\n\n## Summary and next steps\n\nThe pattern of calling an asynchronous method that we show here is the simplest one to use when you call asynchronous APIs in an event handler. You can also use this pattern when you call an asynchronous method in an overridden method that returns **void** or a **Sub** in Visual Basic.\n\nAs you encounter asynchronous methods in the UWP, it is important to remember:\n\n-   By convention, asynchronous methods are given names that end in \"Async\".\n-   Any method that uses the **await** operator must have its declaration marked with the **async** keyword.\n-   When an app finds the **await** operator, the app remains responsive to user interaction while the asynchronous method executes.\n-   Awaiting the value returned by an asynchronous method returns an object that contains the result. In most cases, the result contained within the return value is what's useful, not the return value itself. You can find the type of the value that is contained inside the result by looking at the return type of the async method.\n-   Using asynchronous APIs and **async** patterns is often a way to improve the responsiveness of your app.\n\nThe example in this topic outputs text that looks like this.\n\n``` syntax\nWindows Experience Blog\nPC Snapshot: Sony VAIO Y, 8/9/2011 10:26:56 AM -07:00\nTech Tuesday Live Twitter #Chat: Too Much Tech #win7tech, 8/8/2011 12:48:26 PM -07:00\nWindows 7 themes: what’s new and what’s popular!, 8/4/2011 11:56:28 AM -07:00\nPC Snapshot: Toshiba Satellite A665 3D, 8/2/2011 8:59:15 AM -07:00\nTime for new school supplies? Find back-to-school deals on Windows 7 PCs and Office 2010, 8/1/2011 2:14:40 PM -07:00\nBest PCs for blogging (or working) on the go, 8/1/2011 10:08:14 AM -07:00\nTech Tuesday – Blogging Tips and Tricks–#win7tech, 8/1/2011 9:35:54 AM -07:00\nPC Snapshot: Lenovo IdeaPad U460, 7/29/2011 9:23:05 AM -07:00\nGIVEAWAY: Survive BlogHer with a Sony VAIO SA and a Samsung Focus, 7/28/2011 7:27:14 AM -07:00\n3 Ways to Stay Cool This Summer, 7/26/2011 4:58:23 PM -07:00\nGetting RAW support in Photo Gallery & Windows 7 (…and a contest!), 7/26/2011 10:40:51 AM -07:00\nTech Tuesdays Live Twitter Chats: Photography Tips, Tricks and Essentials, 7/25/2011 12:33:06 PM -07:00\n3 Tips to Go Green With Your PC, 7/22/2011 9:19:43 AM -07:00\nHow to: Buy a Green PC, 7/22/2011 9:13:22 AM -07:00\nWindows 7 themes: the distinctive artwork of Cheng Ling, 7/20/2011 9:53:07 AM -07:00\n```\n\n"}