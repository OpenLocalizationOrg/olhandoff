{"nodes":[{"content":"Sound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.","pos":[34,186]},{"content":"Sound","pos":[207,212]},{"content":"[Some information relates to pre-released product which may be substantially modified before it's commercially released.","pos":[475,595]},{"content":"Microsoft makes no warranties, express or implied, with respect to the information provided here.]<bpt id=\"p1\">*</bpt>This article provides a preview of features that aren't yet available.<ept id=\"p1\">*</ept>","pos":[596,766]},{"content":"Sound in UWP apps","pos":[770,787]},{"content":"Sound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.","pos":[789,941]},{"content":"Sound Global API","pos":[946,962]},{"content":"UWP provides an easily accessible sound system that allows you to simply \"flip a switch\" and get an immersive audio experience across your entire app.","pos":[963,1113]},{"pos":[1115,1256],"content":"The <bpt id=\"p1\">**</bpt>ElementSoundPlayer<ept id=\"p1\">**</ept> is an integrated sound system within XAML, and when turned on all default controls will play sounds automatically."},{"pos":[1322,1405],"content":"The <bpt id=\"p1\">**</bpt>ElementSoundPlayer<ept id=\"p1\">**</ept> has three different states: <bpt id=\"p2\">**</bpt>On<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>Off<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>Auto<ept id=\"p4\">**</ept>."},{"content":"If set to <bpt id=\"p1\">**</bpt>Off<ept id=\"p1\">**</ept>, no matter where your app is run, sound will never play.","pos":[1407,1481]},{"content":"If set to <bpt id=\"p1\">**</bpt>On<ept id=\"p1\">**</ept> sounds for your app will play on every platform.","pos":[1482,1547]},{"content":"Sound for TV and Xbox","pos":[1553,1574]},{"content":"Sound is a key part of the 10-foot experience, and by default, the <bpt id=\"p1\">**</bpt>ElementSoundPlayer<ept id=\"p1\">**</ept>'s state is <bpt id=\"p2\">**</bpt>Auto<ept id=\"p2\">**</ept>, meaning that you will only get sound when your app is running on Xbox.","pos":[1576,1757]},{"content":"To understand more about designing for Xbox and TV, please see <bpt id=\"p1\">[</bpt>Designing for Xbox and TV<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=760736)</ept>.","pos":[1758,1896]},{"content":"Sound Volume Override","pos":[1901,1922]},{"content":"All sounds within the app can be dimmed with the <bpt id=\"p1\">**</bpt>Volume<ept id=\"p1\">**</ept> control.","pos":[1923,1991]},{"content":"However, sounds within the app cannot get <bpt id=\"p1\">*</bpt>louder than the system volume<ept id=\"p1\">*</ept>.","pos":[1992,2066]},{"content":"To set the app volume level, call:","pos":[2068,2102]},{"content":"Where maximum volume (relative to system volume) is 1.0, and minimum is 0.0 (essentially silent).","pos":[2147,2244]},{"content":"Control Level State","pos":[2249,2268]},{"content":"If a control's default sound is not desired, it can be disabled.","pos":[2269,2333]},{"content":"This is done through the <bpt id=\"p1\">**</bpt>ElementSoundMode<ept id=\"p1\">**</ept> on the control.","pos":[2334,2395]},{"content":"The <bpt id=\"p1\">**</bpt>ElementSoundMode<ept id=\"p1\">**</ept> has two states: <bpt id=\"p2\">**</bpt>Off<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Default<ept id=\"p3\">**</ept>.","pos":[2397,2462]},{"content":"When not set, it is <bpt id=\"p1\">**</bpt>Default<ept id=\"p1\">**</ept>.","pos":[2463,2495]},{"content":"If set to <bpt id=\"p1\">**</bpt>Off<ept id=\"p1\">**</ept>, every sound that control plays will be muted <bpt id=\"p2\">*</bpt>except for focus<ept id=\"p2\">*</ept>.","pos":[2496,2579]},{"content":"Is This The Right Sound?","pos":[2732,2756]},{"content":"When creating a custom control, or changing an existing control's sound, it is important to understand the usages of all the sounds the system provides.","pos":[2757,2909]},{"content":"Each sound relates to a certain basic user interaction, and although sounds can be customized to play on any interaction, this section serves to illustrate the scenarios where sounds should be used to maintain a consistent experience across all UWP apps.","pos":[2911,3165]},{"content":"Invoking an Element","pos":[3171,3190]},{"content":"The most common control-triggered sound in our system today is the <bpt id=\"p1\">**</bpt>Invoke<ept id=\"p1\">**</ept> sound.","pos":[3191,3275]},{"content":"This sound plays when a user invokes a control through a tap/click/enter/space or press of the 'A' button on a gamepad.","pos":[3276,3395]},{"pos":[3397,3573],"content":"Typically, this sound is only played when a user explicitly targets a simple control or control part through an <bpt id=\"p1\">[</bpt>input device<ept id=\"p1\">](/input-and-devices/guidelines-for-interactions/)</ept>."},{"content":"&lt;SelectButtonClick.mp3 sound clip here&gt;","pos":[3575,3614]},{"pos":[3616,3751],"content":"To play this sound from any control event, simply call the Play method from <bpt id=\"p1\">**</bpt>ElementSoundPlayer<ept id=\"p1\">**</ept> and pass in <bpt id=\"p2\">**</bpt>ElementSound.Invoke<ept id=\"p2\">**</ept>:"},{"content":"Showing &amp; Hiding Content","pos":[3817,3841]},{"pos":[3842,3995],"content":"There are many flyouts, dialogs and dismissible UIs in XAML, and any action that triggers one of these overlays should call a <bpt id=\"p1\">**</bpt>Show<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Hide<ept id=\"p2\">**</ept> sound."},{"pos":[3997,4086],"content":"When an overlay content window is brought into view, the <bpt id=\"p1\">**</bpt>Show<ept id=\"p1\">**</ept> sound should be called:"},{"content":"&lt;OverlayIn.mp3 sound clip here&gt;","pos":[4088,4119]},{"pos":[4179,4292],"content":"Conversely when an overlay content window is closed (or is light dismissed), the <bpt id=\"p1\">**</bpt>Hide<ept id=\"p1\">**</ept> sound should be called:"},{"content":"&lt;OverlayOut.mp3 sound clip here&gt;","pos":[4294,4326]},{"content":"Navigation Within a Page","pos":[4390,4414]},{"content":"When navigating between panels or views within an app's page (see <bpt id=\"p1\">[</bpt>Hub<ept id=\"p1\">](/controls-and-patterns/hub/)</ept> or <bpt id=\"p2\">[</bpt>Tabs and Pivots<ept id=\"p2\">](/controls-and-patterns/tabs-pivot/)</ept>), there is typically bidirectional movement.","pos":[4415,4617]},{"content":"Meaning you can move to the next view/panel or the previous one, without leaving the current app page you're on.","pos":[4618,4730]},{"pos":[4732,4847],"content":"The audio experience around this navigation concept is encompassed by the <bpt id=\"p1\">**</bpt>MovePrevious<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>MoveNext<ept id=\"p2\">**</ept> sounds."},{"pos":[4849,4928],"content":"When moving to a view/panel that is considered the <bpt id=\"p1\">*</bpt>next item<ept id=\"p1\">*</ept> in a list, call:"},{"content":"&lt;PageTransitionRight.mp3 sound clip here&gt;","pos":[4930,4971]},{"pos":[5035,5123],"content":"And when moving to a previous view/panel in a list considered the <bpt id=\"p1\">*</bpt>previous item<ept id=\"p1\">*</ept>, call:"},{"content":"&lt;PageTransitionLeft.mp3 sound clip here&gt;","pos":[5125,5165]},{"content":"Back Navigation","pos":[5237,5252]},{"pos":[5253,5364],"content":"When navigating from the current page to the previous page within an app the <bpt id=\"p1\">**</bpt>GoBack<ept id=\"p1\">**</ept> sound should be called:"},{"content":"&lt;BackButtonClick.mp3 sound clip here&gt;","pos":[5366,5403]},{"content":"Focusing on an Element","pos":[5469,5491]},{"content":"The <bpt id=\"p1\">**</bpt>Focus<ept id=\"p1\">**</ept> sound is the only implicit sound in our system.","pos":[5492,5553]},{"content":"Meaning a user isn't directly interacting with anything, but is still hearing a sound.","pos":[5554,5640]},{"content":"Focusing happens when a user navigates through an app, this can be with the gamepad/keyboard/remote or kinect.","pos":[5642,5752]},{"content":"Typically the <bpt id=\"p1\">**</bpt>Focus<ept id=\"p1\">**</ept> sound <bpt id=\"p2\">*</bpt>does not play on PointerEntered or mouse hover events<ept id=\"p2\">*</ept>.","pos":[5753,5839]},{"pos":[5841,5928],"content":"To set up a control to play the <bpt id=\"p1\">**</bpt>Focus<ept id=\"p1\">**</ept> sound when your control receives focus, call:"},{"content":"&lt;ElementFocus1.mp3 sound clip here&gt;","pos":[5930,5965]},{"content":"Cycling Focus Sounds","pos":[6030,6050]},{"content":"As an added feature to calling <bpt id=\"p1\">**</bpt>ElementSound.Focus<ept id=\"p1\">**</ept>, the sound system will, by default, cycle through 4 different sounds on each navigation trigger.","pos":[6051,6201]},{"content":"Meaning that no two exact focus sounds will play right after the other.","pos":[6202,6273]},{"content":"The purpose behind this cycling feature is to keep the focus sounds from becoming monotonous and from being noticeable by the user; focus sounds will be played most often and therefore should be the most subtle.","pos":[6275,6486]},{"content":"Related articles","pos":[6491,6507]},{"content":"Designing for Xbox and TV","pos":[6511,6536]}],"content":"---\nauthor: mijacobs\nDescription: Sound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.\nlabel: Sound\ntitle: Sound\ntemplate: detail.hbs\nms.assetid: 9fa77494-2525-4491-8f26-dc733b6a18f6\nextraBodyClass: style-sound\nbrief: Sound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.\n---\n[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]*This article provides a preview of features that aren't yet available.*\n\n# Sound in UWP apps\n\nSound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.\n\n## Sound Global API\nUWP provides an easily accessible sound system that allows you to simply \"flip a switch\" and get an immersive audio experience across your entire app.\n\nThe **ElementSoundPlayer** is an integrated sound system within XAML, and when turned on all default controls will play sounds automatically.\n```C#\nElementSoundPlayer.State = ElementSoundPlayerState.On;\n```\nThe **ElementSoundPlayer** has three different states: **On** **Off** and **Auto**.\n\nIf set to **Off**, no matter where your app is run, sound will never play. If set to **On** sounds for your app will play on every platform.\n\n### Sound for TV and Xbox\n\nSound is a key part of the 10-foot experience, and by default, the **ElementSoundPlayer**'s state is **Auto**, meaning that you will only get sound when your app is running on Xbox.\nTo understand more about designing for Xbox and TV, please see [Designing for Xbox and TV](http://go.microsoft.com/fwlink/?LinkId=760736).\n\n## Sound Volume Override\nAll sounds within the app can be dimmed with the **Volume** control. However, sounds within the app cannot get *louder than the system volume*.\n\nTo set the app volume level, call:\n```C#\nElementSoundPlayer.Volume = 0.5f;\n```\nWhere maximum volume (relative to system volume) is 1.0, and minimum is 0.0 (essentially silent).\n\n## Control Level State\nIf a control's default sound is not desired, it can be disabled. This is done through the **ElementSoundMode** on the control.\n\nThe **ElementSoundMode** has two states: **Off** and **Default**. When not set, it is **Default**. If set to **Off**, every sound that control plays will be muted *except for focus*.\n\n```XAML\n<Button Name=\"ButtonName\" Content=\"More Info\" ElementSoundMode=\"Off\"/>\n```\n\n```C#\nButtonName.ElementSoundState = ElementSoundMode.Off;\n```\n\n## Is This The Right Sound?\nWhen creating a custom control, or changing an existing control's sound, it is important to understand the usages of all the sounds the system provides.\n\nEach sound relates to a certain basic user interaction, and although sounds can be customized to play on any interaction, this section serves to illustrate the scenarios where sounds should be used to maintain a consistent experience across all UWP apps.\n\n### Invoking an Element\nThe most common control-triggered sound in our system today is the **Invoke** sound. This sound plays when a user invokes a control through a tap/click/enter/space or press of the 'A' button on a gamepad.\n\nTypically, this sound is only played when a user explicitly targets a simple control or control part through an [input device](/input-and-devices/guidelines-for-interactions/).\n\n<SelectButtonClick.mp3 sound clip here>\n\nTo play this sound from any control event, simply call the Play method from **ElementSoundPlayer** and pass in **ElementSound.Invoke**:\n```C#\nElementSoundPlayer.Play(ElementSoundKind.Invoke);\n```\n\n### Showing & Hiding Content\nThere are many flyouts, dialogs and dismissible UIs in XAML, and any action that triggers one of these overlays should call a **Show** or **Hide** sound.\n\nWhen an overlay content window is brought into view, the **Show** sound should be called:\n\n<OverlayIn.mp3 sound clip here>\n\n```C#\nElementSoundPlayer.Play(ElementSoundKind.Show);\n```\nConversely when an overlay content window is closed (or is light dismissed), the **Hide** sound should be called:\n\n<OverlayOut.mp3 sound clip here>\n\n```C#\nElementSoundPlayer.Play(ElementSoundKind.Hide);\n```\n### Navigation Within a Page\nWhen navigating between panels or views within an app's page (see [Hub](/controls-and-patterns/hub/) or [Tabs and Pivots](/controls-and-patterns/tabs-pivot/)), there is typically bidirectional movement. Meaning you can move to the next view/panel or the previous one, without leaving the current app page you're on.\n\nThe audio experience around this navigation concept is encompassed by the **MovePrevious** and **MoveNext** sounds.\n\nWhen moving to a view/panel that is considered the *next item* in a list, call:\n\n<PageTransitionRight.mp3 sound clip here>\n\n```C#\nElementSoundPlayer.Play(ElementSoundKind.MoveNext);\n```\nAnd when moving to a previous view/panel in a list considered the *previous item*, call:\n\n<PageTransitionLeft.mp3 sound clip here>\n\n```C#\nElementSoundPlayer.Play(ElementSoundKind.MovePrevious);\n```\n### Back Navigation\nWhen navigating from the current page to the previous page within an app the **GoBack** sound should be called:\n\n<BackButtonClick.mp3 sound clip here>\n\n```C#\nElementSoundPlayer.Play(ElementSoundKind.GoBack);\n```\n### Focusing on an Element\nThe **Focus** sound is the only implicit sound in our system. Meaning a user isn't directly interacting with anything, but is still hearing a sound.\n\nFocusing happens when a user navigates through an app, this can be with the gamepad/keyboard/remote or kinect. Typically the **Focus** sound *does not play on PointerEntered or mouse hover events*.\n\nTo set up a control to play the **Focus** sound when your control receives focus, call:\n\n<ElementFocus1.mp3 sound clip here>\n\n```C#\nElementSoundPlayer.Play(ElementSoundKind.Focus);\n```\n### Cycling Focus Sounds\nAs an added feature to calling **ElementSound.Focus**, the sound system will, by default, cycle through 4 different sounds on each navigation trigger. Meaning that no two exact focus sounds will play right after the other.\n\nThe purpose behind this cycling feature is to keep the focus sounds from becoming monotonous and from being noticeable by the user; focus sounds will be played most often and therefore should be the most subtle.\n\n## Related articles\n* [Designing for Xbox and TV](http://go.microsoft.com/fwlink/?LinkId=760736)\n"}