{"nodes":[{"content":"Use layout panels to arrange and group UI elements in your app.","pos":[32,95]},{"content":"Layout panels for Universal Windows Platform (UWP) apps","pos":[103,158]},{"content":"Layout panels","pos":[256,269]},{"content":"You use layout panels to arrange and group UI elements in your app.","pos":[271,338]},{"content":"The built-in XAML layout panels include <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RelativePanel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>StackPanel<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept>, <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Grid<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept>, <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>VariableSizedWrapGrid<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.aspx)</ept>, and <bpt id=\"p9\">[</bpt><bpt id=\"p10\">**</bpt>Canvas<ept id=\"p10\">**</ept><ept id=\"p9\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept>.","pos":[339,955]},{"content":"Here, we describe each panel and show how to use it to layout XAML UI elements.","pos":[956,1035]},{"content":"There are several things to consider when choosing a layout panel:","pos":[1037,1103]},{"content":"How the panel positions its child elements.","pos":[1106,1149]},{"content":"How the panel sizes its child elements.","pos":[1152,1191]},{"content":"How overlapping child elements are layered on top of each other (z-order).","pos":[1194,1268]},{"content":"The number and complexity of nested panel elements needed to create your desired layout.","pos":[1271,1359]},{"content":"Panel attached properties","pos":[1364,1389]},{"content":"Most XAML layout panels use attached properties to let their child elements inform the parent panel about how they should be positioned in the UI.","pos":[1393,1539]},{"content":"Attached properties use the syntax <bpt id=\"p1\">*</bpt>AttachedPropertyProvider.PropertyName<ept id=\"p1\">*</ept>.","pos":[1540,1615]},{"content":"If you have panels that are nested inside other panels, attached properties on UI elements that specify layout characteristics to a parent are interpreted by the most immediate parent panel only.","pos":[1616,1811]},{"content":"Here is an example of how you can set the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas.Left<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.left.aspx)</ept> attached property on a Button control in XAML.","pos":[1813,2015]},{"content":"This informs the parent Canvas that the Button should be positioned 50 effective pixels from the left edge of the Canvas.","pos":[2016,2137]},{"pos":[2213,2339],"content":"For more info about attached properties, see <bpt id=\"p1\">[</bpt>Attached properties overview<ept id=\"p1\">](../xaml-platform/attached-properties-overview.md)</ept>."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept><ph id=\"ph1\">&amp;nbsp;&amp;nbsp;</ph>An attached property is a XAML concept that requires special syntax to get or set from code.","pos":[2343,2455]},{"content":"To use attached properties in code, see the <bpt id=\"p1\">*</bpt>Attached properties in code<ept id=\"p1\">*</ept> section of the <bpt id=\"p2\">*</bpt>Attached properties overview<ept id=\"p2\">*</ept> article.","pos":[2456,2584]},{"content":"Panel borders","pos":[2588,2601]},{"content":"The RelativePanel, StackPanel, and Grid panels define border properties that let you draw a border around the panel without wrapping them in an additional Border element.","pos":[2605,2775]},{"content":"The border properties are <bpt id=\"p1\">**</bpt>BorderBrush<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>BorderThickness<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>CornerRadius<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>Padding<ept id=\"p4\">**</ept>.","pos":[2776,2874]},{"content":"Hereâ€™s an example of how to set border properties on a Grid.","pos":[2876,2936]},{"content":"A Grid with borders","pos":[3076,3095]},{"content":"Using the built-in border properties reduces the XAML element count, which can improve the UI performance of your app.","pos":[3135,3253]},{"content":"For more info about layout panels and UI performance, see <bpt id=\"p1\">[</bpt>Optimize your XAML layout<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/mt404609.aspx)</ept>.","pos":[3254,3409]},{"content":"RelativePanel","pos":[3414,3427]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RelativePanel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</ept> lets you layout UI elements by specifying where they go in relation to other elements and in relation to the panel.","pos":[3429,3662]},{"content":"By default, an element is positioned in the upper left corner of the panel.","pos":[3663,3738]},{"content":"You can use RelativePanel with a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualStateManager<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>AdaptiveTrigger<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</ept>s to rearrange your UI for different window sizes.","pos":[3739,4057]},{"content":"This table shows the attached properties you can use to align an element with the edge or center of the panel, and align and position it in relation to other elements.","pos":[4059,4226]},{"content":"Panel alignment","pos":[4228,4243]},{"content":"Sibling alignment","pos":[4246,4263]},{"content":"Sibling position","pos":[4266,4282]},{"content":"AlignTopWithPanel","pos":[4341,4358]},{"content":"AlignTopWith","pos":[4483,4495]},{"content":"Above","pos":[4615,4620]},{"content":"AlignBottomWithPanel","pos":[4733,4753]},{"content":"AlignBottomWith","pos":[4881,4896]},{"content":"Below","pos":[5019,5024]},{"content":"AlignLeftWithPanel","pos":[5137,5155]},{"content":"AlignLeftWith","pos":[5281,5294]},{"content":"LeftOf","pos":[5415,5421]},{"content":"AlignRightWithPanel","pos":[5535,5554]},{"content":"AlignRightWith","pos":[5681,5695]},{"content":"RightOf","pos":[5817,5824]},{"content":"AlignHorizontalCenterWithPanel","pos":[5939,5969]},{"content":"AlignHorizontalCenterWith","pos":[6107,6132]},{"content":"AlignVerticalCenterWithPanel","pos":[6275,6303]},{"content":"AlignVerticalCenterWith","pos":[6439,6462]},{"content":"This XAML shows how to arrange elements in a RelativePanel.","pos":[6603,6662]},{"content":"The result looks like this.","pos":[7430,7457]},{"content":"Relative panel","pos":[7462,7476]},{"content":"Here are a few thing to note about the sizing of the rectangles.","pos":[7519,7583]},{"content":"The red rectangle is given an explicit size of 44x44.","pos":[7586,7639]},{"content":"It's placed in the upper left corner of the panel, which is the default position.","pos":[7640,7721]},{"content":"The green rectangle is given an explicit height of 44.","pos":[7724,7778]},{"content":"Its left side is aligned with the red rectangle, and its right side is aligned with the blue rectangle, which determines its width.","pos":[7779,7910]},{"content":"The yellow rectangle isn't given an explicit size.","pos":[7913,7963]},{"content":"Its left side is aligned with the blue rectangle.","pos":[7964,8013]},{"content":"Its right and bottom edges are aligned with the edge of the panel.","pos":[8014,8080]},{"content":"Its size is determined by these alignments and it will resize as the panel resizes.","pos":[8081,8164]},{"content":"StackPanel","pos":[8169,8179]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StackPanel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</ept> is a simple layout panel that arranges its child elements into a single line that can be oriented horizontally or vertically.","pos":[8181,8418]},{"content":"StackPanel controls are typically used in scenarios where you want to arrange a small subsection of the UI on your page.","pos":[8419,8539]},{"content":"You can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Orientation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.orientation.aspx)</ept> property to specify the direction of the child elements.","pos":[8541,8738]},{"content":"The default orientation is <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Vertical<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.orientation.aspx)</ept>.","pos":[8739,8877]},{"content":"The following XAML shows how to create a vertical StackPanel of items.","pos":[8879,8949]},{"content":"The result looks like this.","pos":[9158,9185]},{"content":"Stack panel","pos":[9189,9200]},{"content":"In a StackPanel, if a child element's size is not set explicitly, it stretches to fill the available width (or height if the Orientation is <bpt id=\"p1\">**</bpt>Horizontal<ept id=\"p1\">**</ept>).","pos":[9240,9396]},{"content":"In this example, the width of the rectangles is not set.","pos":[9397,9453]},{"content":"The rectangles expand to fill the entire width of the StackPanel.","pos":[9454,9519]},{"content":"Grid","pos":[9524,9528]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Grid<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</ept> panel supports arranging controls in multi-row and multi-column layouts.","pos":[9530,9706]},{"content":"You can specify a Grid panel's rows and columns by using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RowDefinitions<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.rowdefinitions.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ColumnDefinitions<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.columndefinitions.aspx)</ept> properties.","pos":[9707,10039]},{"content":"In XAML, use property element syntax to declare the rows and columns within the Grid element.","pos":[10040,10133]},{"content":"You can distribute space within a column or a row by using <bpt id=\"p1\">**</bpt>Auto<ept id=\"p1\">**</ept> or star sizing.","pos":[10134,10217]},{"pos":[10219,10529],"content":"You position objects in specific cells of the Grid by using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Grid.Column<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.column.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Grid.Row<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.row.aspx)</ept> attached properties."},{"pos":[10531,10865],"content":"You can make content span across multiple rows and columns by using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Grid.RowSpan<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.rowspan.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Grid.ColumnSpan<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.columnspan.aspx)</ept> attached properties."},{"content":"This XAML example shows how to create a Grid with three rows and two columns.","pos":[10867,10944]},{"content":"The height of the first and third rows is just large enough to contain the text.","pos":[10945,11025]},{"content":"The height of the second row fills up the rest of the available height.","pos":[11026,11097]},{"content":"The width of the columns is split equally within the available container width.","pos":[11098,11177]},{"content":"The result looks like this.","pos":[11638,11665]},{"content":"Grid","pos":[11669,11673]},{"content":"In this example, the sizing works like this:","pos":[11706,11750]},{"content":"The second row has an explicit height of 44 effective pixels.","pos":[11754,11815]},{"content":"By default, the height of the first row fills whatever space is left over.","pos":[11816,11890]},{"content":"The width of the first column is set to <bpt id=\"p1\">**</bpt>Auto<ept id=\"p1\">**</ept>, so it's as wide as needed for its children.","pos":[11893,11986]},{"content":"In this case, it's 44 effective pixels wide to accommodate the width of the red rectangle.","pos":[11987,12077]},{"content":"There are no other size constraints on the rectangles, so each one stretches to fill the grid cell it's in.","pos":[12080,12187]},{"content":"VariableSizedWrapGrid","pos":[12192,12213]},{"pos":[12215,12658],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VariableSizedWrapGrid<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.aspx)</ept> provides a grid-style layout panel where elements are arranged in rows or columns that automatically wrap to a new row or column when the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>MaximumRowsOrColumns<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.maximumrowsorcolumns.aspx)</ept> value is reached."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Orientation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.orientation.aspx)</ept> property specifies whether the grid adds its items in rows or columns before wrapping.","pos":[12661,12887]},{"content":"The default orientation is <bpt id=\"p1\">**</bpt>Vertical<ept id=\"p1\">**</ept>, which means the grid adds items from top to bottom until a column is full, then wraps to a new column.","pos":[12888,13031]},{"content":"When the value is <bpt id=\"p1\">**</bpt>Horizontal<ept id=\"p1\">**</ept>, the grid adds items from left to right, then wraps to a new row.","pos":[13032,13130]},{"content":"Cell dimensions are specified by the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemHeight<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.itemheight.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ItemWidth<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.itemwidth.aspx)</ept>.","pos":[13132,13439]},{"content":"Each cell is the same size.","pos":[13440,13467]},{"content":"If ItemHeight or ItemWidth is not specified, then the first cell sizes to fit its content, and every other cell is the size of the first cell.","pos":[13468,13610]},{"pos":[13612,14021],"content":"You can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VariableSizedWrapGrid.ColumnSpan<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.columnspan.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>VariableSizedWrapGrid.RowSpan<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.rowspan.aspx)</ept> attached properties to specify how many adjacent cells a child element should fill."},{"content":"Here's how to use a VariableSizedWrapGrid in XAML.","pos":[14023,14073]},{"content":"The result looks like this.","pos":[14518,14545]},{"content":"Variable size wrap grid","pos":[14549,14572]},{"content":"In this example, the maximum number of rows in each column is 3.","pos":[14624,14688]},{"content":"The first column contains only 2 items (the red and blue rectangles) because the blue rectangle spans 2 rows.","pos":[14689,14798]},{"content":"The green rectangle then wraps to the top of the next column.","pos":[14799,14860]},{"content":"Canvas","pos":[14865,14871]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept> panel positions its child elements using fixed coordinate points.","pos":[14873,15046]},{"content":"You specify the points on individual child elements by setting the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas.Left<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.left.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Canvas.Top<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.top.aspx)</ept> attached properties on each element.","pos":[15047,15380]},{"content":"During layout, the parent Canvas reads these attached property values from its children and uses these values during the <bpt id=\"p1\">[</bpt>Arrange<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.arrange.aspx)</ept> pass of layout.","pos":[15381,15620]},{"content":"Objects in a Canvas can overlap, where one object is drawn on top of another object.","pos":[15622,15706]},{"content":"By default, the Canvas renders child objects in the order in which theyâ€™re declared, so the last child is rendered on top (each element has a default z-index of 0).","pos":[15707,15871]},{"content":"This is the same as other built-in panels.","pos":[15872,15914]},{"content":"However, Canvas also supports the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas.ZIndex<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.zindex.aspx)</ept> attached property that you can set on each of the child elements.","pos":[15915,16132]},{"content":"You can set this property in code to change the draw order of elements during run time.","pos":[16133,16220]},{"content":"The element with the highest Canvas.ZIndex value draws last and therefore draws over any other elements that share the same space or overlap in any way.","pos":[16221,16373]},{"content":"Note that alpha value (transparency) is respected, so even if elements overlap, the contents shown in overlap areas might be blended if the top one has a non-maximum alpha value.","pos":[16374,16552]},{"content":"The Canvas does not do any sizing of its children.","pos":[16554,16604]},{"content":"Each element must specify its size.","pos":[16605,16640]},{"content":"Here's an example of a Canvas in XAML.","pos":[16642,16680]},{"content":"The result looks like this.","pos":[17049,17076]},{"content":"Canvas","pos":[17080,17086]},{"content":"Use the Canvas panel with discretion.","pos":[17121,17158]},{"content":"While it's convenient to be able to precisely control positions of elements in UI for some scenarios, a fixed positioned layout panel causes that area of your UI to be less adaptive to overall app window size changes.","pos":[17159,17376]},{"content":"App window resize might come from device orientation changes, split app windows, changing monitors, and a number of other user scenarios.","pos":[17377,17514]},{"content":"Panels for ItemsControl","pos":[17519,17542]},{"content":"There are several special-purpose panels that can be used only as an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemsPanel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemspanel.aspx)</ept> to display items in an <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ItemsControl<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.aspx)</ept>.","pos":[17544,17877]},{"content":"These are <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemsStackPanel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemsstackpanel.aspx)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ItemsWrapGrid<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemswrapgrid.aspx)</ept>, <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>VirtualizingStackPanel<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.virtualizingstackpanel.aspx)</ept>, and <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>WrapGrid<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.wrapgrid.aspx)</ept>.","pos":[17878,18379]},{"content":"You can't use these panels for general UI layout.","pos":[18380,18429]}],"content":"---\nauthor: Jwmsft\nDescription: Use layout panels to arrange and group UI elements in your app.\ntitle: Layout panels for Universal Windows Platform (UWP) apps\nms.assetid: 07A7E022-EEE9-4C81-AF07-F80868665994\nlabel: Layout panels\ntemplate: detail.hbs\n---\n# Layout panels\n\nYou use layout panels to arrange and group UI elements in your app. The built-in XAML layout panels include [**RelativePanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx), [**StackPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx), [**Grid**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx), [**VariableSizedWrapGrid**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.aspx), and [**Canvas**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx). Here, we describe each panel and show how to use it to layout XAML UI elements.\n\nThere are several things to consider when choosing a layout panel:\n- How the panel positions its child elements.\n- How the panel sizes its child elements.\n- How overlapping child elements are layered on top of each other (z-order).\n- The number and complexity of nested panel elements needed to create your desired layout.\n\n\n**Panel attached properties**\n\nMost XAML layout panels use attached properties to let their child elements inform the parent panel about how they should be positioned in the UI. Attached properties use the syntax *AttachedPropertyProvider.PropertyName*. If you have panels that are nested inside other panels, attached properties on UI elements that specify layout characteristics to a parent are interpreted by the most immediate parent panel only.\n\nHere is an example of how you can set the [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.left.aspx) attached property on a Button control in XAML. This informs the parent Canvas that the Button should be positioned 50 effective pixels from the left edge of the Canvas.\n\n```xaml\n<Canvas>\n  <Button Canvas.Left=\"50\">Hello</Button>\n</Canvas>\n```\n\nFor more info about attached properties, see [Attached properties overview](../xaml-platform/attached-properties-overview.md).\n\n> **Note**&nbsp;&nbsp;An attached property is a XAML concept that requires special syntax to get or set from code. To use attached properties in code, see the *Attached properties in code* section of the *Attached properties overview* article.\n\n**Panel borders**\n\nThe RelativePanel, StackPanel, and Grid panels define border properties that let you draw a border around the panel without wrapping them in an additional Border element. The border properties are **BorderBrush**, **BorderThickness**, **CornerRadius**, and **Padding**.\n\nHereâ€™s an example of how to set border properties on a Grid.\n\n```xaml\n<Grid BorderBrush=\"Blue\" BorderThickness=\"12\" CornerRadius=\"12\" Padding=\"12\">\n    <TextBlock Text=\"Hello World!\"/>\n</Grid>\n```\n\n![A Grid with borders](images/layout-panel-grid-border.png)\n\nUsing the built-in border properties reduces the XAML element count, which can improve the UI performance of your app. For more info about layout panels and UI performance, see [Optimize your XAML layout](https://msdn.microsoft.com/en-us/library/windows/apps/mt404609.aspx).\n\n## RelativePanel\n\n[**RelativePanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx) lets you layout UI elements by specifying where they go in relation to other elements and in relation to the panel. By default, an element is positioned in the upper left corner of the panel. You can use RelativePanel with a [**VisualStateManager**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.aspx) and [**AdaptiveTrigger**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)s to rearrange your UI for different window sizes.\n\nThis table shows the attached properties you can use to align an element with the edge or center of the panel, and align and position it in relation to other elements.\n\nPanel alignment | Sibling alignment | Sibling position\n----------------|-------------------|-----------------\n[**AlignTopWithPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aligntopwithpanel.aspx) | [**AlignTopWith**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aligntopwith.aspx) | [**Above**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.above.aspx)  \n[**AlignBottomWithPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignbottomwithpanel.aspx) | [**AlignBottomWith**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignbottomwith.aspx) | [**Below**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.below.aspx)  \n[**AlignLeftWithPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignleftwithpanel.aspx) | [**AlignLeftWith**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignleftwith.aspx) | [**LeftOf**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.leftof.aspx)  \n[**AlignRightWithPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignrightwithpanel.aspx) | [**AlignRightWith**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignrightwith.aspx) | [**RightOf**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.rightof.aspx)  \n[**AlignHorizontalCenterWithPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignhorizontalcenterwithpanel.aspx) | [**AlignHorizontalCenterWith**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignhorizontalcenterwith.aspx) | &nbsp;   \n[**AlignVerticalCenterWithPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignverticalcenterwithpanel.aspx) | [**AlignVerticalCenterWith**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignverticalcenterwith.aspx) | &nbsp;   \n\n \nThis XAML shows how to arrange elements in a RelativePanel.\n\n```xaml\n<RelativePanel BorderBrush=\"Gray\" BorderThickness=\"1\">\n    <Rectangle x:Name=\"RedRect\" Fill=\"Red\" Height=\"44\" Width=\"44\"/>\n    <Rectangle x:Name=\"BlueRect\" Fill=\"Blue\"\n               Height=\"44\" Width=\"88\"\n               RelativePanel.RightOf=\"RedRect\" />\n\n    <Rectangle x:Name=\"GreenRect\" Fill=\"Green\" \n               Height=\"44\"\n               RelativePanel.Below=\"RedRect\" \n               RelativePanel.AlignLeftWith=\"RedRect\" \n               RelativePanel.AlignRightWith=\"BlueRect\"/>\n    <Rectangle Fill=\"Yellow\"\n               RelativePanel.Below=\"GreenRect\" \n               RelativePanel.AlignLeftWith=\"BlueRect\" \n               RelativePanel.AlignRightWithPanel=\"True\"\n               RelativePanel.AlignBottomWithPanel=\"True\"/>\n</RelativePanel>\n```\n\nThe result looks like this. \n\n![Relative panel](images/layout-panel-relative-panel.png)\n\nHere are a few thing to note about the sizing of the rectangles.\n- The red rectangle is given an explicit size of 44x44. It's placed in the upper left corner of the panel, which is the default position.\n- The green rectangle is given an explicit height of 44. Its left side is aligned with the red rectangle, and its right side is aligned with the blue rectangle, which determines its width.\n- The yellow rectangle isn't given an explicit size. Its left side is aligned with the blue rectangle. Its right and bottom edges are aligned with the edge of the panel. Its size is determined by these alignments and it will resize as the panel resizes.\n\n## StackPanel\n\n[**StackPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx) is a simple layout panel that arranges its child elements into a single line that can be oriented horizontally or vertically. StackPanel controls are typically used in scenarios where you want to arrange a small subsection of the UI on your page.\n\nYou can use the [**Orientation**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.orientation.aspx) property to specify the direction of the child elements. The default orientation is [**Vertical**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.orientation.aspx).\n\nThe following XAML shows how to create a vertical StackPanel of items.\n\n```xaml\n<StackPanel>\n    <Rectangle Fill=\"Red\" Height=\"44\"/>\n    <Rectangle Fill=\"Blue\" Height=\"44\"/>\n    <Rectangle Fill=\"Green\" Height=\"44\"/>\n    <Rectangle Fill=\"Yellow\" Height=\"44\"/>\n</StackPanel>\n```\n\n\nThe result looks like this.\n\n![Stack panel](images/layout-panel-stack-panel.png)\n\nIn a StackPanel, if a child element's size is not set explicitly, it stretches to fill the available width (or height if the Orientation is **Horizontal**). In this example, the width of the rectangles is not set. The rectangles expand to fill the entire width of the StackPanel.\n\n## Grid\n\nThe [**Grid**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx) panel supports arranging controls in multi-row and multi-column layouts. You can specify a Grid panel's rows and columns by using the [**RowDefinitions**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.rowdefinitions.aspx) and [**ColumnDefinitions**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.columndefinitions.aspx) properties. In XAML, use property element syntax to declare the rows and columns within the Grid element. You can distribute space within a column or a row by using **Auto** or star sizing.\n\nYou position objects in specific cells of the Grid by using the [**Grid.Column**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.column.aspx) and [**Grid.Row**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.row.aspx) attached properties.\n\nYou can make content span across multiple rows and columns by using the [**Grid.RowSpan**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.rowspan.aspx) and [**Grid.ColumnSpan**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.columnspan.aspx) attached properties.\n\nThis XAML example shows how to create a Grid with three rows and two columns. The height of the first and third rows is just large enough to contain the text. The height of the second row fills up the rest of the available height. The width of the columns is split equally within the available container width.\n\n```xaml\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition/>\n        <RowDefinition Height=\"44\"/>\n    </Grid.RowDefinitions>\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\"/>\n        <ColumnDefinition/>\n    </Grid.ColumnDefinitions>\n    <Rectangle Fill=\"Red\" Width=\"44\"/>\n    <Rectangle Fill=\"Blue\" Grid.Row=\"1\"/>\n    <Rectangle Fill=\"Green\" Grid.Column=\"1\"/>\n    <Rectangle Fill=\"Yellow\" Grid.Row=\"1\" Grid.Column=\"1\"/>\n</Grid>\n```\n\n\nThe result looks like this.\n\n![Grid](images/layout-panel-grid.png)\n\nIn this example, the sizing works like this: \n- The second row has an explicit height of 44 effective pixels. By default, the height of the first row fills whatever space is left over.\n- The width of the first column is set to **Auto**, so it's as wide as needed for its children. In this case, it's 44 effective pixels wide to accommodate the width of the red rectangle.\n- There are no other size constraints on the rectangles, so each one stretches to fill the grid cell it's in.\n\n## VariableSizedWrapGrid\n\n[**VariableSizedWrapGrid**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.aspx) provides a grid-style layout panel where elements are arranged in rows or columns that automatically wrap to a new row or column when the [**MaximumRowsOrColumns**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.maximumrowsorcolumns.aspx) value is reached. \n\nThe [**Orientation**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.orientation.aspx) property specifies whether the grid adds its items in rows or columns before wrapping. The default orientation is **Vertical**, which means the grid adds items from top to bottom until a column is full, then wraps to a new column. When the value is **Horizontal**, the grid adds items from left to right, then wraps to a new row.\n\nCell dimensions are specified by the [**ItemHeight**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.itemheight.aspx) and [**ItemWidth**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.itemwidth.aspx). Each cell is the same size. If ItemHeight or ItemWidth is not specified, then the first cell sizes to fit its content, and every other cell is the size of the first cell.\n\nYou can use the [**VariableSizedWrapGrid.ColumnSpan**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.columnspan.aspx) and [**VariableSizedWrapGrid.RowSpan**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.variablesizedwrapgrid.rowspan.aspx) attached properties to specify how many adjacent cells a child element should fill.\n\nHere's how to use a VariableSizedWrapGrid in XAML.\n\n```xaml\n<VariableSizedWrapGrid MaximumRowsOrColumns=\"3\" ItemHeight=\"44\" ItemWidth=\"44\">\n    <Rectangle Fill=\"Red\"/>\n    <Rectangle Fill=\"Blue\" \n               VariableSizedWrapGrid.RowSpan=\"2\"/>\n    <Rectangle Fill=\"Green\" \n               VariableSizedWrapGrid.ColumnSpan=\"2\"/>\n    <Rectangle Fill=\"Yellow\" \n               VariableSizedWrapGrid.RowSpan=\"2\" \n               VariableSizedWrapGrid.ColumnSpan=\"2\"/>\n</VariableSizedWrapGrid>\n```\n\n\nThe result looks like this.\n\n![Variable size wrap grid](images/layout-panel-variable-size-wrap-grid.png)\n\nIn this example, the maximum number of rows in each column is 3. The first column contains only 2 items (the red and blue rectangles) because the blue rectangle spans 2 rows. The green rectangle then wraps to the top of the next column.\n\n## Canvas\n\nThe [**Canvas**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx) panel positions its child elements using fixed coordinate points. You specify the points on individual child elements by setting the [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.left.aspx) and [**Canvas.Top**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.top.aspx) attached properties on each element. During layout, the parent Canvas reads these attached property values from its children and uses these values during the [Arrange](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.arrange.aspx) pass of layout.\n\nObjects in a Canvas can overlap, where one object is drawn on top of another object. By default, the Canvas renders child objects in the order in which theyâ€™re declared, so the last child is rendered on top (each element has a default z-index of 0). This is the same as other built-in panels. However, Canvas also supports the [**Canvas.ZIndex**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.zindex.aspx) attached property that you can set on each of the child elements. You can set this property in code to change the draw order of elements during run time. The element with the highest Canvas.ZIndex value draws last and therefore draws over any other elements that share the same space or overlap in any way. Note that alpha value (transparency) is respected, so even if elements overlap, the contents shown in overlap areas might be blended if the top one has a non-maximum alpha value.\n\nThe Canvas does not do any sizing of its children. Each element must specify its size.\n\nHere's an example of a Canvas in XAML.\n\n```xaml\n<Canvas Width=\"120\" Height=\"120\">\n    <Rectangle Fill=\"Red\" Height=\"44\" Width=\"44\"/>\n    <Rectangle Fill=\"Blue\" Height=\"44\" Width=\"44\" Canvas.Left=\"20\" Canvas.Top=\"20\"/>\n    <Rectangle Fill=\"Green\" Height=\"44\" Width=\"44\" Canvas.Left=\"40\" Canvas.Top=\"40\"/>\n    <Rectangle Fill=\"Yellow\" Height=\"44\" Width=\"44\" Canvas.Left=\"60\" Canvas.Top=\"60\"/>\n</Canvas>\n```\n\n\nThe result looks like this.\n\n![Canvas](images/layout-panel-canvas.png)\n\nUse the Canvas panel with discretion. While it's convenient to be able to precisely control positions of elements in UI for some scenarios, a fixed positioned layout panel causes that area of your UI to be less adaptive to overall app window size changes. App window resize might come from device orientation changes, split app windows, changing monitors, and a number of other user scenarios.\n\n## Panels for ItemsControl\n\nThere are several special-purpose panels that can be used only as an [**ItemsPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemspanel.aspx) to display items in an [**ItemsControl**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.aspx). These are [**ItemsStackPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemsstackpanel.aspx), [**ItemsWrapGrid**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemswrapgrid.aspx), [**VirtualizingStackPanel**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.virtualizingstackpanel.aspx), and [**WrapGrid**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.wrapgrid.aspx). You can't use these panels for general UI layout.\n"}