<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\debug-test-perf\optimize-animations-and-media.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">590d41f5e2dba044b0355aa5cf2291f6f2e17a0b</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Optimize animations, media, and images</source>
          <target state="new">Optimize animations, media, and images</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Create Universal Windows Platform (UWP) apps with smooth animations, high frame rate, and high-performance media capture and playback.</source>
          <target state="new">Create Universal Windows Platform (UWP) apps with smooth animations, high frame rate, and high-performance media capture and playback.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Optimize animations, media, and images</source>
          <target state="new">Optimize animations, media, and images</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create Universal Windows Platform (UWP) apps with smooth animations, high frame rate, and high-performance media capture and playback.</source>
          <target state="new">Create Universal Windows Platform (UWP) apps with smooth animations, high frame rate, and high-performance media capture and playback.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Make animations smooth</source>
          <target state="new">Make animations smooth</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A key aspect of UWP apps is smooth interactions.</source>
          <target state="new">A key aspect of UWP apps is smooth interactions.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This includes touch manipulations that "stick to your finger," smooth transitions and animations, and small motions that provide input feedback.</source>
          <target state="new">This includes touch manipulations that "stick to your finger," smooth transitions and animations, and small motions that provide input feedback.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the XAML framework there is a thread called the composition thread that is dedicated to the composition and animation of an app’s visual elements.</source>
          <target state="new">In the XAML framework there is a thread called the composition thread that is dedicated to the composition and animation of an app’s visual elements.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because the composition thread is separate from UI thread (the thread that runs framework and developer code), apps can achieve a consistent frame rate and smooth animations regardless of complicated layout passes or extended calculations.</source>
          <target state="new">Because the composition thread is separate from UI thread (the thread that runs framework and developer code), apps can achieve a consistent frame rate and smooth animations regardless of complicated layout passes or extended calculations.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This section shows how to use the composition thread to keep an app’s animations buttery smooth.</source>
          <target state="new">This section shows how to use the composition thread to keep an app’s animations buttery smooth.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more info about animations, see <bpt id="p1">[</bpt>Animations overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187350)</ept>.</source>
          <target state="new">For more info about animations, see <bpt id="p1">[</bpt>Animations overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187350)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To learn about increasing an app’s responsiveness while performing intensive computations, see <bpt id="p1">[</bpt>Keep the UI thread responsive<ept id="p1">](keep-the-ui-thread-responsive.md)</ept>.</source>
          <target state="new">To learn about increasing an app’s responsiveness while performing intensive computations, see <bpt id="p1">[</bpt>Keep the UI thread responsive<ept id="p1">](keep-the-ui-thread-responsive.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use independent instead of dependent animations</source>
          <target state="new">Use independent instead of dependent animations</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Independent animations can be calculated from beginning to end at the time of creation because changes to the property being animated don't affect rest of the objects in a scene.</source>
          <target state="new">Independent animations can be calculated from beginning to end at the time of creation because changes to the property being animated don't affect rest of the objects in a scene.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Independent animations can therefore run on the composition thread instead of the UI thread.</source>
          <target state="new">Independent animations can therefore run on the composition thread instead of the UI thread.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This guarantees that they remain smooth because the composition thread is updated at a consistent cadence.</source>
          <target state="new">This guarantees that they remain smooth because the composition thread is updated at a consistent cadence.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>All of these types of animations are guaranteed to be independent:</source>
          <target state="new">All of these types of animations are guaranteed to be independent:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Object animations using key frames</source>
          <target state="new">Object animations using key frames</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Zero-duration animations</source>
          <target state="new">Zero-duration animations</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Animations to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759771)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas.Top<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh759772)</ept> properties</source>
          <target state="new">Animations to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Canvas.Left<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759771)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas.Top<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh759772)</ept> properties</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Animations to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement.Opacity<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208962)</ept> property</source>
          <target state="new">Animations to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement.Opacity<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208962)</ept> property</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Animations to properties of type <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Brush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR228076)</ept> when targeting the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SolidColorBrush.Color<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242963)</ept> subproperty</source>
          <target state="new">Animations to properties of type <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Brush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR228076)</ept> when targeting the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SolidColorBrush.Color<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242963)</ept> subproperty</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Animations to the following <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911)</ept> properties when targeting subproperties of these return value types:</source>
          <target state="new">Animations to the following <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911)</ept> properties when targeting subproperties of these return value types:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>RenderTransform</source>
          <target state="new">RenderTransform</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Projection</source>
          <target state="new">Projection</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Clip</source>
          <target state="new">Clip</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Dependent animations affect layout, which therefore cannot be calculated without extra input from the UI thread.</source>
          <target state="new">Dependent animations affect layout, which therefore cannot be calculated without extra input from the UI thread.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Dependent animations include modifications to properties like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Width<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208751)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Height<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208718)</ept>.</source>
          <target state="new">Dependent animations include modifications to properties like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Width<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208751)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Height<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208718)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>By default, dependent animations are not run and require an opt-in from the app developer.</source>
          <target state="new">By default, dependent animations are not run and require an opt-in from the app developer.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When enabled, they run smoothly if the UI thread remains unblocked, but they begin to stutter if the framework or app is doing a lot of other work on the UI thread.</source>
          <target state="new">When enabled, they run smoothly if the UI thread remains unblocked, but they begin to stutter if the framework or app is doing a lot of other work on the UI thread.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Almost all animations in the XAML framework are independent by default, but there are some actions that you can take to disable this optimization.</source>
          <target state="new">Almost all animations in the XAML framework are independent by default, but there are some actions that you can take to disable this optimization.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Beware of these scenarios particularly:</source>
          <target state="new">Beware of these scenarios particularly:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>EnableDependentAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR210356)</ept> property to allow a dependent animation to run on the UI thread.</source>
          <target state="new">Setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>EnableDependentAnimation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR210356)</ept> property to allow a dependent animation to run on the UI thread.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Convert these animations into an independent version.</source>
          <target state="new">Convert these animations into an independent version.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example animate <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScaleTransform.ScaleX<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242946)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ScaleTransform.ScaleY<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242948)</ept> instead of the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Width<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR208751)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Height<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR208718)</ept> of an object.</source>
          <target state="new">For example animate <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScaleTransform.ScaleX<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242946)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ScaleTransform.ScaleY<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242948)</ept> instead of the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Width<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR208751)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Height<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR208718)</ept> of an object.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Don’t be afraid to scale objects like images and text.</source>
          <target state="new">Don’t be afraid to scale objects like images and text.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The framework applies bilinear scaling only while the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScaleTransform<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242940)</ept> is being animated.</source>
          <target state="new">The framework applies bilinear scaling only while the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ScaleTransform<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242940)</ept> is being animated.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The image/text will be rerasterized at the final size to ensure it’s always clear.</source>
          <target state="new">The image/text will be rerasterized at the final size to ensure it’s always clear.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Making per frame updates, which are effectively dependent animations.</source>
          <target state="new">Making per frame updates, which are effectively dependent animations.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An example of this is applying transformations in the handler of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositonTarget.Rendering<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR228127)</ept> event.</source>
          <target state="new">An example of this is applying transformations in the handler of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositonTarget.Rendering<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR228127)</ept> event.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Running any animation considered independent in an element with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CacheMode<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911-cachemode)</ept> property set to <bpt id="p3">**</bpt>BitmapCache<ept id="p3">**</ept>.</source>
          <target state="new">Running any animation considered independent in an element with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CacheMode<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911-cachemode)</ept> property set to <bpt id="p3">**</bpt>BitmapCache<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is considered dependent because the cache must be re-rasterized for each frame.</source>
          <target state="new">This is considered dependent because the cache must be re-rasterized for each frame.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Don't animate a WebView or MediaElement</source>
          <target state="new">Don't animate a WebView or MediaElement</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Web content within a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>WebView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227702)</ept> control is not directly rendered by the XAML framework and it requires extra work to be composed with the rest of the scene.</source>
          <target state="new">Web content within a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>WebView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227702)</ept> control is not directly rendered by the XAML framework and it requires extra work to be composed with the rest of the scene.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This extra work adds up when animating the control around the screen and can potentially introduce synchronization issues (for example, the HTML content might not move in sync with the rest of the XAML content on the page).</source>
          <target state="new">This extra work adds up when animating the control around the screen and can potentially introduce synchronization issues (for example, the HTML content might not move in sync with the rest of the XAML content on the page).</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you need to animate a <bpt id="p1">**</bpt>WebView<ept id="p1">**</ept> control, swap it with a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>WebViewBrush<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR227702brush)</ept> for the duration of the animation.</source>
          <target state="new">When you need to animate a <bpt id="p1">**</bpt>WebView<ept id="p1">**</ept> control, swap it with a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>WebViewBrush<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR227702brush)</ept> for the duration of the animation.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Animating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> is a similarly bad idea.</source>
          <target state="new">Animating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> is a similarly bad idea.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Beyond the performance detriment, it can cause tearing or other artifacts in the video content being played.</source>
          <target state="new">Beyond the performance detriment, it can cause tearing or other artifacts in the video content being played.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Use infinite animations sparingly</source>
          <target state="new">Use infinite animations sparingly</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Most animations execute for a specified amount of time, but setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Timeline.Duration<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243207)</ept> property to Forever allows an animation to run indefinitely.</source>
          <target state="new">Most animations execute for a specified amount of time, but setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Timeline.Duration<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243207)</ept> property to Forever allows an animation to run indefinitely.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>We recommend minimizing the use of infinite animations because they continually consume CPU resources and can prevent the CPU from going into a low power or idle state, causing it to run out of power more quickly.</source>
          <target state="new">We recommend minimizing the use of infinite animations because they continually consume CPU resources and can prevent the CPU from going into a low power or idle state, causing it to run out of power more quickly.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Adding a handler for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionTarget.Rendering<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR228127)</ept> is similar to running an infinite animation.</source>
          <target state="new">Adding a handler for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositionTarget.Rendering<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR228127)</ept> is similar to running an infinite animation.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Normally the UI thread is active only when there is work to do, but adding handler for this event forces it to run every frame.</source>
          <target state="new">Normally the UI thread is active only when there is work to do, but adding handler for this event forces it to run every frame.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remove the handler when there is no work to be done and reregister it when it’s needed again.</source>
          <target state="new">Remove the handler when there is no work to be done and reregister it when it’s needed again.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Use the animation library</source>
          <target state="new">Use the animation library</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Media.Animation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243232)</ept> namespace includes a library of high-performance, smooth animations that have a look and feel consistent with other Windows animations.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Media.Animation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243232)</ept> namespace includes a library of high-performance, smooth animations that have a look and feel consistent with other Windows animations.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The relevant classes have "Theme" in their name, and are described in <bpt id="p1">[</bpt>Animations overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187350)</ept>.</source>
          <target state="new">The relevant classes have "Theme" in their name, and are described in <bpt id="p1">[</bpt>Animations overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187350)</ept>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This library supports many common animation scenarios, such as animating the first view of the app and creating state and content transitions.</source>
          <target state="new">This library supports many common animation scenarios, such as animating the first view of the app and creating state and content transitions.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>We recommend using this animation library whenever possible to increase performance and consistency for UWP UI.</source>
          <target state="new">We recommend using this animation library whenever possible to increase performance and consistency for UWP UI.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The animation library can't animate all possible properties.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The animation library can't animate all possible properties.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For XAML scenarios where the animation library doesn't apply, see <bpt id="p1">[</bpt>Storyboarded animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187354)</ept>.</source>
          <target state="new">For XAML scenarios where the animation library doesn't apply, see <bpt id="p1">[</bpt>Storyboarded animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187354)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Animate CompositeTransform3D properties independently</source>
          <target state="new">Animate CompositeTransform3D properties independently</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can animate each property of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositeTransform3D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn914714)</ept> independently, so apply only the animations you need.</source>
          <target state="new">You can animate each property of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CompositeTransform3D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn914714)</ept> independently, so apply only the animations you need.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For examples and more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement.Transform3D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911-transform3d)</ept>.</source>
          <target state="new">For examples and more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement.Transform3D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911-transform3d)</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more info about animating transforms, see <bpt id="p1">[</bpt>Storyboarded animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187354)</ept> and <bpt id="p2">[</bpt>Key-frame and easing function animations<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt187352)</ept>.</source>
          <target state="new">For more info about animating transforms, see <bpt id="p1">[</bpt>Storyboarded animations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187354)</ept> and <bpt id="p2">[</bpt>Key-frame and easing function animations<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt187352)</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Optimize media resources</source>
          <target state="new">Optimize media resources</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Audio, video, and images are compelling forms of content that the majority of apps use.</source>
          <target state="new">Audio, video, and images are compelling forms of content that the majority of apps use.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>As media capture rates increase and content moves from standard definition to high definition the amount of resources need to store, decode, and play back this content increases.</source>
          <target state="new">As media capture rates increase and content moves from standard definition to high definition the amount of resources need to store, decode, and play back this content increases.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The XAML framework builds on the latest features added to the UWP media engines so apps get these improvements for free.</source>
          <target state="new">The XAML framework builds on the latest features added to the UWP media engines so apps get these improvements for free.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Here we explain some additional tricks that allow you to get the most out media in your UWP app.</source>
          <target state="new">Here we explain some additional tricks that allow you to get the most out media in your UWP app.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Release media streams</source>
          <target state="new">Release media streams</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Media files are some of the most common and expensive resources apps typically use.</source>
          <target state="new">Media files are some of the most common and expensive resources apps typically use.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Because media file resources can greatly increase the size of your app's memory footprint, you must remember to release the handle to media as soon as the app is finished using it.</source>
          <target state="new">Because media file resources can greatly increase the size of your app's memory footprint, you must remember to release the handle to media as soon as the app is finished using it.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, if your app working with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RandomAccessStream<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR241747)</ept> or an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IInputStream<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR241718)</ept> object, be sure to call the close method on the object when your app has finished using it, to release the underlying object.</source>
          <target state="new">For example, if your app working with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RandomAccessStream<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR241747)</ept> or an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IInputStream<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR241718)</ept> object, be sure to call the close method on the object when your app has finished using it, to release the underlying object.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Display full screen video playback when possible</source>
          <target state="new">Display full screen video playback when possible</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In UWP apps, always use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsFullWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926-isfullwindow)</ept> property on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MediaElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> to enable and disable full window rendering.</source>
          <target state="new">In UWP apps, always use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsFullWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926-isfullwindow)</ept> property on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MediaElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> to enable and disable full window rendering.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This insures system level optimizations are used during media playback.</source>
          <target state="new">This insures system level optimizations are used during media playback.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The XAML framework can optimize the display of video content when it is the only thing being rendered, resulting in an experience that uses less power and yields higher frame rates.</source>
          <target state="new">The XAML framework can optimize the display of video content when it is the only thing being rendered, resulting in an experience that uses less power and yields higher frame rates.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For most efficient media playback set the size of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> to be the width and height of the screen and don’t display other XAML elements</source>
          <target state="new">For most efficient media playback set the size of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> to be the width and height of the screen and don’t display other XAML elements</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>There are legitimate reasons to overlay XAML elements on a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> that takes up the full width and height of the screen, for example closed captions or momentary transport controls.</source>
          <target state="new">There are legitimate reasons to overlay XAML elements on a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> that takes up the full width and height of the screen, for example closed captions or momentary transport controls.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Making sure to hide these elements (eg.</source>
          <target state="new">Making sure to hide these elements (eg.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>setting Visibility=”Collapsed”) when they are not needed pops media playback back into its most efficient state.</source>
          <target state="new">setting Visibility=”Collapsed”) when they are not needed pops media playback back into its most efficient state.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Display deactivation and conserving power</source>
          <target state="new">Display deactivation and conserving power</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To prevent the display from be deactivating when user action is no longer detected, such as when an app is playing video, you can call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DisplayRequest.RequestActive<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR241818)</ept>.</source>
          <target state="new">To prevent the display from be deactivating when user action is no longer detected, such as when an app is playing video, you can call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DisplayRequest.RequestActive<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR241818)</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To conserve power and battery life, you should call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DisplayRequest.RequestRelease<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR241819)</ept> to release the display request as soon as it is no longer required.</source>
          <target state="new">To conserve power and battery life, you should call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DisplayRequest.RequestRelease<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR241819)</ept> to release the display request as soon as it is no longer required.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Here are some situations when you should release the display request:</source>
          <target state="new">Here are some situations when you should release the display request:</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Video playback is paused, for example by user action, buffering, or adjustment due to limited bandwidth.</source>
          <target state="new">Video playback is paused, for example by user action, buffering, or adjustment due to limited bandwidth.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Playback stops.</source>
          <target state="new">Playback stops.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For example, the video is done playing or the presentation is over.</source>
          <target state="new">For example, the video is done playing or the presentation is over.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A playback error has occurred.</source>
          <target state="new">A playback error has occurred.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example, network connectivity issues or a corrupted file.</source>
          <target state="new">For example, network connectivity issues or a corrupted file.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Put other elements to the side of embedded video</source>
          <target state="new">Put other elements to the side of embedded video</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Often apps offer an embedded view where video is played within a page.</source>
          <target state="new">Often apps offer an embedded view where video is played within a page.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Now you obviously lost the full screen optimization because the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> is not the size of the page and there are other XAML objects drawn.</source>
          <target state="new">Now you obviously lost the full screen optimization because the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> is not the size of the page and there are other XAML objects drawn.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Beware of unintentionally entering this mode by drawing a border around a <bpt id="p1">**</bpt>MediaElement<ept id="p1">**</ept>.</source>
          <target state="new">Beware of unintentionally entering this mode by drawing a border around a <bpt id="p1">**</bpt>MediaElement<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Don’t draw XAML elements on top of video when it’s in embedded mode.</source>
          <target state="new">Don’t draw XAML elements on top of video when it’s in embedded mode.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If you do, the framework is forced to do a little extra work to compose the scene.</source>
          <target state="new">If you do, the framework is forced to do a little extra work to compose the scene.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Placing transport controls below an embedded media element instead of on top of the video is a good example of optimizing for this situation.</source>
          <target state="new">Placing transport controls below an embedded media element instead of on top of the video is a good example of optimizing for this situation.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In this image, the red bar indicates a set of transport controls (play, pause, stop, etc.).</source>
          <target state="new">In this image, the red bar indicates a set of transport controls (play, pause, stop, etc.).</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>MediaElement with overlaying elements<ph id="ph1">](images/videowithoverlay.png)</ph> Don’t place these controls on top of media that is not full screen.</source>
          <target state="new">MediaElement with overlaying elements<ph id="ph1">](images/videowithoverlay.png)</ph> Don’t place these controls on top of media that is not full screen.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Instead place the transport controls somewhere outside of the area where the media is being rendered.</source>
          <target state="new">Instead place the transport controls somewhere outside of the area where the media is being rendered.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In the next image, the controls are placed below the media.</source>
          <target state="new">In the next image, the controls are placed below the media.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>MediaElement with neighboring elements</source>
          <target state="new">MediaElement with neighboring elements</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Delay setting the source for a MediaElement</source>
          <target state="new">Delay setting the source for a MediaElement</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Media engines are expensive objects and the XAML framework delays loading dlls and creating large objects as long as possible.</source>
          <target state="new">Media engines are expensive objects and the XAML framework delays loading dlls and creating large objects as long as possible.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> is forced to do this work after its source is set via the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Source<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242926-source)</ept> property or the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SetSource<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242926-setsource)</ept> method.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> is forced to do this work after its source is set via the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Source<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242926-source)</ept> property or the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SetSource<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242926-setsource)</ept> method.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Setting these when the user is really ready to play media delays the majority of the cost associated with the <bpt id="p1">**</bpt>MediaElement<ept id="p1">**</ept> as long as possible.</source>
          <target state="new">Setting these when the user is really ready to play media delays the majority of the cost associated with the <bpt id="p1">**</bpt>MediaElement<ept id="p1">**</ept> as long as possible.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Set MediaElement.PosterSource</source>
          <target state="new">Set MediaElement.PosterSource</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Setting <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement.PosterSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926-postersource)</ept> enables XAML to release some GPU resources that would have otherwise been used.</source>
          <target state="new">Setting <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement.PosterSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926-postersource)</ept> enables XAML to release some GPU resources that would have otherwise been used.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This API allows an app to use as little memory as possible.</source>
          <target state="new">This API allows an app to use as little memory as possible.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Improve media scrubbing</source>
          <target state="new">Improve media scrubbing</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Scrubbing is always a tough task for media platforms to make really responsive.</source>
          <target state="new">Scrubbing is always a tough task for media platforms to make really responsive.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Generally people accomplish this by changing the value of a Slider.</source>
          <target state="new">Generally people accomplish this by changing the value of a Slider.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Here are a couple tips on how to make this as efficient as possible:</source>
          <target state="new">Here are a couple tips on how to make this as efficient as possible:</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Either bind the value of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Slider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209614)</ept> to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MediaElement.Position<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242926-position)</ept> or update it based on a timer.</source>
          <target state="new">Either bind the value of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Slider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209614)</ept> to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MediaElement.Position<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242926-position)</ept> or update it based on a timer.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Don't do both.</source>
          <target state="new">Don't do both.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If you choose the latter, make sure to use a reasonable update frequency for your timer.</source>
          <target state="new">If you choose the latter, make sure to use a reasonable update frequency for your timer.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The XAML framework only updates <bpt id="p1">**</bpt>MediaElement.Position<ept id="p1">**</ept> only every 250 milliseconds during playback.</source>
          <target state="new">The XAML framework only updates <bpt id="p1">**</bpt>MediaElement.Position<ept id="p1">**</ept> only every 250 milliseconds during playback.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The size of the step frequency on the Slider must scale with the length of the video.</source>
          <target state="new">The size of the step frequency on the Slider must scale with the length of the video.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Subscribe to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911-pointerpressed)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PointerMoved<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911-pointermoved)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>PointerReleased<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR208911-pointerreleased)</ept> events on the slider to set the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>MediaElement.PlaybackRate<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242926-playbackrate)</ept> property to 0 when the user drags the thumb of the slider.</source>
          <target state="new">Subscribe to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911-pointerpressed)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PointerMoved<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911-pointermoved)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>PointerReleased<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR208911-pointerreleased)</ept> events on the slider to set the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>MediaElement.PlaybackRate<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR242926-playbackrate)</ept> property to 0 when the user drags the thumb of the slider.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911-pointerreleased)</ept> event handler, manually set the media position to the slider position value to achieve optimal thumb snapping while scrubbing.</source>
          <target state="new">In the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208911-pointerreleased)</ept> event handler, manually set the media position to the slider position value to achieve optimal thumb snapping while scrubbing.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Match video resolution to device resolution</source>
          <target state="new">Match video resolution to device resolution</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Decoding video takes a lot of memory and GPU cycles, so choose a video format close to the resolution it will be displayed at.</source>
          <target state="new">Decoding video takes a lot of memory and GPU cycles, so choose a video format close to the resolution it will be displayed at.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>There is no point in using the resources to decode 1080 video if it’s going to get scaled down to a much smaller size.</source>
          <target state="new">There is no point in using the resources to decode 1080 video if it’s going to get scaled down to a much smaller size.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Many apps don’t have the same video encoded at different resolutions; but if it is available, use an encoding that is close to the resolution at which it will be displayed.</source>
          <target state="new">Many apps don’t have the same video encoded at different resolutions; but if it is available, use an encoding that is close to the resolution at which it will be displayed.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Choose recommended formats</source>
          <target state="new">Choose recommended formats</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Media format selection can be a sensitive topic and is often driven by business decisions.</source>
          <target state="new">Media format selection can be a sensitive topic and is often driven by business decisions.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>From a UWP performance perspective, we recommend H.264 video as the primary video format and AAC and MP3 as the preferred audio formats.</source>
          <target state="new">From a UWP performance perspective, we recommend H.264 video as the primary video format and AAC and MP3 as the preferred audio formats.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For local file playback, MP4 is the preferred file container for video content.</source>
          <target state="new">For local file playback, MP4 is the preferred file container for video content.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>H.264 decoding is accelerated through most recent graphics hardware.</source>
          <target state="new">H.264 decoding is accelerated through most recent graphics hardware.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Also, although hardware acceleration for VC-1 decoding is broadly available, for a large set of graphics hardware on the market, the acceleration is limited in many cases to a partial acceleration level (or IDCT level), rather than a full-steam level hardware offload (i.e. VLD mode).</source>
          <target state="new">Also, although hardware acceleration for VC-1 decoding is broadly available, for a large set of graphics hardware on the market, the acceleration is limited in many cases to a partial acceleration level (or IDCT level), rather than a full-steam level hardware offload (i.e. VLD mode).</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If you have full control of the video content generation process, you must figure out how to keep a good balance between compression efficiency and GOP structure.</source>
          <target state="new">If you have full control of the video content generation process, you must figure out how to keep a good balance between compression efficiency and GOP structure.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Relatively smaller GOP size with B pictures can increase the performance in seeking or trick modes.</source>
          <target state="new">Relatively smaller GOP size with B pictures can increase the performance in seeking or trick modes.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When including short, low-latency audio effects, for example in games, use WAV files with uncompressed PCM data to reduce processing overhead that is typical for compressed audio formats.</source>
          <target state="new">When including short, low-latency audio effects, for example in games, use WAV files with uncompressed PCM data to reduce processing overhead that is typical for compressed audio formats.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Hardware audio offloading</source>
          <target state="new">Hardware audio offloading</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For hardware audio offload to be automatically applied, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement.AudioCategory<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926-audiocategory)</ept> must be set to <bpt id="p3">**</bpt>ForegroundOnlyMedia<ept id="p3">**</ept> or <bpt id="p4">**</bpt>BackgroundCapableMedia<ept id="p4">**</ept>.</source>
          <target state="new">For hardware audio offload to be automatically applied, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MediaElement.AudioCategory<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242926-audiocategory)</ept> must be set to <bpt id="p3">**</bpt>ForegroundOnlyMedia<ept id="p3">**</ept> or <bpt id="p4">**</bpt>BackgroundCapableMedia<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Hardware audio offload optimizes audio rendering which can improve functionality and battery life.</source>
          <target state="new">Hardware audio offload optimizes audio rendering which can improve functionality and battery life.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Optimize image resources</source>
          <target state="new">Optimize image resources</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Scale images to the appropriate size</source>
          <target state="new">Scale images to the appropriate size</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Images are captured at very high resolutions, which can lead to apps using more CPU when decoding the image data and more memory after it’s loaded from disk.</source>
          <target state="new">Images are captured at very high resolutions, which can lead to apps using more CPU when decoding the image data and more memory after it’s loaded from disk.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>But there’s no sense decoding and saving a high-resolution image in memory only to display it smaller than its native size.</source>
          <target state="new">But there’s no sense decoding and saving a high-resolution image in memory only to display it smaller than its native size.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Instead, create a version of the image at the exact size it will be drawn on-screen using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243243)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DecodePixelHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR243241)</ept> properties.</source>
          <target state="new">Instead, create a version of the image at the exact size it will be drawn on-screen using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243243)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DecodePixelHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR243241)</ept> properties.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Don't do this:</source>
          <target state="new">Don't do this:</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Instead, do this:</source>
          <target state="new">Instead, do this:</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The units for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243243)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DecodePixelHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR243241)</ept> are by default physical pixels.</source>
          <target state="new">The units for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243243)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DecodePixelHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR243241)</ept> are by default physical pixels.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelType<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn298545)</ept> property can be used to change this behavior: setting <bpt id="p3">**</bpt>DecodePixelType<ept id="p3">**</ept> to <bpt id="p4">**</bpt>Logical<ept id="p4">**</ept> results in the decode size automatically accounting for the system’s current scale factor, similar to other XAML content.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelType<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn298545)</ept> property can be used to change this behavior: setting <bpt id="p3">**</bpt>DecodePixelType<ept id="p3">**</ept> to <bpt id="p4">**</bpt>Logical<ept id="p4">**</ept> results in the decode size automatically accounting for the system’s current scale factor, similar to other XAML content.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It would therefore be generally appropriate to set <bpt id="p1">**</bpt>DecodePixelType<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Logical<ept id="p2">**</ept> if, for instance, you want <bpt id="p3">**</bpt>DecodePixelWidth<ept id="p3">**</ept> and <bpt id="p4">**</bpt>DecodePixelHeight<ept id="p4">**</ept> to match the Height and Width properties of the Image control the image will be displayed in.</source>
          <target state="new">It would therefore be generally appropriate to set <bpt id="p1">**</bpt>DecodePixelType<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Logical<ept id="p2">**</ept> if, for instance, you want <bpt id="p3">**</bpt>DecodePixelWidth<ept id="p3">**</ept> and <bpt id="p4">**</bpt>DecodePixelHeight<ept id="p4">**</ept> to match the Height and Width properties of the Image control the image will be displayed in.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>With the default behavior of using physical pixels, you must account for the system’s current scale factor yourself; and you should listen for scale change notifications in case the user changes their display preferences.</source>
          <target state="new">With the default behavior of using physical pixels, you must account for the system’s current scale factor yourself; and you should listen for scale change notifications in case the user changes their display preferences.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If DecodePixelWidth/Height are explicitly set larger than the image will be displayed on-screen then the app will unnecessarily use extra memory—up to 4 bytes per pixel—which quickly becomes expensive for large images.</source>
          <target state="new">If DecodePixelWidth/Height are explicitly set larger than the image will be displayed on-screen then the app will unnecessarily use extra memory—up to 4 bytes per pixel—which quickly becomes expensive for large images.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The image will also be scaled down using bilinear scaling which could cause it to appear blurry for large scale factors.</source>
          <target state="new">The image will also be scaled down using bilinear scaling which could cause it to appear blurry for large scale factors.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If DecodePixelWidth/DecodePixelHeight are explicitly set smaller than the image will be displayed on screen then it will be scaled up and could appear pixelated.</source>
          <target state="new">If DecodePixelWidth/DecodePixelHeight are explicitly set smaller than the image will be displayed on screen then it will be scaled up and could appear pixelated.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In some cases where an appropriate decode size cannot be determined ahead of time, you should defer to XAML’s automatic right-size-decoding which will make a best effort attempt to decode the image at the appropriate size if an explicit DecodePixelWidth/DecodePixelHeight is not specified.</source>
          <target state="new">In some cases where an appropriate decode size cannot be determined ahead of time, you should defer to XAML’s automatic right-size-decoding which will make a best effort attempt to decode the image at the appropriate size if an explicit DecodePixelWidth/DecodePixelHeight is not specified.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You should set an explicit decode size if you know the size of the image content ahead of time.</source>
          <target state="new">You should set an explicit decode size if you know the size of the image content ahead of time.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You should also in conjunction set <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelType<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn298545)</ept> to <bpt id="p3">**</bpt>Logical<ept id="p3">**</ept> if the supplied decode size is relative to other XAML element sizes.</source>
          <target state="new">You should also in conjunction set <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelType<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn298545)</ept> to <bpt id="p3">**</bpt>Logical<ept id="p3">**</ept> if the supplied decode size is relative to other XAML element sizes.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For example, if you explicitly set the content size with Image.Width and Image.Height, you could set DecodePixelType to DecodePixelType.Logical to use the same logical pixel dimensions as an Image control and then explicitly use BitmapImage.DecodePixelWidth and/or BitmapImage.DecodePixelHeight to control the size of the image to achieve potentially large memory savings.</source>
          <target state="new">For example, if you explicitly set the content size with Image.Width and Image.Height, you could set DecodePixelType to DecodePixelType.Logical to use the same logical pixel dimensions as an Image control and then explicitly use BitmapImage.DecodePixelWidth and/or BitmapImage.DecodePixelHeight to control the size of the image to achieve potentially large memory savings.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Note that Image.Stretch should be considered when determining the size of the decoded content.</source>
          <target state="new">Note that Image.Stretch should be considered when determining the size of the decoded content.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Right-sized decoding</source>
          <target state="new">Right-sized decoding</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In the event that you don't set an explicit decode size, XAML will make a best effort attempt to save memory by decoding an image to the exact size it will appear on-screen according to the containing page’s initial layout.</source>
          <target state="new">In the event that you don't set an explicit decode size, XAML will make a best effort attempt to save memory by decoding an image to the exact size it will appear on-screen according to the containing page’s initial layout.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>You're advised to write your application in such a way as to make use of this feature when possible.</source>
          <target state="new">You're advised to write your application in such a way as to make use of this feature when possible.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This feature will be disabled if any of the following conditions are met.</source>
          <target state="new">This feature will be disabled if any of the following conditions are met.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BitmapImage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235)</ept> is connected to the live XAML tree after setting the content with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSourceAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/JJ191522)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>UriSource<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR243235-urisource)</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BitmapImage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235)</ept> is connected to the live XAML tree after setting the content with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSourceAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/JJ191522)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>UriSource<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR243235-urisource)</ept>.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The image is decoded using synchronous decoding such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243255)</ept>.</source>
          <target state="new">The image is decoded using synchronous decoding such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243255)</ept>.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The image is hidden via setting <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Opacity<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208962)</ept> to 0 or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visibility<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911-visibility)</ept> to <bpt id="p5">**</bpt>Collapsed<ept id="p5">**</ept> on the host image element or brush or any parent element.</source>
          <target state="new">The image is hidden via setting <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Opacity<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208962)</ept> to 0 or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Visibility<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208911-visibility)</ept> to <bpt id="p5">**</bpt>Collapsed<ept id="p5">**</ept> on the host image element or brush or any parent element.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The image control or brush uses a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Stretch<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242968)</ept> of <bpt id="p3">**</bpt>None<ept id="p3">**</ept>.</source>
          <target state="new">The image control or brush uses a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Stretch<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242968)</ept> of <bpt id="p3">**</bpt>None<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The image is used as a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>NineGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242756)</ept>.</source>
          <target state="new">The image is used as a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>NineGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242756)</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>is set on the image element or on any parent element.</source>
          <target state="new">is set on the image element or on any parent element.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The image brush is non-rectangular (such as when applied to a shape or to text).</source>
          <target state="new">The image brush is non-rectangular (such as when applied to a shape or to text).</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In the above scenarios, setting an explicit decode size is the only way to achieve memory savings.</source>
          <target state="new">In the above scenarios, setting an explicit decode size is the only way to achieve memory savings.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You should always attach a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BitmapImage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235)</ept> to the live tree before setting the source.</source>
          <target state="new">You should always attach a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BitmapImage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235)</ept> to the live tree before setting the source.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Any time an image element or brush is specified in markup, this will automatically be the case.</source>
          <target state="new">Any time an image element or brush is specified in markup, this will automatically be the case.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Examples are provided below under the heading "Live tree examples".</source>
          <target state="new">Examples are provided below under the heading "Live tree examples".</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>You should always avoid using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243255)</ept> and instead use <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSourceAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/JJ191522)</ept> when setting a stream source.</source>
          <target state="new">You should always avoid using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243255)</ept> and instead use <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSourceAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/JJ191522)</ept> when setting a stream source.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>And it's a good idea to avoid hiding image content (either with zero opacity or with collapsed visibility) while waiting for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ImageOpened<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235-imageopened)</ept> event to be raised.</source>
          <target state="new">And it's a good idea to avoid hiding image content (either with zero opacity or with collapsed visibility) while waiting for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ImageOpened<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235-imageopened)</ept> event to be raised.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Doing this is a judgment call: you won't benefit from automatic right-sized decoding if it's done.</source>
          <target state="new">Doing this is a judgment call: you won't benefit from automatic right-sized decoding if it's done.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If your app must hide image content initially then it should also set the decode size explicitly if possible.</source>
          <target state="new">If your app must hide image content initially then it should also set the decode size explicitly if possible.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Live tree examples</source>
          <target state="new">Live tree examples</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Example 1 (good)—Uniform Resource Identifier (URI) specified in markup.</source>
          <target state="new">Example 1 (good)—Uniform Resource Identifier (URI) specified in markup.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Example 2 markup—URI specified in code-behind.</source>
          <target state="new">Example 2 markup—URI specified in code-behind.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Example 2 code-behind (good)—connecting the BitmapImage to the tree before setting its UriSource.</source>
          <target state="new">Example 2 code-behind (good)—connecting the BitmapImage to the tree before setting its UriSource.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Example 2 code-behind (bad)—setting the the BitmapImage's UriSource before connecting it to the tree.</source>
          <target state="new">Example 2 code-behind (bad)—setting the the BitmapImage's UriSource before connecting it to the tree.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Caching optimizations</source>
          <target state="new">Caching optimizations</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Caching optimizations are in effect for images that use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UriSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235-urisource)</ept> to load content from an app package or from the web.</source>
          <target state="new">Caching optimizations are in effect for images that use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UriSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235-urisource)</ept> to load content from an app package or from the web.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The URI is used to uniquely identify the underlying content, and internally the XAML framework will not download or decode the content multiple times.</source>
          <target state="new">The URI is used to uniquely identify the underlying content, and internally the XAML framework will not download or decode the content multiple times.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Instead, it will use the cached software or hardware resources to display the content multiple times.</source>
          <target state="new">Instead, it will use the cached software or hardware resources to display the content multiple times.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The exception to this optimization is if the image is displayed multiple times at different resolutions (which can be specified explicitly or through automatic right-sized decoding).</source>
          <target state="new">The exception to this optimization is if the image is displayed multiple times at different resolutions (which can be specified explicitly or through automatic right-sized decoding).</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Each cache entry also stores the resolution of the image, and if XAML cannot find an image with a source URI that matches the required resolution then it will decode a new version at that size.</source>
          <target state="new">Each cache entry also stores the resolution of the image, and if XAML cannot find an image with a source URI that matches the required resolution then it will decode a new version at that size.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>It will not, however, download the encoded image data again.</source>
          <target state="new">It will not, however, download the encoded image data again.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Consequently, you should embrace using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UriSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235-urisource)</ept> when loading images from an app package, and avoid using a file stream and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSourceAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/JJ191522)</ept> when it's not required.</source>
          <target state="new">Consequently, you should embrace using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UriSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243235-urisource)</ept> when loading images from an app package, and avoid using a file stream and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetSourceAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/JJ191522)</ept> when it's not required.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Images in virtualized panels (ListView, for instance)</source>
          <target state="new">Images in virtualized panels (ListView, for instance)</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If an image is removed from the tree—because the app explicitly removed it, or because it’s in a modern virtualized panel and was implicitly removed when scrolled out of view—then XAML will optimize memory usage by releasing the hardware resources for the image since they are no longer required.</source>
          <target state="new">If an image is removed from the tree—because the app explicitly removed it, or because it’s in a modern virtualized panel and was implicitly removed when scrolled out of view—then XAML will optimize memory usage by releasing the hardware resources for the image since they are no longer required.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The memory is not released immediately, but rather is released during the frame update that occurs after one second of the image element no longer being in the tree.</source>
          <target state="new">The memory is not released immediately, but rather is released during the frame update that occurs after one second of the image element no longer being in the tree.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Consequently, you should strive to use modern virtualized panels to host lists of image content.</source>
          <target state="new">Consequently, you should strive to use modern virtualized panels to host lists of image content.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Software-rasterized images</source>
          <target state="new">Software-rasterized images</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>When an image is used for a non-rectangular brush or for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>NineGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242756)</ept>, the image will use a software rasterization path, which will not scale images at all.</source>
          <target state="new">When an image is used for a non-rectangular brush or for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>NineGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242756)</ept>, the image will use a software rasterization path, which will not scale images at all.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Additionally, it must store a copy of the image in both software and hardware memory.</source>
          <target state="new">Additionally, it must store a copy of the image in both software and hardware memory.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>For instance, if an image is used as a brush for an ellipse then the potentially large full image will be stored twice internally.</source>
          <target state="new">For instance, if an image is used as a brush for an ellipse then the potentially large full image will be stored twice internally.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>When using <bpt id="p1">**</bpt>NineGrid<ept id="p1">**</ept> or a non-rectangular brush, then, your app should pre-scale its images to approximately the size they will be rendered at.</source>
          <target state="new">When using <bpt id="p1">**</bpt>NineGrid<ept id="p1">**</ept> or a non-rectangular brush, then, your app should pre-scale its images to approximately the size they will be rendered at.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Background thread image-loading</source>
          <target state="new">Background thread image-loading</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>XAML has an internal optimization that allows it to decode the contents of an image asynchronously to a surface in hardware memory without requiring an intermediate surface in software memory.</source>
          <target state="new">XAML has an internal optimization that allows it to decode the contents of an image asynchronously to a surface in hardware memory without requiring an intermediate surface in software memory.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This reduces peak memory usage and rendering latency.</source>
          <target state="new">This reduces peak memory usage and rendering latency.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This feature will be disabled if any of the following conditions are met.</source>
          <target state="new">This feature will be disabled if any of the following conditions are met.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The image is used as a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>NineGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242756)</ept>.</source>
          <target state="new">The image is used as a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>NineGrid<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242756)</ept>.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>is set on the image element or on any parent element.</source>
          <target state="new">is set on the image element or on any parent element.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The image brush is non-rectangular (such as when applied to a shape or to text).</source>
          <target state="new">The image brush is non-rectangular (such as when applied to a shape or to text).</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>SoftwareBitmapSource</source>
          <target state="new">SoftwareBitmapSource</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SoftwareBitmapSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn997854)</ept> class exchanges interoperable uncompressed images between different WinRT namespaces such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>BitmapDecoder<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR226176)</ept>, camera APIs, and XAML.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SoftwareBitmapSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn997854)</ept> class exchanges interoperable uncompressed images between different WinRT namespaces such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>BitmapDecoder<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR226176)</ept>, camera APIs, and XAML.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This class obviates an extra copy that would typically be necessary with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>WriteableBitmap<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243259)</ept>, and that helps reduce peak memory and source-to-screen latency.</source>
          <target state="new">This class obviates an extra copy that would typically be necessary with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>WriteableBitmap<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243259)</ept>, and that helps reduce peak memory and source-to-screen latency.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SoftwareBitmap<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn887358)</ept> that supplies source information can also be configured to use a custom <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IWICBitmap<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/Ee719675)</ept> to provide a reloadable backing store that allows the app to re-map memory as it sees fit.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SoftwareBitmap<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn887358)</ept> that supplies source information can also be configured to use a custom <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IWICBitmap<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/Ee719675)</ept> to provide a reloadable backing store that allows the app to re-map memory as it sees fit.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>This is an advanced C++ use case.</source>
          <target state="new">This is an advanced C++ use case.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Your app should use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SoftwareBitmap<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn887358)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SoftwareBitmapSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn997854)</ept> to interoperate with other WinRT APIs that produce and consume images.</source>
          <target state="new">Your app should use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SoftwareBitmap<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn887358)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SoftwareBitmapSource<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Dn997854)</ept> to interoperate with other WinRT APIs that produce and consume images.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>And your app should use <bpt id="p1">**</bpt>SoftwareBitmapSource<ept id="p1">**</ept> when loading uncompressed image data instead of using <bpt id="p2">[</bpt><bpt id="p3">**</bpt>WriteableBitmap<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR243259)</ept>.</source>
          <target state="new">And your app should use <bpt id="p1">**</bpt>SoftwareBitmapSource<ept id="p1">**</ept> when loading uncompressed image data instead of using <bpt id="p2">[</bpt><bpt id="p3">**</bpt>WriteableBitmap<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR243259)</ept>.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Use GetThumbnailAsync for thumbnails</source>
          <target state="new">Use GetThumbnailAsync for thumbnails</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>One use case for scaling images is creating thumbnails.</source>
          <target state="new">One use case for scaling images is creating thumbnails.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Although you could use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243243)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DecodePixelHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR243241)</ept> to provide small versions of images, UWP provides even more efficient APIs for retrieving thumbnails.</source>
          <target state="new">Although you could use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DecodePixelWidth<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR243243)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DecodePixelHeight<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR243241)</ept> to provide small versions of images, UWP provides even more efficient APIs for retrieving thumbnails.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetThumbnailAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227210)</ept> provides the thumbnails for images that have the file system already cached.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetThumbnailAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227210)</ept> provides the thumbnails for images that have the file system already cached.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This provides even better performance than the XAML APIs because the image doesn’t need to be opened or decoded.</source>
          <target state="new">This provides even better performance than the XAML APIs because the image doesn’t need to be opened or decoded.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Decode images once</source>
          <target state="new">Decode images once</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>To prevent images from being decoded more than once, assign the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image.Source<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242760)</ept> property from an Uri rather than using memory streams.</source>
          <target state="new">To prevent images from being decoded more than once, assign the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image.Source<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242760)</ept> property from an Uri rather than using memory streams.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The XAML framework can associate the same Uri in multiple places with one decoded image, but it cannot do the same for multiple memory streams that contain the same data and creates a different decoded image for each memory stream.</source>
          <target state="new">The XAML framework can associate the same Uri in multiple places with one decoded image, but it cannot do the same for multiple memory streams that contain the same data and creates a different decoded image for each memory stream.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>