<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\moving-from-egl-to-dxgi.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9da6b1524e077c4ba9eabe1aa8c71f0d1908c97</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compare EGL code to DXGI and Direct3D</source>
          <target state="new">Compare EGL code to DXGI and Direct3D</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The DirectX Graphics Interface (DXGI) and several Direct3D APIs serve the same role as EGL.</source>
          <target state="new">The DirectX Graphics Interface (DXGI) and several Direct3D APIs serve the same role as EGL.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic helps you understand DXGI and Direct3D 11 from the perspective of EGL.</source>
          <target state="new">This topic helps you understand DXGI and Direct3D 11 from the perspective of EGL.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Compare EGL code to DXGI and Direct3D</source>
          <target state="new">Compare EGL code to DXGI and Direct3D</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ID3D11Device1</source>
          <target state="new">ID3D11Device1</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>ID3D11DeviceContext1</source>
          <target state="new">ID3D11DeviceContext1</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>CoreWindow</source>
          <target state="new">CoreWindow</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The DirectX Graphics Interface (DXGI) and several Direct3D APIs serve the same role as EGL.</source>
          <target state="new">The DirectX Graphics Interface (DXGI) and several Direct3D APIs serve the same role as EGL.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This topic helps you understand DXGI and Direct3D 11 from the perspective of EGL.</source>
          <target state="new">This topic helps you understand DXGI and Direct3D 11 from the perspective of EGL.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>DXGI and Direct3D, like EGL, provide methods to configure graphics resources, obtain a rendering context for your shaders to draw into, and to display the results in a window.</source>
          <target state="new">DXGI and Direct3D, like EGL, provide methods to configure graphics resources, obtain a rendering context for your shaders to draw into, and to display the results in a window.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, DXGI and Direct3D have quite a few more options, and require more effort to set up correctly when porting from EGL.</source>
          <target state="new">However, DXGI and Direct3D have quite a few more options, and require more effort to set up correctly when porting from EGL.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   This guidance is based off the Khronos Group's open specification for EGL 1.4, found here: <bpt id="p2">[</bpt>Khronos Native Platform Graphics Interface (EGL Version 1.4 - April 6, 2011) <ph id="ph1">\[</ph>PDF<ph id="ph2">\]</ph><ept id="p2">](http://www.khronos.org/registry/egl/specs/eglspec.1.4.20110406.pdf)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   This guidance is based off the Khronos Group's open specification for EGL 1.4, found here: <bpt id="p2">[</bpt>Khronos Native Platform Graphics Interface (EGL Version 1.4 - April 6, 2011) <ph id="ph1">\[</ph>PDF<ph id="ph2">\]</ph><ept id="p2">](http://www.khronos.org/registry/egl/specs/eglspec.1.4.20110406.pdf)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Differences in syntax specific to other platforms and development languages are not covered in this guidance.</source>
          <target state="new">Differences in syntax specific to other platforms and development languages are not covered in this guidance.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How does DXGI and Direct3D compare?</source>
          <target state="new">How does DXGI and Direct3D compare?</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The big advantage of EGL over DXGI and Direct3D is that it is relatively simple to start drawing to a window surface.</source>
          <target state="new">The big advantage of EGL over DXGI and Direct3D is that it is relatively simple to start drawing to a window surface.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is because OpenGL ES 2.0—and therefore EGL—is a specification implemented by multiple platform providers, whereas DXGI and Direct3D are a single reference that hardware vendor drivers must conform to.</source>
          <target state="new">This is because OpenGL ES 2.0—and therefore EGL—is a specification implemented by multiple platform providers, whereas DXGI and Direct3D are a single reference that hardware vendor drivers must conform to.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This means that Microsoft must implement a set of APIs that enable the broadest possible set of vendor features, rather than focusing on a functional subset offered by a specific vendor, or by combining vendor-specific setup commands into simpler APIs.</source>
          <target state="new">This means that Microsoft must implement a set of APIs that enable the broadest possible set of vendor features, rather than focusing on a functional subset offered by a specific vendor, or by combining vendor-specific setup commands into simpler APIs.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>On the other hand, Direct3D provides a single set of APIs that cover a very broad range of graphics hardware platforms and feature levels, and offer more flexibility for developers experienced with the platform.</source>
          <target state="new">On the other hand, Direct3D provides a single set of APIs that cover a very broad range of graphics hardware platforms and feature levels, and offer more flexibility for developers experienced with the platform.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Like EGL, DXGI and Direct3D provide APIs for the following behaviors:</source>
          <target state="new">Like EGL, DXGI and Direct3D provide APIs for the following behaviors:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Obtaining, and reading and writing to a frame buffer (called a "swap chain" in DXGI).</source>
          <target state="new">Obtaining, and reading and writing to a frame buffer (called a "swap chain" in DXGI).</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Associating the frame buffer with a UI window.</source>
          <target state="new">Associating the frame buffer with a UI window.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Obtaining and configuring rendering contexts in which to draw.</source>
          <target state="new">Obtaining and configuring rendering contexts in which to draw.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Issuing commands to the graphics pipeline for a specific rendering context.</source>
          <target state="new">Issuing commands to the graphics pipeline for a specific rendering context.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creating and managing shader resources, and associating them with a rendering content.</source>
          <target state="new">Creating and managing shader resources, and associating them with a rendering content.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Rendering to specific render targets (such as textures).</source>
          <target state="new">Rendering to specific render targets (such as textures).</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Updating the window's display surface with the results of rendering with the graphics resources.</source>
          <target state="new">Updating the window's display surface with the results of rendering with the graphics resources.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To see the basic Direct3D process for configuring the graphics pipeline, check out the DirectX 11 App (Universal Windows) template in Microsoft Visual Studio 2015.</source>
          <target state="new">To see the basic Direct3D process for configuring the graphics pipeline, check out the DirectX 11 App (Universal Windows) template in Microsoft Visual Studio 2015.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The base rendering class in it provides a good baseline for setting up the Direct3D 11 graphics infrastructure and configuring basic resources on it, as well as supporting Universal Windows Platform (UWP) app features such as screen rotation.</source>
          <target state="new">The base rendering class in it provides a good baseline for setting up the Direct3D 11 graphics infrastructure and configuring basic resources on it, as well as supporting Universal Windows Platform (UWP) app features such as screen rotation.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>EGL has very few APIs relative to Direct3D 11, and navigating the latter can be a challenge if you aren't familiar with the naming and jargon particular to the platform.</source>
          <target state="new">EGL has very few APIs relative to Direct3D 11, and navigating the latter can be a challenge if you aren't familiar with the naming and jargon particular to the platform.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Here's a simple overview to help you get oriented.</source>
          <target state="new">Here's a simple overview to help you get oriented.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>First, review the basic EGL object to Direct3D interface mapping:</source>
          <target state="new">First, review the basic EGL object to Direct3D interface mapping:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>EGL abstraction</source>
          <target state="new">EGL abstraction</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Similar Direct3D representation</source>
          <target state="new">Similar Direct3D representation</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>EGLDisplay</source>
          <target state="new">EGLDisplay</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In Direct3D (for UWP apps), the display handle is obtained through the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> API (or the <bpt id="p3">**</bpt>ICoreWindowInterop<ept id="p3">**</ept> interface that exposes the HWND).</source>
          <target state="new">In Direct3D (for UWP apps), the display handle is obtained through the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> API (or the <bpt id="p3">**</bpt>ICoreWindowInterop<ept id="p3">**</ept> interface that exposes the HWND).</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The adapter and hardware configuration are set with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIAdapter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174523)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIDevice1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404543)</ept> COM interfaces, respectively.</source>
          <target state="new">The adapter and hardware configuration are set with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIAdapter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174523)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIDevice1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404543)</ept> COM interfaces, respectively.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>EGLSurface</source>
          <target state="new">EGLSurface</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In Direct3D, the buffers and other window resources (visible or offscreen) are created and configured by specific DXGI interfaces, including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIFactory2<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</ept> (a factory pattern implementation used to acquire DXGI resources such as the<bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGISwapChain1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> (display buffers).</source>
          <target state="new">In Direct3D, the buffers and other window resources (visible or offscreen) are created and configured by specific DXGI interfaces, including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIFactory2<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</ept> (a factory pattern implementation used to acquire DXGI resources such as the<bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGISwapChain1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> (display buffers).</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> that represents the graphics device and its resources, is acquired with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>D3D11Device::CreateDevice<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> that represents the graphics device and its resources, is acquired with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>D3D11Device::CreateDevice<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For render targets, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> interface.</source>
          <target state="new">For render targets, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> interface.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>EGLContext</source>
          <target state="new">EGLContext</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In Direct3D, you configure and issue commands to the graphics pipeline with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> interface.</source>
          <target state="new">In Direct3D, you configure and issue commands to the graphics pipeline with the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> interface.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>EGLConfig</source>
          <target state="new">EGLConfig</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In Direct3D 11, you create and configure graphics resources such as a buffers, textures, stencils and shaders with methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> interface.</source>
          <target state="new">In Direct3D 11, you create and configure graphics resources such as a buffers, textures, stencils and shaders with methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> interface.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now, here's the most basic process for setting up a simple graphics display, resources and context in DXGI and Direct3D for a UWP app.</source>
          <target state="new">Now, here's the most basic process for setting up a simple graphics display, resources and context in DXGI and Direct3D for a UWP app.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Obtain a handle to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object for the app's core UI thread by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::GetForCurrentThread<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept>.</source>
          <target state="new">Obtain a handle to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object for the app's core UI thread by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::GetForCurrentThread<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For UWP apps, acquire a swap chain from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIAdapter2<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404537)</ept> with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIFactory2::CreateSwapChainForCoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</ept>, and pass it the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>CoreWindow<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> reference you obtained in step 1.</source>
          <target state="new">For UWP apps, acquire a swap chain from the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIAdapter2<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404537)</ept> with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIFactory2::CreateSwapChainForCoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</ept>, and pass it the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>CoreWindow<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> reference you obtained in step 1.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You will get an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> instance in return.</source>
          <target state="new">You will get an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> instance in return.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Scope it to your renderer object and its rendering thread.</source>
          <target state="new">Scope it to your renderer object and its rendering thread.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Obtain <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> instances by calling the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>D3D11Device::CreateDevice<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> method.</source>
          <target state="new">Obtain <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> instances by calling the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>D3D11Device::CreateDevice<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> method.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Scope them to your renderer object as well.</source>
          <target state="new">Scope them to your renderer object as well.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Create shaders, textures, and other resources using methods on your renderer's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> object.</source>
          <target state="new">Create shaders, textures, and other resources using methods on your renderer's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> object.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Define buffers, run shaders and manage the pipeline stages using methods on your renderer's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> object.</source>
          <target state="new">Define buffers, run shaders and manage the pipeline stages using methods on your renderer's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> object.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When the pipeline has executed and a frame is drawn to the back buffer, present it to the screen with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>.</source>
          <target state="new">When the pipeline has executed and a frame is drawn to the back buffer, present it to the screen with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To examine this process in more detail, review <bpt id="p1">[</bpt>Getting started with DirectX graphics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh309467)</ept>.</source>
          <target state="new">To examine this process in more detail, review <bpt id="p1">[</bpt>Getting started with DirectX graphics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh309467)</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The rest of this article covers many of the common steps for basic graphics pipeline setup and management.</source>
          <target state="new">The rest of this article covers many of the common steps for basic graphics pipeline setup and management.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Windows Desktop apps have different APIs for obtaining a Direct3D swap chain, such as <bpt id="p2">[</bpt><bpt id="p3">**</bpt>D3D11Device::CreateDeviceAndSwapChain<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476083)</ept>, and do not use a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>CoreWindow<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Windows Desktop apps have different APIs for obtaining a Direct3D swap chain, such as <bpt id="p2">[</bpt><bpt id="p3">**</bpt>D3D11Device::CreateDeviceAndSwapChain<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476083)</ept>, and do not use a <bpt id="p4">[</bpt><bpt id="p5">**</bpt>CoreWindow<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Obtaining a window for display</source>
          <target state="new">Obtaining a window for display</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In this example, eglGetDisplay is passed an HWND for a window resource specific to the Microsoft Windows platform.</source>
          <target state="new">In this example, eglGetDisplay is passed an HWND for a window resource specific to the Microsoft Windows platform.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Other platforms, such as Apple's iOS (Cocoa) and Google's Android, have different handles or references to window resources, and may have different calling syntax altogether.</source>
          <target state="new">Other platforms, such as Apple's iOS (Cocoa) and Google's Android, have different handles or references to window resources, and may have different calling syntax altogether.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>After obtaining a display, you initialize it, set the preferred configuration, and create a surface with a back buffer you can draw into.</source>
          <target state="new">After obtaining a display, you initialize it, set the preferred configuration, and create a surface with a back buffer you can draw into.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Obtaining a display and configuring it with EGL..</source>
          <target state="new">Obtaining a display and configuring it with EGL..</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In Direct3D, a UWP app's main window is represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object, which can be obtained from the app object by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::GetForCurrentThread<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept> as part of the initialization process of the "view provider" you construct for Direct3D.</source>
          <target state="new">In Direct3D, a UWP app's main window is represented by the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object, which can be obtained from the app object by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::GetForCurrentThread<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept> as part of the initialization process of the "view provider" you construct for Direct3D.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>(If you are using Direct3D-XAML interop, you use the XAML framework's view provider.) The process for creating a Direct3D view provider is covered in <bpt id="p1">[</bpt>How to set up your app to display a view<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh465077)</ept>.</source>
          <target state="new">(If you are using Direct3D-XAML interop, you use the XAML framework's view provider.) The process for creating a Direct3D view provider is covered in <bpt id="p1">[</bpt>How to set up your app to display a view<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh465077)</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Obtaining a CoreWindow for Direct3D.</source>
          <target state="new">Obtaining a CoreWindow for Direct3D.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Once the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> reference is obtained, the window must be activated, which executes the <bpt id="p3">**</bpt>Run<ept id="p3">**</ept> method of your main object and begins window event processing.</source>
          <target state="new">Once the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> reference is obtained, the window must be activated, which executes the <bpt id="p3">**</bpt>Run<ept id="p3">**</ept> method of your main object and begins window event processing.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>After that, create an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> and an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>, and use them to get the underlying <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IDXGIDevice1<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff471331)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>IDXGIAdapter<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/desktop/bb174523)</ept> so you can obtain an <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IDXGIFactory2<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</ept> object to create a swap chain resource based on your <bpt id="p11">[</bpt><bpt id="p12">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>DESC1<ept id="p12">**</ept><ept id="p11">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept> configuration.</source>
          <target state="new">After that, create an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> and an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>, and use them to get the underlying <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IDXGIDevice1<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff471331)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>IDXGIAdapter<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/desktop/bb174523)</ept> so you can obtain an <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IDXGIFactory2<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</ept> object to create a swap chain resource based on your <bpt id="p11">[</bpt><bpt id="p12">**</bpt>DXGI<ph id="ph1">\_</ph>SWAP<ph id="ph2">\_</ph>CHAIN<ph id="ph3">\_</ph>DESC1<ept id="p12">**</ept><ept id="p11">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept> configuration.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Configuring and setting the DXGI swap chain on the CoreWindow for Direct3D.</source>
          <target state="new">Configuring and setting the DXGI swap chain on the CoreWindow for Direct3D.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept> method after you prepare a frame in order to display it.</source>
          <target state="new">Call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept> method after you prepare a frame in order to display it.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Note that in Direct3D 11, there isn't an abstraction identical to EGLSurface.</source>
          <target state="new">Note that in Direct3D 11, there isn't an abstraction identical to EGLSurface.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>(There is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471343)</ept>, but it is used differently.) The closest conceptual approximation is the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11RenderTargetView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> object that we use to assign a texture (<bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11Texture2D<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept>) as the back buffer that our shader pipeline will draw into.</source>
          <target state="new">(There is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471343)</ept>, but it is used differently.) The closest conceptual approximation is the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11RenderTargetView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> object that we use to assign a texture (<bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11Texture2D<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept>) as the back buffer that our shader pipeline will draw into.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Setting up the back buffer for the swap chain in Direct3D 11</source>
          <target state="new">Setting up the back buffer for the swap chain in Direct3D 11</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A good practice is to call this code whenever the window is created or changes size.</source>
          <target state="new">A good practice is to call this code whenever the window is created or changes size.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>During rendering, set the render target view with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> before setting up any other subresources like vertex buffers or shaders.</source>
          <target state="new">During rendering, set the render target view with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> before setting up any other subresources like vertex buffers or shaders.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creating a rendering context</source>
          <target state="new">Creating a rendering context</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In EGL 1.4, a "display" represents a set of window resources.</source>
          <target state="new">In EGL 1.4, a "display" represents a set of window resources.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Typically, you configure a "surface" for the display by supplying a set of attributes to the display object and getting a surface in return.</source>
          <target state="new">Typically, you configure a "surface" for the display by supplying a set of attributes to the display object and getting a surface in return.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You create a context for displaying the contents of the surface by creating that context and binding it to the surface and the display.</source>
          <target state="new">You create a context for displaying the contents of the surface by creating that context and binding it to the surface and the display.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The call flow usually looks similar to this:</source>
          <target state="new">The call flow usually looks similar to this:</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Call eglGetDisplay with the handle to a display or window resource and obtain a display object.</source>
          <target state="new">Call eglGetDisplay with the handle to a display or window resource and obtain a display object.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Initialize the display with eglInitialize.</source>
          <target state="new">Initialize the display with eglInitialize.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Obtain the available display configuration and select one with eglGetConfigs and eglChooseConfig.</source>
          <target state="new">Obtain the available display configuration and select one with eglGetConfigs and eglChooseConfig.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Create a window surface with eglCreateWindowSurface.</source>
          <target state="new">Create a window surface with eglCreateWindowSurface.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Create a display context for drawing with eglCreateContext.</source>
          <target state="new">Create a display context for drawing with eglCreateContext.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Bind the display context to the display and the surface with eglMakeCurrent.</source>
          <target state="new">Bind the display context to the display and the surface with eglMakeCurrent.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>n the previous section, we created the EGLDisplay and the EGLSurface, and now we use the EGLDisplay to create a context and associate that context with the display, using the configured EGLSurface to parameterize the output.</source>
          <target state="new">n the previous section, we created the EGLDisplay and the EGLSurface, and now we use the EGLDisplay to create a context and associate that context with the display, using the configured EGLSurface to parameterize the output.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Obtaining a rendering context with EGL 1.4</source>
          <target state="new">Obtaining a rendering context with EGL 1.4</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A rendering context in Direct3D 11 is represented by an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> object, which represents the adapter and allows you to create Direct3D resources such as buffers and shaders; and by the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> object, which allows you to manage the graphics pipeline and execute the shaders.</source>
          <target state="new">A rendering context in Direct3D 11 is represented by an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> object, which represents the adapter and allows you to create Direct3D resources such as buffers and shaders; and by the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> object, which allows you to manage the graphics pipeline and execute the shaders.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Be aware of Direct3D feature levels!</source>
          <target state="new">Be aware of Direct3D feature levels!</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>These are used to support older Direct3D hardware platforms, from DirectX 9.1 to DirectX 11.</source>
          <target state="new">These are used to support older Direct3D hardware platforms, from DirectX 9.1 to DirectX 11.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Many platforms that use low power graphics hardware, such as tablets, only have access to DirectX 9.1 features, and older supported graphics hardware could be from 9.1 through 11.</source>
          <target state="new">Many platforms that use low power graphics hardware, such as tablets, only have access to DirectX 9.1 features, and older supported graphics hardware could be from 9.1 through 11.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Creating a rendering context with DXGI and Direct3D</source>
          <target state="new">Creating a rendering context with DXGI and Direct3D</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Drawing into a texture or pixmap resource</source>
          <target state="new">Drawing into a texture or pixmap resource</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To draw into a texture with OpenGL ES 2.0, configure a pixel buffer, or PBuffer.</source>
          <target state="new">To draw into a texture with OpenGL ES 2.0, configure a pixel buffer, or PBuffer.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>After you successfully a configure and create an EGLSurface for it you can supply it with a rendering context and execute the shader pipeline to draw into the texture.</source>
          <target state="new">After you successfully a configure and create an EGLSurface for it you can supply it with a rendering context and execute the shader pipeline to draw into the texture.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Draw into a pixel buffer with OpenGL ES 2.0</source>
          <target state="new">Draw into a pixel buffer with OpenGL ES 2.0</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In Direct3D 11, you create an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Texture2D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept> resource and makei it a render target.</source>
          <target state="new">In Direct3D 11, you create an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Texture2D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept> resource and makei it a render target.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Configure the render target using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11<ph id="ph1">\_</ph>RENDER<ph id="ph2">\_</ph>TARGET<ph id="ph3">\_</ph>VIEW<ph id="ph4">\_</ph>DESC<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476201)</ept>.</source>
          <target state="new">Configure the render target using <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11<ph id="ph1">\_</ph>RENDER<ph id="ph2">\_</ph>TARGET<ph id="ph3">\_</ph>VIEW<ph id="ph4">\_</ph>DESC<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476201)</ept>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::Draw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476407)</ept> method(or a similar Draw<ph id="ph1">\*</ph> operation on the device context) using this render target, the results are drawn into a texture.</source>
          <target state="new">When you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::Draw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476407)</ept> method(or a similar Draw<ph id="ph1">\*</ph> operation on the device context) using this render target, the results are drawn into a texture.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Draw into a texture with Direct3D 11</source>
          <target state="new">Draw into a texture with Direct3D 11</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This texture can be passed to a shader if it is associated with an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11ShaderResourceView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476628)</ept>.</source>
          <target state="new">This texture can be passed to a shader if it is associated with an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11ShaderResourceView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476628)</ept>.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Drawing to the screen</source>
          <target state="new">Drawing to the screen</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Once you have used your EGLContext to configure your buffers and update your data, you run the shaders bound to it and draw the results to the back buffer with glDrawElements.</source>
          <target state="new">Once you have used your EGLContext to configure your buffers and update your data, you run the shaders bound to it and draw the results to the back buffer with glDrawElements.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You display the back buffer by calling eglSwapBuffers.</source>
          <target state="new">You display the back buffer by calling eglSwapBuffers.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Open GL ES 2.0: Drawing to the screen.</source>
          <target state="new">Open GL ES 2.0: Drawing to the screen.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In Direct3D 11, you configure your buffers and bind shaders with your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>.</source>
          <target state="new">In Direct3D 11, you configure your buffers and bind shaders with your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Then you call one of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::Draw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476407)</ept><ph id="ph1">\*</ph> methods to run the shaders and draw the results to a render target configured as the back buffer for the swap chain.</source>
          <target state="new">Then you call one of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::Draw<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476407)</ept><ph id="ph1">\*</ph> methods to run the shaders and draw the results to a render target configured as the back buffer for the swap chain.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>After that, you simply present the back buffer to the display by calling <bpt id="p1">**</bpt>IDXGISwapChain::Present1<ept id="p1">**</ept>.</source>
          <target state="new">After that, you simply present the back buffer to the display by calling <bpt id="p1">**</bpt>IDXGISwapChain::Present1<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Direct3D 11: Drawing to the screen.</source>
          <target state="new">Direct3D 11: Drawing to the screen.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Releasing graphics resources</source>
          <target state="new">Releasing graphics resources</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In EGL, you release the window resources by passing the EGLDisplay to eglTerminate.</source>
          <target state="new">In EGL, you release the window resources by passing the EGLDisplay to eglTerminate.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Terminating a display with EGL 1.4</source>
          <target state="new">Terminating a display with EGL 1.4</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In a UWP app, you can close the CoreWindow with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::Close<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208260)</ept>, although this can only be used for secondary UI windows.</source>
          <target state="new">In a UWP app, you can close the CoreWindow with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::Close<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208260)</ept>, although this can only be used for secondary UI windows.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The primary UI thread and its associated CoreWindow cannot be closed; rather, they are expired by the operating system.</source>
          <target state="new">The primary UI thread and its associated CoreWindow cannot be closed; rather, they are expired by the operating system.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>However, when a secondary CoreWindow is closed, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::Closed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208261)</ept> event is raised.</source>
          <target state="new">However, when a secondary CoreWindow is closed, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::Closed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208261)</ept> event is raised.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>API Reference mapping for EGL to Direct3D 11</source>
          <target state="new">API Reference mapping for EGL to Direct3D 11</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>EGL API</source>
          <target state="new">EGL API</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Similar Direct3D 11 API or behavior</source>
          <target state="new">Similar Direct3D 11 API or behavior</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>eglBindAPI</source>
          <target state="new">eglBindAPI</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>eglBindTexImage</source>
          <target state="new">eglBindTexImage</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateTexture2D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476521)</ept> to set a 2D texture.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateTexture2D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476521)</ept> to set a 2D texture.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>eglChooseConfig</source>
          <target state="new">eglChooseConfig</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Direct3D does not supply a set of default frame buffer configurations.</source>
          <target state="new">Direct3D does not supply a set of default frame buffer configurations.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The swap chain's configuration</source>
          <target state="new">The swap chain's configuration</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>eglCopyBuffers</source>
          <target state="new">eglCopyBuffers</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To copy a buffer data, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::CopyStructureCount<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476393)</ept>.</source>
          <target state="new">To copy a buffer data, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::CopyStructureCount<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476393)</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To copy a resource, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3DDeviceCOntext::CopyResource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476392)</ept>.</source>
          <target state="new">To copy a resource, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3DDeviceCOntext::CopyResource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476392)</ept>.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>eglCreateContext</source>
          <target state="new">eglCreateContext</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Create a Direct3D device context by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept>, which returns both a handle to a Direct3D device and a default Direct3D immediate context (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> object).</source>
          <target state="new">Create a Direct3D device context by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept>, which returns both a handle to a Direct3D device and a default Direct3D immediate context (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> object).</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You can also create a Direct3D deferred context by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device2::CreateDeferredContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn280495)</ept> on the returned <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> object.</source>
          <target state="new">You can also create a Direct3D deferred context by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device2::CreateDeferredContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dn280495)</ept> on the returned <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> object.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>eglCreatePbufferFromClientBuffer</source>
          <target state="new">eglCreatePbufferFromClientBuffer</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>All buffers are read and written as a Direct3D subresource, such as an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Texture2D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept>.</source>
          <target state="new">All buffers are read and written as a Direct3D subresource, such as an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Texture2D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Copy from one to another compatible subresource type with a methods such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1:CopyResource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476392)</ept>.</source>
          <target state="new">Copy from one to another compatible subresource type with a methods such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1:CopyResource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476392)</ept>.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>eglCreatePbufferSurface</source>
          <target state="new">eglCreatePbufferSurface</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To create a Direct3D device with no swap chain, call the static <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> method.</source>
          <target state="new">To create a Direct3D device with no swap chain, call the static <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> method.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For a Direct3D render target view, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476517)</ept>.</source>
          <target state="new">For a Direct3D render target view, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476517)</ept>.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>eglCreatePixmapSurface</source>
          <target state="new">eglCreatePixmapSurface</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To create a Direct3D device with no swap chain, call the static <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> method.</source>
          <target state="new">To create a Direct3D device with no swap chain, call the static <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> method.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For a Direct3D render target view, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476517)</ept>.</source>
          <target state="new">For a Direct3D render target view, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476517)</ept>.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>eglCreateWindowSurface</source>
          <target state="new">eglCreateWindowSurface</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Ontain an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> (for the display buffers) and an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> (a virtual interface for the graphics device and its resources).</source>
          <target state="new">Ontain an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> (for the display buffers) and an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Device1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> (a virtual interface for the graphics device and its resources).</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>ID3D11Device1<ept id="p1">**</ept> to define an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11RenderTargetView<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> that you can use to create the frame buffer you supply to the <bpt id="p4">**</bpt>IDXGISwapChain1<ept id="p4">**</ept>.</source>
          <target state="new">Use the <bpt id="p1">**</bpt>ID3D11Device1<ept id="p1">**</ept> to define an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11RenderTargetView<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> that you can use to create the frame buffer you supply to the <bpt id="p4">**</bpt>IDXGISwapChain1<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>eglDestroyContext</source>
          <target state="new">eglDestroyContext</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::DiscardView1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/jj247573)</ept> to get rid of a render target view.</source>
          <target state="new">Use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::DiscardView1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/jj247573)</ept> to get rid of a render target view.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To close the parent <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>, set the instance to null and wait for the platform to reclaim its resources.</source>
          <target state="new">To close the parent <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>, set the instance to null and wait for the platform to reclaim its resources.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You cannot destroy the device context directly.</source>
          <target state="new">You cannot destroy the device context directly.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>eglDestroySurface</source>
          <target state="new">eglDestroySurface</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Graphics resources are cleaned up when the UWP app's CoreWindow is closed by the platform.</source>
          <target state="new">Graphics resources are cleaned up when the UWP app's CoreWindow is closed by the platform.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>eglGetCurrentDisplay</source>
          <target state="new">eglGetCurrentDisplay</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::GetForCurrentThread<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept> to get a reference to the current main app window.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::GetForCurrentThread<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept> to get a reference to the current main app window.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>eglGetCurrentSurface</source>
          <target state="new">eglGetCurrentSurface</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This is the current <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept>.</source>
          <target state="new">This is the current <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept>.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Typically, this is scoped to your renderer object.</source>
          <target state="new">Typically, this is scoped to your renderer object.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>eglGetError</source>
          <target state="new">eglGetError</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Errors are obtained as HRESULTs returned by most methods on DirectX interfaces.</source>
          <target state="new">Errors are obtained as HRESULTs returned by most methods on DirectX interfaces.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If the method does not return an HRESULT, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetLastError<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
          <target state="new">If the method does not return an HRESULT, call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetLastError<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>To convert a system error into an HRESULT value, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HRESULT<ph id="ph1">\_</ph>FROM<ph id="ph2">\_</ph>WIN32<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms680746)</ept> macro.</source>
          <target state="new">To convert a system error into an HRESULT value, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HRESULT<ph id="ph1">\_</ph>FROM<ph id="ph2">\_</ph>WIN32<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms680746)</ept> macro.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>eglInitialize</source>
          <target state="new">eglInitialize</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::GetForCurrentThread<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept> to get a reference to the current main app window.</source>
          <target state="new">Call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::GetForCurrentThread<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701589)</ept> to get a reference to the current main app window.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>eglMakeCurrent</source>
          <target state="new">eglMakeCurrent</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Set a render target for drawing on the current context with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept>.</source>
          <target state="new">Set a render target for drawing on the current context with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>eglQueryContext</source>
          <target state="new">eglQueryContext</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>However, you may acquire rendering targets from an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> instance, as well as some configuration data.</source>
          <target state="new">However, you may acquire rendering targets from an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> instance, as well as some configuration data.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>(See the link for the list of available methods.)</source>
          <target state="new">(See the link for the list of available methods.)</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>eglQuerySurface</source>
          <target state="new">eglQuerySurface</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>However, you may acquire data about viewports and the current graphics hardware from methods on an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> instance.</source>
          <target state="new">However, you may acquire data about viewports and the current graphics hardware from methods on an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> instance.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>(See the link for the list of available methods.)</source>
          <target state="new">(See the link for the list of available methods.)</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>eglReleaseTexImage</source>
          <target state="new">eglReleaseTexImage</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>N/A.</source>
          <target state="new">N/A.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>eglReleaseThread</source>
          <target state="new">eglReleaseThread</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For general GPU multithreading, read <bpt id="p1">[</bpt>Multithreading<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476891)</ept>.</source>
          <target state="new">For general GPU multithreading, read <bpt id="p1">[</bpt>Multithreading<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476891)</ept>.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>eglSurfaceAttrib</source>
          <target state="new">eglSurfaceAttrib</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11<ph id="ph1">\_</ph>RENDER<ph id="ph2">\_</ph>TARGET<ph id="ph3">\_</ph>VIEW<ph id="ph4">\_</ph>DESC<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476201)</ept> to configure a Direct3D render target view,</source>
          <target state="new">Use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11<ph id="ph1">\_</ph>RENDER<ph id="ph2">\_</ph>TARGET<ph id="ph3">\_</ph>VIEW<ph id="ph4">\_</ph>DESC<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476201)</ept> to configure a Direct3D render target view,</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>eglSwapBuffers</source>
          <target state="new">eglSwapBuffers</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>.</source>
          <target state="new">Use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>eglSwapInterval</source>
          <target state="new">eglSwapInterval</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept>.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>eglTerminate</source>
          <target state="new">eglTerminate</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The CoreWindow used to display the output of the graphics pipeline is managed by the operating system.</source>
          <target state="new">The CoreWindow used to display the output of the graphics pipeline is managed by the operating system.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>eglWaitClient</source>
          <target state="new">eglWaitClient</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>For shared surfaces, use IDXGIKeyedMutex.</source>
          <target state="new">For shared surfaces, use IDXGIKeyedMutex.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For general GPU multithreading, read <bpt id="p1">[</bpt>Multithreading<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476891)</ept>.</source>
          <target state="new">For general GPU multithreading, read <bpt id="p1">[</bpt>Multithreading<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476891)</ept>.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>eglWaitGL</source>
          <target state="new">eglWaitGL</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For shared surfaces, use IDXGIKeyedMutex.</source>
          <target state="new">For shared surfaces, use IDXGIKeyedMutex.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For general GPU multithreading, read <bpt id="p1">[</bpt>Multithreading<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476891)</ept>.</source>
          <target state="new">For general GPU multithreading, read <bpt id="p1">[</bpt>Multithreading<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476891)</ept>.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>eglWaitNative</source>
          <target state="new">eglWaitNative</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For shared surfaces, use IDXGIKeyedMutex.</source>
          <target state="new">For shared surfaces, use IDXGIKeyedMutex.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For general GPU multithreading, read <bpt id="p1">[</bpt>Multithreading<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476891)</ept>.</source>
          <target state="new">For general GPU multithreading, read <bpt id="p1">[</bpt>Multithreading<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476891)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>