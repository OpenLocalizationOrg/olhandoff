<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\tutorial--building-the-games-metro-style-app-framework.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e60d43a9d5322b26ea59994de9cf9f528bcd2a0</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Define the game's Universal Windows Platform (UWP) app framework</source>
          <target state="new">Define the game's Universal Windows Platform (UWP) app framework</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The first part of coding a Universal Windows Platform (UWP) with DirectX game is building the framework that lets the game object interact with Windows.</source>
          <target state="new">The first part of coding a Universal Windows Platform (UWP) with DirectX game is building the framework that lets the game object interact with Windows.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Define the game's Universal Windows Platform (UWP) app framework</source>
          <target state="new">Define the game's Universal Windows Platform (UWP) app framework</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The first part of coding a Universal Windows Platform (UWP) with DirectX game is building the framework that lets the game object interact with Windows.</source>
          <target state="new">The first part of coding a Universal Windows Platform (UWP) with DirectX game is building the framework that lets the game object interact with Windows.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This includes Windows Runtime properties like suspend/resume event handling, window focus, and snapping, plus as the events, interactions and transitions for the user interface.</source>
          <target state="new">This includes Windows Runtime properties like suspend/resume event handling, window focus, and snapping, plus as the events, interactions and transitions for the user interface.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We go over how the sample game is structured, and how it defines the high-level state machine for the player and system interaction.</source>
          <target state="new">We go over how the sample game is structured, and how it defines the high-level state machine for the player and system interaction.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Objective</source>
          <target state="new">Objective</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To set up the framework for a UWP DirectX game, and implement the state machine that defines the overall game flow.</source>
          <target state="new">To set up the framework for a UWP DirectX game, and implement the state machine that defines the overall game flow.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializing and starting the view provider</source>
          <target state="new">Initializing and starting the view provider</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In any UWP DirectX game, you must obtain a view provider that the app singleton, the Windows Runtime object that defines an instance of your running app, can use to access the graphics resources it needs.</source>
          <target state="new">In any UWP DirectX game, you must obtain a view provider that the app singleton, the Windows Runtime object that defines an instance of your running app, can use to access the graphics resources it needs.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Through the Windows Runtime, your app has a direct connection with the graphics interface, but you need to specify the resources you need and how to handle them.</source>
          <target state="new">Through the Windows Runtime, your app has a direct connection with the graphics interface, but you need to specify the resources you need and how to handle them.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As we discussed in <bpt id="p1">[</bpt>Setting up the game project<ept id="p1">](tutorial--setting-up-the-games-infrastructure.md)</ept>, Microsoft Visual Studio 2015 provides an implementation of a basic renderer for DirectX in the <bpt id="p2">**</bpt>Sample3DSceneRenderer.cpp<ept id="p2">**</ept> file that is available when you pick the <bpt id="p3">**</bpt>DirectX 11 App (Universal Windows)<ept id="p3">**</ept> template.</source>
          <target state="new">As we discussed in <bpt id="p1">[</bpt>Setting up the game project<ept id="p1">](tutorial--setting-up-the-games-infrastructure.md)</ept>, Microsoft Visual Studio 2015 provides an implementation of a basic renderer for DirectX in the <bpt id="p2">**</bpt>Sample3DSceneRenderer.cpp<ept id="p2">**</ept> file that is available when you pick the <bpt id="p3">**</bpt>DirectX 11 App (Universal Windows)<ept id="p3">**</ept> template.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more details about understanding and creating a view provider and renderer, see <bpt id="p1">[</bpt>How to set up your UWP with C++ and DirectX to display a DirectX view<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh465077)</ept>.</source>
          <target state="new">For more details about understanding and creating a view provider and renderer, see <bpt id="p1">[</bpt>How to set up your UWP with C++ and DirectX to display a DirectX view<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh465077)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Suffice to say, you must provide the implementation for 5 methods that the app singleton calls:</source>
          <target state="new">Suffice to say, you must provide the implementation for 5 methods that the app singleton calls:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initialize</source>
          <target state="new">Initialize</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>SetWindow</source>
          <target state="new">SetWindow</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Load</source>
          <target state="new">Load</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Run</source>
          <target state="new">Run</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Uninitialize</source>
          <target state="new">Uninitialize</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the DirectX11 App (Universal Windows) template, these 5 methods are defined on the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> object in <bpt id="p2">[</bpt>App.h<ept id="p2">](#code_sample)</ept>.</source>
          <target state="new">In the DirectX11 App (Universal Windows) template, these 5 methods are defined on the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> object in <bpt id="p2">[</bpt>App.h<ept id="p2">](#code_sample)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Let's take a look at the way they are implemented in this game.</source>
          <target state="new">Let's take a look at the way they are implemented in this game.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The Initialize method of the view provider</source>
          <target state="new">The Initialize method of the view provider</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The app singleton first calls <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept>.</source>
          <target state="new">The app singleton first calls <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Therefore, it is crucial that this method handles the most fundamental behaviors of a UWP game, such as handling the activation of the main window and making sure that the game can handle a sudden suspend (and a possible later resume) event.</source>
          <target state="new">Therefore, it is crucial that this method handles the most fundamental behaviors of a UWP game, such as handling the activation of the main window and making sure that the game can handle a sudden suspend (and a possible later resume) event.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When the game app is initialized, it allocates specific memory for the controller to allow the player to begin providing input.</source>
          <target state="new">When the game app is initialized, it allocates specific memory for the controller to allow the player to begin providing input.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It also creates new, uninitialized instances of the game's renderer and state machine.</source>
          <target state="new">It also creates new, uninitialized instances of the game's renderer and state machine.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We discuss the details in <bpt id="p1">[</bpt>Defining the main game object<ept id="p1">](tutorial--defining-the-main-game-loop.md)</ept>.</source>
          <target state="new">We discuss the details in <bpt id="p1">[</bpt>Defining the main game object<ept id="p1">](tutorial--defining-the-main-game-loop.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>At this point, the game app can handle a suspend (or resume) message, and has memory allocated for the controller, the renderer, and the game itself.</source>
          <target state="new">At this point, the game app can handle a suspend (or resume) message, and has memory allocated for the controller, the renderer, and the game itself.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>But there's no window to work with, and the game is uninitialized.</source>
          <target state="new">But there's no window to work with, and the game is uninitialized.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There's a few more things that need to happen!</source>
          <target state="new">There's a few more things that need to happen!</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The SetWindow method of the view provider</source>
          <target state="new">The SetWindow method of the view provider</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Now, with a call to an implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700509)</ept>, the app singleton provides a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object that represents the game's main window, and makes its resources and events available to the game.</source>
          <target state="new">Now, with a call to an implementation of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SetWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh700509)</ept>, the app singleton provides a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object that represents the game's main window, and makes its resources and events available to the game.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because there's a window to work with, the game can now start adding in the basic user interface components and events: a pointer (used by both mouse and touch controls), and the basic events for window resizing, closing, and DPI changes (if the display device changes).</source>
          <target state="new">Because there's a window to work with, the game can now start adding in the basic user interface components and events: a pointer (used by both mouse and touch controls), and the basic events for window resizing, closing, and DPI changes (if the display device changes).</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The game app also initializes the controller, because there's a window to interact with, and initializes the game object itself.</source>
          <target state="new">The game app also initializes the controller, because there's a window to interact with, and initializes the game object itself.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It can read input from the controller (touch, mouse, or XBox 360 controller).</source>
          <target state="new">It can read input from the controller (touch, mouse, or XBox 360 controller).</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After the controller is initialized, the app defines two rectangular areas in the lower-left and lower-right corners of the screen for the move and camera touch controls, respectively.</source>
          <target state="new">After the controller is initialized, the app defines two rectangular areas in the lower-left and lower-right corners of the screen for the move and camera touch controls, respectively.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The player uses the lower-left rectangle, defined by the call to <bpt id="p1">**</bpt>SetMoveRect<ept id="p1">**</ept>, as a virtual control pad for moving the camera forward and backward, and side to side.</source>
          <target state="new">The player uses the lower-left rectangle, defined by the call to <bpt id="p1">**</bpt>SetMoveRect<ept id="p1">**</ept>, as a virtual control pad for moving the camera forward and backward, and side to side.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The lower-right rectangle, defined by the <bpt id="p1">**</bpt>SetFireRect<ept id="p1">**</ept> method, is used as a virtual button to fire the ammo.</source>
          <target state="new">The lower-right rectangle, defined by the <bpt id="p1">**</bpt>SetFireRect<ept id="p1">**</ept> method, is used as a virtual button to fire the ammo.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It's all starting to come together.</source>
          <target state="new">It's all starting to come together.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The Load method of the view provider</source>
          <target state="new">The Load method of the view provider</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After the main window is set, the app singleton calls <bpt id="p1">**</bpt>Load<ept id="p1">**</ept>.</source>
          <target state="new">After the main window is set, the app singleton calls <bpt id="p1">**</bpt>Load<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the sample, this method uses a set of asynchronous tasks (the syntax for which is defined in the <bpt id="p1">[</bpt>Parallel Patterns Library<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dd492418.aspx)</ept>) to create the game objects, load graphics resources, and initialize the game’s state machine.</source>
          <target state="new">In the sample, this method uses a set of asynchronous tasks (the syntax for which is defined in the <bpt id="p1">[</bpt>Parallel Patterns Library<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dd492418.aspx)</ept>) to create the game objects, load graphics resources, and initialize the game’s state machine.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By using the async task pattern, the Load method completes quickly and allows the app to start processing input.</source>
          <target state="new">By using the async task pattern, the Load method completes quickly and allows the app to start processing input.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this method, the app also displays a progress bar as the resource files load.</source>
          <target state="new">In this method, the app also displays a progress bar as the resource files load.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>We break resource loading into two separate stages, because access to the Direct3D 11 device context is restricted to the thread the device context was created on, while access to the Direct3D 11 device for object creation is free-threaded.</source>
          <target state="new">We break resource loading into two separate stages, because access to the Direct3D 11 device context is restricted to the thread the device context was created on, while access to the Direct3D 11 device for object creation is free-threaded.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CreateGameDeviceResourcesAsync<ept id="p1">**</ept> task runs on a separate thread from the completion task (<bpt id="p2">*</bpt>FinalizeCreateGameDeviceResources<ept id="p2">*</ept>), which runs on the original thread.</source>
          <target state="new">The <bpt id="p1">**</bpt>CreateGameDeviceResourcesAsync<ept id="p1">**</ept> task runs on a separate thread from the completion task (<bpt id="p2">*</bpt>FinalizeCreateGameDeviceResources<ept id="p2">*</ept>), which runs on the original thread.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>We use a similar pattern for loading level resources with <bpt id="p1">**</bpt>LoadLevelAsync<ept id="p1">**</ept> and <bpt id="p2">**</bpt>FinalizeLoadLevel<ept id="p2">**</ept>.</source>
          <target state="new">We use a similar pattern for loading level resources with <bpt id="p1">**</bpt>LoadLevelAsync<ept id="p1">**</ept> and <bpt id="p2">**</bpt>FinalizeLoadLevel<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>After we create the game’s objects and load the graphics resources, we initialize the game's state machine to the starting conditions (for example: setting the initial ammo count, level number, and object positions).</source>
          <target state="new">After we create the game’s objects and load the graphics resources, we initialize the game's state machine to the starting conditions (for example: setting the initial ammo count, level number, and object positions).</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the game state indicates that the player is resuming a game, we load the current level (the level that player was on when the game was suspended).</source>
          <target state="new">If the game state indicates that the player is resuming a game, we load the current level (the level that player was on when the game was suspended).</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Load<ept id="p1">**</ept> method, we do any necessary preparations before the game begins, like setting any starting states or global values.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Load<ept id="p1">**</ept> method, we do any necessary preparations before the game begins, like setting any starting states or global values.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you want to pre-fetch game data or assets, this is a better place for it rather than in <bpt id="p1">**</bpt>SetWindow<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept>.</source>
          <target state="new">If you want to pre-fetch game data or assets, this is a better place for it rather than in <bpt id="p1">**</bpt>SetWindow<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Use async tasks in your game for any loading as Windows imposes restrictions on the time your game can take before it must start processing input.</source>
          <target state="new">Use async tasks in your game for any loading as Windows imposes restrictions on the time your game can take before it must start processing input.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If loading takes awhile—if there are lots of resources — then provide your users with a regularly updated progress bar.</source>
          <target state="new">If loading takes awhile—if there are lots of resources — then provide your users with a regularly updated progress bar.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When developing your own game, design your startup code around these methods.</source>
          <target state="new">When developing your own game, design your startup code around these methods.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Here's a simple list of basic suggestions for each method:</source>
          <target state="new">Here's a simple list of basic suggestions for each method:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> to allocate your main classes and connect up the basic event handlers.</source>
          <target state="new">Use <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> to allocate your main classes and connect up the basic event handlers.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>SetWindow<ept id="p1">**</ept> to create your main window and connect any window-specific events.</source>
          <target state="new">Use <bpt id="p1">**</bpt>SetWindow<ept id="p1">**</ept> to create your main window and connect any window-specific events.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>Load<ept id="p1">**</ept> to handle any remaining setup, and to initiate the async creation of objects and loading of resources.</source>
          <target state="new">Use <bpt id="p1">**</bpt>Load<ept id="p1">**</ept> to handle any remaining setup, and to initiate the async creation of objects and loading of resources.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you need to create any temporary files or data, such as procedurally generated assets, do it here too.</source>
          <target state="new">If you need to create any temporary files or data, such as procedurally generated assets, do it here too.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>So, the sample game creates an instance of the game's state machine and sets it to the starting configuration.</source>
          <target state="new">So, the sample game creates an instance of the game's state machine and sets it to the starting configuration.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It handles all the system and input events.</source>
          <target state="new">It handles all the system and input events.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It provides a window to display content in.</source>
          <target state="new">It provides a window to display content in.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The gameplay code is now ready to run.</source>
          <target state="new">The gameplay code is now ready to run.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The Run method of the view provider</source>
          <target state="new">The Run method of the view provider</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Here's where we get to the play part of the game app.</source>
          <target state="new">Here's where we get to the play part of the game app.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Having run the 3 methods and set the stage, the game app runs the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> method, starting the fun!</source>
          <target state="new">Having run the 3 methods and set the stage, the game app runs the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> method, starting the fun!</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the game sample, we start a while loop that terminates when the player closes the game window.</source>
          <target state="new">In the game sample, we start a while loop that terminates when the player closes the game window.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The sample code transitions to one of two states in the game engine state machine:</source>
          <target state="new">The sample code transitions to one of two states in the game engine state machine:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The game window gets deactivated (loses focus) or snapped.</source>
          <target state="new">The game window gets deactivated (loses focus) or snapped.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When this happens, the game suspends event processing and waits for the window to focus or unsnap.</source>
          <target state="new">When this happens, the game suspends event processing and waits for the window to focus or unsnap.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Otherwise, the game updates its own state and renders the graphics for display.</source>
          <target state="new">Otherwise, the game updates its own state and renders the graphics for display.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When your game has focus, you must handle every event in the message queue as it arrives, and so you must call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindowDispatch.ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> with the <bpt id="p3">**</bpt>ProcessAllIfPresent<ept id="p3">**</ept> option.</source>
          <target state="new">When your game has focus, you must handle every event in the message queue as it arrives, and so you must call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindowDispatch.ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> with the <bpt id="p3">**</bpt>ProcessAllIfPresent<ept id="p3">**</ept> option.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Other options can cause delays in processing message events, which makes your game feel unresponsive, or result in touch behaviors that feel sluggish and not "sticky".</source>
          <target state="new">Other options can cause delays in processing message events, which makes your game feel unresponsive, or result in touch behaviors that feel sluggish and not "sticky".</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Of course, when the app is not visible, suspended or snapped, we don't want it to consume any resources cycling to dispatch messages that will never arrive.</source>
          <target state="new">Of course, when the app is not visible, suspended or snapped, we don't want it to consume any resources cycling to dispatch messages that will never arrive.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>So your game must use <bpt id="p1">**</bpt>ProcessOneAndAllPending<ept id="p1">**</ept>, which blocks until it gets an event, and then processes that event and any others that arrive in the process queue during the processing of the first.</source>
          <target state="new">So your game must use <bpt id="p1">**</bpt>ProcessOneAndAllPending<ept id="p1">**</ept>, which blocks until it gets an event, and then processes that event and any others that arrive in the process queue during the processing of the first.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> then immediately returns after the queue has been processed.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ProcessEvents<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> then immediately returns after the queue has been processed.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The game is running!</source>
          <target state="new">The game is running!</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The events that it uses to transition between game states are being dispatched and processed.</source>
          <target state="new">The events that it uses to transition between game states are being dispatched and processed.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The graphics are being updated as the game loop cycles.</source>
          <target state="new">The graphics are being updated as the game loop cycles.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>We hope the player is having fun.</source>
          <target state="new">We hope the player is having fun.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>But eventually, the fun has to end...</source>
          <target state="new">But eventually, the fun has to end...</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>...and we need to clean up the place.</source>
          <target state="new">...and we need to clean up the place.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This is where <bpt id="p1">**</bpt>Uninitialize<ept id="p1">**</ept> comes in.</source>
          <target state="new">This is where <bpt id="p1">**</bpt>Uninitialize<ept id="p1">**</ept> comes in.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The Uninitialize method of the view provider</source>
          <target state="new">The Uninitialize method of the view provider</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the game sample, we let the app singleton for the game clean everything up after the game is terminated.</source>
          <target state="new">In the game sample, we let the app singleton for the game clean everything up after the game is terminated.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In Windows 10, closing the app window doesn't kill the app's process, but instead writes the state of the app singleton to memory.</source>
          <target state="new">In Windows 10, closing the app window doesn't kill the app's process, but instead writes the state of the app singleton to memory.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If anything special must happen when the system must reclaim this memory, any special cleanup of resources, then put the code for that cleanup in this method.</source>
          <target state="new">If anything special must happen when the system must reclaim this memory, any special cleanup of resources, then put the code for that cleanup in this method.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>We refer back to these 5 methods in this tutorial, so keep them in mind.</source>
          <target state="new">We refer back to these 5 methods in this tutorial, so keep them in mind.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Now, let's look at the game engine's overall structure and the state machines that define it.</source>
          <target state="new">Now, let's look at the game engine's overall structure and the state machines that define it.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Initializing the game engine state</source>
          <target state="new">Initializing the game engine state</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Because a user can resume a UWP game app from a suspended state at any time, the app can have any number of possible states.</source>
          <target state="new">Because a user can resume a UWP game app from a suspended state at any time, the app can have any number of possible states.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The game sample can be in one of the three states when it starts:</source>
          <target state="new">The game sample can be in one of the three states when it starts:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The game loop was running and was in the middle of a level.</source>
          <target state="new">The game loop was running and was in the middle of a level.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The game loop was not running because a game had just been completed.</source>
          <target state="new">The game loop was not running because a game had just been completed.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>(The high score is set.)</source>
          <target state="new">(The high score is set.)</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>No game has been started, or the game was between levels.</source>
          <target state="new">No game has been started, or the game was between levels.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>(The high score is 0.)</source>
          <target state="new">(The high score is 0.)</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Obviously, in your own game, you could have more or fewer states.</source>
          <target state="new">Obviously, in your own game, you could have more or fewer states.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Again, always be aware that your UWP game can be terminated at any time, and when it resumes, the player expects the game to behave as though they had never stopped playing.</source>
          <target state="new">Again, always be aware that your UWP game can be terminated at any time, and when it resumes, the player expects the game to behave as though they had never stopped playing.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In the game sample, the code flow looks like this.</source>
          <target state="new">In the game sample, the code flow looks like this.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Initialization is less about cold starting the app, and more about restarting the app after it has been terminated.</source>
          <target state="new">Initialization is less about cold starting the app, and more about restarting the app after it has been terminated.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The sample game always saves state, which gives the appearance that the app is always running.</source>
          <target state="new">The sample game always saves state, which gives the appearance that the app is always running.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The suspended state is just that: the game play is suspended, but the resources of the game are still in memory.</source>
          <target state="new">The suspended state is just that: the game play is suspended, but the resources of the game are still in memory.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Likewise, the resume event indicates that the sample game is picking up where it was last suspended or terminated.</source>
          <target state="new">Likewise, the resume event indicates that the sample game is picking up where it was last suspended or terminated.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When the sample game restarts after termination, it starts up normally and then determines the last known state so the player can immediately continue playing.</source>
          <target state="new">When the sample game restarts after termination, it starts up normally and then determines the last known state so the player can immediately continue playing.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The flowchart lays out the initial states and transitions for the game sample's initialization process.</source>
          <target state="new">The flowchart lays out the initial states and transitions for the game sample's initialization process.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>the process for initializing and preparing our game before the main loop starts</source>
          <target state="new">the process for initializing and preparing our game before the main loop starts</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Depending on the state, different options are presented to the player.</source>
          <target state="new">Depending on the state, different options are presented to the player.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If the game resumes mid-level, it appears as paused, and the overlay presents a continue option.</source>
          <target state="new">If the game resumes mid-level, it appears as paused, and the overlay presents a continue option.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If the game resumed in a state where the game is completed, it displays the high scores and an option to play a new game.</source>
          <target state="new">If the game resumed in a state where the game is completed, it displays the high scores and an option to play a new game.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Lastly, if the game resumes before a level has started, the overlay presents a start option to the user.</source>
          <target state="new">Lastly, if the game resumes before a level has started, the overlay presents a start option to the user.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The game sample doesn't distinguish between the game itself cold starting, that is a game that is launching for the first time without a suspend event, and the game resuming from a suspended state.</source>
          <target state="new">The game sample doesn't distinguish between the game itself cold starting, that is a game that is launching for the first time without a suspend event, and the game resuming from a suspended state.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This is proper design for any UWP app.</source>
          <target state="new">This is proper design for any UWP app.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Handling events</source>
          <target state="new">Handling events</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Our sample code registered a number of handlers for specific events in <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept>, <bpt id="p2">**</bpt>SetWindow<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Load<ept id="p3">**</ept>.</source>
          <target state="new">Our sample code registered a number of handlers for specific events in <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept>, <bpt id="p2">**</bpt>SetWindow<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Load<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You probably guessed that these were important events, because the code sample did this work well before it got into any game mechanics or graphics development.</source>
          <target state="new">You probably guessed that these were important events, because the code sample did this work well before it got into any game mechanics or graphics development.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You're right!</source>
          <target state="new">You're right!</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>These events are fundamental to a proper UWP app experience, and because a UWP app can be activated, deactivated, resized, snapped, unsnapped, suspended, or resumed at any time, the game must register for those very events as soon as it can, and handle them in a way that keeps the experience smooth and predictable for the player.</source>
          <target state="new">These events are fundamental to a proper UWP app experience, and because a UWP app can be activated, deactivated, resized, snapped, unsnapped, suspended, or resumed at any time, the game must register for those very events as soon as it can, and handle them in a way that keeps the experience smooth and predictable for the player.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Here's the event handlers in the sample, and the events they handle.</source>
          <target state="new">Here's the event handlers in the sample, and the events they handle.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can find the full code for these event handlers in <bpt id="p1">[</bpt>Complete code for this section<ept id="p1">](#code_sample)</ept>.</source>
          <target state="new">You can find the full code for these event handlers in <bpt id="p1">[</bpt>Complete code for this section<ept id="p1">](#code_sample)</ept>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Event handler</source>
          <target state="new">Event handler</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>OnActivated</source>
          <target state="new">OnActivated</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreApplicationView::Activated<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br225018).</source>
          <target state="new">Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreApplicationView::Activated<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br225018).</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The game app has been brought to the foreground, so the main window is activated.</source>
          <target state="new">The game app has been brought to the foreground, so the main window is activated.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>OnLogicalDpiChanged</source>
          <target state="new">OnLogicalDpiChanged</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Handles [<ph id="ph1">&lt;strong&gt;</ph>DisplayProperties::LogicalDpiChanged<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br226150).</source>
          <target state="new">Handles [<ph id="ph1">&lt;strong&gt;</ph>DisplayProperties::LogicalDpiChanged<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br226150).</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The DPI for the main game window has changed, and the game app adjusts its resources accordingly.</source>
          <target state="new">The DPI for the main game window has changed, and the game app adjusts its resources accordingly.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Note<ph id="ph1">&lt;/strong&gt;</ph>  [<ph id="ph2">&lt;strong&gt;</ph>CoreWindow<ph id="ph3">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/desktop/hh404559) coordinates are in DIPs (Device Independent Pixels), as in <bpt id="p1">[</bpt>Direct2D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd370987)</ept>.</source>
          <target state="new">Note<ph id="ph1">&lt;/strong&gt;</ph>  [<ph id="ph2">&lt;strong&gt;</ph>CoreWindow<ph id="ph3">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/desktop/hh404559) coordinates are in DIPs (Device Independent Pixels), as in <bpt id="p1">[</bpt>Direct2D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd370987)</ept>.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>As a result, you must notify Direct2D of the change in DPI to display any 2D assets or primitives correctly.</source>
          <target state="new">As a result, you must notify Direct2D of the change in DPI to display any 2D assets or primitives correctly.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>OnResuming</source>
          <target state="new">OnResuming</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreApplication::Resuming<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br205859).</source>
          <target state="new">Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreApplication::Resuming<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br205859).</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The game app restores the game from a suspended state.</source>
          <target state="new">The game app restores the game from a suspended state.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>OnSuspending</source>
          <target state="new">OnSuspending</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreApplication::Suspending<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br205860).</source>
          <target state="new">Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreApplication::Suspending<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br205860).</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The game app saves its state to disk.</source>
          <target state="new">The game app saves its state to disk.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>It has 5 seconds to save state to storage.</source>
          <target state="new">It has 5 seconds to save state to storage.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>OnVisibilityChanged</source>
          <target state="new">OnVisibilityChanged</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreWindow::VisibilityChanged<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/hh701591).</source>
          <target state="new">Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreWindow::VisibilityChanged<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/hh701591).</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The game app has changed visibility, and has either become visible or been made invisible by another app becoming visible.</source>
          <target state="new">The game app has changed visibility, and has either become visible or been made invisible by another app becoming visible.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>OnWindowActivationChanged</source>
          <target state="new">OnWindowActivationChanged</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreWindow::Activated<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br208255).</source>
          <target state="new">Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreWindow::Activated<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br208255).</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The game app's main window has been deactivated or activated, so it must remove focus and pause the game, or regain focus.</source>
          <target state="new">The game app's main window has been deactivated or activated, so it must remove focus and pause the game, or regain focus.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In both cases, the overlay indicates that the game is paused.</source>
          <target state="new">In both cases, the overlay indicates that the game is paused.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>OnWindowClosed</source>
          <target state="new">OnWindowClosed</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreWindow::Closed<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br208261).</source>
          <target state="new">Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreWindow::Closed<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br208261).</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The game app closes the main window and suspends the game.</source>
          <target state="new">The game app closes the main window and suspends the game.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>OnWindowSizeChanged</source>
          <target state="new">OnWindowSizeChanged</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreWindow::SizeChanged<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br208283).</source>
          <target state="new">Handles [<ph id="ph1">&lt;strong&gt;</ph>CoreWindow::SizeChanged<ph id="ph2">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br208283).</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The game app reallocates the graphics resources and overlay to accommodate the size change, and then updates the render target.</source>
          <target state="new">The game app reallocates the graphics resources and overlay to accommodate the size change, and then updates the render target.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Your own game must handle these events, because they are part of UWP app design.</source>
          <target state="new">Your own game must handle these events, because they are part of UWP app design.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Updating the game engine</source>
          <target state="new">Updating the game engine</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Within the game loop in <bpt id="p1">**</bpt>Run<ept id="p1">**</ept>, the sample has implemented a basic state machine for handling all the major actions the player can take.</source>
          <target state="new">Within the game loop in <bpt id="p1">**</bpt>Run<ept id="p1">**</ept>, the sample has implemented a basic state machine for handling all the major actions the player can take.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The highest level of this state machine deals with loading a game, playing a specific level, or continuing a level after the game has been paused (by the system or the player).</source>
          <target state="new">The highest level of this state machine deals with loading a game, playing a specific level, or continuing a level after the game has been paused (by the system or the player).</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In the game sample, there are 3 major states (UpdateEngineState) the game can be in:</source>
          <target state="new">In the game sample, there are 3 major states (UpdateEngineState) the game can be in:</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Waiting for resources<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Waiting for resources<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The game loop is cycling, unable to transition until resources (specifically graphics resources) are available.</source>
          <target state="new">The game loop is cycling, unable to transition until resources (specifically graphics resources) are available.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When the async tasks for loading resources completes, it updates the state to <bpt id="p1">**</bpt>ResourcesLoaded<ept id="p1">**</ept>.</source>
          <target state="new">When the async tasks for loading resources completes, it updates the state to <bpt id="p1">**</bpt>ResourcesLoaded<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This usually happens between levels when the level needs to load new resources from disk.</source>
          <target state="new">This usually happens between levels when the level needs to load new resources from disk.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In the game sample, we simulate this behavior because the sample doesn't need any additional per-level resources at that time.</source>
          <target state="new">In the game sample, we simulate this behavior because the sample doesn't need any additional per-level resources at that time.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Waiting for press<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Waiting for press<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The game loop is cycling, waiting for specific user input.</source>
          <target state="new">The game loop is cycling, waiting for specific user input.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This input is a player action to load a game, start a level, or continue a level.</source>
          <target state="new">This input is a player action to load a game, start a level, or continue a level.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The sample code refers to these sub-states as PressResultState enumeration values.</source>
          <target state="new">The sample code refers to these sub-states as PressResultState enumeration values.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dynamics<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Dynamics<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The game loop is running with the user playing.</source>
          <target state="new">The game loop is running with the user playing.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>While the user is playing, the game checks for 3 conditions that it can transition on: the expiration of the set time for a level, the completion of a level by the player, or the completion of all levels by the player.</source>
          <target state="new">While the user is playing, the game checks for 3 conditions that it can transition on: the expiration of the set time for a level, the completion of a level by the player, or the completion of all levels by the player.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Here's the code structure.</source>
          <target state="new">Here's the code structure.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The complete code is in <bpt id="p1">[</bpt>Complete code for this section<ept id="p1">](#code_sample)</ept>.</source>
          <target state="new">The complete code is in <bpt id="p1">[</bpt>Complete code for this section<ept id="p1">](#code_sample)</ept>.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The structure of the state machine used to update the game engine</source>
          <target state="new">The structure of the state machine used to update the game engine</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Visually, the main game state machine looks like this:</source>
          <target state="new">Visually, the main game state machine looks like this:</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>the main state machine for our game</source>
          <target state="new">the main state machine for our game</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>We talk about the game logic itself in more detail in <bpt id="p1">[</bpt>Defining the main game object<ept id="p1">](tutorial--defining-the-main-game-loop.md)</ept>.</source>
          <target state="new">We talk about the game logic itself in more detail in <bpt id="p1">[</bpt>Defining the main game object<ept id="p1">](tutorial--defining-the-main-game-loop.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>For now, the important takeaway is that your game is a state machine.</source>
          <target state="new">For now, the important takeaway is that your game is a state machine.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Each specific state must have very specific criteria to define it, and the transitions from one state to another must be based on discrete user input or system actions (such as graphics resource loading).</source>
          <target state="new">Each specific state must have very specific criteria to define it, and the transitions from one state to another must be based on discrete user input or system actions (such as graphics resource loading).</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>When you are planning your game, draw out a diagram like the one we use, making sure you address all possible actions the user or system can take at a high level.</source>
          <target state="new">When you are planning your game, draw out a diagram like the one we use, making sure you address all possible actions the user or system can take at a high level.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Games can be very complicated, and the state machine is a powerful tool to visualize this complexity and make it very manageable.</source>
          <target state="new">Games can be very complicated, and the state machine is a powerful tool to visualize this complexity and make it very manageable.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Of course, as you saw, there are state machines within state machines.</source>
          <target state="new">Of course, as you saw, there are state machines within state machines.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>There's one for the controller, that handles all of the acceptable inputs the player can generate.</source>
          <target state="new">There's one for the controller, that handles all of the acceptable inputs the player can generate.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In the diagram, a press is some form of user input.</source>
          <target state="new">In the diagram, a press is some form of user input.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This state machine doesn't care what it is, because it works at a higher level; it assumes that the state machine for the controller will handle any transitions that affect movement and shooting behaviors, and the associated rendering updates.</source>
          <target state="new">This state machine doesn't care what it is, because it works at a higher level; it assumes that the state machine for the controller will handle any transitions that affect movement and shooting behaviors, and the associated rendering updates.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>We talk about managing input states in <bpt id="p1">[</bpt>Adding controls<ept id="p1">](tutorial--adding-controls.md)</ept>.</source>
          <target state="new">We talk about managing input states in <bpt id="p1">[</bpt>Adding controls<ept id="p1">](tutorial--adding-controls.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Updating the user interface</source>
          <target state="new">Updating the user interface</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>We need to keep the player apprised of the state of the system, and allow him to change the high-level state according to the rules of the game.</source>
          <target state="new">We need to keep the player apprised of the state of the system, and allow him to change the high-level state according to the rules of the game.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>For most games, this game sample included, this is done with a heads-up display that contains representations of game state, and other play-specific info such as score, or ammo, or the number of chances remaining.</source>
          <target state="new">For most games, this game sample included, this is done with a heads-up display that contains representations of game state, and other play-specific info such as score, or ammo, or the number of chances remaining.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>We call this the overlay, because it is rendered separate from the main graphics pipeline and placed on top the 3D projection.</source>
          <target state="new">We call this the overlay, because it is rendered separate from the main graphics pipeline and placed on top the 3D projection.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>In the sample game, we create this overlay using the Direct2D APIs.</source>
          <target state="new">In the sample game, we create this overlay using the Direct2D APIs.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>We can also create this overlay using XAML, which we discuss in <bpt id="p1">[</bpt>Extending the game sample<ept id="p1">](tutorial-resources.md)</ept>.</source>
          <target state="new">We can also create this overlay using XAML, which we discuss in <bpt id="p1">[</bpt>Extending the game sample<ept id="p1">](tutorial-resources.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>There are two components to the user interface:</source>
          <target state="new">There are two components to the user interface:</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The heads-up display that contains the score and info about the current state of game play.</source>
          <target state="new">The heads-up display that contains the score and info about the current state of game play.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The pause bitmap, which is a black rectangle with text overlaid during the paused/suspended state of the game.</source>
          <target state="new">The pause bitmap, which is a black rectangle with text overlaid during the paused/suspended state of the game.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This is the game overlay.</source>
          <target state="new">This is the game overlay.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>We discuss it further in <bpt id="p1">[</bpt>Adding a user interface<ept id="p1">](tutorial--adding-a-user-interface.md)</ept>.</source>
          <target state="new">We discuss it further in <bpt id="p1">[</bpt>Adding a user interface<ept id="p1">](tutorial--adding-a-user-interface.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Unsurprisingly, the overlay has a state machine too.</source>
          <target state="new">Unsurprisingly, the overlay has a state machine too.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The overlay can display a level start or game over message.</source>
          <target state="new">The overlay can display a level start or game over message.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>It is essentially a canvas to output any info about game state that we display to the player when the game is paused or suspended.</source>
          <target state="new">It is essentially a canvas to output any info about game state that we display to the player when the game is paused or suspended.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Here's how the game sample structures the overlay's state machine.</source>
          <target state="new">Here's how the game sample structures the overlay's state machine.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>There are 6 state screens that the overlay displays, depending on the state of the game itself: a resources loading screen at the start of the game, a game play screen, a level start message screen, a game over screen when all of the levels are competed without time running out, a game over screen when time runs out, and a pause menu screen.</source>
          <target state="new">There are 6 state screens that the overlay displays, depending on the state of the game itself: a resources loading screen at the start of the game, a game play screen, a level start message screen, a game over screen when all of the levels are competed without time running out, a game over screen when time runs out, and a pause menu screen.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Separating your user interface from your game's graphics pipeline allows you to work on it independent of the game's graphics rendering engine and decreases the complexity of your game's code significantly.</source>
          <target state="new">Separating your user interface from your game's graphics pipeline allows you to work on it independent of the game's graphics rendering engine and decreases the complexity of your game's code significantly.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This covers the basic structure of the game sample, and presents a good model for UWP game app development with DirectX.</source>
          <target state="new">This covers the basic structure of the game sample, and presents a good model for UWP game app development with DirectX.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Of course, there's more to it than this.</source>
          <target state="new">Of course, there's more to it than this.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>We only walked through the skeleton of the game.</source>
          <target state="new">We only walked through the skeleton of the game.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Now, we take an in-depth look at the game and its mechanics, and how those mechanics are implemented as the core game object.</source>
          <target state="new">Now, we take an in-depth look at the game and its mechanics, and how those mechanics are implemented as the core game object.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>We review that part in <bpt id="p1">[</bpt>Defining the main game object<ept id="p1">](tutorial--defining-the-main-game-loop.md)</ept>.</source>
          <target state="new">We review that part in <bpt id="p1">[</bpt>Defining the main game object<ept id="p1">](tutorial--defining-the-main-game-loop.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>It's also time to consider the sample game's graphics engine in greater detail.</source>
          <target state="new">It's also time to consider the sample game's graphics engine in greater detail.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>That part is covered in <bpt id="p1">[</bpt>Assembling the rendering pipeline<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>.</source>
          <target state="new">That part is covered in <bpt id="p1">[</bpt>Assembling the rendering pipeline<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Complete sample code for this section</source>
          <target state="new">Complete sample code for this section</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>App.h</source>
          <target state="new">App.h</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>App.cpp</source>
          <target state="new">App.cpp</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>