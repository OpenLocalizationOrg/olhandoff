<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\data-binding\data-binding-in-depth.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a84aab15d7861580db2e8bf00753c9f77b5bec20</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Data binding in depth</source>
          <target state="new">Data binding in depth</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</source>
          <target state="new">Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Data binding in depth</source>
          <target state="new">Data binding in depth</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Binding class</source>
          <target state="new">Binding class</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>DataContext</source>
          <target state="new">DataContext</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>INotifyPropertyChanged</source>
          <target state="new">INotifyPropertyChanged</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This topic describes data binding features in detail.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This topic describes data binding features in detail.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a short, practical introduction, see <bpt id="p1">[</bpt>Data binding overview<ept id="p1">](data-binding-quickstart.md)</ept>.</source>
          <target state="new">For a short, practical introduction, see <bpt id="p1">[</bpt>Data binding overview<ept id="p1">](data-binding-quickstart.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</source>
          <target state="new">Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.</source>
          <target state="new">Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.</source>
          <target state="new">You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is called one-time binding, and it works well for data whose values don't change during run-time.</source>
          <target state="new">This is called one-time binding, and it works well for data whose values don't change during run-time.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Additionally, you can choose to "observe" the values and to update the UI when they change.</source>
          <target state="new">Additionally, you can choose to "observe" the values and to update the UI when they change.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is called one-way binding, and it works well for read-only data.</source>
          <target state="new">This is called one-way binding, and it works well for read-only data.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.</source>
          <target state="new">Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is called two-way binding, and it works well for read-write data.</source>
          <target state="new">This is called two-way binding, and it works well for read-write data.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Here are some examples.</source>
          <target state="new">Here are some examples.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You could use one-time binding to bind an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept> to the current user's photo.</source>
          <target state="new">You could use one-time binding to bind an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept> to the current user's photo.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You could use one-way binding to bind a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> to a collection of real-time news articles grouped by newspaper section.</source>
          <target state="new">You could use one-way binding to bind a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> to a collection of real-time news articles grouped by newspaper section.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You could use two-way binding to bind a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> to a customer's name in a form.</source>
          <target state="new">You could use two-way binding to bind a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> to a customer's name in a form.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>There are two kinds of binding, and they're both typically declared in UI markup.</source>
          <target state="new">There are two kinds of binding, and they're both typically declared in UI markup.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can choose to use either the <bpt id="p1">[</bpt>{x:Bind} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or the <bpt id="p2">[</bpt>{Binding} markup extension<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.</source>
          <target state="new">You can choose to use either the <bpt id="p1">[</bpt>{x:Bind} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or the <bpt id="p2">[</bpt>{Binding} markup extension<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>And you can even use a mixture of the two in the same app—even on the same UI element.</source>
          <target state="new">And you can even use a mixture of the two in the same app—even on the same UI element.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>{x:Bind} is new for Windows 10 and it has better performance.</source>
          <target state="new">{x:Bind} is new for Windows 10 and it has better performance.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>{Binding} has more features.</source>
          <target state="new">{Binding} has more features.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.</source>
          <target state="new">All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Sample apps that demonstrate {x:Bind}</source>
          <target state="new">Sample apps that demonstrate {x:Bind}</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{x:Bind} sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619989)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>{x:Bind} sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619989)</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>QuizGame<ept id="p1">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>QuizGame<ept id="p1">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML UI Basics sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619992)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>XAML UI Basics sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619992)</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Sample apps that demonstrate {Binding}</source>
          <target state="new">Sample apps that demonstrate {Binding}</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Download the <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532950)</ept> app.</source>
          <target state="new">Download the <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532950)</ept> app.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Download the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> app.</source>
          <target state="new">Download the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> app.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Every binding involves these pieces</source>
          <target state="new">Every binding involves these pieces</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>binding source<ept id="p1">*</ept>.</source>
          <target state="new">A <bpt id="p1">*</bpt>binding source<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.</source>
          <target state="new">This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>binding target<ept id="p1">*</ept>.</source>
          <target state="new">A <bpt id="p1">*</bpt>binding target<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept> of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> in your UI that displays the data.</source>
          <target state="new">This is a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept> of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> in your UI that displays the data.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>binding object<ept id="p1">*</ept>.</source>
          <target state="new">A <bpt id="p1">*</bpt>binding object<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.</source>
          <target state="new">This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The binding object is created at XAML load time from your <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> markup extension.</source>
          <target state="new">The binding object is created at XAML load time from your <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> markup extension.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.</source>
          <target state="new">In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>And we'll link the sections together with the example of binding a button's content to a string property named <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept>, which belongs to a class named <bpt id="p2">**</bpt>HostViewModel<ept id="p2">**</ept>.</source>
          <target state="new">And we'll link the sections together with the example of binding a button's content to a string property named <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept>, which belongs to a class named <bpt id="p2">**</bpt>HostViewModel<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Binding source</source>
          <target state="new">Binding source</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Here's a very rudimentary implementation of a class that we could use as a binding source.</source>
          <target state="new">Here's a very rudimentary implementation of a class that we could use as a binding source.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you're using <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> with Visual C++ component extensions (C++/CX) then you'll need to add the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>BindableAttribute<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> attribute to your binding source class.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you're using <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> with Visual C++ component extensions (C++/CX) then you'll need to add the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>BindableAttribute<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> attribute to your binding source class.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you're using <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> then you don't need that attribute.</source>
          <target state="new">If you're using <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> then you don't need that attribute.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Adding a details view<ept id="p1">](data-binding-quickstart.md#adding-a-details-view)</ept> for a code snippet.</source>
          <target state="new">See <bpt id="p1">[</bpt>Adding a details view<ept id="p1">](data-binding-quickstart.md#adding-a-details-view)</ept> for a code snippet.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>That implementation of <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept>, and its property <bpt id="p2">**</bpt>NextButtonText<ept id="p2">**</ept>, are only appropriate for one-time binding.</source>
          <target state="new">That implementation of <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept>, and its property <bpt id="p2">**</bpt>NextButtonText<ept id="p2">**</ept>, are only appropriate for one-time binding.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.</source>
          <target state="new">But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In order for those kinds of binding to work correctly, you need to make your binding source "observable" to the binding object.</source>
          <target state="new">In order for those kinds of binding to work correctly, you need to make your binding source "observable" to the binding object.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>So in our example, if we want to one-way or two-way bind to the <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.</source>
          <target state="new">So in our example, if we want to one-way or two-way bind to the <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>One way of doing that is to derive the class that represents your binding source from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242356)</ept>, and expose a data value through a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept>.</source>
          <target state="new">One way of doing that is to derive the class that represents your binding source from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242356)</ept>, and expose a data value through a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>That's how a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> becomes observable.</source>
          <target state="new">That's how a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> becomes observable.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FrameworkElements<ept id="p1">**</ept> are good binding sources right out of the box.</source>
          <target state="new"><bpt id="p1">**</bpt>FrameworkElements<ept id="p1">**</ept> are good binding sources right out of the box.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A more lightweight way of making a class observable—and a necessary one for classes that already have a base class—is to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.ComponentModel.INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.</source>
          <target state="new">A more lightweight way of making a class observable—and a necessary one for classes that already have a base class—is to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.ComponentModel.INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This really just involves implementing a single event named <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept>.</source>
          <target state="new">This really just involves implementing a single event named <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An example using <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept> is below.</source>
          <target state="new">An example using <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept> is below.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For C++/CX, you implement <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::UI::Xaml::Data::INotifyPropertyChanged<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>, and the binding source class must either have the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>BindableAttribute<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ICustomPropertyProvider<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For C++/CX, you implement <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::UI::Xaml::Data::INotifyPropertyChanged<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>, and the binding source class must either have the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>BindableAttribute<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ICustomPropertyProvider<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Now the <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept> property is observable.</source>
          <target state="new">Now the <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept> property is observable.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept> event.</source>
          <target state="new">When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept> event.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.</source>
          <target state="new">When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>That's how the binding object knows which property's value to go and read again.</source>
          <target state="new">That's how the binding object knows which property's value to go and read again.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>So that you don't have to implement the pattern shown above multiple times, you can just derive from the <bpt id="p1">**</bpt>BindableBase<ept id="p1">**</ept> bass class that you'll find in the <bpt id="p2">[</bpt>QuizGame<ept id="p2">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept> sample (in the "Common" folder).</source>
          <target state="new">So that you don't have to implement the pattern shown above multiple times, you can just derive from the <bpt id="p1">**</bpt>BindableBase<ept id="p1">**</ept> bass class that you'll find in the <bpt id="p2">[</bpt>QuizGame<ept id="p2">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept> sample (in the "Common" folder).</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Here's an example of how that looks.</source>
          <target state="new">Here's an example of how that looks.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Raising the <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept> event with an argument of <bpt id="p2">[</bpt><bpt id="p3">**</bpt>String.Empty<ept id="p3">**</ept><ept id="p2">](T:System.String)</ept> or <bpt id="p4">**</bpt>null<ept id="p4">**</ept> indicates that all non-indexer properties on the object should be re-read.</source>
          <target state="new">Raising the <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept> event with an argument of <bpt id="p2">[</bpt><bpt id="p3">**</bpt>String.Empty<ept id="p3">**</ept><ept id="p2">](T:System.String)</ept> or <bpt id="p4">**</bpt>null<ept id="p4">**</ept> indicates that all non-indexer properties on the object should be re-read.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can raise the event to indicate that indexer properties on the object have changed by using an argument of "Item<ph id="ph1">\[</ph><bpt id="p1">*</bpt>indexer<ept id="p1">*</ept><ph id="ph2">\]</ph>" for specific indexers (where <bpt id="p2">*</bpt>indexer<ept id="p2">*</ept> is the index value), or a value of "Item<ph id="ph3">\[\]</ph>" for all indexers.</source>
          <target state="new">You can raise the event to indicate that indexer properties on the object have changed by using an argument of "Item<ph id="ph1">\[</ph><bpt id="p1">*</bpt>indexer<ept id="p1">*</ept><ph id="ph2">\]</ph>" for specific indexers (where <bpt id="p2">*</bpt>indexer<ept id="p2">*</ept> is the index value), or a value of "Item<ph id="ph3">\[\]</ph>" for all indexers.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.</source>
          <target state="new">A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In C# and Visual Basic code, you can one-time bind to an object that implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>List(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.Generic.List%601)</ept> to display a collection that does not change at run-time.</source>
          <target state="new">In C# and Visual Basic code, you can one-time bind to an object that implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>List(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.Generic.List%601)</ept> to display a collection that does not change at run-time.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For an observable collection (observing when items are added to and removed from the collection), one-way bind to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> instead.</source>
          <target state="new">For an observable collection (observing when items are added to and removed from the collection), one-way bind to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> instead.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In C++ code, you can bind to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Vector<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/dn858385.aspx)</ept> for both observable and non-observable collections.</source>
          <target state="new">In C++ code, you can bind to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Vector<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/dn858385.aspx)</ept> for both observable and non-observable collections.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To bind to your own collection classes, use the guidance in the following table.</source>
          <target state="new">To bind to your own collection classes, use the guidance in the following table.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Scenario</source>
          <target state="new">Scenario</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>C# and VB (CLR)</source>
          <target state="new">C# and VB (CLR)</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>C++/CX</source>
          <target state="new">C++/CX</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Bind to an object.</source>
          <target state="new">Bind to an object.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Can be any object.</source>
          <target state="new">Can be any object.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Object must have <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BindableAttribute<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ICustomPropertyProvider<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</source>
          <target state="new">Object must have <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BindableAttribute<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ICustomPropertyProvider<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Get property change updates from a bound object.</source>
          <target state="new">Get property change updates from a bound object.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Object must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.ComponentModel. INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.</source>
          <target state="new">Object must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.ComponentModel. INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Object must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Data. INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>.</source>
          <target state="new">Object must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Data. INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Bind to a collection.</source>
          <target state="new">Bind to a collection.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>List(Of T)</source>
          <target state="new">List(Of T)</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Platform::Collections::Vector<ph id="ph1">&amp;lt;</ph>T</source>
          <target state="new">Platform::Collections::Vector<ph id="ph1">&amp;lt;</ph>T</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Get collection change updates from a bound collection.</source>
          <target state="new">Get collection change updates from a bound collection.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ObservableCollection(Of T)</source>
          <target state="new">ObservableCollection(Of T)</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Platform::Collections::Vector<ph id="ph1">&amp;lt;</ph>T</source>
          <target state="new">Platform::Collections::Vector<ph id="ph1">&amp;lt;</ph>T</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Implement a collection that supports binding.</source>
          <target state="new">Implement a collection that supports binding.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>List(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.Generic.List%601)</ept> or implement <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IList<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Generic.IList%601)</ept>(Of <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Object<ept id="p8">**</ept><ept id="p7">](T:System.Object)</ept>), <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IEnumerable<ept id="p10">**</ept><ept id="p9">](T:System.Collections.IEnumerable)</ept>, or <bpt id="p11">[</bpt><bpt id="p12">**</bpt>IEnumerable<ept id="p12">**</ept><ept id="p11">](T:System.Collections.Generic.IEnumerable%601)</ept>(Of <bpt id="p13">**</bpt>Object<ept id="p13">**</ept>).</source>
          <target state="new">Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>List(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.Generic.List%601)</ept> or implement <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IList<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Generic.IList%601)</ept>(Of <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Object<ept id="p8">**</ept><ept id="p7">](T:System.Object)</ept>), <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IEnumerable<ept id="p10">**</ept><ept id="p9">](T:System.Collections.IEnumerable)</ept>, or <bpt id="p11">[</bpt><bpt id="p12">**</bpt>IEnumerable<ept id="p12">**</ept><ept id="p11">](T:System.Collections.Generic.IEnumerable%601)</ept>(Of <bpt id="p13">**</bpt>Object<ept id="p13">**</ept>).</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Binding to generic <bpt id="p1">**</bpt>IList(Of T)<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IEnumerable(Of T)<ept id="p2">**</ept> is not supported.</source>
          <target state="new">Binding to generic <bpt id="p1">**</bpt>IList(Of T)<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IEnumerable(Of T)<ept id="p2">**</ept> is not supported.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableIterable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701957)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IVector<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR206631)</ept><ph id="ph1">&amp;lt;</ph><bpt id="p7">[</bpt><bpt id="p8">**</bpt>Object<ept id="p8">**</ept><ept id="p7">](T:System.Object)</ept><ph id="ph2">^&amp;gt;</ph>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IIterable<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/BR226024)</ept><ph id="ph3">&amp;lt;</ph><bpt id="p11">**</bpt>Object<ept id="p11">**</ept><ph id="ph4">^&amp;gt;</ph>, <bpt id="p12">**</bpt>IVector<ept id="p12">**</ept><ph id="ph5">&amp;lt;</ph><bpt id="p13">[</bpt><bpt id="p14">**</bpt>IInspectable<ept id="p14">**</ept><ept id="p13">](https://msdn.microsoft.com/library/BR205821)</ept><ph id="ph6">\*&amp;gt;</ph>, or <bpt id="p15">**</bpt>IIterable<ept id="p15">**</ept><ph id="ph7">&amp;lt;</ph><bpt id="p16">**</bpt>IInspectable<ept id="p16">**</ept><ph id="ph8">\*&amp;gt;</ph>.</source>
          <target state="new">Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableIterable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701957)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IVector<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR206631)</ept><ph id="ph1">&amp;lt;</ph><bpt id="p7">[</bpt><bpt id="p8">**</bpt>Object<ept id="p8">**</ept><ept id="p7">](T:System.Object)</ept><ph id="ph2">^&amp;gt;</ph>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IIterable<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/BR226024)</ept><ph id="ph3">&amp;lt;</ph><bpt id="p11">**</bpt>Object<ept id="p11">**</ept><ph id="ph4">^&amp;gt;</ph>, <bpt id="p12">**</bpt>IVector<ept id="p12">**</ept><ph id="ph5">&amp;lt;</ph><bpt id="p13">[</bpt><bpt id="p14">**</bpt>IInspectable<ept id="p14">**</ept><ept id="p13">](https://msdn.microsoft.com/library/BR205821)</ept><ph id="ph6">\*&amp;gt;</ph>, or <bpt id="p15">**</bpt>IIterable<ept id="p15">**</ept><ph id="ph7">&amp;lt;</ph><bpt id="p16">**</bpt>IInspectable<ept id="p16">**</ept><ph id="ph8">\*&amp;gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Binding to generic <bpt id="p1">**</bpt>IVector<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> and <bpt id="p2">**</bpt>IIterable<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">**</ept> is not supported.</source>
          <target state="new">Binding to generic <bpt id="p1">**</bpt>IVector<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> and <bpt id="p2">**</bpt>IIterable<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">**</ept> is not supported.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Implement a collection that supports collection change updates.</source>
          <target state="new">Implement a collection that supports collection change updates.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>INotifyCollectionChanged<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.</source>
          <target state="new">Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>INotifyCollectionChanged<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableObservableVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>.</source>
          <target state="new">Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableObservableVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Implement a collection that supports incremental loading.</source>
          <target state="new">Implement a collection that supports incremental loading.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>INotifyCollectionChanged<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.</source>
          <target state="new">Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>INotifyCollectionChanged<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Additionally, implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISupportIncrementalLoading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</source>
          <target state="new">Additionally, implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISupportIncrementalLoading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableObservableVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ISupportIncrementalLoading<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</source>
          <target state="new">Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableObservableVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ISupportIncrementalLoading<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.</source>
          <target state="new">You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, you can bind list controls to Bing image query results without having to load all the results at once.</source>
          <target state="new">For example, you can bind list controls to Bing image query results without having to load all the results at once.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Instead, you load only some results immediately, and load additional results as needed.</source>
          <target state="new">Instead, you load only some results immediately, and load additional results as needed.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To support incremental loading, you must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISupportIncrementalLoading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept> on a data source that supports collection change notification.</source>
          <target state="new">To support incremental loading, you must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISupportIncrementalLoading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept> on a data source that supports collection change notification.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.</source>
          <target state="new">When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Binding target</source>
          <target state="new">Binding target</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In the two examples below, the <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> property is the binding target, and its value is set to a markup extension which declares the binding object.</source>
          <target state="new">In the two examples below, the <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> property is the binding target, and its value is set to a markup extension which declares the binding object.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>First <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> is shown, and then <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.</source>
          <target state="new">First <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> is shown, and then <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Declaring bindings in markup is the common case (it's convenient, readable, and toolable).</source>
          <target state="new">Declaring bindings in markup is the common case (it's convenient, readable, and toolable).</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>But you can avoid markup and imperatively (programmatically) create an instance of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> class instead if you need to.</source>
          <target state="new">But you can avoid markup and imperatively (programmatically) create an instance of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> class instead if you need to.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Binding object declared using {x:Bind}</source>
          <target state="new">Binding object declared using {x:Bind}</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>There's one step we need to do before we author our <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> markup.</source>
          <target state="new">There's one step we need to do before we author our <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> markup.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>We need to expose our binding source class from the class that represents our page of markup.</source>
          <target state="new">We need to expose our binding source class from the class that represents our page of markup.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>We do that by adding a property (of type <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept> in this case) to our <bpt id="p2">**</bpt>HostView<ept id="p2">**</ept> page class.</source>
          <target state="new">We do that by adding a property (of type <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept> in this case) to our <bpt id="p2">**</bpt>HostView<ept id="p2">**</ept> page class.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>That done, we can now take a closer look at the markup that declares the binding object.</source>
          <target state="new">That done, we can now take a closer look at the markup that declares the binding object.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The example below uses the same <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> binding target we used in the "Binding target" section earlier, and shows it being bound to the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</source>
          <target state="new">The example below uses the same <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> binding target we used in the "Binding target" section earlier, and shows it being bound to the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Notice the value that we specify for <bpt id="p1">**</bpt>Path<ept id="p1">**</ept>.</source>
          <target state="new">Notice the value that we specify for <bpt id="p1">**</bpt>Path<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This value is interpreted in the context of the page itself, and in this case the path begins by referencing the <bpt id="p1">**</bpt>ViewModel<ept id="p1">**</ept> property that we just added to the <bpt id="p2">**</bpt>HostView<ept id="p2">**</ept> page.</source>
          <target state="new">This value is interpreted in the context of the page itself, and in this case the path begins by referencing the <bpt id="p1">**</bpt>ViewModel<ept id="p1">**</ept> property that we just added to the <bpt id="p2">**</bpt>HostView<ept id="p2">**</ept> page.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>That property returns a <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept> instance, and so we can dot into that object to access the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</source>
          <target state="new">That property returns a <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept> instance, and so we can dot into that object to access the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>And we specify <bpt id="p1">**</bpt>Mode<ept id="p1">**</ept>, to override the <bpt id="p2">[</bpt>{x:Bind}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> default of one-time.</source>
          <target state="new">And we specify <bpt id="p1">**</bpt>Mode<ept id="p1">**</ept>, to override the <bpt id="p2">[</bpt>{x:Bind}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> default of one-time.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Path<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-path)</ept> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Path<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-path)</ept> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Property-path syntax<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt185586)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Property-path syntax<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt185586)</ept>.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICustomPropertyProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</source>
          <target state="new">Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICustomPropertyProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For other settings, see <bpt id="p1">[</bpt>{x:Bind} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept>.</source>
          <target state="new">For other settings, see <bpt id="p1">[</bpt>{x:Bind} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept>.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Changes to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>TextBox.Text<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209683-text)</ept> are sent to a two-way bound source when the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>TextBox<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> loses focus, and not after every user keystroke.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Changes to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>TextBox.Text<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209683-text)</ept> are sent to a two-way bound source when the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>TextBox<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> loses focus, and not after every user keystroke.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>DataTemplate and x:DataType</source>
          <target state="new">DataTemplate and x:DataType</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Inside a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataTemplate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept> (whether used as an item template, a content template, or a header template), the value of <bpt id="p3">**</bpt>Path<ept id="p3">**</ept> is not interpreted in the context of the page, but in the context of the data object being templated.</source>
          <target state="new">Inside a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataTemplate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept> (whether used as an item template, a content template, or a header template), the value of <bpt id="p3">**</bpt>Path<ept id="p3">**</ept> is not interpreted in the context of the page, but in the context of the data object being templated.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>So that its bindings can be validated (and efficient code generated for them) at compile-time, a <bpt id="p1">**</bpt>DataTemplate<ept id="p1">**</ept> needs to declare the type of its data object using <bpt id="p2">**</bpt>x:DataType<ept id="p2">**</ept>.</source>
          <target state="new">So that its bindings can be validated (and efficient code generated for them) at compile-time, a <bpt id="p1">**</bpt>DataTemplate<ept id="p1">**</ept> needs to declare the type of its data object using <bpt id="p2">**</bpt>x:DataType<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The example given below could be used as the <bpt id="p1">**</bpt>ItemTemplate<ept id="p1">**</ept> of an items control bound to a collection of <bpt id="p2">**</bpt>SampleDataGroup<ept id="p2">**</ept> objects.</source>
          <target state="new">The example given below could be used as the <bpt id="p1">**</bpt>ItemTemplate<ept id="p1">**</ept> of an items control bound to a collection of <bpt id="p2">**</bpt>SampleDataGroup<ept id="p2">**</ept> objects.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Weakly-typed objects in your Path</source>
          <target state="new">Weakly-typed objects in your Path</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Consider for example that you have a type named SampleDataGroup, which implements a string property named Title.</source>
          <target state="new">Consider for example that you have a type named SampleDataGroup, which implements a string property named Title.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>And you have a property MainPage.SampleDataGroupAsObject, which is of type object but which actually returns an instance of SampleDataGroup.</source>
          <target state="new">And you have a property MainPage.SampleDataGroupAsObject, which is of type object but which actually returns an instance of SampleDataGroup.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The binding <ph id="ph1">`&lt;TextBlock Text="{x:Bind SampleDataGroupAsObject.Title}"/&gt;`</ph> will result in a compile error because the Title property is not found on the type object.</source>
          <target state="new">The binding <ph id="ph1">`&lt;TextBlock Text="{x:Bind SampleDataGroupAsObject.Title}"/&gt;`</ph> will result in a compile error because the Title property is not found on the type object.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The remedy for this is to add a cast to your Path syntax like this: <ph id="ph1">`&lt;TextBlock Text="{x:Bind SampleDataGroupAsObject.(data:SampleDataGroup.Title)}"/&gt;`</ph>.</source>
          <target state="new">The remedy for this is to add a cast to your Path syntax like this: <ph id="ph1">`&lt;TextBlock Text="{x:Bind SampleDataGroupAsObject.(data:SampleDataGroup.Title)}"/&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Here's another example where Element is declared as object but is actually a TextBlock: <ph id="ph1">`&lt;TextBlock Text="{x:Bind Element.Text}"/&gt;`</ph>.</source>
          <target state="new">Here's another example where Element is declared as object but is actually a TextBlock: <ph id="ph1">`&lt;TextBlock Text="{x:Bind Element.Text}"/&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>And a cast remedies the issue: <ph id="ph1">`&lt;TextBlock Text="{x:Bind Element.(TextBlock.Text)}"/&gt;`</ph>.</source>
          <target state="new">And a cast remedies the issue: <ph id="ph1">`&lt;TextBlock Text="{x:Bind Element.(TextBlock.Text)}"/&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If your data loads asynchronously</source>
          <target state="new">If your data loads asynchronously</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Code to support <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is generated at compile-time in the partial classes for your pages.</source>
          <target state="new">Code to support <bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is generated at compile-time in the partial classes for your pages.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>These files can be found in your <ph id="ph1">`obj`</ph> folder, with names like (for C#) <ph id="ph2">`&lt;view name&gt;.g.cs`</ph>.</source>
          <target state="new">These files can be found in your <ph id="ph1">`obj`</ph> folder, with names like (for C#) <ph id="ph2">`&lt;view name&gt;.g.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The generated code includes a handler for your page's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Loading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706-loading)</ept> event, and that handler calls the <bpt id="p3">**</bpt>Initialize<ept id="p3">**</ept> method on a generated class that represent's your page's bindings.</source>
          <target state="new">The generated code includes a handler for your page's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Loading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706-loading)</ept> event, and that handler calls the <bpt id="p3">**</bpt>Initialize<ept id="p3">**</ept> method on a generated class that represent's your page's bindings.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> in turn calls <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> to begin moving data between the binding source and the target.</source>
          <target state="new"><bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> in turn calls <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> to begin moving data between the binding source and the target.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Loading<ept id="p1">**</ept> is raised just before the first measure pass of the page or user control.</source>
          <target state="new"><bpt id="p1">**</bpt>Loading<ept id="p1">**</ept> is raised just before the first measure pass of the page or user control.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>So if your data is loaded asynchronously it may not be ready by the time <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> is called.</source>
          <target state="new">So if your data is loaded asynchronously it may not be ready by the time <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> is called.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>So, after you've loaded data, you can force one-time bindings to be initialized by calling <ph id="ph1">`this-&gt;Bindings-&gt;Update();`</ph>.</source>
          <target state="new">So, after you've loaded data, you can force one-time bindings to be initialized by calling <ph id="ph1">`this-&gt;Bindings-&gt;Update();`</ph>.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If you only need one-time bindings for asynchronously-loaded data then it’s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes.</source>
          <target state="new">If you only need one-time bindings for asynchronously-loaded data then it’s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>.</source>
          <target state="new">If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="new">Limitations</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names ("if it walks, swims, and quacks like a duck then it's a duck").</source>
          <target state="new"><bpt id="p1">**</bpt>{x:Bind}<ept id="p1">**</ept> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names ("if it walks, swims, and quacks like a duck then it's a duck").</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.</source>
          <target state="new">With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For these scenarios, use <bpt id="p1">**</bpt>{Binding}<ept id="p1">**</ept>.</source>
          <target state="new">For these scenarios, use <bpt id="p1">**</bpt>{Binding}<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Binding object declared using {Binding}</source>
          <target state="new">Binding object declared using {Binding}</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{Binding}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> assumes, by default, that you're binding to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DataContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> of your markup page.</source>
          <target state="new"><bpt id="p1">[</bpt>{Binding}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> assumes, by default, that you're binding to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DataContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> of your markup page.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>So we'll set the <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> of our page to be an instance of our binding source class (of type <bpt id="p2">**</bpt>HostViewModel<ept id="p2">**</ept> in this case).</source>
          <target state="new">So we'll set the <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> of our page to be an instance of our binding source class (of type <bpt id="p2">**</bpt>HostViewModel<ept id="p2">**</ept> in this case).</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The example below shows the markup that declares the binding object.</source>
          <target state="new">The example below shows the markup that declares the binding object.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>We use the same <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> binding target we used in the "Binding target" section earlier, and we bind to the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</source>
          <target state="new">We use the same <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> binding target we used in the "Binding target" section earlier, and we bind to the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Notice the value that we specify for <bpt id="p1">**</bpt>Path<ept id="p1">**</ept>.</source>
          <target state="new">Notice the value that we specify for <bpt id="p1">**</bpt>Path<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This value is interpreted in the context of the page's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept>, which in this example is set to an instance of <bpt id="p3">**</bpt>HostViewModel<ept id="p3">**</ept>.</source>
          <target state="new">This value is interpreted in the context of the page's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept>, which in this example is set to an instance of <bpt id="p3">**</bpt>HostViewModel<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The path references the <bpt id="p1">**</bpt>HostViewModel.NextButtonText<ept id="p1">**</ept> property.</source>
          <target state="new">The path references the <bpt id="p1">**</bpt>HostViewModel.NextButtonText<ept id="p1">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>We can omit <bpt id="p1">**</bpt>Mode<ept id="p1">**</ept>, because the <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> default of one-way works here.</source>
          <target state="new">We can omit <bpt id="p1">**</bpt>Mode<ept id="p1">**</ept>, because the <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> default of one-way works here.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The default value of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> for a UI element is the inherited value of its parent.</source>
          <target state="new">The default value of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> for a UI element is the inherited value of its parent.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You can of course override that default by setting <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> explicitly, which is in turn inherited by children by default.</source>
          <target state="new">You can of course override that default by setting <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> explicitly, which is in turn inherited by children by default.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Setting <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> explicitly on an element is useful when you want to have multiple bindings that use the same source.</source>
          <target state="new">Setting <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> explicitly on an element is useful when you want to have multiple bindings that use the same source.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>A binding object has a <bpt id="p1">**</bpt>Source<ept id="p1">**</ept> property, which defaults to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DataContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> of the UI element on which the binding is declared.</source>
          <target state="new">A binding object has a <bpt id="p1">**</bpt>Source<ept id="p1">**</ept> property, which defaults to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DataContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> of the UI element on which the binding is declared.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>You can override this default by setting <bpt id="p1">**</bpt>Source<ept id="p1">**</ept>, <bpt id="p2">**</bpt>RelativeSource<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>ElementName<ept id="p3">**</ept> explicitly on the binding (see <bpt id="p4">[</bpt>{Binding}<ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> for details).</source>
          <target state="new">You can override this default by setting <bpt id="p1">**</bpt>Source<ept id="p1">**</ept>, <bpt id="p2">**</bpt>RelativeSource<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>ElementName<ept id="p3">**</ept> explicitly on the binding (see <bpt id="p4">[</bpt>{Binding}<ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> for details).</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Inside a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataTemplate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept>, the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DataContext<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> is set to the data object being templated.</source>
          <target state="new">Inside a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataTemplate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept>, the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DataContext<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> is set to the data object being templated.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The example given below could be used as the <bpt id="p1">**</bpt>ItemTemplate<ept id="p1">**</ept> of an items control bound to a collection of any type that has string properties named <bpt id="p2">**</bpt>Title<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Description<ept id="p3">**</ept>.</source>
          <target state="new">The example given below could be used as the <bpt id="p1">**</bpt>ItemTemplate<ept id="p1">**</ept> of an items control bound to a collection of any type that has string properties named <bpt id="p2">**</bpt>Title<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Description<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  By default, changes to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>TextBox.Text<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209683-text)</ept> are sent to a two-way bound source when the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>TextBox<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> loses focus.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  By default, changes to <bpt id="p2">[</bpt><bpt id="p3">**</bpt>TextBox.Text<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209683-text)</ept> are sent to a two-way bound source when the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>TextBox<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> loses focus.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>To cause changes to be sent after every user keystroke, set <bpt id="p1">**</bpt>UpdateSourceTrigger<ept id="p1">**</ept> to <bpt id="p2">**</bpt>PropertyChanged<ept id="p2">**</ept> on the binding in markup.</source>
          <target state="new">To cause changes to be sent after every user keystroke, set <bpt id="p1">**</bpt>UpdateSourceTrigger<ept id="p1">**</ept> to <bpt id="p2">**</bpt>PropertyChanged<ept id="p2">**</ept> on the binding in markup.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You can also completely take control of when changes are sent to the source by setting <bpt id="p1">**</bpt>UpdateSourceTrigger<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Explicit<ept id="p2">**</ept>.</source>
          <target state="new">You can also completely take control of when changes are sent to the source by setting <bpt id="p1">**</bpt>UpdateSourceTrigger<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Explicit<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>You then handle events on the text box (typically <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox.TextChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683-textchanged)</ept>), call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetBindingExpression<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706-getbindingexpression)</ept> on the target to get a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>BindingExpression<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209820expression)</ept> object, and finally call <bpt id="p7">[</bpt><bpt id="p8">**</bpt>BindingExpression.UpdateSource<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR209820expression-updatesource)</ept> to programmatically update the data source.</source>
          <target state="new">You then handle events on the text box (typically <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox.TextChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683-textchanged)</ept>), call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetBindingExpression<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706-getbindingexpression)</ept> on the target to get a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>BindingExpression<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209820expression)</ept> object, and finally call <bpt id="p7">[</bpt><bpt id="p8">**</bpt>BindingExpression.UpdateSource<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR209820expression-updatesource)</ept> to programmatically update the data source.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Path<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-path)</ept> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Path<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-path)</ept> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Property-path syntax<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt185586)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Property-path syntax<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt185586)</ept>.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICustomPropertyProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</source>
          <target state="new">Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICustomPropertyProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ElementName<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-elementname)</ept> property is useful for element-to-element binding.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ElementName<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-elementname)</ept> property is useful for element-to-element binding.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativeSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-relativesource)</ept> property has several uses, one of which is as a more powerful alternative to template binding inside a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ControlTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209391)</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RelativeSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-relativesource)</ept> property has several uses, one of which is as a more powerful alternative to template binding inside a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ControlTemplate<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209391)</ept>.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For other settings, see <bpt id="p1">[</bpt>{Binding} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Binding<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> class.</source>
          <target state="new">For other settings, see <bpt id="p1">[</bpt>{Binding} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> and the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Binding<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> class.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>What if the source and the target are not the same type?</source>
          <target state="new">What if the source and the target are not the same type?</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>If you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another.</source>
          <target state="new">If you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there.</source>
          <target state="new">There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties.</source>
          <target state="new">But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>In that case you'll want to use something known as a value converter.</source>
          <target state="new">In that case you'll want to use something known as a value converter.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This section describes how to implement and consume a value converter.</source>
          <target state="new">This section describes how to implement and consume a value converter.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Here's a value converter, suitable for a one-time or a one-way binding, that converts a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DateTime<ept id="p2">**</ept><ept id="p1">](T:System.DateTime)</ept> value to a string value containing the month.</source>
          <target state="new">Here's a value converter, suitable for a one-time or a one-way binding, that converts a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DateTime<ept id="p2">**</ept><ept id="p1">](T:System.DateTime)</ept> value to a string value containing the month.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The class implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209903)</ept>.</source>
          <target state="new">The class implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209903)</ept>.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>And here's how you consume that value converter in your binding object markup.</source>
          <target state="new">And here's how you consume that value converter in your binding object markup.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The binding engine calls the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Convert<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209903-convert)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ConvertBack<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209903-convertback)</ept> methods if the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Converter<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209820-converter)</ept> parameter is defined for the binding.</source>
          <target state="new">The binding engine calls the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Convert<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209903-convert)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ConvertBack<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209903-convertback)</ept> methods if the <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Converter<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209820-converter)</ept> parameter is defined for the binding.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>When data is passed from the source, the binding engine calls <bpt id="p1">**</bpt>Convert<ept id="p1">**</ept> and passes the returned data to the target.</source>
          <target state="new">When data is passed from the source, the binding engine calls <bpt id="p1">**</bpt>Convert<ept id="p1">**</ept> and passes the returned data to the target.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>When data is passed from the target (for a two-way binding), the binding engine calls <bpt id="p1">**</bpt>ConvertBack<ept id="p1">**</ept> and passes the returned data to the source.</source>
          <target state="new">When data is passed from the target (for a two-way binding), the binding engine calls <bpt id="p1">**</bpt>ConvertBack<ept id="p1">**</ept> and passes the returned data to the source.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The converter also has optional parameters: <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ConverterLanguage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-converterlanguage)</ept>, which allows specifying the language to be used in the conversion, and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ConverterParameter<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209820-converterparameter)</ept>, which allows passing a parameter for the conversion logic.</source>
          <target state="new">The converter also has optional parameters: <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ConverterLanguage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820-converterlanguage)</ept>, which allows specifying the language to be used in the conversion, and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ConverterParameter<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209820-converterparameter)</ept>, which allows passing a parameter for the conversion logic.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For an example that uses a converter parameter, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209903)</ept>.</source>
          <target state="new">For an example that uses a converter parameter, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IValueConverter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209903)</ept>.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If there is an error in the conversion, do not throw an exception.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If there is an error in the conversion, do not throw an exception.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Instead, return <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.UnsetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242362-unsetvalue)</ept>, which will stop the data transfer.</source>
          <target state="new">Instead, return <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.UnsetValue<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242362-unsetvalue)</ept>, which will stop the data transfer.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To display a default value to use whenever the binding source cannot be resolved, set the <bpt id="p1">**</bpt>FallbackValue<ept id="p1">**</ept> property on the binding object in markup.</source>
          <target state="new">To display a default value to use whenever the binding source cannot be resolved, set the <bpt id="p1">**</bpt>FallbackValue<ept id="p1">**</ept> property on the binding object in markup.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This is useful to handle conversion and formatting errors.</source>
          <target state="new">This is useful to handle conversion and formatting errors.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>It is also useful to bind to source properties that might not exist on all objects in a bound collection of heterogeneous types.</source>
          <target state="new">It is also useful to bind to source properties that might not exist on all objects in a bound collection of heterogeneous types.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If you bind a text control to a value that is not a string, the data binding engine will convert the value to a string.</source>
          <target state="new">If you bind a text control to a value that is not a string, the data binding engine will convert the value to a string.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>If the value is a reference type, the data binding engine will retrieve the string value by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICustomPropertyProvider.GetStringRepresentation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209878-getstringrepresentation)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IStringable.ToString<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/Dn302136)</ept> if available, and will otherwise call <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Object.ToString<ept id="p6">**</ept><ept id="p5">](M:System.Object.ToString)</ept>.</source>
          <target state="new">If the value is a reference type, the data binding engine will retrieve the string value by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICustomPropertyProvider.GetStringRepresentation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209878-getstringrepresentation)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IStringable.ToString<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/Dn302136)</ept> if available, and will otherwise call <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Object.ToString<ept id="p6">**</ept><ept id="p5">](M:System.Object.ToString)</ept>.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Note, however, that the binding engine will ignore any <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> implementation that hides the base-class implementation.</source>
          <target state="new">Note, however, that the binding engine will ignore any <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> implementation that hides the base-class implementation.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Subclass implementations should override the base class <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method instead.</source>
          <target state="new">Subclass implementations should override the base class <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method instead.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Similarly, in native languages, all managed objects appear to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICustomPropertyProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IStringable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/Dn302135)</ept>.</source>
          <target state="new">Similarly, in native languages, all managed objects appear to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICustomPropertyProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IStringable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/Dn302135)</ept>.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>However, all calls to <bpt id="p1">**</bpt>GetStringRepresentation<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IStringable.ToString<ept id="p2">**</ept> are routed to <bpt id="p3">**</bpt>Object.ToString<ept id="p3">**</ept> or an override of that method, and never to a new <bpt id="p4">**</bpt>ToString<ept id="p4">**</ept> implementation that hides the base-class implementation.</source>
          <target state="new">However, all calls to <bpt id="p1">**</bpt>GetStringRepresentation<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IStringable.ToString<ept id="p2">**</ept> are routed to <bpt id="p3">**</bpt>Object.ToString<ept id="p3">**</ept> or an override of that method, and never to a new <bpt id="p4">**</bpt>ToString<ept id="p4">**</ept> implementation that hides the base-class implementation.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Resource dictionaries with {x:Bind}</source>
          <target state="new">Resource dictionaries with {x:Bind}</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>{x:Bind} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> depends on code generation, so it needs a code-behind file containing a constructor that calls <bpt id="p2">**</bpt>InitializeComponent<ept id="p2">**</ept> (to initialize the generated code).</source>
          <target state="new">The <bpt id="p1">[</bpt>{x:Bind} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> depends on code generation, so it needs a code-behind file containing a constructor that calls <bpt id="p2">**</bpt>InitializeComponent<ept id="p2">**</ept> (to initialize the generated code).</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>You re-use the resource dictionary by instantiating its type (so that <bpt id="p1">**</bpt>InitializeComponent<ept id="p1">**</ept> is called) instead of referencing its filename.</source>
          <target state="new">You re-use the resource dictionary by instantiating its type (so that <bpt id="p1">**</bpt>InitializeComponent<ept id="p1">**</ept> is called) instead of referencing its filename.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Here's an example of what to do if you have an existing resource dictionary and you want to use {x:Bind} in it.</source>
          <target state="new">Here's an example of what to do if you have an existing resource dictionary and you want to use {x:Bind} in it.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>TemplatesResourceDictionary.xaml</source>
          <target state="new">TemplatesResourceDictionary.xaml</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>TemplatesResourceDictionary.xaml.cs</source>
          <target state="new">TemplatesResourceDictionary.xaml.cs</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>MainPage.xaml</source>
          <target state="new">MainPage.xaml</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Event binding and ICommand</source>
          <target state="new">Event binding and ICommand</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> supports a feature called event binding.</source>
          <target state="new"><bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> supports a feature called event binding.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file.</source>
          <target state="new">With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Let's say you have a <bpt id="p1">**</bpt>RootFrame<ept id="p1">**</ept> property on your <bpt id="p2">**</bpt>MainPage<ept id="p2">**</ept> class.</source>
          <target state="new">Let's say you have a <bpt id="p1">**</bpt>RootFrame<ept id="p1">**</ept> property on your <bpt id="p2">**</bpt>MainPage<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>You can then bind a button's <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> event to a method on the <bpt id="p2">**</bpt>Frame<ept id="p2">**</ept> object returned by the <bpt id="p3">**</bpt>RootFrame<ept id="p3">**</ept> property like this.</source>
          <target state="new">You can then bind a button's <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> event to a method on the <bpt id="p2">**</bpt>Frame<ept id="p2">**</ept> object returned by the <bpt id="p3">**</bpt>RootFrame<ept id="p3">**</ept> property like this.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Note that we also bind the button's <bpt id="p1">**</bpt>IsEnabled<ept id="p1">**</ept> property to another member of the same <bpt id="p2">**</bpt>Frame<ept id="p2">**</ept>.</source>
          <target state="new">Note that we also bind the button's <bpt id="p1">**</bpt>IsEnabled<ept id="p1">**</ept> property to another member of the same <bpt id="p2">**</bpt>Frame<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Overloaded methods cannot be used to handle an event with this technique.</source>
          <target state="new">Overloaded methods cannot be used to handle an event with this technique.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively.</source>
          <target state="new">Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>In this case, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Frame.GoForward<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242693)</ept> is not overloaded and it has no parameters (but it would still be valid even if it took two <bpt id="p3">**</bpt>object<ept id="p3">**</ept> parameters).</source>
          <target state="new">In this case, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Frame.GoForward<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242693)</ept> is not overloaded and it has no parameters (but it would still be valid even if it took two <bpt id="p3">**</bpt>object<ept id="p3">**</ept> parameters).</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Frame.GoBack<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn996568)</ept> is overloaded, though, so we can't use that method with this technique.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Frame.GoBack<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn996568)</ept> is overloaded, though, so we can't use that method with this technique.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICommand<ept id="p2">**</ept><ept id="p1">](T:System.Windows.Input.ICommand)</ept> interface).</source>
          <target state="new">The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICommand<ept id="p2">**</ept><ept id="p1">](T:System.Windows.Input.ICommand)</ept> interface).</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Both <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> and <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> work with commands.</source>
          <target state="new">Both <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> and <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> work with commands.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>So that you don't have to implement the command pattern multiple times, you can use the <bpt id="p1">**</bpt>DelegateCommand<ept id="p1">**</ept> helper class that you'll find in the <bpt id="p2">[</bpt>QuizGame<ept id="p2">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept> sample (in the "Common" folder).</source>
          <target state="new">So that you don't have to implement the command pattern multiple times, you can use the <bpt id="p1">**</bpt>DelegateCommand<ept id="p1">**</ept> helper class that you'll find in the <bpt id="p2">[</bpt>QuizGame<ept id="p2">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept> sample (in the "Common" folder).</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Binding to a collection of folders or files</source>
          <target state="new">Binding to a collection of folders or files</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You can use the APIs in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.Storage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227346)</ept> namespace to retrieve folder and file data.</source>
          <target state="new">You can use the APIs in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.Storage<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR227346)</ept> namespace to retrieve folder and file data.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>However, the various <bpt id="p1">**</bpt>GetFilesAsync<ept id="p1">**</ept>, <bpt id="p2">**</bpt>GetFoldersAsync<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>GetItemsAsync<ept id="p3">**</ept> methods do not return values that are suitable for binding to list controls.</source>
          <target state="new">However, the various <bpt id="p1">**</bpt>GetFilesAsync<ept id="p1">**</ept>, <bpt id="p2">**</bpt>GetFoldersAsync<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>GetItemsAsync<ept id="p3">**</ept> methods do not return values that are suitable for binding to list controls.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Instead, you must bind to the return values of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetVirtualizedFilesVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701422)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetVirtualizedFoldersVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701428)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GetVirtualizedItemsVector<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Hh701430)</ept> methods of the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>FileInformationFactory<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR207501)</ept> class.</source>
          <target state="new">Instead, you must bind to the return values of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetVirtualizedFilesVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701422)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GetVirtualizedFoldersVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701428)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GetVirtualizedItemsVector<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Hh701430)</ept> methods of the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>FileInformationFactory<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/BR207501)</ept> class.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The following code example from the <bpt id="p1">[</bpt>StorageDataSource and GetVirtualizedFilesVector sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=228621)</ept> shows the typical usage pattern.</source>
          <target state="new">The following code example from the <bpt id="p1">[</bpt>StorageDataSource and GetVirtualizedFilesVector sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=228621)</ept> shows the typical usage pattern.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Remember to declare the <bpt id="p1">**</bpt>picturesLibrary<ept id="p1">**</ept> capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.</source>
          <target state="new">Remember to declare the <bpt id="p1">**</bpt>picturesLibrary<ept id="p1">**</ept> capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>You will typically use this approach to create a read-only view of file and folder info.</source>
          <target state="new">You will typically use this approach to create a read-only view of file and folder info.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.</source>
          <target state="new">You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>However, any changes are not persisted until you call the appropriate <bpt id="p1">**</bpt>SavePropertiesAsync<ept id="p1">**</ept> method (for example, <bpt id="p2">[</bpt><bpt id="p3">**</bpt>MusicProperties.SavePropertiesAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR207760)</ept>).</source>
          <target state="new">However, any changes are not persisted until you call the appropriate <bpt id="p1">**</bpt>SavePropertiesAsync<ept id="p1">**</ept> method (for example, <bpt id="p2">[</bpt><bpt id="p3">**</bpt>MusicProperties.SavePropertiesAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR207760)</ept>).</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You should commit changes when the item loses focus because this triggers a selection reset.</source>
          <target state="new">You should commit changes when the item loses focus because this triggers a selection reset.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Note that two-way binding using this technique works only with indexed locations, such as Music.</source>
          <target state="new">Note that two-way binding using this technique works only with indexed locations, such as Music.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>You can determine whether a location is indexed by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FolderInformation.GetIndexedStateAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR207627)</ept> method.</source>
          <target state="new">You can determine whether a location is indexed by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FolderInformation.GetIndexedStateAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR207627)</ept> method.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Note also that a virtualized vector can return <bpt id="p1">**</bpt>null<ept id="p1">**</ept> for some items before it populates their value.</source>
          <target state="new">Note also that a virtualized vector can return <bpt id="p1">**</bpt>null<ept id="p1">**</ept> for some items before it populates their value.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>For example, you should check for <bpt id="p1">**</bpt>null<ept id="p1">**</ept> before you use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SelectedItem<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209770)</ept> value of a list control bound to a virtualized vector, or use <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SelectedIndex<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209768)</ept> instead.</source>
          <target state="new">For example, you should check for <bpt id="p1">**</bpt>null<ept id="p1">**</ept> before you use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SelectedItem<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209770)</ept> value of a list control bound to a virtualized vector, or use <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SelectedIndex<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209768)</ept> instead.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Binding to data grouped by a key</source>
          <target state="new">Binding to data grouped by a key</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>If you take a flat collection of items—books, for example, represented by a <bpt id="p1">**</bpt>BookSku<ept id="p1">**</ept> class—and you group the items by using a common property as a key—the <bpt id="p2">**</bpt>BookSku.AuthorName<ept id="p2">**</ept> property, for example—then the result is called grouped data.</source>
          <target state="new">If you take a flat collection of items—books, for example, represented by a <bpt id="p1">**</bpt>BookSku<ept id="p1">**</ept> class—and you group the items by using a common property as a key—the <bpt id="p2">**</bpt>BookSku.AuthorName<ept id="p2">**</ept> property, for example—then the result is called grouped data.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>When you group data, it is no longer a flat collection.</source>
          <target state="new">When you group data, it is no longer a flat collection.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.</source>
          <target state="new">Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <bpt id="p1">**</bpt>BookSku<ept id="p1">**</ept>s whose <bpt id="p2">**</bpt>AuthorName<ept id="p2">**</ept> property matches the group's key.</source>
          <target state="new">To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <bpt id="p1">**</bpt>BookSku<ept id="p1">**</ept>s whose <bpt id="p2">**</bpt>AuthorName<ept id="p2">**</ept> property matches the group's key.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>In general, to display a collection, you bind the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242828)</ept> of an items control (such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridView<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept>) directly to a property that returns a collection.</source>
          <target state="new">In general, to display a collection, you bind the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242828)</ept> of an items control (such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridView<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept>) directly to a property that returns a collection.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If that's a flat collection of items then you don't need to do anything special.</source>
          <target state="new">If that's a flat collection of items then you don't need to do anything special.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> which sits between the items control and the binding source.</source>
          <target state="new">But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> which sits between the items control and the binding source.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>You bind the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> to the property that returns grouped data, and you bind the items control to the <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept>.</source>
          <target state="new">You bind the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> to the property that returns grouped data, and you bind the items control to the <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>An extra value-add of a <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept>.</source>
          <target state="new">An extra value-add of a <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>You can also access the current item programmatically through the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICollectionView.CurrentItem<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209857)</ept> property of the object returned by the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CollectionViewSource.View<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209833-view)</ept> property.</source>
          <target state="new">You can also access the current item programmatically through the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICollectionView.CurrentItem<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209857)</ept> property of the object returned by the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CollectionViewSource.View<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209833-view)</ept> property.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>To activate the grouping facility of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>, set <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsSourceGrouped<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209833-issourcegrouped)</ept> to <bpt id="p5">**</bpt>true<ept id="p5">**</ept>.</source>
          <target state="new">To activate the grouping facility of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>, set <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsSourceGrouped<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209833-issourcegrouped)</ept> to <bpt id="p5">**</bpt>true<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Whether you also need to set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsPath<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833-itemspath)</ept> property depends on exactly how you author your group objects.</source>
          <target state="new">Whether you also need to set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsPath<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833-itemspath)</ept> property depends on exactly how you author your group objects.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>There are two ways to author a group object: the "is-a-group" pattern, and the "has-a-group" pattern.</source>
          <target state="new">There are two ways to author a group object: the "is-a-group" pattern, and the "has-a-group" pattern.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In the "is-a-group" pattern, the group object derives from a collection type (for example, <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>), so the group object actually is itself the group of items.</source>
          <target state="new">In the "is-a-group" pattern, the group object derives from a collection type (for example, <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>), so the group object actually is itself the group of items.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>With this pattern you do not need to set <bpt id="p1">**</bpt>ItemsPath<ept id="p1">**</ept>.</source>
          <target state="new">With this pattern you do not need to set <bpt id="p1">**</bpt>ItemsPath<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>In the "has-a-group" pattern, the group object has one or more properties of a collection type (such as <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>), so the group "has a" group of items in the form of a property (or several groups of items in the form of several properties).</source>
          <target state="new">In the "has-a-group" pattern, the group object has one or more properties of a collection type (such as <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>), so the group "has a" group of items in the form of a property (or several groups of items in the form of several properties).</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>With this pattern you need to set <bpt id="p1">**</bpt>ItemsPath<ept id="p1">**</ept> to the name of the property that contains the group of items.</source>
          <target state="new">With this pattern you need to set <bpt id="p1">**</bpt>ItemsPath<ept id="p1">**</ept> to the name of the property that contains the group of items.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The example below illustrates the "has-a-group" pattern.</source>
          <target state="new">The example below illustrates the "has-a-group" pattern.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The page class has a property named <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ViewModel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept>, which returns an instance of our view model.</source>
          <target state="new">The page class has a property named <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ViewModel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept>, which returns an instance of our view model.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> binds to the <bpt id="p3">**</bpt>Authors<ept id="p3">**</ept> property of the view model (<bpt id="p4">**</bpt>Authors<ept id="p4">**</ept> is the collection of group objects) and also specifies that it's the <bpt id="p5">**</bpt>Author.BookSkus<ept id="p5">**</ept> property that contains the grouped items.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> binds to the <bpt id="p3">**</bpt>Authors<ept id="p3">**</ept> property of the view model (<bpt id="p4">**</bpt>Authors<ept id="p4">**</ept> is the collection of group objects) and also specifies that it's the <bpt id="p5">**</bpt>Author.BookSkus<ept id="p5">**</ept> property that contains the grouped items.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Finally, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GridView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> is bound to the <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept>, and has its group style defined so that it can render the items in groups.</source>
          <target state="new">Finally, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GridView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> is bound to the <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept>, and has its group style defined so that it can render the items in groups.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242828)</ept> must use <bpt id="p3">[</bpt>{Binding}<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> (and not <bpt id="p4">[</bpt>{x:Bind}<ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept>) because it needs to set the <bpt id="p5">**</bpt>Source<ept id="p5">**</ept> property to a resource.</source>
          <target state="new">Note that the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242828)</ept> must use <bpt id="p3">[</bpt>{Binding}<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> (and not <bpt id="p4">[</bpt>{x:Bind}<ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept>) because it needs to set the <bpt id="p5">**</bpt>Source<ept id="p5">**</ept> property to a resource.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>To see the above example in the context of the complete app, download the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> sample app.</source>
          <target state="new">To see the above example in the context of the complete app, download the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> sample app.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Unlike the markup shown above, <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> uses {Binding} exclusively.</source>
          <target state="new">Unlike the markup shown above, <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> uses {Binding} exclusively.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>You can implement the "is-a-group" pattern in one of two ways.</source>
          <target state="new">You can implement the "is-a-group" pattern in one of two ways.</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>One way is to author your own group class.</source>
          <target state="new">One way is to author your own group class.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Derive the class from <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> (where <bpt id="p2">*</bpt>T<ept id="p2">*</ept> is the type of the items).</source>
          <target state="new">Derive the class from <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> (where <bpt id="p2">*</bpt>T<ept id="p2">*</ept> is the type of the items).</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`public class Author : List&lt;BookSku&gt;`</ph>.</source>
          <target state="new">For example, <ph id="ph1">`public class Author : List&lt;BookSku&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The second way is to use a <bpt id="p1">[</bpt>LINQ<ept id="p1">](http://msdn.microsoft.com/library/bb397926.aspx)</ept> expression to dynamically create group objects (and a group class) from like property values of the <bpt id="p2">**</bpt>BookSku<ept id="p2">**</ept> items.</source>
          <target state="new">The second way is to use a <bpt id="p1">[</bpt>LINQ<ept id="p1">](http://msdn.microsoft.com/library/bb397926.aspx)</ept> expression to dynamically create group objects (and a group class) from like property values of the <bpt id="p2">**</bpt>BookSku<ept id="p2">**</ept> items.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>This approach—maintaining only a flat list of items and grouping them together on the fly—is typical of an app that accesses data from a cloud service.</source>
          <target state="new">This approach—maintaining only a flat list of items and grouping them together on the fly—is typical of an app that accesses data from a cloud service.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <bpt id="p1">**</bpt>Author<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Genre<ept id="p2">**</ept>.</source>
          <target state="new">You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <bpt id="p1">**</bpt>Author<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Genre<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The example below illustrates the "is-a-group" pattern using <bpt id="p1">[</bpt>LINQ<ept id="p1">](http://msdn.microsoft.com/library/bb397926.aspx)</ept>.</source>
          <target state="new">The example below illustrates the "is-a-group" pattern using <bpt id="p1">[</bpt>LINQ<ept id="p1">](http://msdn.microsoft.com/library/bb397926.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This time we group books by genre, displayed with the genre name in the group headers.</source>
          <target state="new">This time we group books by genre, displayed with the genre name in the group headers.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>This is indicated by the "Key" property path in reference to the group <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Key<ept id="p2">**</ept><ept id="p1">](P:System.Linq.IGrouping%602.Key)</ept> value.</source>
          <target state="new">This is indicated by the "Key" property path in reference to the group <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Key<ept id="p2">**</ept><ept id="p1">](P:System.Linq.IGrouping%602.Key)</ept> value.</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Remember that when using <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> with data templates we need to indicate the type being bound to by setting an <bpt id="p2">**</bpt>x:DataType<ept id="p2">**</ept> value.</source>
          <target state="new">Remember that when using <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> with data templates we need to indicate the type being bound to by setting an <bpt id="p2">**</bpt>x:DataType<ept id="p2">**</ept> value.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If the type is generic then we can't express that in markup so we need to use <bpt id="p1">[</bpt>{Binding}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> instead in the group style header template.</source>
          <target state="new">If the type is generic then we can't express that in markup so we need to use <bpt id="p1">[</bpt>{Binding}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> instead in the group style header template.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh702601)</ept> control is a great way for your users to view and navigate grouped data.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh702601)</ept> control is a great way for your users to view and navigate grouped data.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> sample app illustrates how to use the <bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> sample app illustrates how to use the <bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>In that app, you can view a list of books grouped by author (the zoomed-in view) or you can zoom out to see a jump list of authors (the zoomed-out view).</source>
          <target state="new">In that app, you can view a list of books grouped by author (the zoomed-in view) or you can zoom out to see a jump list of authors (the zoomed-out view).</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The jump list affords much quicker navigation than scrolling through the list of books.</source>
          <target state="new">The jump list affords much quicker navigation than scrolling through the list of books.</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The zoomed-in and zoomed-out views are actually <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept> or <bpt id="p2">**</bpt>GridView<ept id="p2">**</ept> controls bound to the same <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept>.</source>
          <target state="new">The zoomed-in and zoomed-out views are actually <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept> or <bpt id="p2">**</bpt>GridView<ept id="p2">**</ept> controls bound to the same <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>An illustration of a SemanticZoom</source>
          <target state="new">An illustration of a SemanticZoom</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>When you bind to hierarchical data—such as subcategories within categories—you can choose to display the hierarchical levels in your UI with a series of items controls.</source>
          <target state="new">When you bind to hierarchical data—such as subcategories within categories—you can choose to display the hierarchical levels in your UI with a series of items controls.</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A selection in one items control determines the contents of subsequent items controls.</source>
          <target state="new">A selection in one items control determines the contents of subsequent items controls.</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>You can keep the lists synchronized by binding each list to its own <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> and binding the <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept> instances together in a chain.</source>
          <target state="new">You can keep the lists synchronized by binding each list to its own <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> and binding the <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept> instances together in a chain.</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This is called a master/details (or list/details) view.</source>
          <target state="new">This is called a master/details (or list/details) view.</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>How to bind to hierarchical data and create a master/details view<ept id="p1">](how-to-bind-to-hierarchical-data-and-create-a-master-details-view.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>How to bind to hierarchical data and create a master/details view<ept id="p1">](how-to-bind-to-hierarchical-data-and-create-a-master-details-view.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Diagnosing and debugging data binding problems</source>
          <target state="new">Diagnosing and debugging data binding problems</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Your binding markup contains the names of properties (and, for C#, sometimes fields and methods).</source>
          <target state="new">Your binding markup contains the names of properties (and, for C#, sometimes fields and methods).</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>So when you rename a property, you'll also need to change any binding that references it.</source>
          <target state="new">So when you rename a property, you'll also need to change any binding that references it.</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Forgetting to do that leads to a typical example of a data binding bug, and your app either won't compile or won't run correctly.</source>
          <target state="new">Forgetting to do that leads to a typical example of a data binding bug, and your app either won't compile or won't run correctly.</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The binding objects created by <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> and <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> are largely functionally equivalent.</source>
          <target state="new">The binding objects created by <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> and <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> are largely functionally equivalent.</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>But {x:Bind} has type information for the binding source, and it generates source code at compile-time.</source>
          <target state="new">But {x:Bind} has type information for the binding source, and it generates source code at compile-time.</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>With {x:Bind} you get the same kind of problem detection that you get with the rest of your code.</source>
          <target state="new">With {x:Bind} you get the same kind of problem detection that you get with the rest of your code.</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>That includes compile-time validation of your binding expressions, and debugging by setting breakpoints in the source code generated as the partial class for your page.</source>
          <target state="new">That includes compile-time validation of your binding expressions, and debugging by setting breakpoints in the source code generated as the partial class for your page.</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>These classes can be found in the files in your <ph id="ph1">`obj`</ph> folder, with names like (for C#) <ph id="ph2">`&lt;view name&gt;.g.cs`</ph>).</source>
          <target state="new">These classes can be found in the files in your <ph id="ph1">`obj`</ph> folder, with names like (for C#) <ph id="ph2">`&lt;view name&gt;.g.cs`</ph>).</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>If you have a problem with a binding then turn on <bpt id="p1">**</bpt>Break On Unhandled Exceptions<ept id="p1">**</ept> in the Microsoft Visual Studio debugger.</source>
          <target state="new">If you have a problem with a binding then turn on <bpt id="p1">**</bpt>Break On Unhandled Exceptions<ept id="p1">**</ept> in the Microsoft Visual Studio debugger.</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The debugger will break execution at that point, and you can then debug what has gone wrong.</source>
          <target state="new">The debugger will break execution at that point, and you can then debug what has gone wrong.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <bpt id="p1">**</bpt>Call Stack<ept id="p1">**</ept> window to help determine the sequence of calls that led up to the problem.</source>
          <target state="new">The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <bpt id="p1">**</bpt>Call Stack<ept id="p1">**</ept> window to help determine the sequence of calls that led up to the problem.</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{Binding}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> does not have type information for the binding source.</source>
          <target state="new"><bpt id="p1">[</bpt>{Binding}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> does not have type information for the binding source.</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>But when you run your app with the debugger attached, any binding errors appear in the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window in Visual Studio.</source>
          <target state="new">But when you run your app with the debugger attached, any binding errors appear in the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Creating bindings in code</source>
          <target state="new">Creating bindings in code</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This section only applies to <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>, because you can't create <bpt id="p3">[</bpt>{x:Bind}<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> bindings in code.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This section only applies to <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>, because you can't create <bpt id="p3">[</bpt>{x:Bind}<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> bindings in code.</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>However, some of the same benefits of {x:Bind} can be achieved with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.RegisterPropertyChangedCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242356-registerpropertychangedcallback)</ept>, which enables you to register for change notifications on any dependency property.</source>
          <target state="new">However, some of the same benefits of {x:Bind} can be achieved with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.RegisterPropertyChangedCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242356-registerpropertychangedcallback)</ept>, which enables you to register for change notifications on any dependency property.</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>You can also connect UI elements to data using procedural code instead of XAML.</source>
          <target state="new">You can also connect UI elements to data using procedural code instead of XAML.</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>To do this, create a new <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> object, set the appropriate properties, then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.SetBinding<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706-setbinding)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>BindingOperations.SetBinding<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209820operations-setbinding)</ept>.</source>
          <target state="new">To do this, create a new <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> object, set the appropriate properties, then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.SetBinding<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706-setbinding)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>BindingOperations.SetBinding<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209820operations-setbinding)</ept>.</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.</source>
          <target state="new">Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Note, however, that you cannot change the binding property values after you call <bpt id="p1">**</bpt>SetBinding<ept id="p1">**</ept>.</source>
          <target state="new">Note, however, that you cannot change the binding property values after you call <bpt id="p1">**</bpt>SetBinding<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement a binding in code.</source>
          <target state="new">The following example shows how to implement a binding in code.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>{x:Bind} and {Binding} feature comparison</source>
          <target state="new">{x:Bind} and {Binding} feature comparison</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="new">Feature</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>{x:Bind}</source>
          <target state="new">{x:Bind}</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>{Binding}</source>
          <target state="new">{Binding}</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Path is the default property</source>
          <target state="new">Path is the default property</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Path property</source>
          <target state="new">Path property</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>In x:Bind, Path is rooted at the Page by default, not the DataContext.</source>
          <target state="new">In x:Bind, Path is rooted at the Page by default, not the DataContext.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Indexer</source>
          <target state="new">Indexer</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Binds to the specified item in the collection.</source>
          <target state="new">Binds to the specified item in the collection.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Only integer-based indexes are supported.</source>
          <target state="new">Only integer-based indexes are supported.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Attached properties</source>
          <target state="new">Attached properties</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Attached properties are specified using parentheses.</source>
          <target state="new">Attached properties are specified using parentheses.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</source>
          <target state="new">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Casting</source>
          <target state="new">Casting</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Not needed&lt;</source>
          <target state="new">Not needed&lt;</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Casts are specified using parentheses.</source>
          <target state="new">Casts are specified using parentheses.</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</source>
          <target state="new">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Converter</source>
          <target state="new">Converter</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</source>
          <target state="new">Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>ConverterParameter, ConverterLanguage</source>
          <target state="new">ConverterParameter, ConverterLanguage</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</source>
          <target state="new">Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>TargetNullValue</source>
          <target state="new">TargetNullValue</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Used when the leaf of the binding expression is null.</source>
          <target state="new">Used when the leaf of the binding expression is null.</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Use single quotes for a string value.</source>
          <target state="new">Use single quotes for a string value.</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>FallbackValue</source>
          <target state="new">FallbackValue</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Used when any part of the path for the binding (except for the leaf) is null.</source>
          <target state="new">Used when any part of the path for the binding (except for the leaf) is null.</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>ElementName</source>
          <target state="new">ElementName</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field.</source>
          <target state="new">With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field.</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>RelativeSource: Self</source>
          <target state="new">RelativeSource: Self</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>With {x:Bind}, name the element and use its name in Path.</source>
          <target state="new">With {x:Bind}, name the element and use its name in Path.</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>RelativeSource: TemplatedParent</source>
          <target state="new">RelativeSource: TemplatedParent</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Not supported</source>
          <target state="new">Not supported</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Regular template binding can be used in control templates for most uses.</source>
          <target state="new">Regular template binding can be used in control templates for most uses.</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>But use TemplatedParent where you need to use a converter, or a two-way binding.&lt;</source>
          <target state="new">But use TemplatedParent where you need to use a converter, or a two-way binding.&lt;</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="new">Source</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Not supported</source>
          <target state="new">Not supported</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>For {x:Bind} use a property or a static path instead.</source>
          <target state="new">For {x:Bind} use a property or a static path instead.</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="new">Mode</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Mode can be OneTime, OneWay, or TwoWay.</source>
          <target state="new">Mode can be OneTime, OneWay, or TwoWay.</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>{x:Bind} defaults to OneTime; {Binding} defaults to OneWay.</source>
          <target state="new">{x:Bind} defaults to OneTime; {Binding} defaults to OneWay.</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>UpdateSourceTrigger</source>
          <target state="new">UpdateSourceTrigger</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Not supported</source>
          <target state="new">Not supported</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>`&lt;Binding UpdateSourceTrigger="[Default</source>
          <target state="new">`&lt;Binding UpdateSourceTrigger="[Default</target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>PropertyChanged</source>
          <target state="new">PropertyChanged</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Explicit]"/&gt;`</source>
          <target state="new">Explicit]"/&gt;`</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>{x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.</source>
          <target state="new">{x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>