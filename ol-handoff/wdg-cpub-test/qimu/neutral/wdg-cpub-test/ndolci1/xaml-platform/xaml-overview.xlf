<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\xaml-platform\xaml-overview.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0650191324964593b8b3fc54b757648253b95caa</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>We introduce the XAML language and XAML concepts to the Windows Runtime app developer audience, and describe the different ways to declare objects and set attributes in XAML as it is used for creating a Windows Runtime app.</source>
          <target state="new">We introduce the XAML language and XAML concepts to the Windows Runtime app developer audience, and describe the different ways to declare objects and set attributes in XAML as it is used for creating a Windows Runtime app.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAML overview</source>
          <target state="new">XAML overview</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XAML overview</source>
          <target state="new">XAML overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>We introduce the XAML language and XAML concepts to the Windows Runtime app developer audience, and describe the different ways to declare objects and set attributes in XAML as it is used for creating a Windows Runtime app.</source>
          <target state="new">We introduce the XAML language and XAML concepts to the Windows Runtime app developer audience, and describe the different ways to declare objects and set attributes in XAML as it is used for creating a Windows Runtime app.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>What is XAML?</source>
          <target state="new">What is XAML?</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Extensible Application Markup Language (XAML) is a declarative language.</source>
          <target state="new">Extensible Application Markup Language (XAML) is a declarative language.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifically, XAML can initialize objects and set properties of objects, using a language structure that shows hierarchical relationships between multiple objects, and using a backing type convention that supports extension of types.</source>
          <target state="new">Specifically, XAML can initialize objects and set properties of objects, using a language structure that shows hierarchical relationships between multiple objects, and using a backing type convention that supports extension of types.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can create visible UI elements in the declarative XAML markup.</source>
          <target state="new">You can create visible UI elements in the declarative XAML markup.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can then associate a separate code-behind file for each XAML file that can respond to events and manipulate the objects that you originally declare in XAML.</source>
          <target state="new">You can then associate a separate code-behind file for each XAML file that can respond to events and manipulate the objects that you originally declare in XAML.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The XAML language supports interchange of sources between different tools and roles in the development process, such as exchanging XAML sources between design tools and an IDE, or between primary developers and localization developers.</source>
          <target state="new">The XAML language supports interchange of sources between different tools and roles in the development process, such as exchanging XAML sources between design tools and an IDE, or between primary developers and localization developers.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By using XAML as the interchange format, designer roles and developer roles can be kept separate or brought together, and designers and developers can iterate during the production of an app.</source>
          <target state="new">By using XAML as the interchange format, designer roles and developer roles can be kept separate or brought together, and designers and developers can iterate during the production of an app.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you see them as part of your Windows Runtime app projects, XAML files are XML files with the .xaml file name extension.</source>
          <target state="new">When you see them as part of your Windows Runtime app projects, XAML files are XML files with the .xaml file name extension.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Basic XAML syntax</source>
          <target state="new">Basic XAML syntax</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>XAML has a basic syntax that builds on XML.</source>
          <target state="new">XAML has a basic syntax that builds on XML.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By definition, valid XAML must also be valid XML.</source>
          <target state="new">By definition, valid XAML must also be valid XML.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>But XAML also has syntax concepts that are assigned a different and more complete meaning, while still being valid in XML per the XML 1.0 specification.</source>
          <target state="new">But XAML also has syntax concepts that are assigned a different and more complete meaning, while still being valid in XML per the XML 1.0 specification.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, XAML supports <bpt id="p1">*</bpt>property element syntax<ept id="p1">*</ept>, where property values can be set within elements rather than as string values in attributes or as content.</source>
          <target state="new">For example, XAML supports <bpt id="p1">*</bpt>property element syntax<ept id="p1">*</ept>, where property values can be set within elements rather than as string values in attributes or as content.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To regular XML, a XAML property element is an element with a dot in its name, so it's valid to plain XML but doesn't have the same meaning.</source>
          <target state="new">To regular XML, a XAML property element is an element with a dot in its name, so it's valid to plain XML but doesn't have the same meaning.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>XAML and Microsoft Visual Studio</source>
          <target state="new">XAML and Microsoft Visual Studio</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Microsoft Visual Studio helps you to produce valid XAML syntax, both in the XAML text editor and in the more graphically oriented XAML design surface.</source>
          <target state="new">Microsoft Visual Studio helps you to produce valid XAML syntax, both in the XAML text editor and in the more graphically oriented XAML design surface.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>So when you write XAML for your app using Visual Studio, don't worry too much about the syntax with each keystroke.</source>
          <target state="new">So when you write XAML for your app using Visual Studio, don't worry too much about the syntax with each keystroke.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The IDE encourages valid XAML syntax by providing autocompletion hints, showing suggestions in Microsoft IntelliSense lists and dropdowns, showing UI element libraries in the toolbox, or other techniques.</source>
          <target state="new">The IDE encourages valid XAML syntax by providing autocompletion hints, showing suggestions in Microsoft IntelliSense lists and dropdowns, showing UI element libraries in the toolbox, or other techniques.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If this is your first experience with XAML, it might still be useful to know the syntax rules and particularly the terminology that is sometimes used to describe the restrictions or choices when we describe XAML syntax in reference or other topics.</source>
          <target state="new">If this is your first experience with XAML, it might still be useful to know the syntax rules and particularly the terminology that is sometimes used to describe the restrictions or choices when we describe XAML syntax in reference or other topics.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>We cover these fine points of XAML syntax in a separate topic, <bpt id="p1">[</bpt>XAML syntax guide<ept id="p1">](xaml-syntax-guide.md)</ept>.</source>
          <target state="new">We cover these fine points of XAML syntax in a separate topic, <bpt id="p1">[</bpt>XAML syntax guide<ept id="p1">](xaml-syntax-guide.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>XAML namespaces</source>
          <target state="new">XAML namespaces</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In general programming, a namespace is an organizing concept that determines how identifiers for programming entities are interpreted.</source>
          <target state="new">In general programming, a namespace is an organizing concept that determines how identifiers for programming entities are interpreted.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By using namespaces, a programming framework can separate user-declared identifiers from framework-declared identifiers, disambiguate identifiers through namespace qualifications, enforce rules for scoping names, and so on.</source>
          <target state="new">By using namespaces, a programming framework can separate user-declared identifiers from framework-declared identifiers, disambiguate identifiers through namespace qualifications, enforce rules for scoping names, and so on.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>XAML has its own XAML namespace concept that serves this purpose for the XAML language.</source>
          <target state="new">XAML has its own XAML namespace concept that serves this purpose for the XAML language.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Here's how XAML applies and extends the XML language namespace concepts:</source>
          <target state="new">Here's how XAML applies and extends the XML language namespace concepts:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>XAML uses the reserved XML attribute <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> for namespace declarations.</source>
          <target state="new">XAML uses the reserved XML attribute <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> for namespace declarations.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The value of the attribute is typically a Uniform Resource Identifier (URI), which is a convention inherited from XML.</source>
          <target state="new">The value of the attribute is typically a Uniform Resource Identifier (URI), which is a convention inherited from XML.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>XAML uses prefixes in declarations to declare non-default namespaces, and prefix usages in elements and attributes reference that namespace.</source>
          <target state="new">XAML uses prefixes in declarations to declare non-default namespaces, and prefix usages in elements and attributes reference that namespace.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>XAML has a concept of a default namespace, which is the namespace used when no prefix exists in a usage or declaration.</source>
          <target state="new">XAML has a concept of a default namespace, which is the namespace used when no prefix exists in a usage or declaration.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The default namespace can be defined differently for each XAML programming framework.</source>
          <target state="new">The default namespace can be defined differently for each XAML programming framework.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Namespace definitions inherit in a XAML file or construct, from parent element to child element.</source>
          <target state="new">Namespace definitions inherit in a XAML file or construct, from parent element to child element.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example if you define a namespace in the root element of a XAML file, all elements within that file inherit that namespace definition.</source>
          <target state="new">For example if you define a namespace in the root element of a XAML file, all elements within that file inherit that namespace definition.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If an element further into the page redefines the namespace, that element's descendants inherit the new definition.</source>
          <target state="new">If an element further into the page redefines the namespace, that element's descendants inherit the new definition.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Attributes of an element inherit the element's namespaces.</source>
          <target state="new">Attributes of an element inherit the element's namespaces.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It's fairly uncommon to see prefixes on XAML attributes.</source>
          <target state="new">It's fairly uncommon to see prefixes on XAML attributes.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A XAML file almost always declares a default XAML namespace in its root element.</source>
          <target state="new">A XAML file almost always declares a default XAML namespace in its root element.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The default XAML namespace defines which elements you can declare without qualifying them by a prefix.</source>
          <target state="new">The default XAML namespace defines which elements you can declare without qualifying them by a prefix.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For typical Windows Runtime app projects, this default namespace contains all the built-in XAML vocabulary for the Windows Runtime that's used for UI definitions: the default controls, text elements, XAML graphics and animations, databinding and styling support types, and so on.</source>
          <target state="new">For typical Windows Runtime app projects, this default namespace contains all the built-in XAML vocabulary for the Windows Runtime that's used for UI definitions: the default controls, text elements, XAML graphics and animations, databinding and styling support types, and so on.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Most of the XAML you'll write for Windows Runtime apps will thus be able to avoid using XAML namespaces and prefixes when referring to common UI elements.</source>
          <target state="new">Most of the XAML you'll write for Windows Runtime apps will thus be able to avoid using XAML namespaces and prefixes when referring to common UI elements.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Here's a snippet showing a template-created <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept> root of the initial page for an app (showing the opening tag only, and simplified).</source>
          <target state="new">Here's a snippet showing a template-created <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept> root of the initial page for an app (showing the opening tag only, and simplified).</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It declares the default namespace and also the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> namespace (which we'll explain next).</source>
          <target state="new">It declares the default namespace and also the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> namespace (which we'll explain next).</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The XAML-language XAML namespace</source>
          <target state="new">The XAML-language XAML namespace</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>One particular XAML namespace that is declared in nearly every Windows Runtime XAML file is the XAML-language namespace.</source>
          <target state="new">One particular XAML namespace that is declared in nearly every Windows Runtime XAML file is the XAML-language namespace.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This namespace includes elements and concepts that are defined by the XAML language, by its language specification.</source>
          <target state="new">This namespace includes elements and concepts that are defined by the XAML language, by its language specification.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>By convention, the XAML-language XAML namespace is mapped to the prefix "x".</source>
          <target state="new">By convention, the XAML-language XAML namespace is mapped to the prefix "x".</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default project and file templates for Windows Runtime app projects always define both the default XAML namespace (no prefix, just <ph id="ph1">`xmlns=`</ph>) and the XAML-language XAML namespace (prefix "x") as part of the root element.</source>
          <target state="new">The default project and file templates for Windows Runtime app projects always define both the default XAML namespace (no prefix, just <ph id="ph1">`xmlns=`</ph>) and the XAML-language XAML namespace (prefix "x") as part of the root element.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The "x" prefix/XAML-language XAML namespace contains several programming constructs that you use often in your XAML.</source>
          <target state="new">The "x" prefix/XAML-language XAML namespace contains several programming constructs that you use often in your XAML.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Here are the most common ones:</source>
          <target state="new">Here are the most common ones:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="new">Term</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>x:Key</source>
          <target state="new">x:Key</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sets a unique user-defined key for each resource in a XAML <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>.</source>
          <target state="new">Sets a unique user-defined key for each resource in a XAML <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The key's token string is the argument for the <bpt id="p1">**</bpt>StaticResource<ept id="p1">**</ept> markup extension, and you use this key later to retrieve the XAML resource from another XAML usage elsewhere in your app's XAML.</source>
          <target state="new">The key's token string is the argument for the <bpt id="p1">**</bpt>StaticResource<ept id="p1">**</ept> markup extension, and you use this key later to retrieve the XAML resource from another XAML usage elsewhere in your app's XAML.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>x:Class</source>
          <target state="new">x:Class</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Specifies the code namespace and code class name for the class that provides code-behind for a XAML page.</source>
          <target state="new">Specifies the code namespace and code class name for the class that provides code-behind for a XAML page.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This names the class that is created or joined by the build actions when you build your app.</source>
          <target state="new">This names the class that is created or joined by the build actions when you build your app.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These build actions support the XAML markup compiler and combine your markup and code-behind when the app is compiled.</source>
          <target state="new">These build actions support the XAML markup compiler and combine your markup and code-behind when the app is compiled.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You must have such a class to support code-behind for a XAML page.</source>
          <target state="new">You must have such a class to support code-behind for a XAML page.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Window.Content<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209051)</ept> in the default Windows Runtime activation model.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Window.Content<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209051)</ept> in the default Windows Runtime activation model.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>x:Name</source>
          <target state="new">x:Name</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specifies a run-time object name for the instance that exists in run-time code after an object element defined in XAML is processed.</source>
          <target state="new">Specifies a run-time object name for the instance that exists in run-time code after an object element defined in XAML is processed.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can think of setting <bpt id="p1">**</bpt>x:Name<ept id="p1">**</ept> in XAML as being like declaring a named variable in code.</source>
          <target state="new">You can think of setting <bpt id="p1">**</bpt>x:Name<ept id="p1">**</ept> in XAML as being like declaring a named variable in code.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As you'll learn later, that's exactly what happens when your XAML is loaded as a component of a Windows Runtime app.</source>
          <target state="new">As you'll learn later, that's exactly what happens when your XAML is loaded as a component of a Windows Runtime app.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElement.Name<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208735)</ept> is a similar property in the framework but not all elements support it.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  <bpt id="p2">[</bpt><bpt id="p3">**</bpt>FrameworkElement.Name<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208735)</ept> is a similar property in the framework but not all elements support it.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>So you use <bpt id="p1">**</bpt>x:Name<ept id="p1">**</ept> for element identification, whenever <bpt id="p2">**</bpt>FrameworkElement.Name<ept id="p2">**</ept> is not supported on that element type.</source>
          <target state="new">So you use <bpt id="p1">**</bpt>x:Name<ept id="p1">**</ept> for element identification, whenever <bpt id="p2">**</bpt>FrameworkElement.Name<ept id="p2">**</ept> is not supported on that element type.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>x:Uid</source>
          <target state="new">x:Uid</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Identifies elements that should use localized resources for some of their property values.</source>
          <target state="new">Identifies elements that should use localized resources for some of their property values.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more info on how to use <bpt id="p1">**</bpt>x:Uid<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>Quickstart: Translating UI resources<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</ept>.</source>
          <target state="new">For more info on how to use <bpt id="p1">**</bpt>x:Uid<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>Quickstart: Translating UI resources<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>XAML intrinsic data types</source>
          <target state="new">XAML intrinsic data types</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These types can specify values for simple value-types when that's required for an attribute or resource.</source>
          <target state="new">These types can specify values for simple value-types when that's required for an attribute or resource.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>These intrinsic types correspond to the simple value types that are typically defined as part of each programming language's intrinsic definitions.</source>
          <target state="new">These intrinsic types correspond to the simple value types that are typically defined as part of each programming language's intrinsic definitions.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, you might need an object representing a <bpt id="p1">**</bpt>true<ept id="p1">**</ept> Boolean value to use in an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ObjectAnimationUsingKeyFrames<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br210320)</ept> storyboarded visual state.</source>
          <target state="new">For example, you might need an object representing a <bpt id="p1">**</bpt>true<ept id="p1">**</ept> Boolean value to use in an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ObjectAnimationUsingKeyFrames<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br210320)</ept> storyboarded visual state.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For that value in XAML, you'd use the <bpt id="p1">**</bpt>x:Boolean<ept id="p1">**</ept> intrinsic type as the object element, like this:</source>
          <target state="new">For that value in XAML, you'd use the <bpt id="p1">**</bpt>x:Boolean<ept id="p1">**</ept> intrinsic type as the object element, like this:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Other programming constructs in the XAML-language XAML namespace exist but are not as common.</source>
          <target state="new">Other programming constructs in the XAML-language XAML namespace exist but are not as common.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Mapping custom types to XAML namespaces</source>
          <target state="new">Mapping custom types to XAML namespaces</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>One of the most powerful aspects of XAML as a language is that it's easy to extend the XAML vocabulary for your Windows Runtime apps.</source>
          <target state="new">One of the most powerful aspects of XAML as a language is that it's easy to extend the XAML vocabulary for your Windows Runtime apps.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can define your own custom types in your app's programming language and then reference your custom types in XAML markup.</source>
          <target state="new">You can define your own custom types in your app's programming language and then reference your custom types in XAML markup.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Support for extension through custom types is fundamentally built-in to how the XAML language works.</source>
          <target state="new">Support for extension through custom types is fundamentally built-in to how the XAML language works.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Frameworks or app developers are responsible for creating the backing objects that XAML references.</source>
          <target state="new">Frameworks or app developers are responsible for creating the backing objects that XAML references.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Neither frameworks nor the app developer are bound by specifications of what the objects in their vocabularies represent or do beyond the basic XAML syntax rules (there are some expectations of what the XAML-language XAML namespace types should do, but the Windows Runtime provides all the necessary support).</source>
          <target state="new">Neither frameworks nor the app developer are bound by specifications of what the objects in their vocabularies represent or do beyond the basic XAML syntax rules (there are some expectations of what the XAML-language XAML namespace types should do, but the Windows Runtime provides all the necessary support).</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If you use XAML for types that come from libraries other than the Windows Runtime core libraries and metadata, you must declare and map a XAML namespace with a prefix.</source>
          <target state="new">If you use XAML for types that come from libraries other than the Windows Runtime core libraries and metadata, you must declare and map a XAML namespace with a prefix.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use that prefix in element usages to reference the types that were defined in your library.</source>
          <target state="new">Use that prefix in element usages to reference the types that were defined in your library.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You declare prefix mappings as <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> attributes, typically in a root element along with the other XAML namespace definitions.</source>
          <target state="new">You declare prefix mappings as <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> attributes, typically in a root element along with the other XAML namespace definitions.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To make your own namespace definition that references custom types, you first specify the keyword <bpt id="p1">**</bpt>xmlns:<ept id="p1">**</ept>, then the prefix you want.</source>
          <target state="new">To make your own namespace definition that references custom types, you first specify the keyword <bpt id="p1">**</bpt>xmlns:<ept id="p1">**</ept>, then the prefix you want.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The value of that attribute must contain the keyword <bpt id="p1">**</bpt>using:<ept id="p1">**</ept> as the first part of the value.</source>
          <target state="new">The value of that attribute must contain the keyword <bpt id="p1">**</bpt>using:<ept id="p1">**</ept> as the first part of the value.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The remainder of the value is a string token that references the specific code-backing namespace that contains your custom types, by name.</source>
          <target state="new">The remainder of the value is a string token that references the specific code-backing namespace that contains your custom types, by name.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The prefix defines the markup token that is used to refer to that XAML namespace in the remainder of the markup in that XAML file.</source>
          <target state="new">The prefix defines the markup token that is used to refer to that XAML namespace in the remainder of the markup in that XAML file.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A colon character (:) goes between the prefix and the entity to be referenced within the XAML namespace.</source>
          <target state="new">A colon character (:) goes between the prefix and the entity to be referenced within the XAML namespace.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, the attribute syntax to map a prefix <ph id="ph1">`myTypes`</ph> to the namespace <ph id="ph2">`myCompany.myTypes`</ph> is: <ph id="ph3">`    xmlns:myTypes="using:myCompany.myTypes"`</ph>, and a representative element usage is:</source>
          <target state="new">For example, the attribute syntax to map a prefix <ph id="ph1">`myTypes`</ph> to the namespace <ph id="ph2">`myCompany.myTypes`</ph> is: <ph id="ph3">`    xmlns:myTypes="using:myCompany.myTypes"`</ph>, and a representative element usage is:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more info on mapping XAML namespaces for custom types, including special considerations for Visual C++ component extensions (C++/CX), see <bpt id="p1">[</bpt>XAML namespaces and namespace mapping<ept id="p1">](xaml-namespaces-and-namespace-mapping.md)</ept>.</source>
          <target state="new">For more info on mapping XAML namespaces for custom types, including special considerations for Visual C++ component extensions (C++/CX), see <bpt id="p1">[</bpt>XAML namespaces and namespace mapping<ept id="p1">](xaml-namespaces-and-namespace-mapping.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Other XAML namespaces</source>
          <target state="new">Other XAML namespaces</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You often see XAML files that define the prefixes "d" (for designer namespace) and "mc" (for markup compatibility).</source>
          <target state="new">You often see XAML files that define the prefixes "d" (for designer namespace) and "mc" (for markup compatibility).</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Generally these are for infrastructure support, or to enable scenarios in a design-time tool.</source>
          <target state="new">Generally these are for infrastructure support, or to enable scenarios in a design-time tool.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more info, see the <bpt id="p1">[</bpt>"Other XAML namespaces" section of the XAML namespaces topic<ept id="p1">](xaml-namespaces-and-namespace-mapping.md#other-XAML-namespaces)</ept>.</source>
          <target state="new">For more info, see the <bpt id="p1">[</bpt>"Other XAML namespaces" section of the XAML namespaces topic<ept id="p1">](xaml-namespaces-and-namespace-mapping.md#other-XAML-namespaces)</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Markup extensions</source>
          <target state="new">Markup extensions</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Markup extensions are a XAML language concept that is often used in the Windows Runtime XAML implementation.</source>
          <target state="new">Markup extensions are a XAML language concept that is often used in the Windows Runtime XAML implementation.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Markup extensions often represent some kind of "shortcut" that enables a XAML file to access a value or behavior that isn't simply declaring elements based on backing types.</source>
          <target state="new">Markup extensions often represent some kind of "shortcut" that enables a XAML file to access a value or behavior that isn't simply declaring elements based on backing types.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Some markup extensions can set properties with plain strings or with additionally nested elements, with the goal of streamlining the syntax or the factoring between different XAML files.</source>
          <target state="new">Some markup extensions can set properties with plain strings or with additionally nested elements, with the goal of streamlining the syntax or the factoring between different XAML files.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In XAML attribute syntax, curly braces "{" and "}" indicate a XAML markup extension usage.</source>
          <target state="new">In XAML attribute syntax, curly braces "{" and "}" indicate a XAML markup extension usage.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This usage directs the XAML processing to escape from the general treatment of treating attribute values as either a literal string or a directly string-convertible value.</source>
          <target state="new">This usage directs the XAML processing to escape from the general treatment of treating attribute values as either a literal string or a directly string-convertible value.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Instead, a XAML parser calls code that provides behavior for that particular markup extension, and that code provides an alternate object or behavior result that the XAML parser needs.</source>
          <target state="new">Instead, a XAML parser calls code that provides behavior for that particular markup extension, and that code provides an alternate object or behavior result that the XAML parser needs.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Markup extensions can have arguments, which follow the markup extension name and are also contained within the curly braces.</source>
          <target state="new">Markup extensions can have arguments, which follow the markup extension name and are also contained within the curly braces.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Typically, an evaluated markup extension provides an object return value.</source>
          <target state="new">Typically, an evaluated markup extension provides an object return value.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>During parsing, that return value is inserted into the position in the object tree where the markup extension usage was in the source XAML.</source>
          <target state="new">During parsing, that return value is inserted into the position in the object tree where the markup extension usage was in the source XAML.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Windows Runtime XAML supports these markup extensions that are defined under the default XAML namespace and are understood by the Windows Runtime XAML parser:</source>
          <target state="new">Windows Runtime XAML supports these markup extensions that are defined under the default XAML namespace and are understood by the Windows Runtime XAML parser:</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{xBind}<ept id="p1">](x-bind-markup-extension.md)</ept>: supports data binding, which defers property evaluation until run-time by executing special-purpose code, which it generates at compile-time.</source>
          <target state="new"><bpt id="p1">[</bpt>{xBind}<ept id="p1">](x-bind-markup-extension.md)</ept>: supports data binding, which defers property evaluation until run-time by executing special-purpose code, which it generates at compile-time.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This markup extension supports a wide range of arguments.</source>
          <target state="new">This markup extension supports a wide range of arguments.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{Binding}<ept id="p1">](binding-markup-extension.md)</ept>: supports data binding, which defers property evaluation until run-time by executing general-purpose runtime object inspection.</source>
          <target state="new"><bpt id="p1">[</bpt>{Binding}<ept id="p1">](binding-markup-extension.md)</ept>: supports data binding, which defers property evaluation until run-time by executing general-purpose runtime object inspection.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This markup extension supports a wide range of arguments.</source>
          <target state="new">This markup extension supports a wide range of arguments.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{StaticResource}<ept id="p1">](staticresource-markup-extension.md)</ept>: supports referencing resource values that are defined in a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ResourceDictionary<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>{StaticResource}<ept id="p1">](staticresource-markup-extension.md)</ept>: supports referencing resource values that are defined in a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ResourceDictionary<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>These resources can be in a different XAML file but must ultimately be findable by the XAML parser at load time.</source>
          <target state="new">These resources can be in a different XAML file but must ultimately be findable by the XAML parser at load time.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The argument of a <ph id="ph1">`{StaticResource}`</ph> usage identifies the key (the name) for a keyed resource in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>.</source>
          <target state="new">The argument of a <ph id="ph1">`{StaticResource}`</ph> usage identifies the key (the name) for a keyed resource in a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{ThemeResource}<ept id="p1">](themeresource-markup-extension.md)</ept>: similar to <bpt id="p2">[</bpt>{StaticResource}<ept id="p2">](staticresource-markup-extension.md)</ept> but can respond to run-time theme changes.</source>
          <target state="new"><bpt id="p1">[</bpt>{ThemeResource}<ept id="p1">](themeresource-markup-extension.md)</ept>: similar to <bpt id="p2">[</bpt>{StaticResource}<ept id="p2">](staticresource-markup-extension.md)</ept> but can respond to run-time theme changes.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>{ThemeResource} appears quite often in the Windows Runtime default XAML templates, because most of these templates are designed for compatibility with the user switching the theme while the app is running.</source>
          <target state="new">{ThemeResource} appears quite often in the Windows Runtime default XAML templates, because most of these templates are designed for compatibility with the user switching the theme while the app is running.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{TemplateBinding}<ept id="p1">](templatebinding-markup-extension.md)</ept>: a special case of <bpt id="p2">[</bpt>{Binding}<ept id="p2">](binding-markup-extension.md)</ept> that supports control templates in XAML and their eventual usage at run time.</source>
          <target state="new"><bpt id="p1">[</bpt>{TemplateBinding}<ept id="p1">](templatebinding-markup-extension.md)</ept>: a special case of <bpt id="p2">[</bpt>{Binding}<ept id="p2">](binding-markup-extension.md)</ept> that supports control templates in XAML and their eventual usage at run time.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{RelativeSource}<ept id="p1">](relativesource-markup-extension.md)</ept>: enables a particular form of template binding where values come from the templated parent.</source>
          <target state="new"><bpt id="p1">[</bpt>{RelativeSource}<ept id="p1">](relativesource-markup-extension.md)</ept>: enables a particular form of template binding where values come from the templated parent.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{CustomResource}<ept id="p1">](customresource-markup-extension.md)</ept>: for advanced resource lookup scenarios.</source>
          <target state="new"><bpt id="p1">[</bpt>{CustomResource}<ept id="p1">](customresource-markup-extension.md)</ept>: for advanced resource lookup scenarios.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Windows Runtime also supports the <bpt id="p1">[</bpt>{x:Null} markup extension<ept id="p1">](x-null-markup-extension.md)</ept>.</source>
          <target state="new">Windows Runtime also supports the <bpt id="p1">[</bpt>{x:Null} markup extension<ept id="p1">](x-null-markup-extension.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You use this to set <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Nullable<ept id="p2">**</ept><ept id="p1">](T:System.Nullable%601)</ept> values to <bpt id="p3">**</bpt>null<ept id="p3">**</ept> in XAML.</source>
          <target state="new">You use this to set <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Nullable<ept id="p2">**</ept><ept id="p1">](T:System.Nullable%601)</ept> values to <bpt id="p3">**</bpt>null<ept id="p3">**</ept> in XAML.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For example you might use this in a control template for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CheckBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept>, which interprets <bpt id="p3">**</bpt>null<ept id="p3">**</ept> as an indeterminate check state (triggering the "Indeterminate" visual state).</source>
          <target state="new">For example you might use this in a control template for a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CheckBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept>, which interprets <bpt id="p3">**</bpt>null<ept id="p3">**</ept> as an indeterminate check state (triggering the "Indeterminate" visual state).</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A markup extension generally return an existing instance from some other part of the object graph for the app, or defers a value to run time.</source>
          <target state="new">A markup extension generally return an existing instance from some other part of the object graph for the app, or defers a value to run time.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Because you can use a markup extension as an attribute value, and that's the typical usage, you often see markup extensions providing values for reference-type properties that might have otherwise required a property element syntax.</source>
          <target state="new">Because you can use a markup extension as an attribute value, and that's the typical usage, you often see markup extensions providing values for reference-type properties that might have otherwise required a property element syntax.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For example, here's the syntax for referencing a reusable <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> from a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ResourceDictionary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>: <ph id="ph1">`&lt;Button Style="{StaticResource SearchButtonStyle}"/&gt;`</ph>.</source>
          <target state="new">For example, here's the syntax for referencing a reusable <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> from a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ResourceDictionary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept>: <ph id="ph1">`&lt;Button Style="{StaticResource SearchButtonStyle}"/&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> is a reference type, not a simple value, so without the <ph id="ph1">`{StaticResource}`</ph> usage, you would've needed a <ph id="ph2">`&lt;Button.Style&gt;`</ph> property element and a <ph id="ph3">`&lt;Style&gt;`</ph> definition within it to set the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.Style<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> property.</source>
          <target state="new">A <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> is a reference type, not a simple value, so without the <ph id="ph1">`{StaticResource}`</ph> usage, you would've needed a <ph id="ph2">`&lt;Button.Style&gt;`</ph> property element and a <ph id="ph3">`&lt;Style&gt;`</ph> definition within it to set the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.Style<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> property.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>By using markup extensions, every property that is settable in XAML is potentially settable in attribute syntax.</source>
          <target state="new">By using markup extensions, every property that is settable in XAML is potentially settable in attribute syntax.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>You can use attribute syntax to provide reference values for a property even if it doesn't otherwise support an attribute syntax for direct object instantiation.</source>
          <target state="new">You can use attribute syntax to provide reference values for a property even if it doesn't otherwise support an attribute syntax for direct object instantiation.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Or you can enable specific behavior that defers the general requirement that XAML properties be filled by value types or by newly created reference types.</source>
          <target state="new">Or you can enable specific behavior that defers the general requirement that XAML properties be filled by value types or by newly created reference types.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To illustrate, the next XAML example sets the value of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> property of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Border<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> by using attribute syntax.</source>
          <target state="new">To illustrate, the next XAML example sets the value of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> property of a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Border<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> by using attribute syntax.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> property takes an instance of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Style<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> class, a reference type that by default could not be created using an attribute syntax string.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Style<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208743)</ept> property takes an instance of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Style<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208849)</ept> class, a reference type that by default could not be created using an attribute syntax string.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>But in this case, the attribute references a particular markup extension, <bpt id="p1">[</bpt>StaticResource<ept id="p1">](staticresource-markup-extension.md)</ept>.</source>
          <target state="new">But in this case, the attribute references a particular markup extension, <bpt id="p1">[</bpt>StaticResource<ept id="p1">](staticresource-markup-extension.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>When that markup extension is processed, it returns a reference to a <bpt id="p1">**</bpt>Style<ept id="p1">**</ept> element that was defined earlier as a keyed resource in a resource dictionary.</source>
          <target state="new">When that markup extension is processed, it returns a reference to a <bpt id="p1">**</bpt>Style<ept id="p1">**</ept> element that was defined earlier as a keyed resource in a resource dictionary.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can nest markup extensions.</source>
          <target state="new">You can nest markup extensions.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The innermost markup extension is evaluated first.</source>
          <target state="new">The innermost markup extension is evaluated first.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Because of markup extensions, you need special syntax for a literal "{" value in an attribute.</source>
          <target state="new">Because of markup extensions, you need special syntax for a literal "{" value in an attribute.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more info see <bpt id="p1">[</bpt>XAML syntax guide<ept id="p1">](xaml-syntax-guide.md)</ept>.</source>
          <target state="new">For more info see <bpt id="p1">[</bpt>XAML syntax guide<ept id="p1">](xaml-syntax-guide.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="new">Events</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>XAML is a declarative language for objects and their properties, but it also includes a syntax for attaching event handlers to objects in the markup.</source>
          <target state="new">XAML is a declarative language for objects and their properties, but it also includes a syntax for attaching event handlers to objects in the markup.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The XAML event syntax can then integrate the XAML-declared events through the Windows Runtime programming model.</source>
          <target state="new">The XAML event syntax can then integrate the XAML-declared events through the Windows Runtime programming model.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You specify the name of the event as an attribute name on the object where the event is handled.</source>
          <target state="new">You specify the name of the event as an attribute name on the object where the event is handled.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For the attribute value, you specify the name of an event-handler function that you define in code.</source>
          <target state="new">For the attribute value, you specify the name of an event-handler function that you define in code.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The XAML processor uses this name to create a delegate representation in the loaded object tree, and adds the specified handler to an internal handler list.</source>
          <target state="new">The XAML processor uses this name to create a delegate representation in the loaded object tree, and adds the specified handler to an internal handler list.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Nearly all Windows Runtime apps are defined by both markup and code-behind sources.</source>
          <target state="new">Nearly all Windows Runtime apps are defined by both markup and code-behind sources.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Here's a simple example.</source>
          <target state="new">Here's a simple example.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> class supports an event named <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Click<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> class supports an event named <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Click<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept>.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You can write a handler for <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> that runs code that should be invoked after the user clicks the <bpt id="p2">**</bpt>Button<ept id="p2">**</ept>.</source>
          <target state="new">You can write a handler for <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> that runs code that should be invoked after the user clicks the <bpt id="p2">**</bpt>Button<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In XAML, you specify <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> as an attribute on the <bpt id="p2">**</bpt>Button<ept id="p2">**</ept>.</source>
          <target state="new">In XAML, you specify <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> as an attribute on the <bpt id="p2">**</bpt>Button<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For the attribute value, provide a string that is the method name of your handler.</source>
          <target state="new">For the attribute value, provide a string that is the method name of your handler.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When you compile, the compiler now expects that there will be a method named <ph id="ph1">`showUpdatesButton-Click`</ph> defined in the code-behind file, in the namespace declared in the XAML page's <bpt id="p1">[</bpt>x:Class<ept id="p1">](x-class-attribute.md)</ept> value.</source>
          <target state="new">When you compile, the compiler now expects that there will be a method named <ph id="ph1">`showUpdatesButton-Click`</ph> defined in the code-behind file, in the namespace declared in the XAML page's <bpt id="p1">[</bpt>x:Class<ept id="p1">](x-class-attribute.md)</ept> value.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Also, that method must satisfy the delegate contract for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Click<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event.</source>
          <target state="new">Also, that method must satisfy the delegate contract for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Click<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Within a project, the XAML is written as a .xaml file, and you use the language you prefer (C#, Visual Basic, C++/CX) to write a code-behind file.</source>
          <target state="new">Within a project, the XAML is written as a .xaml file, and you use the language you prefer (C#, Visual Basic, C++/CX) to write a code-behind file.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>When a XAML file is markup-compiled as part of a build action for the project, the location of the XAML code-behind file for each XAML page is identified by specifying a namespace and class as the <bpt id="p1">[</bpt>x:Class<ept id="p1">](x-class-attribute.md)</ept> attribute of the root element of the XAML page.</source>
          <target state="new">When a XAML file is markup-compiled as part of a build action for the project, the location of the XAML code-behind file for each XAML page is identified by specifying a namespace and class as the <bpt id="p1">[</bpt>x:Class<ept id="p1">](x-class-attribute.md)</ept> attribute of the root element of the XAML page.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>For more info on how these mechanisms work in XAML and how they relate to the programming and application models, see <bpt id="p1">[</bpt>Events and routed events overview<ept id="p1">](events-and-routed-events-overview.md)</ept>.</source>
          <target state="new">For more info on how these mechanisms work in XAML and how they relate to the programming and application models, see <bpt id="p1">[</bpt>Events and routed events overview<ept id="p1">](events-and-routed-events-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For C++/CX there are two code-behind files, one is a header (.xaml.h) and the other is implementation (.xaml.cpp).</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For C++/CX there are two code-behind files, one is a header (.xaml.h) and the other is implementation (.xaml.cpp).</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The implementation references the header, and it's technically the header that represents the entry point for the code-behind connection.</source>
          <target state="new">The implementation references the header, and it's technically the header that represents the entry point for the code-behind connection.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Resource dictionaries</source>
          <target state="new">Resource dictionaries</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Creating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> is a common task that is usually accomplished by authoring a resource dictionary as an area of a XAML page or a separate XAML file.</source>
          <target state="new">Creating a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> is a common task that is usually accomplished by authoring a resource dictionary as an area of a XAML page or a separate XAML file.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Resource dictionaries and how to use them is a larger conceptual area that is outside the scope of this topic.</source>
          <target state="new">Resource dictionaries and how to use them is a larger conceptual area that is outside the scope of this topic.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more info see <bpt id="p1">[</bpt>ResourceDictionary and XAML resource references<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187273)</ept>.</source>
          <target state="new">For more info see <bpt id="p1">[</bpt>ResourceDictionary and XAML resource references<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187273)</ept>.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>XAML and XML</source>
          <target state="new">XAML and XML</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The XAML language is fundamentally based on the XML language.</source>
          <target state="new">The XAML language is fundamentally based on the XML language.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>But XAML extends XML significantly.</source>
          <target state="new">But XAML extends XML significantly.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In particular it treats the concept of schema quite differently because of its relationship to the backing type concept, and adds language elements such as attached members and markup extensions.</source>
          <target state="new">In particular it treats the concept of schema quite differently because of its relationship to the backing type concept, and adds language elements such as attached members and markup extensions.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xml:lang<ept id="p1">**</ept> is valid in XAML, but influences runtime rather than parse behavior, and is typically aliased to a framework-level property.</source>
          <target state="new"><bpt id="p1">**</bpt>xml:lang<ept id="p1">**</ept> is valid in XAML, but influences runtime rather than parse behavior, and is typically aliased to a framework-level property.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement.Language<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702066)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement.Language<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702066)</ept>.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xml:base<ept id="p1">**</ept> is valid in markup but parsers ignore it.</source>
          <target state="new"><bpt id="p1">**</bpt>xml:base<ept id="p1">**</ept> is valid in markup but parsers ignore it.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xml:space<ept id="p1">**</ept> is valid, but is only relevant for scenarios described in the <bpt id="p2">[</bpt>XAML and whitespace<ept id="p2">](xaml-and-whitespace.md)</ept> topic.</source>
          <target state="new"><bpt id="p1">**</bpt>xml:space<ept id="p1">**</ept> is valid, but is only relevant for scenarios described in the <bpt id="p2">[</bpt>XAML and whitespace<ept id="p2">](xaml-and-whitespace.md)</ept> topic.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>encoding<ept id="p1">**</ept> attribute is valid in XAML.</source>
          <target state="new">The <bpt id="p1">**</bpt>encoding<ept id="p1">**</ept> attribute is valid in XAML.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Only UTF-8 and UTF-16 encodings are supported.</source>
          <target state="new">Only UTF-8 and UTF-16 encodings are supported.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>UTF-32 encoding is not supported.</source>
          <target state="new">UTF-32 encoding is not supported.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Case sensitivity in XAML</source>
          <target state="new">Case sensitivity in XAML</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>XAML is case-sensitive.</source>
          <target state="new">XAML is case-sensitive.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This is another consequence of XAML being based on XML, which is case-sensitive.</source>
          <target state="new">This is another consequence of XAML being based on XML, which is case-sensitive.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The names of XAML elements and attributes are case-sensitive.</source>
          <target state="new">The names of XAML elements and attributes are case-sensitive.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The value of an attribute is potentially case-sensitive; this depends on how the attribute value is handled for particular properties.</source>
          <target state="new">The value of an attribute is potentially case-sensitive; this depends on how the attribute value is handled for particular properties.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For example, if the attribute value declares a member name of an enumeration, the built-in behavior that type-converts a member name string to return the enumeration member value is not case-sensitive.</source>
          <target state="new">For example, if the attribute value declares a member name of an enumeration, the built-in behavior that type-converts a member name string to return the enumeration member value is not case-sensitive.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>In contrast, the value of the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> property, and utility methods for working with objects based on the name that the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> property declares, treat the name string as case-sensitive.</source>
          <target state="new">In contrast, the value of the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> property, and utility methods for working with objects based on the name that the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> property declares, treat the name string as case-sensitive.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>XAML namescopes</source>
          <target state="new">XAML namescopes</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The XAML language defines a concept of a XAML namescope.</source>
          <target state="new">The XAML language defines a concept of a XAML namescope.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The XAML namescope concept influences how XAML processors should treat the value of <bpt id="p1">**</bpt>x:Name<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> applied to XAML elements, particularly the scopes in which names should be relied upon to be unique identifiers.</source>
          <target state="new">The XAML namescope concept influences how XAML processors should treat the value of <bpt id="p1">**</bpt>x:Name<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> applied to XAML elements, particularly the scopes in which names should be relied upon to be unique identifiers.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>XAML namescopes are covered in more detail in a separate topic; see <bpt id="p1">[</bpt>XAML namescopes<ept id="p1">](xaml-namescopes.md)</ept>.</source>
          <target state="new">XAML namescopes are covered in more detail in a separate topic; see <bpt id="p1">[</bpt>XAML namescopes<ept id="p1">](xaml-namescopes.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The role of XAML in the development process</source>
          <target state="new">The role of XAML in the development process</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>XAML plays several important roles in the app development process.</source>
          <target state="new">XAML plays several important roles in the app development process.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>XAML is the primary format for declaring an app's UI and elements in that UI, if you are programming using C#, Visual Basic or C++/CX.</source>
          <target state="new">XAML is the primary format for declaring an app's UI and elements in that UI, if you are programming using C#, Visual Basic or C++/CX.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Typically at least one XAML file in your project represents a page metaphor in your app for the initially displayed UI.</source>
          <target state="new">Typically at least one XAML file in your project represents a page metaphor in your app for the initially displayed UI.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Additional XAML files might declare additional pages for navigation UI.</source>
          <target state="new">Additional XAML files might declare additional pages for navigation UI.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Other XAML files can declare resources, such as templates or styles.</source>
          <target state="new">Other XAML files can declare resources, such as templates or styles.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>You use the XAML format for declaring styles and templates applied to controls and UI for an app.</source>
          <target state="new">You use the XAML format for declaring styles and templates applied to controls and UI for an app.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>You might use styles and templates either for templating existing controls, or if you define a control that supplies a default template as part of a control package.</source>
          <target state="new">You might use styles and templates either for templating existing controls, or if you define a control that supplies a default template as part of a control package.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>When you use it to define styles and templates, the relevant XAML is often declared as a discrete XAML file with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> root.</source>
          <target state="new">When you use it to define styles and templates, the relevant XAML is often declared as a discrete XAML file with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceDictionary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> root.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>XAML is the common format for designer support of creating app UI and exchanging the UI design between different designer apps.</source>
          <target state="new">XAML is the common format for designer support of creating app UI and exchanging the UI design between different designer apps.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Most notably, XAML for the app can be interchanged between different XAML design tools (or design windows within tools).</source>
          <target state="new">Most notably, XAML for the app can be interchanged between different XAML design tools (or design windows within tools).</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Several other technologies also define the basic UI in XAML.</source>
          <target state="new">Several other technologies also define the basic UI in XAML.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>In relationship to Windows Presentation Foundation (WPF) XAML and Microsoft Silverlight XAML, the XAML for Windows Runtime uses the same URI for its shared default XAML namespace.</source>
          <target state="new">In relationship to Windows Presentation Foundation (WPF) XAML and Microsoft Silverlight XAML, the XAML for Windows Runtime uses the same URI for its shared default XAML namespace.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The XAML vocabulary for Windows Runtime overlaps significantly with the XAML-for-UI vocabulary also used by Silverlight and to a slightly lesser extent by WPF.</source>
          <target state="new">The XAML vocabulary for Windows Runtime overlaps significantly with the XAML-for-UI vocabulary also used by Silverlight and to a slightly lesser extent by WPF.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Thus, XAML promotes an efficient migration pathway for UI originally defined for precursor technologies that also used XAML.</source>
          <target state="new">Thus, XAML promotes an efficient migration pathway for UI originally defined for precursor technologies that also used XAML.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>XAML defines the visual appearance of a UI, and an associated code-behind file defines the logic.</source>
          <target state="new">XAML defines the visual appearance of a UI, and an associated code-behind file defines the logic.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>You can adjust the UI design without making changes to the logic in code-behind.</source>
          <target state="new">You can adjust the UI design without making changes to the logic in code-behind.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>XAML simplifies the workflow between designers and developers.</source>
          <target state="new">XAML simplifies the workflow between designers and developers.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Because of the richness of the visual designer and design surface support for the XAML language, XAML supports rapid UI prototyping in the early development phases.</source>
          <target state="new">Because of the richness of the visual designer and design surface support for the XAML language, XAML supports rapid UI prototyping in the early development phases.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Depending on your own role in the development process, you might not interact with XAML much.</source>
          <target state="new">Depending on your own role in the development process, you might not interact with XAML much.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The degree to which you do interact with XAML files also depends on which development environment you are using, whether you use interactive design environment features such as toolboxes and property editors, and the scope and purpose of your Windows Runtime app.</source>
          <target state="new">The degree to which you do interact with XAML files also depends on which development environment you are using, whether you use interactive design environment features such as toolboxes and property editors, and the scope and purpose of your Windows Runtime app.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Nevertheless, it is likely that during development of the app, you will be editing a XAML file at the element level using a text or XML editor.</source>
          <target state="new">Nevertheless, it is likely that during development of the app, you will be editing a XAML file at the element level using a text or XML editor.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Using this info, you can confidently edit XAML in a text or XML representation and maintain the validity of that XAML file's declarations and purpose when it is consumed by tools, markup compile operations, or the run-time phase of your Windows Runtime app.</source>
          <target state="new">Using this info, you can confidently edit XAML in a text or XML representation and maintain the validity of that XAML file's declarations and purpose when it is consumed by tools, markup compile operations, or the run-time phase of your Windows Runtime app.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Optimize your XAML for load performance</source>
          <target state="new">Optimize your XAML for load performance</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Here are some tips for defining UI elements in XAML using best practices for performance.</source>
          <target state="new">Here are some tips for defining UI elements in XAML using best practices for performance.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Many of these tips relate to using XAML resources, but are listed here in the general XAML overview for convenience.</source>
          <target state="new">Many of these tips relate to using XAML resources, but are listed here in the general XAML overview for convenience.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>For more info about XAML resources see <bpt id="p1">[</bpt>ResourceDictionary and XAML resource references<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187273)</ept>.</source>
          <target state="new">For more info about XAML resources see <bpt id="p1">[</bpt>ResourceDictionary and XAML resource references<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187273)</ept>.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For some more tips on performance, including XAML that purposely demonstrates some of the poor performance practices that you should avoid in your XAML, see <bpt id="p1">[</bpt>Optimize your XAML markup<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204779)</ept>.</source>
          <target state="new">For some more tips on performance, including XAML that purposely demonstrates some of the poor performance practices that you should avoid in your XAML, see <bpt id="p1">[</bpt>Optimize your XAML markup<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt204779)</ept>.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If you use the same color brush often in your XAML, define a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SolidColorBrush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242962)</ept> as a resource rather than using a named color as an attribute value each time.</source>
          <target state="new">If you use the same color brush often in your XAML, define a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SolidColorBrush<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242962)</ept> as a resource rather than using a named color as an attribute value each time.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>If you use the same resource on more than one UI page, consider defining it in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242338)</ept> rather than on each page.</source>
          <target state="new">If you use the same resource on more than one UI page, consider defining it in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Application.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242338)</ept> rather than on each page.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Conversely, if only one page uses a resource, don't define it in <bpt id="p1">**</bpt>Application.Resources<ept id="p1">**</ept> and instead define it only for the page that needs it.</source>
          <target state="new">Conversely, if only one page uses a resource, don't define it in <bpt id="p1">**</bpt>Application.Resources<ept id="p1">**</ept> and instead define it only for the page that needs it.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This is good both for XAML factoring while designing your app and for performance during XAML parsing.</source>
          <target state="new">This is good both for XAML factoring while designing your app and for performance during XAML parsing.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For resources that your app packages, check for unused resources (a resource that has a key, but there's no <bpt id="p1">[</bpt>StaticResource<ept id="p1">](staticresource-markup-extension.md)</ept> reference in your app that uses it).</source>
          <target state="new">For resources that your app packages, check for unused resources (a resource that has a key, but there's no <bpt id="p1">[</bpt>StaticResource<ept id="p1">](staticresource-markup-extension.md)</ept> reference in your app that uses it).</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remove these from your XAML before you release your app.</source>
          <target state="new">Remove these from your XAML before you release your app.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If you're using separate XAML files that provides design resources (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept>), consider commenting or removing unused resources from these files.</source>
          <target state="new">If you're using separate XAML files that provides design resources (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>MergedDictionaries<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208801)</ept>), consider commenting or removing unused resources from these files.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Even if you have a shared XAML starting point that you're using in more than one app or that provides common resources for all your app, it's still your app that packages the XAML resources each time, and potentially has to load them.</source>
          <target state="new">Even if you have a shared XAML starting point that you're using in more than one app or that provides common resources for all your app, it's still your app that packages the XAML resources each time, and potentially has to load them.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Don't define UI elements you don't need for composition, and use the default control templates whenever possible (these templates have already been tested and verified for load performance).</source>
          <target state="new">Don't define UI elements you don't need for composition, and use the default control templates whenever possible (these templates have already been tested and verified for load performance).</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Use containers such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Border<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> rather than deliberate overdraws of UI elements.</source>
          <target state="new">Use containers such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Border<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> rather than deliberate overdraws of UI elements.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Basically, don't draw the same pixel multiple times.</source>
          <target state="new">Basically, don't draw the same pixel multiple times.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>For more info on overdraw and how to test for it, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DebugSettings.IsOverdrawHeatMapEnabled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701823)</ept>.</source>
          <target state="new">For more info on overdraw and how to test for it, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DebugSettings.IsOverdrawHeatMapEnabled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh701823)</ept>.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Use the default items templates for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242878)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242705)</ept>; these have special <bpt id="p5">**</bpt>Presenter<ept id="p5">**</ept> logic that solves performance issues when building the visual tree for large numbers of list items.</source>
          <target state="new">Use the default items templates for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242878)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>GridView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242705)</ept>; these have special <bpt id="p5">**</bpt>Presenter<ept id="p5">**</ept> logic that solves performance issues when building the visual tree for large numbers of list items.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Debugging XAML</source>
          <target state="new">Debugging XAML</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Because XAML is a markup language, some of the typical strategies for debugging within Microsoft Visual Studio are not available.</source>
          <target state="new">Because XAML is a markup language, some of the typical strategies for debugging within Microsoft Visual Studio are not available.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>For example, there is no way to set a breakpoint within a XAML file.</source>
          <target state="new">For example, there is no way to set a breakpoint within a XAML file.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>However, there are other techniques that can help you debug issues with UI definitions or other XAML markup while you're still developing your app.</source>
          <target state="new">However, there are other techniques that can help you debug issues with UI definitions or other XAML markup while you're still developing your app.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>When there are problems with a XAML file, the most typical result is that some system or your app will throw a XAML parse exception.</source>
          <target state="new">When there are problems with a XAML file, the most typical result is that some system or your app will throw a XAML parse exception.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Whenever there is a XAML parse exception, the XAML loaded by the XAML parser failed to create a valid object tree.</source>
          <target state="new">Whenever there is a XAML parse exception, the XAML loaded by the XAML parser failed to create a valid object tree.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>In some cases, such as when the XAML represents the first "page" of your application that is loaded as the root visual, the XAML parse exception is not recoverable.</source>
          <target state="new">In some cases, such as when the XAML represents the first "page" of your application that is loaded as the root visual, the XAML parse exception is not recoverable.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>XAML is often edited within an IDE such as Visual Studio and one of its XAML design surfaces.</source>
          <target state="new">XAML is often edited within an IDE such as Visual Studio and one of its XAML design surfaces.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Visual Studio can often provide design-time validation and error checking of a XAML source as you edit it.</source>
          <target state="new">Visual Studio can often provide design-time validation and error checking of a XAML source as you edit it.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>For example it might display "squiggles" in the XAML text editor as soon as you type a bad attribute value, and you won't even have to wait for a XAML compile pass to see that something's wrong with your UI definition.</source>
          <target state="new">For example it might display "squiggles" in the XAML text editor as soon as you type a bad attribute value, and you won't even have to wait for a XAML compile pass to see that something's wrong with your UI definition.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Once the app actually runs, if any XAML parse errors have gone undetected at design time, these are reported by the common language runtime (CLR) as a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>XamlParseException<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh673774)</ept>.</source>
          <target state="new">Once the app actually runs, if any XAML parse errors have gone undetected at design time, these are reported by the common language runtime (CLR) as a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>XamlParseException<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh673774)</ept>.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For more info on what you might be able to do for a run-time <bpt id="p1">**</bpt>XamlParseException<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>Exception handling for Windows Runtime apps in C# or Visual Basic<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn532194)</ept>.</source>
          <target state="new">For more info on what you might be able to do for a run-time <bpt id="p1">**</bpt>XamlParseException<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>Exception handling for Windows Runtime apps in C# or Visual Basic<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn532194)</ept>.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Apps that use C++/CX for code don't get the specific <bpt id="p2">[</bpt><bpt id="p3">**</bpt>XamlParseException<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh673774)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Apps that use C++/CX for code don't get the specific <bpt id="p2">[</bpt><bpt id="p3">**</bpt>XamlParseException<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh673774)</ept>.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>But the message in the exception clarifies that the source of the error is XAML-related, and includes context info such as line numbers in a XAML file, just like <bpt id="p1">**</bpt>XamlParseException<ept id="p1">**</ept> does.</source>
          <target state="new">But the message in the exception clarifies that the source of the error is XAML-related, and includes context info such as line numbers in a XAML file, just like <bpt id="p1">**</bpt>XamlParseException<ept id="p1">**</ept> does.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Fore more info on debugging a Windows Runtime app, see <bpt id="p1">[</bpt>Start a debug session<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh781607.aspx)</ept>.</source>
          <target state="new">Fore more info on debugging a Windows Runtime app, see <bpt id="p1">[</bpt>Start a debug session<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh781607.aspx)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>