<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\xaml-platform\xaml-and-whitespace.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01112910296923a767e3968f35d286e661cf29e5</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Learn about the whitespace processing rules as used by XAML.</source>
          <target state="new">Learn about the whitespace processing rules as used by XAML.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAML and whitespace</source>
          <target state="new">XAML and whitespace</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XAML and whitespace</source>
          <target state="new">XAML and whitespace</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Learn about the whitespace processing rules as used by XAML.</source>
          <target state="new">Learn about the whitespace processing rules as used by XAML.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Whitespace processing</source>
          <target state="new">Whitespace processing</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Consistent with XML, whitespace characters in XAML are space, linefeed, and tab.</source>
          <target state="new">Consistent with XML, whitespace characters in XAML are space, linefeed, and tab.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These correspond to the Unicode values 0020, 000A, and 0009 respectively.</source>
          <target state="new">These correspond to the Unicode values 0020, 000A, and 0009 respectively.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By default this whitespace normalization occurs when a XAML processor encounters any inner text found between elements in a XAML file:</source>
          <target state="new">By default this whitespace normalization occurs when a XAML processor encounters any inner text found between elements in a XAML file:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Linefeed characters between East Asian characters are removed.</source>
          <target state="new">Linefeed characters between East Asian characters are removed.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All whitespace characters (space, linefeed, tab) are converted into spaces.</source>
          <target state="new">All whitespace characters (space, linefeed, tab) are converted into spaces.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>All consecutive spaces are deleted and replaced by one space.</source>
          <target state="new">All consecutive spaces are deleted and replaced by one space.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A space immediately following the start tag is deleted.</source>
          <target state="new">A space immediately following the start tag is deleted.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A space immediately before the end tag is deleted.</source>
          <target state="new">A space immediately before the end tag is deleted.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>East Asian characters<ept id="p1">*</ept> is defined as a set of Unicode character ranges U+20000 to U+2FFFD and U+30000 to U+3FFFD.</source>
          <target state="new"><bpt id="p1">*</bpt>East Asian characters<ept id="p1">*</ept> is defined as a set of Unicode character ranges U+20000 to U+2FFFD and U+30000 to U+3FFFD.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This subset is also sometimes referred to as <bpt id="p1">*</bpt>CJK ideographs<ept id="p1">*</ept>.</source>
          <target state="new">This subset is also sometimes referred to as <bpt id="p1">*</bpt>CJK ideographs<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see http://www.unicode.org.</source>
          <target state="new">For more information, see http://www.unicode.org.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>"Default" corresponds to the state denoted by the default value of the <bpt id="p1">**</bpt>xml:space<ept id="p1">**</ept> attribute.</source>
          <target state="new">"Default" corresponds to the state denoted by the default value of the <bpt id="p1">**</bpt>xml:space<ept id="p1">**</ept> attribute.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Whitespace in inner text, and string primitives</source>
          <target state="new">Whitespace in inner text, and string primitives</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The above normalization rules apply to inner text within XAML elements.</source>
          <target state="new">The above normalization rules apply to inner text within XAML elements.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>After normalization, a XAML processor converts any inner text into an appropriate type like this:</source>
          <target state="new">After normalization, a XAML processor converts any inner text into an appropriate type like this:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the type of the property is not a collection, but is not directly an <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> type, the XAML processor tries to convert to that type using its type converter.</source>
          <target state="new">If the type of the property is not a collection, but is not directly an <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> type, the XAML processor tries to convert to that type using its type converter.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A failed conversion here results in a XAML parse error.</source>
          <target state="new">A failed conversion here results in a XAML parse error.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the type of the property is a collection, and the inner text is contiguous (no intervening element tags), the inner text is parsed as a single <bpt id="p1">**</bpt>String<ept id="p1">**</ept>.</source>
          <target state="new">If the type of the property is a collection, and the inner text is contiguous (no intervening element tags), the inner text is parsed as a single <bpt id="p1">**</bpt>String<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the collection type cannot accept <bpt id="p1">**</bpt>String<ept id="p1">**</ept>, this also results in a XAML parser error.</source>
          <target state="new">If the collection type cannot accept <bpt id="p1">**</bpt>String<ept id="p1">**</ept>, this also results in a XAML parser error.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the type of the property is <bpt id="p1">**</bpt>Object<ept id="p1">**</ept>, then the inner text is parsed as a single <bpt id="p2">**</bpt>String<ept id="p2">**</ept>.</source>
          <target state="new">If the type of the property is <bpt id="p1">**</bpt>Object<ept id="p1">**</ept>, then the inner text is parsed as a single <bpt id="p2">**</bpt>String<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If there are intervening element tags, this results in a XAML parser error, because the <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> type implies a single object (<bpt id="p2">**</bpt>String<ept id="p2">**</ept> or otherwise).</source>
          <target state="new">If there are intervening element tags, this results in a XAML parser error, because the <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> type implies a single object (<bpt id="p2">**</bpt>String<ept id="p2">**</ept> or otherwise).</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the type of the property is a collection, and the inner text is not contiguous, then the first substring is converted into a <bpt id="p1">**</bpt>String<ept id="p1">**</ept> and added as a collection item, the intervening element is added as a collection item, and finally the trailing substring (if any) is added to the collection as a third <bpt id="p2">**</bpt>String<ept id="p2">**</ept> item.</source>
          <target state="new">If the type of the property is a collection, and the inner text is not contiguous, then the first substring is converted into a <bpt id="p1">**</bpt>String<ept id="p1">**</ept> and added as a collection item, the intervening element is added as a collection item, and finally the trailing substring (if any) is added to the collection as a third <bpt id="p2">**</bpt>String<ept id="p2">**</ept> item.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Whitespace and text content models</source>
          <target state="new">Whitespace and text content models</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In practice, preserving whitespace is of concern only for a subset of all possible content models.</source>
          <target state="new">In practice, preserving whitespace is of concern only for a subset of all possible content models.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>That subset is composed of content models that can take a singleton <bpt id="p1">**</bpt>String<ept id="p1">**</ept> type in some form, a dedicated <bpt id="p2">**</bpt>String<ept id="p2">**</ept> collection, or a mixture of <bpt id="p3">**</bpt>String<ept id="p3">**</ept> and other types in lists, collections, or dictionaries.</source>
          <target state="new">That subset is composed of content models that can take a singleton <bpt id="p1">**</bpt>String<ept id="p1">**</ept> type in some form, a dedicated <bpt id="p2">**</bpt>String<ept id="p2">**</ept> collection, or a mixture of <bpt id="p3">**</bpt>String<ept id="p3">**</ept> and other types in lists, collections, or dictionaries.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Even for content models that can take strings, the default behavior within these content models is that any whitespace that remains is not treated as significant.</source>
          <target state="new">Even for content models that can take strings, the default behavior within these content models is that any whitespace that remains is not treated as significant.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Preserving whitespace</source>
          <target state="new">Preserving whitespace</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Several techniques for preserving whitespace in the source XAML for eventual presentation are not affected by XAML processor whitespace normalization.</source>
          <target state="new">Several techniques for preserving whitespace in the source XAML for eventual presentation are not affected by XAML processor whitespace normalization.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>: Specify this attribute at the level of the element where whitespace needs to be preserved.</source>
          <target state="new">: Specify this attribute at the level of the element where whitespace needs to be preserved.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that this preserves all whitespace, including the spaces that might be added by code editors or design surfaces to align markup elements as a visually intuitive nesting.</source>
          <target state="new">Note that this preserves all whitespace, including the spaces that might be added by code editors or design surfaces to align markup elements as a visually intuitive nesting.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Whether those spaces render is again a matter of the content model for the containing element.</source>
          <target state="new">Whether those spaces render is again a matter of the content model for the containing element.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>We don't recommend that you specify <ph id="ph1">`xml:space="preserve"`</ph> at the root level, because the majority of object models don't consider whitespace as significant one way or another.</source>
          <target state="new">We don't recommend that you specify <ph id="ph1">`xml:space="preserve"`</ph> at the root level, because the majority of object models don't consider whitespace as significant one way or another.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is a better practice to only set the attribute specifically at the level of elements that render whitespace within strings, or are whitespace significant collections.</source>
          <target state="new">It is a better practice to only set the attribute specifically at the level of elements that render whitespace within strings, or are whitespace significant collections.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Entities and nonbreaking spaces: XAML supports placing any Unicode entity within a text object model.</source>
          <target state="new">Entities and nonbreaking spaces: XAML supports placing any Unicode entity within a text object model.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can use dedicated entities such as nonbreaking space (in UTF-8 encoding).</source>
          <target state="new">You can use dedicated entities such as nonbreaking space (in UTF-8 encoding).</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also use rich text controls that support nonbreaking space characters.</source>
          <target state="new">You can also use rich text controls that support nonbreaking space characters.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Be cautious if you are using entities to simulate layout characteristics such as indents, because the run-time output of the entities vary based on a greater number of factors than would the general layout facilities, such as proper use of panels and margins.</source>
          <target state="new">Be cautious if you are using entities to simulate layout characteristics such as indents, because the run-time output of the entities vary based on a greater number of factors than would the general layout facilities, such as proper use of panels and margins.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>