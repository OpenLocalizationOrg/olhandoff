<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\audio-video-camera\playready-encrypted-media-extension.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21c0151b9900d8505cd78ecdee4daa69c897caaa</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>This section describes how to modify your PlayReady Web app to support the changes made from the previous Windows 8.1 version to the Windows 10 version.</source>
          <target state="new">This section describes how to modify your PlayReady Web app to support the changes made from the previous Windows 8.1 version to the Windows 10 version.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>PlayReady Encrypted Media Extension</source>
          <target state="new">PlayReady Encrypted Media Extension</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>PlayReady Encrypted Media Extension</source>
          <target state="new">PlayReady Encrypted Media Extension</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This section describes how to modify your PlayReady Web app to support the changes made from the previous Windows 8.1 version to the Windows 10 version.</source>
          <target state="new">This section describes how to modify your PlayReady Web app to support the changes made from the previous Windows 8.1 version to the Windows 10 version.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using PlayReady media elements in Internet Explorer enables developers to create Web apps capable of providing PlayReady content to the user while enforcing the access rules defined by the content provider.</source>
          <target state="new">Using PlayReady media elements in Internet Explorer enables developers to create Web apps capable of providing PlayReady content to the user while enforcing the access rules defined by the content provider.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This section describes how to add PlayReady media elements to your existing Web apps using only HTML5 and JavaScript.</source>
          <target state="new">This section describes how to add PlayReady media elements to your existing Web apps using only HTML5 and JavaScript.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>What's New in PlayReady Encrypted Media Extension</source>
          <target state="new">What's New in PlayReady Encrypted Media Extension</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This section provides a list of changes made to the PlayReady Encrypted Media Extension to enable PlayReady content protection on Windows 10.</source>
          <target state="new">This section provides a list of changes made to the PlayReady Encrypted Media Extension to enable PlayReady content protection on Windows 10.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following list describes the new features and changes made to PlayReady Encrypted Media Extension for Windows 10:</source>
          <target state="new">The following list describes the new features and changes made to PlayReady Encrypted Media Extension for Windows 10:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Added hardware digital rights management (DRM).</source>
          <target state="new">Added hardware digital rights management (DRM).</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Hardware-based content protection support enables secure playback of high definition (HD) and ultra-high definition (UHD) content on multiple device platforms.</source>
          <target state="new">Hardware-based content protection support enables secure playback of high definition (HD) and ultra-high definition (UHD) content on multiple device platforms.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Key material (including private keys, content keys, and any other key material used to derive or unlock said keys), and decrypted compressed and uncompressed video samples are protected by leveraging hardware security.</source>
          <target state="new">Key material (including private keys, content keys, and any other key material used to derive or unlock said keys), and decrypted compressed and uncompressed video samples are protected by leveraging hardware security.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Provides proactive acquisition of non-persistent licenses.</source>
          <target state="new">Provides proactive acquisition of non-persistent licenses.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Provides acquisition of multiple licenses in one message.</source>
          <target state="new">Provides acquisition of multiple licenses in one message.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can either use a PlayReady object with multiple key identifiers (KeyIDs) as in Windows 8.1, or use <bpt id="p1">[</bpt>content decryption model data (CDMData)<ept id="p1">](https://go.microsoft.com/fwlink/p/?LinkID=626819)</ept> with multiple KeyIDs.</source>
          <target state="new">You can either use a PlayReady object with multiple key identifiers (KeyIDs) as in Windows 8.1, or use <bpt id="p1">[</bpt>content decryption model data (CDMData)<ept id="p1">](https://go.microsoft.com/fwlink/p/?LinkID=626819)</ept> with multiple KeyIDs.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  In Windows 10, multiple key identifiers are supported under <ph id="ph1">&amp;lt;</ph>KeyID<ph id="ph2">&amp;gt;</ph> in CDMData.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  In Windows 10, multiple key identifiers are supported under <ph id="ph1">&amp;lt;</ph>KeyID<ph id="ph2">&amp;gt;</ph> in CDMData.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Added real time expiration support, or limited duration license (LDL).</source>
          <target state="new">Added real time expiration support, or limited duration license (LDL).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Provides the ability to set real-time expiration on licenses.</source>
          <target state="new">Provides the ability to set real-time expiration on licenses.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Added HDCP Type 1 (version 2.2) policy support.</source>
          <target state="new">Added HDCP Type 1 (version 2.2) policy support.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Miracast is now implicit as an output.</source>
          <target state="new">Miracast is now implicit as an output.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Added secure stop.</source>
          <target state="new">Added secure stop.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Secure stop provides the means for a PlayReady device to confidently assert to a media streaming service that media playback has stopped for any given piece of content.</source>
          <target state="new">Secure stop provides the means for a PlayReady device to confidently assert to a media streaming service that media playback has stopped for any given piece of content.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Added audio and video license separation.</source>
          <target state="new">Added audio and video license separation.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Separate tracks prevent video from being decoded as audio; enabling more robust content protection.</source>
          <target state="new">Separate tracks prevent video from being decoded as audio; enabling more robust content protection.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Emerging standards are requiring separate keys for audio and visual tracks.</source>
          <target state="new">Emerging standards are requiring separate keys for audio and visual tracks.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Added MaxResDecode.</source>
          <target state="new">Added MaxResDecode.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This feature was added to limit playback of content to a maximum resolution even when in possession of a more capable key (but not a license).</source>
          <target state="new">This feature was added to limit playback of content to a maximum resolution even when in possession of a more capable key (but not a license).</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It supports cases where multiple stream sizes are encoded with a single key.</source>
          <target state="new">It supports cases where multiple stream sizes are encoded with a single key.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Encrypted Media Extension Support in PlayReady</source>
          <target state="new">Encrypted Media Extension Support in PlayReady</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This section describes the version of the W3C Encrypted Media Extension supported by PlayReady.</source>
          <target state="new">This section describes the version of the W3C Encrypted Media Extension supported by PlayReady.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>PlayReady for Web Apps is currently bound to the <bpt id="p1">[</bpt>W3C Encrypted Media Extension (EME) draft of May 10, 2013<ept id="p1">](http://www.w3.org/TR/2013/WD-encrypted-media-20130510/)</ept>.</source>
          <target state="new">PlayReady for Web Apps is currently bound to the <bpt id="p1">[</bpt>W3C Encrypted Media Extension (EME) draft of May 10, 2013<ept id="p1">](http://www.w3.org/TR/2013/WD-encrypted-media-20130510/)</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This support will be changed to the updated EME specification in future versions of Windows.</source>
          <target state="new">This support will be changed to the updated EME specification in future versions of Windows.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Use Hardware DRM</source>
          <target state="new">Use Hardware DRM</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This section describes how your web app can use PlayReady hardware DRM, and how to disable hardware DRM if the protected content does not support it.</source>
          <target state="new">This section describes how your web app can use PlayReady hardware DRM, and how to disable hardware DRM if the protected content does not support it.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To use PlayReady hardware DRM, your JavaScript web app should use the <bpt id="p1">**</bpt>isTypeSupported<ept id="p1">**</ept> EME method with a key system identifier of <ph id="ph1">`com.microsoft.playready.hardware`</ph> to query for PlayReady hardware DRM support from the browser.</source>
          <target state="new">To use PlayReady hardware DRM, your JavaScript web app should use the <bpt id="p1">**</bpt>isTypeSupported<ept id="p1">**</ept> EME method with a key system identifier of <ph id="ph1">`com.microsoft.playready.hardware`</ph> to query for PlayReady hardware DRM support from the browser.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Occasionally, some content is not supported in hardware DRM.</source>
          <target state="new">Occasionally, some content is not supported in hardware DRM.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Cocktail content is never supported in hardware DRM; if you want to play cocktail content, you must opt out of hardware DRM.</source>
          <target state="new">Cocktail content is never supported in hardware DRM; if you want to play cocktail content, you must opt out of hardware DRM.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Some hardware DRM will support HEVC and some will not; if you want to play HEVC content and hardware DRM doesn’t support it, you will want to opt out as well.</source>
          <target state="new">Some hardware DRM will support HEVC and some will not; if you want to play HEVC content and hardware DRM doesn’t support it, you will want to opt out as well.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  To determine whether HEVC content is supported, after instantiating <ph id="ph1">`com.microsoft.playready`</ph>, use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>PlayReadyStatics.CheckSupportedHardware<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn986441)</ept> method.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  To determine whether HEVC content is supported, after instantiating <ph id="ph1">`com.microsoft.playready`</ph>, use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>PlayReadyStatics.CheckSupportedHardware<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn986441)</ept> method.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add Secure Stop to your Web App</source>
          <target state="new">Add Secure Stop to your Web App</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This section describes how to add secure stop to your web app.</source>
          <target state="new">This section describes how to add secure stop to your web app.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Secure stop provides the means for a PlayReady device to confidently assert to a media streaming service that media playback has stopped for any given piece of content.</source>
          <target state="new">Secure stop provides the means for a PlayReady device to confidently assert to a media streaming service that media playback has stopped for any given piece of content.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This capability ensures your media streaming services provide accurate enforcement and reporting of usage limitations on different devices for a given account.</source>
          <target state="new">This capability ensures your media streaming services provide accurate enforcement and reporting of usage limitations on different devices for a given account.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There are two primary scenarios for sending a secure stop challenge:</source>
          <target state="new">There are two primary scenarios for sending a secure stop challenge:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When the media presentation stops because end of content was reached or when the user stopped the media presentation somewhere in the middle.</source>
          <target state="new">When the media presentation stops because end of content was reached or when the user stopped the media presentation somewhere in the middle.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When the previous session ends unexpectedly (for example, due to a system or app crash).</source>
          <target state="new">When the previous session ends unexpectedly (for example, due to a system or app crash).</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The app will need to query, either at startup or shutdown, for any outstanding secure stop sessions and send challenge(s) separate from any other media playback.</source>
          <target state="new">The app will need to query, either at startup or shutdown, for any outstanding secure stop sessions and send challenge(s) separate from any other media playback.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following procedures describe how to set up secure stop for various scenarios.</source>
          <target state="new">The following procedures describe how to set up secure stop for various scenarios.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To set up secure stop for a normal end of a presentation:</source>
          <target state="new">To set up secure stop for a normal end of a presentation:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Register the <bpt id="p1">**</bpt>onEnded<ept id="p1">**</ept> event before playback starts.</source>
          <target state="new">Register the <bpt id="p1">**</bpt>onEnded<ept id="p1">**</ept> event before playback starts.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>onEnded<ept id="p1">**</ept> event handler needs to call <ph id="ph1">`removeAttribute(“src”)`</ph> from the video/audio element object to set the source to <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> which will trigger the media foundation to tear down the topology, destroy the decryptor(s), and set the stop state.</source>
          <target state="new">The <bpt id="p1">**</bpt>onEnded<ept id="p1">**</ept> event handler needs to call <ph id="ph1">`removeAttribute(“src”)`</ph> from the video/audio element object to set the source to <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> which will trigger the media foundation to tear down the topology, destroy the decryptor(s), and set the stop state.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can start the secure stop CDM session inside the handler to send the secure stop challenge to the server to notify the playback has stopped at this time, but it can be done later as well.</source>
          <target state="new">You can start the secure stop CDM session inside the handler to send the secure stop challenge to the server to notify the playback has stopped at this time, but it can be done later as well.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To set up secure stop if the user navigates away from the page or closes down the tab or browser:</source>
          <target state="new">To set up secure stop if the user navigates away from the page or closes down the tab or browser:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>No app action is required to record the stop state; it will be recorded for you.</source>
          <target state="new">No app action is required to record the stop state; it will be recorded for you.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To set up secure stop for custom page controls or user actions (such as custom navigation buttons or starting a new presentation before the current presentation completed):</source>
          <target state="new">To set up secure stop for custom page controls or user actions (such as custom navigation buttons or starting a new presentation before the current presentation completed):</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When custom user action occurs, the app needs to set the source to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> which will trigger the media foundation to tear down the topology, destroy the decryptor(s), and set the stop state.</source>
          <target state="new">When custom user action occurs, the app needs to set the source to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> which will trigger the media foundation to tear down the topology, destroy the decryptor(s), and set the stop state.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use secure stop in your web app:</source>
          <target state="new">The following example demonstrates how to use secure stop in your web app:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The secure stop data’s <ph id="ph1">`&lt;SessionID&gt;B64 encoded session ID&lt;/SessionID&gt;`</ph> in the sample above can be an asterisk (<ph id="ph2">\*</ph>), which is a wild card for all the secure stop sessions recorded.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The secure stop data’s <ph id="ph1">`&lt;SessionID&gt;B64 encoded session ID&lt;/SessionID&gt;`</ph> in the sample above can be an asterisk (<ph id="ph2">\*</ph>), which is a wild card for all the secure stop sessions recorded.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>That is, the <bpt id="p1">**</bpt>SessionID<ept id="p1">**</ept> tag can be a specific session, or a wild card (<ph id="ph1">\*</ph>) to select all the secure stop sessions.</source>
          <target state="new">That is, the <bpt id="p1">**</bpt>SessionID<ept id="p1">**</ept> tag can be a specific session, or a wild card (<ph id="ph1">\*</ph>) to select all the secure stop sessions.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Programming Considerations for Encrypted Media Extension</source>
          <target state="new">Programming Considerations for Encrypted Media Extension</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This section lists the programming considerations that you should take into account when creating your PlayReady-enabled web app for Windows 10.</source>
          <target state="new">This section lists the programming considerations that you should take into account when creating your PlayReady-enabled web app for Windows 10.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MSMediaKeys<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MSMediaKeySession<ept id="p2">**</ept> objects created by your app must be kept alive until your app closes.</source>
          <target state="new">The <bpt id="p1">**</bpt>MSMediaKeys<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MSMediaKeySession<ept id="p2">**</ept> objects created by your app must be kept alive until your app closes.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>One way of ensuring these objects stay alive is to assign them as global variables (the variables would become out of scope and subject to garbage collection if declared as a local variable inside of a function).</source>
          <target state="new">One way of ensuring these objects stay alive is to assign them as global variables (the variables would become out of scope and subject to garbage collection if declared as a local variable inside of a function).</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, the following sample assigns the variables <bpt id="p1">*</bpt>g<ph id="ph1">\_</ph>msMediaKeys<ept id="p1">*</ept> and <bpt id="p2">*</bpt>g<ph id="ph2">\_</ph>mediaKeySession<ept id="p2">*</ept> as global variables, which are then assigned to the <bpt id="p3">**</bpt>MSMediaKeys<ept id="p3">**</ept> and <bpt id="p4">**</bpt>MSMediaKeySession<ept id="p4">**</ept> objects in the function.</source>
          <target state="new">For example, the following sample assigns the variables <bpt id="p1">*</bpt>g<ph id="ph1">\_</ph>msMediaKeys<ept id="p1">*</ept> and <bpt id="p2">*</bpt>g<ph id="ph2">\_</ph>mediaKeySession<ept id="p2">*</ept> as global variables, which are then assigned to the <bpt id="p3">**</bpt>MSMediaKeys<ept id="p3">**</ept> and <bpt id="p4">**</bpt>MSMediaKeySession<ept id="p4">**</ept> objects in the function.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Refer to the <bpt id="p1">[</bpt>sample applications<ept id="p1">](https://code.msdn.microsoft.com/windowsapps/PlayReady-samples-for-124a3738)</ept> for more information.</source>
          <target state="new">Refer to the <bpt id="p1">[</bpt>sample applications<ept id="p1">](https://code.msdn.microsoft.com/windowsapps/PlayReady-samples-for-124a3738)</ept> for more information.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>