<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\threading-async\index.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b34d9448dbe2707cb715e47eac11dfe64f74b5dc</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Threading and async programming</source>
          <target state="new">Threading and async programming</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="new">.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Threading and async programming</source>
          <target state="new">Threading and async programming</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Threading and async programming enables your app to accomplish work asynchronously in parallel threads.</source>
          <target state="new">Threading and async programming enables your app to accomplish work asynchronously in parallel threads.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Your app can use the thread pool to accomplish work asynchronously in parallel threads.</source>
          <target state="new">Your app can use the thread pool to accomplish work asynchronously in parallel threads.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The thread pool manages a set of threads and uses a queue to assign work items to threads as they become available.</source>
          <target state="new">The thread pool manages a set of threads and uses a queue to assign work items to threads as they become available.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The thread pool is similar to the asynchronous programming patterns available in the Windows Runtime because it can be used to accomplish extended work without blocking the UI, but the thread pool offers more control than the asynchronous programming patterns and you can use it to complete multiple work items in parallel.</source>
          <target state="new">The thread pool is similar to the asynchronous programming patterns available in the Windows Runtime because it can be used to accomplish extended work without blocking the UI, but the thread pool offers more control than the asynchronous programming patterns and you can use it to complete multiple work items in parallel.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use the thread pool to:</source>
          <target state="new">You can use the thread pool to:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Submit work items, control their priority, and cancel work items.</source>
          <target state="new">Submit work items, control their priority, and cancel work items.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Schedule work items using timers and periodic timers.</source>
          <target state="new">Schedule work items using timers and periodic timers.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Set aside resources for critical work items.</source>
          <target state="new">Set aside resources for critical work items.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Run work items in response to named events and semaphores.</source>
          <target state="new">Run work items in response to named events and semaphores.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The thread pool is more efficient at managing threads because it reduces the overhead of creating and destroying threads.</source>
          <target state="new">The thread pool is more efficient at managing threads because it reduces the overhead of creating and destroying threads.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The means it has access to optimize threads across multiple CPU cores, and it can balance thread resources between apps and when background tasks are running.</source>
          <target state="new">The means it has access to optimize threads across multiple CPU cores, and it can balance thread resources between apps and when background tasks are running.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Using the built-in thread pool is convenient because you focus on writing code that accomplishes a task instead of the mechanics of thread management.</source>
          <target state="new">Using the built-in thread pool is convenient because you focus on writing code that accomplishes a task instead of the mechanics of thread management.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Topic</source>
          <target state="new">Topic</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Asynchronous programming (UWP apps)</source>
          <target state="new">Asynchronous programming (UWP apps)</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C++ component extensions (C++/CX), and JavaScript.</source>
          <target state="new">This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C++ component extensions (C++/CX), and JavaScript.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Asynchronous programming in C++ (UWP apps)</source>
          <target state="new">Asynchronous programming in C++ (UWP apps)</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This article describes the recommended way to consume asynchronous methods in C++/CX by using the <ph id="ph1">&lt;code&gt;task&lt;/code&gt;</ph> class that's defined in the <ph id="ph2">&lt;code&gt;concurrency&lt;/code&gt;</ph> namespace in ppltasks.h.</source>
          <target state="new">This article describes the recommended way to consume asynchronous methods in C++/CX by using the <ph id="ph1">&lt;code&gt;task&lt;/code&gt;</ph> class that's defined in the <ph id="ph2">&lt;code&gt;concurrency&lt;/code&gt;</ph> namespace in ppltasks.h.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Best practices for using the thread pool</source>
          <target state="new">Best practices for using the thread pool</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This topic describes best practices for working with the thread pool.</source>
          <target state="new">This topic describes best practices for working with the thread pool.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Call asynchronous APIs in C# or Visual Basic</source>
          <target state="new">Call asynchronous APIs in C# or Visual Basic</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</source>
          <target state="new">The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.</source>
          <target state="new">This topic discusses how to use asynchronous methods from the UWP in C# or Microsoft Visual Basic.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create a periodic work item</source>
          <target state="new">Create a periodic work item</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Learn how to create a work item that repeats periodically.</source>
          <target state="new">Learn how to create a work item that repeats periodically.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Submit a work item to the thread pool</source>
          <target state="new">Submit a work item to the thread pool</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Learn how to do work in a separate thread by submitting a work item to the thread pool.</source>
          <target state="new">Learn how to do work in a separate thread by submitting a work item to the thread pool.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use a timer to submit a work item</source>
          <target state="new">Use a timer to submit a work item</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Learn how to create a work item that runs after a timer elapses.</source>
          <target state="new">Learn how to create a work item that runs after a timer elapses.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>