<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\usability\accessibility\basic-accessibility-information.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">81a0a429daa82224e548eaa50393d6be266b23f0</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Basic accessibility info is often categorized into name, role, and value.</source>
          <target state="new">Basic accessibility info is often categorized into name, role, and value.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic describes code to help your app expose the basic information that assistive technologies need.</source>
          <target state="new">This topic describes code to help your app expose the basic information that assistive technologies need.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Expose basic accessibility information</source>
          <target state="new">Expose basic accessibility information</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Expose basic accessibility information</source>
          <target state="new">Expose basic accessibility information</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Basic accessibility info is often categorized into name, role, and value.</source>
          <target state="new">Basic accessibility info is often categorized into name, role, and value.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic describes code to help your app expose the basic information that assistive technologies need.</source>
          <target state="new">This topic describes code to help your app expose the basic information that assistive technologies need.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Accessible name</source>
          <target state="new">Accessible name</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An accessible name is a short, descriptive text string that a screen reader uses to announce a UI element.</source>
          <target state="new">An accessible name is a short, descriptive text string that a screen reader uses to announce a UI element.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Set the accessible name for UI elements so that have a meaning that is important for understanding the content or interacting with the UI.</source>
          <target state="new">Set the accessible name for UI elements so that have a meaning that is important for understanding the content or interacting with the UI.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Such elements typically include images, input fields, buttons, controls, and regions.</source>
          <target state="new">Such elements typically include images, input fields, buttons, controls, and regions.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This table describes how to define or obtain an accessible name for various types of elements in a XAML UI.</source>
          <target state="new">This table describes how to define or obtain an accessible name for various types of elements in a XAML UI.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Element type</source>
          <target state="new">Element type</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Static text</source>
          <target state="new">Static text</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RichTextBlock<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227565)</ept> elements, an accessible name is automatically determined from the visible (inner) text.</source>
          <target state="new">For <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RichTextBlock<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227565)</ept> elements, an accessible name is automatically determined from the visible (inner) text.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>All of the text in that element is used as the name.</source>
          <target state="new">All of the text in that element is used as the name.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Name from inner text<ept id="p1">](#name-from-inner-text)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Name from inner text<ept id="p1">](#name-from-inner-text)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="new">Images</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The XAML <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept> element does not have a direct analog to the HTML <bpt id="p3">**</bpt>alt<ept id="p3">**</ept> attribute of <bpt id="p4">**</bpt>img<ept id="p4">**</ept> and similar elements.</source>
          <target state="new">The XAML <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept> element does not have a direct analog to the HTML <bpt id="p3">**</bpt>alt<ept id="p3">**</ept> attribute of <bpt id="p4">**</bpt>img<ept id="p4">**</ept> and similar elements.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Either use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> to provide a name, or use the captioning technique.</source>
          <target state="new">Either use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> to provide a name, or use the captioning technique.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Accessible names for images<ept id="p1">](#images)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Accessible names for images<ept id="p1">](#images)</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Form elements</source>
          <target state="new">Form elements</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The accessible name for a form element should be the same as the label that is displayed for that element.</source>
          <target state="new">The accessible name for a form element should be the same as the label that is displayed for that element.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Labels and LabeledBy<ept id="p1">](#labels)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Labels and LabeledBy<ept id="p1">](#labels)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Buttons and links</source>
          <target state="new">Buttons and links</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>By default, the accessible name of a button or link is based on the visible text, using the same rules as described in <bpt id="p1">[</bpt>Name from inner text<ept id="p1">](#name-from-inner-text)</ept>.</source>
          <target state="new">By default, the accessible name of a button or link is based on the visible text, using the same rules as described in <bpt id="p1">[</bpt>Name from inner text<ept id="p1">](#name-from-inner-text)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In cases where a button contains only an image, use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> to provide a text-only equivalent of the button's intended action.</source>
          <target state="new">In cases where a button contains only an image, use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> to provide a text-only equivalent of the button's intended action.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Most container elements such as panels do not promote their content as accessible name.</source>
          <target state="new">Most container elements such as panels do not promote their content as accessible name.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is because it is the item content that should report a name and corresponding role, not its container.</source>
          <target state="new">This is because it is the item content that should report a name and corresponding role, not its container.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The container element might report that it is an element that has children in a Microsoft UI Automation representation, such that the assistive technology logic can traverse it.</source>
          <target state="new">The container element might report that it is an element that has children in a Microsoft UI Automation representation, such that the assistive technology logic can traverse it.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>But users of assistive technologies don't generally need to know about the containers and thus most containers aren't named.</source>
          <target state="new">But users of assistive technologies don't generally need to know about the containers and thus most containers aren't named.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Role and value</source>
          <target state="new">Role and value</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The controls and other UI elements that are part of the XAML vocabulary implement UI Automation support for reporting role and value as part of their definitions.</source>
          <target state="new">The controls and other UI elements that are part of the XAML vocabulary implement UI Automation support for reporting role and value as part of their definitions.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can use UI Automation tools to examine the role and value information for the controls, or you can read the documentation for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> implementations of each control.</source>
          <target state="new">You can use UI Automation tools to examine the role and value information for the controls, or you can read the documentation for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationPeer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> implementations of each control.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The available roles in a UI Automation framework are defined in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationControlType<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209182)</ept> enumeration.</source>
          <target state="new">The available roles in a UI Automation framework are defined in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationControlType<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209182)</ept> enumeration.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>UI Automation clients such as assistive technologies can obtain role information by calling methods that the UI Automation framework exposes by using the control's <bpt id="p1">**</bpt>AutomationPeer<ept id="p1">**</ept>.</source>
          <target state="new">UI Automation clients such as assistive technologies can obtain role information by calling methods that the UI Automation framework exposes by using the control's <bpt id="p1">**</bpt>AutomationPeer<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Not all controls have a value.</source>
          <target state="new">Not all controls have a value.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Controls that do have a value report this information to UI Automation through the peers and patterns that are supported by that control.</source>
          <target state="new">Controls that do have a value report this information to UI Automation through the peers and patterns that are supported by that control.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> form element does have a value.</source>
          <target state="new">For example, a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> form element does have a value.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An assistive technology can be a UI Automation client and can discover both that a value exists and what the value is.</source>
          <target state="new">An assistive technology can be a UI Automation client and can discover both that a value exists and what the value is.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this specific case the <bpt id="p1">**</bpt>TextBox<ept id="p1">**</ept> supports the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IValueProvider<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242663)</ept> pattern through the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>TextBoxAutomationPeer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR242550)</ept> definitions.</source>
          <target state="new">In this specific case the <bpt id="p1">**</bpt>TextBox<ept id="p1">**</ept> supports the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IValueProvider<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR242663)</ept> pattern through the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>TextBoxAutomationPeer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR242550)</ept> definitions.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For cases where you use <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationProperties.Name<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> or other techniques to supply the accessible name explicitly, do not include the same text as is used by the control role or type information in the accessible name.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For cases where you use <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationProperties.Name<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> or other techniques to supply the accessible name explicitly, do not include the same text as is used by the control role or type information in the accessible name.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example do not include strings such as "button" or "list" in the name.</source>
          <target state="new">For example do not include strings such as "button" or "list" in the name.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The role and type information comes from a different UI Automation property (<bpt id="p1">**</bpt>LocalizedControlType<ept id="p1">**</ept>) that is supplied by the default control support for UI Automation.</source>
          <target state="new">The role and type information comes from a different UI Automation property (<bpt id="p1">**</bpt>LocalizedControlType<ept id="p1">**</ept>) that is supplied by the default control support for UI Automation.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Many assistive technologies append the <bpt id="p1">**</bpt>LocalizedControlType<ept id="p1">**</ept> to the accessible name, so duplicating the role in the accessible name can result in unnecessarily repeated words.</source>
          <target state="new">Many assistive technologies append the <bpt id="p1">**</bpt>LocalizedControlType<ept id="p1">**</ept> to the accessible name, so duplicating the role in the accessible name can result in unnecessarily repeated words.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, if you give a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> control an accessible name of "button" or include "button" as the last part of the name, this might be read by screen readers as "button button".</source>
          <target state="new">For example, if you give a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> control an accessible name of "button" or include "button" as the last part of the name, this might be read by screen readers as "button button".</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You should test this aspect of your accessibility info using Narrator.</source>
          <target state="new">You should test this aspect of your accessibility info using Narrator.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Influencing the UI Automation tree views</source>
          <target state="new">Influencing the UI Automation tree views</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The UI Automation framework has a concept of tree views, where UI Automation clients can retrieve the relationships between elements in a UI using three possible views: raw, control, and content.</source>
          <target state="new">The UI Automation framework has a concept of tree views, where UI Automation clients can retrieve the relationships between elements in a UI using three possible views: raw, control, and content.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The control view is the view that's often used by UI Automation clients because it provides a good representation and organization of the elements in a UI that are interactive.</source>
          <target state="new">The control view is the view that's often used by UI Automation clients because it provides a good representation and organization of the elements in a UI that are interactive.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Testing tools usually enable you to choose which tree view to use when the tool presents the organization of elements.</source>
          <target state="new">Testing tools usually enable you to choose which tree view to use when the tool presents the organization of elements.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>By default, any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept> derived class and a few other elements will appear in the control view when the UI Automation framework represents the UI for a Universal Windows Platform (UWP) app.</source>
          <target state="new">By default, any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Control<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209390)</ept> derived class and a few other elements will appear in the control view when the UI Automation framework represents the UI for a Universal Windows Platform (UWP) app.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>But sometimes you don't want an element to appear in the control view because of UI composition, where that element is duplicating information or presenting information that's unimportant for accessibility scenarios.</source>
          <target state="new">But sometimes you don't want an element to appear in the control view because of UI composition, where that element is duplicating information or presenting information that's unimportant for accessibility scenarios.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use the attached property <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessibilityView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn251788)</ept> to change how elements are exposed to the tree views.</source>
          <target state="new">Use the attached property <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.AccessibilityView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Dn251788)</ept> to change how elements are exposed to the tree views.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you put an element in the <bpt id="p1">**</bpt>Raw<ept id="p1">**</ept> tree, most assistive technologies won't report that element as part of their views.</source>
          <target state="new">If you put an element in the <bpt id="p1">**</bpt>Raw<ept id="p1">**</ept> tree, most assistive technologies won't report that element as part of their views.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To see some examples of how this works in existing controls, open the generic.xaml design reference XAML file in a text editor, and search for <bpt id="p1">**</bpt>AutomationProperties.AccessibilityView<ept id="p1">**</ept> in the templates.</source>
          <target state="new">To see some examples of how this works in existing controls, open the generic.xaml design reference XAML file in a text editor, and search for <bpt id="p1">**</bpt>AutomationProperties.AccessibilityView<ept id="p1">**</ept> in the templates.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Name from inner text</source>
          <target state="new">Name from inner text</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To make it easier to use strings that already exist in the visible UI for accessible name values, many of the controls and other UI elements provide support for automatically determining a default accessible name based on inner text within the element, or from string values of content properties.</source>
          <target state="new">To make it easier to use strings that already exist in the visible UI for accessible name values, many of the controls and other UI elements provide support for automatically determining a default accessible name based on inner text within the element, or from string values of content properties.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RichTextBlock<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227565)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TextBox<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> and <bpt id="p7">**</bpt>RichTextBlock<ept id="p7">**</ept> each promote the value of the <bpt id="p8">**</bpt>Text<ept id="p8">**</ept> property as the default accessible name.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RichTextBlock<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR227565)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TextBox<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> and <bpt id="p7">**</bpt>RichTextBlock<ept id="p7">**</ept> each promote the value of the <bpt id="p8">**</bpt>Text<ept id="p8">**</ept> property as the default accessible name.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept> subclass uses an iterative "ToString" technique to find strings in its <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Content<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209365_content)</ept> value, and promotes these strings as the default accessible name.</source>
          <target state="new">Any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ContentControl<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept> subclass uses an iterative "ToString" technique to find strings in its <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Content<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209365_content)</ept> value, and promotes these strings as the default accessible name.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   As enforced by UI Automation, the accessible name length cannot be greater than 2048 characters.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   As enforced by UI Automation, the accessible name length cannot be greater than 2048 characters.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If a string used for automatic accessible name determination exceeds that limit, the accessible name is truncated at that point.</source>
          <target state="new">If a string used for automatic accessible name determination exceeds that limit, the accessible name is truncated at that point.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Accessible names for images</source>
          <target state="new">Accessible names for images</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To support screen readers and to provide the basic identifying information for each element in the UI, you sometimes must provide text alternatives to non-textual information such as images and charts (excluding any purely decorative or structural elements).</source>
          <target state="new">To support screen readers and to provide the basic identifying information for each element in the UI, you sometimes must provide text alternatives to non-textual information such as images and charts (excluding any purely decorative or structural elements).</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>These elements don't have inner text so the accessible name won't have a calculated value.</source>
          <target state="new">These elements don't have inner text so the accessible name won't have a calculated value.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can set the accessible name directly by setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> attached property as shown in this example.</source>
          <target state="new">You can set the accessible name directly by setting the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> attached property as shown in this example.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Alternatively, consider including a text caption that appears in the visible UI and that also serves as the label-associated accessibility information for the image content.</source>
          <target state="new">Alternatively, consider including a text caption that appears in the visible UI and that also serves as the label-associated accessibility information for the image content.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
          <target state="new">Here's an example:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Labels and LabeledBy</source>
          <target state="new">Labels and LabeledBy</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The preferred way to associate a label with a form element is to use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> with an <bpt id="p3">**</bpt>x:Name<ept id="p3">**</ept> for label text, and then to set the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>AutomationProperties.LabeledBy<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Hh759769)</ept> attached property on the form element to reference the labeling <bpt id="p6">**</bpt>TextBlock<ept id="p6">**</ept> by its XAML name.</source>
          <target state="new">The preferred way to associate a label with a form element is to use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> with an <bpt id="p3">**</bpt>x:Name<ept id="p3">**</ept> for label text, and then to set the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>AutomationProperties.LabeledBy<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Hh759769)</ept> attached property on the form element to reference the labeling <bpt id="p6">**</bpt>TextBlock<ept id="p6">**</ept> by its XAML name.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you use this pattern, when the user clicks the label, the focus moves to the associated control and assistive technologies can use the label text as the accessible name for the form field.</source>
          <target state="new">If you use this pattern, when the user clicks the label, the focus moves to the associated control and assistive technologies can use the label text as the accessible name for the form field.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Here's an example that shows this technique.</source>
          <target state="new">Here's an example that shows this technique.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Accessible description (optional)</source>
          <target state="new">Accessible description (optional)</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An accessible description provides additional accessibility information about a particular UI element.</source>
          <target state="new">An accessible description provides additional accessibility information about a particular UI element.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You typically provide an accessible description when an accessible name alone does not adequately convey an element's purpose.</source>
          <target state="new">You typically provide an accessible description when an accessible name alone does not adequately convey an element's purpose.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The Narrator screen reader reads an element's accessible description only when the user requests more information about the element by pressing Caps Lock+F.</source>
          <target state="new">The Narrator screen reader reads an element's accessible description only when the user requests more information about the element by pressing Caps Lock+F.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The accessible name is meant to identify the control rather than to fully document its behavior.</source>
          <target state="new">The accessible name is meant to identify the control rather than to fully document its behavior.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If a brief description is not enough to explain the control, you can set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.HelpText<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759765)</ept> attached property in addition to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AutomationProperties.Name<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept>.</source>
          <target state="new">If a brief description is not enough to explain the control, you can set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.HelpText<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759765)</ept> attached property in addition to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>AutomationProperties.Name<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept>.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Testing accessibility early and often</source>
          <target state="new">Testing accessibility early and often</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Ultimately, the best approach for supporting screen readers is to test your app using a screen reader yourself.</source>
          <target state="new">Ultimately, the best approach for supporting screen readers is to test your app using a screen reader yourself.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>That will show you how the screen reader behaves and what basic accessibility information might be missing from the app.</source>
          <target state="new">That will show you how the screen reader behaves and what basic accessibility information might be missing from the app.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Then you can adjust the UI or UI Automation property values accordingly.</source>
          <target state="new">Then you can adjust the UI or UI Automation property values accordingly.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Accessibility testing<ept id="p1">](accessibility-testing.md)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Accessibility testing<ept id="p1">](accessibility-testing.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>One of the tools you can use for testing accessibility is called <bpt id="p1">**</bpt>AccScope<ept id="p1">**</ept>.</source>
          <target state="new">One of the tools you can use for testing accessibility is called <bpt id="p1">**</bpt>AccScope<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AccScope<ept id="p1">**</ept> tool is particularly useful because you can see visual representations of your UI that represent how assistive technologies might view your app as an automation tree.</source>
          <target state="new">The <bpt id="p1">**</bpt>AccScope<ept id="p1">**</ept> tool is particularly useful because you can see visual representations of your UI that represent how assistive technologies might view your app as an automation tree.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In particular, there's a Narrator mode that gives a view of how Narrator gets text from your app and how it organizes the elements in the UI.</source>
          <target state="new">In particular, there's a Narrator mode that gives a view of how Narrator gets text from your app and how it organizes the elements in the UI.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>AccScope is designed so that it can be used and be useful throughout a development cycle for an app, even during the preliminary design phase.</source>
          <target state="new">AccScope is designed so that it can be used and be useful throughout a development cycle for an app, even during the preliminary design phase.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more info see <bpt id="p1">[</bpt>AccScope<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Dn433239)</ept>.</source>
          <target state="new">For more info see <bpt id="p1">[</bpt>AccScope<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Dn433239)</ept>.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Accessible names from dynamic data</source>
          <target state="new">Accessible names from dynamic data</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Windows supports many controls that can be used to display values that come from an associated data source, through a feature known as <bpt id="p1">*</bpt>data binding<ept id="p1">*</ept>.</source>
          <target state="new">Windows supports many controls that can be used to display values that come from an associated data source, through a feature known as <bpt id="p1">*</bpt>data binding<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When you populate lists with data items, you may need to use a technique that sets accessible names for data-bound list items after the initial list is populated.</source>
          <target state="new">When you populate lists with data items, you may need to use a technique that sets accessible names for data-bound list items after the initial list is populated.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more info, see "Scenario 4" in the <bpt id="p1">[</bpt>XAML accessibility sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=238570)</ept>.</source>
          <target state="new">For more info, see "Scenario 4" in the <bpt id="p1">[</bpt>XAML accessibility sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=238570)</ept>.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Accessible names and localization</source>
          <target state="new">Accessible names and localization</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To make sure that the accessible name is also an element that is localized, you should use correct techniques for storing localizable strings as resources and then referencing the resource connections with <bpt id="p1">[</bpt>x:Uid directive<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204791)</ept> values.</source>
          <target state="new">To make sure that the accessible name is also an element that is localized, you should use correct techniques for storing localizable strings as resources and then referencing the resource connections with <bpt id="p1">[</bpt>x:Uid directive<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204791)</ept> values.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If the accessible name is coming from an explicitly set <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> usage, make sure that the string there is also localizable.</source>
          <target state="new">If the accessible name is coming from an explicitly set <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> usage, make sure that the string there is also localizable.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Note that attached properties such as the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081)</ept> properties use a special qualifying syntax for the resource name, so that the resource references the attached property as applied to a specific element.</source>
          <target state="new">Note that attached properties such as the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209081)</ept> properties use a special qualifying syntax for the resource name, so that the resource references the attached property as applied to a specific element.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For example, the resource name for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> as applied to a UI element named <ph id="ph1">`MediumButton`</ph> is: <ph id="ph2">`MediumButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name`</ph>.</source>
          <target state="new">For example, the resource name for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties.Name<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh759770)</ept> as applied to a UI element named <ph id="ph1">`MediumButton`</ph> is: <ph id="ph2">`MediumButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name`</ph>.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="new">Accessibility</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>AutomationProperties.Name</source>
          <target state="new">AutomationProperties.Name</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>XAML accessibility sample</source>
          <target state="new">XAML accessibility sample</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Accessibility testing</source>
          <target state="new">Accessibility testing</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>