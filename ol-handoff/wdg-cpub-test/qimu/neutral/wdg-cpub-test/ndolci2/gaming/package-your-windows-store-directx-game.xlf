<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\package-your-windows-store-directx-game.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df5f99a7b444f3d9c2f83bc5a8910c74ba475a9c</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e58fd48" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Package your Universal Windows Platform (UWP) DirectX game</source>
          <target state="new">Package your Universal Windows Platform (UWP) DirectX game</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Larger Universal Windows Platform (UWP) games, especially those that support multiple languages with region-specific assets or feature optional high-definition assets, can easily balloon to large sizes.</source>
          <target state="new">Larger Universal Windows Platform (UWP) games, especially those that support multiple languages with region-specific assets or feature optional high-definition assets, can easily balloon to large sizes.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Package your Universal Windows Platform (UWP) DirectX game</source>
          <target state="new">Package your Universal Windows Platform (UWP) DirectX game</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Updated for UWP apps on Windows 10.</source>
          <target state="new">Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Larger Universal Windows Platform (UWP) games, especially those that support multiple languages with region-specific assets or feature optional high-definition assets, can easily balloon to large sizes.</source>
          <target state="new">Larger Universal Windows Platform (UWP) games, especially those that support multiple languages with region-specific assets or feature optional high-definition assets, can easily balloon to large sizes.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In this topic, learn how to use app packages and app bundles to customize your app so that your customers only receive the resources they actually need.</source>
          <target state="new">In this topic, learn how to use app packages and app bundles to customize your app so that your customers only receive the resources they actually need.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In addition to the app package model, Windows 10 supports app bundles which group together two types of packs:</source>
          <target state="new">In addition to the app package model, Windows 10 supports app bundles which group together two types of packs:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>App packs contain platform-specific executables and libraries.</source>
          <target state="new">App packs contain platform-specific executables and libraries.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Typically, a UWP game can have up to three app packs: one each for the x86, x64, and ARM CPU architectures.</source>
          <target state="new">Typically, a UWP game can have up to three app packs: one each for the x86, x64, and ARM CPU architectures.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All code and data specific to that hardware platform must be included in its app pack.</source>
          <target state="new">All code and data specific to that hardware platform must be included in its app pack.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An app pack should also contain all the core assets for the game to run with a baseline level of fidelity and performance.</source>
          <target state="new">An app pack should also contain all the core assets for the game to run with a baseline level of fidelity and performance.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Resource packs contain optional or expanded platform-agnostic data, such as game assets (textures, meshes, sound, text).</source>
          <target state="new">Resource packs contain optional or expanded platform-agnostic data, such as game assets (textures, meshes, sound, text).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A UWP game can have one or more resource packs, including resource packs for high-definition assets or textures, DirectX feature level 11+ resources, or language-specific assets and resources.</source>
          <target state="new">A UWP game can have one or more resource packs, including resource packs for high-definition assets or textures, DirectX feature level 11+ resources, or language-specific assets and resources.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about app bundles and app packs, read <bpt id="p1">[</bpt>Defining app resources<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965321)</ept>.</source>
          <target state="new">For more information about app bundles and app packs, read <bpt id="p1">[</bpt>Defining app resources<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965321)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>While you can place all content in your app packs, this is inefficient and redundant.</source>
          <target state="new">While you can place all content in your app packs, this is inefficient and redundant.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Why have the same large texture file replicated three times for each platform, especially for ARM platforms that may not use it?</source>
          <target state="new">Why have the same large texture file replicated three times for each platform, especially for ARM platforms that may not use it?</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A good goal is to try to minimize what your customer has to download, so they can start playing your game sooner, save space on their device, and avoid possible metered bandwidth costs.</source>
          <target state="new">A good goal is to try to minimize what your customer has to download, so they can start playing your game sooner, save space on their device, and avoid possible metered bandwidth costs.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To use this feature of the UWP app installer, it is important to consider the directory layout and file naming conventions for app and resource packaging early in game development, so your tools and source can output them correctly in a way that makes packaging simple.</source>
          <target state="new">To use this feature of the UWP app installer, it is important to consider the directory layout and file naming conventions for app and resource packaging early in game development, so your tools and source can output them correctly in a way that makes packaging simple.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Follow the rules outlined in this doc when developing or configuring asset creation and managing tools and scripts, and when authoring code that loads or references resources.</source>
          <target state="new">Follow the rules outlined in this doc when developing or configuring asset creation and managing tools and scripts, and when authoring code that loads or references resources.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Why create resource packs?</source>
          <target state="new">Why create resource packs?</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When you create an app, particularly a game app that can be sold in many locales or a broad variety of UWP hardware platforms, you often need to include multiple versions of many files to support those locales or platforms.</source>
          <target state="new">When you create an app, particularly a game app that can be sold in many locales or a broad variety of UWP hardware platforms, you often need to include multiple versions of many files to support those locales or platforms.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, if you are releasing your game in both the United States and Japan, you might need one set of voice files in English for the en-us locales, and another in Japanese for the jp-jp locale.</source>
          <target state="new">For example, if you are releasing your game in both the United States and Japan, you might need one set of voice files in English for the en-us locales, and another in Japanese for the jp-jp locale.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Or, if you want to use an image in your game for ARM devices as well as x86 and x64 platforms, you must upload the same image asset 3 times, once for each CPU architecture.</source>
          <target state="new">Or, if you want to use an image in your game for ARM devices as well as x86 and x64 platforms, you must upload the same image asset 3 times, once for each CPU architecture.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Additionally, if your game has a lot of high definition resources that do not apply to platforms with lower DirectX feature levels, why include them in the baseline app pack and require your user to a download a large volume of components that the device can’t use?</source>
          <target state="new">Additionally, if your game has a lot of high definition resources that do not apply to platforms with lower DirectX feature levels, why include them in the baseline app pack and require your user to a download a large volume of components that the device can’t use?</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Separating these high-def resources into an optional resource pack means that customers with devices that support those high-def resources can obtain them at the cost of (possibly metered) bandwidth, while those who do not have higher-end devices can get their game quicker and at a lower network usage cost.</source>
          <target state="new">Separating these high-def resources into an optional resource pack means that customers with devices that support those high-def resources can obtain them at the cost of (possibly metered) bandwidth, while those who do not have higher-end devices can get their game quicker and at a lower network usage cost.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Content candidates for game resource packs include:</source>
          <target state="new">Content candidates for game resource packs include:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>International locale specific assets (localized text, audio, or images)</source>
          <target state="new">International locale specific assets (localized text, audio, or images)</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>High resolution assets for different device scaling factors (1.0x, 1.4x, and 1.8x)</source>
          <target state="new">High resolution assets for different device scaling factors (1.0x, 1.4x, and 1.8x)</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>High definition assets for higher DirectX feature levels (9, 10, and 11)</source>
          <target state="new">High definition assets for higher DirectX feature levels (9, 10, and 11)</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All of this is defined in the package.appxmanifest that is part of your UWP project, and in your directory structure of your final package.</source>
          <target state="new">All of this is defined in the package.appxmanifest that is part of your UWP project, and in your directory structure of your final package.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because of the new Visual Studio UI, if you follow the process in this document, you should not need to edit it manually.</source>
          <target state="new">Because of the new Visual Studio UI, if you follow the process in this document, you should not need to edit it manually.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>   The loading and management of these resources are handled through the <bpt id="p2">**</bpt>Windows.ApplicationModel.Resources<ept id="p2">**</ept><ph id="ph1">\*</ph> APIs.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>   The loading and management of these resources are handled through the <bpt id="p2">**</bpt>Windows.ApplicationModel.Resources<ept id="p2">**</ept><ph id="ph1">\*</ph> APIs.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you use these app model resource APIs to load the correct file for a locale, scaling factor, or DirectX feature level, you do not need to load your assets using explicit file paths; rather, you provide the resource APIs with just the generalized file name of the asset you want, and let the resource management system obtain the correct variant of the resource for the user’s current platform and locale configuration (which you can specify directly as well with these same APIs).</source>
          <target state="new">If you use these app model resource APIs to load the correct file for a locale, scaling factor, or DirectX feature level, you do not need to load your assets using explicit file paths; rather, you provide the resource APIs with just the generalized file name of the asset you want, and let the resource management system obtain the correct variant of the resource for the user’s current platform and locale configuration (which you can specify directly as well with these same APIs).</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Resources for resource packaging are specified in one of two basic ways:</source>
          <target state="new">Resources for resource packaging are specified in one of two basic ways:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Asset files have the same filename, and the resource pack specific versions are placed in specific named directories.</source>
          <target state="new">Asset files have the same filename, and the resource pack specific versions are placed in specific named directories.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These directory names are reserved by the system.</source>
          <target state="new">These directory names are reserved by the system.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">\\</ph>en-us, <ph id="ph2">\\</ph>scale-140, <ph id="ph3">\\</ph>dxfl-dx11.</source>
          <target state="new">For example, <ph id="ph1">\\</ph>en-us, <ph id="ph2">\\</ph>scale-140, <ph id="ph3">\\</ph>dxfl-dx11.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Asset files are stored in folders with arbitrary names, but the files are named with a common label that is appended with strings reserved by the system to denote language or other qualifiers.</source>
          <target state="new">Asset files are stored in folders with arbitrary names, but the files are named with a common label that is appended with strings reserved by the system to denote language or other qualifiers.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Specifically, the qualifier strings are affixed to the generalized filename after an underscore (“<ph id="ph1">\_</ph>”).</source>
          <target state="new">Specifically, the qualifier strings are affixed to the generalized filename after an underscore (“<ph id="ph1">\_</ph>”).</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">\\</ph>assets<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>lang-en-us.png, <ph id="ph5">\\</ph>assets<ph id="ph6">\\</ph>menu<ph id="ph7">\_</ph>option1<ph id="ph8">\_</ph>scale-140.png, <ph id="ph9">\\</ph>assets<ph id="ph10">\\</ph>coolsign<ph id="ph11">\_</ph>dxfl-dx11.dds.</source>
          <target state="new">For example, <ph id="ph1">\\</ph>assets<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>lang-en-us.png, <ph id="ph5">\\</ph>assets<ph id="ph6">\\</ph>menu<ph id="ph7">\_</ph>option1<ph id="ph8">\_</ph>scale-140.png, <ph id="ph9">\\</ph>assets<ph id="ph10">\\</ph>coolsign<ph id="ph11">\_</ph>dxfl-dx11.dds.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You may also combine these strings.</source>
          <target state="new">You may also combine these strings.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">\\</ph>assets<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>scale-140<ph id="ph5">\_</ph>lang-en-us.png.</source>
          <target state="new">For example, <ph id="ph1">\\</ph>assets<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>scale-140<ph id="ph5">\_</ph>lang-en-us.png.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   When used in a filename rather than alone in a directory name, a language qualifier must take the form "lang-<ph id="ph1">&lt;tag&gt;</ph>", e.g."lang-en-us" as described in <bpt id="p2">[</bpt>How to name resources using qualifiers<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   When used in a filename rather than alone in a directory name, a language qualifier must take the form "lang-<ph id="ph1">&lt;tag&gt;</ph>", e.g."lang-en-us" as described in <bpt id="p2">[</bpt>How to name resources using qualifiers<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Directory names can be combined for additional specificity in resource packaging.</source>
          <target state="new">Directory names can be combined for additional specificity in resource packaging.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, they cannot be redundant.</source>
          <target state="new">However, they cannot be redundant.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">\\</ph>en-us<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>lang-en-us.png is redundant.</source>
          <target state="new">For example, <ph id="ph1">\\</ph>en-us<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>lang-en-us.png is redundant.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You may specify any non-reserved subdirectory names you need underneath a resource directory, as long as the directory structure is identical in each resource directory.</source>
          <target state="new">You may specify any non-reserved subdirectory names you need underneath a resource directory, as long as the directory structure is identical in each resource directory.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">\\</ph>dxfl-dx10<ph id="ph2">\\</ph>assets<ph id="ph3">\\</ph>textures<ph id="ph4">\\</ph>coolsign.dds.</source>
          <target state="new">For example, <ph id="ph1">\\</ph>dxfl-dx10<ph id="ph2">\\</ph>assets<ph id="ph3">\\</ph>textures<ph id="ph4">\\</ph>coolsign.dds.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you load or reference an asset, the pathname must be generalized, removing any qualifiers for language, scale, or DirectX feature level, whether they are in folder nodes or in the file names.</source>
          <target state="new">When you load or reference an asset, the pathname must be generalized, removing any qualifiers for language, scale, or DirectX feature level, whether they are in folder nodes or in the file names.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, to refer in code to an asset for which one of the variants is <ph id="ph1">\\</ph>dxfl-dx10<ph id="ph2">\\</ph>assets<ph id="ph3">\\</ph>textures<ph id="ph4">\\</ph>coolsign.dds, use <ph id="ph5">\\</ph>assets<ph id="ph6">\\</ph>textures<ph id="ph7">\\</ph>coolsign.dds.</source>
          <target state="new">For example, to refer in code to an asset for which one of the variants is <ph id="ph1">\\</ph>dxfl-dx10<ph id="ph2">\\</ph>assets<ph id="ph3">\\</ph>textures<ph id="ph4">\\</ph>coolsign.dds, use <ph id="ph5">\\</ph>assets<ph id="ph6">\\</ph>textures<ph id="ph7">\\</ph>coolsign.dds.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Likewise, to refer to an asset with a variant <ph id="ph1">\\</ph>images<ph id="ph2">\\</ph>background<ph id="ph3">\_</ph>scale-140.png, use <ph id="ph4">\\</ph>images<ph id="ph5">\\</ph>background.png.</source>
          <target state="new">Likewise, to refer to an asset with a variant <ph id="ph1">\\</ph>images<ph id="ph2">\\</ph>background<ph id="ph3">\_</ph>scale-140.png, use <ph id="ph4">\\</ph>images<ph id="ph5">\\</ph>background.png.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Here are the following reserved directory names and filename underscore prefixes:</source>
          <target state="new">Here are the following reserved directory names and filename underscore prefixes:</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Asset type</source>
          <target state="new">Asset type</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Resource pack directory name</source>
          <target state="new">Resource pack directory name</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Resource pack filename suffix</source>
          <target state="new">Resource pack filename suffix</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Localized assets</source>
          <target state="new">Localized assets</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>All possible languages, or language and locale combinations, for Windows 10.</source>
          <target state="new">All possible languages, or language and locale combinations, for Windows 10.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(The qualifier prefix "lang-" is not required in a folder name.)</source>
          <target state="new">(The qualifier prefix "lang-" is not required in a folder name.)</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An "<ph id="ph1">\_</ph>" followed by the language, locale, or language-locale specifier.</source>
          <target state="new">An "<ph id="ph1">\_</ph>" followed by the language, locale, or language-locale specifier.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, "<ph id="ph1">\_</ph>en", "<ph id="ph2">\_</ph>us", or "<ph id="ph3">\_</ph>en-us", respectively.</source>
          <target state="new">For example, "<ph id="ph1">\_</ph>en", "<ph id="ph2">\_</ph>us", or "<ph id="ph3">\_</ph>en-us", respectively.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Scaling factor assets</source>
          <target state="new">Scaling factor assets</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>scale-100, scale-140, scale-180.</source>
          <target state="new">scale-100, scale-140, scale-180.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These are for the 1.0x, 1.4x, and 1.8x UI scaling factors, respectively.</source>
          <target state="new">These are for the 1.0x, 1.4x, and 1.8x UI scaling factors, respectively.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An "<ph id="ph1">\_</ph>" followed by "scale-100", "scale-140", or "scale-180".</source>
          <target state="new">An "<ph id="ph1">\_</ph>" followed by "scale-100", "scale-140", or "scale-180".</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>DirectX feature level assets</source>
          <target state="new">DirectX feature level assets</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>dxfl-dx9, dxfl-dx10, and dxfl-dx11.</source>
          <target state="new">dxfl-dx9, dxfl-dx10, and dxfl-dx11.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>These are for the DirectX 9, 10, and 11 feature levels, respectively.</source>
          <target state="new">These are for the DirectX 9, 10, and 11 feature levels, respectively.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An "<ph id="ph1">\_</ph>" followed by "dxfl-dx9", "dxfl-dx10", or "dxfl-dx11".</source>
          <target state="new">An "<ph id="ph1">\_</ph>" followed by "dxfl-dx9", "dxfl-dx10", or "dxfl-dx11".</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Defining localized language resource packs</source>
          <target state="new">Defining localized language resource packs</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Locale-specific files are placed in project directories named for the language (for example, "en").</source>
          <target state="new">Locale-specific files are placed in project directories named for the language (for example, "en").</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When configuring your app to support localized assets for multiple languages, you should:</source>
          <target state="new">When configuring your app to support localized assets for multiple languages, you should:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Create an app subdirectory (or file version) for each language and locale you will support (for example, en-us, jp-jp, zh-cn, fr-fr, and so on).</source>
          <target state="new">Create an app subdirectory (or file version) for each language and locale you will support (for example, en-us, jp-jp, zh-cn, fr-fr, and so on).</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>During development, place copies of ALL assets (such as localized audio files, textures, and menu graphics) in the corresponding language locale subdirectory, even if they are not different across languages or locales.</source>
          <target state="new">During development, place copies of ALL assets (such as localized audio files, textures, and menu graphics) in the corresponding language locale subdirectory, even if they are not different across languages or locales.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For the best user experience, ensure that the user is alerted if they have not obtained an available language resource pack for their locale if one is available (or if they have accidentally deleted it after download and installation).</source>
          <target state="new">For the best user experience, ensure that the user is alerted if they have not obtained an available language resource pack for their locale if one is available (or if they have accidentally deleted it after download and installation).</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Make sure each asset or string resource file (.resw) has the same name in each directory.</source>
          <target state="new">Make sure each asset or string resource file (.resw) has the same name in each directory.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, menu<ph id="ph1">\_</ph>option1.png should have the same name in both the <ph id="ph2">\\</ph>en-us and <ph id="ph3">\\</ph>jp-jp directories even if the content of the file is for a different language.</source>
          <target state="new">For example, menu<ph id="ph1">\_</ph>option1.png should have the same name in both the <ph id="ph2">\\</ph>en-us and <ph id="ph3">\\</ph>jp-jp directories even if the content of the file is for a different language.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this case, you'd see them as <ph id="ph1">\\</ph>en-us<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1.png and <ph id="ph4">\\</ph>jp-jp<ph id="ph5">\\</ph>menu<ph id="ph6">\_</ph>option1.png.</source>
          <target state="new">In this case, you'd see them as <ph id="ph1">\\</ph>en-us<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1.png and <ph id="ph4">\\</ph>jp-jp<ph id="ph5">\\</ph>menu<ph id="ph6">\_</ph>option1.png.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You can optionally append the locale to the file name and store them in the same directory; for example, <ph id="ph1">\\</ph>assets<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>lang-en-us.png, <ph id="ph5">\\</ph>assets<ph id="ph6">\\</ph>menu<ph id="ph7">\_</ph>option1<ph id="ph8">\_</ph>lang-jp-jp.png.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You can optionally append the locale to the file name and store them in the same directory; for example, <ph id="ph1">\\</ph>assets<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>lang-en-us.png, <ph id="ph5">\\</ph>assets<ph id="ph6">\\</ph>menu<ph id="ph7">\_</ph>option1<ph id="ph8">\_</ph>lang-jp-jp.png.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Use the APIs in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206022)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows.ApplicationModel.Resources.Core<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225039)</ept> to specify and load the locale-specific resources for you app.</source>
          <target state="new">Use the APIs in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.Resources<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206022)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows.ApplicationModel.Resources.Core<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225039)</ept> to specify and load the locale-specific resources for you app.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Also, use asset references that do no include the specific locale, since these APIs determine the correct locale based on the user's settings and then retrieve the correct resource for the user.</source>
          <target state="new">Also, use asset references that do no include the specific locale, since these APIs determine the correct locale based on the user's settings and then retrieve the correct resource for the user.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In Microsoft Visual Studio 2015, select <bpt id="p1">**</bpt>PROJECT-&gt;Store-&gt;Create App Package...<ept id="p1">**</ept> and create the package.</source>
          <target state="new">In Microsoft Visual Studio 2015, select <bpt id="p1">**</bpt>PROJECT-&gt;Store-&gt;Create App Package...<ept id="p1">**</ept> and create the package.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Defining scaling factor resource packs</source>
          <target state="new">Defining scaling factor resource packs</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Windows 10 provides three user interface scaling factors: 1.0x, 1.4x, and 1.8x.</source>
          <target state="new">Windows 10 provides three user interface scaling factors: 1.0x, 1.4x, and 1.8x.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Scaling values for each display are set during installation based on a number of combined factors: the size of the screen, the resolution of the screen, and the assumed average distance of the user from the screen.</source>
          <target state="new">Scaling values for each display are set during installation based on a number of combined factors: the size of the screen, the resolution of the screen, and the assumed average distance of the user from the screen.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The user can also adjust scale factors to improve readability.</source>
          <target state="new">The user can also adjust scale factors to improve readability.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Your game should be both DPI-aware and scaling factor-aware for the best possible experience.</source>
          <target state="new">Your game should be both DPI-aware and scaling factor-aware for the best possible experience.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Part of this awareness means creating versions of critical visual assets for each of the three scaling factors.</source>
          <target state="new">Part of this awareness means creating versions of critical visual assets for each of the three scaling factors.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This also includes pointer interaction and hit testing!</source>
          <target state="new">This also includes pointer interaction and hit testing!</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When configuring your app to support resource packs for different UWP app scaling factors, you should:</source>
          <target state="new">When configuring your app to support resource packs for different UWP app scaling factors, you should:</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Create an app subdirectory (or file version) for each scaling factor you will support (scale-100, scale-140, and scale-180).</source>
          <target state="new">Create an app subdirectory (or file version) for each scaling factor you will support (scale-100, scale-140, and scale-180).</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>During development, place scale factor-appropriate copies of ALL assets in each scale factor resource directory, even if they are not different across scaling factors.</source>
          <target state="new">During development, place scale factor-appropriate copies of ALL assets in each scale factor resource directory, even if they are not different across scaling factors.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Make sure each asset has the same name in each directory.</source>
          <target state="new">Make sure each asset has the same name in each directory.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, menu<ph id="ph1">\_</ph>option1.png should have the same name in both the <ph id="ph2">\\</ph>scale-100 and <ph id="ph3">\\</ph>scale-180 directories even if the content of the file is different.</source>
          <target state="new">For example, menu<ph id="ph1">\_</ph>option1.png should have the same name in both the <ph id="ph2">\\</ph>scale-100 and <ph id="ph3">\\</ph>scale-180 directories even if the content of the file is different.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In this case, you'd see them as <ph id="ph1">\\</ph>scale-100<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1.png and <ph id="ph4">\\</ph>scale-140<ph id="ph5">\\</ph>menu<ph id="ph6">\_</ph>option1.png.</source>
          <target state="new">In this case, you'd see them as <ph id="ph1">\\</ph>scale-100<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1.png and <ph id="ph4">\\</ph>scale-140<ph id="ph5">\\</ph>menu<ph id="ph6">\_</ph>option1.png.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Again, you can optionally append the scaling factor suffix to the file name and store them in the same directory; for example, <ph id="ph1">\\</ph>assets<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>scale-100.png, <ph id="ph5">\\</ph>assets<ph id="ph6">\\</ph>menu<ph id="ph7">\_</ph>option1<ph id="ph8">\_</ph>scale-140.png.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Again, you can optionally append the scaling factor suffix to the file name and store them in the same directory; for example, <ph id="ph1">\\</ph>assets<ph id="ph2">\\</ph>menu<ph id="ph3">\_</ph>option1<ph id="ph4">\_</ph>scale-100.png, <ph id="ph5">\\</ph>assets<ph id="ph6">\\</ph>menu<ph id="ph7">\_</ph>option1<ph id="ph8">\_</ph>scale-140.png.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Use the APIs in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.Resources.Core<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225039)</ept> to load the assets.</source>
          <target state="new">Use the APIs in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.Resources.Core<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225039)</ept> to load the assets.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Asset references should be generalized (no suffix), leaving out the specific scale variation.</source>
          <target state="new">Asset references should be generalized (no suffix), leaving out the specific scale variation.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The system will retrieve the appropriate scale asset for the display and the user's settings.</source>
          <target state="new">The system will retrieve the appropriate scale asset for the display and the user's settings.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2015, select <bpt id="p1">**</bpt>PROJECT-&gt;Store-&gt;Create App Package...<ept id="p1">**</ept> and create the package.</source>
          <target state="new">In Visual Studio 2015, select <bpt id="p1">**</bpt>PROJECT-&gt;Store-&gt;Create App Package...<ept id="p1">**</ept> and create the package.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Defining DirectX feature level resource packs</source>
          <target state="new">Defining DirectX feature level resource packs</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>DirectX feature levels correspond to GPU feature sets for prior and current versions of DirectX (specifically, Direct3D).</source>
          <target state="new">DirectX feature levels correspond to GPU feature sets for prior and current versions of DirectX (specifically, Direct3D).</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This includes shader model specifications and functionality, shader language support, texture compression support, and overall graphics pipeline features.</source>
          <target state="new">This includes shader model specifications and functionality, shader language support, texture compression support, and overall graphics pipeline features.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Your baseline app pack should use the baseline texture compression formats: BC1, BC2, or BC3.</source>
          <target state="new">Your baseline app pack should use the baseline texture compression formats: BC1, BC2, or BC3.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>These formats can be consumed by any UWP device, from low-end ARM platforms up to dedicated multi-GPU workstations and media computers.</source>
          <target state="new">These formats can be consumed by any UWP device, from low-end ARM platforms up to dedicated multi-GPU workstations and media computers.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Texture format support at DirectX feature level 10 or higher should be added in a resource pack to conserve local disk space and download bandwidth.</source>
          <target state="new">Texture format support at DirectX feature level 10 or higher should be added in a resource pack to conserve local disk space and download bandwidth.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This enables using the more advanced compression schemes for 11, like BC6H and BC7.</source>
          <target state="new">This enables using the more advanced compression schemes for 11, like BC6H and BC7.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>(For more details, see <bpt id="p1">[</bpt>Texture block compression in Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh308955)</ept>.) These formats are more efficient for the high-resolution texture assets supported by modern GPUs, and using them improves the look, performance, and space requirements of your game on high-end platforms.</source>
          <target state="new">(For more details, see <bpt id="p1">[</bpt>Texture block compression in Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh308955)</ept>.) These formats are more efficient for the high-resolution texture assets supported by modern GPUs, and using them improves the look, performance, and space requirements of your game on high-end platforms.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>DirectX feature level</source>
          <target state="new">DirectX feature level</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Supported texture compression</source>
          <target state="new">Supported texture compression</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="new">9</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>BC1, BC2, BC3</source>
          <target state="new">BC1, BC2, BC3</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="new">10</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>BC4, BC5</source>
          <target state="new">BC4, BC5</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="new">11</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>BC6H, BC7</source>
          <target state="new">BC6H, BC7</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Also, each DirectX feature levels supports different shader model versions.</source>
          <target state="new">Also, each DirectX feature levels supports different shader model versions.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Compiled shader resources can be created on a per-feature level basis, and can be included in DirectX feature level resource packs.</source>
          <target state="new">Compiled shader resources can be created on a per-feature level basis, and can be included in DirectX feature level resource packs.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Additionally, some later version shader models can use assets, such as normal maps, that earlier shader model versions cannot.</source>
          <target state="new">Additionally, some later version shader models can use assets, such as normal maps, that earlier shader model versions cannot.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>These shader model specific assets should be included in a DirectX feature level resource pack as well.</source>
          <target state="new">These shader model specific assets should be included in a DirectX feature level resource pack as well.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The resource mechanism is primarily focused on texture formats supported for assets, so it supports only the 3 overall feature levels.</source>
          <target state="new">The resource mechanism is primarily focused on texture formats supported for assets, so it supports only the 3 overall feature levels.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you need to have separate shaders for sub-levels (dot versions) like DX9<ph id="ph1">\_</ph>1 vs DX9<ph id="ph2">\_</ph>3, your asset management and rendering code must handle them explicitly.</source>
          <target state="new">If you need to have separate shaders for sub-levels (dot versions) like DX9<ph id="ph1">\_</ph>1 vs DX9<ph id="ph2">\_</ph>3, your asset management and rendering code must handle them explicitly.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When configuring your app to support resource packs for different DirectX feature levels, you should:</source>
          <target state="new">When configuring your app to support resource packs for different DirectX feature levels, you should:</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Create an app subdirectory (or file version) for each DirectX feature level you will support (dxfl-dx9, dxfl-dx10, and dxfl-dx11).</source>
          <target state="new">Create an app subdirectory (or file version) for each DirectX feature level you will support (dxfl-dx9, dxfl-dx10, and dxfl-dx11).</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>During development, place feature level specific assets in each feature level resource directory.</source>
          <target state="new">During development, place feature level specific assets in each feature level resource directory.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Unlike locales and scaling factors, you may have different rendering code branches for each feature level in your game, and if you have textures, compiled shaders, or other assets that are only used in one or a subset of all supported feature levels, put the corresponding assets only in the directories for the feature levels that use them.</source>
          <target state="new">Unlike locales and scaling factors, you may have different rendering code branches for each feature level in your game, and if you have textures, compiled shaders, or other assets that are only used in one or a subset of all supported feature levels, put the corresponding assets only in the directories for the feature levels that use them.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For assets that are loaded across all feature levels, make sure that each feature level resource directory has a version of it with the same name.</source>
          <target state="new">For assets that are loaded across all feature levels, make sure that each feature level resource directory has a version of it with the same name.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example, for a feature level independent texture named "coolsign.dds", place the BC3-compressed version in the <ph id="ph1">\\</ph>dxfl-dx9 directory and the BC7-compressed version in the <ph id="ph2">\\</ph>dxfl-dx11 directory.</source>
          <target state="new">For example, for a feature level independent texture named "coolsign.dds", place the BC3-compressed version in the <ph id="ph1">\\</ph>dxfl-dx9 directory and the BC7-compressed version in the <ph id="ph2">\\</ph>dxfl-dx11 directory.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Make sure each asset (if it is available to multiple feature levels) has the same name in each directory.</source>
          <target state="new">Make sure each asset (if it is available to multiple feature levels) has the same name in each directory.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For example, coolsign.dds should have the same name in both the <ph id="ph1">\\</ph>dxfl-dx9 and <ph id="ph2">\\</ph>dxfl-dx11 directories even if the content of the file is different.</source>
          <target state="new">For example, coolsign.dds should have the same name in both the <ph id="ph1">\\</ph>dxfl-dx9 and <ph id="ph2">\\</ph>dxfl-dx11 directories even if the content of the file is different.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In this case, you'd see them as <ph id="ph1">\\</ph>dxfl-dx9<ph id="ph2">\\</ph>coolsign.dds and <ph id="ph3">\\</ph>dxfl-dx11<ph id="ph4">\\</ph>coolsign.dds.</source>
          <target state="new">In this case, you'd see them as <ph id="ph1">\\</ph>dxfl-dx9<ph id="ph2">\\</ph>coolsign.dds and <ph id="ph3">\\</ph>dxfl-dx11<ph id="ph4">\\</ph>coolsign.dds.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Again, you can optionally append the feature level suffix to the file name and store them in the same directory; for example, <ph id="ph1">\\</ph>textures<ph id="ph2">\\</ph>coolsign<ph id="ph3">\_</ph>dxfl-dx9.dds, <ph id="ph4">\\</ph>textures<ph id="ph5">\\</ph>coolsign<ph id="ph6">\_</ph>dxfl-dx11.dds.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Again, you can optionally append the feature level suffix to the file name and store them in the same directory; for example, <ph id="ph1">\\</ph>textures<ph id="ph2">\\</ph>coolsign<ph id="ph3">\_</ph>dxfl-dx9.dds, <ph id="ph4">\\</ph>textures<ph id="ph5">\\</ph>coolsign<ph id="ph6">\_</ph>dxfl-dx11.dds.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Declare the supported DirectX feature levels when configuring your graphics resources.</source>
          <target state="new">Declare the supported DirectX feature levels when configuring your graphics resources.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Use the APIs in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.Resources.Core<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225039)</ept> to load the resources.</source>
          <target state="new">Use the APIs in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.Resources.Core<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br225039)</ept> to load the resources.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Asset references should be generalized (no suffix), leaving out the feature level.</source>
          <target state="new">Asset references should be generalized (no suffix), leaving out the feature level.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>However, unlike language and scale, the system does not automatically determine which feature level is optimal for a given display; that is left to you to determine based on code logic.</source>
          <target state="new">However, unlike language and scale, the system does not automatically determine which feature level is optimal for a given display; that is left to you to determine based on code logic.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Once you make that determination, use the APIs to inform the OS of the preferred feature level.</source>
          <target state="new">Once you make that determination, use the APIs to inform the OS of the preferred feature level.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The system will then be able to retrieve the correct asset based on that preference.</source>
          <target state="new">The system will then be able to retrieve the correct asset based on that preference.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Here is a code sample that shows how to inform your app of the current DirectX feature level for the platform:</source>
          <target state="new">Here is a code sample that shows how to inform your app of the current DirectX feature level for the platform:</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  In your code, load the texture directly by name (or path below the feature level directory).</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  In your code, load the texture directly by name (or path below the feature level directory).</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Do not include either the feature level directory name or the suffix.</source>
          <target state="new">Do not include either the feature level directory name or the suffix.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example, load "textures<ph id="ph1">\\</ph>coolsign.dds", not "dxfl-dx11<ph id="ph2">\\</ph>textures<ph id="ph3">\\</ph>coolsign.dds" or "textures<ph id="ph4">\\</ph>coolsign<ph id="ph5">\_</ph>dxfl-dx11.dds".</source>
          <target state="new">For example, load "textures<ph id="ph1">\\</ph>coolsign.dds", not "dxfl-dx11<ph id="ph2">\\</ph>textures<ph id="ph3">\\</ph>coolsign.dds" or "textures<ph id="ph4">\\</ph>coolsign<ph id="ph5">\_</ph>dxfl-dx11.dds".</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Now, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206078)</ept> to locate the file that matches current DirectX feature level.</source>
          <target state="new">Now, use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceManager<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206078)</ept> to locate the file that matches current DirectX feature level.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ResourceManager<ept id="p1">**</ept> returns a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ResourceMap<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br206089)</ept>, which you query with <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ResourceMap::GetValue<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br206098)</ept> (or <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ResourceMap::TryGetValue<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/jj655438)</ept>) and a supplied <bpt id="p8">[</bpt><bpt id="p9">**</bpt>ResourceContext<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/br206064)</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>ResourceManager<ept id="p1">**</ept> returns a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ResourceMap<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br206089)</ept>, which you query with <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ResourceMap::GetValue<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/br206098)</ept> (or <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ResourceMap::TryGetValue<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/jj655438)</ept>) and a supplied <bpt id="p8">[</bpt><bpt id="p9">**</bpt>ResourceContext<ept id="p9">**</ept><ept id="p8">](https://msdn.microsoft.com/library/windows/apps/br206064)</ept>.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This returns a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceCandidate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206051)</ept> that most closely matches the DirectX feature level that was specified by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetGlobalQualifierValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt622101)</ept>.</source>
          <target state="new">This returns a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ResourceCandidate<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br206051)</ept> that most closely matches the DirectX feature level that was specified by calling <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SetGlobalQualifierValue<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/mt622101)</ept>.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2015, select <bpt id="p1">**</bpt>PROJECT-&gt;Store-&gt;Create App Package...<ept id="p1">**</ept> and create the package.</source>
          <target state="new">In Visual Studio 2015, select <bpt id="p1">**</bpt>PROJECT-&gt;Store-&gt;Create App Package...<ept id="p1">**</ept> and create the package.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Make sure that you enable app bundles in the package.appxmanifest manifest settings.</source>
          <target state="new">Make sure that you enable app bundles in the package.appxmanifest manifest settings.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Defining app resources</source>
          <target state="new">Defining app resources</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Packaging apps</source>
          <target state="new">Packaging apps</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>App packager (MakeAppx.exe)</source>
          <target state="new">App packager (MakeAppx.exe)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>