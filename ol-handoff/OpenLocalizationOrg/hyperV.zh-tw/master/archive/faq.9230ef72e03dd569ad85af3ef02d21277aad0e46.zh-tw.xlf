<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">f176f83a5f5bc76e32b5687866d2ced7d0a91d57</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source>ms.ContentId: F0D47E70-0BA1-4A06-B2F3-0232C496709D</source>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source>title: Frequently asked questions</source>
          </segment>
        </unit>
        <unit id="103">
          <segment state="initial" id="103">
            <source>Frequently Asked Questions</source>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source>Last updated: May 1, 2015</source>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source>What is a Windows Server Container?</source>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source>Windows Server Containers are a lightweight operating system virtualization method used to separate applications or services from other services running on the same container host.</source>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source>To enable this, each container has its own view of the operating system, processes, file system, registry, and IP addresses.</source>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source>What is the difference between Linux and Windows Server Containers?</source>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source>Linux and Windows Server Containers are similar -- both implement similar technologies within their kernel and core operating system.</source>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source>The difference comes from the platform and workloads that run within the containers.</source>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source>When a customer is using Windows Server Containers, they can integrate with existing Windows technologies such as .NET, ASP.NET, PowerShell and more.</source>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source>What is a Hyper-V Container?</source>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source>You can think of a Hyper-V Container as a Windows Server Container running inside of a Hyper-V partition.</source>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source>Hyper-V Containers offer an additional deployment option between the highly efficient, high-density Windows Server Container and the highly isolated hardware-virtualized Hyper-V virtual machine.</source>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source>For environments where applications from different trust boundaries on the same host, additional isolation may be required.</source>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source>Hyper-V Containers will provide higher isolation using an optimized virtualization and Windows Server operating system that separates containers from each other and from the host operating system.</source>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source>Both container deployment options utilize the same management APIs, tools and image formats, at deployment time, customers can simply choose which deployment mode best meets their requirements.</source>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source>When will Hyper-V Containers be available for use?</source>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source>We expect to deliver a preview of Hyper-V Containers this calendar year.</source>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source>Will Hyper-V Containers also be available to the Docker ecosystem?</source>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source>Yes – Hyper-V Containers will provide the same level of integration and management with Docker as Windows Server Containers.</source>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source>The goal is to have an open, consistent, cross-platform experience.</source>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source>The Docker platform will also greatly simplify and enhance the experience of working across our container options.</source>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source>An application developed using Windows Server Containers can be deployed as a Hyper-V Container without change.</source>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source>Why do I have to pick between Docker and PowerShell for Windows Server Container management?</source>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">This isn't desired behavior nor our long term plan.</pc>  PowerShell container management tools and Docker container management tools will work side by side in the future.</source>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source>With that said, using multiple management interfaces to manage the same container can be difficult.</source>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source>Take, for example, creating a container with PowerShell and naming the image with an upper case character.</source>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source>Docker doesn’t support caps, PowerShell does.</source>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source>While that specific example is very manageable, what gets much harder are handing state changes (race conditions and different expectations), feature set differences or versions…</source>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source>Our short term decision was that management interfaces (in this case Docker and PowerShell) only see containers they created – you create a container with Docker and PowerShell doesn’t see it, you create it with PowerShell and Docker doesn’t see it.</source>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source>As a developer, do I have to re-write my app for each type of container?</source>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source>No, Windows container images are common across both Windows Server Containers and Hyper-V Containers.</source>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source>The choice of container type is made when you start the container.</source>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source>From a developer standpoint, Windows Server Containers and Hyper-V Containers are two flavors of the same thing.</source>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source>They offer the same development, programming and management experience, are open and extensible and will include the same level of integration and support via Docker.</source>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source>A developer can create a container image using a Windows Server Container and deploy it as a Hyper-V Container or vice-versa without any changes other than specifying the appropriate runtime flag.</source>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source>Windows Server Containers will offer greater density and performance (e.g. lower spin up time, faster runtime performance compared to nested configurations) for when speed is key.</source>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source>Hyper-V Containers offer greater isolation, ensuring that code running in one container can't compromise or impact the host operating system or other containers running on the same host.</source>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source>This is useful for multitenant scenarios (with requirements for hosting untrusted code) including SaaS applications and compute hosting.</source>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source>Are Hyper-V/Windows Server Containers an add-on, or will they integrated within Windows Server?</source>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source>The container capabilities will be integrated into Windows Server 2016.</source>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source>Stay tuned for more information closer to the general availability.</source>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source>What are the prerequisites for Windows Server Containers and Hyper-V Containers?</source>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source>Both Window Server Containers and Hyper-V Containers require Windows Server 2016.</source>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source>These technologies will not work with previous versions of Windows.</source>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source>Are Nano Server based containers supported?</source>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source>For the TP3 release, no they are not.</source>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source>Only Server Core based containers are currently supported.</source>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source>Can I run Windows Server Containers on ESXi or another non Hyper-V hypervisor?</source>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source>Yes, Windows Server Container run on any TP3 Server Core installation.</source>
          </segment>
        </unit>
        <unit id="152">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="152">
            <source>Follow the instructions for <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">enabling the containers feature in-place</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source>Is Microsoft participating in the Open Container Initiative (OCI)?</source>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source>To guarantee the packaging format remains universal, Docker recently organized the Open Container Initiative (OCI), aiming to ensure container packaging remains an open and foundation-led format with Microsoft as one of the founding members.</source>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source>Is Microsoft really partnering with Docker?</source>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source>Yes.</source>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source>Our partnership with Docker enables developers to create, manage and deploy both Windows Server and Linux containers using the same Docker tool set.</source>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source>Developers targeting Windows Server will no longer have to make a choice between using the vast range of Windows Server technologies and building containerized applications.</source>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source>Docker is two things, the open source group of projects and Docker the company.</source>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source>We consider this partnership to include both.</source>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source>Docker is successful, in part, because of the vibrant ecosystem that has built up around the Docker container technology.</source>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source>Microsoft is contributing to the Docker Project, enabling support for Windows Server Containers and Hyper-V Containers.</source>
          </segment>
        </unit>
        <unit id="163">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="163">
            <source>For more information, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">New Windows Server containers and Azure support for Docker</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc> blog post.</source>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">Back to Container Home</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc>
            </source>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>