<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">d5ff93f76a16632d5909862b698bee3b388b3e9d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source>Step 8: Experiment with Windows PowerShell</source>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source>Now that you have walked through the basics of deploying Hyper-V, creating virtual machines and managing these virtual machines, let’s explore how you can automate many of these activities with PowerShell.</source>
          </segment>
        </unit>
        <unit id="103">
          <segment state="initial" id="103">
            <source>Return a list of Hyper-V commands</source>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source>Click on the Windows start button, type <pc dataRefEnd="id2" dataRefStart="id1" id="2">PowerShell</pc>.</source>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source>Run the following command to display a searchable list of PowerShell commands available with the Hyper-V PowerShell Module.</source>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source>You get something like this:</source>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source>To learn more about a particular PowerShell command use <pc dataRefEnd="id2" dataRefStart="id1" id="2">get-help</pc>.</source>
          </segment>
        </unit>
        <unit id="109">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="109">
            <source>For instance running the following command will return information about the <pc dataRefEnd="id2" dataRefStart="id1" id="2">get-vm</pc> Hyper-V command.</source>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source>The output shows you how to structure the command, what the required and optional parameters are, and the aliases that you can use.</source>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source>Return a list of virtual machines</source>
          </segment>
        </unit>
        <unit id="113">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="113">
            <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">get-vm</pc> command to return a list of virtual machines.</source>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source>In PowerShell, run the following command:</source>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source>This displays something like this:</source>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source>To return a list of only powered on virtual machines add a filter to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">get-vm</pc> command.</source>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source>A filter can be added by using the where-object command.</source>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source>For more information on filtering see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Using the Where-Object</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc> documentation.</source>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source>To list all virtual machines in a powered off state, run the following command.</source>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source>This command is a copy of the command from step 2 with the filter changed from ‘Running’ to ‘Off’.</source>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source>Start and shut down virtual machines</source>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source>To start a particular virtual machine, run the following command with name of the virtual machine:</source>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source>To start all currently powered off virtual machines, get a list of those machines and pipe the list to the 'start-vm' command:</source>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source>To shut down all running virtual machines, run this:</source>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source>Create a VM checkpoint</source>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source>To create a checkpoint using PowerShell, select the virtual machine using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">get-vm</pc> command and pipe this to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">checkpoint-vm</pc> command.</source>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source>Finally give the checkpoint a name using <pc dataRefEnd="id2" dataRefStart="id1" id="2">-snapshotname</pc>.</source>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source>The complete command will look like the following:</source>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source>For example, here is a checkpoint with the name DEMOCP:</source>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source>Create a new virtual machine</source>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source>The following example shows how to create a new virtual machine in the PowerShell Integrated Scripting Environment (ISE).</source>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source>This is a simple example and could be expanded on to include additional PowerShell features and more advanced VM deployments.</source>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source>To open the PowerShell ISE click on start, type <pc dataRefEnd="id2" dataRefStart="id1" id="2">PowerShell ISE</pc>.</source>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source>Run the following code to create a virtual machine.</source>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">New-VM</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc> documentation for detailed information on the New-VM command.</source>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source>Wrap up and References</source>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source>This document has shown some simple steps to explorer the Hyper-V PowerShell module as well as some sample scenarios.</source>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source>For more information on the Hyper-V PowerShell module, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Hyper-V Cmdlets in Windows PowerShell reference</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>