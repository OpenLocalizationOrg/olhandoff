<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="zh-tw" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">2f9c7f95a4e72adc022197ab57bc701ad4ba9e4a</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source>ms.ContentId: d0a07897-5fd2-41a5-856d-dc8b499c6783</source>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source>title: Manage Windows Server Containers with PowerShell</source>
          </segment>
        </unit>
        <unit id="103">
          <segment state="initial" id="103">
            <source>Quick Start: Windows Server Containers and PowerShell</source>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source>This article will walk through the fundamentals of managing Windows Server Containers with PowerShell.</source>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source>Items covered will include creating Windows Server Containers and Windows Server Container Images, removing Windows Server Containers and Container Images and finally deploying an application into a Windows Server Container.</source>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source>The lessons learned in this walkthrough should enable you to begin exploring deployment and management of Windows Server Containers using PowerShell.</source>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source>Have questions?</source>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source>Ask them on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Windows Containers forum</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="109">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="109">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Note:</pc> Windows Server Containers created with PowerShell can not currently be managed with Docker and visa versa.</source>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source>To create containers with Docker instead, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Quick Start: Windows Server Containers and Docker</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
            <data id="id5">&lt;linkText&gt;</data>
            <data id="id6">&lt;/linkText&gt;</data>
            <data id="id7">&lt;title&gt;</data>
            <data id="id8">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="2">
              </pc> If you want to know more, <pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId2">read the FAQ</pc><pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId3"></pc><pc dataRefEnd="id10" dataRefStart="id9" id="4CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source>Prerequisites</source>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source>In order to complete this walkthrough the following items need to be in place.</source>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source>Windows Server 2016 TP3 or later configured with the Windows Server Containers Feature.</source>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source>If you have completed the setup guide, this is the VM that was created in Azure or Hyper-V.</source>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source>This system must be connected to a network and able to access the internet.</source>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id7">&lt;linkText&gt;</data>
            <data id="id8">&lt;/linkText&gt;</data>
            <data id="id9">&lt;title&gt;</data>
            <data id="id10">&lt;/title&gt;</data>
            <data id="id11">&lt;link&gt;</data>
            <data id="id12">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source>If you need to configure the container feature, see the following guides: <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Container Setup in Azure</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId2">Container Setup in Hyper-V</pc><pc dataRefEnd="id10" dataRefStart="id9" id="4CapsExtId3"></pc><pc dataRefEnd="id12" dataRefStart="id11" id="4CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source>Basic Container Management with PowerShell</source>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source>This first example will walk through the basics of creating and removing Windows Server Containers and Windows Server Container Images with PowerShell.</source>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source>To begin the walk through, log into your Windows Server Container Host System, you will see a Windows command prompt.</source>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source>Start a PowerShell session by typing <pc dataRefEnd="id2" dataRefStart="id1" id="2">powershell</pc>.</source>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source>You will know that you are in a PowerShell session when the prompt changes from <pc dataRefEnd="id2" dataRefStart="id1" id="2">C:\directory&gt;</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">PS C:\directory&gt;</pc>.</source>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-Command</pc> to see the available commands in the containers module</source>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source>Next make sure that your system has a valid IP Address using <pc dataRefEnd="id2" dataRefStart="id1" id="2">ipconfig</pc> and take note of this address for later use.</source>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source>If you are working from an Azure VM instead of using <pc dataRefEnd="id2" dataRefStart="id1" id="2">ipconfig</pc> you will need to get the public IP address of the Azure Virtual Machine.</source>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source>Step 1 - Create a New Container</source>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source>Before creating a Windows Server Container you will need the name of a Container Image and the name of a virtual switch that will be attached to the new container.</source>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-ContainerImage</pc> command to return a list of container images loaded on the host.</source>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source>Take note of the image name that you will use to create the container.</source>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-VMSwitch</pc> command to return a list of switches available on the host.</source>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source>Take note of the switch name that will be used with the container.</source>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source>Run the following command to create a container.</source>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source>When running <pc dataRefEnd="id2" dataRefStart="id1" id="2">New-Container</pc> you will name the container, specify the container image, and select the network switch to use with the container.</source>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source>Notice in this example that the output is placed in a variable $container.</source>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source>This will be helpful later in this exercise.</source>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source>To see a list of containers on the host and verify that the container was created, use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-Container</pc> command.</source>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source>Notice that a container has been created with the name of MyContainer, however it has not been started.</source>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source>To start the container, use <pc dataRefEnd="id2" dataRefStart="id1" id="2">Start-Container</pc> proivding the name of the container.</source>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source>You can interact with containers using PowerShell remoting commands such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">Invoke-Command</pc>, or <pc dataRefEnd="id4" dataRefStart="id3" id="4">Enter-PSSession</pc>.</source>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source>The example below creates a remote PowerShell session into the container using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Enter-PSSession</pc> command.</source>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source>This command needs the container id in order to create the remote session.</source>
          </segment>
        </unit>
        <unit id="144">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="144">
            <source>The container id was stored in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">$container</pc> variable when the container was created.</source>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source>Notice that once the remote session has been created the command prompt will change to include the first 11 characters of the container id <pc dataRefEnd="id2" dataRefStart="id1" id="2">[2446380e-629]</pc>.</source>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source>A container can be managed very much like a physical or virtual machine.</source>
          </segment>
        </unit>
        <unit id="147">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="147">
            <source>Command such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">ipconfig</pc> to return the IP address of the container, <pc dataRefEnd="id4" dataRefStart="id3" id="4">mkdir</pc> to create a directory in the container and PowerShell commands like <pc dataRefEnd="id6" dataRefStart="id5" id="6">Get-ChildItem</pc> all work.</source>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source>Go ahead and make a change to the container such as creating a file or folder.</source>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source>For example, the following command will create a file which contains network configuration data about the container.</source>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source>You can read the contents of the file to ensure the command completed successfully.</source>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source>Notice that the IP address contained in the text file matches that of the container.</source>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source>Now that the container has been modified, exit the remote PowerShell session.</source>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source>Stop the container by providing the container name to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Stop-Container</pc> command.</source>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source>When this command has completed, you will be back in control of the container host.</source>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source>Step 2 - Create a New Container Image</source>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source>An image can now be made from this container.</source>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source>This image will behave like a snapshot of the container and can be re-deployed many times.</source>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source>To create a new image named 'newimage' use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">New-ContainerImage</pc> command.</source>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source>When using this command you will specify the container to capture, a name for the new image, and additional metadata as seen below.</source>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-ContainerImage</pc> to return a list of Container Images.</source>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source>Notice that a new image with the name 'newimage' has been created.</source>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source>Step 3 - Create New Container From Image</source>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source>Now that you have created a customized container image, go ahead and deploy a new container from this image.</source>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source>Create a container named 'newcontainer' from the container image named 'newimage', output the result to a variable named '$newcontainer'.</source>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source>Start the new container.</source>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source>Create a remote PowerShell session with the container.</source>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source>Finally notice that this new container contains the ipconfig.txt file created earlier in this exercise.</source>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source>Once you are done working with this container, exit the remote PowerShell session.</source>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source>This exercise has shown that an image taken from a modified container will include all modifications.</source>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source>While the example here was a simple file modification, the same would apply if you were to install software into the container such as a web server.</source>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source>Using these methods, custom images can be created that will deploy application ready containers.</source>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source>Step 4 - Remove Containers and Container Images</source>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source>To stop all running containers run the command below.</source>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source>If any containers are in a stopped state when you run this command, you receive a warning, which is ok.</source>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source>Run the following to remove all containers.</source>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source>To remove the container image named 'newimage', run the following.</source>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source>Host a Web Server in a Container</source>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source>This next example will demonstrate a more practical use case for Windows Server Containers.</source>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source>The steps included in this exercise will guide you through creating a web server container image that can be used for deploying web applications hosted inside of a Windows Server Container.</source>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source>Step 1 – Create Container from the Windows Server Core OS Image</source>
          </segment>
        </unit>
        <unit id="181">
          <segment state="initial" id="181">
            <source>To create a web server container image, you first need to deploy and start a container from the Windows Server Core OS image.</source>
          </segment>
        </unit>
        <unit id="182">
          <segment state="initial" id="182">
            <source>Start the container.</source>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source>When the container is up, create a remote PowerShell session with the container.</source>
          </segment>
        </unit>
        <unit id="184">
          <segment state="initial" id="184">
            <source>Step 2 - Install Web Server Software</source>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source>The next step is to install the web server software.</source>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source>This example will use nginx for Windows.</source>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source>Use the following commands to automatically download and extract the nginx software to c:\nginx-1.9.3.</source>
          </segment>
        </unit>
        <unit id="188">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="188">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc> that this step will require the container host to be connected to the internet.</source>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source>If this step produces a connectivity or name resolution error check the network configuration of the container host.</source>
          </segment>
        </unit>
        <unit id="190">
          <segment state="initial" id="190">
            <source>Download the nginx software.</source>
          </segment>
        </unit>
        <unit id="191">
          <segment state="initial" id="191">
            <source>Extract the nginx software.</source>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source>This is all that needs to be completed for the nginx software installation.</source>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source>Exit the remote PowerShell session.</source>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source>Stop the container using the following command.</source>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source>Step 3 - Create Image from Web Server Container</source>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source>With the container modified to include the nginx web server software, you can now create an image from this container.</source>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source>To do so, run the following command:</source>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source>When completed, use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Get-ContainerImage</pc> command to validate that the image has been created.</source>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source>Step 4 - Deploy Web Server Ready Container</source>
          </segment>
        </unit>
        <unit id="200">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="200">
            <source>To deploy a Windows Server Container based off of the 'nginxwindows' image, use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">New-Container</pc> PowerShell command.</source>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source>Start the container.</source>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source>Create a remote PowerShell session with the new container.</source>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source>Once working inside the container, the nginx web server can be started and web content staged.</source>
          </segment>
        </unit>
        <unit id="204">
          <segment state="initial" id="204">
            <source>To start the nginx web server, change to the nginx installation directory.</source>
          </segment>
        </unit>
        <unit id="205">
          <segment state="initial" id="205">
            <source>Start the nginx web server.</source>
          </segment>
        </unit>
        <unit id="206">
          <segment state="initial" id="206">
            <source>And exit this PS-Session.</source>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source>The web server will keep running.</source>
          </segment>
        </unit>
        <unit id="208">
          <segment state="initial" id="208">
            <source>Step 5 - Configure Container Networking</source>
          </segment>
        </unit>
        <unit id="209">
          <segment state="initial" id="209">
            <source>Depending on the configuration of the container host and network, a container will either receive an IP address from a DHCP server or the container host itself using network address translation (NAT).</source>
          </segment>
        </unit>
        <unit id="210">
          <segment state="initial" id="210">
            <source>This guided walk through is configured to use NAT.</source>
          </segment>
        </unit>
        <unit id="211">
          <segment state="initial" id="211">
            <source>In this configuration a port from the container is mapped to a port on the container host.</source>
          </segment>
        </unit>
        <unit id="212">
          <segment state="initial" id="212">
            <source>The application hosted in the container is then accessed through the IP address / name of the container host.</source>
          </segment>
        </unit>
        <unit id="213">
          <segment state="initial" id="213">
            <source>For example if port 80 from the container was mapped to port 55534 on the container host, a typical http request to the application would look like this http://contianerhost:55534.</source>
          </segment>
        </unit>
        <unit id="214">
          <segment state="initial" id="214">
            <source>This allows a container host to run many containers and allow for the applications in these containers to respond to requests using the same port.</source>
          </segment>
        </unit>
        <unit id="215">
          <segment state="initial" id="215">
            <source>For this lab we need to create this port mapping.</source>
          </segment>
        </unit>
        <unit id="216">
          <segment state="initial" id="216">
            <source>In order to do so we will need to know the IP address of the container and the internal (application) and external (container host) ports that will be configured.</source>
          </segment>
        </unit>
        <unit id="217">
          <segment state="initial" id="217">
            <source>For this example let’s keep it simple and map port 80 from the container to port 80 of the host.</source>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source>Using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add-NetNatStaticMapping</pc> command, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">–InternalIPAddress</pc> will be the IP address of the container which for this walkthrough should be ‘172.16.0.2’.</source>
          </segment>
        </unit>
        <unit id="219">
          <segment state="initial" id="219">
            <source>When the port mapping has been created you will also need to configure an inbound firewall rule for the configured port.</source>
          </segment>
        </unit>
        <unit id="220">
          <segment state="initial" id="220">
            <source>To do so for port 80 run the following command.</source>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source>This script can be copied into the VM.</source>
          </segment>
        </unit>
        <unit id="222">
          <segment state="initial" id="222">
            <source>Next if you are working from Azure and have not already created a Virtual Machine endpoint you will need to create one now.</source>
          </segment>
        </unit>
        <unit id="223">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="223">
            <source>For more information on Azure VM Endpoints see this article: <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">Set up Azure VM Endpoints</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="224">
          <segment state="initial" id="224">
            <source>Step 6 – Access the Container Hosted Website</source>
          </segment>
        </unit>
        <unit id="225">
          <segment state="initial" id="225">
            <source>With the web server container created, you can now checkout the application hosted in the container.</source>
          </segment>
        </unit>
        <unit id="226">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="226">
            <source>To do so, open up a browser on different machine and enter <pc dataRefEnd="id2" dataRefStart="id1" id="2">http://containerhost-ipaddress</pc>.</source>
          </segment>
        </unit>
        <unit id="227">
          <segment state="initial" id="227">
            <source>Notice here that you will be browsing to the IP Address of the Container Host and not the container itself.</source>
          </segment>
        </unit>
        <unit id="228">
          <segment state="initial" id="228">
            <source>If you are working from an Azure Virtual Machine this will be the public IP address or Cloud Service name.</source>
          </segment>
        </unit>
        <unit id="229">
          <segment state="initial" id="229">
            <source>If everything has been correctly configured, you will see the nginx welcome page.</source>
          </segment>
        </unit>
        <unit id="230">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="230">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="231">
          <segment state="initial" id="231">
            <source>At this point, feel free to update the website.</source>
          </segment>
        </unit>
        <unit id="232">
          <segment state="initial" id="232">
            <source>Copy in your own sample website, or use a simple ‘Hello World’ sample site that has been created for this demo.</source>
          </segment>
        </unit>
        <unit id="233">
          <segment state="initial" id="233">
            <source>To use the sample you will first need to re-establish a remote PS session with the container.</source>
          </segment>
        </unit>
        <unit id="234">
          <segment state="initial" id="234">
            <source>You will first need to re-create the remote PS session with the container.</source>
          </segment>
        </unit>
        <unit id="235">
          <segment state="initial" id="235">
            <source>Then run the following command to download and replace the index.html file.</source>
          </segment>
        </unit>
        <unit id="236">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="236">
            <source>After the website has been updated, navigate back to <pc dataRefEnd="id2" dataRefStart="id1" id="2">http://containerhost-ipaddress</pc>.</source>
          </segment>
        </unit>
        <unit id="237">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="237">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="238">
          <segment state="initial" id="238">
            <source>Video Walkthrough</source>
          </segment>
        </unit>
        <unit id="239">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="239">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1">
              </pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="2">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="240">
          <segment state="initial" id="240">
            <source>Next Steps</source>
          </segment>
        </unit>
        <unit id="241">
          <segment state="initial" id="241">
            <source>Now that you have containers set up and an introduction to the tools, go build your own containerized apps.</source>
          </segment>
        </unit>
        <unit id="242">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="242">
            <source>Here is a more complete <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">PowerShell reference</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="243">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="243">
            <source>Remember, this is a <pc dataRefEnd="id2" dataRefStart="id1" id="2">preview</pc> there are bugs and we have a lot of work in progress.</source>
          </segment>
        </unit>
        <unit id="244">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="244">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">This page</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc> contains many of our known issues.</source>
          </segment>
        </unit>
        <unit id="245">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="245">
            <source>We are also monitoring the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">forums</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc> very closely.</source>
          </segment>
        </unit>
        <unit id="246">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="246">
            <source>There are also pre-made samples on <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId2">GitHub</pc><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId3"></pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId1"></pc>.</source>
          </segment>
        </unit>
        <unit id="247">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="247">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">Back to Container Home</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc>
            </source>
          </segment>
        </unit>
        <unit id="248">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
            <data id="id3">&lt;title&gt;</data>
            <data id="id4">&lt;/title&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
          </originalData>
          <segment state="initial" id="248">
            <source>
              <pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId2">Known Issues for Current Release</pc>
              <pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId3">
              </pc>
              <pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId1">
              </pc>
            </source>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>