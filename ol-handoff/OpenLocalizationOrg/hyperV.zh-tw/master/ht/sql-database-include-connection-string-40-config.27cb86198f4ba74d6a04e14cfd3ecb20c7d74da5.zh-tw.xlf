<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d59ec3096fd9947619b544304961a9cc826320a</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Example config file for connection string security</source>
          <target state="new">Example config file for connection string security</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>It is unsound to put the connection string as literals in your C# code.</source>
          <target state="new">It is unsound to put the connection string as literals in your C# code.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It is better to put the connection string in a config file.</source>
          <target state="new">It is better to put the connection string in a config file.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There you can edit the string any time without the need to recompile.</source>
          <target state="new">There you can edit the string any time without the need to recompile.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Let's assume your compiled C# program is named <bpt id="p1">**</bpt>ConsoleApplication1.exe<ept id="p1">**</ept>, and that this .exe resides in a *<bpt id="p2">*</bpt>bin\debug\*<ept id="p2">*</ept> directory.</source>
          <target state="new">Let's assume your compiled C# program is named <bpt id="p1">**</bpt>ConsoleApplication1.exe<ept id="p1">**</ept>, and that this .exe resides in a *<bpt id="p2">*</bpt>bin\debug\*<ept id="p2">*</ept> directory.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this example, most parts of your connection string are stored in a config file named exactly <bpt id="p1">**</bpt>ConsoleApplication1.exe.config<ept id="p1">**</ept>.</source>
          <target state="new">In this example, most parts of your connection string are stored in a config file named exactly <bpt id="p1">**</bpt>ConsoleApplication1.exe.config<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This config file must also reside in *<bpt id="p1">*</bpt>bin\debug\*<ept id="p1">*</ept>.</source>
          <target state="new">This config file must also reside in *<bpt id="p1">*</bpt>bin\debug\*<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the XML of the following config file you see a connection string named <bpt id="p1">**</bpt>ConnectionString4NoUserIDNoPassword<ept id="p1">**</ept>.</source>
          <target state="new">In the XML of the following config file you see a connection string named <bpt id="p1">**</bpt>ConnectionString4NoUserIDNoPassword<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The C# code looks for this string.</source>
          <target state="new">The C# code looks for this string.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You must edit real names in for the placeholders:</source>
          <target state="new">You must edit real names in for the placeholders:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>{your_serverName_here}</source>
          <target state="new">{your_serverName_here}</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>{your_databaseName_here}</source>
          <target state="new">{your_databaseName_here}</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For this illustration we chose to omit two parameters:</source>
          <target state="new">For this illustration we chose to omit two parameters:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>User ID={your_userName_here};</source>
          <target state="new">User ID={your_userName_here};</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Password={your_password_here};</source>
          <target state="new">Password={your_password_here};</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can include them, but sometimes it is better to have your program get those values from keyboard input by the user.</source>
          <target state="new">You can include them, but sometimes it is better to have your program get those values from keyboard input by the user.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It depends.</source>
          <target state="new">It depends.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>