<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="pt-br">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5f1ccdc651b2dead6888fe5f3bce5b70378da1a</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Consume an API app from JavaScript using CORS | Microsoft Azure</source>
          <target state="new">Consume an API app from JavaScript using CORS | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to consume an API app in Azure App Service, from a JavaScript client and using CORS.</source>
          <target state="new">Learn how to consume an API app in Azure App Service, from a JavaScript client and using CORS.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Consume an API app from JavaScript using CORS</source>
          <target state="new">Consume an API app from JavaScript using CORS</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial shows how to consume an API app from JavaScript code in a website that is served from a different domain than the API app.</source>
          <target state="new">This tutorial shows how to consume an API app from JavaScript code in a website that is served from a different domain than the API app.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The sample client uses AngularJS.</source>
          <target state="new">The sample client uses AngularJS.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is the second in a series of tutorials about working with API apps in Azure App Service.</source>
          <target state="new">This is the second in a series of tutorials about working with API apps in Azure App Service.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To go to the first in the series, choose the first topic from the <bpt id="p1">**</bpt>Topic<ept id="p1">**</ept> drop-down list at the top of the page.</source>
          <target state="new">To go to the first in the series, choose the first topic from the <bpt id="p1">**</bpt>Topic<ept id="p1">**</ept> drop-down list at the top of the page.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CORS support in Azure App Service</source>
          <target state="new">CORS support in Azure App Service</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For security reasons, browsers' default behavior prevents JavaScript from making API calls to a domain other than the one that the JavaScript comes from.</source>
          <target state="new">For security reasons, browsers' default behavior prevents JavaScript from making API calls to a domain other than the one that the JavaScript comes from.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, you can make a call from a contoso.com web page to a contoso.com API endpoint but not to a fabrikam.com endpoint.</source>
          <target state="new">For example, you can make a call from a contoso.com web page to a contoso.com API endpoint but not to a fabrikam.com endpoint.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Cross Origin Resource Sharing (CORS) is an internet protocol that is designed to enable scenarios where you need to make such cross-domain API calls.</source>
          <target state="new">Cross Origin Resource Sharing (CORS) is an internet protocol that is designed to enable scenarios where you need to make such cross-domain API calls.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In Azure App Service an example of such a scenario is where your JavaScript client is running in a web app while your API is running in an API app.</source>
          <target state="new">In Azure App Service an example of such a scenario is where your JavaScript client is running in a web app while your API is running in an API app.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Azure App Service offers an easy way to configure the domains that are allowed to call an API app, and the CORS feature works the same for all languages that the API Apps service supports, such as Java and Node.js.</source>
          <target state="new">Azure App Service offers an easy way to configure the domains that are allowed to call an API app, and the CORS feature works the same for all languages that the API Apps service supports, such as Java and Node.js.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>How to follow this tutorial</source>
          <target state="new">How to follow this tutorial</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This tutorial works with a sample application that you download and create an API app for in the <bpt id="p1">[</bpt>first tutorial of the ASP.NET version of this series<ept id="p1">](app-service-api-dotnet-get-started.md)</ept>.</source>
          <target state="new">This tutorial works with a sample application that you download and create an API app for in the <bpt id="p1">[</bpt>first tutorial of the ASP.NET version of this series<ept id="p1">](app-service-api-dotnet-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you want to work with Java or Node.js, see the <bpt id="p1">[</bpt>CORS configuration section<ept id="p1">](#corsconfig)</ept> below for general instructions that apply to all API apps.</source>
          <target state="new">If you want to work with Java or Node.js, see the <bpt id="p1">[</bpt>CORS configuration section<ept id="p1">](#corsconfig)</ept> below for general instructions that apply to all API apps.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The ContactsList.Angular sample project</source>
          <target state="new">The ContactsList.Angular sample project</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>ContactsList sample application<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept>, the ContactsList.Angular project is a simple AngularJS client for the ContactsList.API Web API project.</source>
          <target state="new">In the <bpt id="p1">[</bpt>ContactsList sample application<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept>, the ContactsList.Angular project is a simple AngularJS client for the ContactsList.API Web API project.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The AngularJS JavaScript code that calls the API is in the <bpt id="p1">*</bpt>index.html<ept id="p1">*</ept> file in the ContactsList.Angular project.</source>
          <target state="new">The AngularJS JavaScript code that calls the API is in the <bpt id="p1">*</bpt>index.html<ept id="p1">*</ept> file in the ContactsList.Angular project.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The code defines the functions and adds them to the <ph id="ph1">`$scope`</ph> object, as shown here where the API's Get method is defined as <ph id="ph2">`$scope.refresh()`</ph>.</source>
          <target state="new">The code defines the functions and adds them to the <ph id="ph1">`$scope`</ph> object, as shown here where the API's Get method is defined as <ph id="ph2">`$scope.refresh()`</ph>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code calls $scope.refresh() method when the page loads (at the end of of the snippet shown above) and is wired up to the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button in the UI.</source>
          <target state="new">The code calls $scope.refresh() method when the page loads (at the end of of the snippet shown above) and is wired up to the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button in the UI.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Run the AngularJS project locally</source>
          <target state="new">Run the AngularJS project locally</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this section you verify that you can run the client locally and can call the API while it too is running locally.</source>
          <target state="new">In this section you verify that you can run the client locally and can call the API while it too is running locally.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Set the ContactsList.API and ContactsList.Angular projects as startup projects, with ContactsList.API starting before ContactsList.Angular.</source>
          <target state="new">Set the ContactsList.API and ContactsList.Angular projects as startup projects, with ContactsList.API starting before ContactsList.Angular.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Press F5 to start the projects.</source>
          <target state="new">Press F5 to start the projects.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The AngularJS UI displays the contacts that are stored locally, and you can use the UI to add and delete contacts.</source>
          <target state="new">The AngularJS UI displays the contacts that are stored locally, and you can use the UI to add and delete contacts.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Close the browser windows.</source>
          <target state="new">Close the browser windows.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Change the AngularJS project to point to the Azure API app</source>
          <target state="new">Change the AngularJS project to point to the Azure API app</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Next, you'll run the AngularJS frontend in the cloud and call the API backend that is running in the cloud.</source>
          <target state="new">Next, you'll run the AngularJS frontend in the cloud and call the API backend that is running in the cloud.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Before deploying the frontend to Azure you have to change the API endpoint in the AngularJS project so that the code calls the Azure API app that you created earlier.</source>
          <target state="new">Before deploying the frontend to Azure you have to change the API endpoint in the AngularJS project so that the code calls the Azure API app that you created earlier.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the ContactsList.Angular project, open <bpt id="p1">*</bpt>index.html<ept id="p1">*</ept>.</source>
          <target state="new">In the ContactsList.Angular project, open <bpt id="p1">*</bpt>index.html<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Comment out the line that sets <ph id="ph1">`baseUrl`</ph> to the localhost URL, uncomment the line that sets <ph id="ph2">`baseUrl`</ph> to an azurewebsites.net URL, and replace the placeholder with the actual name of the API app you created earlier.</source>
          <target state="new">Comment out the line that sets <ph id="ph1">`baseUrl`</ph> to the localhost URL, uncomment the line that sets <ph id="ph2">`baseUrl`</ph> to an azurewebsites.net URL, and replace the placeholder with the actual name of the API app you created earlier.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you named the API app ContactsListAPI, the code now looks like the following example.</source>
          <target state="new">If you named the API app ContactsListAPI, the code now looks like the following example.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Deploy the ContactsList.Angular project to the web app</source>
          <target state="new">Deploy the ContactsList.Angular project to the web app</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You could create a new web app to deploy the AngularJS project to, but for this tutorial you'll deploy to the same web app that you created in the previous tutorial.</source>
          <target state="new">You could create a new web app to deploy the AngularJS project to, but for this tutorial you'll deploy to the same web app that you created in the previous tutorial.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The web app name may reflect the fact that you originally deployed an ASP.NET MVC project to it, but after this deployment it will be running the AngularJS code.</source>
          <target state="new">The web app name may reflect the fact that you originally deployed an ASP.NET MVC project to it, but after this deployment it will be running the AngularJS code.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the ContactsList.Angular project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the ContactsList.Angular project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> tab.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> tab.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Microsoft Azure App Service<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Microsoft Azure App Service<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, choose your subscription.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, choose your subscription.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>With <bpt id="p1">**</bpt>View<ept id="p1">**</ept> set to the default value <bpt id="p2">**</bpt>Resource Group<ept id="p2">**</ept>, expand the  resource group that you created for this tutorial series.</source>
          <target state="new">With <bpt id="p1">**</bpt>View<ept id="p1">**</ept> set to the default value <bpt id="p2">**</bpt>Resource Group<ept id="p2">**</ept>, expand the  resource group that you created for this tutorial series.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Select the web app that you created in the first tutorial (make sure you don't select the API app), and then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="new">Select the web app that you created in the first tutorial (make sure you don't select the API app), and then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> tab.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> tab.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Expand <bpt id="p1">**</bpt>File Publish Options<ept id="p1">**</ept>, and then select <bpt id="p2">**</bpt>Remove additional files at destination<ept id="p2">**</ept>.</source>
          <target state="new">Expand <bpt id="p1">**</bpt>File Publish Options<ept id="p1">**</ept>, and then select <bpt id="p2">**</bpt>Remove additional files at destination<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Normally when you deploy a web project to an existing App Service web app you don't want the "remove additional files" option because any changes are typically updates or new files.</source>
          <target state="new">Normally when you deploy a web project to an existing App Service web app you don't want the "remove additional files" option because any changes are typically updates or new files.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this case you're deploying a different project to the same web app, so there are likely to be many files from the earlier deployment that aren't needed in the new one.</source>
          <target state="new">In this case you're deploying a different project to the same web app, so there are likely to be many files from the earlier deployment that aren't needed in the new one.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Visual Studio deploys the ContactsList.Angular project to the web app and opens a browser to the URL of the web app.</source>
          <target state="new">Visual Studio deploys the ContactsList.Angular project to the web app and opens a browser to the URL of the web app.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The browser shows the same AngularJS UI that you saw running locally, except now it fails because your frontend is running in a different domain (the web app URL) than the backend (the API app URL).</source>
          <target state="new">The browser shows the same AngularJS UI that you saw running locally, except now it fails because your frontend is running in a different domain (the web app URL) than the backend (the API app URL).</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="corsconfig"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Configure CORS for the target API app in Azure</source>
          <target state="new"><ph id="ph1">&lt;a id="corsconfig"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Configure CORS for the target API app in Azure</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In another browser window go to the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>.</source>
          <target state="new">In another browser window go to the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Browse &gt; API Apps<ept id="p1">**</ept>, and then select the target API app.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Browse &gt; API Apps<ept id="p1">**</ept>, and then select the target API app.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For this tutorial, that is the API app that you created in the first tutorial for the ContactsList.API project.</source>
          <target state="new">For this tutorial, that is the API app that you created in the first tutorial for the ContactsList.API project.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>API app<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>API app<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Find the <bpt id="p1">**</bpt>API<ept id="p1">**</ept> section, and then click <bpt id="p2">**</bpt>CORS<ept id="p2">**</ept>.</source>
          <target state="new">Find the <bpt id="p1">**</bpt>API<ept id="p1">**</ept> section, and then click <bpt id="p2">**</bpt>CORS<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the text box enter the URL that you want to allow calls to come from.</source>
          <target state="new">In the text box enter the URL that you want to allow calls to come from.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, if you deployed your JavaScript application to a web app named ContactsListMVC, enter "http://contactslistmvc.azurewebsites.net".</source>
          <target state="new">For example, if you deployed your JavaScript application to a web app named ContactsListMVC, enter "http://contactslistmvc.azurewebsites.net".</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Note that as an alternative to entering a URL, you can enter an asterisk (*) to specify that all origin domains are accepted.</source>
          <target state="new">Note that as an alternative to entering a URL, you can enter an asterisk (*) to specify that all origin domains are accepted.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Go to the browser window that displays the AngularJS client, and refresh the page or click the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button.</source>
          <target state="new">Go to the browser window that displays the AngularJS client, and refresh the page or click the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The page now shows the contacts that are stored in the Azure API app's file system.</source>
          <target state="new">The page now shows the contacts that are stored in the Azure API app's file system.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CORS in Azure Resource Manager tooling</source>
          <target state="new">CORS in Azure Resource Manager tooling</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can also configure CORS for an API app by using Azure Resource Manager tooling such as Azure PowerShell, CLI or <bpt id="p1">[</bpt>Resource Explorer<ept id="p1">](https://resources.azure.com/)</ept>.</source>
          <target state="new">You can also configure CORS for an API app by using Azure Resource Manager tooling such as Azure PowerShell, CLI or <bpt id="p1">[</bpt>Resource Explorer<ept id="p1">](https://resources.azure.com/)</ept>.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">`cors`</ph> property on the Microsoft.Web/sites/config resource type for your</source>
          <target state="new">Set the <ph id="ph1">`cors`</ph> property on the Microsoft.Web/sites/config resource type for your</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>/web resource.</source>
          <target state="new">/web resource.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, in <bpt id="p1">**</bpt>Resource Explorer<ept id="p1">**</ept>, go to <bpt id="p2">**</bpt>subscriptions &gt; {your subscription} &gt; resourceGroups &gt; {your resource group} &gt; providers &gt; Microsoft.Web &gt; sites &gt; {your site} &gt; config &gt; web<ept id="p2">**</ept>, and you'll see the cors property:</source>
          <target state="new">For example, in <bpt id="p1">**</bpt>Resource Explorer<ept id="p1">**</ept>, go to <bpt id="p2">**</bpt>subscriptions &gt; {your subscription} &gt; resourceGroups &gt; {your resource group} &gt; providers &gt; Microsoft.Web &gt; sites &gt; {your site} &gt; config &gt; web<ept id="p2">**</ept>, and you'll see the cors property:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>App Service CORS versus Web API CORS</source>
          <target state="new">App Service CORS versus Web API CORS</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For ASP.NET Web API projects, it's also easy to configure CORS in code, as you'll see in the following section.</source>
          <target state="new">For ASP.NET Web API projects, it's also easy to configure CORS in code, as you'll see in the following section.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, if you use both App Service CORS and Web API CORS together, App Service CORS will take precedence and Web API CORS will have no effect.</source>
          <target state="new">However, if you use both App Service CORS and Web API CORS together, App Service CORS will take precedence and Web API CORS will have no effect.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, if you enable one origin domain in App Service, and enable all origin domains in your Web API code, your Azure API app will only accept calls from the domain you specified in Azure.</source>
          <target state="new">For example, if you enable one origin domain in App Service, and enable all origin domains in your Web API code, your Azure API app will only accept calls from the domain you specified in Azure.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>How to configure CORS in Web API Code</source>
          <target state="new">How to configure CORS in Web API Code</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In a Web API project you can install the <bpt id="p1">[</bpt>Microsoft.AspNet.WebApi.Cors<ept id="p1">](https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Cors/)</ept> NuGet package that enables you to specify in code which domains your API will accept JavaScript calls from.</source>
          <target state="new">In a Web API project you can install the <bpt id="p1">[</bpt>Microsoft.AspNet.WebApi.Cors<ept id="p1">](https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Cors/)</ept> NuGet package that enables you to specify in code which domains your API will accept JavaScript calls from.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This process is documented in <bpt id="p1">[</bpt>Enabling Cross-Origin Requests in ASP.NET Web API 2<ept id="p1">](http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api)</ept> in depth.</source>
          <target state="new">This process is documented in <bpt id="p1">[</bpt>Enabling Cross-Origin Requests in ASP.NET Web API 2<ept id="p1">](http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api)</ept> in depth.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For API apps built using ASP.NET Web API the process is exactly the same but is summarized here.</source>
          <target state="new">For API apps built using ASP.NET Web API the process is exactly the same but is summarized here.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In a Web API project, include a <ph id="ph1">`config.EnableCors()`</ph> line of code in the <bpt id="p1">**</bpt>Register<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>WebApiConfig<ept id="p2">**</ept>, as in the following example.</source>
          <target state="new">In a Web API project, include a <ph id="ph1">`config.EnableCors()`</ph> line of code in the <bpt id="p1">**</bpt>Register<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>WebApiConfig<ept id="p2">**</ept>, as in the following example.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In your Web API controller, add the <ph id="ph1">`EnableCors`</ph> attribute to the <ph id="ph2">`ContactsController`</ph> class or to individual action methods.</source>
          <target state="new">In your Web API controller, add the <ph id="ph1">`EnableCors`</ph> attribute to the <ph id="ph2">`ContactsController`</ph> class or to individual action methods.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the following example CORS support applies to the entire controller.</source>
          <target state="new">In the following example CORS support applies to the entire controller.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: Use of wildcards for all of the parameters with the <ph id="ph1">`EnableCors`</ph> attribute is intended only for demonstration purposes, and will open your API up to all origins and all HTTP requests.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: Use of wildcards for all of the parameters with the <ph id="ph1">`EnableCors`</ph> attribute is intended only for demonstration purposes, and will open your API up to all origins and all HTTP requests.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Use this attribute with caution.</source>
          <target state="new">Use this attribute with caution.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In this tutorial you saw how to enable App Service CORS support so that client JavaScript code can call to an API in a different domain.</source>
          <target state="new">In this tutorial you saw how to enable App Service CORS support so that client JavaScript code can call to an API in a different domain.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the next article in the API Apps getting started series, you'll learn about <bpt id="p1">[</bpt>authentication for App Service API apps<ept id="p1">](app-service-api-authentication.md)</ept>.</source>
          <target state="new">In the next article in the API Apps getting started series, you'll learn about <bpt id="p1">[</bpt>authentication for App Service API apps<ept id="p1">](app-service-api-authentication.md)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>