<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">e437baf1f27bb8d500d2db065f8284cc065e26a6</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.ContentId: 6C7EB25D-66FB-4B6F-AB4A-79D6BB424637</source>
          <target xml:space="preserve">ms.ContentId: 6C7EB25D-66FB-4B6F-AB4A-79D6BB424637</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Make a new management service</source>
          <target xml:space="preserve">title: Make a new management service</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">Make a new management service</source>
          <target xml:space="preserve">Make a new management service</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">18-Nov update (ver1) for renaming file test.</source>
          <target xml:space="preserve">18-Nov update (ver1) for renaming file test.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">This is a test.</source>
          <target xml:space="preserve">This is a test.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">This document introduces VM Services built on Hyper-V sockets and how to get started using them.</source>
          <target xml:space="preserve">This document introduces VM Services built on Hyper-V sockets and how to get started using them.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">What is a VM Service?</source>
          <target xml:space="preserve">What is a VM Service?</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Adding this sentence for testing HO-HB process.</source>
          <target xml:space="preserve">Adding this sentence for testing HO-HB process.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">VM Services are services that span the Hyper-V host and virtual machines running on the host.</source>
          <target xml:space="preserve">VM Services are services that span the Hyper-V host and virtual machines running on the host.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">TEST update for XLF2.0.</source>
          <target xml:space="preserve">TEST update for XLF2.0.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Hyper-V now (Windows 10 and Server 2016+) provides a non-network connection which allows you to create services spanning the host/virtual machine boundary while preserving Hyper-V’s fundamental requirements around tenant/hoster isolation, control, and diagnosable.</source>
          <target xml:space="preserve">Hyper-V now (Windows 10 and Server 2016+) provides a non-network connection which allows you to create services spanning the host/virtual machine boundary while preserving Hyper-V’s fundamental requirements around tenant/hoster isolation, control, and diagnosable.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Hyper-V will continue to provide a base set of in-box services (integration services) for basics (such as time sync) and for common requests we receive, but now anyone can write and deploy a VM service as needed.</source>
          <target xml:space="preserve">Hyper-V will continue to provide a base set of in-box services (integration services) for basics (such as time sync) and for common requests we receive, but now anyone can write and deploy a VM service as needed.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">PowerShell Direct is an in-box example of a VM Service.</source>
          <target xml:space="preserve">PowerShell Direct is an in-box example of a VM Service.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">What is a Hyper-V socket?</source>
          <target xml:space="preserve">What is a Hyper-V socket?</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Hyper-V sockets are TCP-like sockets with no dependence on networking.</source>
          <target xml:space="preserve">Hyper-V sockets are TCP-like sockets with no dependence on networking.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Using Hyper-V sockets, services can run independently of the networking stack and all data flow stays on host memory.</source>
          <target xml:space="preserve">Using Hyper-V sockets, services can run independently of the networking stack and all data flow stays on host memory.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">System Requirements</source>
          <target xml:space="preserve">System Requirements</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Supported Host OS</source>
          <target xml:space="preserve">Supported Host OS</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Windows 10</source>
          <target xml:space="preserve">Windows 10</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">Windows Server Technical Preview 3</source>
          <target xml:space="preserve">Windows Server Technical Preview 3</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">Future releases (Server 2016 +)</source>
          <target xml:space="preserve">Future releases (Server 2016 +)</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Supported Guest OS</source>
          <target xml:space="preserve">Supported Guest OS</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Windows 10</source>
          <target xml:space="preserve">Windows 10</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">Windows Server Technical Preview 3</source>
          <target xml:space="preserve">Windows Server Technical Preview 3</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Future releases (Server 2016 +)</source>
          <target xml:space="preserve">Future releases (Server 2016 +)</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Linux</source>
          <target xml:space="preserve">Linux</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Capabilities and Limitations</source>
          <target xml:space="preserve">Capabilities and Limitations</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Kernel mode or user mode</source>
          <target xml:space="preserve">Kernel mode or user mode</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">Data stream only</source>
          <target xml:space="preserve">Data stream only</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">No block memory so not the best for backup/video</source>
          <target xml:space="preserve">No block memory so not the best for backup/video</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Getting started</source>
          <target xml:space="preserve">Getting started</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">This guide assumes you're familiar with socket programming in C/C++.</source>
          <target xml:space="preserve">This guide assumes you're familiar with socket programming in C/C++.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">Step 1 - Register your service on the Hyper-V host</source>
          <target xml:space="preserve">Step 1 - Register your service on the Hyper-V host</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">In order to use a custom service integrated with Hyper-V, the new service must be registered with the Hyper-V Host's registry.</source>
          <target xml:space="preserve">In order to use a custom service integrated with Hyper-V, the new service must be registered with the Hyper-V Host's registry.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">By registering the service in the registry, you get:</source>
          <target xml:space="preserve">By registering the service in the registry, you get:</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">WMI management for enable, disable, and listing available services</source>
          <target xml:space="preserve">WMI management for enable, disable, and listing available services</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Onto the list of services allowed to communicate with virtual machines directly.</source>
          <target xml:space="preserve">Onto the list of services allowed to communicate with virtual machines directly.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">** Registry location and information **</source>
          <target xml:space="preserve">** Registry location and information **</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">In this registry location, you'll see several GUIDS.</source>
          <target xml:space="preserve">In this registry location, you'll see several GUIDS.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Those are our in-box services.</source>
          <target xml:space="preserve">Those are our in-box services.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">Information in the registry per service:</source>
          <target xml:space="preserve">Information in the registry per service:</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">`ElementName (REG_SZ)`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> -- this is the service's friendly name</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> -- this is the service's friendly name</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">To register your own service, create a new registry key using your own GUID and friendly name.</source>
          <target xml:space="preserve">To register your own service, create a new registry key using your own GUID and friendly name.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">The registry entry will look like this:</source>
          <target xml:space="preserve">The registry entry will look like this:</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">** Tip: **  To generate a GUID in PowerShell and copy it to the clipboard, run:</source>
          <target xml:space="preserve">** Tip: **  To generate a GUID in PowerShell and copy it to the clipboard, run:</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">

###</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> Step 2 - Create a simple host-side service



### Step 3 - Create a simple guest-side service

## More information about AF_HYPERV
Since Hyper-V sockets do not depend on a networking stack, TCP/IP, DNS, etc. the socket end point needed a non-IP, not hostname, format that still describes the connection.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> Step 2 - Create a simple host-side service



### Step 3 - Create a simple guest-side service

## More information about AF_HYPERV
Since Hyper-V sockets do not depend on a networking stack, TCP/IP, DNS, etc. the socket end point needed a non-IP, not hostname, format that still describes the connection.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">In lieu of an IP or hostname, AF_HYPERV endpoints rely heavily on two GUIDS:  
* VM ID – this is the unique ID assigned per VM.</source>
          <target xml:space="preserve">In lieu of an IP or hostname, AF_HYPERV endpoints rely heavily on two GUIDS:  
* VM ID – this is the unique ID assigned per VM.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">A VM’s ID can be found using the following PowerShell snippet.</source>
          <target xml:space="preserve">A VM’s ID can be found using the following PowerShell snippet.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">```PowerShell
(Get-VM -Name vmname).Id
```
* Service ID – GUID under which the service is registered in the Hyper-V host registry.</source>
          <target xml:space="preserve">```PowerShell
(Get-VM -Name vmname).Id
```
* Service ID – GUID under which the service is registered in the Hyper-V host registry.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">Registering a New Service](#GettingStarted)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc>.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc>.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">For connections from a service on the host to the service on a VM:</source>
          <target xml:space="preserve">For connections from a service on the host to the service on a VM:</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">VMID and Service ID</source>
          <target xml:space="preserve">VMID and Service ID</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">For connections from a service on a VM to the service on the host:</source>
          <target xml:space="preserve">For connections from a service on a VM to the service on the host:</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Zero GUID and Service ID

## Supported socket commands

Socket()</source>
          <target xml:space="preserve">Zero GUID and Service ID

## Supported socket commands

Socket()</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">Bind()</source>
          <target xml:space="preserve">Bind()</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Connect ()</source>
          <target xml:space="preserve">Connect ()</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">Send()</source>
          <target xml:space="preserve">Send()</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">Listen()</source>
          <target xml:space="preserve">Listen()</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">Accept()</source>
          <target xml:space="preserve">Accept()</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>