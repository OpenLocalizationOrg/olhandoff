<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Handle conflicts with offline data in universal Windows apps | Microsoft Azure</source>
          <target state="new">Handle conflicts with offline data in universal Windows apps | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Azure Mobile Services handle conflicts when syncing offline data in your universal Windows application</source>
          <target state="new">Learn how to use Azure Mobile Services handle conflicts when syncing offline data in your universal Windows application</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Handling conflicts with offline data sync in Mobile Services</source>
          <target state="new">Handling conflicts with offline data sync in Mobile Services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic shows you how to synchronize data and handle conflicts when using the offline capabilities of Azure Mobile Services.</source>
          <target state="new">This topic shows you how to synchronize data and handle conflicts when using the offline capabilities of Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you prefer to watch a video, the clip below follows the same steps as this tutorial.</source>
          <target state="new">If you prefer to watch a video, the clip below follows the same steps as this tutorial.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this tutorial, you download a universal Windows C# solution for an app that supports handling offline synchronization conflicts.</source>
          <target state="new">In this tutorial, you download a universal Windows C# solution for an app that supports handling offline synchronization conflicts.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You will integrate a mobile service with the app, and then run the Windows Store 8.1 and Windows Phone 8.1 clients to generate a sync conflict and resolve it.</source>
          <target state="new">You will integrate a mobile service with the app, and then run the Windows Store 8.1 and Windows Phone 8.1 clients to generate a sync conflict and resolve it.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This tutorial builds on the steps and the sample app from the previous tutorial [Get started with offline data].</source>
          <target state="new">This tutorial builds on the steps and the sample app from the previous tutorial [Get started with offline data].</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Before you begin this tutorial, you should first complete [Get started with offline data].</source>
          <target state="new">Before you begin this tutorial, you should first complete [Get started with offline data].</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This tutorial requires Visual Studio 2013 running on Windows 8.1.</source>
          <target state="new">This tutorial requires Visual Studio 2013 running on Windows 8.1.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Download the sample project</source>
          <target state="new">Download the sample project</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>![][0]</source>
          <target state="new">![][0]</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This tutorial is a walkthrough of how the [Todo Offline Mobile Services sample] handles sync conflicts between the local offline store and the Mobile Service database in Azure.</source>
          <target state="new">This tutorial is a walkthrough of how the [Todo Offline Mobile Services sample] handles sync conflicts between the local offline store and the Mobile Service database in Azure.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Download the zip file for the [Mobile Services Samples GitHub Repository] and extract it to a working directory.</source>
          <target state="new">Download the zip file for the [Mobile Services Samples GitHub Repository] and extract it to a working directory.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you haven't already installed SQLite for Windows 8.1 and Windows Phone 8.1 as mentioned in the [Get started with offline data] tutorial, install both runtimes.</source>
          <target state="new">If you haven't already installed SQLite for Windows 8.1 and Windows Phone 8.1 as mentioned in the [Get started with offline data] tutorial, install both runtimes.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2013, open the <bpt id="p1">*</bpt>mobile-services-samples\TodoOffline\WindowsUniversal\TodoOffline-Universal.sln<ept id="p1">*</ept><ph id="ph5" /> solution file.</source>
          <target state="new">In Visual Studio 2013, open the <bpt id="p1">*</bpt>mobile-services-samples\TodoOffline\WindowsUniversal\TodoOffline-Universal.sln<ept id="p1">*</ept><ph id="ph5" /> solution file.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Press the <bpt id="p2">**</bpt>F5<ept id="p2">**</ept><ph id="ph6" /> key to rebuild and run the project.</source>
          <target state="new">Press the <bpt id="p2">**</bpt>F5<ept id="p2">**</ept><ph id="ph6" /> key to rebuild and run the project.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Verify the NuGet packages are restored and the references are correctly set.</source>
          <target state="new">Verify the NuGet packages are restored and the references are correctly set.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph7">[AZURE.NOTE]</ph><ph id="ph8" /> You may need to delete any old references to the SQLite runtime and replace them with the updated reference as mentioned in the [Get started with offline data] tutorial.</source>
          <target state="new"><ph id="ph7">[AZURE.NOTE]</ph><ph id="ph8" /> You may need to delete any old references to the SQLite runtime and replace them with the updated reference as mentioned in the [Get started with offline data] tutorial.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the app, type some text in <bpt id="p3">**</bpt>Insert a TodoItem<ept id="p3">**</ept>, then click <bpt id="p4">**</bpt>Save<ept id="p4">**</ept><ph id="ph9" /> to add some todo items to the local store.</source>
          <target state="new">In the app, type some text in <bpt id="p3">**</bpt>Insert a TodoItem<ept id="p3">**</ept>, then click <bpt id="p4">**</bpt>Save<ept id="p4">**</ept><ph id="ph9" /> to add some todo items to the local store.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Then close the app.</source>
          <target state="new">Then close the app.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that the app is not yet connected to any mobile service, so the buttons <bpt id="p5">**</bpt>Push<ept id="p5">**</ept><ph id="ph10" /> and <bpt id="p6">**</bpt>Pull<ept id="p6">**</ept><ph id="ph11" /> will throw exceptions.</source>
          <target state="new">Note that the app is not yet connected to any mobile service, so the buttons <bpt id="p5">**</bpt>Push<ept id="p5">**</ept><ph id="ph10" /> and <bpt id="p6">**</bpt>Pull<ept id="p6">**</ept><ph id="ph11" /> will throw exceptions.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Test the app against your  mobile service</source>
          <target state="new">Test the app against your  mobile service</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Now it's time to test the app against Mobile Services.</source>
          <target state="new">Now it's time to test the app against Mobile Services.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the [Azure classic portal], find your mobile service's application key by clicking <bpt id="p7">**</bpt>Manage Keys<ept id="p7">**</ept><ph id="ph12" /> on the command bar of the <bpt id="p8">**</bpt>Dashboard<ept id="p8">**</ept><ph id="ph13" /> tab.</source>
          <target state="new">In the [Azure classic portal], find your mobile service's application key by clicking <bpt id="p7">**</bpt>Manage Keys<ept id="p7">**</ept><ph id="ph12" /> on the command bar of the <bpt id="p8">**</bpt>Dashboard<ept id="p8">**</ept><ph id="ph13" /> tab.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p9">**</bpt>Application Key<ept id="p9">**</ept>.</source>
          <target state="new">Copy the <bpt id="p9">**</bpt>Application Key<ept id="p9">**</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In Solution Explorer for Visual Studio, open the App.xaml.cs file in the client sample project.</source>
          <target state="new">In Solution Explorer for Visual Studio, open the App.xaml.cs file in the client sample project.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Change the initialization of the <bpt id="p10">**</bpt>MobileServiceClient<ept id="p10">**</ept><ph id="ph14" /> to use your mobile service URL and application key:</source>
          <target state="new">Change the initialization of the <bpt id="p10">**</bpt>MobileServiceClient<ept id="p10">**</ept><ph id="ph14" /> to use your mobile service URL and application key:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In Visual Studio, press the <bpt id="p11">**</bpt>F5<ept id="p11">**</ept><ph id="ph15" /> key to build and run the app again.</source>
          <target state="new">In Visual Studio, press the <bpt id="p11">**</bpt>F5<ept id="p11">**</ept><ph id="ph15" /> key to build and run the app again.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>![][0]</source>
          <target state="new">![][0]</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Update the data in the backend to create a conflict</source>
          <target state="new">Update the data in the backend to create a conflict</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In a real world scenario, a sync conflict would occur when one app pushes updates to a record in the database, and then another app tries to push an update to the same record using an outdated version field in that record.</source>
          <target state="new">In a real world scenario, a sync conflict would occur when one app pushes updates to a record in the database, and then another app tries to push an update to the same record using an outdated version field in that record.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you recall from the [Get started with offline data], the version system property is required to support the offline syncing features.</source>
          <target state="new">If you recall from the [Get started with offline data], the version system property is required to support the offline syncing features.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This version information is examined with each database update.</source>
          <target state="new">This version information is examined with each database update.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If an instance of the app tries to update a record using an outdated version, a conflict will occur and be caught as a <ph id="ph16">`MobileServicePreconditionFailedException`</ph><ph id="ph17" /> in the app.</source>
          <target state="new">If an instance of the app tries to update a record using an outdated version, a conflict will occur and be caught as a <ph id="ph16">`MobileServicePreconditionFailedException`</ph><ph id="ph17" /> in the app.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the app doesn't catch the <ph id="ph18">`MobileServicePreconditionFailedException`</ph><ph id="ph19" /> then a <ph id="ph20">`MobileServicePushFailedException`</ph><ph id="ph21" /> will end up being thrown describing how many sync errors were encountered.</source>
          <target state="new">If the app doesn't catch the <ph id="ph18">`MobileServicePreconditionFailedException`</ph><ph id="ph19" /> then a <ph id="ph20">`MobileServicePushFailedException`</ph><ph id="ph21" /> will end up being thrown describing how many sync errors were encountered.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph22">[AZURE.NOTE]</ph><ph id="ph23" /> To support synchronization of deleted records with offline data sync, you should enable <bpt id="p12">[</bpt>Soft Delete<ept id="p12">](mobile-services-using-soft-delete.md)</ept>.</source>
          <target state="new"><ph id="ph22">[AZURE.NOTE]</ph><ph id="ph23" /> To support synchronization of deleted records with offline data sync, you should enable <bpt id="p12">[</bpt>Soft Delete<ept id="p12">](mobile-services-using-soft-delete.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Otherwise, you have to manually remove records in the local store, or call <ph id="ph24">`IMobileServiceSyncTable::PurgeAsync()`</ph><ph id="ph25" /> to purge the local store.</source>
          <target state="new">Otherwise, you have to manually remove records in the local store, or call <ph id="ph24">`IMobileServiceSyncTable::PurgeAsync()`</ph><ph id="ph25" /> to purge the local store.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following steps show the Windows Phone 8.1 and Windows Store 8.1 clients running at the same time to cause and resolve a conflict using the sample.</source>
          <target state="new">The following steps show the Windows Phone 8.1 and Windows Store 8.1 clients running at the same time to cause and resolve a conflict using the sample.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In Visual Studio, right click the Windows Phone 8.1 project and click <bpt id="p13">**</bpt>Set as Startup Project<ept id="p13">**</ept>.</source>
          <target state="new">In Visual Studio, right click the Windows Phone 8.1 project and click <bpt id="p13">**</bpt>Set as Startup Project<ept id="p13">**</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Then press <bpt id="p14">**</bpt>Ctrl+F5<ept id="p14">**</ept><ph id="ph26" /> keys to run the Windows Phone 8.1 client without debugging.</source>
          <target state="new">Then press <bpt id="p14">**</bpt>Ctrl+F5<ept id="p14">**</ept><ph id="ph26" /> keys to run the Windows Phone 8.1 client without debugging.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Once you have the Windows Phone 8.1 client up and running in the emulator, click the <bpt id="p15">**</bpt>Pull<ept id="p15">**</ept><ph id="ph27" /> button to sync the local store with the current state of the database.</source>
          <target state="new">Once you have the Windows Phone 8.1 client up and running in the emulator, click the <bpt id="p15">**</bpt>Pull<ept id="p15">**</ept><ph id="ph27" /> button to sync the local store with the current state of the database.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>![][3]</source>
          <target state="new">![][3]</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In Visual Studio, right click the Windows 8.1 runtime project and click <bpt id="p16">**</bpt>Set as Startup Project<ept id="p16">**</ept><ph id="ph28" /> to set it back to the start up project.</source>
          <target state="new">In Visual Studio, right click the Windows 8.1 runtime project and click <bpt id="p16">**</bpt>Set as Startup Project<ept id="p16">**</ept><ph id="ph28" /> to set it back to the start up project.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Then press <bpt id="p17">**</bpt>F5<ept id="p17">**</ept><ph id="ph29" /> to run it.</source>
          <target state="new">Then press <bpt id="p17">**</bpt>F5<ept id="p17">**</ept><ph id="ph29" /> to run it.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Once you have the Windows Store 8.1 client up and running, click the <bpt id="p18">**</bpt>Pull<ept id="p18">**</ept><ph id="ph30" /> button to sync the local store with the current state of the database.</source>
          <target state="new">Once you have the Windows Store 8.1 client up and running, click the <bpt id="p18">**</bpt>Pull<ept id="p18">**</ept><ph id="ph30" /> button to sync the local store with the current state of the database.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>![][4]</source>
          <target state="new">![][4]</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>At this point point both clients are synchronized with the database.</source>
          <target state="new">At this point point both clients are synchronized with the database.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The code for both clients are also using incremental sync, so that they will only sync incomplete todo items.</source>
          <target state="new">The code for both clients are also using incremental sync, so that they will only sync incomplete todo items.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Completed todo items will be ignored.</source>
          <target state="new">Completed todo items will be ignored.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Choose one of the items and edit the text of the same item in both clients to a different value.</source>
          <target state="new">Choose one of the items and edit the text of the same item in both clients to a different value.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p19">**</bpt>Push<ept id="p19">**</ept><ph id="ph31" /> button to sync both changes with the database on the server.</source>
          <target state="new">Click the <bpt id="p19">**</bpt>Push<ept id="p19">**</ept><ph id="ph31" /> button to sync both changes with the database on the server.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>![][5]</source>
          <target state="new">![][5]</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>![][6]</source>
          <target state="new">![][6]</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The client whose push was executing last encounters the conflict and allows the user to decide which value to commit to the database.</source>
          <target state="new">The client whose push was executing last encounters the conflict and allows the user to decide which value to commit to the database.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The exception provides the correct version value which is used for resolving the conflict.</source>
          <target state="new">The exception provides the correct version value which is used for resolving the conflict.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>![][7]</source>
          <target state="new">![][7]</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Review of the code for handling sync conflicts</source>
          <target state="new">Review of the code for handling sync conflicts</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In order to use the offline features for Mobile Services, you must include the version column in both your local database and your data transfer object.</source>
          <target state="new">In order to use the offline features for Mobile Services, you must include the version column in both your local database and your data transfer object.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is accomplished by updating the <ph id="ph32">`TodoItem`</ph><ph id="ph33" /> class the following member:</source>
          <target state="new">This is accomplished by updating the <ph id="ph32">`TodoItem`</ph><ph id="ph33" /> class the following member:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph34">`__version`</ph><ph id="ph35" /> column is included in the local database in the  <ph id="ph36">`OnNavigatedTo()`</ph><ph id="ph37" /> method when the <ph id="ph38">`TodoItem`</ph><ph id="ph39" /> class is used to define the local store.</source>
          <target state="new">The <ph id="ph34">`__version`</ph><ph id="ph35" /> column is included in the local database in the  <ph id="ph36">`OnNavigatedTo()`</ph><ph id="ph37" /> method when the <ph id="ph38">`TodoItem`</ph><ph id="ph39" /> class is used to define the local store.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To handle offline sync conflicts in your code, you create a class that implements <ph id="ph40">`IMobileServiceSyncHandler`</ph>.</source>
          <target state="new">To handle offline sync conflicts in your code, you create a class that implements <ph id="ph40">`IMobileServiceSyncHandler`</ph>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Pass an object of this type in the call to <ph id="ph41">`MobileServiceClient.SyncContext.InitializeAsync()`</ph>.</source>
          <target state="new">Pass an object of this type in the call to <ph id="ph41">`MobileServiceClient.SyncContext.InitializeAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This also occurs in the  <ph id="ph42">`OnNavigatedTo()`</ph><ph id="ph43" /> method of the sample.</source>
          <target state="new">This also occurs in the  <ph id="ph42">`OnNavigatedTo()`</ph><ph id="ph43" /> method of the sample.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph44">`SyncHandler`</ph><ph id="ph45" /> in <bpt id="p20">**</bpt>SyncHandler.cs<ept id="p20">**</ept><ph id="ph46" /> implements <ph id="ph47">`IMobileServiceSyncHandler`</ph>.</source>
          <target state="new">The class <ph id="ph44">`SyncHandler`</ph><ph id="ph45" /> in <bpt id="p20">**</bpt>SyncHandler.cs<ept id="p20">**</ept><ph id="ph46" /> implements <ph id="ph47">`IMobileServiceSyncHandler`</ph>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The method <ph id="ph48">`ExecuteTableOperationAsync`</ph><ph id="ph49" /> is called when each push operation is sent to the server.</source>
          <target state="new">The method <ph id="ph48">`ExecuteTableOperationAsync`</ph><ph id="ph49" /> is called when each push operation is sent to the server.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If an exception of type <ph id="ph50">`MobileServicePreconditionFailedException`</ph><ph id="ph51" /> is thrown, this means that there is a conflict between the local and remote versions of an item.</source>
          <target state="new">If an exception of type <ph id="ph50">`MobileServicePreconditionFailedException`</ph><ph id="ph51" /> is thrown, this means that there is a conflict between the local and remote versions of an item.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To resolve conflicts in favor of the local item, you should simply retry the operation.</source>
          <target state="new">To resolve conflicts in favor of the local item, you should simply retry the operation.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Once a conflict has occurred, the local item version will be updated to match the server version, so executing the operation again will overwrite the server changes with the local changes:</source>
          <target state="new">Once a conflict has occurred, the local item version will be updated to match the server version, so executing the operation again will overwrite the server changes with the local changes:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To resolve conflicts in favor of the server item, simply return from the <ph id="ph52">`ExecuteTableOperationAsync`</ph>.</source>
          <target state="new">To resolve conflicts in favor of the server item, simply return from the <ph id="ph52">`ExecuteTableOperationAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The local version of the object will be discarded and replaced with the value from the server.</source>
          <target state="new">The local version of the object will be discarded and replaced with the value from the server.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To stop the push operation (but retain the queued changes), use the method <ph id="ph53">`AbortPush()`</ph>:</source>
          <target state="new">To stop the push operation (but retain the queued changes), use the method <ph id="ph53">`AbortPush()`</ph>:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This will stop the current push operation but will keep all pending changes, including the current operation if <ph id="ph54">`AbortPush`</ph><ph id="ph55" /> is called from <ph id="ph56">`ExecuteTableOperationAsync`</ph>.</source>
          <target state="new">This will stop the current push operation but will keep all pending changes, including the current operation if <ph id="ph54">`AbortPush`</ph><ph id="ph55" /> is called from <ph id="ph56">`ExecuteTableOperationAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The next time that <ph id="ph57">`PushAsync()`</ph><ph id="ph58" /> is called, these changes will be sent to the server.</source>
          <target state="new">The next time that <ph id="ph57">`PushAsync()`</ph><ph id="ph58" /> is called, these changes will be sent to the server.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When a push is canceled, <ph id="ph59">`PushAsync`</ph><ph id="ph60" /> will throw a <ph id="ph61">`MobileServicePushFailedException`</ph>, and the exception property <ph id="ph62">`PushResult.Status`</ph><ph id="ph63" /> will have the value <ph id="ph64">`MobileServicePushStatus.CancelledByOperation`</ph>.</source>
          <target state="new">When a push is canceled, <ph id="ph59">`PushAsync`</ph><ph id="ph60" /> will throw a <ph id="ph61">`MobileServicePushFailedException`</ph>, and the exception property <ph id="ph62">`PushResult.Status`</ph><ph id="ph63" /> will have the value <ph id="ph64">`MobileServicePushStatus.CancelledByOperation`</ph>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>[0]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/mobile-services-handling-conflicts-app-run1.png
[1]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/javascript-backend-database.png
[2]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/dotnet-backend-database.png
[3]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/wp81-view.png
[4]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/win81-view.png
[5]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/wp81-edit-text.png
[6]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/win81-edit-text.png
[7]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/conflict.png</source>
          <target state="new">[0]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/mobile-services-handling-conflicts-app-run1.png
[1]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/javascript-backend-database.png
[2]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/dotnet-backend-database.png
[3]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/wp81-view.png
[4]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/win81-view.png
[5]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/wp81-edit-text.png
[6]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/win81-edit-text.png
[7]: ./media/mobile-services-windows-store-dotnet-handling-conflicts-offline-data/conflict.png</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>[Handling conflicts code sample]: http://go.microsoft.com/fwlink/?LinkId=394787
[Get started with Mobile Services]: ../mobile-services-windows-store-get-started.md
[Get started with offline data]: mobile-services-windows-store-dotnet-get-started-offline-data.md
[SQLite for Windows 8.1]: http://go.microsoft.com/fwlink/?LinkId=394776
[Azure classic portal]: https://manage.windowsazure.com/
[Handling Database Conflicts]: mobile-services-windows-store-dotnet-handle-database-conflicts.md#test-app
[Mobile Services Samples GitHub Repository]: http://go.microsoft.com/fwlink/?LinkId=512865
[Todo Offline Mobile Services sample]: http://go.microsoft.com/fwlink/?LinkId=512866</source>
          <target state="new">[Handling conflicts code sample]: http://go.microsoft.com/fwlink/?LinkId=394787
[Get started with Mobile Services]: ../mobile-services-windows-store-get-started.md
[Get started with offline data]: mobile-services-windows-store-dotnet-get-started-offline-data.md
[SQLite for Windows 8.1]: http://go.microsoft.com/fwlink/?LinkId=394776
[Azure classic portal]: https://manage.windowsazure.com/
[Handling Database Conflicts]: mobile-services-windows-store-dotnet-handle-database-conflicts.md#test-app
[Mobile Services Samples GitHub Repository]: http://go.microsoft.com/fwlink/?LinkId=512865
[Todo Offline Mobile Services sample]: http://go.microsoft.com/fwlink/?LinkId=512866</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97bd4872b9dba42e30647af62a64c695f9832398</xliffext:olfilehash>
  </header>
</xliff>