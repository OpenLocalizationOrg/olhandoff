<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Add authentication to your universal Windows 8.1 app | Azure Mobile Services</source>
          <target state="new">Add authentication to your universal Windows 8.1 app | Azure Mobile Services</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Mobile Services to authenticate users of your Windows Store app through a variety of identity providers, including Google, Facebook, Twitter, and Microsoft.</source>
          <target state="new">Learn how to use Mobile Services to authenticate users of your Windows Store app through a variety of identity providers, including Google, Facebook, Twitter, and Microsoft.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Add authentication to your universal Windows 8.1 app</source>
          <target state="new">Add authentication to your universal Windows 8.1 app</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic shows you how to authenticate users in Azure Mobile Services from your universal Windows 8.1 app.</source>
          <target state="new">This topic shows you how to authenticate users in Azure Mobile Services from your universal Windows 8.1 app.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this tutorial, you add authentication to the quickstart project using an identity provider that is supported by Mobile Services.</source>
          <target state="new">In this tutorial, you add authentication to the quickstart project using an identity provider that is supported by Mobile Services.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>After being successfully authenticated and authorized by Mobile Services, the user ID value is displayed.</source>
          <target state="new">After being successfully authenticated and authorized by Mobile Services, the user ID value is displayed.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This tutorial is based on the Mobile Services quickstart.</source>
          <target state="new">This tutorial is based on the Mobile Services quickstart.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You must also first complete the tutorial <bpt id="p1">[</bpt><ept id="p1">Get started with Mobile Services]</ept>.</source>
          <target state="new">You must also first complete the tutorial <bpt id="p1">[</bpt><ept id="p1">Get started with Mobile Services]</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph3">[AZURE.NOTE]</ph>This tutorial shows you how to authenticate users in Windows Store and Windows Phone Store 8.1 apps.</source>
          <target state="new"><ph id="ph3">[AZURE.NOTE]</ph>This tutorial shows you how to authenticate users in Windows Store and Windows Phone Store 8.1 apps.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For a Windows Phone 8.0 or Windows Phone Silverlight 8.1 app, see this version of <bpt id="p2">[</bpt>Get started with authentication in Mobile Services<ept id="p2">](mobile-services-windows-phone-get-started-users.md)</ept>.</source>
          <target state="new">For a Windows Phone 8.0 or Windows Phone Silverlight 8.1 app, see this version of <bpt id="p2">[</bpt>Get started with authentication in Mobile Services<ept id="p2">](mobile-services-windows-phone-get-started-users.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Register your app for authentication and configure Mobile Services</source>
          <target state="new">Register your app for authentication and configure Mobile Services</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Restrict permissions to authenticated users</source>
          <target state="new">Restrict permissions to authenticated users</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph6">[AZURE.NOTE]</ph><ph id="ph7" /> When you use Visual Studio tools to connect your app to a Mobile Service, the tool generate two sets of <bpt id="p3">**</bpt>MobileServiceClient<ept id="p3">**</ept><ph id="ph8" /> definitions, one for each client platform.</source>
          <target state="new"><ph id="ph6">[AZURE.NOTE]</ph><ph id="ph7" /> When you use Visual Studio tools to connect your app to a Mobile Service, the tool generate two sets of <bpt id="p3">**</bpt>MobileServiceClient<ept id="p3">**</ept><ph id="ph8" /> definitions, one for each client platform.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is a good time to simplify the generated code by unifying the <ph id="ph9">`#if...#endif`</ph><ph id="ph10" /> wrapped <bpt id="p4">**</bpt>MobileServiceClient<ept id="p4">**</ept><ph id="ph11" /> definitions into a single unwrapped definition used by both versions of the app.</source>
          <target state="new">This is a good time to simplify the generated code by unifying the <ph id="ph9">`#if...#endif`</ph><ph id="ph10" /> wrapped <bpt id="p4">**</bpt>MobileServiceClient<ept id="p4">**</ept><ph id="ph11" /> definitions into a single unwrapped definition used by both versions of the app.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You won't need to do this if you downloaded the quickstart app from the <bpt id="p5">[</bpt><ept id="p5">Azure classic portal]</ept>.</source>
          <target state="new">You won't need to do this if you downloaded the quickstart app from the <bpt id="p5">[</bpt><ept id="p5">Azure classic portal]</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Add authentication to the app</source>
          <target state="new">Add authentication to the app</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Now, any user authenticated by your trusted identity providers can access the <bpt id="p6">*</bpt>TodoItem<ept id="p6">*</ept><ph id="ph13" /> table.</source>
          <target state="new">Now, any user authenticated by your trusted identity providers can access the <bpt id="p6">*</bpt>TodoItem<ept id="p6">*</ept><ph id="ph13" /> table.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To better secure user-specific data, you must also implement authorization.</source>
          <target state="new">To better secure user-specific data, you must also implement authorization.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To do this you get the user ID of a given user, which can then be used to determine what level of access that user should have for a given resource.</source>
          <target state="new">To do this you get the user ID of a given user, which can then be used to determine what level of access that user should have for a given resource.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Store the authorization token on the client</source>
          <target state="new">Store the authorization token on the client</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts.</source>
          <target state="new">The previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Not only is this method inefficient, you can run into usage-related issues should many customers try to start your app at the same time.</source>
          <target state="new">Not only is this method inefficient, you can run into usage-related issues should many customers try to start your app at the same time.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in.</source>
          <target state="new">A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph14">[AZURE.NOTE]</ph>You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication.</source>
          <target state="new"><ph id="ph14">[AZURE.NOTE]</ph>You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This tutorial uses service-managed authentication.</source>
          <target state="new">This tutorial uses service-managed authentication.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the next tutorial, <bpt id="p7">[</bpt>Service-side authorization of Mobile Services users<ept id="p7">](mobile-services-javascript-backend-service-side-authorization.md)</ept>, you will take the user ID value provided by Mobile Services based on an authenticated user and use it to filter the data returned by Mobile Services.</source>
          <target state="new">In the next tutorial, <bpt id="p7">[</bpt>Service-side authorization of Mobile Services users<ept id="p7">](mobile-services-javascript-backend-service-side-authorization.md)</ept>, you will take the user ID value provided by Mobile Services based on an authenticated user and use it to filter the data returned by Mobile Services.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="new">See also</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p8">[</bpt>Enhanced users feature<ept id="p8">](http://go.microsoft.com/fwlink/p/?LinkId=506605)</ept><ph id="ph16">&lt;br/&gt;</ph>
You can get additional user data maintained by the identity provider in your mobile service by by calling the <bpt id="p9">**</bpt>user.getIdentities()<ept id="p9">**</ept><ph id="ph17" /> function in server scripts.</source>
          <target state="new"><bpt id="p8">[</bpt>Enhanced users feature<ept id="p8">](http://go.microsoft.com/fwlink/p/?LinkId=506605)</ept><ph id="ph16">&lt;br/&gt;</ph>
You can get additional user data maintained by the identity provider in your mobile service by by calling the <bpt id="p9">**</bpt>user.getIdentities()<ept id="p9">**</ept><ph id="ph17" /> function in server scripts.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p10">[</bpt><ept id="p10">Mobile Services .NET How-to Conceptual Reference]</ept><ph id="ph18">&lt;br/&gt;</ph>Learn more about how to use Mobile Services with a .NET client.</source>
          <target state="new"><bpt id="p10">[</bpt><ept id="p10">Mobile Services .NET How-to Conceptual Reference]</ept><ph id="ph18">&lt;br/&gt;</ph>Learn more about how to use Mobile Services with a .NET client.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>[Register your app for authentication and configure Mobile Services]: #register
[Restrict table permissions to authenticated users]: #permissions
[Add authentication to the app]: #add-authentication
[Store authentication tokens on the client]: #tokens
[Next Steps]:#next-steps</source>
          <target state="new">[Register your app for authentication and configure Mobile Services]: #register
[Restrict table permissions to authenticated users]: #permissions
[Add authentication to the app]: #add-authentication
[Store authentication tokens on the client]: #tokens
[Next Steps]:#next-steps</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>[Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582
[My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039
[Live SDK for Windows]: http://go.microsoft.com/fwlink/p/?LinkId=262253</source>
          <target state="new">[Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582
[My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039
[Live SDK for Windows]: http://go.microsoft.com/fwlink/p/?LinkId=262253</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cc9a21f53a2c5fcde51438c28a6a1246e855940</xliffext:olfilehash>
  </header>
</xliff>