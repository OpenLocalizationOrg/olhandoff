<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pt-br" original="1/5/2016 8:36:40 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b7aa5b03a19ff1afa79f5ae96f24d034531e4b8</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>DSC for Linux nxFileLine Resource</source>
            <target state="new">DSC for Linux nxFileLine Resource</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>nxFileLine<ept id="2">&lt;/strong&gt;</ept> resource in PowerShell Desired State Configuration (DSC) provides a mechanism to to manage lines within a configuration file on a Linux node.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>nxFileLine<ept id="2">&lt;/strong&gt;</ept> resource in PowerShell Desired State Configuration (DSC) provides a mechanism to to manage lines within a configuration file on a Linux node.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Properties</source>
            <target state="new">Properties</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Property</source>
            <target state="new">Property</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>FilePath</source>
            <target state="new">FilePath</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The full path to the file to manage lines in on the target node.</source>
            <target state="new">The full path to the file to manage lines in on the target node.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>ContainsLine</source>
            <target state="new">ContainsLine</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>A line to ensure exists in the file.</source>
            <target state="new">A line to ensure exists in the file.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>This line will be appended to the file if it does not exist in the file.</source>
            <target state="new">This line will be appended to the file if it does not exist in the file.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ContainsLine<ept id="1">&lt;/strong&gt;</ept> is mandatory, but can be set to an empty string (`ContainsLine = ‘’``) if it is not needed.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ContainsLine<ept id="1">&lt;/strong&gt;</ept> is mandatory, but can be set to an empty string (`ContainsLine = ‘’``) if it is not needed.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>DoesNotContainPattern</source>
            <target state="new">DoesNotContainPattern</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>A regular expression pattern for lines that should not exist in the file.</source>
            <target state="new">A regular expression pattern for lines that should not exist in the file.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>For any lines that exist in the file that match this regular expression, the line will be removed from the file.</source>
            <target state="new">For any lines that exist in the file that match this regular expression, the line will be removed from the file.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>DependsOn</source>
            <target state="new">DependsOn</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Indicates that the configuration of another resource must run before this resource is configured.</source>
            <target state="new">Indicates that the configuration of another resource must run before this resource is configured.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>For example, if the <bpt id="2">&lt;strong&gt;</bpt>ID<ept id="2">&lt;/strong&gt;</ept> of the resource configuration script block that you want to run first is <bpt id="4">&lt;strong&gt;</bpt>ResourceName<ept id="4">&lt;/strong&gt;</ept> and its type is <bpt id="6">&lt;strong&gt;</bpt>ResourceType<ept id="6">&lt;/strong&gt;</ept>, the syntax for using this property is <bpt id="8">&lt;code&gt;</bpt>DependsOn = "[ResourceType]ResourceName"<ept id="8">&lt;/code&gt;</ept>.</source>
            <target state="new">For example, if the <bpt id="2">&lt;strong&gt;</bpt>ID<ept id="2">&lt;/strong&gt;</ept> of the resource configuration script block that you want to run first is <bpt id="4">&lt;strong&gt;</bpt>ResourceName<ept id="4">&lt;/strong&gt;</ept> and its type is <bpt id="6">&lt;strong&gt;</bpt>ResourceType<ept id="6">&lt;/strong&gt;</ept>, the syntax for using this property is <bpt id="8">&lt;code&gt;</bpt>DependsOn = "[ResourceType]ResourceName"<ept id="8">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>This example demonstrates using the <bpt id="2">&lt;strong&gt;</bpt>nxFileLine<ept id="2">&lt;/strong&gt;</ept> resource to configure the <bpt id="4">&lt;code&gt;</bpt>/etc/sudoers<ept id="4">&lt;/code&gt;</ept> file, ensuring that the user: monuser is configured to not requiretty.</source>
            <target state="new">This example demonstrates using the <bpt id="2">&lt;strong&gt;</bpt>nxFileLine<ept id="2">&lt;/strong&gt;</ept> resource to configure the <bpt id="4">&lt;code&gt;</bpt>/etc/sudoers<ept id="4">&lt;/code&gt;</ept> file, ensuring that the user: monuser is configured to not requiretty.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>