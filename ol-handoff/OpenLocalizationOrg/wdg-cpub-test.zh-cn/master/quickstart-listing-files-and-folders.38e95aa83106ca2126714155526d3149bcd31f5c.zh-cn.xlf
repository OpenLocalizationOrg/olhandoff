<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-cn" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">f6b11500475700ab00ff48c1ba578e4e7c599c61</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD</source>
          <target xml:space="preserve">ms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Enumerate and query files and folders</source>
          <target xml:space="preserve">title: Enumerate and query files and folders</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: Access files and folders in either a folder, library, device, or network location.</source>
          <target xml:space="preserve">description: Access files and folders in either a folder, library, device, or network location.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">You can also query the files and folders in a location by constructing file and folder queries.</source>
          <target xml:space="preserve">You can also query the files and folders in a location by constructing file and folder queries.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">Enumerate and query files and folders</source>
          <target xml:space="preserve">Enumerate and query files and folders</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Access files and folders in either a folder, library, device, or network location.</source>
          <target xml:space="preserve">Access files and folders in either a folder, library, device, or network location.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">You can also query the files and folders in a location by constructing file and folder queries.</source>
          <target xml:space="preserve">You can also query the files and folders in a location by constructing file and folder queries.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?linkid=619993)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Also see the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Folder enumeration sample</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Also see the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Folder enumeration sample</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Prerequisites</source>
          <target xml:space="preserve">Prerequisites</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Understand async programming for Universal Windows Platform (UWP) apps</source>
          <target xml:space="preserve">Understand async programming for Universal Windows Platform (UWP) apps</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187337)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can learn how to write asynchronous apps in C# or Visual Basic, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call asynchronous APIs in C# or Visual Basic</pc>.</source>
          <target xml:space="preserve">You can learn how to write asynchronous apps in C# or Visual Basic, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call asynchronous APIs in C# or Visual Basic</pc>.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187334)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To learn how to write asynchronous apps in C++, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in C++</pc>.</source>
          <target xml:space="preserve">To learn how to write asynchronous apps in C++, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in C++</pc>.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Access permissions to the location</source>
          <target xml:space="preserve">Access permissions to the location</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, the code in these examples require the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">picturesLibrary</pc> capability, but your location may require a different capability or no capability at all.</source>
          <target xml:space="preserve">For example, the code in these examples require the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">picturesLibrary</pc> capability, but your location may require a different capability or no capability at all.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](file-access-permissions.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To learn more, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File access permissions</pc>.</source>
          <target xml:space="preserve">To learn more, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File access permissions</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Enumerate files and folders in a location</source>
          <target xml:space="preserve">Enumerate files and folders in a location</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Remember to declare the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">picturesLibrary</pc> capability.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Remember to declare the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">picturesLibrary</pc> capability.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227276)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227156)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In this example we first use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFolder.GetFilesAsync</pc></pc> method to get all the files in the root folder of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PicturesLibrary</pc></pc> (not in subfolders) and list the name of each file.</source>
          <target xml:space="preserve">In this example we first use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFolder.GetFilesAsync</pc></pc> method to get all the files in the root folder of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PicturesLibrary</pc></pc> (not in subfolders) and list the name of each file.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227280)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Next, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetFoldersAsync</pc></pc> method to get all the subfolders in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PicturesLibrary</pc> and list the name of each subfolder.</source>
          <target xml:space="preserve">Next, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetFoldersAsync</pc></pc> method to get all the subfolders in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PicturesLibrary</pc> and list the name of each subfolder.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  In C# or Visual Basic, remember to put the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">async</pc> keyword in the method declaration of any method in which you use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">await</pc> operator.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  In C# or Visual Basic, remember to put the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">async</pc> keyword in the method declaration of any method in which you use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">await</pc> operator.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227286)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Alternatively, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetItemsAsync</pc></pc> method to get all items (both files and subfolders) in a particular location.</source>
          <target xml:space="preserve">Alternatively, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetItemsAsync</pc></pc> method to get all items (both files and subfolders) in a particular location.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br227156)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The following example uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GetItemsAsync</pc> method to get all files and subfolders in the root folder of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PicturesLibrary</pc></pc> (not in subfolders).</source>
          <target xml:space="preserve">The following example uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GetItemsAsync</pc> method to get all files and subfolders in the root folder of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PicturesLibrary</pc></pc> (not in subfolders).</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Then the example lists the name of each file and subfolder.</source>
          <target xml:space="preserve">Then the example lists the name of each file and subfolder.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">`"folder"`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If the item is a subfolder, the example appends <ph dataRef="id1" id="ph1" /> to the name.</source>
          <target xml:space="preserve">If the item is a subfolder, the example appends <ph dataRef="id1" id="ph1" /> to the name.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">();

create_task(picturesFolder-&gt;GetItemsAsync())</source>
          <target xml:space="preserve">();

create_task(picturesFolder-&gt;GetItemsAsync())</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">.then ([this, outputString] (IVectorView</source>
          <target xml:space="preserve">.then ([this, outputString] (IVectorView</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">^ items)</source>
          <target xml:space="preserve">^ items)</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">for ( unsigned int i = 0 ; i &lt; items-&gt;Size; i++)</source>
          <target xml:space="preserve">for ( unsigned int i = 0 ; i &lt; items-&gt;Size; i++)</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">*outputString += items-&gt;GetAt(i)-&gt;Name-&gt;Data();</source>
          <target xml:space="preserve">*outputString += items-&gt;GetAt(i)-&gt;Name-&gt;Data();</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">if(items-&gt;GetAt(i)-&gt;IsOfType(StorageItemTypes::Folder))</source>
          <target xml:space="preserve">if(items-&gt;GetAt(i)-&gt;IsOfType(StorageItemTypes::Folder))</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">*outputString += L"  folder\n";</source>
          <target xml:space="preserve">*outputString += L"  folder\n";</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">}</source>
          <target xml:space="preserve">}</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">else</source>
          <target xml:space="preserve">else</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">            *</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">outputString += L"\n";
        }
        m_OutputTextBlock-&gt;Text = ref new String((</pc>outputString).c_str());</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">outputString += L"\n";
        }
        m_OutputTextBlock-&gt;Text = ref new String((</pc>outputString).c_str());</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">}</source>
          <target xml:space="preserve">}</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">```
```csharp
StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
StringBuilder outputText = new StringBuilder();

IReadOnlyList</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">});
<ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">});
<ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">itemsList =</source>
          <target xml:space="preserve">itemsList =</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">await picturesFolder.GetItemsAsync();

foreach (var item in itemsList)</source>
          <target xml:space="preserve">await picturesFolder.GetItemsAsync();

foreach (var item in itemsList)</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">if (item is StorageFolder)</source>
          <target xml:space="preserve">if (item is StorageFolder)</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227156)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">outputText.Append(item.Name + " folder\n");

    }
    else
    {
        outputText.Append(item.Name + "\n");

    }
}
```
```vb
Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
Dim outputText As New StringBuilder

Dim itemsList As IReadOnlyList(Of IStorageItem) =
    Await picturesFolder.GetItemsAsync()

For Each item In itemsList

    If TypeOf item Is StorageFolder Then

        outputText.Append(item.Name &amp; " folder" &amp; vbLf)

    Else

        outputText.Append(item.Name &amp; vbLf)

    End If

Next item
```

## Query files in a location and enumerate matching files

In this example we query for all the files in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PicturesLibrary</pc></pc> grouped by the month, and this time the example recurses into subfolders.</source>
          <target xml:space="preserve">outputText.Append(item.Name + " folder\n");

    }
    else
    {
        outputText.Append(item.Name + "\n");

    }
}
```
```vb
Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
Dim outputText As New StringBuilder

Dim itemsList As IReadOnlyList(Of IStorageItem) =
    Await picturesFolder.GetItemsAsync()

For Each item In itemsList

    If TypeOf item Is StorageFolder Then

        outputText.Append(item.Name &amp; " folder" &amp; vbLf)

    Else

        outputText.Append(item.Name &amp; vbLf)

    End If

Next item
```

## Query files in a location and enumerate matching files

In this example we query for all the files in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PicturesLibrary</pc></pc> grouped by the month, and this time the example recurses into subfolders.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227262)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br207957)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">First, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFolder.CreateFolderQuery</pc></pc> and pass the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CommonFolderQuery.GroupByMonth</pc></pc> value to the method.</source>
          <target xml:space="preserve">First, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFolder.CreateFolderQuery</pc></pc> and pass the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CommonFolderQuery.GroupByMonth</pc></pc> value to the method.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208066)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">That gives us a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFolderQueryResult</pc></pc> object.</source>
          <target xml:space="preserve">That gives us a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFolderQueryResult</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208074)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227230)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Next we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFolderQueryResult.GetFoldersAsync</pc></pc> which returns <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFolder</pc></pc> objects representing virtual folders.</source>
          <target xml:space="preserve">Next we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFolderQueryResult.GetFoldersAsync</pc></pc> which returns <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFolder</pc></pc> objects representing virtual folders.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.</source>
          <target xml:space="preserve">In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">The output of the example looks similar to the following.</source>
          <target xml:space="preserve">The output of the example looks similar to the following.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>